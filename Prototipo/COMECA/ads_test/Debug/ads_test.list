
ads_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002660  08002660  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002668  08002668  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002668  08002668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000007c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000008c  2000008c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007302  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001534  00000000  00000000  00027342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000680  00000000  00000000  00028878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d8  00000000  00000000  00028ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f34b  00000000  00000000  000294d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000772b  00000000  00000000  0004881b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bdf44  00000000  00000000  0004ff46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010de8a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001958  00000000  00000000  0010dee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002638 	.word	0x08002638

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002638 	.word	0x08002638

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fa55 	bl	8000974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f88f 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f921 	bl	8000714 <MX_GPIO_Init>
  MX_SPI3_Init();
 80004d2:	f000 f8e9 	bl	80006a8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */


//  uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,                                            uint32_t Timeout)
  uint32_t Timeout = HAL_MAX_DELAY;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295
 80004da:	60fb      	str	r3, [r7, #12]

//  HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Size, Timeout);
//    HAL_SPI_TransmitReceive_IT(&hspi3, pTxData, pRxData, 4); //(&hspi3, pRxData, 2);

  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2110      	movs	r1, #16
 80004e0:	483e      	ldr	r0, [pc, #248]	; (80005dc <main+0x11c>)
 80004e2:	f000 fd89 	bl	8000ff8 <HAL_GPIO_WritePin>
//    HAL_SPI_Transmit(&hspi3, pTxData, 1, Timeout);
//  HAL_SPI_Transmit_IT(&hspi3, pTxData, 1);


//    HAL_SPI_Receive(&hspi3, pRxData, 2, Timeout);
    pRxData[0] = pRxData[0] & 0x7F;
 80004e6:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <main+0x120>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <main+0x120>)
 80004f2:	701a      	strb	r2, [r3, #0]
    pRxData[1] = pRxData[1] >> 3;
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <main+0x120>)
 80004f6:	785b      	ldrb	r3, [r3, #1]
 80004f8:	08db      	lsrs	r3, r3, #3
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b38      	ldr	r3, [pc, #224]	; (80005e0 <main+0x120>)
 80004fe:	705a      	strb	r2, [r3, #1]

    uint16_t tuvi = (((uint16_t)pRxData[0]) << 5) | pRxData[1];
 8000500:	4b37      	ldr	r3, [pc, #220]	; (80005e0 <main+0x120>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	015b      	lsls	r3, r3, #5
 8000506:	b21a      	sxth	r2, r3
 8000508:	4b35      	ldr	r3, [pc, #212]	; (80005e0 <main+0x120>)
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	b21b      	sxth	r3, r3
 800050e:	4313      	orrs	r3, r2
 8000510:	b21b      	sxth	r3, r3
 8000512:	817b      	strh	r3, [r7, #10]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2110      	movs	r1, #16
 8000518:	4830      	ldr	r0, [pc, #192]	; (80005dc <main+0x11c>)
 800051a:	f000 fd6d 	bl	8000ff8 <HAL_GPIO_WritePin>
	    pTxData[0]=ADC_CH2_MASK;
 800051e:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <main+0x124>)
 8000520:	22a7      	movs	r2, #167	; 0xa7
 8000522:	701a      	strb	r2, [r3, #0]
	    HAL_SPI_Transmit(&hspi3, pTxData, 1, Timeout);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2201      	movs	r2, #1
 8000528:	492e      	ldr	r1, [pc, #184]	; (80005e4 <main+0x124>)
 800052a:	482f      	ldr	r0, [pc, #188]	; (80005e8 <main+0x128>)
 800052c:	f001 fa1b 	bl	8001966 <HAL_SPI_Transmit>
	//  HAL_SPI_Transmit_IT(&hspi3, pTxData, 1);


	    HAL_SPI_Receive(&hspi3, pRxData, 2, Timeout);
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	2202      	movs	r2, #2
 8000534:	492a      	ldr	r1, [pc, #168]	; (80005e0 <main+0x120>)
 8000536:	482c      	ldr	r0, [pc, #176]	; (80005e8 <main+0x128>)
 8000538:	f001 fb51 	bl	8001bde <HAL_SPI_Receive>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	4826      	ldr	r0, [pc, #152]	; (80005dc <main+0x11c>)
 8000542:	f000 fd59 	bl	8000ff8 <HAL_GPIO_WritePin>
	    pRxData[0] = pRxData[0] & 0x7F;
 8000546:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <main+0x120>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <main+0x120>)
 8000552:	701a      	strb	r2, [r3, #0]
	    pRxData[1] = pRxData[1] >> 3;
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <main+0x120>)
 8000556:	785b      	ldrb	r3, [r3, #1]
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <main+0x120>)
 800055e:	705a      	strb	r2, [r3, #1]

	     tuvi = (((uint16_t)pRxData[0]) << 5) | pRxData[1];
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <main+0x120>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	015b      	lsls	r3, r3, #5
 8000566:	b21a      	sxth	r2, r3
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <main+0x120>)
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	b21b      	sxth	r3, r3
 800056e:	4313      	orrs	r3, r2
 8000570:	b21b      	sxth	r3, r3
 8000572:	817b      	strh	r3, [r7, #10]


	     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2110      	movs	r1, #16
 8000578:	4818      	ldr	r0, [pc, #96]	; (80005dc <main+0x11c>)
 800057a:	f000 fd3d 	bl	8000ff8 <HAL_GPIO_WritePin>
		    pTxData[0]=ADC_CH3_MASK;
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <main+0x124>)
 8000580:	22e7      	movs	r2, #231	; 0xe7
 8000582:	701a      	strb	r2, [r3, #0]
		    HAL_SPI_Transmit(&hspi3, pTxData, 1, Timeout);
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2201      	movs	r2, #1
 8000588:	4916      	ldr	r1, [pc, #88]	; (80005e4 <main+0x124>)
 800058a:	4817      	ldr	r0, [pc, #92]	; (80005e8 <main+0x128>)
 800058c:	f001 f9eb 	bl	8001966 <HAL_SPI_Transmit>
		//  HAL_SPI_Transmit_IT(&hspi3, pTxData, 1);


		    HAL_SPI_Receive(&hspi3, pRxData, 2, Timeout);
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2202      	movs	r2, #2
 8000594:	4912      	ldr	r1, [pc, #72]	; (80005e0 <main+0x120>)
 8000596:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0x128>)
 8000598:	f001 fb21 	bl	8001bde <HAL_SPI_Receive>
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2110      	movs	r1, #16
 80005a0:	480e      	ldr	r0, [pc, #56]	; (80005dc <main+0x11c>)
 80005a2:	f000 fd29 	bl	8000ff8 <HAL_GPIO_WritePin>
		    pRxData[0] = pRxData[0] & 0x7F;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <main+0x120>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <main+0x120>)
 80005b2:	701a      	strb	r2, [r3, #0]
		    pRxData[1] = pRxData[1] >> 3;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <main+0x120>)
 80005b6:	785b      	ldrb	r3, [r3, #1]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <main+0x120>)
 80005be:	705a      	strb	r2, [r3, #1]

		     tuvi = (((uint16_t)pRxData[0]) << 5) | pRxData[1];
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <main+0x120>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	015b      	lsls	r3, r3, #5
 80005c6:	b21a      	sxth	r2, r3
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <main+0x120>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b21b      	sxth	r3, r3
 80005d2:	817b      	strh	r3, [r7, #10]

		     int a =5;
 80005d4:	2305      	movs	r3, #5
 80005d6:	607b      	str	r3, [r7, #4]
  {
 80005d8:	e79c      	b.n	8000514 <main+0x54>
 80005da:	bf00      	nop
 80005dc:	40020000 	.word	0x40020000
 80005e0:	2000002c 	.word	0x2000002c
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000030 	.word	0x20000030

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 f814 	bl	8002628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xb4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xb4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xb4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <SystemClock_Config+0xb8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <SystemClock_Config+0xb8>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <SystemClock_Config+0xb8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fce5 	bl	800102c <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000668:	f000 f896 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ff48 	bl	800151c <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000692:	f000 f881 	bl	8000798 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_SPI3_Init+0x64>)
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_SPI3_Init+0x68>)
 80006b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_SPI3_Init+0x64>)
 80006b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_SPI3_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_SPI3_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_SPI3_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_SPI3_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_SPI3_Init+0x64>)
 80006d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_SPI3_Init+0x64>)
 80006dc:	2218      	movs	r2, #24
 80006de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_SPI3_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_SPI3_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_SPI3_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_SPI3_Init+0x64>)
 80006f4:	220a      	movs	r2, #10
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_SPI3_Init+0x64>)
 80006fa:	f001 f8ab 	bl	8001854 <HAL_SPI_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000704:	f000 f848 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000030 	.word	0x20000030
 8000710:	40003c00 	.word	0x40003c00

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0x7c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_GPIO_Init+0x7c>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0x7c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_GPIO_Init+0x7c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <MX_GPIO_Init+0x7c>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_GPIO_Init+0x7c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2110      	movs	r1, #16
 8000766:	480b      	ldr	r0, [pc, #44]	; (8000794 <MX_GPIO_Init+0x80>)
 8000768:	f000 fc46 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800076c:	2310      	movs	r3, #16
 800076e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0x80>)
 8000784:	f000 fa9c 	bl	8000cc0 <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_MspInit+0x4c>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <HAL_SPI_MspInit+0x94>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d134      	bne.n	8000880 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <HAL_SPI_MspInit+0x98>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a1b      	ldr	r2, [pc, #108]	; (800088c <HAL_SPI_MspInit+0x98>)
 8000820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_SPI_MspInit+0x98>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_SPI_MspInit+0x98>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_SPI_MspInit+0x98>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_SPI_MspInit+0x98>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800084e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000860:	2306      	movs	r3, #6
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <HAL_SPI_MspInit+0x9c>)
 800086c:	f000 fa28 	bl	8000cc0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	2033      	movs	r0, #51	; 0x33
 8000876:	f000 f9ca 	bl	8000c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800087a:	2033      	movs	r0, #51	; 0x33
 800087c:	f000 f9e3 	bl	8000c46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40003c00 	.word	0x40003c00
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 f89a 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <SPI3_IRQHandler+0x10>)
 80008ee:	f001 fc29 	bl	8002144 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000030 	.word	0x20000030

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000926:	490e      	ldr	r1, [pc, #56]	; (8000960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000928:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800093c:	4c0b      	ldr	r4, [pc, #44]	; (800096c <LoopFillZerobss+0x26>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800094a:	f7ff ffd7 	bl	80008fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f001 fe47 	bl	80025e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fdb5 	bl	80004c0 <main>
  bx  lr    
 8000956:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000964:	08002670 	.word	0x08002670
  ldr r2, =_sbss
 8000968:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800096c:	2000008c 	.word	0x2000008c

08000970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>
	...

08000974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <HAL_Init+0x40>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_Init+0x40>)
 800098a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800098e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_Init+0x40>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_Init+0x40>)
 8000996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800099a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f92b 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	200f      	movs	r0, #15
 80009a4:	f000 f808 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fefc 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023c00 	.word	0x40023c00

080009b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x54>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_InitTick+0x58>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f943 	bl	8000c62 <HAL_SYSTICK_Config>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00e      	b.n	8000a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d80a      	bhi.n	8000a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f000 f90b 	bl	8000c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f8:	4a06      	ldr	r2, [pc, #24]	; (8000a14 <HAL_InitTick+0x5c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e000      	b.n	8000a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000004 	.word	0x20000004
 8000a10:	2000000c 	.word	0x2000000c
 8000a14:	20000008 	.word	0x20000008

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000000c 	.word	0x2000000c
 8000a3c:	20000088 	.word	0x20000088

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000088 	.word	0x20000088

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff29 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c20:	f7ff ff3e 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	68b9      	ldr	r1, [r7, #8]
 8000c2a:	6978      	ldr	r0, [r7, #20]
 8000c2c:	f7ff ff8e 	bl	8000b4c <NVIC_EncodePriority>
 8000c30:	4602      	mov	r2, r0
 8000c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff5d 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff31 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffa2 	bl	8000bb4 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d004      	beq.n	8000c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e00c      	b.n	8000cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2205      	movs	r2, #5
 8000c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0201 	bic.w	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e16b      	b.n	8000fb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 815a 	bne.w	8000fae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80b4 	beq.w	8000fae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b60      	ldr	r3, [pc, #384]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a5f      	ldr	r2, [pc, #380]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a5b      	ldr	r2, [pc, #364]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_GPIO_Init+0x314>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x226>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x318>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d025      	beq.n	8000ee2 <HAL_GPIO_Init+0x222>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a50      	ldr	r2, [pc, #320]	; (8000fdc <HAL_GPIO_Init+0x31c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01f      	beq.n	8000ede <HAL_GPIO_Init+0x21e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <HAL_GPIO_Init+0x320>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <HAL_GPIO_Init+0x324>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4d      	ldr	r2, [pc, #308]	; (8000fe8 <HAL_GPIO_Init+0x328>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <HAL_GPIO_Init+0x32c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <HAL_GPIO_Init+0x330>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x20a>
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	e00e      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eca:	2308      	movs	r3, #8
 8000ecc:	e00c      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00a      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e008      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	e006      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000eda:	2303      	movs	r3, #3
 8000edc:	e004      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_GPIO_Init+0x228>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	f002 0203 	and.w	r2, r2, #3
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef8:	4935      	ldr	r1, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x310>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	3302      	adds	r3, #2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f2a:	4a32      	ldr	r2, [pc, #200]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f30:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f54:	4a27      	ldr	r2, [pc, #156]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_GPIO_Init+0x334>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	f67f ae90 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40013800 	.word	0x40013800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020c00 	.word	0x40020c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40021400 	.word	0x40021400
 8000fec:	40021800 	.word	0x40021800
 8000ff0:	40021c00 	.word	0x40021c00
 8000ff4:	40013c00 	.word	0x40013c00

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001014:	e003      	b.n	800101e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e264      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d075      	beq.n	8001136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104a:	4ba3      	ldr	r3, [pc, #652]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b04      	cmp	r3, #4
 8001054:	d00c      	beq.n	8001070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001056:	4ba0      	ldr	r3, [pc, #640]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800105e:	2b08      	cmp	r3, #8
 8001060:	d112      	bne.n	8001088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001062:	4b9d      	ldr	r3, [pc, #628]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800106e:	d10b      	bne.n	8001088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	4b99      	ldr	r3, [pc, #612]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d05b      	beq.n	8001134 <HAL_RCC_OscConfig+0x108>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d157      	bne.n	8001134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e23f      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001090:	d106      	bne.n	80010a0 <HAL_RCC_OscConfig+0x74>
 8001092:	4b91      	ldr	r3, [pc, #580]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a90      	ldr	r2, [pc, #576]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01d      	b.n	80010dc <HAL_RCC_OscConfig+0xb0>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a8:	d10c      	bne.n	80010c4 <HAL_RCC_OscConfig+0x98>
 80010aa:	4b8b      	ldr	r3, [pc, #556]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a8a      	ldr	r2, [pc, #552]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	4b88      	ldr	r3, [pc, #544]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a87      	ldr	r2, [pc, #540]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e00b      	b.n	80010dc <HAL_RCC_OscConfig+0xb0>
 80010c4:	4b84      	ldr	r3, [pc, #528]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a83      	ldr	r2, [pc, #524]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b81      	ldr	r3, [pc, #516]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a80      	ldr	r2, [pc, #512]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d013      	beq.n	800110c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fcac 	bl	8000a40 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ec:	f7ff fca8 	bl	8000a40 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b64      	cmp	r3, #100	; 0x64
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e204      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f0      	beq.n	80010ec <HAL_RCC_OscConfig+0xc0>
 800110a:	e014      	b.n	8001136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fc98 	bl	8000a40 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fc94 	bl	8000a40 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e1f0      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001126:	4b6c      	ldr	r3, [pc, #432]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0xe8>
 8001132:	e000      	b.n	8001136 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d063      	beq.n	800120a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001142:	4b65      	ldr	r3, [pc, #404]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00b      	beq.n	8001166 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800114e:	4b62      	ldr	r3, [pc, #392]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001156:	2b08      	cmp	r3, #8
 8001158:	d11c      	bne.n	8001194 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115a:	4b5f      	ldr	r3, [pc, #380]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d116      	bne.n	8001194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001166:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_RCC_OscConfig+0x152>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e1c4      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b56      	ldr	r3, [pc, #344]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4952      	ldr	r1, [pc, #328]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001192:	e03a      	b.n	800120a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119c:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <HAL_RCC_OscConfig+0x2b0>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff fc4d 	bl	8000a40 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc49 	bl	8000a40 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e1a5      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4940      	ldr	r1, [pc, #256]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
 80011dc:	e015      	b.n	800120a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <HAL_RCC_OscConfig+0x2b0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc2c 	bl	8000a40 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ec:	f7ff fc28 	bl	8000a40 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e184      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d030      	beq.n	8001278 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d016      	beq.n	800124c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <HAL_RCC_OscConfig+0x2b4>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001224:	f7ff fc0c 	bl	8000a40 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122c:	f7ff fc08 	bl	8000a40 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e164      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x200>
 800124a:	e015      	b.n	8001278 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <HAL_RCC_OscConfig+0x2b4>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001252:	f7ff fbf5 	bl	8000a40 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125a:	f7ff fbf1 	bl	8000a40 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e14d      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f0      	bne.n	800125a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80a0 	beq.w	80013c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_OscConfig+0x2b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d121      	bne.n	8001306 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_RCC_OscConfig+0x2b8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <HAL_RCC_OscConfig+0x2b8>)
 80012c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fbb7 	bl	8000a40 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	e011      	b.n	80012fa <HAL_RCC_OscConfig+0x2ce>
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	42470000 	.word	0x42470000
 80012e0:	42470e80 	.word	0x42470e80
 80012e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e8:	f7ff fbaa 	bl	8000a40 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e106      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_RCC_OscConfig+0x4e4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d106      	bne.n	800131c <HAL_RCC_OscConfig+0x2f0>
 800130e:	4b81      	ldr	r3, [pc, #516]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	4a80      	ldr	r2, [pc, #512]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6713      	str	r3, [r2, #112]	; 0x70
 800131a:	e01c      	b.n	8001356 <HAL_RCC_OscConfig+0x32a>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x312>
 8001324:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001328:	4a7a      	ldr	r2, [pc, #488]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6713      	str	r3, [r2, #112]	; 0x70
 8001330:	4b78      	ldr	r3, [pc, #480]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001334:	4a77      	ldr	r2, [pc, #476]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6713      	str	r3, [r2, #112]	; 0x70
 800133c:	e00b      	b.n	8001356 <HAL_RCC_OscConfig+0x32a>
 800133e:	4b75      	ldr	r3, [pc, #468]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a74      	ldr	r2, [pc, #464]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001344:	f023 0301 	bic.w	r3, r3, #1
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
 800134a:	4b72      	ldr	r3, [pc, #456]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800134c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134e:	4a71      	ldr	r2, [pc, #452]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001350:	f023 0304 	bic.w	r3, r3, #4
 8001354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d015      	beq.n	800138a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135e:	f7ff fb6f 	bl	8000a40 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001364:	e00a      	b.n	800137c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fb6b 	bl	8000a40 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	4293      	cmp	r3, r2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e0c5      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0ee      	beq.n	8001366 <HAL_RCC_OscConfig+0x33a>
 8001388:	e014      	b.n	80013b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb59 	bl	8000a40 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb55 	bl	8000a40 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0af      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ee      	bne.n	8001392 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d105      	bne.n	80013c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ba:	4b56      	ldr	r3, [pc, #344]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a55      	ldr	r2, [pc, #340]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80013c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 809b 	beq.w	8001506 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d05c      	beq.n	8001496 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d141      	bne.n	8001468 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <HAL_RCC_OscConfig+0x4ec>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb29 	bl	8000a40 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f2:	f7ff fb25 	bl	8000a40 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e081      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	019b      	lsls	r3, r3, #6
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	085b      	lsrs	r3, r3, #1
 8001428:	3b01      	subs	r3, #1
 800142a:	041b      	lsls	r3, r3, #16
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	061b      	lsls	r3, r3, #24
 8001434:	4937      	ldr	r1, [pc, #220]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <HAL_RCC_OscConfig+0x4ec>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fafe 	bl	8000a40 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff fafa 	bl	8000a40 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e056      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x41c>
 8001466:	e04e      	b.n	8001506 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_OscConfig+0x4ec>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fae7 	bl	8000a40 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fae3 	bl	8000a40 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e03f      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x44a>
 8001494:	e037      	b.n	8001506 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e032      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014a2:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_RCC_OscConfig+0x4e8>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d028      	beq.n	8001502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d121      	bne.n	8001502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d11a      	bne.n	8001502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014d2:	4013      	ands	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014da:	4293      	cmp	r3, r2
 80014dc:	d111      	bne.n	8001502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	3b01      	subs	r3, #1
 80014ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40007000 	.word	0x40007000
 8001514:	40023800 	.word	0x40023800
 8001518:	42470060 	.word	0x42470060

0800151c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0cc      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d90c      	bls.n	8001558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800157a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d044      	beq.n	800163c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d119      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d003      	beq.n	80015da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ea:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e067      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b37      	ldr	r3, [pc, #220]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4934      	ldr	r1, [pc, #208]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff fa18 	bl	8000a40 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff fa14 	bl	8000a40 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e04f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d20c      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	490a      	ldr	r1, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	5ccb      	ldrb	r3, [r1, r3]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1c8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f978 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00
 80016d8:	40023800 	.word	0x40023800
 80016dc:	08002650 	.word	0x08002650
 80016e0:	20000004 	.word	0x20000004
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016ee:	2100      	movs	r1, #0
 80016f0:	6079      	str	r1, [r7, #4]
 80016f2:	2100      	movs	r1, #0
 80016f4:	60f9      	str	r1, [r7, #12]
 80016f6:	2100      	movs	r1, #0
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016fa:	2100      	movs	r1, #0
 80016fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016fe:	4952      	ldr	r1, [pc, #328]	; (8001848 <HAL_RCC_GetSysClockFreq+0x160>)
 8001700:	6889      	ldr	r1, [r1, #8]
 8001702:	f001 010c 	and.w	r1, r1, #12
 8001706:	2908      	cmp	r1, #8
 8001708:	d00d      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x3e>
 800170a:	2908      	cmp	r1, #8
 800170c:	f200 8094 	bhi.w	8001838 <HAL_RCC_GetSysClockFreq+0x150>
 8001710:	2900      	cmp	r1, #0
 8001712:	d002      	beq.n	800171a <HAL_RCC_GetSysClockFreq+0x32>
 8001714:	2904      	cmp	r1, #4
 8001716:	d003      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x38>
 8001718:	e08e      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800171a:	4b4c      	ldr	r3, [pc, #304]	; (800184c <HAL_RCC_GetSysClockFreq+0x164>)
 800171c:	60bb      	str	r3, [r7, #8]
       break;
 800171e:	e08e      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 8001722:	60bb      	str	r3, [r7, #8]
      break;
 8001724:	e08b      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001726:	4948      	ldr	r1, [pc, #288]	; (8001848 <HAL_RCC_GetSysClockFreq+0x160>)
 8001728:	6849      	ldr	r1, [r1, #4]
 800172a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800172e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001730:	4945      	ldr	r1, [pc, #276]	; (8001848 <HAL_RCC_GetSysClockFreq+0x160>)
 8001732:	6849      	ldr	r1, [r1, #4]
 8001734:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001738:	2900      	cmp	r1, #0
 800173a:	d024      	beq.n	8001786 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173c:	4942      	ldr	r1, [pc, #264]	; (8001848 <HAL_RCC_GetSysClockFreq+0x160>)
 800173e:	6849      	ldr	r1, [r1, #4]
 8001740:	0989      	lsrs	r1, r1, #6
 8001742:	4608      	mov	r0, r1
 8001744:	f04f 0100 	mov.w	r1, #0
 8001748:	f240 14ff 	movw	r4, #511	; 0x1ff
 800174c:	f04f 0500 	mov.w	r5, #0
 8001750:	ea00 0204 	and.w	r2, r0, r4
 8001754:	ea01 0305 	and.w	r3, r1, r5
 8001758:	493d      	ldr	r1, [pc, #244]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 800175a:	fb01 f003 	mul.w	r0, r1, r3
 800175e:	2100      	movs	r1, #0
 8001760:	fb01 f102 	mul.w	r1, r1, r2
 8001764:	1844      	adds	r4, r0, r1
 8001766:	493a      	ldr	r1, [pc, #232]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 8001768:	fba2 0101 	umull	r0, r1, r2, r1
 800176c:	1863      	adds	r3, r4, r1
 800176e:	4619      	mov	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	461a      	mov	r2, r3
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	f7fe fd26 	bl	80001c8 <__aeabi_uldivmod>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4613      	mov	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e04a      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001786:	4b30      	ldr	r3, [pc, #192]	; (8001848 <HAL_RCC_GetSysClockFreq+0x160>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	099b      	lsrs	r3, r3, #6
 800178c:	461a      	mov	r2, r3
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	ea02 0400 	and.w	r4, r2, r0
 800179e:	ea03 0501 	and.w	r5, r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	014b      	lsls	r3, r1, #5
 80017b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017b4:	0142      	lsls	r2, r0, #5
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	1b00      	subs	r0, r0, r4
 80017bc:	eb61 0105 	sbc.w	r1, r1, r5
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	018b      	lsls	r3, r1, #6
 80017ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017ce:	0182      	lsls	r2, r0, #6
 80017d0:	1a12      	subs	r2, r2, r0
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	00d9      	lsls	r1, r3, #3
 80017e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017e4:	00d0      	lsls	r0, r2, #3
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	1912      	adds	r2, r2, r4
 80017ec:	eb45 0303 	adc.w	r3, r5, r3
 80017f0:	f04f 0000 	mov.w	r0, #0
 80017f4:	f04f 0100 	mov.w	r1, #0
 80017f8:	0299      	lsls	r1, r3, #10
 80017fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017fe:	0290      	lsls	r0, r2, #10
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	461a      	mov	r2, r3
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	f7fe fcda 	bl	80001c8 <__aeabi_uldivmod>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4613      	mov	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_RCC_GetSysClockFreq+0x160>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	3301      	adds	r3, #1
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	60bb      	str	r3, [r7, #8]
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_RCC_GetSysClockFreq+0x164>)
 800183a:	60bb      	str	r3, [r7, #8]
      break;
 800183c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183e:	68bb      	ldr	r3, [r7, #8]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	00f42400 	.word	0x00f42400
 8001850:	017d7840 	.word	0x017d7840

08001854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e07b      	b.n	800195e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2b00      	cmp	r3, #0
 800186c:	d108      	bne.n	8001880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001876:	d009      	beq.n	800188c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	61da      	str	r2, [r3, #28]
 800187e:	e005      	b.n	800188c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d106      	bne.n	80018ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe ffa4 	bl	80007f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fc:	431a      	orrs	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001910:	ea42 0103 	orr.w	r1, r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	f003 0104 	and.w	r1, r3, #4
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f003 0210 	and.w	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	69da      	ldr	r2, [r3, #28]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b088      	sub	sp, #32
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4613      	mov	r3, r2
 8001974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001980:	2b01      	cmp	r3, #1
 8001982:	d101      	bne.n	8001988 <HAL_SPI_Transmit+0x22>
 8001984:	2302      	movs	r3, #2
 8001986:	e126      	b.n	8001bd6 <HAL_SPI_Transmit+0x270>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001990:	f7ff f856 	bl	8000a40 <HAL_GetTick>
 8001994:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d002      	beq.n	80019ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019aa:	e10b      	b.n	8001bc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_SPI_Transmit+0x52>
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80019bc:	e102      	b.n	8001bc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	88fa      	ldrh	r2, [r7, #6]
 80019d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a04:	d10f      	bne.n	8001a26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	2b40      	cmp	r3, #64	; 0x40
 8001a32:	d007      	beq.n	8001a44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a4c:	d14b      	bne.n	8001ae6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_SPI_Transmit+0xf6>
 8001a56:	8afb      	ldrh	r3, [r7, #22]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d13e      	bne.n	8001ada <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	1c9a      	adds	r2, r3, #2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a80:	e02b      	b.n	8001ada <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d112      	bne.n	8001ab6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	881a      	ldrh	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	1c9a      	adds	r2, r3, #2
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ab4:	e011      	b.n	8001ada <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ab6:	f7fe ffc3 	bl	8000a40 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d803      	bhi.n	8001ace <HAL_SPI_Transmit+0x168>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d102      	bne.n	8001ad4 <HAL_SPI_Transmit+0x16e>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d102      	bne.n	8001ada <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ad8:	e074      	b.n	8001bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1ce      	bne.n	8001a82 <HAL_SPI_Transmit+0x11c>
 8001ae4:	e04c      	b.n	8001b80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_SPI_Transmit+0x18e>
 8001aee:	8afb      	ldrh	r3, [r7, #22]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d140      	bne.n	8001b76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	330c      	adds	r3, #12
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b1a:	e02c      	b.n	8001b76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d113      	bne.n	8001b52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	330c      	adds	r3, #12
 8001b34:	7812      	ldrb	r2, [r2, #0]
 8001b36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b50:	e011      	b.n	8001b76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b52:	f7fe ff75 	bl	8000a40 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d803      	bhi.n	8001b6a <HAL_SPI_Transmit+0x204>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b68:	d102      	bne.n	8001b70 <HAL_SPI_Transmit+0x20a>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b74:	e026      	b.n	8001bc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1cd      	bne.n	8001b1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fce9 	bl	800255c <SPI_EndRxTxTransaction>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2220      	movs	r2, #32
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	77fb      	strb	r3, [r7, #31]
 8001bc0:	e000      	b.n	8001bc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001bc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b088      	sub	sp, #32
 8001be2:	af02      	add	r7, sp, #8
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bfa:	d112      	bne.n	8001c22 <HAL_SPI_Receive+0x44>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10e      	bne.n	8001c22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2204      	movs	r2, #4
 8001c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4613      	mov	r3, r2
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f8f1 	bl	8001e00 <HAL_SPI_TransmitReceive>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	e0ea      	b.n	8001df8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_SPI_Receive+0x52>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e0e3      	b.n	8001df8 <HAL_SPI_Receive+0x21a>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c38:	f7fe ff02 	bl	8000a40 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d002      	beq.n	8001c50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c4e:	e0ca      	b.n	8001de6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_SPI_Receive+0x7e>
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c60:	e0c1      	b.n	8001de6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2204      	movs	r2, #4
 8001c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	88fa      	ldrh	r2, [r7, #6]
 8001c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca8:	d10f      	bne.n	8001cca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d007      	beq.n	8001ce8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d162      	bne.n	8001db6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cf0:	e02e      	b.n	8001d50 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d115      	bne.n	8001d2c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f103 020c 	add.w	r2, r3, #12
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d2a:	e011      	b.n	8001d50 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d2c:	f7fe fe88 	bl	8000a40 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d803      	bhi.n	8001d44 <HAL_SPI_Receive+0x166>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d42:	d102      	bne.n	8001d4a <HAL_SPI_Receive+0x16c>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001d4e:	e04a      	b.n	8001de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1cb      	bne.n	8001cf2 <HAL_SPI_Receive+0x114>
 8001d5a:	e031      	b.n	8001dc0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d113      	bne.n	8001d92 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	b292      	uxth	r2, r2
 8001d76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d7c:	1c9a      	adds	r2, r3, #2
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d90:	e011      	b.n	8001db6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d92:	f7fe fe55 	bl	8000a40 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d803      	bhi.n	8001daa <HAL_SPI_Receive+0x1cc>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d102      	bne.n	8001db0 <HAL_SPI_Receive+0x1d2>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001db4:	e017      	b.n	8001de6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1cd      	bne.n	8001d5c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 fb63 	bl	8002490 <SPI_EndRxTransaction>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	75fb      	strb	r3, [r7, #23]
 8001de2:	e000      	b.n	8001de6 <HAL_SPI_Receive+0x208>
  }

error :
 8001de4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
 8001e0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_SPI_TransmitReceive+0x26>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e18a      	b.n	800213c <HAL_SPI_TransmitReceive+0x33c>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2e:	f7fe fe07 	bl	8000a40 <HAL_GetTick>
 8001e32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d00f      	beq.n	8001e70 <HAL_SPI_TransmitReceive+0x70>
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e56:	d107      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <HAL_SPI_TransmitReceive+0x68>
 8001e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d003      	beq.n	8001e70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e6e:	e15b      	b.n	8002128 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_SPI_TransmitReceive+0x82>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_SPI_TransmitReceive+0x82>
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d103      	bne.n	8001e8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e88:	e14e      	b.n	8002128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d003      	beq.n	8001e9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	887a      	ldrh	r2, [r7, #2]
 8001ec6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ede:	2b40      	cmp	r3, #64	; 0x40
 8001ee0:	d007      	beq.n	8001ef2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001efa:	d178      	bne.n	8001fee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0x10a>
 8001f04:	8b7b      	ldrh	r3, [r7, #26]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d166      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	881a      	ldrh	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	1c9a      	adds	r2, r3, #2
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2e:	e053      	b.n	8001fd8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d11b      	bne.n	8001f76 <HAL_SPI_TransmitReceive+0x176>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d016      	beq.n	8001f76 <HAL_SPI_TransmitReceive+0x176>
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d113      	bne.n	8001f76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	1c9a      	adds	r2, r3, #2
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d119      	bne.n	8001fb8 <HAL_SPI_TransmitReceive+0x1b8>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d014      	beq.n	8001fb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	1c9a      	adds	r2, r3, #2
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fb8:	f7fe fd42 	bl	8000a40 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d807      	bhi.n	8001fd8 <HAL_SPI_TransmitReceive+0x1d8>
 8001fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d003      	beq.n	8001fd8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fd6:	e0a7      	b.n	8002128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1a6      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0x130>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1a1      	bne.n	8001f30 <HAL_SPI_TransmitReceive+0x130>
 8001fec:	e07c      	b.n	80020e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_TransmitReceive+0x1fc>
 8001ff6:	8b7b      	ldrh	r3, [r7, #26]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d16b      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002022:	e057      	b.n	80020d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d11c      	bne.n	800206c <HAL_SPI_TransmitReceive+0x26c>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d017      	beq.n	800206c <HAL_SPI_TransmitReceive+0x26c>
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	2b01      	cmp	r3, #1
 8002040:	d114      	bne.n	800206c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	330c      	adds	r3, #12
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205e:	b29b      	uxth	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b29a      	uxth	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d119      	bne.n	80020ae <HAL_SPI_TransmitReceive+0x2ae>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d014      	beq.n	80020ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020aa:	2301      	movs	r3, #1
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020ae:	f7fe fcc7 	bl	8000a40 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d803      	bhi.n	80020c6 <HAL_SPI_TransmitReceive+0x2c6>
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d102      	bne.n	80020cc <HAL_SPI_TransmitReceive+0x2cc>
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020d2:	e029      	b.n	8002128 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1a2      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x224>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d19d      	bne.n	8002024 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fa35 	bl	800255c <SPI_EndRxTxTransaction>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002104:	e010      	b.n	8002128 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10b      	bne.n	8002126 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	e000      	b.n	8002128 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002126:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002138:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800213c:	4618      	mov	r0, r3
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10f      	bne.n	8002188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	099b      	lsrs	r3, r3, #6
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
    return;
 8002186:	e0d7      	b.n	8002338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_SPI_IRQHandler+0x66>
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	09db      	lsrs	r3, r3, #7
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
    return;
 80021a8:	e0c6      	b.n	8002338 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_SPI_IRQHandler+0x8c>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80b4 	beq.w	8002338 <HAL_SPI_IRQHandler+0x1f4>
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ad 	beq.w	8002338 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d023      	beq.n	8002232 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d011      	beq.n	800221a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	f043 0204 	orr.w	r2, r3, #4
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	e00b      	b.n	8002232 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]
        return;
 8002230:	e082      	b.n	8002338 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d014      	beq.n	8002268 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00c      	beq.n	800228e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	f043 0208 	orr.w	r2, r3, #8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04f      	beq.n	8002336 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <HAL_SPI_IRQHandler+0x17e>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d034      	beq.n	800232c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0203 	bic.w	r2, r2, #3
 80022d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d011      	beq.n	80022fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022de:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_SPI_IRQHandler+0x1fc>)
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fcc7 	bl	8000c7a <HAL_DMA_Abort_IT>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_SPI_IRQHandler+0x1fc>)
 800230c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fcb1 	bl	8000c7a <HAL_DMA_Abort_IT>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800232a:	e003      	b.n	8002334 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f809 	bl	8002344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002332:	e000      	b.n	8002336 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002334:	bf00      	nop
    return;
 8002336:	bf00      	nop
  }
}
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	08002359 	.word	0x08002359

08002344 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f7ff ffe6 	bl	8002344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002390:	f7fe fb56 	bl	8000a40 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4413      	add	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023a0:	f7fe fb4e 	bl	8000a40 <HAL_GetTick>
 80023a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	015b      	lsls	r3, r3, #5
 80023ac:	0d1b      	lsrs	r3, r3, #20
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023b6:	e054      	b.n	8002462 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d050      	beq.n	8002462 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023c0:	f7fe fb3e 	bl	8000a40 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d902      	bls.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d13d      	bne.n	8002452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ee:	d111      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f8:	d004      	beq.n	8002404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002402:	d107      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241c:	d10f      	bne.n	800243e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e017      	b.n	8002482 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3b01      	subs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	429a      	cmp	r2, r3
 800247e:	d19b      	bne.n	80023b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000004 	.word	0x20000004

08002490 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a4:	d111      	bne.n	80024ca <SPI_EndRxTransaction+0x3a>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ae:	d004      	beq.n	80024ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d107      	bne.n	80024ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d2:	d12a      	bne.n	800252a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024dc:	d012      	beq.n	8002504 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff ff49 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02d      	beq.n	8002550 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e026      	b.n	8002552 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	2101      	movs	r1, #1
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ff36 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01a      	beq.n	8002550 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0220 	orr.w	r2, r3, #32
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e013      	b.n	8002552 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2200      	movs	r2, #0
 8002532:	2101      	movs	r1, #1
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff ff23 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e000      	b.n	8002552 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <SPI_EndRxTxTransaction+0x7c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <SPI_EndRxTxTransaction+0x80>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0d5b      	lsrs	r3, r3, #21
 8002574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002586:	d112      	bne.n	80025ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff fef4 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d016      	beq.n	80025cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e00f      	b.n	80025ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d0f2      	beq.n	80025ae <SPI_EndRxTxTransaction+0x52>
 80025c8:	e000      	b.n	80025cc <SPI_EndRxTxTransaction+0x70>
        break;
 80025ca:	bf00      	nop
  }

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000004 	.word	0x20000004
 80025dc:	165e9f81 	.word	0x165e9f81

080025e0 <__libc_init_array>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	4d0d      	ldr	r5, [pc, #52]	; (8002618 <__libc_init_array+0x38>)
 80025e4:	4c0d      	ldr	r4, [pc, #52]	; (800261c <__libc_init_array+0x3c>)
 80025e6:	1b64      	subs	r4, r4, r5
 80025e8:	10a4      	asrs	r4, r4, #2
 80025ea:	2600      	movs	r6, #0
 80025ec:	42a6      	cmp	r6, r4
 80025ee:	d109      	bne.n	8002604 <__libc_init_array+0x24>
 80025f0:	4d0b      	ldr	r5, [pc, #44]	; (8002620 <__libc_init_array+0x40>)
 80025f2:	4c0c      	ldr	r4, [pc, #48]	; (8002624 <__libc_init_array+0x44>)
 80025f4:	f000 f820 	bl	8002638 <_init>
 80025f8:	1b64      	subs	r4, r4, r5
 80025fa:	10a4      	asrs	r4, r4, #2
 80025fc:	2600      	movs	r6, #0
 80025fe:	42a6      	cmp	r6, r4
 8002600:	d105      	bne.n	800260e <__libc_init_array+0x2e>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	f855 3b04 	ldr.w	r3, [r5], #4
 8002608:	4798      	blx	r3
 800260a:	3601      	adds	r6, #1
 800260c:	e7ee      	b.n	80025ec <__libc_init_array+0xc>
 800260e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002612:	4798      	blx	r3
 8002614:	3601      	adds	r6, #1
 8002616:	e7f2      	b.n	80025fe <__libc_init_array+0x1e>
 8002618:	08002668 	.word	0x08002668
 800261c:	08002668 	.word	0x08002668
 8002620:	08002668 	.word	0x08002668
 8002624:	0800266c 	.word	0x0800266c

08002628 <memset>:
 8002628:	4402      	add	r2, r0
 800262a:	4603      	mov	r3, r0
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	f803 1b01 	strb.w	r1, [r3], #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <_init>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	bf00      	nop
 800263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263e:	bc08      	pop	{r3}
 8002640:	469e      	mov	lr, r3
 8002642:	4770      	bx	lr

08002644 <_fini>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr
