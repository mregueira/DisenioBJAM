
COMECA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003228  08016ee0  08016ee0  00026ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a108  0801a108  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  0801a108  0801a108  0002a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a110  0801a110  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a110  0801a110  0002a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a114  0801a114  0002a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801a118  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ee8  20000228  0801a340  00030228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009110  0801a340  00039110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049ba2  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007b26  00000000  00000000  00079dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028a8  00000000  00000000  00081920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d48  00000000  00000000  000841c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000301ad  00000000  00000000  00086f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044774  00000000  00000000  000b70bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e59c1  00000000  00000000  000fb831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e11f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c310  00000000  00000000  001e1248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000228 	.word	0x20000228
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016ec4 	.word	0x08016ec4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	08016ec4 	.word	0x08016ec4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96e 	b.w	8000f5c <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468c      	mov	ip, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8083 	bne.w	8000dae <__udivmoddi4+0x116>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d947      	bls.n	8000d3e <__udivmoddi4+0xa6>
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b142      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb4:	f1c2 0020 	rsb	r0, r2, #32
 8000cb8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cbc:	4091      	lsls	r1, r2
 8000cbe:	4097      	lsls	r7, r2
 8000cc0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc4:	4094      	lsls	r4, r2
 8000cc6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd0:	fa1f fe87 	uxth.w	lr, r7
 8000cd4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x60>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cea:	f080 8119 	bcs.w	8000f20 <__udivmoddi4+0x288>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 8116 	bls.w	8000f20 <__udivmoddi4+0x288>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x8c>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 8105 	bcs.w	8000f24 <__udivmoddi4+0x28c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f240 8102 	bls.w	8000f24 <__udivmoddi4+0x28c>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	b11d      	cbz	r5, 8000d38 <__udivmoddi4+0xa0>
 8000d30:	40d4      	lsrs	r4, r2
 8000d32:	2300      	movs	r3, #0
 8000d34:	e9c5 4300 	strd	r4, r3, [r5]
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	b902      	cbnz	r2, 8000d42 <__udivmoddi4+0xaa>
 8000d40:	deff      	udf	#255	; 0xff
 8000d42:	fab2 f282 	clz	r2, r2
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d150      	bne.n	8000dec <__udivmoddi4+0x154>
 8000d4a:	1bcb      	subs	r3, r1, r7
 8000d4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d50:	fa1f f887 	uxth.w	r8, r7
 8000d54:	2601      	movs	r6, #1
 8000d56:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5a:	0c21      	lsrs	r1, r4, #16
 8000d5c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb08 f30c 	mul.w	r3, r8, ip
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0xe4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0xe2>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	f200 80e9 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1ac9      	subs	r1, r1, r3
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d88:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x10c>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x10a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80d9 	bhi.w	8000f54 <__udivmoddi4+0x2bc>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e7bf      	b.n	8000d2e <__udivmoddi4+0x96>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x12e>
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	f000 80b1 	beq.w	8000f1a <__udivmoddi4+0x282>
 8000db8:	2600      	movs	r6, #0
 8000dba:	e9c5 0100 	strd	r0, r1, [r5]
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f683 	clz	r6, r3
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d14a      	bne.n	8000e64 <__udivmoddi4+0x1cc>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x140>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80b8 	bhi.w	8000f48 <__udivmoddi4+0x2b0>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0103 	sbc.w	r1, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	468c      	mov	ip, r1
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d0a8      	beq.n	8000d38 <__udivmoddi4+0xa0>
 8000de6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dea:	e7a5      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f603 	lsr.w	r6, r0, r3
 8000df4:	4097      	lsls	r7, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfe:	40d9      	lsrs	r1, r3
 8000e00:	4330      	orrs	r0, r6
 8000e02:	0c03      	lsrs	r3, r0, #16
 8000e04:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e08:	fa1f f887 	uxth.w	r8, r7
 8000e0c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb06 f108 	mul.w	r1, r6, r8
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x19c>
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e26:	f080 808d 	bcs.w	8000f44 <__udivmoddi4+0x2ac>
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	f240 808a 	bls.w	8000f44 <__udivmoddi4+0x2ac>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	443b      	add	r3, r7
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b281      	uxth	r1, r0
 8000e38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb00 f308 	mul.w	r3, r0, r8
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0x1c4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e52:	d273      	bcs.n	8000f3c <__udivmoddi4+0x2a4>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d971      	bls.n	8000f3c <__udivmoddi4+0x2a4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4439      	add	r1, r7
 8000e5c:	1acb      	subs	r3, r1, r3
 8000e5e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e62:	e778      	b.n	8000d56 <__udivmoddi4+0xbe>
 8000e64:	f1c6 0c20 	rsb	ip, r6, #32
 8000e68:	fa03 f406 	lsl.w	r4, r3, r6
 8000e6c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e70:	431c      	orrs	r4, r3
 8000e72:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e76:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e7e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e82:	431f      	orrs	r7, r3
 8000e84:	0c3b      	lsrs	r3, r7, #16
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fa1f f884 	uxth.w	r8, r4
 8000e8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e92:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e96:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9a:	458a      	cmp	sl, r1
 8000e9c:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x220>
 8000ea6:	1861      	adds	r1, r4, r1
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	d248      	bcs.n	8000f40 <__udivmoddi4+0x2a8>
 8000eae:	458a      	cmp	sl, r1
 8000eb0:	d946      	bls.n	8000f40 <__udivmoddi4+0x2a8>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4421      	add	r1, r4
 8000eb8:	eba1 010a 	sub.w	r1, r1, sl
 8000ebc:	b2bf      	uxth	r7, r7
 8000ebe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eca:	fb00 f808 	mul.w	r8, r0, r8
 8000ece:	45b8      	cmp	r8, r7
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x24a>
 8000ed2:	19e7      	adds	r7, r4, r7
 8000ed4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ed8:	d22e      	bcs.n	8000f38 <__udivmoddi4+0x2a0>
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d92c      	bls.n	8000f38 <__udivmoddi4+0x2a0>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4427      	add	r7, r4
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	eba7 0708 	sub.w	r7, r7, r8
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	454f      	cmp	r7, r9
 8000ef0:	46c6      	mov	lr, r8
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	d31a      	bcc.n	8000f2c <__udivmoddi4+0x294>
 8000ef6:	d017      	beq.n	8000f28 <__udivmoddi4+0x290>
 8000ef8:	b15d      	cbz	r5, 8000f12 <__udivmoddi4+0x27a>
 8000efa:	ebb3 020e 	subs.w	r2, r3, lr
 8000efe:	eb67 0701 	sbc.w	r7, r7, r1
 8000f02:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f06:	40f2      	lsrs	r2, r6
 8000f08:	ea4c 0202 	orr.w	r2, ip, r2
 8000f0c:	40f7      	lsrs	r7, r6
 8000f0e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f12:	2600      	movs	r6, #0
 8000f14:	4631      	mov	r1, r6
 8000f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e70b      	b.n	8000d38 <__udivmoddi4+0xa0>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0x60>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6fd      	b.n	8000d24 <__udivmoddi4+0x8c>
 8000f28:	4543      	cmp	r3, r8
 8000f2a:	d2e5      	bcs.n	8000ef8 <__udivmoddi4+0x260>
 8000f2c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f30:	eb69 0104 	sbc.w	r1, r9, r4
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7df      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e7d2      	b.n	8000ee2 <__udivmoddi4+0x24a>
 8000f3c:	4660      	mov	r0, ip
 8000f3e:	e78d      	b.n	8000e5c <__udivmoddi4+0x1c4>
 8000f40:	4681      	mov	r9, r0
 8000f42:	e7b9      	b.n	8000eb8 <__udivmoddi4+0x220>
 8000f44:	4666      	mov	r6, ip
 8000f46:	e775      	b.n	8000e34 <__udivmoddi4+0x19c>
 8000f48:	4630      	mov	r0, r6
 8000f4a:	e74a      	b.n	8000de2 <__udivmoddi4+0x14a>
 8000f4c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f50:	4439      	add	r1, r7
 8000f52:	e713      	b.n	8000d7c <__udivmoddi4+0xe4>
 8000f54:	3802      	subs	r0, #2
 8000f56:	443c      	add	r4, r7
 8000f58:	e724      	b.n	8000da4 <__udivmoddi4+0x10c>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <getCaliperNumberGivenClockPin>:
static GPIO_TypeDef * CAL_DATA_PORT_MAPPING[NUMBER_OF_CALIPERS] = {GPIOE, GPIOB, GPIOA, GPIOE};
static uint16_t CAL_DATA_PIN_MAPPING[NUMBER_OF_CALIPERS] = {GPIO_PIN_11, GPIO_PIN_1, GPIO_PIN_0, GPIO_PIN_4};

static uint16_t CAL_CLK_MAPPING[NUMBER_OF_CALIPERS] = {CAL1_CLK_Pin, CAL2_CLK_Pin, CAL3_CLK_Pin, CAL4_CLK_Pin};

int getCaliperNumberGivenClockPin(uint16_t CLK_Pin){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
	int i;
	for(i=0; i<NUMBER_OF_CALIPERS; i++) { if(CAL_CLK_MAPPING[i] == CLK_Pin){ break; } }
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e009      	b.n	8000f84 <getCaliperNumberGivenClockPin+0x24>
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <getCaliperNumberGivenClockPin+0x3c>)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d006      	beq.n	8000f8c <getCaliperNumberGivenClockPin+0x2c>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	ddf2      	ble.n	8000f70 <getCaliperNumberGivenClockPin+0x10>
 8000f8a:	e000      	b.n	8000f8e <getCaliperNumberGivenClockPin+0x2e>
 8000f8c:	bf00      	nop
	return i;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	20000018 	.word	0x20000018

08000fa0 <getCaliperData>:

bool getCaliperData(caliper_number curr_caliper){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(CAL_DATA_PORT_MAPPING[curr_caliper],CAL_DATA_PIN_MAPPING[curr_caliper]);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <getCaliperData+0x38>)
 8000fae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4909      	ldr	r1, [pc, #36]	; (8000fdc <getCaliperData+0x3c>)
 8000fb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	f005 f9c1 	bl	8006344 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf14      	ite	ne
 8000fc8:	2301      	movne	r3, #1
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000010 	.word	0x20000010

08000fe0 <processBit>:

void processBit(caliper_number curr_caliper){
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].bit.index == 0){digimatic[curr_caliper].frame.data = 0;}
 8000fea:	79fa      	ldrb	r2, [r7, #7]
 8000fec:	492a      	ldr	r1, [pc, #168]	; (8001098 <processBit+0xb8>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	330e      	adds	r3, #14
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <processBit+0x34>
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	4925      	ldr	r1, [pc, #148]	; (8001098 <processBit+0xb8>)
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4413      	add	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	440b      	add	r3, r1
 800100e:	3311      	adds	r3, #17
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

	uint8_t read_bit = getCaliperData(curr_caliper);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffc2 	bl	8000fa0 <getCaliperData>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]

	digimatic[curr_caliper].frame.data |= read_bit << digimatic[curr_caliper].bit.index;
 8001020:	79fa      	ldrb	r2, [r7, #7]
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <processBit+0xb8>)
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	440b      	add	r3, r1
 800102e:	3311      	adds	r3, #17
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b259      	sxtb	r1, r3
 8001034:	7bf8      	ldrb	r0, [r7, #15]
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	4c17      	ldr	r4, [pc, #92]	; (8001098 <processBit+0xb8>)
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4423      	add	r3, r4
 8001044:	330e      	adds	r3, #14
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	fa00 f303 	lsl.w	r3, r0, r3
 800104c:	b25b      	sxtb	r3, r3
 800104e:	430b      	orrs	r3, r1
 8001050:	b25b      	sxtb	r3, r3
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	b2d8      	uxtb	r0, r3
 8001056:	4910      	ldr	r1, [pc, #64]	; (8001098 <processBit+0xb8>)
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	440b      	add	r3, r1
 8001062:	3311      	adds	r3, #17
 8001064:	4602      	mov	r2, r0
 8001066:	701a      	strb	r2, [r3, #0]

	digimatic[curr_caliper].bit.index++;
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	490b      	ldr	r1, [pc, #44]	; (8001098 <processBit+0xb8>)
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	440b      	add	r3, r1
 8001076:	330e      	adds	r3, #14
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	b2d8      	uxtb	r0, r3
 800107e:	4906      	ldr	r1, [pc, #24]	; (8001098 <processBit+0xb8>)
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	440b      	add	r3, r1
 800108a:	330e      	adds	r3, #14
 800108c:	4602      	mov	r2, r0
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	20000244 	.word	0x20000244

0800109c <onRisingEdgeOfReqSignal>:


void onRisingEdgeOfReqSignal(caliper_number curr_caliper){
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	digimatic[curr_caliper].caliper_state = START;
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	4906      	ldr	r1, [pc, #24]	; (80010c4 <onRisingEdgeOfReqSignal+0x28>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	4413      	add	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	440b      	add	r3, r1
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	20000244 	.word	0x20000244

080010c8 <onRisingEdgeOfClockSignal>:


void onRisingEdgeOfClockSignal(caliper_number curr_caliper, void (*onFinishedGettingFramesFor)(caliper_number)){
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].caliper_state != IDLE && digimatic[curr_caliper].caliper_state != FINISHED){
 80010d4:	79fa      	ldrb	r2, [r7, #7]
 80010d6:	4953      	ldr	r1, [pc, #332]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	440b      	add	r3, r1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8099 	beq.w	800121c <onRisingEdgeOfClockSignal+0x154>
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	494d      	ldr	r1, [pc, #308]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	440b      	add	r3, r1
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	f000 808e 	beq.w	800121c <onRisingEdgeOfClockSignal+0x154>
		digimatic[curr_caliper].caliper_state = GETTING_FRAMES; // this doesn't change unless its last frame (implemented below)
 8001100:	79fa      	ldrb	r2, [r7, #7]
 8001102:	4948      	ldr	r1, [pc, #288]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	440b      	add	r3, r1
 800110e:	2202      	movs	r2, #2
 8001110:	701a      	strb	r2, [r3, #0]
		if(digimatic[curr_caliper].frame.index == 0){
 8001112:	79fa      	ldrb	r2, [r7, #7]
 8001114:	4943      	ldr	r1, [pc, #268]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	440b      	add	r3, r1
 8001120:	3310      	adds	r3, #16
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <onRisingEdgeOfClockSignal+0x7a>
			memset(&digimatic[curr_caliper].frames, 0, NUMBER_OF_FRAMES*sizeof(digimatic[curr_caliper].frames[0]));
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4413      	add	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4a3c      	ldr	r2, [pc, #240]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001134:	4413      	add	r3, r2
 8001136:	3301      	adds	r3, #1
 8001138:	220d      	movs	r2, #13
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f011 ff97 	bl	8013070 <memset>
		}

		processBit(curr_caliper);
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff4b 	bl	8000fe0 <processBit>

		if(digimatic[curr_caliper].bit.index == BITS_PER_FRAME){ // tengo un frame guardado en digimatic.frame.data
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	440b      	add	r3, r1
 8001158:	330e      	adds	r3, #14
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d13b      	bne.n	80011d8 <onRisingEdgeOfClockSignal+0x110>
			digimatic[curr_caliper].frames[digimatic[curr_caliper].frame.index] = digimatic[curr_caliper].frame.data; // lo guardo en el array
 8001160:	79f9      	ldrb	r1, [r7, #7]
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	79f8      	ldrb	r0, [r7, #7]
 8001166:	4c2f      	ldr	r4, [pc, #188]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001168:	4603      	mov	r3, r0
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4403      	add	r3, r0
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4423      	add	r3, r4
 8001172:	3310      	adds	r3, #16
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461c      	mov	r4, r3
 8001178:	482a      	ldr	r0, [pc, #168]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 800117a:	460b      	mov	r3, r1
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4403      	add	r3, r0
 8001184:	3311      	adds	r3, #17
 8001186:	7818      	ldrb	r0, [r3, #0]
 8001188:	4926      	ldr	r1, [pc, #152]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	440b      	add	r3, r1
 8001194:	4423      	add	r3, r4
 8001196:	3301      	adds	r3, #1
 8001198:	4602      	mov	r2, r0
 800119a:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].frame.index++; // avanzo en array
 800119c:	79fa      	ldrb	r2, [r7, #7]
 800119e:	4921      	ldr	r1, [pc, #132]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011a0:	4613      	mov	r3, r2
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	3310      	adds	r3, #16
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	491c      	ldr	r1, [pc, #112]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	4413      	add	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	440b      	add	r3, r1
 80011be:	3310      	adds	r3, #16
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].bit.index = 0; // reinicio el index de bit
 80011c4:	79fa      	ldrb	r2, [r7, #7]
 80011c6:	4917      	ldr	r1, [pc, #92]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	440b      	add	r3, r1
 80011d2:	330e      	adds	r3, #14
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
		}

		if(digimatic[curr_caliper].frame.index == NUMBER_OF_FRAMES){
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	4912      	ldr	r1, [pc, #72]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	440b      	add	r3, r1
 80011e6:	3310      	adds	r3, #16
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b0d      	cmp	r3, #13
 80011ec:	d116      	bne.n	800121c <onRisingEdgeOfClockSignal+0x154>
			digimatic[curr_caliper].frame.index = 0;
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	440b      	add	r3, r1
 80011fc:	3310      	adds	r3, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].caliper_state = FINISHED;
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <onRisingEdgeOfClockSignal+0x15c>)
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	440b      	add	r3, r1
 8001210:	2203      	movs	r2, #3
 8001212:	701a      	strb	r2, [r3, #0]
			onFinishedGettingFramesFor(curr_caliper);
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4610      	mov	r0, r2
 800121a:	4798      	blx	r3
		}
	}
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	20000244 	.word	0x20000244

08001228 <digimaticGetMeasureFrames>:

digimatic_frame_t* digimaticGetMeasureFrames(caliper_number curr_caliper){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].caliper_state == FINISHED){
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	4910      	ldr	r1, [pc, #64]	; (8001278 <digimaticGetMeasureFrames+0x50>)
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	440b      	add	r3, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d111      	bne.n	800126a <digimaticGetMeasureFrames+0x42>
		digimatic[curr_caliper].caliper_state = IDLE;
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	490b      	ldr	r1, [pc, #44]	; (8001278 <digimaticGetMeasureFrames+0x50>)
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	440b      	add	r3, r1
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
		return &digimatic[curr_caliper].frames[0];
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	4613      	mov	r3, r2
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <digimaticGetMeasureFrames+0x50>)
 8001264:	4413      	add	r3, r2
 8001266:	3301      	adds	r3, #1
 8001268:	e000      	b.n	800126c <digimaticGetMeasureFrames+0x44>
	}else{
		return NULL;
 800126a:	2300      	movs	r3, #0
	}
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000244 	.word	0x20000244
 800127c:	00000000 	.word	0x00000000

08001280 <digimaticMeasure>:


digimatic_measure_t digimaticMeasure(digimatic_frame_t* digimaticFrame){
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
//  ignore all 'F'
    digimaticFrame+= 4;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3304      	adds	r3, #4
 800128e:	603b      	str	r3, [r7, #0]
//  get sign
    float sign = (*digimaticFrame) == 8? -1: 1;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d101      	bne.n	800129c <digimaticMeasure+0x1c>
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <digimaticMeasure+0x120>)
 800129a:	e001      	b.n	80012a0 <digimaticMeasure+0x20>
 800129c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012a0:	61fb      	str	r3, [r7, #28]
//  advance pointer and get digits;
    digimaticFrame++;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	603b      	str	r3, [r7, #0]
    int digits_left = 6;
 80012a8:	2306      	movs	r3, #6
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    float number = 0;
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
    while(digits_left){
 80012b2:	e032      	b.n	800131a <digimaticMeasure+0x9a>
        number += pow(10,digits_left)*(*digimaticFrame);
 80012b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012b6:	f7ff f945 	bl	8000544 <__aeabi_i2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	ec43 2b11 	vmov	d1, r2, r3
 80012c2:	ed9f 0b35 	vldr	d0, [pc, #212]	; 8001398 <digimaticMeasure+0x118>
 80012c6:	f014 fe47 	bl	8015f58 <pow>
 80012ca:	ec55 4b10 	vmov	r4, r5, d0
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f936 	bl	8000544 <__aeabi_i2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7ff f99a 	bl	8000618 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	6a38      	ldr	r0, [r7, #32]
 80012ee:	f7ff f93b 	bl	8000568 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4620      	mov	r0, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	f7fe ffd7 	bl	80002ac <__adddf3>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fc5f 	bl	8000bc8 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	623b      	str	r3, [r7, #32]
        digits_left--;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	3b01      	subs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
        digimaticFrame++;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	603b      	str	r3, [r7, #0]
    while(digits_left){
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1c9      	bne.n	80012b4 <digimaticMeasure+0x34>
    }
    // digimaticFrame is now on d12
    float decimal_point = pow(10,(*digimaticFrame));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_ui2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	ec43 2b11 	vmov	d1, r2, r3
 8001332:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001398 <digimaticMeasure+0x118>
 8001336:	f014 fe0f 	bl	8015f58 <pow>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fc41 	bl	8000bc8 <__aeabi_d2f>
 8001346:	4603      	mov	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]
    digimaticFrame++;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	603b      	str	r3, [r7, #0]
    int unit = (*digimaticFrame);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	617b      	str	r3, [r7, #20]
    digimatic_measure_t measure;
    measure.number = sign*number/decimal_point;
 8001356:	ed97 7a07 	vldr	s14, [r7, #28]
 800135a:	edd7 7a08 	vldr	s15, [r7, #32]
 800135e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001362:	ed97 7a06 	vldr	s14, [r7, #24]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	edc7 7a03 	vstr	s15, [r7, #12]
    measure.unit = unit;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf14      	ite	ne
 8001374:	2301      	movne	r3, #1
 8001376:	2300      	moveq	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	743b      	strb	r3, [r7, #16]

    return measure;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	461a      	mov	r2, r3
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001388:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bdb0      	pop	{r4, r5, r7, pc}
 8001394:	f3af 8000 	nop.w
 8001398:	00000000 	.word	0x00000000
 800139c:	40240000 	.word	0x40240000
 80013a0:	bf800000 	.word	0xbf800000

080013a4 <validCaliperMeasure>:

bool validCaliperMeasure(digimatic_frame_t* digimaticFrame){
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
//  check all 'F' = 15
	for(int i = 0; i<4; i++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e00b      	b.n	80013ca <validCaliperMeasure+0x26>
		if((*digimaticFrame != 15)){
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d001      	beq.n	80013be <validCaliperMeasure+0x1a>
			return false;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e038      	b.n	8001430 <validCaliperMeasure+0x8c>
		}
		digimaticFrame++;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3301      	adds	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<4; i++){
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	ddf0      	ble.n	80013b2 <validCaliperMeasure+0xe>
	}
// check sign
	if((*digimaticFrame) != 0 || (*digimaticFrame) != 8){
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d103      	bne.n	80013e0 <validCaliperMeasure+0x3c>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d001      	beq.n	80013e4 <validCaliperMeasure+0x40>
		return false;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e025      	b.n	8001430 <validCaliperMeasure+0x8c>
	}

	digimaticFrame++;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3301      	adds	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
// check digits between 0 and 9
	for(int i = 0; i<6; i++){
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	e00b      	b.n	8001408 <validCaliperMeasure+0x64>
		if((*digimaticFrame) > 9 || (*digimaticFrame < 0)){
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b09      	cmp	r3, #9
 80013f6:	d901      	bls.n	80013fc <validCaliperMeasure+0x58>
			return false;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e019      	b.n	8001430 <validCaliperMeasure+0x8c>
		}
		digimaticFrame++;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
	for(int i = 0; i<6; i++){
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b05      	cmp	r3, #5
 800140c:	ddf0      	ble.n	80013f0 <validCaliperMeasure+0x4c>
	}
// check decimal point between 0 and 5
	if((*digimaticFrame) < 0 || (*digimaticFrame) > 5){
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b05      	cmp	r3, #5
 8001414:	d901      	bls.n	800141a <validCaliperMeasure+0x76>
		return false;
 8001416:	2300      	movs	r3, #0
 8001418:	e00a      	b.n	8001430 <validCaliperMeasure+0x8c>
	}

// check unit
	if((*digimaticFrame) != 0 || (*digimaticFrame) != 1){
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <validCaliperMeasure+0x86>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <validCaliperMeasure+0x8a>
		return false;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <validCaliperMeasure+0x8c>
	}

	return true;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <json_hexadecimal_digit>:
                         bytes). */
  size_t error;
};

json_weak int json_hexadecimal_digit(const char c);
int json_hexadecimal_digit(const char c) {
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ('0' <= c && c <= '9') {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b2f      	cmp	r3, #47	; 0x2f
 800144a:	d905      	bls.n	8001458 <json_hexadecimal_digit+0x1c>
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b39      	cmp	r3, #57	; 0x39
 8001450:	d802      	bhi.n	8001458 <json_hexadecimal_digit+0x1c>
    return c - '0';
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3b30      	subs	r3, #48	; 0x30
 8001456:	e013      	b.n	8001480 <json_hexadecimal_digit+0x44>
  }
  if ('a' <= c && c <= 'f') {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b60      	cmp	r3, #96	; 0x60
 800145c:	d905      	bls.n	800146a <json_hexadecimal_digit+0x2e>
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b66      	cmp	r3, #102	; 0x66
 8001462:	d802      	bhi.n	800146a <json_hexadecimal_digit+0x2e>
    return c - 'a' + 10;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	3b57      	subs	r3, #87	; 0x57
 8001468:	e00a      	b.n	8001480 <json_hexadecimal_digit+0x44>
  }
  if ('A' <= c && c <= 'F') {
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b40      	cmp	r3, #64	; 0x40
 800146e:	d905      	bls.n	800147c <json_hexadecimal_digit+0x40>
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b46      	cmp	r3, #70	; 0x46
 8001474:	d802      	bhi.n	800147c <json_hexadecimal_digit+0x40>
    return c - 'A' + 10;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	3b37      	subs	r3, #55	; 0x37
 800147a:	e001      	b.n	8001480 <json_hexadecimal_digit+0x44>
  }
  return -1;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <json_hexadecimal_value>:

json_weak int json_hexadecimal_value(const char *c, const unsigned long size,
                                     unsigned long *result);
int json_hexadecimal_value(const char *c, const unsigned long size,
                           unsigned long *result) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  const char *p;
  int digit;

  if (size > sizeof(unsigned long) * 2) {
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b08      	cmp	r3, #8
 800149c:	d901      	bls.n	80014a2 <json_hexadecimal_value+0x16>
    return 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	e02a      	b.n	80014f8 <json_hexadecimal_value+0x6c>
  }

  *result = 0;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
  for (p = c; (unsigned long)(p - c) < size; ++p) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e01c      	b.n	80014e8 <json_hexadecimal_value+0x5c>
    *result <<= 4;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	011a      	lsls	r2, r3, #4
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
    digit = json_hexadecimal_digit(*p);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffbd 	bl	800143c <json_hexadecimal_digit>
 80014c2:	6138      	str	r0, [r7, #16]
    if (digit < 0 || digit > 15) {
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db02      	blt.n	80014d0 <json_hexadecimal_value+0x44>
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	dd01      	ble.n	80014d4 <json_hexadecimal_value+0x48>
      return 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e011      	b.n	80014f8 <json_hexadecimal_value+0x6c>
    }
    *result |= (unsigned char)digit;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
  for (p = c; (unsigned long)(p - c) < size; ++p) {
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d8db      	bhi.n	80014ae <json_hexadecimal_value+0x22>
  }
  return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <json_skip_whitespace>:

json_weak int json_skip_whitespace(struct json_parse_state_s *state);
int json_skip_whitespace(struct json_parse_state_s *state) {
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  size_t offset = state->offset;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	613b      	str	r3, [r7, #16]
  const char *const src = state->src;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]

  /* the only valid whitespace according to ECMA-404 is ' ', '\n', '\r' and
   * '\t'. */
  switch (src[offset]) {
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3b09      	subs	r3, #9
 8001524:	2b17      	cmp	r3, #23
 8001526:	bf8c      	ite	hi
 8001528:	2201      	movhi	r2, #1
 800152a:	2200      	movls	r2, #0
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	2a00      	cmp	r2, #0
 8001530:	d10a      	bne.n	8001548 <json_skip_whitespace+0x48>
 8001532:	2201      	movs	r2, #1
 8001534:	409a      	lsls	r2, r3
 8001536:	4b34      	ldr	r3, [pc, #208]	; (8001608 <json_skip_whitespace+0x108>)
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <json_skip_whitespace+0x4c>
  default:
    return 0;
 8001548:	2300      	movs	r3, #0
 800154a:	e057      	b.n	80015fc <json_skip_whitespace+0xfc>
  case ' ':
  case '\r':
  case '\t':
  case '\n':
    break;
 800154c:	bf00      	nop
 800154e:	e000      	b.n	8001552 <json_skip_whitespace+0x52>
  }

  do {
 8001550:	bf00      	nop
    switch (src[offset]) {
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3b09      	subs	r3, #9
 800155c:	2b17      	cmp	r3, #23
 800155e:	d833      	bhi.n	80015c8 <json_skip_whitespace+0xc8>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <json_skip_whitespace+0x68>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	080015e5 	.word	0x080015e5
 800156c:	080015d3 	.word	0x080015d3
 8001570:	080015c9 	.word	0x080015c9
 8001574:	080015c9 	.word	0x080015c9
 8001578:	080015e5 	.word	0x080015e5
 800157c:	080015c9 	.word	0x080015c9
 8001580:	080015c9 	.word	0x080015c9
 8001584:	080015c9 	.word	0x080015c9
 8001588:	080015c9 	.word	0x080015c9
 800158c:	080015c9 	.word	0x080015c9
 8001590:	080015c9 	.word	0x080015c9
 8001594:	080015c9 	.word	0x080015c9
 8001598:	080015c9 	.word	0x080015c9
 800159c:	080015c9 	.word	0x080015c9
 80015a0:	080015c9 	.word	0x080015c9
 80015a4:	080015c9 	.word	0x080015c9
 80015a8:	080015c9 	.word	0x080015c9
 80015ac:	080015c9 	.word	0x080015c9
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015c9 	.word	0x080015c9
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015c9 	.word	0x080015c9
 80015c0:	080015c9 	.word	0x080015c9
 80015c4:	080015e5 	.word	0x080015e5
    default:
      /* Update offset. */
      state->offset = offset;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	609a      	str	r2, [r3, #8]
      return 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e014      	b.n	80015fc <json_skip_whitespace+0xfc>
    case ' ':
    case '\r':
    case '\t':
      break;
    case '\n':
      state->line_no++;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	621a      	str	r2, [r3, #32]
      state->line_offset = offset;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24
      break;
 80015e2:	e000      	b.n	80015e6 <json_skip_whitespace+0xe6>
      break;
 80015e4:	bf00      	nop
    }

    offset++;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	3301      	adds	r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
  } while (offset < size);
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3ad      	bcc.n	8001550 <json_skip_whitespace+0x50>

  /* Update offset. */
  state->offset = offset;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	609a      	str	r2, [r3, #8]
  return 1;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	00800013 	.word	0x00800013

0800160c <json_skip_c_style_comments>:

json_weak int json_skip_c_style_comments(struct json_parse_state_s *state);
int json_skip_c_style_comments(struct json_parse_state_s *state) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* do we have a comment?. */
  if ('/' == state->src[state->offset]) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b2f      	cmp	r3, #47	; 0x2f
 8001622:	d17d      	bne.n	8001720 <json_skip_c_style_comments+0x114>
    /* skip '/'. */
    state->offset++;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	609a      	str	r2, [r3, #8]

    if ('/' == state->src[state->offset]) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b2f      	cmp	r3, #47	; 0x2f
 800163c:	d12b      	bne.n	8001696 <json_skip_c_style_comments+0x8a>
      /* we had a comment of the form //. */

      /* skip second '/'. */
      state->offset++;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

      while (state->offset < state->size) {
 8001648:	e01d      	b.n	8001686 <json_skip_c_style_comments+0x7a>
        switch (state->src[state->offset]) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4413      	add	r3, r2
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d005      	beq.n	8001666 <json_skip_c_style_comments+0x5a>
        default:
          /* skip the character in the comment. */
          state->offset++;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	609a      	str	r2, [r3, #8]
          break;
 8001664:	e00f      	b.n	8001686 <json_skip_c_style_comments+0x7a>
        case '\n':
          /* if we have a newline, our comment has ended! Skip the newline. */
          state->offset++;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]

          /* we entered a newline, so move our line info forward. */
          state->line_no++;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	621a      	str	r2, [r3, #32]
          state->line_offset = state->offset;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
          return 1;
 8001682:	2301      	movs	r3, #1
 8001684:	e04d      	b.n	8001722 <json_skip_c_style_comments+0x116>
      while (state->offset < state->size) {
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	d3db      	bcc.n	800164a <json_skip_c_style_comments+0x3e>
        }
      }

      /* we reached the end of the JSON file! */
      return 1;
 8001692:	2301      	movs	r3, #1
 8001694:	e045      	b.n	8001722 <json_skip_c_style_comments+0x116>
    } else if ('*' == state->src[state->offset]) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b2a      	cmp	r3, #42	; 0x2a
 80016a4:	d13c      	bne.n	8001720 <json_skip_c_style_comments+0x114>
      /* we had a comment in the C-style long form. */

      /* skip '*'. */
      state->offset++;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]

      while (state->offset + 1 < state->size) {
 80016b0:	e02d      	b.n	800170e <json_skip_c_style_comments+0x102>
        if (('*' == state->src[state->offset]) &&
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b2a      	cmp	r3, #42	; 0x2a
 80016c0:	d10f      	bne.n	80016e2 <json_skip_c_style_comments+0xd6>
            ('/' == state->src[state->offset + 1])) {
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
        if (('*' == state->src[state->offset]) &&
 80016d0:	2b2f      	cmp	r3, #47	; 0x2f
 80016d2:	d106      	bne.n	80016e2 <json_skip_c_style_comments+0xd6>
          /* we reached the end of our comment! */
          state->offset += 2;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	1c9a      	adds	r2, r3, #2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]
          return 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	e01f      	b.n	8001722 <json_skip_c_style_comments+0x116>
        } else if ('\n' == state->src[state->offset]) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d108      	bne.n	8001704 <json_skip_c_style_comments+0xf8>
          /* we entered a newline, so move our line info forward. */
          state->line_no++;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	621a      	str	r2, [r3, #32]
          state->line_offset = state->offset;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* skip character within comment. */
        state->offset++;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]
      while (state->offset + 1 < state->size) {
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	d3ca      	bcc.n	80016b2 <json_skip_c_style_comments+0xa6>
      }

      /* Comment wasn't ended correctly which is a failure. */
      return 1;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <json_skip_c_style_comments+0x116>
    }
  }

  /* we didn't have any comment, which is ok too! */
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <json_skip_all_skippables>:

json_weak int json_skip_all_skippables(struct json_parse_state_s *state);
int json_skip_all_skippables(struct json_parse_state_s *state) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  /* skip all whitespace and other skippables until there are none left. note
   * that the previous version suffered from read past errors should. the
   * stream end on json_skip_c_style_comments eg. '{"a" ' with comments flag.
   */

  int did_consume = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  const size_t size = state->size;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60bb      	str	r3, [r7, #8]

  if (json_parse_flags_allow_c_style_comments & state->flags_bitset) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b00      	cmp	r3, #0
 800174a:	d022      	beq.n	8001792 <json_skip_all_skippables+0x64>
    do {
      if (state->offset == size) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	429a      	cmp	r2, r3
 8001754:	d104      	bne.n	8001760 <json_skip_all_skippables+0x32>
        state->error = json_parse_error_premature_end_of_buffer;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2207      	movs	r2, #7
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 800175c:	2301      	movs	r3, #1
 800175e:	e034      	b.n	80017ca <json_skip_all_skippables+0x9c>
      }

      did_consume = json_skip_whitespace(state);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fecd 	bl	8001500 <json_skip_whitespace>
 8001766:	60f8      	str	r0, [r7, #12]

      /* This should really be checked on access, not in front of every call.
       */
      if (state->offset == size) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	429a      	cmp	r2, r3
 8001770:	d104      	bne.n	800177c <json_skip_all_skippables+0x4e>
        state->error = json_parse_error_premature_end_of_buffer;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2207      	movs	r2, #7
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001778:	2301      	movs	r3, #1
 800177a:	e026      	b.n	80017ca <json_skip_all_skippables+0x9c>
      }

      did_consume |= json_skip_c_style_comments(state);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff45 	bl	800160c <json_skip_c_style_comments>
 8001782:	4602      	mov	r2, r0
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
    } while (0 != did_consume);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1dd      	bne.n	800174c <json_skip_all_skippables+0x1e>
 8001790:	e010      	b.n	80017b4 <json_skip_all_skippables+0x86>
  } else {
    do {
      if (state->offset == size) {
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d104      	bne.n	80017a6 <json_skip_all_skippables+0x78>
        state->error = json_parse_error_premature_end_of_buffer;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2207      	movs	r2, #7
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e011      	b.n	80017ca <json_skip_all_skippables+0x9c>
      }

      did_consume = json_skip_whitespace(state);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff feaa 	bl	8001500 <json_skip_whitespace>
 80017ac:	60f8      	str	r0, [r7, #12]
    } while (0 != did_consume);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1ee      	bne.n	8001792 <json_skip_all_skippables+0x64>
  }

  if (state->offset == size) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d104      	bne.n	80017c8 <json_skip_all_skippables+0x9a>
    state->error = json_parse_error_premature_end_of_buffer;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2207      	movs	r2, #7
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <json_skip_all_skippables+0x9c>
  }

  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <json_get_string_size>:
json_weak int json_get_value_size(struct json_parse_state_s *state,
                                  int is_global_object);

json_weak int json_get_string_size(struct json_parse_state_s *state,
                                   size_t is_key);
int json_get_string_size(struct json_parse_state_s *state, size_t is_key) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08c      	sub	sp, #48	; 0x30
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  size_t offset = state->offset;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  const size_t size = state->size;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	623b      	str	r3, [r7, #32]
  size_t data_size = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
  const char *const src = state->src;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	61fb      	str	r3, [r7, #28]
  const int is_single_quote = '\'' == src[offset];
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	4413      	add	r3, r2
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b27      	cmp	r3, #39	; 0x27
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	61bb      	str	r3, [r7, #24]
  const char quote_to_use = is_single_quote ? '\'' : '"';
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <json_get_string_size+0x3e>
 800180e:	2327      	movs	r3, #39	; 0x27
 8001810:	e000      	b.n	8001814 <json_get_string_size+0x40>
 8001812:	2322      	movs	r3, #34	; 0x22
 8001814:	75fb      	strb	r3, [r7, #23]
  const size_t flags_bitset = state->flags_bitset;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
  unsigned long codepoint;
  unsigned long high_surrogate = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24

  if ((json_parse_flags_allow_location_information & flags_bitset) != 0 &&
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <json_get_string_size+0x6a>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <json_get_string_size+0x6a>
      is_key != 0) {
    state->dom_size += sizeof(struct json_string_ex_s);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f103 0214 	add.w	r2, r3, #20
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	e005      	b.n	800184a <json_get_string_size+0x76>
  } else {
    state->dom_size += sizeof(struct json_string_s);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f103 0208 	add.w	r2, r3, #8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	619a      	str	r2, [r3, #24]
  }

  if ('"' != src[offset]) {
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b22      	cmp	r3, #34	; 0x22
 8001854:	d00f      	beq.n	8001876 <json_get_string_size+0xa2>
    /* if we are allowed single quoted strings check for that too. */
    if (!((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <json_get_string_size+0x92>
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d107      	bne.n	8001876 <json_get_string_size+0xa2>
          is_single_quote)) {
      state->error = json_parse_error_expected_opening_quote;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2203      	movs	r2, #3
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001870:	609a      	str	r2, [r3, #8]
      return 1;
 8001872:	2301      	movs	r3, #1
 8001874:	e151      	b.n	8001b1a <json_get_string_size+0x346>
    }
  }

  /* skip leading '"' or '\''. */
  offset++;
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	3301      	adds	r3, #1
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c

  while ((offset < size) && (quote_to_use != src[offset])) {
 800187c:	e122      	b.n	8001ac4 <json_get_string_size+0x2f0>
    /* add space for the character. */
    data_size++;
 800187e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001880:	3301      	adds	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (src[offset]) {
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <json_get_string_size+0xc0>
 8001890:	2b09      	cmp	r3, #9
 8001892:	d107      	bne.n	80018a4 <json_get_string_size+0xd0>
    default:
      break;
    case '\0':
    case '\t':
      state->error = json_parse_error_invalid_string;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2208      	movs	r2, #8
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	609a      	str	r2, [r3, #8]
      return 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e13a      	b.n	8001b1a <json_get_string_size+0x346>
      break;
 80018a4:	bf00      	nop
    }

    if ('\\' == src[offset]) {
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b5c      	cmp	r3, #92	; 0x5c
 80018b0:	f040 80e8 	bne.w	8001a84 <json_get_string_size+0x2b0>
      /* skip reverse solidus character. */
      offset++;
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	3301      	adds	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (offset == size) {
 80018ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d107      	bne.n	80018d2 <json_get_string_size+0xfe>
        state->error = json_parse_error_premature_end_of_buffer;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2207      	movs	r2, #7
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018cc:	609a      	str	r2, [r3, #8]
        return 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e123      	b.n	8001b1a <json_get_string_size+0x346>
      }

      switch (src[offset]) {
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d6:	4413      	add	r3, r2
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b75      	cmp	r3, #117	; 0x75
 80018dc:	dc40      	bgt.n	8001960 <json_get_string_size+0x18c>
 80018de:	2b5c      	cmp	r3, #92	; 0x5c
 80018e0:	da04      	bge.n	80018ec <json_get_string_size+0x118>
 80018e2:	2b22      	cmp	r3, #34	; 0x22
 80018e4:	d044      	beq.n	8001970 <json_get_string_size+0x19c>
 80018e6:	2b2f      	cmp	r3, #47	; 0x2f
 80018e8:	d042      	beq.n	8001970 <json_get_string_size+0x19c>
 80018ea:	e039      	b.n	8001960 <json_get_string_size+0x18c>
 80018ec:	3b5c      	subs	r3, #92	; 0x5c
 80018ee:	2b19      	cmp	r3, #25
 80018f0:	d836      	bhi.n	8001960 <json_get_string_size+0x18c>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <json_get_string_size+0x124>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001971 	.word	0x08001971
 80018fc:	08001961 	.word	0x08001961
 8001900:	08001961 	.word	0x08001961
 8001904:	08001961 	.word	0x08001961
 8001908:	08001961 	.word	0x08001961
 800190c:	08001961 	.word	0x08001961
 8001910:	08001971 	.word	0x08001971
 8001914:	08001961 	.word	0x08001961
 8001918:	08001961 	.word	0x08001961
 800191c:	08001961 	.word	0x08001961
 8001920:	08001971 	.word	0x08001971
 8001924:	08001961 	.word	0x08001961
 8001928:	08001961 	.word	0x08001961
 800192c:	08001961 	.word	0x08001961
 8001930:	08001961 	.word	0x08001961
 8001934:	08001961 	.word	0x08001961
 8001938:	08001961 	.word	0x08001961
 800193c:	08001961 	.word	0x08001961
 8001940:	08001971 	.word	0x08001971
 8001944:	08001961 	.word	0x08001961
 8001948:	08001961 	.word	0x08001961
 800194c:	08001961 	.word	0x08001961
 8001950:	08001971 	.word	0x08001971
 8001954:	08001961 	.word	0x08001961
 8001958:	08001971 	.word	0x08001971
 800195c:	08001979 	.word	0x08001979
      default:
        state->error = json_parse_error_invalid_string_escape_sequence;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2204      	movs	r2, #4
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800196a:	609a      	str	r2, [r3, #8]
        return 1;
 800196c:	2301      	movs	r3, #1
 800196e:	e0d4      	b.n	8001b1a <json_get_string_size+0x346>
      case 'f':
      case 'n':
      case 'r':
      case 't':
        /* all valid characters! */
        offset++;
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	3301      	adds	r3, #1
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001976:	e0a5      	b.n	8001ac4 <json_get_string_size+0x2f0>
      case 'u':
        if (!(offset + 5 < size)) {
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	3305      	adds	r3, #5
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	429a      	cmp	r2, r3
 8001980:	d807      	bhi.n	8001992 <json_get_string_size+0x1be>
          /* invalid escaped unicode sequence! */
          state->error = json_parse_error_invalid_string_escape_sequence;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2204      	movs	r2, #4
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198c:	609a      	str	r2, [r3, #8]
          return 1;
 800198e:	2301      	movs	r3, #1
 8001990:	e0c3      	b.n	8001b1a <json_get_string_size+0x346>
        }

        codepoint = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
        if (!json_hexadecimal_value(&src[offset + 1], 4, &codepoint)) {
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	3301      	adds	r3, #1
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	4413      	add	r3, r2
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	2104      	movs	r1, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fd71 	bl	800148c <json_hexadecimal_value>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <json_get_string_size+0x1ec>
          /* escaped unicode sequences must contain 4 hexadecimal digits! */
          state->error = json_parse_error_invalid_string_escape_sequence;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2204      	movs	r2, #4
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	609a      	str	r2, [r3, #8]
          return 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0ac      	b.n	8001b1a <json_get_string_size+0x346>
         * Note: the high and low surrogate halves used by UTF-16 (U+D800
         * through U+DFFF) and code points not encodable by UTF-16 (those after
         * U+10FFFF) are not legal Unicode values, and their UTF-8 encoding must
         * be treated as an invalid byte sequence. */

        if (high_surrogate != 0) {
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d015      	beq.n	80019f2 <json_get_string_size+0x21e>
          /* we previously read the high half of the \uxxxx\uxxxx pair, so now
           * we expect the low half. */
          if (codepoint >= 0xdc00 &&
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80019cc:	d309      	bcc.n	80019e2 <json_get_string_size+0x20e>
              codepoint <= 0xdfff) { /* low surrogate range. */
 80019ce:	68fb      	ldr	r3, [r7, #12]
          if (codepoint >= 0xdc00 &&
 80019d0:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80019d4:	d205      	bcs.n	80019e2 <json_get_string_size+0x20e>
            data_size += 3;
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	3303      	adds	r3, #3
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
            high_surrogate = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
 80019e0:	e04b      	b.n	8001a7a <json_get_string_size+0x2a6>
          } else {
            state->error = json_parse_error_invalid_string_escape_sequence;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2204      	movs	r2, #4
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
            state->offset = offset;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ec:	609a      	str	r2, [r3, #8]
            return 1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e093      	b.n	8001b1a <json_get_string_size+0x346>
          }
        } else if (codepoint <= 0x7f) {
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b7f      	cmp	r3, #127	; 0x7f
 80019f6:	d940      	bls.n	8001a7a <json_get_string_size+0x2a6>
          data_size += 0;
        } else if (codepoint <= 0x7ff) {
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019fe:	d203      	bcs.n	8001a08 <json_get_string_size+0x234>
          data_size += 1;
 8001a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a02:	3301      	adds	r3, #1
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a06:	e038      	b.n	8001a7a <json_get_string_size+0x2a6>
        } else if (codepoint >= 0xd800 &&
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001a0e:	d321      	bcc.n	8001a54 <json_get_string_size+0x280>
                   codepoint <= 0xdbff) { /* high surrogate range. */
 8001a10:	68fb      	ldr	r3, [r7, #12]
        } else if (codepoint >= 0xd800 &&
 8001a12:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001a16:	d21d      	bcs.n	8001a54 <json_get_string_size+0x280>
          /* The codepoint is the first half of a "utf-16 surrogate pair". so we
           * need the other half for it to be valid: \uHHHH\uLLLL. */
          if (offset + 11 > size || '\\' != src[offset + 5] ||
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	330b      	adds	r3, #11
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d30d      	bcc.n	8001a3e <json_get_string_size+0x26a>
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	3305      	adds	r3, #5
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b5c      	cmp	r3, #92	; 0x5c
 8001a2e:	d106      	bne.n	8001a3e <json_get_string_size+0x26a>
              'u' != src[offset + 6]) {
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	3306      	adds	r3, #6
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	4413      	add	r3, r2
 8001a38:	781b      	ldrb	r3, [r3, #0]
          if (offset + 11 > size || '\\' != src[offset + 5] ||
 8001a3a:	2b75      	cmp	r3, #117	; 0x75
 8001a3c:	d007      	beq.n	8001a4e <json_get_string_size+0x27a>
            state->error = json_parse_error_invalid_string_escape_sequence;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2204      	movs	r2, #4
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
            state->offset = offset;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a48:	609a      	str	r2, [r3, #8]
            return 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e065      	b.n	8001b1a <json_get_string_size+0x346>
          }
          high_surrogate = codepoint;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e012      	b.n	8001a7a <json_get_string_size+0x2a6>
        } else if (codepoint >= 0xd800 &&
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001a5a:	d30b      	bcc.n	8001a74 <json_get_string_size+0x2a0>
                   codepoint <= 0xdfff) { /* low surrogate range. */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
        } else if (codepoint >= 0xd800 &&
 8001a5e:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001a62:	d207      	bcs.n	8001a74 <json_get_string_size+0x2a0>
          /* we did not read the other half before. */
          state->error = json_parse_error_invalid_string_escape_sequence;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a6e:	609a      	str	r2, [r3, #8]
          return 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e052      	b.n	8001b1a <json_get_string_size+0x346>
        } else {
          data_size += 2;
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	3302      	adds	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        /* escaped codepoints after 0xffff are supported in json through utf-16
         * surrogate pairs: \uD83D\uDD25 for U+1F525. */

        offset += 5;
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	3305      	adds	r3, #5
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001a80:	bf00      	nop
 8001a82:	e01f      	b.n	8001ac4 <json_get_string_size+0x2f0>
      }
    } else if (('\r' == src[offset]) || ('\n' == src[offset])) {
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a88:	4413      	add	r3, r2
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b0d      	cmp	r3, #13
 8001a8e:	d005      	beq.n	8001a9c <json_get_string_size+0x2c8>
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b0a      	cmp	r3, #10
 8001a9a:	d110      	bne.n	8001abe <json_get_string_size+0x2ea>
      if (!(json_parse_flags_allow_multi_line_strings & flags_bitset)) {
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <json_get_string_size+0x2e2>
        /* invalid escaped unicode sequence! */
        state->error = json_parse_error_invalid_string_escape_sequence;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab0:	609a      	str	r2, [r3, #8]
        return 1;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e031      	b.n	8001b1a <json_get_string_size+0x346>
      }

      offset++;
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	3301      	adds	r3, #1
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001abc:	e002      	b.n	8001ac4 <json_get_string_size+0x2f0>
    } else {
      /* skip character (valid part of sequence). */
      offset++;
 8001abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while ((offset < size) && (quote_to_use != src[offset])) {
 8001ac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <json_get_string_size+0x308>
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	4413      	add	r3, r2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	7dfa      	ldrb	r2, [r7, #23]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	f47f aed1 	bne.w	800187e <json_get_string_size+0xaa>
    }
  }

  /* If the offset is equal to the size, we had a non-terminated string! */
  if (offset == size) {
 8001adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d108      	bne.n	8001af6 <json_get_string_size+0x322>
    state->error = json_parse_error_premature_end_of_buffer;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
    state->offset = offset - 1;
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]
    return 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e011      	b.n	8001b1a <json_get_string_size+0x346>
  }

  /* skip trailing '"' or '\''. */
  offset++;
 8001af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af8:	3301      	adds	r3, #1
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* add enough space to store the string. */
  state->data_size += data_size;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	441a      	add	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	61da      	str	r2, [r3, #28]

  /* one more byte for null terminator ending the string! */
  state->data_size++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61da      	str	r2, [r3, #28]

  /* update offset. */
  state->offset = offset;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b16:	609a      	str	r2, [r3, #8]

  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3730      	adds	r7, #48	; 0x30
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <is_valid_unquoted_key_char>:

json_weak int is_valid_unquoted_key_char(const char c);
int is_valid_unquoted_key_char(const char c) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  return (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') ||
          ('A' <= c && c <= 'Z') || ('_' == c));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b2f      	cmp	r3, #47	; 0x2f
 8001b32:	d902      	bls.n	8001b3a <is_valid_unquoted_key_char+0x16>
  return (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') ||
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b39      	cmp	r3, #57	; 0x39
 8001b38:	d90e      	bls.n	8001b58 <is_valid_unquoted_key_char+0x34>
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b60      	cmp	r3, #96	; 0x60
 8001b3e:	d902      	bls.n	8001b46 <is_valid_unquoted_key_char+0x22>
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b7a      	cmp	r3, #122	; 0x7a
 8001b44:	d908      	bls.n	8001b58 <is_valid_unquoted_key_char+0x34>
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b40      	cmp	r3, #64	; 0x40
 8001b4a:	d902      	bls.n	8001b52 <is_valid_unquoted_key_char+0x2e>
          ('A' <= c && c <= 'Z') || ('_' == c));
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b5a      	cmp	r3, #90	; 0x5a
 8001b50:	d902      	bls.n	8001b58 <is_valid_unquoted_key_char+0x34>
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b5f      	cmp	r3, #95	; 0x5f
 8001b56:	d101      	bne.n	8001b5c <is_valid_unquoted_key_char+0x38>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <is_valid_unquoted_key_char+0x3a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <json_get_key_size>:

json_weak int json_get_key_size(struct json_parse_state_s *state);
int json_get_key_size(struct json_parse_state_s *state) {
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b088      	sub	sp, #32
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	617b      	str	r3, [r7, #20]

  if (json_parse_flags_allow_unquoted_keys & flags_bitset) {
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d059      	beq.n	8001c36 <json_get_key_size+0xcc>
    size_t offset = state->offset;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61fb      	str	r3, [r7, #28]
    const size_t size = state->size;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]
    const char *const src = state->src;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]
    size_t data_size = state->data_size;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	61bb      	str	r3, [r7, #24]

    /* if we are allowing unquoted keys, first grok for a quote... */
    if ('"' == src[offset]) {
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b22      	cmp	r3, #34	; 0x22
 8001ba4:	d105      	bne.n	8001bb2 <json_get_key_size+0x48>
      /* ... if we got a comma, just parse the key as a string as normal. */
      return json_get_string_size(state, 1);
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fe13 	bl	80017d4 <json_get_string_size>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	e046      	b.n	8001c40 <json_get_key_size+0xd6>
    } else if ((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d011      	beq.n	8001be0 <json_get_key_size+0x76>
               ('\'' == src[offset])) {
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
    } else if ((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8001bc4:	2b27      	cmp	r3, #39	; 0x27
 8001bc6:	d10b      	bne.n	8001be0 <json_get_key_size+0x76>
      /* ... if we got a comma, just parse the key as a string as normal. */
      return json_get_string_size(state, 1);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff fe02 	bl	80017d4 <json_get_string_size>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	e035      	b.n	8001c40 <json_get_key_size+0xd6>
    } else {
      while ((offset < size) && is_valid_unquoted_key_char(src[offset])) {
        offset++;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
        data_size++;
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
      while ((offset < size) && is_valid_unquoted_key_char(src[offset])) {
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d209      	bcs.n	8001bfc <json_get_key_size+0x92>
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff97 	bl	8001b24 <is_valid_unquoted_key_char>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1eb      	bne.n	8001bd4 <json_get_key_size+0x6a>
      }

      /* one more byte for null terminator ending the string! */
      data_size++;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	61bb      	str	r3, [r7, #24]

      if (json_parse_flags_allow_location_information & flags_bitset) {
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <json_get_key_size+0xb0>
        state->dom_size += sizeof(struct json_string_ex_s);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f103 0214 	add.w	r2, r3, #20
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
 8001c18:	e005      	b.n	8001c26 <json_get_key_size+0xbc>
      } else {
        state->dom_size += sizeof(struct json_string_s);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f103 0208 	add.w	r2, r3, #8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	619a      	str	r2, [r3, #24]
      }

      /* update offset. */
      state->offset = offset;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	609a      	str	r2, [r3, #8]

      /* update data_size. */
      state->data_size = data_size;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	61da      	str	r2, [r3, #28]

      return 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e004      	b.n	8001c40 <json_get_key_size+0xd6>
    }
  } else {
    /* we are only allowed to have quoted keys, so just parse a string! */
    return json_get_string_size(state, 1);
 8001c36:	2101      	movs	r1, #1
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fdcb 	bl	80017d4 <json_get_string_size>
 8001c3e:	4603      	mov	r3, r0
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <json_get_object_size>:

json_weak int json_get_object_size(struct json_parse_state_s *state,
                                   int is_global_object);
int json_get_object_size(struct json_parse_state_s *state,
                         int is_global_object) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	61bb      	str	r3, [r7, #24]
  const char *const src = state->src;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	613b      	str	r3, [r7, #16]
  size_t elements = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  int allow_comma = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  int found_closing_brace = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]

  if (is_global_object) {
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00f      	beq.n	8001c96 <json_get_object_size+0x4e>
    /* if we found an opening '{' of an object, we actually have a normal JSON
     * object at the root of the DOM... */
    if (!json_skip_all_skippables(state) && '{' == state->src[state->offset]) {
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fd59 	bl	800172e <json_skip_all_skippables>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <json_get_object_size+0x4e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b7b      	cmp	r3, #123	; 0x7b
 8001c90:	d101      	bne.n	8001c96 <json_get_object_size+0x4e>
      /* . and we don't actually have a global object after all! */
      is_global_object = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
    }
  }

  if (!is_global_object) {
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d110      	bne.n	8001cbe <json_get_object_size+0x76>
    if ('{' != src[state->offset]) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b7b      	cmp	r3, #123	; 0x7b
 8001ca8:	d004      	beq.n	8001cb4 <json_get_object_size+0x6c>
      state->error = json_parse_error_unknown;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	220b      	movs	r2, #11
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0e5      	b.n	8001e80 <json_get_object_size+0x238>
    }

    /* skip leading '{'. */
    state->offset++;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
  }

  state->dom_size += sizeof(struct json_object_s);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f103 0208 	add.w	r2, r3, #8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]

  if ((state->offset == size) && !is_global_object) {
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d107      	bne.n	8001ce4 <json_get_object_size+0x9c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d104      	bne.n	8001ce4 <json_get_object_size+0x9c>
    state->error = json_parse_error_premature_end_of_buffer;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2207      	movs	r2, #7
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0cd      	b.n	8001e80 <json_get_object_size+0x238>
  }

  do {
    if (!is_global_object) {
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d119      	bne.n	8001d1e <json_get_object_size+0xd6>
      if (json_skip_all_skippables(state)) {
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fd1f 	bl	800172e <json_skip_all_skippables>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <json_get_object_size+0xb8>
        state->error = json_parse_error_premature_end_of_buffer;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0bf      	b.n	8001e80 <json_get_object_size+0x238>
      }

      if ('}' == src[state->offset]) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b7d      	cmp	r3, #125	; 0x7d
 8001d0c:	d10e      	bne.n	8001d2c <json_get_object_size+0xe4>
        /* skip trailing '}'. */
        state->offset++;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	609a      	str	r2, [r3, #8]

        found_closing_brace = 1;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]

        /* finished the object! */
        break;
 8001d1c:	e095      	b.n	8001e4a <json_get_object_size+0x202>
      }
    } else {
      /* we don't require brackets, so that means the object ends when the input
       * stream ends! */
      if (json_skip_all_skippables(state)) {
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff fd05 	bl	800172e <json_skip_all_skippables>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 808e 	bne.w	8001e48 <json_get_object_size+0x200>
        break;
      }
    }

    /* if we parsed at least once element previously, grok for a comma. */
    if (allow_comma) {
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02b      	beq.n	8001d8a <json_get_object_size+0x142>
      if (',' == src[state->offset]) {
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b2c      	cmp	r3, #44	; 0x2c
 8001d3e:	d107      	bne.n	8001d50 <json_get_object_size+0x108>
        /* skip comma. */
        state->offset++;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	e00c      	b.n	8001d6a <json_get_object_size+0x122>
      } else if (json_parse_flags_allow_no_commas & flags_bitset) {
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <json_get_object_size+0x118>
        /* we don't require a comma, and we didn't find one, which is ok! */
        allow_comma = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	e004      	b.n	8001d6a <json_get_object_size+0x122>
      } else {
        /* otherwise we are required to have a comma, and we found none. */
        state->error = json_parse_error_expected_comma_or_closing_bracket;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e08a      	b.n	8001e80 <json_get_object_size+0x238>
      }

      if (json_parse_flags_allow_trailing_comma & flags_bitset) {
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d161      	bne.n	8001e38 <json_get_object_size+0x1f0>
        continue;
      } else {
        if (json_skip_all_skippables(state)) {
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fcda 	bl	800172e <json_skip_all_skippables>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <json_get_object_size+0x142>
          state->error = json_parse_error_premature_end_of_buffer;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2207      	movs	r2, #7
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
          return 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e07a      	b.n	8001e80 <json_get_object_size+0x238>
        }
      }
    }

    if (json_get_key_size(state)) {
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff feed 	bl	8001b6a <json_get_key_size>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <json_get_object_size+0x158>
      /* key parsing failed! */
      state->error = json_parse_error_invalid_string;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e06f      	b.n	8001e80 <json_get_object_size+0x238>
    }

    if (json_skip_all_skippables(state)) {
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fcc4 	bl	800172e <json_skip_all_skippables>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d004      	beq.n	8001db6 <json_get_object_size+0x16e>
      state->error = json_parse_error_premature_end_of_buffer;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2207      	movs	r2, #7
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e064      	b.n	8001e80 <json_get_object_size+0x238>
    }

    if (json_parse_flags_allow_equals_in_object & flags_bitset) {
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <json_get_object_size+0x19a>
      const char current = src[state->offset];
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	73fb      	strb	r3, [r7, #15]
      if ((':' != current) && ('=' != current)) {
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b3a      	cmp	r3, #58	; 0x3a
 8001dd0:	d013      	beq.n	8001dfa <json_get_object_size+0x1b2>
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b3d      	cmp	r3, #61	; 0x3d
 8001dd6:	d010      	beq.n	8001dfa <json_get_object_size+0x1b2>
        state->error = json_parse_error_expected_colon;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e04e      	b.n	8001e80 <json_get_object_size+0x238>
      }
    } else {
      if (':' != src[state->offset]) {
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b3a      	cmp	r3, #58	; 0x3a
 8001dee:	d004      	beq.n	8001dfa <json_get_object_size+0x1b2>
        state->error = json_parse_error_expected_colon;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e042      	b.n	8001e80 <json_get_object_size+0x238>
      }
    }

    /* skip colon. */
    state->offset++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]

    if (json_skip_all_skippables(state)) {
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fc92 	bl	800172e <json_skip_all_skippables>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <json_get_object_size+0x1d2>
      state->error = json_parse_error_premature_end_of_buffer;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2207      	movs	r2, #7
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e032      	b.n	8001e80 <json_get_object_size+0x238>
    }

    if (json_get_value_size(state, /* is_global_object = */ 0)) {
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fb43 	bl	80024a8 <json_get_value_size>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <json_get_object_size+0x1e4>
      /* value parsing failed! */
      return 1;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e029      	b.n	8001e80 <json_get_object_size+0x238>
    }

    /* successfully parsed a name/value pair! */
    elements++;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	3301      	adds	r3, #1
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    allow_comma = 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	623b      	str	r3, [r7, #32]
 8001e36:	e000      	b.n	8001e3a <json_get_object_size+0x1f2>
        continue;
 8001e38:	bf00      	nop
  } while (state->offset < size);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	f63f af4f 	bhi.w	8001ce4 <json_get_object_size+0x9c>
 8001e46:	e000      	b.n	8001e4a <json_get_object_size+0x202>
        break;
 8001e48:	bf00      	nop

  if ((state->offset == size) && !is_global_object && !found_closing_brace) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10a      	bne.n	8001e6a <json_get_object_size+0x222>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d107      	bne.n	8001e6a <json_get_object_size+0x222>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <json_get_object_size+0x222>
    state->error = json_parse_error_premature_end_of_buffer;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2207      	movs	r2, #7
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00a      	b.n	8001e80 <json_get_object_size+0x238>
  }

  state->dom_size += sizeof(struct json_object_element_s) * elements;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6999      	ldr	r1, [r3, #24]
 8001e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	18ca      	adds	r2, r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]

  return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3728      	adds	r7, #40	; 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <json_get_array_size>:

json_weak int json_get_array_size(struct json_parse_state_s *state);
int json_get_array_size(struct json_parse_state_s *state) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	617b      	str	r3, [r7, #20]
  size_t elements = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  int allow_comma = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  const char *const src = state->src;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
  const size_t size = state->size;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  if ('[' != src[state->offset]) {
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b5b      	cmp	r3, #91	; 0x5b
 8001eb6:	d004      	beq.n	8001ec2 <json_get_array_size+0x3a>
    /* expected array to begin with leading '['. */
    state->error = json_parse_error_unknown;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	220b      	movs	r2, #11
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e071      	b.n	8001fa6 <json_get_array_size+0x11e>
  }

  /* skip leading '['. */
  state->offset++;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]

  state->dom_size += sizeof(struct json_array_s);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f103 0208 	add.w	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]

  while (state->offset < size) {
 8001ed8:	e05c      	b.n	8001f94 <json_get_array_size+0x10c>
    if (json_skip_all_skippables(state)) {
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fc27 	bl	800172e <json_skip_all_skippables>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d004      	beq.n	8001ef0 <json_get_array_size+0x68>
      state->error = json_parse_error_premature_end_of_buffer;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2207      	movs	r2, #7
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e05a      	b.n	8001fa6 <json_get_array_size+0x11e>
    }

    if (']' == src[state->offset]) {
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b5d      	cmp	r3, #93	; 0x5d
 8001efc:	d10d      	bne.n	8001f1a <json_get_array_size+0x92>
      /* skip trailing ']'. */
      state->offset++;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]

      state->dom_size += sizeof(struct json_array_element_s) * elements;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	441a      	add	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	619a      	str	r2, [r3, #24]

      /* finished the object! */
      return 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e045      	b.n	8001fa6 <json_get_array_size+0x11e>
    }

    /* if we parsed at least once element previously, grok for a comma. */
    if (allow_comma) {
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d02b      	beq.n	8001f78 <json_get_array_size+0xf0>
      if (',' == src[state->offset]) {
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001f2c:	d107      	bne.n	8001f3e <json_get_array_size+0xb6>
        /* skip comma. */
        state->offset++;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	e009      	b.n	8001f52 <json_get_array_size+0xca>
      } else if (!(json_parse_flags_allow_no_commas & flags_bitset)) {
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <json_get_array_size+0xca>
        state->error = json_parse_error_expected_comma_or_closing_bracket;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e029      	b.n	8001fa6 <json_get_array_size+0x11e>
      }

      if (json_parse_flags_allow_trailing_comma & flags_bitset) {
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <json_get_array_size+0xda>
        allow_comma = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
        continue;
 8001f60:	e018      	b.n	8001f94 <json_get_array_size+0x10c>
      } else {
        if (json_skip_all_skippables(state)) {
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fbe3 	bl	800172e <json_skip_all_skippables>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <json_get_array_size+0xf0>
          state->error = json_parse_error_premature_end_of_buffer;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2207      	movs	r2, #7
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
          return 1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e016      	b.n	8001fa6 <json_get_array_size+0x11e>
        }
      }
    }

    if (json_get_value_size(state, /* is_global_object = */ 0)) {
 8001f78:	2100      	movs	r1, #0
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa94 	bl	80024a8 <json_get_value_size>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <json_get_array_size+0x102>
      /* value parsing failed! */
      return 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00d      	b.n	8001fa6 <json_get_array_size+0x11e>
    }

    /* successfully parsed an array element! */
    elements++;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	61fb      	str	r3, [r7, #28]
    allow_comma = 1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  while (state->offset < size) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d89d      	bhi.n	8001eda <json_get_array_size+0x52>
  }

  /* we consumed the entire input before finding the closing ']' of the array!
   */
  state->error = json_parse_error_premature_end_of_buffer;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
  return 1;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <json_get_number_size>:

json_weak int json_get_number_size(struct json_parse_state_s *state);
int json_get_number_size(struct json_parse_state_s *state) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b095      	sub	sp, #84	; 0x54
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t offset = state->offset;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  const size_t size = state->size;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  int had_leading_digits = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  const char *const src = state->src;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

  state->dom_size += sizeof(struct json_number_s);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f103 0208 	add.w	r2, r3, #8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]

  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d04a      	beq.n	8002080 <json_get_number_size+0xd0>
      (offset + 1 < size) && ('0' == src[offset]) &&
 8001fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fec:	3301      	adds	r3, #1
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 8001fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d945      	bls.n	8002080 <json_get_number_size+0xd0>
      (offset + 1 < size) && ('0' == src[offset]) &&
 8001ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b30      	cmp	r3, #48	; 0x30
 8001ffe:	d13f      	bne.n	8002080 <json_get_number_size+0xd0>
      (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 8002000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002002:	3301      	adds	r3, #1
 8002004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
      (offset + 1 < size) && ('0' == src[offset]) &&
 800200a:	2b78      	cmp	r3, #120	; 0x78
 800200c:	d006      	beq.n	800201c <json_get_number_size+0x6c>
      (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 800200e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002010:	3301      	adds	r3, #1
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b58      	cmp	r3, #88	; 0x58
 800201a:	d131      	bne.n	8002080 <json_get_number_size+0xd0>
    /* skip the leading 0x that identifies a hexadecimal number. */
    offset += 2;
 800201c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800201e:	3302      	adds	r3, #2
 8002020:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* consume hexadecimal digits. */
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 8002022:	e002      	b.n	800202a <json_get_number_size+0x7a>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
      offset++;
 8002024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002026:	3301      	adds	r3, #1
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 800202a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	429a      	cmp	r2, r3
 8002030:	f080 81a3 	bcs.w	800237a <json_get_number_size+0x3ca>
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b2f      	cmp	r3, #47	; 0x2f
 800203e:	d905      	bls.n	800204c <json_get_number_size+0x9c>
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002044:	4413      	add	r3, r2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b39      	cmp	r3, #57	; 0x39
 800204a:	d9eb      	bls.n	8002024 <json_get_number_size+0x74>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 800204c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d905      	bls.n	8002064 <json_get_number_size+0xb4>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b66      	cmp	r3, #102	; 0x66
 8002062:	d9df      	bls.n	8002024 <json_get_number_size+0x74>
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 800206c:	2b40      	cmp	r3, #64	; 0x40
 800206e:	f240 8184 	bls.w	800237a <json_get_number_size+0x3ca>
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b46      	cmp	r3, #70	; 0x46
 800207c:	d9d2      	bls.n	8002024 <json_get_number_size+0x74>
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 800207e:	e17c      	b.n	800237a <json_get_number_size+0x3ca>
    }
  } else {
    int found_sign = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
    int inf_or_nan = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	643b      	str	r3, [r7, #64]	; 0x40

    if ((offset < size) &&
 8002088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	429a      	cmp	r2, r3
 800208e:	d215      	bcs.n	80020bc <json_get_number_size+0x10c>
        (('-' == src[offset]) ||
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002094:	4413      	add	r3, r2
 8002096:	781b      	ldrb	r3, [r3, #0]
    if ((offset < size) &&
 8002098:	2b2d      	cmp	r3, #45	; 0x2d
 800209a:	d00a      	beq.n	80020b2 <json_get_number_size+0x102>
         ((json_parse_flags_allow_leading_plus_sign & flags_bitset) &&
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (('-' == src[offset]) ||
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <json_get_number_size+0x10c>
          ('+' == src[offset])))) {
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
         ((json_parse_flags_allow_leading_plus_sign & flags_bitset) &&
 80020ae:	2b2b      	cmp	r3, #43	; 0x2b
 80020b0:	d104      	bne.n	80020bc <json_get_number_size+0x10c>
      /* skip valid leading '-' or '+'. */
      offset++;
 80020b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b4:	3301      	adds	r3, #1
 80020b6:	64fb      	str	r3, [r7, #76]	; 0x4c

      found_sign = 1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (json_parse_flags_allow_inf_and_nan & flags_bitset) {
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d061      	beq.n	800218a <json_get_number_size+0x1da>
      const char inf[9] = "Infinity";
 80020c6:	4a78      	ldr	r2, [pc, #480]	; (80022a8 <json_get_number_size+0x2f8>)
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ce:	c303      	stmia	r3!, {r0, r1}
 80020d0:	701a      	strb	r2, [r3, #0]
      const size_t inf_strlen = sizeof(inf) - 1;
 80020d2:	2308      	movs	r3, #8
 80020d4:	623b      	str	r3, [r7, #32]
      const char nan[4] = "NaN";
 80020d6:	4b75      	ldr	r3, [pc, #468]	; (80022ac <json_get_number_size+0x2fc>)
 80020d8:	60fb      	str	r3, [r7, #12]
      const size_t nan_strlen = sizeof(nan) - 1;
 80020da:	2303      	movs	r3, #3
 80020dc:	61fb      	str	r3, [r7, #28]

      if (offset + inf_strlen < size) {
 80020de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	4413      	add	r3, r2
 80020e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d924      	bls.n	8002134 <json_get_number_size+0x184>
        int found = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        size_t i;
        for (i = 0; i < inf_strlen; i++) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f2:	e012      	b.n	800211a <json_get_number_size+0x16a>
          if (inf[i] != src[offset + i]) {
 80020f4:	f107 0210 	add.w	r2, r7, #16
 80020f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020fa:	4413      	add	r3, r2
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002102:	440b      	add	r3, r1
 8002104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002106:	440b      	add	r3, r1
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d002      	beq.n	8002114 <json_get_number_size+0x164>
            found = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 8002112:	e006      	b.n	8002122 <json_get_number_size+0x172>
        for (i = 0; i < inf_strlen; i++) {
 8002114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002116:	3301      	adds	r3, #1
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
 800211a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3e8      	bcc.n	80020f4 <json_get_number_size+0x144>
          }
        }

        if (found) {
 8002122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <json_get_number_size+0x184>
          /* We found our special 'Infinity' keyword! */
          offset += inf_strlen;
 8002128:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	4413      	add	r3, r2
 800212e:	64fb      	str	r3, [r7, #76]	; 0x4c

          inf_or_nan = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }

      if (offset + nan_strlen < size) {
 8002134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800213c:	429a      	cmp	r2, r3
 800213e:	d924      	bls.n	800218a <json_get_number_size+0x1da>
        int found = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	637b      	str	r3, [r7, #52]	; 0x34
        size_t i;
        for (i = 0; i < nan_strlen; i++) {
 8002144:	2300      	movs	r3, #0
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
 8002148:	e012      	b.n	8002170 <json_get_number_size+0x1c0>
          if (nan[i] != src[offset + i]) {
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	4413      	add	r3, r2
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	440b      	add	r3, r1
 800215a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215c:	440b      	add	r3, r1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d002      	beq.n	800216a <json_get_number_size+0x1ba>
            found = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8002168:	e006      	b.n	8002178 <json_get_number_size+0x1c8>
        for (i = 0; i < nan_strlen; i++) {
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	3301      	adds	r3, #1
 800216e:	633b      	str	r3, [r7, #48]	; 0x30
 8002170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	429a      	cmp	r2, r3
 8002176:	d3e8      	bcc.n	800214a <json_get_number_size+0x19a>
          }
        }

        if (found) {
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <json_get_number_size+0x1da>
          /* We found our special 'NaN' keyword! */
          offset += nan_strlen;
 800217e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c

          inf_or_nan = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }
    }

    if (found_sign && !inf_or_nan && (offset < size) &&
 800218a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218c:	2b00      	cmp	r3, #0
 800218e:	d025      	beq.n	80021dc <json_get_number_size+0x22c>
 8002190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d122      	bne.n	80021dc <json_get_number_size+0x22c>
 8002196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	429a      	cmp	r2, r3
 800219c:	d21e      	bcs.n	80021dc <json_get_number_size+0x22c>
        !('0' <= src[offset] && src[offset] <= '9')) {
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
    if (found_sign && !inf_or_nan && (offset < size) &&
 80021a6:	2b2f      	cmp	r3, #47	; 0x2f
 80021a8:	d905      	bls.n	80021b6 <json_get_number_size+0x206>
        !('0' <= src[offset] && src[offset] <= '9')) {
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ae:	4413      	add	r3, r2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b39      	cmp	r3, #57	; 0x39
 80021b4:	d912      	bls.n	80021dc <json_get_number_size+0x22c>
      /* check if we are allowing leading '.'. */
      if (!(json_parse_flags_allow_leading_or_trailing_decimal_point &
 80021b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <json_get_number_size+0x21c>
            flags_bitset) ||
          ('.' != src[offset])) {
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
            flags_bitset) ||
 80021c8:	2b2e      	cmp	r3, #46	; 0x2e
 80021ca:	d007      	beq.n	80021dc <json_get_number_size+0x22c>
        /* a leading '-' must be immediately followed by any digit! */
        state->error = json_parse_error_invalid_number_format;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2205      	movs	r2, #5
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021d6:	609a      	str	r2, [r3, #8]
        return 1;
 80021d8:	2301      	movs	r3, #1
 80021da:	e15f      	b.n	800249c <json_get_number_size+0x4ec>
      }
    }

    if ((offset < size) && ('0' == src[offset])) {
 80021dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d227      	bcs.n	8002234 <json_get_number_size+0x284>
 80021e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d121      	bne.n	8002234 <json_get_number_size+0x284>
      /* skip valid '0'. */
      offset++;
 80021f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f2:	3301      	adds	r3, #1
 80021f4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* we need to record whether we had any leading digits for checks later.
       */
      had_leading_digits = 1;
 80021f6:	2301      	movs	r3, #1
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48

      if ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 80021fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	429a      	cmp	r2, r3
 8002200:	d218      	bcs.n	8002234 <json_get_number_size+0x284>
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b2f      	cmp	r3, #47	; 0x2f
 800220c:	d912      	bls.n	8002234 <json_get_number_size+0x284>
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002212:	4413      	add	r3, r2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b39      	cmp	r3, #57	; 0x39
 8002218:	d80c      	bhi.n	8002234 <json_get_number_size+0x284>
        /* a leading '0' must not be immediately followed by any digit! */
        state->error = json_parse_error_invalid_number_format;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2205      	movs	r2, #5
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002224:	609a      	str	r2, [r3, #8]
        return 1;
 8002226:	2301      	movs	r3, #1
 8002228:	e138      	b.n	800249c <json_get_number_size+0x4ec>
      }
    }

    /* the main digits of our number next. */
    while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
      offset++;
 800222a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222c:	3301      	adds	r3, #1
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* we need to record whether we had any leading digits for checks later.
       */
      had_leading_digits = 1;
 8002230:	2301      	movs	r3, #1
 8002232:	64bb      	str	r3, [r7, #72]	; 0x48
    while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 8002234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	429a      	cmp	r2, r3
 800223a:	d20b      	bcs.n	8002254 <json_get_number_size+0x2a4>
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002240:	4413      	add	r3, r2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b2f      	cmp	r3, #47	; 0x2f
 8002246:	d905      	bls.n	8002254 <json_get_number_size+0x2a4>
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224c:	4413      	add	r3, r2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b39      	cmp	r3, #57	; 0x39
 8002252:	d9ea      	bls.n	800222a <json_get_number_size+0x27a>
    }

    if ((offset < size) && ('.' == src[offset])) {
 8002254:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	429a      	cmp	r2, r3
 800225a:	d23c      	bcs.n	80022d6 <json_get_number_size+0x326>
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b2e      	cmp	r3, #46	; 0x2e
 8002266:	d136      	bne.n	80022d6 <json_get_number_size+0x326>
      offset++;
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	3301      	adds	r3, #1
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c

      if (!('0' <= src[offset] && src[offset] <= '9')) {
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b2f      	cmp	r3, #47	; 0x2f
 8002278:	d905      	bls.n	8002286 <json_get_number_size+0x2d6>
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b39      	cmp	r3, #57	; 0x39
 8002284:	d917      	bls.n	80022b6 <json_get_number_size+0x306>
        if (!(json_parse_flags_allow_leading_or_trailing_decimal_point &
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <json_get_number_size+0x2e6>
              flags_bitset) ||
 8002290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10f      	bne.n	80022b6 <json_get_number_size+0x306>
            !had_leading_digits) {
          /* a decimal point must be followed by at least one digit. */
          state->error = json_parse_error_invalid_number_format;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2205      	movs	r2, #5
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022a0:	609a      	str	r2, [r3, #8]
          return 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0fa      	b.n	800249c <json_get_number_size+0x4ec>
 80022a6:	bf00      	nop
 80022a8:	08016ee0 	.word	0x08016ee0
 80022ac:	004e614e 	.word	0x004e614e
        }
      }

      /* a decimal point can be followed by more digits of course! */
      while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
        offset++;
 80022b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b2:	3301      	adds	r3, #1
 80022b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 80022b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d20b      	bcs.n	80022d6 <json_get_number_size+0x326>
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b2f      	cmp	r3, #47	; 0x2f
 80022c8:	d905      	bls.n	80022d6 <json_get_number_size+0x326>
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b39      	cmp	r3, #57	; 0x39
 80022d4:	d9ec      	bls.n	80022b0 <json_get_number_size+0x300>
      }
    }

    if ((offset < size) && ('e' == src[offset] || 'E' == src[offset])) {
 80022d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	429a      	cmp	r2, r3
 80022dc:	d24e      	bcs.n	800237c <json_get_number_size+0x3cc>
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b65      	cmp	r3, #101	; 0x65
 80022e8:	d005      	beq.n	80022f6 <json_get_number_size+0x346>
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b45      	cmp	r3, #69	; 0x45
 80022f4:	d142      	bne.n	800237c <json_get_number_size+0x3cc>
      /* our number has an exponent! Skip 'e' or 'E'. */
      offset++;
 80022f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f8:	3301      	adds	r3, #1
 80022fa:	64fb      	str	r3, [r7, #76]	; 0x4c

      if ((offset < size) && ('-' == src[offset] || '+' == src[offset])) {
 80022fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	429a      	cmp	r2, r3
 8002302:	d20e      	bcs.n	8002322 <json_get_number_size+0x372>
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b2d      	cmp	r3, #45	; 0x2d
 800230e:	d005      	beq.n	800231c <json_get_number_size+0x36c>
 8002310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b2b      	cmp	r3, #43	; 0x2b
 800231a:	d102      	bne.n	8002322 <json_get_number_size+0x372>
        /* skip optional '-' or '+'. */
        offset++;
 800231c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231e:	3301      	adds	r3, #1
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      if ((offset < size) && !('0' <= src[offset] && src[offset] <= '9')) {
 8002322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	429a      	cmp	r2, r3
 8002328:	d213      	bcs.n	8002352 <json_get_number_size+0x3a2>
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b2f      	cmp	r3, #47	; 0x2f
 8002334:	d905      	bls.n	8002342 <json_get_number_size+0x392>
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b39      	cmp	r3, #57	; 0x39
 8002340:	d907      	bls.n	8002352 <json_get_number_size+0x3a2>
        /* an exponent must have at least one digit! */
        state->error = json_parse_error_invalid_number_format;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2205      	movs	r2, #5
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800234c:	609a      	str	r2, [r3, #8]
        return 1;
 800234e:	2301      	movs	r3, #1
 8002350:	e0a4      	b.n	800249c <json_get_number_size+0x4ec>
      }

      /* consume exponent digits. */
      do {
        offset++;
 8002352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002354:	3301      	adds	r3, #1
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
      } while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9'));
 8002358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	429a      	cmp	r2, r3
 800235e:	d20d      	bcs.n	800237c <json_get_number_size+0x3cc>
 8002360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b2f      	cmp	r3, #47	; 0x2f
 800236a:	d907      	bls.n	800237c <json_get_number_size+0x3cc>
 800236c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b39      	cmp	r3, #57	; 0x39
 8002376:	d9ec      	bls.n	8002352 <json_get_number_size+0x3a2>
 8002378:	e000      	b.n	800237c <json_get_number_size+0x3cc>
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 800237a:	bf00      	nop
    }
  }

  if (offset < size) {
 800237c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	429a      	cmp	r2, r3
 8002382:	d274      	bcs.n	800246e <json_get_number_size+0x4be>
    switch (src[offset]) {
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b7d      	cmp	r3, #125	; 0x7d
 800238e:	d070      	beq.n	8002472 <json_get_number_size+0x4c2>
 8002390:	2b7d      	cmp	r3, #125	; 0x7d
 8002392:	dc64      	bgt.n	800245e <json_get_number_size+0x4ae>
 8002394:	2b5d      	cmp	r3, #93	; 0x5d
 8002396:	d06c      	beq.n	8002472 <json_get_number_size+0x4c2>
 8002398:	2b5d      	cmp	r3, #93	; 0x5d
 800239a:	dc60      	bgt.n	800245e <json_get_number_size+0x4ae>
 800239c:	2b2c      	cmp	r3, #44	; 0x2c
 800239e:	dc4f      	bgt.n	8002440 <json_get_number_size+0x490>
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	db5c      	blt.n	800245e <json_get_number_size+0x4ae>
 80023a4:	3b09      	subs	r3, #9
 80023a6:	2b23      	cmp	r3, #35	; 0x23
 80023a8:	d859      	bhi.n	800245e <json_get_number_size+0x4ae>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <json_get_number_size+0x400>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	08002473 	.word	0x08002473
 80023b4:	08002473 	.word	0x08002473
 80023b8:	0800245f 	.word	0x0800245f
 80023bc:	0800245f 	.word	0x0800245f
 80023c0:	08002473 	.word	0x08002473
 80023c4:	0800245f 	.word	0x0800245f
 80023c8:	0800245f 	.word	0x0800245f
 80023cc:	0800245f 	.word	0x0800245f
 80023d0:	0800245f 	.word	0x0800245f
 80023d4:	0800245f 	.word	0x0800245f
 80023d8:	0800245f 	.word	0x0800245f
 80023dc:	0800245f 	.word	0x0800245f
 80023e0:	0800245f 	.word	0x0800245f
 80023e4:	0800245f 	.word	0x0800245f
 80023e8:	0800245f 	.word	0x0800245f
 80023ec:	0800245f 	.word	0x0800245f
 80023f0:	0800245f 	.word	0x0800245f
 80023f4:	0800245f 	.word	0x0800245f
 80023f8:	0800245f 	.word	0x0800245f
 80023fc:	0800245f 	.word	0x0800245f
 8002400:	0800245f 	.word	0x0800245f
 8002404:	0800245f 	.word	0x0800245f
 8002408:	0800245f 	.word	0x0800245f
 800240c:	08002473 	.word	0x08002473
 8002410:	0800245f 	.word	0x0800245f
 8002414:	0800245f 	.word	0x0800245f
 8002418:	0800245f 	.word	0x0800245f
 800241c:	0800245f 	.word	0x0800245f
 8002420:	0800245f 	.word	0x0800245f
 8002424:	0800245f 	.word	0x0800245f
 8002428:	0800245f 	.word	0x0800245f
 800242c:	0800245f 	.word	0x0800245f
 8002430:	0800245f 	.word	0x0800245f
 8002434:	0800245f 	.word	0x0800245f
 8002438:	0800245f 	.word	0x0800245f
 800243c:	08002473 	.word	0x08002473
 8002440:	2b3d      	cmp	r3, #61	; 0x3d
 8002442:	d10c      	bne.n	800245e <json_get_number_size+0x4ae>
    case ',':
    case ']':
      /* all of the above are ok. */
      break;
    case '=':
      if (json_parse_flags_allow_equals_in_object & flags_bitset) {
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d113      	bne.n	8002476 <json_get_number_size+0x4c6>
        break;
      }

      state->error = json_parse_error_invalid_number_format;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2205      	movs	r2, #5
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002458:	609a      	str	r2, [r3, #8]
      return 1;
 800245a:	2301      	movs	r3, #1
 800245c:	e01e      	b.n	800249c <json_get_number_size+0x4ec>
    default:
      state->error = json_parse_error_invalid_number_format;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2205      	movs	r2, #5
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002468:	609a      	str	r2, [r3, #8]
      return 1;
 800246a:	2301      	movs	r3, #1
 800246c:	e016      	b.n	800249c <json_get_number_size+0x4ec>
    }
  }
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <json_get_number_size+0x4c8>
      break;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <json_get_number_size+0x4c8>
        break;
 8002476:	bf00      	nop

  state->data_size += offset - state->offset;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002482:	1acb      	subs	r3, r1, r3
 8002484:	441a      	add	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	61da      	str	r2, [r3, #28]

  /* one more byte for null terminator ending the number string! */
  state->data_size++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	61da      	str	r2, [r3, #28]

  /* update offset. */
  state->offset = offset;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002498:	609a      	str	r2, [r3, #8]

  return 0;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3754      	adds	r7, #84	; 0x54
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <json_get_value_size>:

json_weak int json_get_value_size(struct json_parse_state_s *state,
                                  int is_global_object);
int json_get_value_size(struct json_parse_state_s *state,
                        int is_global_object) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	617b      	str	r3, [r7, #20]
  const char *const src = state->src;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
  size_t offset;
  const size_t size = state->size;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	60fb      	str	r3, [r7, #12]

  if (json_parse_flags_allow_location_information & flags_bitset) {
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <json_get_value_size+0x34>
    state->dom_size += sizeof(struct json_value_ex_s);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f103 0214 	add.w	r2, r3, #20
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
 80024da:	e005      	b.n	80024e8 <json_get_value_size+0x40>
  } else {
    state->dom_size += sizeof(struct json_value_s);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f103 0208 	add.w	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
  }

  if (is_global_object) {
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <json_get_value_size+0x52>
    return json_get_object_size(state, /* is_global_object = */ 1);
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff fba9 	bl	8001c48 <json_get_object_size>
 80024f6:	4603      	mov	r3, r0
 80024f8:	e1c6      	b.n	8002888 <json_get_value_size+0x3e0>
  } else {
    if (json_skip_all_skippables(state)) {
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff f917 	bl	800172e <json_skip_all_skippables>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <json_get_value_size+0x68>
      state->error = json_parse_error_premature_end_of_buffer;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2207      	movs	r2, #7
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 800250c:	2301      	movs	r3, #1
 800250e:	e1bb      	b.n	8002888 <json_get_value_size+0x3e0>
    }

    /* can cache offset now. */
    offset = state->offset;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60bb      	str	r3, [r7, #8]

    switch (src[offset]) {
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b5b      	cmp	r3, #91	; 0x5b
 8002520:	dc7e      	bgt.n	8002620 <json_get_value_size+0x178>
 8002522:	2b22      	cmp	r3, #34	; 0x22
 8002524:	f2c0 80c3 	blt.w	80026ae <json_get_value_size+0x206>
 8002528:	3b22      	subs	r3, #34	; 0x22
 800252a:	2b39      	cmp	r3, #57	; 0x39
 800252c:	f200 80bf 	bhi.w	80026ae <json_get_value_size+0x206>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <json_get_value_size+0x90>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002627 	.word	0x08002627
 800253c:	080026af 	.word	0x080026af
 8002540:	080026af 	.word	0x080026af
 8002544:	080026af 	.word	0x080026af
 8002548:	080026af 	.word	0x080026af
 800254c:	08002633 	.word	0x08002633
 8002550:	080026af 	.word	0x080026af
 8002554:	080026af 	.word	0x080026af
 8002558:	080026af 	.word	0x080026af
 800255c:	08002673 	.word	0x08002673
 8002560:	080026af 	.word	0x080026af
 8002564:	08002669 	.word	0x08002669
 8002568:	08002691 	.word	0x08002691
 800256c:	080026af 	.word	0x080026af
 8002570:	08002669 	.word	0x08002669
 8002574:	08002669 	.word	0x08002669
 8002578:	08002669 	.word	0x08002669
 800257c:	08002669 	.word	0x08002669
 8002580:	08002669 	.word	0x08002669
 8002584:	08002669 	.word	0x08002669
 8002588:	08002669 	.word	0x08002669
 800258c:	08002669 	.word	0x08002669
 8002590:	08002669 	.word	0x08002669
 8002594:	08002669 	.word	0x08002669
 8002598:	080026af 	.word	0x080026af
 800259c:	080026af 	.word	0x080026af
 80025a0:	080026af 	.word	0x080026af
 80025a4:	080026af 	.word	0x080026af
 80025a8:	080026af 	.word	0x080026af
 80025ac:	080026af 	.word	0x080026af
 80025b0:	080026af 	.word	0x080026af
 80025b4:	080026af 	.word	0x080026af
 80025b8:	080026af 	.word	0x080026af
 80025bc:	080026af 	.word	0x080026af
 80025c0:	080026af 	.word	0x080026af
 80025c4:	080026af 	.word	0x080026af
 80025c8:	080026af 	.word	0x080026af
 80025cc:	080026af 	.word	0x080026af
 80025d0:	080026af 	.word	0x080026af
 80025d4:	080026af 	.word	0x080026af
 80025d8:	080026af 	.word	0x080026af
 80025dc:	080026af 	.word	0x080026af
 80025e0:	080026af 	.word	0x080026af
 80025e4:	080026af 	.word	0x080026af
 80025e8:	080026af 	.word	0x080026af
 80025ec:	080026af 	.word	0x080026af
 80025f0:	080026af 	.word	0x080026af
 80025f4:	080026af 	.word	0x080026af
 80025f8:	080026af 	.word	0x080026af
 80025fc:	080026af 	.word	0x080026af
 8002600:	080026af 	.word	0x080026af
 8002604:	080026af 	.word	0x080026af
 8002608:	080026af 	.word	0x080026af
 800260c:	080026af 	.word	0x080026af
 8002610:	080026af 	.word	0x080026af
 8002614:	080026af 	.word	0x080026af
 8002618:	080026af 	.word	0x080026af
 800261c:	0800265f 	.word	0x0800265f
 8002620:	2b7b      	cmp	r3, #123	; 0x7b
 8002622:	d016      	beq.n	8002652 <json_get_value_size+0x1aa>
 8002624:	e043      	b.n	80026ae <json_get_value_size+0x206>
    case '"':
      return json_get_string_size(state, 0);
 8002626:	2100      	movs	r1, #0
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff f8d3 	bl	80017d4 <json_get_string_size>
 800262e:	4603      	mov	r3, r0
 8002630:	e12a      	b.n	8002888 <json_get_value_size+0x3e0>
    case '\'':
      if (json_parse_flags_allow_single_quoted_strings & flags_bitset) {
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <json_get_value_size+0x1a0>
        return json_get_string_size(state, 0);
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff f8c8 	bl	80017d4 <json_get_string_size>
 8002644:	4603      	mov	r3, r0
 8002646:	e11f      	b.n	8002888 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_value;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2206      	movs	r2, #6
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 800264e:	2301      	movs	r3, #1
 8002650:	e11a      	b.n	8002888 <json_get_value_size+0x3e0>
      }
    case '{':
      return json_get_object_size(state, /* is_global_object = */ 0);
 8002652:	2100      	movs	r1, #0
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff faf7 	bl	8001c48 <json_get_object_size>
 800265a:	4603      	mov	r3, r0
 800265c:	e114      	b.n	8002888 <json_get_value_size+0x3e0>
    case '[':
      return json_get_array_size(state);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fc12 	bl	8001e88 <json_get_array_size>
 8002664:	4603      	mov	r3, r0
 8002666:	e10f      	b.n	8002888 <json_get_value_size+0x3e0>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      return json_get_number_size(state);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fca1 	bl	8001fb0 <json_get_number_size>
 800266e:	4603      	mov	r3, r0
 8002670:	e10a      	b.n	8002888 <json_get_value_size+0x3e0>
    case '+':
      if (json_parse_flags_allow_leading_plus_sign & flags_bitset) {
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <json_get_value_size+0x1de>
        return json_get_number_size(state);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fc97 	bl	8001fb0 <json_get_number_size>
 8002682:	4603      	mov	r3, r0
 8002684:	e100      	b.n	8002888 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_number_format;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 800268c:	2301      	movs	r3, #1
 800268e:	e0fb      	b.n	8002888 <json_get_value_size+0x3e0>
      }
    case '.':
      if (json_parse_flags_allow_leading_or_trailing_decimal_point &
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <json_get_value_size+0x1fc>
          flags_bitset) {
        return json_get_number_size(state);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fc88 	bl	8001fb0 <json_get_number_size>
 80026a0:	4603      	mov	r3, r0
 80026a2:	e0f1      	b.n	8002888 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_number_format;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2205      	movs	r2, #5
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0ec      	b.n	8002888 <json_get_value_size+0x3e0>
      }
    default:
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3304      	adds	r3, #4
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d321      	bcc.n	80026fc <json_get_value_size+0x254>
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b74      	cmp	r3, #116	; 0x74
 80026c2:	d11b      	bne.n	80026fc <json_get_value_size+0x254>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	3301      	adds	r3, #1
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80026ce:	2b72      	cmp	r3, #114	; 0x72
 80026d0:	d114      	bne.n	80026fc <json_get_value_size+0x254>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3302      	adds	r3, #2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b75      	cmp	r3, #117	; 0x75
 80026de:	d10d      	bne.n	80026fc <json_get_value_size+0x254>
          'e' == src[offset + 3]) {
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3303      	adds	r3, #3
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	781b      	ldrb	r3, [r3, #0]
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80026ea:	2b65      	cmp	r3, #101	; 0x65
 80026ec:	d106      	bne.n	80026fc <json_get_value_size+0x254>
        state->offset += 4;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
        return 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e0c5      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	3305      	adds	r3, #5
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	429a      	cmp	r2, r3
 8002704:	d328      	bcc.n	8002758 <json_get_value_size+0x2b0>
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4413      	add	r3, r2
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b66      	cmp	r3, #102	; 0x66
 8002710:	d122      	bne.n	8002758 <json_get_value_size+0x2b0>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3301      	adds	r3, #1
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 800271c:	2b61      	cmp	r3, #97	; 0x61
 800271e:	d11b      	bne.n	8002758 <json_get_value_size+0x2b0>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3302      	adds	r3, #2
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b6c      	cmp	r3, #108	; 0x6c
 800272c:	d114      	bne.n	8002758 <json_get_value_size+0x2b0>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3303      	adds	r3, #3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	781b      	ldrb	r3, [r3, #0]
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002738:	2b73      	cmp	r3, #115	; 0x73
 800273a:	d10d      	bne.n	8002758 <json_get_value_size+0x2b0>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	3304      	adds	r3, #4
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b65      	cmp	r3, #101	; 0x65
 8002748:	d106      	bne.n	8002758 <json_get_value_size+0x2b0>
        state->offset += 5;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	1d5a      	adds	r2, r3, #5
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]
        return 0;
 8002754:	2300      	movs	r3, #0
 8002756:	e097      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((offset + 4) <= size && 'n' == state->src[offset + 0] &&
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3304      	adds	r3, #4
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	429a      	cmp	r2, r3
 8002760:	d325      	bcc.n	80027ae <json_get_value_size+0x306>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b6e      	cmp	r3, #110	; 0x6e
 800276e:	d11e      	bne.n	80027ae <json_get_value_size+0x306>
                 'u' == state->src[offset + 1] &&
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 4) <= size && 'n' == state->src[offset + 0] &&
 800277c:	2b75      	cmp	r3, #117	; 0x75
 800277e:	d116      	bne.n	80027ae <json_get_value_size+0x306>
                 'l' == state->src[offset + 2] &&
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3302      	adds	r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	781b      	ldrb	r3, [r3, #0]
                 'u' == state->src[offset + 1] &&
 800278c:	2b6c      	cmp	r3, #108	; 0x6c
 800278e:	d10e      	bne.n	80027ae <json_get_value_size+0x306>
                 'l' == state->src[offset + 3]) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3303      	adds	r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
                 'l' == state->src[offset + 2] &&
 800279c:	2b6c      	cmp	r3, #108	; 0x6c
 800279e:	d106      	bne.n	80027ae <json_get_value_size+0x306>
        state->offset += 4;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	609a      	str	r2, [r3, #8]
        return 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e06c      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01d      	beq.n	80027f4 <json_get_value_size+0x34c>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	3303      	adds	r3, #3
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d318      	bcc.n	80027f4 <json_get_value_size+0x34c>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b4e      	cmp	r3, #78	; 0x4e
 80027cc:	d112      	bne.n	80027f4 <json_get_value_size+0x34c>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	3301      	adds	r3, #1
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	781b      	ldrb	r3, [r3, #0]
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80027d8:	2b61      	cmp	r3, #97	; 0x61
 80027da:	d10b      	bne.n	80027f4 <json_get_value_size+0x34c>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3302      	adds	r3, #2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b4e      	cmp	r3, #78	; 0x4e
 80027e8:	d104      	bne.n	80027f4 <json_get_value_size+0x34c>
        return json_get_number_size(state);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fbe0 	bl	8001fb0 <json_get_number_size>
 80027f0:	4603      	mov	r3, r0
 80027f2:	e049      	b.n	8002888 <json_get_value_size+0x3e0>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d040      	beq.n	8002880 <json_get_value_size+0x3d8>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	3308      	adds	r3, #8
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d33b      	bcc.n	8002880 <json_get_value_size+0x3d8>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b49      	cmp	r3, #73	; 0x49
 8002812:	d135      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3301      	adds	r3, #1
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 800281e:	2b6e      	cmp	r3, #110	; 0x6e
 8002820:	d12e      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3302      	adds	r3, #2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b66      	cmp	r3, #102	; 0x66
 800282e:	d127      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3303      	adds	r3, #3
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 800283a:	2b69      	cmp	r3, #105	; 0x69
 800283c:	d120      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3304      	adds	r3, #4
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4413      	add	r3, r2
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b6e      	cmp	r3, #110	; 0x6e
 800284a:	d119      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3305      	adds	r3, #5
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8002856:	2b69      	cmp	r3, #105	; 0x69
 8002858:	d112      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3306      	adds	r3, #6
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b74      	cmp	r3, #116	; 0x74
 8002866:	d10b      	bne.n	8002880 <json_get_value_size+0x3d8>
                 'y' == src[offset + 7]) {
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3307      	adds	r3, #7
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8002872:	2b79      	cmp	r3, #121	; 0x79
 8002874:	d104      	bne.n	8002880 <json_get_value_size+0x3d8>
        return json_get_number_size(state);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fb9a 	bl	8001fb0 <json_get_number_size>
 800287c:	4603      	mov	r3, r0
 800287e:	e003      	b.n	8002888 <json_get_value_size+0x3e0>
      }

      /* invalid value! */
      state->error = json_parse_error_invalid_value;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2206      	movs	r2, #6
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8002886:	2301      	movs	r3, #1
    }
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <json_parse_string>:
                                struct json_value_s *value);

json_weak void json_parse_string(struct json_parse_state_s *state,
                                 struct json_string_s *string);
void json_parse_string(struct json_parse_state_s *state,
                       struct json_string_s *string) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  size_t offset = state->offset;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  size_t bytes_written = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
  const char *const src = state->src;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
  const char quote_to_use = '\'' == src[offset] ? '\'' : '"';
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b27      	cmp	r3, #39	; 0x27
 80028b4:	d101      	bne.n	80028ba <json_parse_string+0x2a>
 80028b6:	2327      	movs	r3, #39	; 0x27
 80028b8:	e000      	b.n	80028bc <json_parse_string+0x2c>
 80028ba:	2322      	movs	r3, #34	; 0x22
 80028bc:	75fb      	strb	r3, [r7, #23]
  char *data = state->data;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	613b      	str	r3, [r7, #16]
  unsigned long high_surrogate = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
  unsigned long codepoint;

  string->string = data;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	601a      	str	r2, [r3, #0]

  /* skip leading '"' or '\''. */
  offset++;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24

  while (quote_to_use != src[offset]) {
 80028d4:	e18f      	b.n	8002bf6 <json_parse_string+0x366>
    if ('\\' == src[offset]) {
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b5c      	cmp	r3, #92	; 0x5c
 80028e0:	f040 817d 	bne.w	8002bde <json_parse_string+0x34e>
      /* skip the reverse solidus. */
      offset++;
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3301      	adds	r3, #1
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24

      switch (src[offset++]) {
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	627a      	str	r2, [r7, #36]	; 0x24
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b75      	cmp	r3, #117	; 0x75
 80028f8:	f300 819c 	bgt.w	8002c34 <json_parse_string+0x3a4>
 80028fc:	2b5c      	cmp	r3, #92	; 0x5c
 80028fe:	da12      	bge.n	8002926 <json_parse_string+0x96>
 8002900:	2b2f      	cmp	r3, #47	; 0x2f
 8002902:	f000 811a 	beq.w	8002b3a <json_parse_string+0x2aa>
 8002906:	2b2f      	cmp	r3, #47	; 0x2f
 8002908:	f300 8194 	bgt.w	8002c34 <json_parse_string+0x3a4>
 800290c:	2b22      	cmp	r3, #34	; 0x22
 800290e:	f000 8104 	beq.w	8002b1a <json_parse_string+0x28a>
 8002912:	2b22      	cmp	r3, #34	; 0x22
 8002914:	f300 818e 	bgt.w	8002c34 <json_parse_string+0x3a4>
 8002918:	2b0a      	cmp	r3, #10
 800291a:	f000 8156 	beq.w	8002bca <json_parse_string+0x33a>
 800291e:	2b0d      	cmp	r3, #13
 8002920:	f000 813b 	beq.w	8002b9a <json_parse_string+0x30a>
      default:
        return; /* we cannot ever reach here. */
 8002924:	e186      	b.n	8002c34 <json_parse_string+0x3a4>
 8002926:	3b5c      	subs	r3, #92	; 0x5c
 8002928:	2b19      	cmp	r3, #25
 800292a:	f200 8183 	bhi.w	8002c34 <json_parse_string+0x3a4>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <json_parse_string+0xa4>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002b2b 	.word	0x08002b2b
 8002938:	08002c35 	.word	0x08002c35
 800293c:	08002c35 	.word	0x08002c35
 8002940:	08002c35 	.word	0x08002c35
 8002944:	08002c35 	.word	0x08002c35
 8002948:	08002c35 	.word	0x08002c35
 800294c:	08002b4b 	.word	0x08002b4b
 8002950:	08002c35 	.word	0x08002c35
 8002954:	08002c35 	.word	0x08002c35
 8002958:	08002c35 	.word	0x08002c35
 800295c:	08002b5b 	.word	0x08002b5b
 8002960:	08002c35 	.word	0x08002c35
 8002964:	08002c35 	.word	0x08002c35
 8002968:	08002c35 	.word	0x08002c35
 800296c:	08002c35 	.word	0x08002c35
 8002970:	08002c35 	.word	0x08002c35
 8002974:	08002c35 	.word	0x08002c35
 8002978:	08002c35 	.word	0x08002c35
 800297c:	08002b6b 	.word	0x08002b6b
 8002980:	08002c35 	.word	0x08002c35
 8002984:	08002c35 	.word	0x08002c35
 8002988:	08002c35 	.word	0x08002c35
 800298c:	08002b7b 	.word	0x08002b7b
 8002990:	08002c35 	.word	0x08002c35
 8002994:	08002b8b 	.word	0x08002b8b
 8002998:	0800299d 	.word	0x0800299d
      case 'u': {
        codepoint = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
        if (!json_hexadecimal_value(&src[offset], 4, &codepoint)) {
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	4413      	add	r3, r2
 80029a6:	f107 0208 	add.w	r2, r7, #8
 80029aa:	2104      	movs	r1, #4
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fd6d 	bl	800148c <json_hexadecimal_value>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 813f 	beq.w	8002c38 <json_parse_string+0x3a8>
          return; /* this shouldn't happen as the value was already validated.
                   */
        }

        offset += 4;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	3304      	adds	r3, #4
 80029be:	627b      	str	r3, [r7, #36]	; 0x24

        if (codepoint <= 0x7fu) {
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b7f      	cmp	r3, #127	; 0x7f
 80029c4:	d808      	bhi.n	80029d8 <json_parse_string+0x148>
          data[bytes_written++] = (char)codepoint; /* 0xxxxxxx. */
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	623a      	str	r2, [r7, #32]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	b2ca      	uxtb	r2, r1
 80029d4:	701a      	strb	r2, [r3, #0]
          data[bytes_written++] =
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
          data[bytes_written++] =
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
        }
      } break;
 80029d6:	e10e      	b.n	8002bf6 <json_parse_string+0x366>
        } else if (codepoint <= 0x7ffu) {
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029de:	d21a      	bcs.n	8002a16 <json_parse_string+0x186>
              (char)(0xc0u | (codepoint >> 6)); /* 110xxxxx. */
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	099b      	lsrs	r3, r3, #6
 80029e4:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	6239      	str	r1, [r7, #32]
 80029ec:	6939      	ldr	r1, [r7, #16]
 80029ee:	440b      	add	r3, r1
              (char)(0xc0u | (codepoint >> 6)); /* 110xxxxx. */
 80029f0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80029f4:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 80029f6:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a00:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	1c59      	adds	r1, r3, #1
 8002a06:	6239      	str	r1, [r7, #32]
 8002a08:	6939      	ldr	r1, [r7, #16]
 8002a0a:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a10:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002a12:	701a      	strb	r2, [r3, #0]
      } break;
 8002a14:	e0ef      	b.n	8002bf6 <json_parse_string+0x366>
        } else if (codepoint >= 0xd800 &&
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8002a1c:	d306      	bcc.n	8002a2c <json_parse_string+0x19c>
                   codepoint <= 0xdbff) { /* high surrogate. */
 8002a1e:	68bb      	ldr	r3, [r7, #8]
        } else if (codepoint >= 0xd800 &&
 8002a20:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002a24:	d202      	bcs.n	8002a2c <json_parse_string+0x19c>
          high_surrogate = codepoint;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	61fb      	str	r3, [r7, #28]
          continue; /* we need the low half to form a complete codepoint. */
 8002a2a:	e0e4      	b.n	8002bf6 <json_parse_string+0x366>
        } else if (codepoint >= 0xdc00 &&
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8002a32:	d348      	bcc.n	8002ac6 <json_parse_string+0x236>
                   codepoint <= 0xdfff) { /* low surrogate. */
 8002a34:	68bb      	ldr	r3, [r7, #8]
        } else if (codepoint >= 0xdc00 &&
 8002a36:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002a3a:	d244      	bcs.n	8002ac6 <json_parse_string+0x236>
          const unsigned long surrogate_offset =
 8002a3c:	4b80      	ldr	r3, [pc, #512]	; (8002c40 <json_parse_string+0x3b0>)
 8002a3e:	60fb      	str	r3, [r7, #12]
          codepoint = (high_surrogate << 10) + codepoint + surrogate_offset;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	029a      	lsls	r2, r3, #10
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60bb      	str	r3, [r7, #8]
          high_surrogate = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
              (char)(0xF0u | (codepoint >> 18)); /* 11110xxx. */
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0c9b      	lsrs	r3, r3, #18
 8002a56:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	1c59      	adds	r1, r3, #1
 8002a5c:	6239      	str	r1, [r7, #32]
 8002a5e:	6939      	ldr	r1, [r7, #16]
 8002a60:	440b      	add	r3, r1
              (char)(0xF0u | (codepoint >> 18)); /* 11110xxx. */
 8002a62:	f062 020f 	orn	r2, r2, #15
 8002a66:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002a68:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 12) & 0x3fu)); /* 10xxxxxx. */
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	0b1b      	lsrs	r3, r3, #12
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a74:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	6239      	str	r1, [r7, #32]
 8002a7c:	6939      	ldr	r1, [r7, #16]
 8002a7e:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 12) & 0x3fu)); /* 10xxxxxx. */
 8002a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a84:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002a86:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a92:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	6239      	str	r1, [r7, #32]
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aa2:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002aa4:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aae:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	1c59      	adds	r1, r3, #1
 8002ab4:	6239      	str	r1, [r7, #32]
 8002ab6:	6939      	ldr	r1, [r7, #16]
 8002ab8:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002abe:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002ac0:	701a      	strb	r2, [r3, #0]
                   codepoint <= 0xdfff) { /* low surrogate. */
 8002ac2:	bf00      	nop
      } break;
 8002ac4:	e097      	b.n	8002bf6 <json_parse_string+0x366>
              (char)(0xe0u | (codepoint >> 12)); /* 1110xxxx. */
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0b1b      	lsrs	r3, r3, #12
 8002aca:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	1c59      	adds	r1, r3, #1
 8002ad0:	6239      	str	r1, [r7, #32]
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	440b      	add	r3, r1
              (char)(0xe0u | (codepoint >> 12)); /* 1110xxxx. */
 8002ad6:	f062 021f 	orn	r2, r2, #31
 8002ada:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002adc:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae8:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	1c59      	adds	r1, r3, #1
 8002aee:	6239      	str	r1, [r7, #32]
 8002af0:	6939      	ldr	r1, [r7, #16]
 8002af2:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8002af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002af8:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002afa:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b04:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	6239      	str	r1, [r7, #32]
 8002b0c:	6939      	ldr	r1, [r7, #16]
 8002b0e:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8002b10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b14:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8002b16:	701a      	strb	r2, [r3, #0]
      } break;
 8002b18:	e06d      	b.n	8002bf6 <json_parse_string+0x366>
      case '"':
        data[bytes_written++] = '"';
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	623a      	str	r2, [r7, #32]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	2222      	movs	r2, #34	; 0x22
 8002b26:	701a      	strb	r2, [r3, #0]
        break;
 8002b28:	e065      	b.n	8002bf6 <json_parse_string+0x366>
      case '\\':
        data[bytes_written++] = '\\';
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	623a      	str	r2, [r7, #32]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	225c      	movs	r2, #92	; 0x5c
 8002b36:	701a      	strb	r2, [r3, #0]
        break;
 8002b38:	e05d      	b.n	8002bf6 <json_parse_string+0x366>
      case '/':
        data[bytes_written++] = '/';
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	623a      	str	r2, [r7, #32]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4413      	add	r3, r2
 8002b44:	222f      	movs	r2, #47	; 0x2f
 8002b46:	701a      	strb	r2, [r3, #0]
        break;
 8002b48:	e055      	b.n	8002bf6 <json_parse_string+0x366>
      case 'b':
        data[bytes_written++] = '\b';
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	623a      	str	r2, [r7, #32]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	2208      	movs	r2, #8
 8002b56:	701a      	strb	r2, [r3, #0]
        break;
 8002b58:	e04d      	b.n	8002bf6 <json_parse_string+0x366>
      case 'f':
        data[bytes_written++] = '\f';
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	623a      	str	r2, [r7, #32]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	220c      	movs	r2, #12
 8002b66:	701a      	strb	r2, [r3, #0]
        break;
 8002b68:	e045      	b.n	8002bf6 <json_parse_string+0x366>
      case 'n':
        data[bytes_written++] = '\n';
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	623a      	str	r2, [r7, #32]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	220a      	movs	r2, #10
 8002b76:	701a      	strb	r2, [r3, #0]
        break;
 8002b78:	e03d      	b.n	8002bf6 <json_parse_string+0x366>
      case 'r':
        data[bytes_written++] = '\r';
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	623a      	str	r2, [r7, #32]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	220d      	movs	r2, #13
 8002b86:	701a      	strb	r2, [r3, #0]
        break;
 8002b88:	e035      	b.n	8002bf6 <json_parse_string+0x366>
      case 't':
        data[bytes_written++] = '\t';
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	623a      	str	r2, [r7, #32]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	2209      	movs	r2, #9
 8002b96:	701a      	strb	r2, [r3, #0]
        break;
 8002b98:	e02d      	b.n	8002bf6 <json_parse_string+0x366>
      case '\r':
        data[bytes_written++] = '\r';
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	623a      	str	r2, [r7, #32]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	220d      	movs	r2, #13
 8002ba6:	701a      	strb	r2, [r3, #0]

        /* check if we have a "\r\n" sequence. */
        if ('\n' == src[offset]) {
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	4413      	add	r3, r2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b0a      	cmp	r3, #10
 8002bb2:	d112      	bne.n	8002bda <json_parse_string+0x34a>
          data[bytes_written++] = '\n';
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	623a      	str	r2, [r7, #32]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	220a      	movs	r2, #10
 8002bc0:	701a      	strb	r2, [r3, #0]
          offset++;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
        }

        break;
 8002bc8:	e007      	b.n	8002bda <json_parse_string+0x34a>
      case '\n':
        data[bytes_written++] = '\n';
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	623a      	str	r2, [r7, #32]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	220a      	movs	r2, #10
 8002bd6:	701a      	strb	r2, [r3, #0]
        break;
 8002bd8:	e00d      	b.n	8002bf6 <json_parse_string+0x366>
        break;
 8002bda:	bf00      	nop
 8002bdc:	e00b      	b.n	8002bf6 <json_parse_string+0x366>
      }
    } else {
      /* copy the character. */
      data[bytes_written++] = src[offset++];
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	627a      	str	r2, [r7, #36]	; 0x24
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	441a      	add	r2, r3
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	1c59      	adds	r1, r3, #1
 8002bec:	6239      	str	r1, [r7, #32]
 8002bee:	6939      	ldr	r1, [r7, #16]
 8002bf0:	440b      	add	r3, r1
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
  while (quote_to_use != src[offset]) {
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	7dfa      	ldrb	r2, [r7, #23]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f47f ae68 	bne.w	80028d6 <json_parse_string+0x46>
    }
  }

  /* skip trailing '"' or '\''. */
  offset++;
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	3301      	adds	r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* record the size of the string. */
  string->string_size = bytes_written;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	605a      	str	r2, [r3, #4]

  /* add null terminator to string. */
  data[bytes_written++] = '\0';
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	623a      	str	r2, [r7, #32]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]

  /* move data along. */
  state->data += bytes_written;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	611a      	str	r2, [r3, #16]

  /* update offset. */
  state->offset = offset;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	e002      	b.n	8002c3a <json_parse_string+0x3aa>
        return; /* we cannot ever reach here. */
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <json_parse_string+0x3aa>
          return; /* this shouldn't happen as the value was already validated.
 8002c38:	bf00      	nop
}
 8002c3a:	3728      	adds	r7, #40	; 0x28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	fca02400 	.word	0xfca02400

08002c44 <json_parse_key>:

json_weak void json_parse_key(struct json_parse_state_s *state,
                              struct json_string_s *string);
void json_parse_key(struct json_parse_state_s *state,
                    struct json_string_s *string) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  if (json_parse_flags_allow_unquoted_keys & state->flags_bitset) {
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04a      	beq.n	8002cf0 <json_parse_key+0xac>
    const char *const src = state->src;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60fb      	str	r3, [r7, #12]
    char *const data = state->data;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	60bb      	str	r3, [r7, #8]
    size_t offset = state->offset;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	617b      	str	r3, [r7, #20]

    /* if we are allowing unquoted keys, check for quoted anyway... */
    if (('"' == src[offset]) || ('\'' == src[offset])) {
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b22      	cmp	r3, #34	; 0x22
 8002c76:	d005      	beq.n	8002c84 <json_parse_key+0x40>
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b27      	cmp	r3, #39	; 0x27
 8002c82:	d104      	bne.n	8002c8e <json_parse_key+0x4a>
      /* ... if we got a quote, just parse the key as a string as normal. */
      json_parse_string(state, string);
 8002c84:	6839      	ldr	r1, [r7, #0]
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fe02 	bl	8002890 <json_parse_string>
    }
  } else {
    /* we are only allowed to have quoted keys, so just parse a string! */
    json_parse_string(state, string);
  }
}
 8002c8c:	e034      	b.n	8002cf8 <json_parse_key+0xb4>
      size_t size = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
      string->string = state->data;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	601a      	str	r2, [r3, #0]
      while (is_valid_unquoted_key_char(src[offset])) {
 8002c9a:	e00b      	b.n	8002cb4 <json_parse_key+0x70>
        data[size++] = src[offset++];
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	617a      	str	r2, [r7, #20]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	441a      	add	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	6139      	str	r1, [r7, #16]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	440b      	add	r3, r1
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
      while (is_valid_unquoted_key_char(src[offset])) {
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	4413      	add	r3, r2
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe ff31 	bl	8001b24 <is_valid_unquoted_key_char>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e9      	bne.n	8002c9c <json_parse_key+0x58>
      data[size] = '\0';
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
      string->string_size = size++;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	613a      	str	r2, [r7, #16]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	6053      	str	r3, [r2, #4]
      state->data += size;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	611a      	str	r2, [r3, #16]
      state->offset = offset;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	e003      	b.n	8002cf8 <json_parse_key+0xb4>
    json_parse_string(state, string);
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fdcc 	bl	8002890 <json_parse_string>
}
 8002cf8:	bf00      	nop
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <json_parse_object>:

json_weak void json_parse_object(struct json_parse_state_s *state,
                                 int is_global_object,
                                 struct json_object_s *object);
void json_parse_object(struct json_parse_state_s *state, int is_global_object,
                       struct json_object_s *object) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b090      	sub	sp, #64	; 0x40
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
  const size_t size = state->size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  const char *const src = state->src;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	623b      	str	r3, [r7, #32]
  size_t elements = 0;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  int allow_comma = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
  struct json_object_element_s *previous = json_null;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34

  if (is_global_object) {
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <json_parse_object+0x42>
    /* if we skipped some whitespace, and then found an opening '{' of an. */
    /* object, we actually have a normal JSON object at the root of the DOM...
     */
    if ('{' == src[state->offset]) {
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	4413      	add	r3, r2
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b7b      	cmp	r3, #123	; 0x7b
 8002d3c:	d101      	bne.n	8002d42 <json_parse_object+0x42>
      /* . and we don't actually have a global object after all! */
      is_global_object = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
    }
  }

  if (!is_global_object) {
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <json_parse_object+0x52>
    /* skip leading '{'. */
    state->offset++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	609a      	str	r2, [r3, #8]
  }

  (void)json_skip_all_skippables(state);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7fe fceb 	bl	800172e <json_skip_all_skippables>

  /* reset elements. */
  elements = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (state->offset < size) {
 8002d5c:	e0b7      	b.n	8002ece <json_parse_object+0x1ce>
    struct json_object_element_s *element = json_null;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
    struct json_string_s *string = json_null;
 8002d62:	2300      	movs	r3, #0
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
    struct json_value_s *value = json_null;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!is_global_object) {
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <json_parse_object+0x90>
      (void)json_skip_all_skippables(state);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7fe fcdc 	bl	800172e <json_skip_all_skippables>

      if ('}' == src[state->offset]) {
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	6a3a      	ldr	r2, [r7, #32]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b7d      	cmp	r3, #125	; 0x7d
 8002d82:	d10c      	bne.n	8002d9e <json_parse_object+0x9e>
        /* skip trailing '}'. */
        state->offset++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]

        /* finished the object! */
        break;
 8002d8e:	e0a6      	b.n	8002ede <json_parse_object+0x1de>
      }
    } else {
      if (json_skip_all_skippables(state)) {
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f7fe fccc 	bl	800172e <json_skip_all_skippables>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 809f 	bne.w	8002edc <json_parse_object+0x1dc>
        break;
      }
    }

    /* if we parsed at least one element previously, grok for a comma. */
    if (allow_comma) {
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <json_parse_object+0xc2>
      if (',' == src[state->offset]) {
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	6a3a      	ldr	r2, [r7, #32]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b2c      	cmp	r3, #44	; 0x2c
 8002db0:	d107      	bne.n	8002dc2 <json_parse_object+0xc2>
        /* skip comma. */
        state->offset++;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
        continue;
 8002dc0:	e085      	b.n	8002ece <json_parse_object+0x1ce>
      }
    }

    element = (struct json_object_element_s *)state->dom;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	61fb      	str	r3, [r7, #28]

    state->dom += sizeof(struct json_object_element_s);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f103 020c 	add.w	r2, r3, #12
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	615a      	str	r2, [r3, #20]

    if (json_null == previous) {
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <json_parse_object+0xe2>
      /* this is our first element, so record it in our object. */
      object->start = element;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e002      	b.n	8002de8 <json_parse_object+0xe8>
    } else {
      previous->next = element;
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	609a      	str	r2, [r3, #8]
    }

    previous = element;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	637b      	str	r3, [r7, #52]	; 0x34

    if (json_parse_flags_allow_location_information & flags_bitset) {
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01a      	beq.n	8002e2c <json_parse_object+0x12c>
      struct json_string_ex_s *string_ex =
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	61bb      	str	r3, [r7, #24]
          (struct json_string_ex_s *)state->dom;
      state->dom += sizeof(struct json_string_ex_s);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f103 0214 	add.w	r2, r3, #20
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	615a      	str	r2, [r3, #20]

      string_ex->offset = state->offset;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	609a      	str	r2, [r3, #8]
      string_ex->line_no = state->line_no;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	60da      	str	r2, [r3, #12]
      string_ex->row_no = state->offset - state->line_offset;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1ad2      	subs	r2, r2, r3
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	611a      	str	r2, [r3, #16]

      string = &(string_ex->string);
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	e008      	b.n	8002e3e <json_parse_object+0x13e>
    } else {
      string = (struct json_string_s *)state->dom;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	633b      	str	r3, [r7, #48]	; 0x30
      state->dom += sizeof(struct json_string_s);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f103 0208 	add.w	r2, r3, #8
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	615a      	str	r2, [r3, #20]
    }

    element->name = string;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e42:	601a      	str	r2, [r3, #0]

    (void)json_parse_key(state, string);
 8002e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff fefc 	bl	8002c44 <json_parse_key>

    (void)json_skip_all_skippables(state);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7fe fc6e 	bl	800172e <json_skip_all_skippables>

    /* skip colon or equals. */
    state->offset++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	609a      	str	r2, [r3, #8]

    (void)json_skip_all_skippables(state);
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7fe fc66 	bl	800172e <json_skip_all_skippables>

    if (json_parse_flags_allow_location_information & flags_bitset) {
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01a      	beq.n	8002ea2 <json_parse_object+0x1a2>
      struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state->dom;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	617b      	str	r3, [r7, #20]
      state->dom += sizeof(struct json_value_ex_s);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f103 0214 	add.w	r2, r3, #20
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	615a      	str	r2, [r3, #20]

      value_ex->offset = state->offset;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	609a      	str	r2, [r3, #8]
      value_ex->line_no = state->line_no;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1a      	ldr	r2, [r3, #32]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	60da      	str	r2, [r3, #12]
      value_ex->row_no = state->offset - state->line_offset;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1ad2      	subs	r2, r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	611a      	str	r2, [r3, #16]

      value = &(value_ex->value);
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea0:	e008      	b.n	8002eb4 <json_parse_object+0x1b4>
    } else {
      value = (struct json_value_s *)state->dom;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
      state->dom += sizeof(struct json_value_s);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	615a      	str	r2, [r3, #20]
    }

    element->value = value;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb8:	605a      	str	r2, [r3, #4]

    json_parse_value(state, /* is_global_object = */ 0, value);
 8002eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa06 	bl	80032d0 <json_parse_value>

    /* successfully parsed a name/value pair! */
    elements++;
 8002ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    allow_comma = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  while (state->offset < size) {
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f63f af42 	bhi.w	8002d5e <json_parse_object+0x5e>
 8002eda:	e000      	b.n	8002ede <json_parse_object+0x1de>
        break;
 8002edc:	bf00      	nop
  }

  /* if we had at least one element, end the linked list. */
  if (previous) {
 8002ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <json_parse_object+0x1ea>
    previous->next = json_null;
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  }

  if (0 == elements) {
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <json_parse_object+0x1f6>
    object->start = json_null;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  object->length = elements;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efa:	605a      	str	r2, [r3, #4]
}
 8002efc:	bf00      	nop
 8002efe:	3740      	adds	r7, #64	; 0x40
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <json_parse_array>:

json_weak void json_parse_array(struct json_parse_state_s *state,
                                struct json_array_s *array);
void json_parse_array(struct json_parse_state_s *state,
                      struct json_array_s *array) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  const char *const src = state->src;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]
  size_t elements = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  int allow_comma = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
  struct json_array_element_s *previous = json_null;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]

  /* skip leading '['. */
  state->offset++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]

  (void)json_skip_all_skippables(state);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe fbfc 	bl	800172e <json_skip_all_skippables>

  /* reset elements. */
  elements = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24

  do {
    struct json_array_element_s *element = json_null;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
    struct json_value_s *value = json_null;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]

    (void)json_skip_all_skippables(state);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fbf3 	bl	800172e <json_skip_all_skippables>

    if (']' == src[state->offset]) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b5d      	cmp	r3, #93	; 0x5d
 8002f54:	d105      	bne.n	8002f62 <json_parse_array+0x5e>
      /* skip trailing ']'. */
      state->offset++;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]

      /* finished the array! */
      break;
 8002f60:	e062      	b.n	8003028 <json_parse_array+0x124>
    }

    /* if we parsed at least one element previously, grok for a comma. */
    if (allow_comma) {
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <json_parse_array+0x82>
      if (',' == src[state->offset]) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b2c      	cmp	r3, #44	; 0x2c
 8002f74:	d107      	bne.n	8002f86 <json_parse_array+0x82>
        /* skip comma. */
        state->offset++;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
        continue;
 8002f84:	e04b      	b.n	800301e <json_parse_array+0x11a>
      }
    }

    element = (struct json_array_element_s *)state->dom;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	60fb      	str	r3, [r7, #12]

    state->dom += sizeof(struct json_array_element_s);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f103 0208 	add.w	r2, r3, #8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	615a      	str	r2, [r3, #20]

    if (json_null == previous) {
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <json_parse_array+0xa2>
      /* this is our first element, so record it in our array. */
      array->start = element;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e002      	b.n	8002fac <json_parse_array+0xa8>
    } else {
      previous->next = element;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
    }

    previous = element;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	61fb      	str	r3, [r7, #28]

    if (json_parse_flags_allow_location_information & state->flags_bitset) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01a      	beq.n	8002ff2 <json_parse_array+0xee>
      struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state->dom;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	60bb      	str	r3, [r7, #8]
      state->dom += sizeof(struct json_value_ex_s);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f103 0214 	add.w	r2, r3, #20
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	615a      	str	r2, [r3, #20]

      value_ex->offset = state->offset;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	609a      	str	r2, [r3, #8]
      value_ex->line_no = state->line_no;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
      value_ex->row_no = state->offset - state->line_offset;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1ad2      	subs	r2, r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	611a      	str	r2, [r3, #16]

      value = &(value_ex->value);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	e008      	b.n	8003004 <json_parse_array+0x100>
    } else {
      value = (struct json_value_s *)state->dom;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	61bb      	str	r3, [r7, #24]
      state->dom += sizeof(struct json_value_s);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f103 0208 	add.w	r2, r3, #8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	615a      	str	r2, [r3, #20]
    }

    element->value = value;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	601a      	str	r2, [r3, #0]

    json_parse_value(state, /* is_global_object = */ 0, value);
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	2100      	movs	r1, #0
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f95e 	bl	80032d0 <json_parse_value>

    /* successfully parsed an array element! */
    elements++;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	3301      	adds	r3, #1
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
    allow_comma = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	623b      	str	r3, [r7, #32]
  } while (state->offset < size);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d888      	bhi.n	8002f3a <json_parse_array+0x36>

  /* end the linked list. */
  if (previous) {
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <json_parse_array+0x130>
    previous->next = json_null;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2200      	movs	r2, #0
 8003032:	605a      	str	r2, [r3, #4]
  }

  if (0 == elements) {
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <json_parse_array+0x13c>
    array->start = json_null;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
  }

  array->length = elements;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	605a      	str	r2, [r3, #4]
}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <json_parse_number>:

json_weak void json_parse_number(struct json_parse_state_s *state,
                                 struct json_number_s *number);
void json_parse_number(struct json_parse_state_s *state,
                       struct json_number_s *number) {
 8003050:	b480      	push	{r7}
 8003052:	b08f      	sub	sp, #60	; 0x3c
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	623b      	str	r3, [r7, #32]
  size_t offset = state->offset;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
  const size_t size = state->size;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61fb      	str	r3, [r7, #28]
  size_t bytes_written = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	633b      	str	r3, [r7, #48]	; 0x30
  const char *const src = state->src;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
  char *data = state->data;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	617b      	str	r3, [r7, #20]

  number->number = data;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	601a      	str	r2, [r3, #0]

  if (json_parse_flags_allow_hexadecimal_numbers & flags_bitset) {
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80b4 	beq.w	80031f6 <json_parse_number+0x1a6>
    if (('0' == src[offset]) &&
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	4413      	add	r3, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b30      	cmp	r3, #48	; 0x30
 8003098:	f040 80ad 	bne.w	80031f6 <json_parse_number+0x1a6>
        (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	3301      	adds	r3, #1
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
    if (('0' == src[offset]) &&
 80030a6:	2b78      	cmp	r3, #120	; 0x78
 80030a8:	d014      	beq.n	80030d4 <json_parse_number+0x84>
        (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	3301      	adds	r3, #1
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b58      	cmp	r3, #88	; 0x58
 80030b6:	f040 809e 	bne.w	80031f6 <json_parse_number+0x1a6>
      /* consume hexadecimal digits. */
      while ((offset < size) &&
 80030ba:	e00b      	b.n	80030d4 <json_parse_number+0x84>
             (('0' <= src[offset] && src[offset] <= '9') ||
              ('a' <= src[offset] && src[offset] <= 'f') ||
              ('A' <= src[offset] && src[offset] <= 'F') ||
              ('x' == src[offset]) || ('X' == src[offset]))) {
        data[bytes_written++] = src[offset++];
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	637a      	str	r2, [r7, #52]	; 0x34
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	441a      	add	r2, r3
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	1c59      	adds	r1, r3, #1
 80030ca:	6339      	str	r1, [r7, #48]	; 0x30
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	440b      	add	r3, r1
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	701a      	strb	r2, [r3, #0]
      while ((offset < size) &&
 80030d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f080 808c 	bcs.w	80031f6 <json_parse_number+0x1a6>
             (('0' <= src[offset] && src[offset] <= '9') ||
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
      while ((offset < size) &&
 80030e6:	2b2f      	cmp	r3, #47	; 0x2f
 80030e8:	d905      	bls.n	80030f6 <json_parse_number+0xa6>
             (('0' <= src[offset] && src[offset] <= '9') ||
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b39      	cmp	r3, #57	; 0x39
 80030f4:	d9e2      	bls.n	80030bc <json_parse_number+0x6c>
              ('a' <= src[offset] && src[offset] <= 'f') ||
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
             (('0' <= src[offset] && src[offset] <= '9') ||
 80030fe:	2b60      	cmp	r3, #96	; 0x60
 8003100:	d905      	bls.n	800310e <json_parse_number+0xbe>
              ('a' <= src[offset] && src[offset] <= 'f') ||
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b66      	cmp	r3, #102	; 0x66
 800310c:	d9d6      	bls.n	80030bc <json_parse_number+0x6c>
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
              ('a' <= src[offset] && src[offset] <= 'f') ||
 8003116:	2b40      	cmp	r3, #64	; 0x40
 8003118:	d905      	bls.n	8003126 <json_parse_number+0xd6>
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	4413      	add	r3, r2
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b46      	cmp	r3, #70	; 0x46
 8003124:	d9ca      	bls.n	80030bc <json_parse_number+0x6c>
              ('x' == src[offset]) || ('X' == src[offset]))) {
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312a:	4413      	add	r3, r2
 800312c:	781b      	ldrb	r3, [r3, #0]
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800312e:	2b78      	cmp	r3, #120	; 0x78
 8003130:	d0c4      	beq.n	80030bc <json_parse_number+0x6c>
              ('x' == src[offset]) || ('X' == src[offset]))) {
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b58      	cmp	r3, #88	; 0x58
 800313c:	d0be      	beq.n	80030bc <json_parse_number+0x6c>
      }
    }
  }

  while (offset < size) {
 800313e:	e05a      	b.n	80031f6 <json_parse_number+0x1a6>
    int end = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (src[offset]) {
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003148:	4413      	add	r3, r2
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b45      	cmp	r3, #69	; 0x45
 800314e:	dc3d      	bgt.n	80031cc <json_parse_number+0x17c>
 8003150:	2b2b      	cmp	r3, #43	; 0x2b
 8003152:	db4a      	blt.n	80031ea <json_parse_number+0x19a>
 8003154:	3b2b      	subs	r3, #43	; 0x2b
 8003156:	2b1a      	cmp	r3, #26
 8003158:	d847      	bhi.n	80031ea <json_parse_number+0x19a>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <json_parse_number+0x110>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	080031d1 	.word	0x080031d1
 8003164:	080031eb 	.word	0x080031eb
 8003168:	080031d1 	.word	0x080031d1
 800316c:	080031d1 	.word	0x080031d1
 8003170:	080031eb 	.word	0x080031eb
 8003174:	080031d1 	.word	0x080031d1
 8003178:	080031d1 	.word	0x080031d1
 800317c:	080031d1 	.word	0x080031d1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080031d1 	.word	0x080031d1
 8003188:	080031d1 	.word	0x080031d1
 800318c:	080031d1 	.word	0x080031d1
 8003190:	080031d1 	.word	0x080031d1
 8003194:	080031d1 	.word	0x080031d1
 8003198:	080031d1 	.word	0x080031d1
 800319c:	080031eb 	.word	0x080031eb
 80031a0:	080031eb 	.word	0x080031eb
 80031a4:	080031eb 	.word	0x080031eb
 80031a8:	080031eb 	.word	0x080031eb
 80031ac:	080031eb 	.word	0x080031eb
 80031b0:	080031eb 	.word	0x080031eb
 80031b4:	080031eb 	.word	0x080031eb
 80031b8:	080031eb 	.word	0x080031eb
 80031bc:	080031eb 	.word	0x080031eb
 80031c0:	080031eb 	.word	0x080031eb
 80031c4:	080031eb 	.word	0x080031eb
 80031c8:	080031d1 	.word	0x080031d1
 80031cc:	2b65      	cmp	r3, #101	; 0x65
 80031ce:	d10c      	bne.n	80031ea <json_parse_number+0x19a>
    case '.':
    case 'e':
    case 'E':
    case '+':
    case '-':
      data[bytes_written++] = src[offset++];
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	637a      	str	r2, [r7, #52]	; 0x34
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	441a      	add	r2, r3
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	1c59      	adds	r1, r3, #1
 80031de:	6339      	str	r1, [r7, #48]	; 0x30
 80031e0:	6979      	ldr	r1, [r7, #20]
 80031e2:	440b      	add	r3, r1
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	701a      	strb	r2, [r3, #0]
      break;
 80031e8:	e002      	b.n	80031f0 <json_parse_number+0x1a0>
    default:
      end = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80031ee:	bf00      	nop
    }

    if (0 != end) {
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d104      	bne.n	8003200 <json_parse_number+0x1b0>
  while (offset < size) {
 80031f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d3a0      	bcc.n	8003140 <json_parse_number+0xf0>
 80031fe:	e000      	b.n	8003202 <json_parse_number+0x1b2>
      break;
 8003200:	bf00      	nop
    }
  }

  if (json_parse_flags_allow_inf_and_nan & flags_bitset) {
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d047      	beq.n	800329c <json_parse_number+0x24c>
    const size_t inf_strlen = 8; /* = strlen("Infinity");. */
 800320c:	2308      	movs	r3, #8
 800320e:	613b      	str	r3, [r7, #16]
    const size_t nan_strlen = 3; /* = strlen("NaN");. */
 8003210:	2303      	movs	r3, #3
 8003212:	60fb      	str	r3, [r7, #12]

    if (offset + inf_strlen < size) {
 8003214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	69fa      	ldr	r2, [r7, #28]
 800321c:	429a      	cmp	r2, r3
 800321e:	d91b      	bls.n	8003258 <json_parse_number+0x208>
      if ('I' == src[offset]) {
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	4413      	add	r3, r2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b49      	cmp	r3, #73	; 0x49
 800322a:	d115      	bne.n	8003258 <json_parse_number+0x208>
        size_t i;
        /* We found our special 'Infinity' keyword! */
        for (i = 0; i < inf_strlen; i++) {
 800322c:	2300      	movs	r3, #0
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003230:	e00e      	b.n	8003250 <json_parse_number+0x200>
          data[bytes_written++] = src[offset++];
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	637a      	str	r2, [r7, #52]	; 0x34
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	441a      	add	r2, r3
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	1c59      	adds	r1, r3, #1
 8003240:	6339      	str	r1, [r7, #48]	; 0x30
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	440b      	add	r3, r1
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < inf_strlen; i++) {
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	3301      	adds	r3, #1
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	429a      	cmp	r2, r3
 8003256:	d3ec      	bcc.n	8003232 <json_parse_number+0x1e2>
        }
      }
    }

    if (offset + nan_strlen < size) {
 8003258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	429a      	cmp	r2, r3
 8003262:	d91b      	bls.n	800329c <json_parse_number+0x24c>
      if ('N' == src[offset]) {
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	4413      	add	r3, r2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b4e      	cmp	r3, #78	; 0x4e
 800326e:	d115      	bne.n	800329c <json_parse_number+0x24c>
        size_t i;
        /* We found our special 'NaN' keyword! */
        for (i = 0; i < nan_strlen; i++) {
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
 8003274:	e00e      	b.n	8003294 <json_parse_number+0x244>
          data[bytes_written++] = src[offset++];
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	637a      	str	r2, [r7, #52]	; 0x34
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	441a      	add	r2, r3
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	1c59      	adds	r1, r3, #1
 8003284:	6339      	str	r1, [r7, #48]	; 0x30
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	440b      	add	r3, r1
 800328a:	7812      	ldrb	r2, [r2, #0]
 800328c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nan_strlen; i++) {
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	3301      	adds	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
 8003294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d3ec      	bcc.n	8003276 <json_parse_number+0x226>
      }
    }
  }

  /* record the size of the number. */
  number->number_size = bytes_written;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a0:	605a      	str	r2, [r3, #4]
  /* add null terminator to number string. */
  data[bytes_written++] = '\0';
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	633a      	str	r2, [r7, #48]	; 0x30
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4413      	add	r3, r2
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
  /* move data along. */
  state->data += bytes_written;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	611a      	str	r2, [r3, #16]
  /* update offset. */
  state->offset = offset;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c0:	609a      	str	r2, [r3, #8]
}
 80032c2:	bf00      	nop
 80032c4:	373c      	adds	r7, #60	; 0x3c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop

080032d0 <json_parse_value>:

json_weak void json_parse_value(struct json_parse_state_s *state,
                                int is_global_object,
                                struct json_value_s *value);
void json_parse_value(struct json_parse_state_s *state, int is_global_object,
                      struct json_value_s *value) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61fb      	str	r3, [r7, #28]
  const char *const src = state->src;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61bb      	str	r3, [r7, #24]
  const size_t size = state->size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	617b      	str	r3, [r7, #20]
  size_t offset;

  (void)json_skip_all_skippables(state);
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f7fe fa1d 	bl	800172e <json_skip_all_skippables>

  /* cache offset now. */
  offset = state->offset;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	613b      	str	r3, [r7, #16]

  if (is_global_object) {
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d014      	beq.n	800332a <json_parse_value+0x5a>
    value->type = json_type_object;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	605a      	str	r2, [r3, #4]
    value->payload = state->dom;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	601a      	str	r2, [r3, #0]
    state->dom += sizeof(struct json_object_s);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f103 0208 	add.w	r2, r3, #8
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	615a      	str	r2, [r3, #20]
    json_parse_object(state, /* is_global_object = */ 1,
                      (struct json_object_s *)value->payload);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
    json_parse_object(state, /* is_global_object = */ 1,
 800331e:	461a      	mov	r2, r3
 8003320:	2101      	movs	r1, #1
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fcec 	bl	8002d00 <json_parse_object>
        json_parse_number(state, (struct json_number_s *)value->payload);
      }
      break;
    }
  }
}
 8003328:	e1eb      	b.n	8003702 <json_parse_value+0x432>
    switch (src[offset]) {
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b5b      	cmp	r3, #91	; 0x5b
 8003334:	dc7e      	bgt.n	8003434 <json_parse_value+0x164>
 8003336:	2b22      	cmp	r3, #34	; 0x22
 8003338:	f2c0 80d0 	blt.w	80034dc <json_parse_value+0x20c>
 800333c:	3b22      	subs	r3, #34	; 0x22
 800333e:	2b39      	cmp	r3, #57	; 0x39
 8003340:	f200 80cc 	bhi.w	80034dc <json_parse_value+0x20c>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <json_parse_value+0x7c>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800343b 	.word	0x0800343b
 8003350:	080034dd 	.word	0x080034dd
 8003354:	080034dd 	.word	0x080034dd
 8003358:	080034dd 	.word	0x080034dd
 800335c:	080034dd 	.word	0x080034dd
 8003360:	0800343b 	.word	0x0800343b
 8003364:	080034dd 	.word	0x080034dd
 8003368:	080034dd 	.word	0x080034dd
 800336c:	080034dd 	.word	0x080034dd
 8003370:	080034b5 	.word	0x080034b5
 8003374:	080034dd 	.word	0x080034dd
 8003378:	080034b5 	.word	0x080034b5
 800337c:	080034b5 	.word	0x080034b5
 8003380:	080034dd 	.word	0x080034dd
 8003384:	080034b5 	.word	0x080034b5
 8003388:	080034b5 	.word	0x080034b5
 800338c:	080034b5 	.word	0x080034b5
 8003390:	080034b5 	.word	0x080034b5
 8003394:	080034b5 	.word	0x080034b5
 8003398:	080034b5 	.word	0x080034b5
 800339c:	080034b5 	.word	0x080034b5
 80033a0:	080034b5 	.word	0x080034b5
 80033a4:	080034b5 	.word	0x080034b5
 80033a8:	080034b5 	.word	0x080034b5
 80033ac:	080034dd 	.word	0x080034dd
 80033b0:	080034dd 	.word	0x080034dd
 80033b4:	080034dd 	.word	0x080034dd
 80033b8:	080034dd 	.word	0x080034dd
 80033bc:	080034dd 	.word	0x080034dd
 80033c0:	080034dd 	.word	0x080034dd
 80033c4:	080034dd 	.word	0x080034dd
 80033c8:	080034dd 	.word	0x080034dd
 80033cc:	080034dd 	.word	0x080034dd
 80033d0:	080034dd 	.word	0x080034dd
 80033d4:	080034dd 	.word	0x080034dd
 80033d8:	080034dd 	.word	0x080034dd
 80033dc:	080034dd 	.word	0x080034dd
 80033e0:	080034dd 	.word	0x080034dd
 80033e4:	080034dd 	.word	0x080034dd
 80033e8:	080034dd 	.word	0x080034dd
 80033ec:	080034dd 	.word	0x080034dd
 80033f0:	080034dd 	.word	0x080034dd
 80033f4:	080034dd 	.word	0x080034dd
 80033f8:	080034dd 	.word	0x080034dd
 80033fc:	080034dd 	.word	0x080034dd
 8003400:	080034dd 	.word	0x080034dd
 8003404:	080034dd 	.word	0x080034dd
 8003408:	080034dd 	.word	0x080034dd
 800340c:	080034dd 	.word	0x080034dd
 8003410:	080034dd 	.word	0x080034dd
 8003414:	080034dd 	.word	0x080034dd
 8003418:	080034dd 	.word	0x080034dd
 800341c:	080034dd 	.word	0x080034dd
 8003420:	080034dd 	.word	0x080034dd
 8003424:	080034dd 	.word	0x080034dd
 8003428:	080034dd 	.word	0x080034dd
 800342c:	080034dd 	.word	0x080034dd
 8003430:	0800348d 	.word	0x0800348d
 8003434:	2b7b      	cmp	r3, #123	; 0x7b
 8003436:	d014      	beq.n	8003462 <json_parse_value+0x192>
 8003438:	e050      	b.n	80034dc <json_parse_value+0x20c>
      value->type = json_type_string;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_string_s);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f103 0208 	add.w	r2, r3, #8
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	615a      	str	r2, [r3, #20]
      json_parse_string(state, (struct json_string_s *)value->payload);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4619      	mov	r1, r3
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff fa18 	bl	8002890 <json_parse_string>
      break;
 8003460:	e14f      	b.n	8003702 <json_parse_value+0x432>
      value->type = json_type_object;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_object_s);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f103 0208 	add.w	r2, r3, #8
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	615a      	str	r2, [r3, #20]
                        (struct json_object_s *)value->payload);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
      json_parse_object(state, /* is_global_object = */ 0,
 8003480:	461a      	mov	r2, r3
 8003482:	2100      	movs	r1, #0
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff fc3b 	bl	8002d00 <json_parse_object>
      break;
 800348a:	e13a      	b.n	8003702 <json_parse_value+0x432>
      value->type = json_type_array;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2203      	movs	r2, #3
 8003490:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_array_s);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f103 0208 	add.w	r2, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	615a      	str	r2, [r3, #20]
      json_parse_array(state, (struct json_array_s *)value->payload);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4619      	mov	r1, r3
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff fd29 	bl	8002f04 <json_parse_array>
      break;
 80034b2:	e126      	b.n	8003702 <json_parse_value+0x432>
      value->type = json_type_number;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_number_s);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f103 0208 	add.w	r2, r3, #8
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	615a      	str	r2, [r3, #20]
      json_parse_number(state, (struct json_number_s *)value->payload);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fdbb 	bl	8003050 <json_parse_number>
      break;
 80034da:	e112      	b.n	8003702 <json_parse_value+0x432>
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3304      	adds	r3, #4
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d326      	bcc.n	8003534 <json_parse_value+0x264>
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b74      	cmp	r3, #116	; 0x74
 80034f0:	d120      	bne.n	8003534 <json_parse_value+0x264>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	3301      	adds	r3, #1
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80034fc:	2b72      	cmp	r3, #114	; 0x72
 80034fe:	d119      	bne.n	8003534 <json_parse_value+0x264>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	3302      	adds	r3, #2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b75      	cmp	r3, #117	; 0x75
 800350c:	d112      	bne.n	8003534 <json_parse_value+0x264>
          'e' == src[offset + 3]) {
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	3303      	adds	r3, #3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4413      	add	r3, r2
 8003516:	781b      	ldrb	r3, [r3, #0]
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8003518:	2b65      	cmp	r3, #101	; 0x65
 800351a:	d10b      	bne.n	8003534 <json_parse_value+0x264>
        value->type = json_type_true;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2204      	movs	r2, #4
 8003520:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
        state->offset += 4;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	1d1a      	adds	r2, r3, #4
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	e0e5      	b.n	8003700 <json_parse_value+0x430>
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3305      	adds	r3, #5
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	429a      	cmp	r2, r3
 800353c:	d32d      	bcc.n	800359a <json_parse_value+0x2ca>
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b66      	cmp	r3, #102	; 0x66
 8003548:	d127      	bne.n	800359a <json_parse_value+0x2ca>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	3301      	adds	r3, #1
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4413      	add	r3, r2
 8003552:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8003554:	2b61      	cmp	r3, #97	; 0x61
 8003556:	d120      	bne.n	800359a <json_parse_value+0x2ca>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	3302      	adds	r3, #2
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b6c      	cmp	r3, #108	; 0x6c
 8003564:	d119      	bne.n	800359a <json_parse_value+0x2ca>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3303      	adds	r3, #3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4413      	add	r3, r2
 800356e:	781b      	ldrb	r3, [r3, #0]
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8003570:	2b73      	cmp	r3, #115	; 0x73
 8003572:	d112      	bne.n	800359a <json_parse_value+0x2ca>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	3304      	adds	r3, #4
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4413      	add	r3, r2
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b65      	cmp	r3, #101	; 0x65
 8003580:	d10b      	bne.n	800359a <json_parse_value+0x2ca>
        value->type = json_type_false;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2205      	movs	r2, #5
 8003586:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
        state->offset += 5;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	1d5a      	adds	r2, r3, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e0b2      	b.n	8003700 <json_parse_value+0x430>
      } else if ((offset + 4) <= size && 'n' == src[offset + 0] &&
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3304      	adds	r3, #4
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d326      	bcc.n	80035f2 <json_parse_value+0x322>
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b6e      	cmp	r3, #110	; 0x6e
 80035ae:	d120      	bne.n	80035f2 <json_parse_value+0x322>
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3301      	adds	r3, #1
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4413      	add	r3, r2
 80035b8:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 4) <= size && 'n' == src[offset + 0] &&
 80035ba:	2b75      	cmp	r3, #117	; 0x75
 80035bc:	d119      	bne.n	80035f2 <json_parse_value+0x322>
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3302      	adds	r3, #2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b6c      	cmp	r3, #108	; 0x6c
 80035ca:	d112      	bne.n	80035f2 <json_parse_value+0x322>
                 'l' == src[offset + 3]) {
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3303      	adds	r3, #3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80035d6:	2b6c      	cmp	r3, #108	; 0x6c
 80035d8:	d10b      	bne.n	80035f2 <json_parse_value+0x322>
        value->type = json_type_null;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2206      	movs	r2, #6
 80035de:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
        state->offset += 4;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	1d1a      	adds	r2, r3, #4
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e086      	b.n	8003700 <json_parse_value+0x430>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d02c      	beq.n	8003656 <json_parse_value+0x386>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	3303      	adds	r3, #3
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	429a      	cmp	r2, r3
 8003604:	d327      	bcc.n	8003656 <json_parse_value+0x386>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b4e      	cmp	r3, #78	; 0x4e
 8003610:	d121      	bne.n	8003656 <json_parse_value+0x386>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	3301      	adds	r3, #1
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4413      	add	r3, r2
 800361a:	781b      	ldrb	r3, [r3, #0]
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 800361c:	2b61      	cmp	r3, #97	; 0x61
 800361e:	d11a      	bne.n	8003656 <json_parse_value+0x386>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	3302      	adds	r3, #2
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4413      	add	r3, r2
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b4e      	cmp	r3, #78	; 0x4e
 800362c:	d113      	bne.n	8003656 <json_parse_value+0x386>
        value->type = json_type_number;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	605a      	str	r2, [r3, #4]
        value->payload = state->dom;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
        state->dom += sizeof(struct json_number_s);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f103 0208 	add.w	r2, r3, #8
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	615a      	str	r2, [r3, #20]
        json_parse_number(state, (struct json_number_s *)value->payload);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4619      	mov	r1, r3
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fcfe 	bl	8003050 <json_parse_number>
 8003654:	e054      	b.n	8003700 <json_parse_value+0x430>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d04f      	beq.n	8003700 <json_parse_value+0x430>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	3308      	adds	r3, #8
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	429a      	cmp	r2, r3
 8003668:	d34a      	bcc.n	8003700 <json_parse_value+0x430>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b49      	cmp	r3, #73	; 0x49
 8003674:	d144      	bne.n	8003700 <json_parse_value+0x430>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	3301      	adds	r3, #1
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4413      	add	r3, r2
 800367e:	781b      	ldrb	r3, [r3, #0]
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8003680:	2b6e      	cmp	r3, #110	; 0x6e
 8003682:	d13d      	bne.n	8003700 <json_parse_value+0x430>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	3302      	adds	r3, #2
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b66      	cmp	r3, #102	; 0x66
 8003690:	d136      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	3303      	adds	r3, #3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 800369c:	2b69      	cmp	r3, #105	; 0x69
 800369e:	d12f      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3304      	adds	r3, #4
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4413      	add	r3, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b6e      	cmp	r3, #110	; 0x6e
 80036ac:	d128      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3305      	adds	r3, #5
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 80036b8:	2b69      	cmp	r3, #105	; 0x69
 80036ba:	d121      	bne.n	8003700 <json_parse_value+0x430>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3306      	adds	r3, #6
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b74      	cmp	r3, #116	; 0x74
 80036c8:	d11a      	bne.n	8003700 <json_parse_value+0x430>
                 'y' == src[offset + 7]) {
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3307      	adds	r3, #7
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4413      	add	r3, r2
 80036d2:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 80036d4:	2b79      	cmp	r3, #121	; 0x79
 80036d6:	d113      	bne.n	8003700 <json_parse_value+0x430>
        value->type = json_type_number;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	605a      	str	r2, [r3, #4]
        value->payload = state->dom;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
        state->dom += sizeof(struct json_number_s);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f103 0208 	add.w	r2, r3, #8
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	615a      	str	r2, [r3, #20]
        json_parse_number(state, (struct json_number_s *)value->payload);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff fca9 	bl	8003050 <json_parse_number>
      break;
 80036fe:	e7ff      	b.n	8003700 <json_parse_value+0x430>
 8003700:	bf00      	nop
}
 8003702:	bf00      	nop
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <json_parse_ex>:

struct json_value_s *
json_parse_ex(const void *src, size_t src_size, size_t flags_bitset,
              void *(*alloc_func_ptr)(void *user_data, size_t size),
              void *user_data, struct json_parse_result_s *result) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b094      	sub	sp, #80	; 0x50
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  void *allocation;
  struct json_value_s *value;
  size_t total_size;
  int input_error;

  if (result) {
 800371a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <json_parse_ex+0x2c>
    result->error = json_parse_error_none;
 8003720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
    result->error_offset = 0;
 8003726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003728:	2200      	movs	r2, #0
 800372a:	605a      	str	r2, [r3, #4]
    result->error_line_no = 0;
 800372c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
    result->error_row_no = 0;
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
  }

  if (json_null == src) {
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <json_parse_ex+0x36>
    /* invalid src pointer was null! */
    return json_null;
 800373e:	2300      	movs	r3, #0
 8003740:	e09a      	b.n	8003878 <json_parse_ex+0x16c>
  }

  state.src = (const char *)src;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	613b      	str	r3, [r7, #16]
  state.size = src_size;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	617b      	str	r3, [r7, #20]
  state.offset = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  state.line_no = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
  state.line_offset = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
  state.error = json_parse_error_none;
 8003756:	2300      	movs	r3, #0
 8003758:	63bb      	str	r3, [r7, #56]	; 0x38
  state.dom_size = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
  state.data_size = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  state.flags_bitset = flags_bitset;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	61fb      	str	r3, [r7, #28]

  input_error = json_get_value_size(
      &state, (int)(json_parse_flags_allow_global_object & state.flags_bitset));
 8003766:	69fb      	ldr	r3, [r7, #28]
  input_error = json_get_value_size(
 8003768:	f003 0204 	and.w	r2, r3, #4
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fe98 	bl	80024a8 <json_get_value_size>
 8003778:	6478      	str	r0, [r7, #68]	; 0x44

  if (0 == input_error) {
 800377a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10c      	bne.n	800379a <json_parse_ex+0x8e>
    json_skip_all_skippables(&state);
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd ffd2 	bl	800172e <json_skip_all_skippables>

    if (state.offset != state.size) {
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	429a      	cmp	r2, r3
 8003790:	d003      	beq.n	800379a <json_parse_ex+0x8e>
      /* our parsing didn't have an error, but there are characters remaining in
       * the input that weren't part of the JSON! */

      state.error = json_parse_error_unexpected_trailing_characters;
 8003792:	230a      	movs	r3, #10
 8003794:	63bb      	str	r3, [r7, #56]	; 0x38
      input_error = 1;
 8003796:	2301      	movs	r3, #1
 8003798:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  if (input_error) {
 800379a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379c:	2b00      	cmp	r3, #0
 800379e:	d012      	beq.n	80037c6 <json_parse_ex+0xba>
    /* parsing value's size failed (most likely an invalid JSON DOM!). */
    if (result) {
 80037a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <json_parse_ex+0xb6>
      result->error = state.error;
 80037a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037aa:	601a      	str	r2, [r3, #0]
      result->error_offset = state.offset;
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b0:	605a      	str	r2, [r3, #4]
      result->error_line_no = state.line_no;
 80037b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b6:	609a      	str	r2, [r3, #8]
      result->error_row_no = state.offset - state.line_offset;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	1ad2      	subs	r2, r2, r3
 80037be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c0:	60da      	str	r2, [r3, #12]
    }
    return json_null;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e058      	b.n	8003878 <json_parse_ex+0x16c>
  }

  /* our total allocation is the combination of the dom and data sizes (we. */
  /* first encode the structure of the JSON, and then the data referenced by. */
  /* the JSON values). */
  total_size = state.dom_size + state.data_size;
 80037c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	4413      	add	r3, r2
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40

  if (json_null == alloc_func_ptr) {
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <json_parse_ex+0xd4>
    allocation = malloc(total_size);
 80037d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80037d6:	f00f fc05 	bl	8012fe4 <malloc>
 80037da:	4603      	mov	r3, r0
 80037dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037de:	e004      	b.n	80037ea <json_parse_ex+0xde>
  } else {
    allocation = alloc_func_ptr(user_data, total_size);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80037e6:	4798      	blx	r3
 80037e8:	64f8      	str	r0, [r7, #76]	; 0x4c
  }

  if (json_null == allocation) {
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d110      	bne.n	8003812 <json_parse_ex+0x106>
    /* malloc failed! */
    if (result) {
 80037f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <json_parse_ex+0x102>
      result->error = json_parse_error_allocator_failed;
 80037f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f8:	2209      	movs	r2, #9
 80037fa:	601a      	str	r2, [r3, #0]
      result->error_offset = 0;
 80037fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
      result->error_line_no = 0;
 8003802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
      result->error_row_no = 0;
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
    }

    return json_null;
 800380e:	2300      	movs	r3, #0
 8003810:	e032      	b.n	8003878 <json_parse_ex+0x16c>
  }

  /* reset offset so we can reuse it. */
  state.offset = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]

  /* reset the line information so we can reuse it. */
  state.line_no = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	633b      	str	r3, [r7, #48]	; 0x30
  state.line_offset = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	637b      	str	r3, [r7, #52]	; 0x34

  state.dom = (char *)allocation;
 800381e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
  state.data = state.dom + state.dom_size;
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	4413      	add	r3, r2
 8003828:	623b      	str	r3, [r7, #32]

  if (json_parse_flags_allow_location_information & state.flags_bitset) {
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b00      	cmp	r3, #0
 8003832:	d012      	beq.n	800385a <json_parse_ex+0x14e>
    struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state.dom;
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
    state.dom += sizeof(struct json_value_ex_s);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	3314      	adds	r3, #20
 800383c:	627b      	str	r3, [r7, #36]	; 0x24

    value_ex->offset = state.offset;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003842:	609a      	str	r2, [r3, #8]
    value_ex->line_no = state.line_no;
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003848:	60da      	str	r2, [r3, #12]
    value_ex->row_no = state.offset - state.line_offset;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	1ad2      	subs	r2, r2, r3
 8003850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003852:	611a      	str	r2, [r3, #16]

    value = &(value_ex->value);
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	e004      	b.n	8003864 <json_parse_ex+0x158>
  } else {
    value = (struct json_value_s *)state.dom;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
    state.dom += sizeof(struct json_value_s);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	3308      	adds	r3, #8
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  }

  json_parse_value(
      &state, (int)(json_parse_flags_allow_global_object & state.flags_bitset),
 8003864:	69fb      	ldr	r3, [r7, #28]
  json_parse_value(
 8003866:	f003 0104 	and.w	r1, r3, #4
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fd2d 	bl	80032d0 <json_parse_value>
      value);

  return (struct json_value_s *)allocation;
 8003876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003878:	4618      	mov	r0, r3
 800387a:	3750      	adds	r7, #80	; 0x50
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <json_parse>:

struct json_value_s *json_parse(const void *src, size_t src_size) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  return json_parse_ex(src, src_size, json_parse_flags_default, json_null,
 800388a:	2300      	movs	r3, #0
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2300      	movs	r3, #0
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	2200      	movs	r2, #0
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff37 	bl	800370c <json_parse_ex>
 800389e:	4603      	mov	r3, r0
                       json_null, json_null);
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <json_value_as_string>:
  json_extract_copy_value(&state, value);

  return (struct json_value_s *)allocation;
}

struct json_string_s *json_value_as_string(struct json_value_s *const value) {
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if (value->type != json_type_string) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <json_value_as_string+0x14>
    return json_null;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e001      	b.n	80038c0 <json_value_as_string+0x18>
  }

  return (struct json_string_s *)value->payload;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <json_value_as_number>:

struct json_number_s *json_value_as_number(struct json_value_s *const value) {
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if (value->type != json_type_number) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d001      	beq.n	80038e0 <json_value_as_number+0x14>
    return json_null;
 80038dc:	2300      	movs	r3, #0
 80038de:	e001      	b.n	80038e4 <json_value_as_number+0x18>
  }

  return (struct json_number_s *)value->payload;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038f4:	f001 f89a 	bl	8004a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038f8:	f000 f81c 	bl	8003934 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038fc:	f000 f8e4 	bl	8003ac8 <MX_GPIO_Init>
  MX_TIM14_Init();
 8003900:	f000 f8be 	bl	8003a80 <MX_TIM14_Init>
  MX_LWIP_Init();
 8003904:	f004 fe52 	bl	80085ac <MX_LWIP_Init>
  MX_SPI3_Init();
 8003908:	f000 f884 	bl	8003a14 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  udpClient_connect();
 800390c:	f000 fcba 	bl	8004284 <udpClient_connect>
  HAL_TIM_Base_Start_IT(&htim14);
 8003910:	4805      	ldr	r0, [pc, #20]	; (8003928 <main+0x38>)
 8003912:	f004 fbf7 	bl	8008104 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi3, rxBuffer, sizeof(rxBuffer));
 8003916:	2202      	movs	r2, #2
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <main+0x3c>)
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <main+0x40>)
 800391c:	f003 fe5c 	bl	80075d8 <HAL_SPI_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8003920:	f004 ff76 	bl	8008810 <MX_LWIP_Process>
 8003924:	e7fc      	b.n	8003920 <main+0x30>
 8003926:	bf00      	nop
 8003928:	20000468 	.word	0x20000468
 800392c:	20000464 	.word	0x20000464
 8003930:	2000040c 	.word	0x2000040c

08003934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b094      	sub	sp, #80	; 0x50
 8003938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800393a:	f107 0320 	add.w	r3, r7, #32
 800393e:	2230      	movs	r2, #48	; 0x30
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f00f fb94 	bl	8013070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <SystemClock_Config+0xd8>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	4a2a      	ldr	r2, [pc, #168]	; (8003a0c <SystemClock_Config+0xd8>)
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003966:	6413      	str	r3, [r2, #64]	; 0x40
 8003968:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <SystemClock_Config+0xd8>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <SystemClock_Config+0xdc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <SystemClock_Config+0xdc>)
 800397e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <SystemClock_Config+0xdc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003990:	2301      	movs	r3, #1
 8003992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800399a:	2302      	movs	r3, #2
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800399e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80039a4:	230c      	movs	r3, #12
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80039a8:	2360      	movs	r3, #96	; 0x60
 80039aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80039ac:	2304      	movs	r3, #4
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039b0:	2304      	movs	r3, #4
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039b4:	f107 0320 	add.w	r3, r7, #32
 80039b8:	4618      	mov	r0, r3
 80039ba:	f002 fd0d 	bl	80063d8 <HAL_RCC_OscConfig>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039c4:	f000 fa4a 	bl	8003e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039c8:	230f      	movs	r3, #15
 80039ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039cc:	2302      	movs	r3, #2
 80039ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80039d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f002 ff6e 	bl	80068c8 <HAL_RCC_ClockConfig>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039f2:	f000 fa33 	bl	8003e5c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 80039fc:	2000      	movs	r0, #0
 80039fe:	f003 f849 	bl	8006a94 <HAL_RCC_MCOConfig>
}
 8003a02:	bf00      	nop
 8003a04:	3750      	adds	r7, #80	; 0x50
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40007000 	.word	0x40007000

08003a14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a1a:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <MX_SPI3_Init+0x68>)
 8003a1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a38:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a48:	2218      	movs	r2, #24
 8003a4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a52:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a60:	220a      	movs	r2, #10
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <MX_SPI3_Init+0x64>)
 8003a66:	f003 f93f 	bl	8006ce8 <HAL_SPI_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003a70:	f000 f9f4 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	2000040c 	.word	0x2000040c
 8003a7c:	40003c00 	.word	0x40003c00

08003a80 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <MX_TIM14_Init+0x40>)
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <MX_TIM14_Init+0x44>)
 8003a88:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1;
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <MX_TIM14_Init+0x40>)
 8003a8c:	f240 321f 	movw	r2, #799	; 0x31f
 8003a90:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <MX_TIM14_Init+0x40>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9375 - 1;
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <MX_TIM14_Init+0x40>)
 8003a9a:	f242 429e 	movw	r2, #9374	; 0x249e
 8003a9e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <MX_TIM14_Init+0x40>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <MX_TIM14_Init+0x40>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003aac:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <MX_TIM14_Init+0x40>)
 8003aae:	f004 fada 	bl	8008066 <HAL_TIM_Base_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8003ab8:	f000 f9d0 	bl	8003e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000468 	.word	0x20000468
 8003ac4:	40002000 	.word	0x40002000

08003ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08c      	sub	sp, #48	; 0x30
 8003acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	4b93      	ldr	r3, [pc, #588]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a92      	ldr	r2, [pc, #584]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003ae8:	f043 0310 	orr.w	r3, r3, #16
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b90      	ldr	r3, [pc, #576]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4a8b      	ldr	r2, [pc, #556]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0a:	4b89      	ldr	r3, [pc, #548]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	4b85      	ldr	r3, [pc, #532]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a84      	ldr	r2, [pc, #528]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b82      	ldr	r3, [pc, #520]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	4b7e      	ldr	r3, [pc, #504]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a7d      	ldr	r2, [pc, #500]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b7b      	ldr	r3, [pc, #492]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	4b77      	ldr	r3, [pc, #476]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a76      	ldr	r2, [pc, #472]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	4b70      	ldr	r3, [pc, #448]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a6f      	ldr	r2, [pc, #444]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b74:	f043 0308 	orr.w	r3, r3, #8
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <MX_GPIO_Init+0x268>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin, GPIO_PIN_RESET);
 8003b86:	2200      	movs	r2, #0
 8003b88:	f242 01c1 	movw	r1, #8385	; 0x20c1
 8003b8c:	4869      	ldr	r0, [pc, #420]	; (8003d34 <MX_GPIO_Init+0x26c>)
 8003b8e:	f002 fbf1 	bl	8006374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003b92:	2201      	movs	r2, #1
 8003b94:	2110      	movs	r1, #16
 8003b96:	4868      	ldr	r0, [pc, #416]	; (8003d38 <MX_GPIO_Init+0x270>)
 8003b98:	f002 fbec 	bl	8006374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIG_OUT_4_Pin|DIG_OUT_3_Pin, GPIO_PIN_RESET);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003ba2:	4866      	ldr	r0, [pc, #408]	; (8003d3c <MX_GPIO_Init+0x274>)
 8003ba4:	f002 fbe6 	bl	8006374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIG_OUT_2_Pin|DIG_OUT_1_Pin, GPIO_PIN_RESET);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 7120 	mov.w	r1, #640	; 0x280
 8003bae:	4864      	ldr	r0, [pc, #400]	; (8003d40 <MX_GPIO_Init+0x278>)
 8003bb0:	f002 fbe0 	bl	8006374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAL4_CLK_Pin CAL2_CLK_Pin CAL1_CLK_Pin */
  GPIO_InitStruct.Pin = CAL4_CLK_Pin|CAL2_CLK_Pin|CAL1_CLK_Pin;
 8003bb4:	f248 2304 	movw	r3, #33284	; 0x8204
 8003bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bc4:	f107 031c 	add.w	r3, r7, #28
 8003bc8:	4619      	mov	r1, r3
 8003bca:	485a      	ldr	r0, [pc, #360]	; (8003d34 <MX_GPIO_Init+0x26c>)
 8003bcc:	f002 fa1e 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL4_DATA_Pin CAL1_DATA_Pin */
  GPIO_InitStruct.Pin = CAL4_DATA_Pin|CAL1_DATA_Pin;
 8003bd0:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8003bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	4853      	ldr	r0, [pc, #332]	; (8003d34 <MX_GPIO_Init+0x26c>)
 8003be6:	f002 fa11 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL3_REQ_Pin CAL2_REQ_Pin CAL1_REQ_Pin CAL4_REQ_Pin */
  GPIO_InitStruct.Pin = CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin;
 8003bea:	f242 03c1 	movw	r3, #8385	; 0x20c1
 8003bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003bf0:	2311      	movs	r3, #17
 8003bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	4619      	mov	r1, r3
 8003c02:	484c      	ldr	r0, [pc, #304]	; (8003d34 <MX_GPIO_Init+0x26c>)
 8003c04:	f002 fa02 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_CLK_Pin */
  GPIO_InitStruct.Pin = CAL3_CLK_Pin;
 8003c08:	2308      	movs	r3, #8
 8003c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c12:	2301      	movs	r3, #1
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CAL3_CLK_GPIO_Port, &GPIO_InitStruct);
 8003c16:	f107 031c 	add.w	r3, r7, #28
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4848      	ldr	r0, [pc, #288]	; (8003d40 <MX_GPIO_Init+0x278>)
 8003c1e:	f002 f9f5 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_DATA_Pin */
  GPIO_InitStruct.Pin = CAL3_DATA_Pin;
 8003c22:	2301      	movs	r3, #1
 8003c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CAL3_DATA_GPIO_Port, &GPIO_InitStruct);
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	4840      	ldr	r0, [pc, #256]	; (8003d38 <MX_GPIO_Init+0x270>)
 8003c36:	f002 f9e9 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c46:	2303      	movs	r3, #3
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4839      	ldr	r0, [pc, #228]	; (8003d38 <MX_GPIO_Init+0x270>)
 8003c52:	f002 f9db 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL2_DATA_Pin */
  GPIO_InitStruct.Pin = CAL2_DATA_Pin;
 8003c56:	2302      	movs	r3, #2
 8003c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CAL2_DATA_GPIO_Port, &GPIO_InitStruct);
 8003c62:	f107 031c 	add.w	r3, r7, #28
 8003c66:	4619      	mov	r1, r3
 8003c68:	4836      	ldr	r0, [pc, #216]	; (8003d44 <MX_GPIO_Init+0x27c>)
 8003c6a:	f002 f9cf 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_OUT_4_Pin DIG_OUT_3_Pin */
  GPIO_InitStruct.Pin = DIG_OUT_4_Pin|DIG_OUT_3_Pin;
 8003c6e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c74:	2301      	movs	r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c80:	f107 031c 	add.w	r3, r7, #28
 8003c84:	4619      	mov	r1, r3
 8003c86:	482d      	ldr	r0, [pc, #180]	; (8003d3c <MX_GPIO_Init+0x274>)
 8003c88:	f002 f9c0 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_OUT_2_Pin DIG_OUT_1_Pin */
  GPIO_InitStruct.Pin = DIG_OUT_2_Pin|DIG_OUT_1_Pin;
 8003c8c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c92:	2301      	movs	r3, #1
 8003c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9e:	f107 031c 	add.w	r3, r7, #28
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4826      	ldr	r0, [pc, #152]	; (8003d40 <MX_GPIO_Init+0x278>)
 8003ca6:	f002 f9b1 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc0:	f107 031c 	add.w	r3, r7, #28
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	481c      	ldr	r0, [pc, #112]	; (8003d38 <MX_GPIO_Init+0x270>)
 8003cc8:	f002 f9a0 	bl	800600c <HAL_GPIO_Init>

  /*Configure GPIO pins : uC_PLC_Pin uC_PEDAL_Pin */
  GPIO_InitStruct.Pin = uC_PLC_Pin|uC_PEDAL_Pin;
 8003ccc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cdc:	f107 031c 	add.w	r3, r7, #28
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4818      	ldr	r0, [pc, #96]	; (8003d44 <MX_GPIO_Init+0x27c>)
 8003ce4:	f002 f992 	bl	800600c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2100      	movs	r1, #0
 8003cec:	2008      	movs	r0, #8
 8003cee:	f001 f80e 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003cf2:	2008      	movs	r0, #8
 8003cf4:	f001 f827 	bl	8004d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	2009      	movs	r0, #9
 8003cfe:	f001 f806 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003d02:	2009      	movs	r0, #9
 8003d04:	f001 f81f 	bl	8004d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	2017      	movs	r0, #23
 8003d0e:	f000 fffe 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d12:	2017      	movs	r0, #23
 8003d14:	f001 f817 	bl	8004d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	2028      	movs	r0, #40	; 0x28
 8003d1e:	f000 fff6 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d22:	2028      	movs	r0, #40	; 0x28
 8003d24:	f001 f80f 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 8003d28:	bf00      	nop
 8003d2a:	3730      	adds	r7, #48	; 0x30
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40020800 	.word	0x40020800
 8003d44:	40020400 	.word	0x40020400

08003d48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	if(htim  == &htim14){
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d120      	bne.n	8003d9a <HAL_TIM_PeriodElapsedCallback+0x52>
		// todo: esta funcion va a cambiar cuando hagamos las pruebas finales, porque es solo un ejemplo.
//		HAL_GPIO_WritePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin); // periodicamente tenemos un request, en teoria setteado cada 93.75ms, empieza bajo
		HAL_GPIO_WritePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin, GPIO_PIN_RESET); // turn off REQ
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d5e:	4812      	ldr	r0, [pc, #72]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d60:	f002 fb08 	bl	8006374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAL2_REQ_GPIO_Port, CAL2_REQ_Pin, GPIO_PIN_RESET); //
 8003d64:	2200      	movs	r2, #0
 8003d66:	2180      	movs	r1, #128	; 0x80
 8003d68:	480f      	ldr	r0, [pc, #60]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d6a:	f002 fb03 	bl	8006374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAL3_REQ_GPIO_Port, CAL3_REQ_Pin, GPIO_PIN_RESET); //
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2140      	movs	r1, #64	; 0x40
 8003d72:	480d      	ldr	r0, [pc, #52]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d74:	f002 fafe 	bl	8006374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CAL4_REQ_GPIO_Port, CAL4_REQ_Pin, GPIO_PIN_RESET); //
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	480a      	ldr	r0, [pc, #40]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003d7e:	f002 faf9 	bl	8006374 <HAL_GPIO_WritePin>

		onRisingEdgeOfReqSignal(CALIPER_1); // prendo el flag de poder empezar a leer los bits
 8003d82:	2000      	movs	r0, #0
 8003d84:	f7fd f98a 	bl	800109c <onRisingEdgeOfReqSignal>
		onRisingEdgeOfReqSignal(CALIPER_2);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f7fd f987 	bl	800109c <onRisingEdgeOfReqSignal>
		onRisingEdgeOfReqSignal(CALIPER_3);
 8003d8e:	2002      	movs	r0, #2
 8003d90:	f7fd f984 	bl	800109c <onRisingEdgeOfReqSignal>
		onRisingEdgeOfReqSignal(CALIPER_4);
 8003d94:	2003      	movs	r0, #3
 8003d96:	f7fd f981 	bl	800109c <onRisingEdgeOfReqSignal>
	}
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000468 	.word	0x20000468
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
	// llega una interrupcion por GPIO

	if(GPIO_Pin ==CAL1_CLK_Pin || GPIO_Pin == CAL2_CLK_Pin || GPIO_Pin == CAL3_CLK_Pin || GPIO_Pin == CAL4_CLK_Pin ){
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	d009      	beq.n	8003dd2 <HAL_GPIO_EXTI_Callback+0x26>
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dc4:	d005      	beq.n	8003dd2 <HAL_GPIO_EXTI_Callback+0x26>
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d002      	beq.n	8003dd2 <HAL_GPIO_EXTI_Callback+0x26>
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d109      	bne.n	8003de6 <HAL_GPIO_EXTI_Callback+0x3a>
		//esto se hace si el GPIO_Pin es alguno de los del calibre (CLK)

		onRisingEdgeOfClockSignal(getCaliperNumberGivenClockPin(GPIO_Pin), caliperManager); // aca se realiza la lectura de los bits y se va guardando en el buffer
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd f8c3 	bl	8000f60 <getCaliperNumberGivenClockPin>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	4914      	ldr	r1, [pc, #80]	; (8003e30 <HAL_GPIO_EXTI_Callback+0x84>)
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fd f971 	bl	80010c8 <onRisingEdgeOfClockSignal>
	}

	if(GPIO_Pin == uC_PEDAL_Pin){
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dec:	d117      	bne.n	8003e1e <HAL_GPIO_EXTI_Callback+0x72>
		// que pasa con el pedal de los calibres
	  HAL_TIM_Base_Start_IT(&htim14); // start timer
 8003dee:	4811      	ldr	r0, [pc, #68]	; (8003e34 <HAL_GPIO_EXTI_Callback+0x88>)
 8003df0:	f004 f988 	bl	8008104 <HAL_TIM_Base_Start_IT>
	  HAL_GPIO_WritePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003df4:	2201      	movs	r2, #1
 8003df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dfa:	480f      	ldr	r0, [pc, #60]	; (8003e38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003dfc:	f002 faba 	bl	8006374 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CAL2_REQ_GPIO_Port, CAL2_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003e00:	2201      	movs	r2, #1
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	480c      	ldr	r0, [pc, #48]	; (8003e38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003e06:	f002 fab5 	bl	8006374 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CAL3_REQ_GPIO_Port, CAL3_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	480a      	ldr	r0, [pc, #40]	; (8003e38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003e10:	f002 fab0 	bl	8006374 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CAL4_REQ_GPIO_Port, CAL4_REQ_Pin, GPIO_PIN_SET); // supose REQ starts down, we turn on the REQ
 8003e14:	2201      	movs	r2, #1
 8003e16:	2101      	movs	r1, #1
 8003e18:	4807      	ldr	r0, [pc, #28]	; (8003e38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003e1a:	f002 faab 	bl	8006374 <HAL_GPIO_WritePin>
	}

	if(GPIO_Pin == uC_PLC_Pin){
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d101      	bne.n	8003e28 <HAL_GPIO_EXTI_Callback+0x7c>
		// que pasa si viene el PLC
		pieceCountManager();
 8003e24:	f000 fc80 	bl	8004728 <pieceCountManager>
	}
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	080045c1 	.word	0x080045c1
 8003e34:	20000468 	.word	0x20000468
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
// now we have on buffer the data
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003e44:	2201      	movs	r2, #1
 8003e46:	2110      	movs	r1, #16
 8003e48:	4803      	ldr	r0, [pc, #12]	; (8003e58 <HAL_SPI_RxCpltCallback+0x1c>)
 8003e4a:	f002 fa93 	bl	8006374 <HAL_GPIO_WritePin>

}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40020000 	.word	0x40020000

08003e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e60:	b672      	cpsid	i
}
 8003e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e64:	e7fe      	b.n	8003e64 <Error_Handler+0x8>
	...

08003e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	607b      	str	r3, [r7, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_MspInit+0x4c>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800

08003eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	f107 0314 	add.w	r3, r7, #20
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_SPI_MspInit+0x94>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d134      	bne.n	8003f44 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <HAL_SPI_MspInit+0x98>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <HAL_SPI_MspInit+0x98>)
 8003ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eea:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_SPI_MspInit+0x98>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <HAL_SPI_MspInit+0x98>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a14      	ldr	r2, [pc, #80]	; (8003f50 <HAL_SPI_MspInit+0x98>)
 8003f00:	f043 0304 	orr.w	r3, r3, #4
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_SPI_MspInit+0x98>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003f12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f20:	2303      	movs	r3, #3
 8003f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f24:	2306      	movs	r3, #6
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4809      	ldr	r0, [pc, #36]	; (8003f54 <HAL_SPI_MspInit+0x9c>)
 8003f30:	f002 f86c 	bl	800600c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8003f34:	2200      	movs	r2, #0
 8003f36:	2100      	movs	r1, #0
 8003f38:	2033      	movs	r0, #51	; 0x33
 8003f3a:	f000 fee8 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003f3e:	2033      	movs	r0, #51	; 0x33
 8003f40:	f000 ff01 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003f44:	bf00      	nop
 8003f46:	3728      	adds	r7, #40	; 0x28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40003c00 	.word	0x40003c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40020800 	.word	0x40020800

08003f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <HAL_TIM_Base_MspInit+0x48>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d115      	bne.n	8003f96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003f86:	2200      	movs	r2, #0
 8003f88:	2100      	movs	r1, #0
 8003f8a:	202d      	movs	r0, #45	; 0x2d
 8003f8c:	f000 febf 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003f90:	202d      	movs	r0, #45	; 0x2d
 8003f92:	f000 fed8 	bl	8004d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40002000 	.word	0x40002000
 8003fa4:	40023800 	.word	0x40023800

08003fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fac:	e7fe      	b.n	8003fac <NMI_Handler+0x4>

08003fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fb2:	e7fe      	b.n	8003fb2 <HardFault_Handler+0x4>

08003fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fb8:	e7fe      	b.n	8003fb8 <MemManage_Handler+0x4>

08003fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fbe:	e7fe      	b.n	8003fbe <BusFault_Handler+0x4>

08003fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fc4:	e7fe      	b.n	8003fc4 <UsageFault_Handler+0x4>

08003fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ff4:	f000 fd6c 	bl	8004ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004000:	2004      	movs	r0, #4
 8004002:	f002 f9d1 	bl	80063a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}

0800400a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800400e:	2008      	movs	r0, #8
 8004010:	f002 f9ca 	bl	80063a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}

08004018 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800401c:	2040      	movs	r0, #64	; 0x40
 800401e:	f002 f9c3 	bl	80063a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004022:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004026:	f002 f9bf 	bl	80063a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800402a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800402e:	f002 f9bb 	bl	80063a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}

08004036 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800403a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800403e:	f002 f9b3 	bl	80063a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800404e:	f004 f8c9 	bl	80081e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000468 	.word	0x20000468

0800405c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <SPI3_IRQHandler+0x10>)
 8004062:	f003 fbeb 	bl	800783c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	2000040c 	.word	0x2000040c

08004070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	return 1;
 8004074:	2301      	movs	r3, #1
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_kill>:

int _kill(int pid, int sig)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <_kill+0x20>)
 800408c:	2216      	movs	r2, #22
 800408e:	601a      	str	r2, [r3, #0]
	return -1;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20009100 	.word	0x20009100

080040a4 <_exit>:

void _exit (int status)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040ac:	f04f 31ff 	mov.w	r1, #4294967295
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ffe5 	bl	8004080 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040b6:	e7fe      	b.n	80040b6 <_exit+0x12>

080040b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e00a      	b.n	80040e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ca:	f3af 8000 	nop.w
 80040ce:	4601      	mov	r1, r0
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	60ba      	str	r2, [r7, #8]
 80040d6:	b2ca      	uxtb	r2, r1
 80040d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3301      	adds	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	dbf0      	blt.n	80040ca <_read+0x12>
	}

return len;
 80040e8:	687b      	ldr	r3, [r7, #4]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e009      	b.n	8004118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	60ba      	str	r2, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	dbf1      	blt.n	8004104 <_write+0x12>
	}
	return len;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_close>:

int _close(int file)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
	return -1;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004152:	605a      	str	r2, [r3, #4]
	return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_isatty>:

int _isatty(int file)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
	return 1;
 800416a:	2301      	movs	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
	return 0;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <_sbrk+0x5c>)
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <_sbrk+0x60>)
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <_sbrk+0x64>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <_sbrk+0x64>)
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <_sbrk+0x68>)
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <_sbrk+0x64>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d205      	bcs.n	80041d0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <_sbrk+0x6c>)
 80041c6:	220c      	movs	r2, #12
 80041c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	e009      	b.n	80041e4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <_sbrk+0x64>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <_sbrk+0x64>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	4a06      	ldr	r2, [pc, #24]	; (80041f8 <_sbrk+0x64>)
 80041e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	20020000 	.word	0x20020000
 80041f4:	00000400 	.word	0x00000400
 80041f8:	2000028c 	.word	0x2000028c
 80041fc:	20009110 	.word	0x20009110
 8004200:	20009100 	.word	0x20009100

08004204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <SystemInit+0x20>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	4a05      	ldr	r2, [pc, #20]	; (8004224 <SystemInit+0x20>)
 8004210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <udpClient_send_first_message>:
struct udp_pcb *upcb;
char buffer[1000];
message_t message;

static void udpClient_send_first_message(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b09c      	sub	sp, #112	; 0x70
 800422c:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "Success on Initializing UDP Client");
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	4912      	ldr	r1, [pc, #72]	; (800427c <udpClient_send_first_message+0x54>)
 8004232:	4618      	mov	r0, r3
 8004234:	f00f fca0 	bl	8013b78 <siprintf>
 8004238:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800423a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423c:	b29b      	uxth	r3, r3
 800423e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004242:	4619      	mov	r1, r3
 8004244:	2036      	movs	r0, #54	; 0x36
 8004246:	f005 fe27 	bl	8009e98 <pbuf_alloc>
 800424a:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 800424c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00f      	beq.n	8004272 <udpClient_send_first_message+0x4a>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	b29a      	uxth	r2, r3
 8004256:	1d3b      	adds	r3, r7, #4
 8004258:	4619      	mov	r1, r3
 800425a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800425c:	f006 fb6c 	bl	800a938 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <udpClient_send_first_message+0x58>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004266:	4618      	mov	r0, r3
 8004268:	f00c f88e 	bl	8010388 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 800426c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800426e:	f006 f8f7 	bl	800a460 <pbuf_free>
  }
}
 8004272:	bf00      	nop
 8004274:	3770      	adds	r7, #112	; 0x70
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	08016f40 	.word	0x08016f40
 8004280:	200004b0 	.word	0x200004b0

08004284 <udpClient_connect>:


void udpClient_connect(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 800428a:	f00c fb7d 	bl	8010988 <udp_new>
 800428e:	4603      	mov	r3, r0
 8004290:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <udpClient_connect+0x5c>)
 8004292:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 0, 111);
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <udpClient_connect+0x60>)
 8004296:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <udpClient_connect+0x5c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f107 0108 	add.w	r1, r7, #8
 80042a0:	2208      	movs	r2, #8
 80042a2:	4618      	mov	r0, r3
 80042a4:	f00c fa5a 	bl	801075c <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 0, 22); // CAMBIAR ESTO SIEMRPE!
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <udpClient_connect+0x64>)
 80042aa:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <udpClient_connect+0x5c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	1d39      	adds	r1, r7, #4
 80042b2:	2207      	movs	r2, #7
 80042b4:	4618      	mov	r0, r3
 80042b6:	f00c fad9 	bl	801086c <udp_connect>
 80042ba:	4603      	mov	r3, r0
 80042bc:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80042be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <udpClient_connect+0x54>
	{
//		/* 2. Send message to server */
		udpClient_send_first_message ();
 80042c6:	f7ff ffaf 	bl	8004228 <udpClient_send_first_message>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <udpClient_connect+0x5c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	4906      	ldr	r1, [pc, #24]	; (80042ec <udpClient_connect+0x68>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f00c fb38 	bl	8010948 <udp_recv>
	}
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200004b0 	.word	0x200004b0
 80042e4:	6f00a8c0 	.word	0x6f00a8c0
 80042e8:	1600a8c0 	.word	0x1600a8c0
 80042ec:	08004355 	.word	0x08004355

080042f0 <udpClient_custom_string>:


void udpClient_custom_string(message_t message)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b09e      	sub	sp, #120	; 0x78
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	463b      	mov	r3, r7
 80042f8:	e883 0003 	stmia.w	r3, {r0, r1}
  struct pbuf *txBuf;
  char data[100];

	/* Copy the message data to the txBuf */
  strncpy (data, message.msg, message.len);
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	f107 030c 	add.w	r3, r7, #12
 8004304:	4618      	mov	r0, r3
 8004306:	f00f fc5f 	bl	8013bc8 <strncpy>
  int len = message.len;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	677b      	str	r3, [r7, #116]	; 0x74

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800430e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004310:	b29b      	uxth	r3, r3
 8004312:	f44f 7220 	mov.w	r2, #640	; 0x280
 8004316:	4619      	mov	r1, r3
 8004318:	2036      	movs	r0, #54	; 0x36
 800431a:	f005 fdbd 	bl	8009e98 <pbuf_alloc>
 800431e:	6738      	str	r0, [r7, #112]	; 0x70

  if (txBuf != NULL)
 8004320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <udpClient_custom_string+0x58>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8004326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004328:	b29a      	uxth	r2, r3
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	4619      	mov	r1, r3
 8004330:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004332:	f006 fb01 	bl	800a938 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <udpClient_custom_string+0x60>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800433c:	4618      	mov	r0, r3
 800433e:	f00c f823 	bl	8010388 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8004342:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004344:	f006 f88c 	bl	800a460 <pbuf_free>
  }
}
 8004348:	bf00      	nop
 800434a:	3778      	adds	r7, #120	; 0x78
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	200004b0 	.word	0x200004b0

08004354 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	895b      	ldrh	r3, [r3, #10]
 800436a:	461a      	mov	r2, r3
 800436c:	480b      	ldr	r0, [pc, #44]	; (800439c <udp_receive_callback+0x48>)
 800436e:	f00f fc2b 	bl	8013bc8 <strncpy>

	// store the Ethernet Message
	message.msg = buffer;
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <udp_receive_callback+0x4c>)
 8004374:	4a09      	ldr	r2, [pc, #36]	; (800439c <udp_receive_callback+0x48>)
 8004376:	601a      	str	r2, [r3, #0]
	message.len = p-> len;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	895b      	ldrh	r3, [r3, #10]
 800437c:	461a      	mov	r2, r3
 800437e:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <udp_receive_callback+0x4c>)
 8004380:	605a      	str	r2, [r3, #4]

	// process the received message
	ETHonMessageReceived(message);
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <udp_receive_callback+0x4c>)
 8004384:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004388:	f000 f9f0 	bl	800476c <ETHonMessageReceived>

	/* Free receive pbuf */
	pbuf_free(p);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f006 f867 	bl	800a460 <pbuf_free>
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200004bc 	.word	0x200004bc
 80043a0:	200004b4 	.word	0x200004b4

080043a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043a8:	480d      	ldr	r0, [pc, #52]	; (80043e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043aa:	490e      	ldr	r1, [pc, #56]	; (80043e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043ac:	4a0e      	ldr	r2, [pc, #56]	; (80043e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b0:	e002      	b.n	80043b8 <LoopCopyDataInit>

080043b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b6:	3304      	adds	r3, #4

080043b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043bc:	d3f9      	bcc.n	80043b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043be:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043c0:	4c0b      	ldr	r4, [pc, #44]	; (80043f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c4:	e001      	b.n	80043ca <LoopFillZerobss>

080043c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c8:	3204      	adds	r2, #4

080043ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043cc:	d3fb      	bcc.n	80043c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043ce:	f7ff ff19 	bl	8004204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043d2:	f00e fde3 	bl	8012f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043d6:	f7ff fa8b 	bl	80038f0 <main>
  bx  lr    
 80043da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043e4:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80043e8:	0801a118 	.word	0x0801a118
  ldr r2, =_sbss
 80043ec:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80043f0:	20009110 	.word	0x20009110

080043f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f4:	e7fe      	b.n	80043f4 <ADC_IRQHandler>
	...

080043f8 <analogInDigitalOutManager>:
//
// Created by joa-m on 11/1/2021.
//
#include "../Inc/analogInDigitalOutManager.h"

void analogInDigitalOutManager(message_t json){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b09c      	sub	sp, #112	; 0x70
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	463b      	mov	r3, r7
 8004400:	e883 0003 	stmia.w	r3, {r0, r1}
    char frameType[100];
    getFrameType(json, frameType);
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	461a      	mov	r2, r3
 800440a:	463b      	mov	r3, r7
 800440c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004410:	f000 f9bb 	bl	800478a <getFrameType>

    if(strcmp(frameType, "READ_ANALOG_IN") == 0){
 8004414:	f107 030c 	add.w	r3, r7, #12
 8004418:	490e      	ldr	r1, [pc, #56]	; (8004454 <analogInDigitalOutManager+0x5c>)
 800441a:	4618      	mov	r0, r3
 800441c:	f7fb fed8 	bl	80001d0 <strcmp>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d104      	bne.n	8004430 <analogInDigitalOutManager+0x38>
        analogInManager(json);
 8004426:	463b      	mov	r3, r7
 8004428:	e893 0003 	ldmia.w	r3, {r0, r1}
 800442c:	f000 f874 	bl	8004518 <analogInManager>
    }

    if(strcmp(frameType, "DIGITAL_OUTPUT_SET_STATE") == 0){
 8004430:	f107 030c 	add.w	r3, r7, #12
 8004434:	4908      	ldr	r1, [pc, #32]	; (8004458 <analogInDigitalOutManager+0x60>)
 8004436:	4618      	mov	r0, r3
 8004438:	f7fb feca 	bl	80001d0 <strcmp>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d104      	bne.n	800444c <analogInDigitalOutManager+0x54>
        digitalOutManager(json);
 8004442:	463b      	mov	r3, r7
 8004444:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004448:	f000 f93a 	bl	80046c0 <digitalOutManager>
    }
}
 800444c:	bf00      	nop
 800444e:	3770      	adds	r7, #112	; 0x70
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	08016f94 	.word	0x08016f94
 8004458:	08016fa4 	.word	0x08016fa4

0800445c <analogValidate>:
    int readAdc(int inputNum){
        return 100;
    }
#endif

bool analogValidate(uint32_t analogData){
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    return analogData <= MAX_VALID_VALUE && analogData >= MIN_VALID_VALUE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b14      	cmp	r3, #20
 8004468:	d804      	bhi.n	8004474 <analogValidate+0x18>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d901      	bls.n	8004474 <analogValidate+0x18>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <analogValidate+0x1a>
 8004474:	2300      	movs	r3, #0
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <sendADCReadRequest>:

uint8_t ADC_CH[4] = {ADC_CH0_MASK, ADC_CH1_MASK, ADC_CH2_MASK, ADC_CH3_MASK};

uint16_t sendADCReadRequest(int inputNum){
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8004490:	2200      	movs	r2, #0
 8004492:	2110      	movs	r1, #16
 8004494:	481b      	ldr	r0, [pc, #108]	; (8004504 <sendADCReadRequest+0x7c>)
 8004496:	f001 ff6d 	bl	8006374 <HAL_GPIO_WritePin>
	pTxData[0]=ADC_CH[inputNum];
 800449a:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <sendADCReadRequest+0x80>)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <sendADCReadRequest+0x84>)
 80044a4:	701a      	strb	r2, [r3, #0]
	uint32_t Timeout = HAL_MAX_DELAY;
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi3, pTxData, 1, Timeout);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	4916      	ldr	r1, [pc, #88]	; (800450c <sendADCReadRequest+0x84>)
 80044b2:	4817      	ldr	r0, [pc, #92]	; (8004510 <sendADCReadRequest+0x88>)
 80044b4:	f002 fca1 	bl	8006dfa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, pRxData, 2, Timeout);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2202      	movs	r2, #2
 80044bc:	4915      	ldr	r1, [pc, #84]	; (8004514 <sendADCReadRequest+0x8c>)
 80044be:	4814      	ldr	r0, [pc, #80]	; (8004510 <sendADCReadRequest+0x88>)
 80044c0:	f002 fdd7 	bl	8007072 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 80044c4:	2201      	movs	r2, #1
 80044c6:	2110      	movs	r1, #16
 80044c8:	480e      	ldr	r0, [pc, #56]	; (8004504 <sendADCReadRequest+0x7c>)
 80044ca:	f001 ff53 	bl	8006374 <HAL_GPIO_WritePin>
	pRxData[0] = pRxData[0] & 0x7F;
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <sendADCReadRequest+0x8c>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <sendADCReadRequest+0x8c>)
 80044da:	701a      	strb	r2, [r3, #0]
	pRxData[1] = pRxData[1] >> 3;
 80044dc:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <sendADCReadRequest+0x8c>)
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <sendADCReadRequest+0x8c>)
 80044e6:	705a      	strb	r2, [r3, #1]

	return (((uint16_t)pRxData[0]) << 5) | pRxData[1];
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <sendADCReadRequest+0x8c>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	015b      	lsls	r3, r3, #5
 80044ee:	b21a      	sxth	r2, r3
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <sendADCReadRequest+0x8c>)
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	b21b      	sxth	r3, r3
 80044f6:	4313      	orrs	r3, r2
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	b29b      	uxth	r3, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40020000 	.word	0x40020000
 8004508:	20000028 	.word	0x20000028
 800450c:	20000024 	.word	0x20000024
 8004510:	2000040c 	.word	0x2000040c
 8004514:	20000290 	.word	0x20000290

08004518 <analogInManager>:

void analogInManager(message_t json){
 8004518:	b580      	push	{r7, lr}
 800451a:	b0a2      	sub	sp, #136	; 0x88
 800451c:	af00      	add	r7, sp, #0
 800451e:	463b      	mov	r3, r7
 8004520:	e883 0003 	stmia.w	r3, {r0, r1}
    int inputNum = getInputNumber(json);
 8004524:	463b      	mov	r3, r7
 8004526:	e893 0003 	ldmia.w	r3, {r0, r1}
 800452a:	f000 f951 	bl	80047d0 <getInputNumber>
 800452e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

    uint16_t analog_data = sendADCReadRequest(inputNum);
 8004532:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8004536:	f7ff ffa7 	bl	8004488 <sendADCReadRequest>
 800453a:	4603      	mov	r3, r0
 800453c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    float receivedData = (analog_data/4096.0)*(3300.0/150.0);
 8004540:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8004544:	4618      	mov	r0, r3
 8004546:	f7fb fffd 	bl	8000544 <__aeabi_i2d>
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <analogInManager+0xa0>)
 8004550:	f7fc f98c 	bl	800086c <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4610      	mov	r0, r2
 800455a:	4619      	mov	r1, r3
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <analogInManager+0xa4>)
 8004562:	f7fc f859 	bl	8000618 <__aeabi_dmul>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	f7fc fb2b 	bl	8000bc8 <__aeabi_d2f>
 8004572:	4603      	mov	r3, r0
 8004574:	67fb      	str	r3, [r7, #124]	; 0x7c

    char str2send[100];
    bool isValid = analogValidate(receivedData);
 8004576:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800457a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800457e:	ee17 0a90 	vmov	r0, s15
 8004582:	f7ff ff6b 	bl	800445c <analogValidate>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    message_t msg = sendAnalogInMessage(str2send, inputNum, receivedData, isValid);
 800458c:	f107 000c 	add.w	r0, r7, #12
 8004590:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004594:	f107 0114 	add.w	r1, r7, #20
 8004598:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 800459c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045a0:	f000 fa0c 	bl	80049bc <sendAnalogInMessage>

    ETHsendMessage(msg);
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045ac:	f000 f8cf 	bl	800474e <ETHsendMessage>
}
 80045b0:	bf00      	nop
 80045b2:	3788      	adds	r7, #136	; 0x88
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40b00000 	.word	0x40b00000
 80045bc:	40360000 	.word	0x40360000

080045c0 <caliperManager>:
    return getIsValidCaliperMeasure();
}

#endif

void caliperManager(caliper_number caliperNumber){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b0a2      	sub	sp, #136	; 0x88
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]
    int retry;
    bool isValid = false;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    digimatic_frame_t* digimaticFrames;
    for(retry = 0; retry< RETRY_TIMES; retry++){
 80045d0:	2300      	movs	r3, #0
 80045d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045d4:	e011      	b.n	80045fa <caliperManager+0x3a>
        digimaticFrames = digimaticGetMeasureFrames(caliperNumber);
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fc fe25 	bl	8001228 <digimaticGetMeasureFrames>
 80045de:	6778      	str	r0, [r7, #116]	; 0x74
        isValid = validCaliperMeasure(digimaticFrames);
 80045e0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80045e2:	f7fc fedf 	bl	80013a4 <validCaliperMeasure>
 80045e6:	4603      	mov	r3, r0
 80045e8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        if(isValid) break;
 80045ec:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d106      	bne.n	8004602 <caliperManager+0x42>
    for(retry = 0; retry< RETRY_TIMES; retry++){
 80045f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045f6:	3301      	adds	r3, #1
 80045f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	ddea      	ble.n	80045d6 <caliperManager+0x16>
 8004600:	e000      	b.n	8004604 <caliperManager+0x44>
        if(isValid) break;
 8004602:	bf00      	nop
    }

    char str2send[MAX_STRING_SIZE];
    message_t msg;
    if(isValid){
 8004604:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8004608:	2b00      	cmp	r3, #0
 800460a:	d011      	beq.n	8004630 <caliperManager+0x70>
    	digimatic_measure_t measure = digimaticMeasure(digimaticFrames);
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004612:	4618      	mov	r0, r3
 8004614:	f7fc fe34 	bl	8001280 <digimaticMeasure>
        msg = sendCaliperMeasure(str2send, measure, caliperNumber);
 8004618:	f107 001c 	add.w	r0, r7, #28
 800461c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	cb0c      	ldmia	r3, {r2, r3}
 800462a:	f000 f947 	bl	80048bc <sendCaliperMeasure>
 800462e:	e00d      	b.n	800464c <caliperManager+0x8c>
    } else {
        msg = sendCaliperWarning(str2send, caliperNumber);
 8004630:	463b      	mov	r3, r7
 8004632:	7bfa      	ldrb	r2, [r7, #15]
 8004634:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f983 	bl	8004944 <sendCaliperWarning>
 800463e:	f107 031c 	add.w	r3, r7, #28
 8004642:	463a      	mov	r2, r7
 8004644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004648:	e883 0003 	stmia.w	r3, {r0, r1}
    }

    ETHsendMessage(msg);
 800464c:	f107 031c 	add.w	r3, r7, #28
 8004650:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004654:	f000 f87b 	bl	800474e <ETHsendMessage>
}
 8004658:	bf00      	nop
 800465a:	3780      	adds	r7, #128	; 0x80
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <turnOn>:
// SALIDAS DIGITALES
// {PC9, PC7, PD15, PD13}
GPIO_TypeDef* outputGpioPortMapping[] = {GPIOC,GPIOC,GPIOD,GPIOD};
uint16_t outputGpioPinMapping[] = {GPIO_PIN_9,GPIO_PIN_7,GPIO_PIN_15,GPIO_PIN_13};

void turnOn(int outputNum){
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(outputGpioPortMapping[outputNum], outputGpioPinMapping[outputNum], GPIO_PIN_SET);
 8004668:	4a07      	ldr	r2, [pc, #28]	; (8004688 <turnOn+0x28>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004670:	4a06      	ldr	r2, [pc, #24]	; (800468c <turnOn+0x2c>)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004678:	2201      	movs	r2, #1
 800467a:	4619      	mov	r1, r3
 800467c:	f001 fe7a 	bl	8006374 <HAL_GPIO_WritePin>
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	2000002c 	.word	0x2000002c
 800468c:	2000003c 	.word	0x2000003c

08004690 <turnOff>:
void turnOff(int outputNum){
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(outputGpioPortMapping[outputNum], outputGpioPinMapping[outputNum], GPIO_PIN_RESET);
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <turnOff+0x28>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046a0:	4a06      	ldr	r2, [pc, #24]	; (80046bc <turnOff+0x2c>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046a8:	2200      	movs	r2, #0
 80046aa:	4619      	mov	r1, r3
 80046ac:	f001 fe62 	bl	8006374 <HAL_GPIO_WritePin>
}
 80046b0:	bf00      	nop
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	2000002c 	.word	0x2000002c
 80046bc:	2000003c 	.word	0x2000003c

080046c0 <digitalOutManager>:
#endif

void digitalOutManager(message_t json){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	463b      	mov	r3, r7
 80046c8:	e883 0003 	stmia.w	r3, {r0, r1}
    int outputNum = getOutputNum(json);
 80046cc:	463b      	mov	r3, r7
 80046ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046d2:	f000 f8a2 	bl	800481a <getOutputNum>
 80046d6:	60f8      	str	r0, [r7, #12]
    char outputState[4];
    getOutputState(json, outputState);
 80046d8:	f107 0308 	add.w	r3, r7, #8
 80046dc:	461a      	mov	r2, r3
 80046de:	463b      	mov	r3, r7
 80046e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046e4:	f000 f8c0 	bl	8004868 <getOutputState>

    if(strcmp(outputState, "ON") == 0){
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	490c      	ldr	r1, [pc, #48]	; (8004720 <digitalOutManager+0x60>)
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb fd6e 	bl	80001d0 <strcmp>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <digitalOutManager+0x40>
        turnOn(outputNum);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff ffb0 	bl	8004660 <turnOn>
    }
    if(strcmp(outputState, "OFF") == 0){
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	4907      	ldr	r1, [pc, #28]	; (8004724 <digitalOutManager+0x64>)
 8004706:	4618      	mov	r0, r3
 8004708:	f7fb fd62 	bl	80001d0 <strcmp>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <digitalOutManager+0x58>
        turnOff(outputNum);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff ffbc 	bl	8004690 <turnOff>
    }
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	08016ff0 	.word	0x08016ff0
 8004724:	08016ff4 	.word	0x08016ff4

08004728 <pieceCountManager>:
//
// Created by joa-m on 11/1/2021.
//
#include "../Inc/pieceCountManager.h"

void pieceCountManager(void){
 8004728:	b580      	push	{r7, lr}
 800472a:	b09c      	sub	sp, #112	; 0x70
 800472c:	af00      	add	r7, sp, #0
    char str2send[100];
    message_t msg;
    msg = sendIncrementPieceCount(str2send);
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	f107 020c 	add.w	r2, r7, #12
 8004734:	4611      	mov	r1, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f924 	bl	8004984 <sendIncrementPieceCount>
    ETHsendMessage(msg);
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004742:	f000 f804 	bl	800474e <ETHsendMessage>
 8004746:	bf00      	nop
 8004748:	3770      	adds	r7, #112	; 0x70
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <ETHsendMessage>:
        printf(getTestBench());
        printf("\n");
    }
#endif

void ETHsendMessage(message_t message){
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	463b      	mov	r3, r7
 8004756:	e883 0003 	stmia.w	r3, {r0, r1}
    udpClient_custom_string(message);
 800475a:	463b      	mov	r3, r7
 800475c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004760:	f7ff fdc6 	bl	80042f0 <udpClient_custom_string>
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <ETHonMessageReceived>:

void ETHonMessageReceived(message_t json){
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	463b      	mov	r3, r7
 8004774:	e883 0003 	stmia.w	r3, {r0, r1}
    analogInDigitalOutManager(json);
 8004778:	463b      	mov	r3, r7
 800477a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800477e:	f7ff fe3b 	bl	80043f8 <analogInDigitalOutManager>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <getFrameType>:

#include "../Inc/jsonGetter.h"

// free all! :)

void getFrameType(message_t json, char* frameTypePtr){
 800478a:	b580      	push	{r7, lr}
 800478c:	b088      	sub	sp, #32
 800478e:	af00      	add	r7, sp, #0
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	e883 0003 	stmia.w	r3, {r0, r1}
 8004798:	607a      	str	r2, [r7, #4]
    struct json_value_s* root = json_parse(json.msg, json.len);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f86d 	bl	8003880 <json_parse>
 80047a6:	61f8      	str	r0, [r7, #28]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	61bb      	str	r3, [r7, #24]
    const char * frameType = ((struct json_string_s*)object->start->value->payload)->string;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	617b      	str	r3, [r7, #20]
    strcpy(frameTypePtr, frameType);
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f00f f9fb 	bl	8013bb8 <strcpy>
    free(root);
 80047c2:	69f8      	ldr	r0, [r7, #28]
 80047c4:	f00e fc16 	bl	8012ff4 <free>
}
 80047c8:	bf00      	nop
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <getInputNumber>:

int getInputNumber(message_t json){
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	463b      	mov	r3, r7
 80047d8:	e883 0003 	stmia.w	r3, {r0, r1}
    struct json_value_s* root = json_parse(json.msg, json.len);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff f84c 	bl	8003880 <json_parse>
 80047e8:	6178      	str	r0, [r7, #20]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	613b      	str	r3, [r7, #16]
    int inputNum = atoi(json_value_as_number(object->start->next->value)->number);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff f867 	bl	80038cc <json_value_as_number>
 80047fe:	4603      	mov	r3, r0
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f00e fbc6 	bl	8012f94 <atoi>
 8004808:	60f8      	str	r0, [r7, #12]
    free(root);
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f00e fbf2 	bl	8012ff4 <free>
    return inputNum;
 8004810:	68fb      	ldr	r3, [r7, #12]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3718      	adds	r7, #24
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <getOutputNum>:

int getOutputNum(message_t json){
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	463b      	mov	r3, r7
 8004822:	e883 0003 	stmia.w	r3, {r0, r1}
    struct json_value_s* root = json_parse(json.msg, json.len);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff f827 	bl	8003880 <json_parse>
 8004832:	6178      	str	r0, [r7, #20]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	613b      	str	r3, [r7, #16]
    struct json_object_element_s* frameType = object->start;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]
    int outputNum = atoi(json_value_as_number(frameType->next->value)->number);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff f840 	bl	80038cc <json_value_as_number>
 800484c:	4603      	mov	r3, r0
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f00e fb9f 	bl	8012f94 <atoi>
 8004856:	60b8      	str	r0, [r7, #8]
    free(root);
 8004858:	6978      	ldr	r0, [r7, #20]
 800485a:	f00e fbcb 	bl	8012ff4 <free>
    return outputNum;
 800485e:	68bb      	ldr	r3, [r7, #8]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <getOutputState>:
void getOutputState(message_t json, char* outputStatePtr){
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	f107 0308 	add.w	r3, r7, #8
 8004872:	e883 0003 	stmia.w	r3, {r0, r1}
 8004876:	607a      	str	r2, [r7, #4]
    struct json_value_s* root = json_parse(json.msg, json.len);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fffe 	bl	8003880 <json_parse>
 8004884:	61f8      	str	r0, [r7, #28]
    struct json_object_s* object = (struct json_object_s*)root->payload;
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	61bb      	str	r3, [r7, #24]
    struct json_object_element_s* frameType = object->start;
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	617b      	str	r3, [r7, #20]
    const char * outputState = json_value_as_string(frameType->next->next->value)->string;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff f804 	bl	80038a8 <json_value_as_string>
 80048a0:	4603      	mov	r3, r0
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	613b      	str	r3, [r7, #16]
    strcpy(outputStatePtr, outputState);
 80048a6:	6939      	ldr	r1, [r7, #16]
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f00f f985 	bl	8013bb8 <strcpy>
    free(root);
 80048ae:	69f8      	ldr	r0, [r7, #28]
 80048b0:	f00e fba0 	bl	8012ff4 <free>
 80048b4:	bf00      	nop
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <sendCaliperMeasure>:
    msg2send.msg = str2send;
    msg2send.len = len;
    return msg2send;
};

message_t sendCaliperMeasure(char * str2send, digimatic_measure_t measure, caliper_number caliperNumber){
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b08b      	sub	sp, #44	; 0x2c
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	4639      	mov	r1, r7
 80048c8:	e881 000c 	stmia.w	r1, {r2, r3}
    int len = -1;
 80048cc:	f04f 33ff 	mov.w	r3, #4294967295
 80048d0:	61fb      	str	r3, [r7, #28]
    if(measure.unit){
 80048d2:	793b      	ldrb	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d010      	beq.n	80048fa <sendCaliperMeasure+0x3e>
        len = sprintf(str2send,"{\"frameType\": \"SEND_CALIPER_MEASURE\",\"caliperNumber\": %d,\"data\": %.5f,\"unit\": \"inch\"}",caliperNumber, measure.number);
 80048d8:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fe42 	bl	8000568 <__aeabi_f2d>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	e9cd 2300 	strd	r2, r3, [sp]
 80048ec:	4622      	mov	r2, r4
 80048ee:	4913      	ldr	r1, [pc, #76]	; (800493c <sendCaliperMeasure+0x80>)
 80048f0:	68b8      	ldr	r0, [r7, #8]
 80048f2:	f00f f941 	bl	8013b78 <siprintf>
 80048f6:	61f8      	str	r0, [r7, #28]
 80048f8:	e00f      	b.n	800491a <sendCaliperMeasure+0x5e>
    } else {
        len = sprintf(str2send,"{\"frameType\": \"SEND_CALIPER_MEASURE\",\"caliperNumber\": %d,\"data\": %.5f,\"unit\": \"mm\"}",caliperNumber, measure.number);
 80048fa:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fb fe31 	bl	8000568 <__aeabi_f2d>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e9cd 2300 	strd	r2, r3, [sp]
 800490e:	4622      	mov	r2, r4
 8004910:	490b      	ldr	r1, [pc, #44]	; (8004940 <sendCaliperMeasure+0x84>)
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f00f f930 	bl	8013b78 <siprintf>
 8004918:	61f8      	str	r0, [r7, #28]
    }
    message_t msg2send;
    msg2send.msg = str2send;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	617b      	str	r3, [r7, #20]
    msg2send.len = len;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	61bb      	str	r3, [r7, #24]
    return msg2send;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	461a      	mov	r2, r3
 8004926:	f107 0314 	add.w	r3, r7, #20
 800492a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800492e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	3724      	adds	r7, #36	; 0x24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd90      	pop	{r4, r7, pc}
 800493a:	bf00      	nop
 800493c:	08017020 	.word	0x08017020
 8004940:	08017078 	.word	0x08017078

08004944 <sendCaliperWarning>:

message_t sendCaliperWarning(char * str2send, caliper_number caliperNumber){
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	71fb      	strb	r3, [r7, #7]
    int len = sprintf(str2send,"{\"frameType\": \"WARNING_RETRY_CALIPER\" ,\"caliperNumber\": %d}", caliperNumber);
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	461a      	mov	r2, r3
 8004956:	490a      	ldr	r1, [pc, #40]	; (8004980 <sendCaliperWarning+0x3c>)
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	f00f f90d 	bl	8013b78 <siprintf>
 800495e:	61f8      	str	r0, [r7, #28]
    message_t msg2send;
    msg2send.msg = str2send;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	617b      	str	r3, [r7, #20]
    msg2send.len = len;
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	61bb      	str	r3, [r7, #24]
    return msg2send;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	461a      	mov	r2, r3
 800496c:	f107 0314 	add.w	r3, r7, #20
 8004970:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004974:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	080170cc 	.word	0x080170cc

08004984 <sendIncrementPieceCount>:

message_t sendIncrementPieceCount(char * str2send){
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
    int len = sprintf(str2send,"{\"frameType\": \"INCREMENT_PIECE_COUNTER\"}");
 800498e:	490a      	ldr	r1, [pc, #40]	; (80049b8 <sendIncrementPieceCount+0x34>)
 8004990:	6838      	ldr	r0, [r7, #0]
 8004992:	f00f f8f1 	bl	8013b78 <siprintf>
 8004996:	6178      	str	r0, [r7, #20]
    message_t msg2send;
    msg2send.msg = str2send;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	60fb      	str	r3, [r7, #12]
    msg2send.len = len;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	613b      	str	r3, [r7, #16]
    return msg2send;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80049ac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	08017108 	.word	0x08017108

080049bc <sendAnalogInMessage>:

message_t sendAnalogInMessage(char * str2send, int inputNum, float receivedData, bool isValid){
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af02      	add	r7, sp, #8
 80049c2:	6178      	str	r0, [r7, #20]
 80049c4:	6139      	str	r1, [r7, #16]
 80049c6:	60fa      	str	r2, [r7, #12]
 80049c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80049cc:	71fb      	strb	r3, [r7, #7]
    int len = -1;
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
    if(isValid){ // si es valido
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00d      	beq.n	80049f6 <sendAnalogInMessage+0x3a>
        len = sprintf(str2send,"{\"frameType\": \"MEASURED_ANALOG_IN\",\"inputNumber\": %d, \"analogData\": %.5f}", inputNum, receivedData);
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f7fb fdc4 	bl	8000568 <__aeabi_f2d>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	e9cd 2300 	strd	r2, r3, [sp]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	490e      	ldr	r1, [pc, #56]	; (8004a24 <sendAnalogInMessage+0x68>)
 80049ec:	6938      	ldr	r0, [r7, #16]
 80049ee:	f00f f8c3 	bl	8013b78 <siprintf>
 80049f2:	6278      	str	r0, [r7, #36]	; 0x24
 80049f4:	e005      	b.n	8004a02 <sendAnalogInMessage+0x46>
    }else{
        len = sprintf(str2send,"{\"frameType\": \"RETRY_ANALOG_IN\",\"inputNumber\": %d}", inputNum);
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	490b      	ldr	r1, [pc, #44]	; (8004a28 <sendAnalogInMessage+0x6c>)
 80049fa:	6938      	ldr	r0, [r7, #16]
 80049fc:	f00f f8bc 	bl	8013b78 <siprintf>
 8004a00:	6278      	str	r0, [r7, #36]	; 0x24
    }
    message_t msg2send;
    msg2send.msg = str2send;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	61fb      	str	r3, [r7, #28]
    msg2send.len = len;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	623b      	str	r3, [r7, #32]
    return msg2send;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f107 031c 	add.w	r3, r7, #28
 8004a12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a16:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8004a1a:	6978      	ldr	r0, [r7, #20]
 8004a1c:	3728      	adds	r7, #40	; 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	08017134 	.word	0x08017134
 8004a28:	08017180 	.word	0x08017180

08004a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <HAL_Init+0x40>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_Init+0x40>)
 8004a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_Init+0x40>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_Init+0x40>)
 8004a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_Init+0x40>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_Init+0x40>)
 8004a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a54:	2003      	movs	r0, #3
 8004a56:	f000 f94f 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f000 f808 	bl	8004a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a60:	f7ff fa02 	bl	8003e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023c00 	.word	0x40023c00

08004a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_InitTick+0x54>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <HAL_InitTick+0x58>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f967 	bl	8004d62 <HAL_SYSTICK_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e00e      	b.n	8004abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b0f      	cmp	r3, #15
 8004aa2:	d80a      	bhi.n	8004aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	f000 f92f 	bl	8004d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ab0:	4a06      	ldr	r2, [pc, #24]	; (8004acc <HAL_InitTick+0x5c>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000020 	.word	0x20000020
 8004ac8:	20000048 	.word	0x20000048
 8004acc:	20000044 	.word	0x20000044

08004ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_IncTick+0x20>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_IncTick+0x24>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a04      	ldr	r2, [pc, #16]	; (8004af4 <HAL_IncTick+0x24>)
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000048 	.word	0x20000048
 8004af4:	200008a4 	.word	0x200008a4

08004af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return uwTick;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_GetTick+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	200008a4 	.word	0x200008a4

08004b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b18:	f7ff ffee 	bl	8004af8 <HAL_GetTick>
 8004b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d005      	beq.n	8004b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_Delay+0x44>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b36:	bf00      	nop
 8004b38:	f7ff ffde 	bl	8004af8 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d8f7      	bhi.n	8004b38 <HAL_Delay+0x28>
  {
  }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000048 	.word	0x20000048

08004b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	60d3      	str	r3, [r2, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	; (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	; (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff8e 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff29 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d20:	f7ff ff3e 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f7ff ff8e 	bl	8004c4c <NVIC_EncodePriority>
 8004d30:	4602      	mov	r2, r0
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff5d 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff31 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ffa2 	bl	8004cb4 <SysTick_Config>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d004      	beq.n	8004d98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e00c      	b.n	8004db2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004dd0:	4baa      	ldr	r3, [pc, #680]	; (800507c <HAL_ETH_Init+0x2bc>)
 8004dd2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e183      	b.n	80050ee <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f003 fd14 	bl	8008828 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e00:	2300      	movs	r3, #0
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	4b9e      	ldr	r3, [pc, #632]	; (8005080 <HAL_ETH_Init+0x2c0>)
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	4a9d      	ldr	r2, [pc, #628]	; (8005080 <HAL_ETH_Init+0x2c0>)
 8004e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e0e:	6453      	str	r3, [r2, #68]	; 0x44
 8004e10:	4b9b      	ldr	r3, [pc, #620]	; (8005080 <HAL_ETH_Init+0x2c0>)
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004e1c:	4b99      	ldr	r3, [pc, #612]	; (8005084 <HAL_ETH_Init+0x2c4>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a98      	ldr	r2, [pc, #608]	; (8005084 <HAL_ETH_Init+0x2c4>)
 8004e22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e26:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004e28:	4b96      	ldr	r3, [pc, #600]	; (8005084 <HAL_ETH_Init+0x2c4>)
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	4994      	ldr	r1, [pc, #592]	; (8005084 <HAL_ETH_Init+0x2c4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e4e:	f7ff fe53 	bl	8004af8 <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004e54:	e011      	b.n	8004e7a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004e56:	f7ff fe4f 	bl	8004af8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e64:	d909      	bls.n	8004e7a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2203      	movs	r2, #3
 8004e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e139      	b.n	80050ee <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e4      	bne.n	8004e56 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f023 031c 	bic.w	r3, r3, #28
 8004e9a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e9c:	f001 ff18 	bl	8006cd0 <HAL_RCC_GetHCLKFreq>
 8004ea0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4a78      	ldr	r2, [pc, #480]	; (8005088 <HAL_ETH_Init+0x2c8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d908      	bls.n	8004ebc <HAL_ETH_Init+0xfc>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	4a77      	ldr	r2, [pc, #476]	; (800508c <HAL_ETH_Init+0x2cc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d804      	bhi.n	8004ebc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f043 0308 	orr.w	r3, r3, #8
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	e027      	b.n	8004f0c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	4a73      	ldr	r2, [pc, #460]	; (800508c <HAL_ETH_Init+0x2cc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d908      	bls.n	8004ed6 <HAL_ETH_Init+0x116>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4a6d      	ldr	r2, [pc, #436]	; (800507c <HAL_ETH_Init+0x2bc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d204      	bcs.n	8004ed6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f043 030c 	orr.w	r3, r3, #12
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e01a      	b.n	8004f0c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	4a68      	ldr	r2, [pc, #416]	; (800507c <HAL_ETH_Init+0x2bc>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d303      	bcc.n	8004ee6 <HAL_ETH_Init+0x126>
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	4a6b      	ldr	r2, [pc, #428]	; (8005090 <HAL_ETH_Init+0x2d0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d911      	bls.n	8004f0a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	4a69      	ldr	r2, [pc, #420]	; (8005090 <HAL_ETH_Init+0x2d0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d908      	bls.n	8004f00 <HAL_ETH_Init+0x140>
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	4a68      	ldr	r2, [pc, #416]	; (8005094 <HAL_ETH_Init+0x2d4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d804      	bhi.n	8004f00 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f043 0304 	orr.w	r3, r3, #4
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e005      	b.n	8004f0c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f043 0310 	orr.w	r3, r3, #16
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	e000      	b.n	8004f0c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004f0a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fb98 	bl	8005650 <HAL_ETH_WritePHYRegister>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004f2a:	6939      	ldr	r1, [r7, #16]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fd4d 	bl	80059cc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e0d7      	b.n	80050ee <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004f3e:	20ff      	movs	r0, #255	; 0xff
 8004f40:	f7ff fde6 	bl	8004b10 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80a5 	beq.w	8005098 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4e:	f7ff fdd3 	bl	8004af8 <HAL_GetTick>
 8004f52:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004f54:	f107 030c 	add.w	r3, r7, #12
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fb0f 	bl	8005580 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004f62:	f7ff fdc9 	bl	8004af8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d90f      	bls.n	8004f94 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004f78:	6939      	ldr	r1, [r7, #16]
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fd26 	bl	80059cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e0ac      	b.n	80050ee <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0da      	beq.n	8004f54 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004f9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fb53 	bl	8005650 <HAL_ETH_WritePHYRegister>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004fb4:	6939      	ldr	r1, [r7, #16]
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fd08 	bl	80059cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e092      	b.n	80050ee <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7ff fd96 	bl	8004af8 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004fce:	f107 030c 	add.w	r3, r7, #12
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fad2 	bl	8005580 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004fdc:	f7ff fd8c 	bl	8004af8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d90f      	bls.n	800500e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004ff2:	6939      	ldr	r1, [r7, #16]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fce9 	bl	80059cc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e06f      	b.n	80050ee <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0da      	beq.n	8004fce <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	461a      	mov	r2, r3
 800501e:	211f      	movs	r1, #31
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 faad 	bl	8005580 <HAL_ETH_ReadPHYRegister>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005030:	6939      	ldr	r1, [r7, #16]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fcca 	bl	80059cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8005040:	2301      	movs	r3, #1
 8005042:	e054      	b.n	80050ee <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d004      	beq.n	8005058 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	e002      	b.n	800505e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	e035      	b.n	80050dc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	e030      	b.n	80050dc <HAL_ETH_Init+0x31c>
 800507a:	bf00      	nop
 800507c:	03938700 	.word	0x03938700
 8005080:	40023800 	.word	0x40023800
 8005084:	40013800 	.word	0x40013800
 8005088:	01312cff 	.word	0x01312cff
 800508c:	02160ebf 	.word	0x02160ebf
 8005090:	05f5e0ff 	.word	0x05f5e0ff
 8005094:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	2100      	movs	r1, #0
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 facd 	bl	8005650 <HAL_ETH_WritePHYRegister>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00b      	beq.n	80050d4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80050c0:	6939      	ldr	r1, [r7, #16]
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fc82 	bl	80059cc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e00c      	b.n	80050ee <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80050d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80050d8:	f7ff fd1a 	bl	8004b10 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80050dc:	6939      	ldr	r1, [r7, #16]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fc74 	bl	80059cc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_ETH_DMATxDescListInit+0x20>
 8005114:	2302      	movs	r3, #2
 8005116:	e052      	b.n	80051be <HAL_ETH_DMATxDescListInit+0xc6>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e030      	b.n	8005196 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	015b      	lsls	r3, r3, #5
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	4413      	add	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005144:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	4413      	add	r3, r2
 8005154:	461a      	mov	r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	3b01      	subs	r3, #1
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	429a      	cmp	r2, r3
 8005176:	d208      	bcs.n	800518a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	015b      	lsls	r3, r3, #5
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4413      	add	r3, r2
 8005182:	461a      	mov	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	60da      	str	r2, [r3, #12]
 8005188:	e002      	b.n	8005190 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3301      	adds	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d3ca      	bcc.n	8005134 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a8:	3310      	adds	r3, #16
 80051aa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_ETH_DMARxDescListInit+0x20>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e056      	b.n	8005298 <HAL_ETH_DMARxDescListInit+0xce>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e034      	b.n	8005270 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	015b      	lsls	r3, r3, #5
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4413      	add	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005216:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800521e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	4413      	add	r3, r2
 800522e:	461a      	mov	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	3b01      	subs	r3, #1
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	429a      	cmp	r2, r3
 8005250:	d208      	bcs.n	8005264 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	3301      	adds	r3, #1
 8005256:	015b      	lsls	r3, r3, #5
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	4413      	add	r3, r2
 800525c:	461a      	mov	r2, r3
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	60da      	str	r2, [r3, #12]
 8005262:	e002      	b.n	800526a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	3301      	adds	r3, #1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3c6      	bcc.n	8005206 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005282:	330c      	adds	r3, #12
 8005284:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_ETH_TransmitFrame+0x24>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e0cd      	b.n	8005464 <HAL_ETH_TransmitFrame+0x1c0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80052ee:	2301      	movs	r3, #1
 80052f0:	e0b8      	b.n	8005464 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da09      	bge.n	8005310 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2212      	movs	r2, #18
 8005300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0a9      	b.n	8005464 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005316:	4293      	cmp	r3, r2
 8005318:	d915      	bls.n	8005346 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	4a54      	ldr	r2, [pc, #336]	; (8005470 <HAL_ETH_TransmitFrame+0x1cc>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	0a9b      	lsrs	r3, r3, #10
 8005324:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4b51      	ldr	r3, [pc, #324]	; (8005470 <HAL_ETH_TransmitFrame+0x1cc>)
 800532a:	fba3 1302 	umull	r1, r3, r3, r2
 800532e:	0a9b      	lsrs	r3, r3, #10
 8005330:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3301      	adds	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e001      	b.n	800534a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8005346:	2301      	movs	r3, #1
 8005348:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d11c      	bne.n	800538a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800535e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800536a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800537a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	461a      	mov	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
 8005388:	e04b      	b.n	8005422 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e044      	b.n	800541a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800539e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80053b4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80053be:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d116      	bne.n	80053f8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80053d8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4a25      	ldr	r2, [pc, #148]	; (8005474 <HAL_ETH_TransmitFrame+0x1d0>)
 80053de:	fb02 f203 	mul.w	r2, r2, r3
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80053ea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80053f6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005406:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	3301      	adds	r3, #1
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	429a      	cmp	r2, r3
 8005420:	d3b6      	bcc.n	8005390 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	3314      	adds	r3, #20
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00d      	beq.n	8005452 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543e:	3314      	adds	r3, #20
 8005440:	2204      	movs	r2, #4
 8005442:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800544c:	3304      	adds	r3, #4
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	ac02b00b 	.word	0xac02b00b
 8005474:	fffffa0c 	.word	0xfffffa0c

08005478 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_ETH_GetReceivedFrame+0x1a>
 800548e:	2302      	movs	r3, #2
 8005490:	e070      	b.n	8005574 <HAL_ETH_GetReceivedFrame+0xfc>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	db5a      	blt.n	8005562 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d030      	beq.n	800551c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d103      	bne.n	80054d4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80054e8:	3b04      	subs	r3, #4
 80054ea:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	461a      	mov	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e02b      	b.n	8005574 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	629a      	str	r2, [r3, #40]	; 0x28
 800554a:	e00a      	b.n	8005562 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	461a      	mov	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	460b      	mov	r3, r1
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b82      	cmp	r3, #130	; 0x82
 80055a0:	d101      	bne.n	80055a6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
 80055a4:	e050      	b.n	8005648 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2282      	movs	r2, #130	; 0x82
 80055aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f003 031c 	and.w	r3, r3, #28
 80055bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8a1b      	ldrh	r3, [r3, #16]
 80055c2:	02db      	lsls	r3, r3, #11
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80055cc:	897b      	ldrh	r3, [r7, #10]
 80055ce:	019b      	lsls	r3, r3, #6
 80055d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f023 0302 	bic.w	r3, r3, #2
 80055e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80055f2:	f7ff fa81 	bl	8004af8 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80055f8:	e015      	b.n	8005626 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80055fa:	f7ff fa7d 	bl	8004af8 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005608:	d309      	bcc.n	800561e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e014      	b.n	8005648 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e4      	bne.n	80055fa <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	b29b      	uxth	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	460b      	mov	r3, r1
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b42      	cmp	r3, #66	; 0x42
 8005670:	d101      	bne.n	8005676 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
 8005674:	e04e      	b.n	8005714 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2242      	movs	r2, #66	; 0x42
 800567a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 031c 	and.w	r3, r3, #28
 800568c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8a1b      	ldrh	r3, [r3, #16]
 8005692:	02db      	lsls	r3, r3, #11
 8005694:	b29b      	uxth	r3, r3
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800569c:	897b      	ldrh	r3, [r7, #10]
 800569e:	019b      	lsls	r3, r3, #6
 80056a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f043 0301 	orr.w	r3, r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80056cc:	f7ff fa14 	bl	8004af8 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80056d2:	e015      	b.n	8005700 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80056d4:	f7ff fa10 	bl	8004af8 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e2:	d309      	bcc.n	80056f8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e00d      	b.n	8005714 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1e4      	bne.n	80056d4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_ETH_Start+0x16>
 800572e:	2302      	movs	r3, #2
 8005730:	e01f      	b.n	8005772 <HAL_ETH_Start+0x56>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb44 	bl	8005dd0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb7b 	bl	8005e44 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fc12 	bl	8005f78 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fbaf 	bl	8005eb8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fbdc 	bl	8005f18 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_ETH_Stop+0x16>
 800578c:	2302      	movs	r3, #2
 800578e:	e01f      	b.n	80057d0 <HAL_ETH_Stop+0x56>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fba1 	bl	8005ee8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fbce 	bl	8005f48 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fb66 	bl	8005e7e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fbe0 	bl	8005f78 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fb26 	bl	8005e0a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_ETH_ConfigMAC+0x1c>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e0e4      	b.n	80059be <HAL_ETH_ConfigMAC+0x1e6>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80b1 	beq.w	800596e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4b6c      	ldr	r3, [pc, #432]	; (80059c8 <HAL_ETH_ConfigMAC+0x1f0>)
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005824:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800582a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005830:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005836:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800583c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8005842:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005848:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800584e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8005854:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800585a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8005860:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8005866:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800587e:	2001      	movs	r0, #1
 8005880:	f7ff f946 	bl	8004b10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005894:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800589a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80058a0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80058a6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80058ac:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80058b2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80058be:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80058c0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80058ca:	2001      	movs	r0, #1
 80058cc:	f7ff f920 	bl	8004b10 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058e0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058ea:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80058fa:	4013      	ands	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005908:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800590e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005914:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800591a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005920:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005938:	2001      	movs	r0, #1
 800593a:	f7ff f8e9 	bl	8004b10 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800595e:	2001      	movs	r0, #1
 8005960:	f7ff f8d6 	bl	8004b10 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	61da      	str	r2, [r3, #28]
 800596c:	e01e      	b.n	80059ac <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800597c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800599e:	2001      	movs	r0, #1
 80059a0:	f7ff f8b6 	bl	8004b10 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	ff20810f 	.word	0xff20810f

080059cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b0b0      	sub	sp, #192	; 0xc0
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80059fa:	2300      	movs	r3, #0
 80059fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a16:	663b      	str	r3, [r7, #96]	; 0x60
 8005a18:	e001      	b.n	8005a1e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a22:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005a54:	2300      	movs	r3, #0
 8005a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005aa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aa4:	4bac      	ldr	r3, [pc, #688]	; (8005d58 <ETH_MACDMAConfig+0x38c>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005ab0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8005ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005ab4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005ab8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005abe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005ac0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8005ac2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005ac6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005acc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005ad0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8005ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005ad4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005ad8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005adc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005ae0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005ae2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005af4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7ff f805 	bl	8004b10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b0e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005b10:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005b14:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005b16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005b18:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005b1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005b1e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005b24:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005b2a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005b30:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005b34:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005b3c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005b3e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	f7fe ffe0 	bl	8004b10 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b58:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b62:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005b6c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005b78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b7c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005b80:	4013      	ands	r3, r2
 8005b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b8a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005b90:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005b92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005b96:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005b9c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005ba2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005ba8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005baa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bbc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7fe ffa1 	bl	8004b10 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bd6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005bd8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005bdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f7fe ff8c 	bl	8004b10 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c00:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c0a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c14:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005c26:	2304      	movs	r3, #4
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005c30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c40:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c56:	3318      	adds	r3, #24
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c62:	4b3e      	ldr	r3, [pc, #248]	; (8005d5c <ETH_MACDMAConfig+0x390>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005c6a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005c6c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005c6e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005c70:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005c72:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005c74:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005c76:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005c78:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005c7a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005c7c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005c7e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005c80:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005c82:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005c86:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005c8a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005c8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9e:	3318      	adds	r3, #24
 8005ca0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ca4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cae:	3318      	adds	r3, #24
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	f7fe ff2a 	bl	8004b10 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005cca:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005cd0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005cd4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005cd8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005cdc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005ce2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005ce6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d04:	2001      	movs	r0, #1
 8005d06:	f7fe ff03 	bl	8004b10 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005d16:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d10f      	bne.n	8005d40 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d28:	331c      	adds	r3, #28
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3c:	331c      	adds	r3, #28
 8005d3e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	461a      	mov	r2, r3
 8005d46:	2100      	movs	r1, #0
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f809 	bl	8005d60 <ETH_MACAddressConfig>
}
 8005d4e:	bf00      	nop
 8005d50:	37c0      	adds	r7, #192	; 0xc0
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	ff20810f 	.word	0xff20810f
 8005d5c:	f8de3f23 	.word	0xf8de3f23

08005d60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3305      	adds	r3, #5
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	3204      	adds	r2, #4
 8005d78:	7812      	ldrb	r2, [r2, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <ETH_MACAddressConfig+0x68>)
 8005d82:	4413      	add	r3, r2
 8005d84:	461a      	mov	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3303      	adds	r3, #3
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	061a      	lsls	r2, r3, #24
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3302      	adds	r3, #2
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	4313      	orrs	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <ETH_MACAddressConfig+0x6c>)
 8005db2:	4413      	add	r3, r2
 8005db4:	461a      	mov	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	6013      	str	r3, [r2, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	40028040 	.word	0x40028040
 8005dcc:	40028044 	.word	0x40028044

08005dd0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0208 	orr.w	r2, r2, #8
 8005dea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005df4:	2001      	movs	r0, #1
 8005df6:	f000 f8e9 	bl	8005fcc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0208 	bic.w	r2, r2, #8
 8005e24:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f000 f8cc 	bl	8005fcc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0204 	orr.w	r2, r2, #4
 8005e5e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005e68:	2001      	movs	r0, #1
 8005e6a:	f000 f8af 	bl	8005fcc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	601a      	str	r2, [r3, #0]
}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0204 	bic.w	r2, r2, #4
 8005e98:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	f000 f892 	bl	8005fcc <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	601a      	str	r2, [r3, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec8:	3318      	adds	r3, #24
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed8:	3318      	adds	r3, #24
 8005eda:	601a      	str	r2, [r3, #0]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ef8:	3318      	adds	r3, #24
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f08:	3318      	adds	r3, #24
 8005f0a:	601a      	str	r2, [r3, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	3318      	adds	r3, #24
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0202 	orr.w	r2, r2, #2
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	3318      	adds	r3, #24
 8005f3a:	601a      	str	r2, [r3, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f58:	3318      	adds	r3, #24
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0202 	bic.w	r2, r2, #2
 8005f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f68:	3318      	adds	r3, #24
 8005f6a:	601a      	str	r2, [r3, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8c:	3318      	adds	r3, #24
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa8:	3318      	adds	r3, #24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005fae:	2001      	movs	r0, #1
 8005fb0:	f000 f80c 	bl	8005fcc <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	601a      	str	r2, [r3, #0]
}
 8005fc2:	bf00      	nop
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <ETH_Delay+0x38>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a0b      	ldr	r2, [pc, #44]	; (8006008 <ETH_Delay+0x3c>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	0a5b      	lsrs	r3, r3, #9
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005fe8:	bf00      	nop
  } 
  while (Delay --);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	60fa      	str	r2, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f9      	bne.n	8005fe8 <ETH_Delay+0x1c>
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000020 	.word	0x20000020
 8006008:	10624dd3 	.word	0x10624dd3

0800600c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800600c:	b480      	push	{r7}
 800600e:	b089      	sub	sp, #36	; 0x24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	e16b      	b.n	8006300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006028:	2201      	movs	r2, #1
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	429a      	cmp	r2, r3
 8006042:	f040 815a 	bne.w	80062fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d005      	beq.n	800605e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800605a:	2b02      	cmp	r3, #2
 800605c:	d130      	bne.n	80060c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	2203      	movs	r2, #3
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4313      	orrs	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006094:	2201      	movs	r2, #1
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	091b      	lsrs	r3, r3, #4
 80060aa:	f003 0201 	and.w	r2, r3, #1
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d017      	beq.n	80060fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	2203      	movs	r2, #3
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4013      	ands	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d123      	bne.n	8006150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	08da      	lsrs	r2, r3, #3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3208      	adds	r2, #8
 8006110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	220f      	movs	r2, #15
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4013      	ands	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	08da      	lsrs	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3208      	adds	r2, #8
 800614a:	69b9      	ldr	r1, [r7, #24]
 800614c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	2203      	movs	r2, #3
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	43db      	mvns	r3, r3
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	4013      	ands	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 0203 	and.w	r2, r3, #3
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4313      	orrs	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80b4 	beq.w	80062fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	4b60      	ldr	r3, [pc, #384]	; (8006318 <HAL_GPIO_Init+0x30c>)
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	4a5f      	ldr	r2, [pc, #380]	; (8006318 <HAL_GPIO_Init+0x30c>)
 800619c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061a0:	6453      	str	r3, [r2, #68]	; 0x44
 80061a2:	4b5d      	ldr	r3, [pc, #372]	; (8006318 <HAL_GPIO_Init+0x30c>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ae:	4a5b      	ldr	r2, [pc, #364]	; (800631c <HAL_GPIO_Init+0x310>)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	3302      	adds	r3, #2
 80061b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	220f      	movs	r2, #15
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a52      	ldr	r2, [pc, #328]	; (8006320 <HAL_GPIO_Init+0x314>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02b      	beq.n	8006232 <HAL_GPIO_Init+0x226>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a51      	ldr	r2, [pc, #324]	; (8006324 <HAL_GPIO_Init+0x318>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d025      	beq.n	800622e <HAL_GPIO_Init+0x222>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a50      	ldr	r2, [pc, #320]	; (8006328 <HAL_GPIO_Init+0x31c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <HAL_GPIO_Init+0x21e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a4f      	ldr	r2, [pc, #316]	; (800632c <HAL_GPIO_Init+0x320>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d019      	beq.n	8006226 <HAL_GPIO_Init+0x21a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a4e      	ldr	r2, [pc, #312]	; (8006330 <HAL_GPIO_Init+0x324>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_GPIO_Init+0x216>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a4d      	ldr	r2, [pc, #308]	; (8006334 <HAL_GPIO_Init+0x328>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00d      	beq.n	800621e <HAL_GPIO_Init+0x212>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a4c      	ldr	r2, [pc, #304]	; (8006338 <HAL_GPIO_Init+0x32c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <HAL_GPIO_Init+0x20e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a4b      	ldr	r2, [pc, #300]	; (800633c <HAL_GPIO_Init+0x330>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d101      	bne.n	8006216 <HAL_GPIO_Init+0x20a>
 8006212:	2307      	movs	r3, #7
 8006214:	e00e      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006216:	2308      	movs	r3, #8
 8006218:	e00c      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800621a:	2306      	movs	r3, #6
 800621c:	e00a      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800621e:	2305      	movs	r3, #5
 8006220:	e008      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006222:	2304      	movs	r3, #4
 8006224:	e006      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006226:	2303      	movs	r3, #3
 8006228:	e004      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800622a:	2302      	movs	r3, #2
 800622c:	e002      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006232:	2300      	movs	r3, #0
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	f002 0203 	and.w	r2, r2, #3
 800623a:	0092      	lsls	r2, r2, #2
 800623c:	4093      	lsls	r3, r2
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006244:	4935      	ldr	r1, [pc, #212]	; (800631c <HAL_GPIO_Init+0x310>)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	3302      	adds	r3, #2
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006252:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <HAL_GPIO_Init+0x334>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	43db      	mvns	r3, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4013      	ands	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006276:	4a32      	ldr	r2, [pc, #200]	; (8006340 <HAL_GPIO_Init+0x334>)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800627c:	4b30      	ldr	r3, [pc, #192]	; (8006340 <HAL_GPIO_Init+0x334>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	43db      	mvns	r3, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4013      	ands	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062a0:	4a27      	ldr	r2, [pc, #156]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062a6:	4b26      	ldr	r3, [pc, #152]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	43db      	mvns	r3, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4013      	ands	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062ca:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062d0:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062f4:	4a12      	ldr	r2, [pc, #72]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	f67f ae90 	bls.w	8006028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	3724      	adds	r7, #36	; 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800
 800631c:	40013800 	.word	0x40013800
 8006320:	40020000 	.word	0x40020000
 8006324:	40020400 	.word	0x40020400
 8006328:	40020800 	.word	0x40020800
 800632c:	40020c00 	.word	0x40020c00
 8006330:	40021000 	.word	0x40021000
 8006334:	40021400 	.word	0x40021400
 8006338:	40021800 	.word	0x40021800
 800633c:	40021c00 	.word	0x40021c00
 8006340:	40013c00 	.word	0x40013c00

08006344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e001      	b.n	8006366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	807b      	strh	r3, [r7, #2]
 8006380:	4613      	mov	r3, r2
 8006382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006384:	787b      	ldrb	r3, [r7, #1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800638a:	887a      	ldrh	r2, [r7, #2]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006390:	e003      	b.n	800639a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006392:	887b      	ldrh	r3, [r7, #2]
 8006394:	041a      	lsls	r2, r3, #16
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	619a      	str	r2, [r3, #24]
}
 800639a:	bf00      	nop
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
	...

080063a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063b2:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d006      	beq.n	80063cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063be:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063c4:	88fb      	ldrh	r3, [r7, #6]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fd fcf0 	bl	8003dac <HAL_GPIO_EXTI_Callback>
  }
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40013c00 	.word	0x40013c00

080063d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e264      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d075      	beq.n	80064e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063f6:	4ba3      	ldr	r3, [pc, #652]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d00c      	beq.n	800641c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006402:	4ba0      	ldr	r3, [pc, #640]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800640a:	2b08      	cmp	r3, #8
 800640c:	d112      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800640e:	4b9d      	ldr	r3, [pc, #628]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641a:	d10b      	bne.n	8006434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800641c:	4b99      	ldr	r3, [pc, #612]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d05b      	beq.n	80064e0 <HAL_RCC_OscConfig+0x108>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d157      	bne.n	80064e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e23f      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800643c:	d106      	bne.n	800644c <HAL_RCC_OscConfig+0x74>
 800643e:	4b91      	ldr	r3, [pc, #580]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a90      	ldr	r2, [pc, #576]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e01d      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006454:	d10c      	bne.n	8006470 <HAL_RCC_OscConfig+0x98>
 8006456:	4b8b      	ldr	r3, [pc, #556]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a8a      	ldr	r2, [pc, #552]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800645c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	4b88      	ldr	r3, [pc, #544]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a87      	ldr	r2, [pc, #540]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	e00b      	b.n	8006488 <HAL_RCC_OscConfig+0xb0>
 8006470:	4b84      	ldr	r3, [pc, #528]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a83      	ldr	r2, [pc, #524]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	4b81      	ldr	r3, [pc, #516]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a80      	ldr	r2, [pc, #512]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d013      	beq.n	80064b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006490:	f7fe fb32 	bl	8004af8 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006498:	f7fe fb2e 	bl	8004af8 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b64      	cmp	r3, #100	; 0x64
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e204      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d0f0      	beq.n	8006498 <HAL_RCC_OscConfig+0xc0>
 80064b6:	e014      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fe fb1e 	bl	8004af8 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fe fb1a 	bl	8004af8 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e1f0      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d2:	4b6c      	ldr	r3, [pc, #432]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1f0      	bne.n	80064c0 <HAL_RCC_OscConfig+0xe8>
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d063      	beq.n	80065b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064ee:	4b65      	ldr	r3, [pc, #404]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fa:	4b62      	ldr	r3, [pc, #392]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006502:	2b08      	cmp	r3, #8
 8006504:	d11c      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006506:	4b5f      	ldr	r3, [pc, #380]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d116      	bne.n	8006540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006512:	4b5c      	ldr	r3, [pc, #368]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d001      	beq.n	800652a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e1c4      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	4b56      	ldr	r3, [pc, #344]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4952      	ldr	r1, [pc, #328]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800653a:	4313      	orrs	r3, r2
 800653c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653e:	e03a      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d020      	beq.n	800658a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006548:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <HAL_RCC_OscConfig+0x2b0>)
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fe fad3 	bl	8004af8 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006554:	e008      	b.n	8006568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006556:	f7fe facf 	bl	8004af8 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	2b02      	cmp	r3, #2
 8006562:	d901      	bls.n	8006568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e1a5      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006568:	4b46      	ldr	r3, [pc, #280]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d0f0      	beq.n	8006556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006574:	4b43      	ldr	r3, [pc, #268]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	4940      	ldr	r1, [pc, #256]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006584:	4313      	orrs	r3, r2
 8006586:	600b      	str	r3, [r1, #0]
 8006588:	e015      	b.n	80065b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658a:	4b3f      	ldr	r3, [pc, #252]	; (8006688 <HAL_RCC_OscConfig+0x2b0>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006590:	f7fe fab2 	bl	8004af8 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006598:	f7fe faae 	bl	8004af8 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e184      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065aa:	4b36      	ldr	r3, [pc, #216]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d030      	beq.n	8006624 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d016      	beq.n	80065f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ca:	4b30      	ldr	r3, [pc, #192]	; (800668c <HAL_RCC_OscConfig+0x2b4>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d0:	f7fe fa92 	bl	8004af8 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fe fa8e 	bl	8004af8 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e164      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ea:	4b26      	ldr	r3, [pc, #152]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 80065ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0x200>
 80065f6:	e015      	b.n	8006624 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f8:	4b24      	ldr	r3, [pc, #144]	; (800668c <HAL_RCC_OscConfig+0x2b4>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065fe:	f7fe fa7b 	bl	8004af8 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006606:	f7fe fa77 	bl	8004af8 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e14d      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800661a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80a0 	beq.w	8006772 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006636:	4b13      	ldr	r3, [pc, #76]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006642:	2300      	movs	r3, #0
 8006644:	60bb      	str	r3, [r7, #8]
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 800664c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006650:	6413      	str	r3, [r2, #64]	; 0x40
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <HAL_RCC_OscConfig+0x2ac>)
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665a:	60bb      	str	r3, [r7, #8]
 800665c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	2b00      	cmp	r3, #0
 800666c:	d121      	bne.n	80066b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a07      	ldr	r2, [pc, #28]	; (8006690 <HAL_RCC_OscConfig+0x2b8>)
 8006674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667a:	f7fe fa3d 	bl	8004af8 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006680:	e011      	b.n	80066a6 <HAL_RCC_OscConfig+0x2ce>
 8006682:	bf00      	nop
 8006684:	40023800 	.word	0x40023800
 8006688:	42470000 	.word	0x42470000
 800668c:	42470e80 	.word	0x42470e80
 8006690:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006694:	f7fe fa30 	bl	8004af8 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e106      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a6:	4b85      	ldr	r3, [pc, #532]	; (80068bc <HAL_RCC_OscConfig+0x4e4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0f0      	beq.n	8006694 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_OscConfig+0x2f0>
 80066ba:	4b81      	ldr	r3, [pc, #516]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4a80      	ldr	r2, [pc, #512]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	6713      	str	r3, [r2, #112]	; 0x70
 80066c6:	e01c      	b.n	8006702 <HAL_RCC_OscConfig+0x32a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b05      	cmp	r3, #5
 80066ce:	d10c      	bne.n	80066ea <HAL_RCC_OscConfig+0x312>
 80066d0:	4b7b      	ldr	r3, [pc, #492]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	4a7a      	ldr	r2, [pc, #488]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066d6:	f043 0304 	orr.w	r3, r3, #4
 80066da:	6713      	str	r3, [r2, #112]	; 0x70
 80066dc:	4b78      	ldr	r3, [pc, #480]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e0:	4a77      	ldr	r2, [pc, #476]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	6713      	str	r3, [r2, #112]	; 0x70
 80066e8:	e00b      	b.n	8006702 <HAL_RCC_OscConfig+0x32a>
 80066ea:	4b75      	ldr	r3, [pc, #468]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	4a74      	ldr	r2, [pc, #464]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066f0:	f023 0301 	bic.w	r3, r3, #1
 80066f4:	6713      	str	r3, [r2, #112]	; 0x70
 80066f6:	4b72      	ldr	r3, [pc, #456]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	4a71      	ldr	r2, [pc, #452]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80066fc:	f023 0304 	bic.w	r3, r3, #4
 8006700:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d015      	beq.n	8006736 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670a:	f7fe f9f5 	bl	8004af8 <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	e00a      	b.n	8006728 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fe f9f1 	bl	8004af8 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006720:	4293      	cmp	r3, r2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0c5      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006728:	4b65      	ldr	r3, [pc, #404]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 800672a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ee      	beq.n	8006712 <HAL_RCC_OscConfig+0x33a>
 8006734:	e014      	b.n	8006760 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006736:	f7fe f9df 	bl	8004af8 <HAL_GetTick>
 800673a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	e00a      	b.n	8006754 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673e:	f7fe f9db 	bl	8004af8 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	f241 3288 	movw	r2, #5000	; 0x1388
 800674c:	4293      	cmp	r3, r2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e0af      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006754:	4b5a      	ldr	r3, [pc, #360]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1ee      	bne.n	800673e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d105      	bne.n	8006772 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006766:	4b56      	ldr	r3, [pc, #344]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	4a55      	ldr	r2, [pc, #340]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 800676c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006770:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 809b 	beq.w	80068b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800677c:	4b50      	ldr	r3, [pc, #320]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b08      	cmp	r3, #8
 8006786:	d05c      	beq.n	8006842 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d141      	bne.n	8006814 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006790:	4b4c      	ldr	r3, [pc, #304]	; (80068c4 <HAL_RCC_OscConfig+0x4ec>)
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006796:	f7fe f9af 	bl	8004af8 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679c:	e008      	b.n	80067b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679e:	f7fe f9ab 	bl	8004af8 <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d901      	bls.n	80067b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e081      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b0:	4b43      	ldr	r3, [pc, #268]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1f0      	bne.n	800679e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	019b      	lsls	r3, r3, #6
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	3b01      	subs	r3, #1
 80067d6:	041b      	lsls	r3, r3, #16
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	4937      	ldr	r1, [pc, #220]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e6:	4b37      	ldr	r3, [pc, #220]	; (80068c4 <HAL_RCC_OscConfig+0x4ec>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fe f984 	bl	8004af8 <HAL_GetTick>
 80067f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f4:	f7fe f980 	bl	8004af8 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e056      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006806:	4b2e      	ldr	r3, [pc, #184]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x41c>
 8006812:	e04e      	b.n	80068b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006814:	4b2b      	ldr	r3, [pc, #172]	; (80068c4 <HAL_RCC_OscConfig+0x4ec>)
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681a:	f7fe f96d 	bl	8004af8 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006822:	f7fe f969 	bl	8004af8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e03f      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006834:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_OscConfig+0x44a>
 8006840:	e037      	b.n	80068b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e032      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_RCC_OscConfig+0x4e8>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d028      	beq.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d121      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006874:	429a      	cmp	r2, r3
 8006876:	d11a      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800687e:	4013      	ands	r3, r2
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006884:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006886:	4293      	cmp	r3, r2
 8006888:	d111      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	3b01      	subs	r3, #1
 8006898:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800689a:	429a      	cmp	r2, r3
 800689c:	d107      	bne.n	80068ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d001      	beq.n	80068b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40007000 	.word	0x40007000
 80068c0:	40023800 	.word	0x40023800
 80068c4:	42470060 	.word	0x42470060

080068c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0cc      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068dc:	4b68      	ldr	r3, [pc, #416]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0307 	and.w	r3, r3, #7
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d90c      	bls.n	8006904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ea:	4b65      	ldr	r3, [pc, #404]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b63      	ldr	r3, [pc, #396]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0b8      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800691c:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	4a58      	ldr	r2, [pc, #352]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006934:	4b53      	ldr	r3, [pc, #332]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a52      	ldr	r2, [pc, #328]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800693e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006940:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	494d      	ldr	r1, [pc, #308]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	4313      	orrs	r3, r2
 8006950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d044      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d107      	bne.n	8006976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	4b47      	ldr	r3, [pc, #284]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d119      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e07f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d003      	beq.n	8006986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006982:	2b03      	cmp	r3, #3
 8006984:	d107      	bne.n	8006996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006986:	4b3f      	ldr	r3, [pc, #252]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e06f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006996:	4b3b      	ldr	r3, [pc, #236]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e067      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069a6:	4b37      	ldr	r3, [pc, #220]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f023 0203 	bic.w	r2, r3, #3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	4934      	ldr	r1, [pc, #208]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069b8:	f7fe f89e 	bl	8004af8 <HAL_GetTick>
 80069bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069be:	e00a      	b.n	80069d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c0:	f7fe f89a 	bl	8004af8 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e04f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069d6:	4b2b      	ldr	r3, [pc, #172]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 020c 	and.w	r2, r3, #12
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d1eb      	bne.n	80069c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069e8:	4b25      	ldr	r3, [pc, #148]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d20c      	bcs.n	8006a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f6:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b20      	ldr	r3, [pc, #128]	; (8006a80 <HAL_RCC_ClockConfig+0x1b8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d001      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e032      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a1c:	4b19      	ldr	r3, [pc, #100]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4916      	ldr	r1, [pc, #88]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	490e      	ldr	r1, [pc, #56]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a4e:	f000 f889 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	490a      	ldr	r1, [pc, #40]	; (8006a88 <HAL_RCC_ClockConfig+0x1c0>)
 8006a60:	5ccb      	ldrb	r3, [r1, r3]
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <HAL_RCC_ClockConfig+0x1c4>)
 8006a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <HAL_RCC_ClockConfig+0x1c8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fd fffe 	bl	8004a70 <HAL_InitTick>

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023c00 	.word	0x40023c00
 8006a84:	40023800 	.word	0x40023800
 8006a88:	08019b94 	.word	0x08019b94
 8006a8c:	20000020 	.word	0x20000020
 8006a90:	20000044 	.word	0x20000044

08006a94 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08c      	sub	sp, #48	; 0x30
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d129      	bne.n	8006afa <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	4a2a      	ldr	r2, [pc, #168]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab6:	4b28      	ldr	r3, [pc, #160]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006acc:	2303      	movs	r3, #3
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006ad8:	f107 031c 	add.w	r3, r7, #28
 8006adc:	4619      	mov	r1, r3
 8006ade:	481f      	ldr	r0, [pc, #124]	; (8006b5c <HAL_RCC_MCOConfig+0xc8>)
 8006ae0:	f7ff fa94 	bl	800600c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006ae4:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	430b      	orrs	r3, r1
 8006af2:	4919      	ldr	r1, [pc, #100]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006af8:	e029      	b.n	8006b4e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	4b16      	ldr	r3, [pc, #88]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	4a15      	ldr	r2, [pc, #84]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006b04:	f043 0304 	orr.w	r3, r3, #4
 8006b08:	6313      	str	r3, [r2, #48]	; 0x30
 8006b0a:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006b16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b20:	2303      	movs	r3, #3
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006b2c:	f107 031c 	add.w	r3, r7, #28
 8006b30:	4619      	mov	r1, r3
 8006b32:	480b      	ldr	r0, [pc, #44]	; (8006b60 <HAL_RCC_MCOConfig+0xcc>)
 8006b34:	f7ff fa6a 	bl	800600c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006b38:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	00d9      	lsls	r1, r3, #3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	430b      	orrs	r3, r1
 8006b48:	4903      	ldr	r1, [pc, #12]	; (8006b58 <HAL_RCC_MCOConfig+0xc4>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	608b      	str	r3, [r1, #8]
}
 8006b4e:	bf00      	nop
 8006b50:	3730      	adds	r7, #48	; 0x30
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	40020000 	.word	0x40020000
 8006b60:	40020800 	.word	0x40020800

08006b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b64:	b5b0      	push	{r4, r5, r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	6079      	str	r1, [r7, #4]
 8006b6e:	2100      	movs	r1, #0
 8006b70:	60f9      	str	r1, [r7, #12]
 8006b72:	2100      	movs	r1, #0
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006b76:	2100      	movs	r1, #0
 8006b78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b7a:	4952      	ldr	r1, [pc, #328]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006b7c:	6889      	ldr	r1, [r1, #8]
 8006b7e:	f001 010c 	and.w	r1, r1, #12
 8006b82:	2908      	cmp	r1, #8
 8006b84:	d00d      	beq.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x3e>
 8006b86:	2908      	cmp	r1, #8
 8006b88:	f200 8094 	bhi.w	8006cb4 <HAL_RCC_GetSysClockFreq+0x150>
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	d002      	beq.n	8006b96 <HAL_RCC_GetSysClockFreq+0x32>
 8006b90:	2904      	cmp	r1, #4
 8006b92:	d003      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0x38>
 8006b94:	e08e      	b.n	8006cb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b96:	4b4c      	ldr	r3, [pc, #304]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006b98:	60bb      	str	r3, [r7, #8]
       break;
 8006b9a:	e08e      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b9c:	4b4b      	ldr	r3, [pc, #300]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8006b9e:	60bb      	str	r3, [r7, #8]
      break;
 8006ba0:	e08b      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ba2:	4948      	ldr	r1, [pc, #288]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006ba4:	6849      	ldr	r1, [r1, #4]
 8006ba6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006baa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bac:	4945      	ldr	r1, [pc, #276]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bae:	6849      	ldr	r1, [r1, #4]
 8006bb0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006bb4:	2900      	cmp	r1, #0
 8006bb6:	d024      	beq.n	8006c02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb8:	4942      	ldr	r1, [pc, #264]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006bba:	6849      	ldr	r1, [r1, #4]
 8006bbc:	0989      	lsrs	r1, r1, #6
 8006bbe:	4608      	mov	r0, r1
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006bc8:	f04f 0500 	mov.w	r5, #0
 8006bcc:	ea00 0204 	and.w	r2, r0, r4
 8006bd0:	ea01 0305 	and.w	r3, r1, r5
 8006bd4:	493d      	ldr	r1, [pc, #244]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8006bd6:	fb01 f003 	mul.w	r0, r1, r3
 8006bda:	2100      	movs	r1, #0
 8006bdc:	fb01 f102 	mul.w	r1, r1, r2
 8006be0:	1844      	adds	r4, r0, r1
 8006be2:	493a      	ldr	r1, [pc, #232]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x168>)
 8006be4:	fba2 0101 	umull	r0, r1, r2, r1
 8006be8:	1863      	adds	r3, r4, r1
 8006bea:	4619      	mov	r1, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	f7fa f838 	bl	8000c68 <__aeabi_uldivmod>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e04a      	b.n	8006c98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c02:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	099b      	lsrs	r3, r3, #6
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006c12:	f04f 0100 	mov.w	r1, #0
 8006c16:	ea02 0400 	and.w	r4, r2, r0
 8006c1a:	ea03 0501 	and.w	r5, r3, r1
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	f04f 0300 	mov.w	r3, #0
 8006c2a:	014b      	lsls	r3, r1, #5
 8006c2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006c30:	0142      	lsls	r2, r0, #5
 8006c32:	4610      	mov	r0, r2
 8006c34:	4619      	mov	r1, r3
 8006c36:	1b00      	subs	r0, r0, r4
 8006c38:	eb61 0105 	sbc.w	r1, r1, r5
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	018b      	lsls	r3, r1, #6
 8006c46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006c4a:	0182      	lsls	r2, r0, #6
 8006c4c:	1a12      	subs	r2, r2, r0
 8006c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f04f 0100 	mov.w	r1, #0
 8006c5a:	00d9      	lsls	r1, r3, #3
 8006c5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c60:	00d0      	lsls	r0, r2, #3
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	1912      	adds	r2, r2, r4
 8006c68:	eb45 0303 	adc.w	r3, r5, r3
 8006c6c:	f04f 0000 	mov.w	r0, #0
 8006c70:	f04f 0100 	mov.w	r1, #0
 8006c74:	0299      	lsls	r1, r3, #10
 8006c76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c7a:	0290      	lsls	r0, r2, #10
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4610      	mov	r0, r2
 8006c82:	4619      	mov	r1, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	f7f9 ffec 	bl	8000c68 <__aeabi_uldivmod>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4613      	mov	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c98:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	0c1b      	lsrs	r3, r3, #16
 8006c9e:	f003 0303 	and.w	r3, r3, #3
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb0:	60bb      	str	r3, [r7, #8]
      break;
 8006cb2:	e002      	b.n	8006cba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006cb6:	60bb      	str	r3, [r7, #8]
      break;
 8006cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cba:	68bb      	ldr	r3, [r7, #8]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	00f42400 	.word	0x00f42400
 8006ccc:	017d7840 	.word	0x017d7840

08006cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cd4:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000020 	.word	0x20000020

08006ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e07b      	b.n	8006df2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d108      	bne.n	8006d14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d0a:	d009      	beq.n	8006d20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	61da      	str	r2, [r3, #28]
 8006d12:	e005      	b.n	8006d20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fd f8bc 	bl	8003eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da4:	ea42 0103 	orr.w	r1, r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	0c1b      	lsrs	r3, r3, #16
 8006dbe:	f003 0104 	and.w	r1, r3, #4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	f003 0210 	and.w	r2, r3, #16
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	69da      	ldr	r2, [r3, #28]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006de0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b088      	sub	sp, #32
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d101      	bne.n	8006e1c <HAL_SPI_Transmit+0x22>
 8006e18:	2302      	movs	r3, #2
 8006e1a:	e126      	b.n	800706a <HAL_SPI_Transmit+0x270>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e24:	f7fd fe68 	bl	8004af8 <HAL_GetTick>
 8006e28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d002      	beq.n	8006e40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e3e:	e10b      	b.n	8007058 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Transmit+0x52>
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e50:	e102      	b.n	8007058 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2203      	movs	r2, #3
 8006e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e98:	d10f      	bne.n	8006eba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b40      	cmp	r3, #64	; 0x40
 8006ec6:	d007      	beq.n	8006ed8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee0:	d14b      	bne.n	8006f7a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_SPI_Transmit+0xf6>
 8006eea:	8afb      	ldrh	r3, [r7, #22]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d13e      	bne.n	8006f6e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef4:	881a      	ldrh	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	1c9a      	adds	r2, r3, #2
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f14:	e02b      	b.n	8006f6e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d112      	bne.n	8006f4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f28:	881a      	ldrh	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	1c9a      	adds	r2, r3, #2
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f48:	e011      	b.n	8006f6e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f4a:	f7fd fdd5 	bl	8004af8 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d803      	bhi.n	8006f62 <HAL_SPI_Transmit+0x168>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d102      	bne.n	8006f68 <HAL_SPI_Transmit+0x16e>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f6c:	e074      	b.n	8007058 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1ce      	bne.n	8006f16 <HAL_SPI_Transmit+0x11c>
 8006f78:	e04c      	b.n	8007014 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_SPI_Transmit+0x18e>
 8006f82:	8afb      	ldrh	r3, [r7, #22]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d140      	bne.n	800700a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fae:	e02c      	b.n	800700a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d113      	bne.n	8006fe6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	7812      	ldrb	r2, [r2, #0]
 8006fca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fe4:	e011      	b.n	800700a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fe6:	f7fd fd87 	bl	8004af8 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d803      	bhi.n	8006ffe <HAL_SPI_Transmit+0x204>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d102      	bne.n	8007004 <HAL_SPI_Transmit+0x20a>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d102      	bne.n	800700a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007008:	e026      	b.n	8007058 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1cd      	bne.n	8006fb0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 ff2f 	bl	8007e7c <SPI_EndRxTxTransaction>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2220      	movs	r2, #32
 8007028:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10a      	bne.n	8007048 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e000      	b.n	8007058 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007068:	7ffb      	ldrb	r3, [r7, #31]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b088      	sub	sp, #32
 8007076:	af02      	add	r7, sp, #8
 8007078:	60f8      	str	r0, [r7, #12]
 800707a:	60b9      	str	r1, [r7, #8]
 800707c:	603b      	str	r3, [r7, #0]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800708e:	d112      	bne.n	80070b6 <HAL_SPI_Receive+0x44>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10e      	bne.n	80070b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2204      	movs	r2, #4
 800709c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070a0:	88fa      	ldrh	r2, [r7, #6]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f8f1 	bl	8007294 <HAL_SPI_TransmitReceive>
 80070b2:	4603      	mov	r3, r0
 80070b4:	e0ea      	b.n	800728c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d101      	bne.n	80070c4 <HAL_SPI_Receive+0x52>
 80070c0:	2302      	movs	r3, #2
 80070c2:	e0e3      	b.n	800728c <HAL_SPI_Receive+0x21a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070cc:	f7fd fd14 	bl	8004af8 <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d002      	beq.n	80070e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80070de:	2302      	movs	r3, #2
 80070e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070e2:	e0ca      	b.n	800727a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_SPI_Receive+0x7e>
 80070ea:	88fb      	ldrh	r3, [r7, #6]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d102      	bne.n	80070f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070f4:	e0c1      	b.n	800727a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2204      	movs	r2, #4
 80070fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	88fa      	ldrh	r2, [r7, #6]
 800710e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713c:	d10f      	bne.n	800715e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800714c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800715c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007168:	2b40      	cmp	r3, #64	; 0x40
 800716a:	d007      	beq.n	800717c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800717a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d162      	bne.n	800724a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007184:	e02e      	b.n	80071e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b01      	cmp	r3, #1
 8007192:	d115      	bne.n	80071c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f103 020c 	add.w	r2, r3, #12
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071be:	e011      	b.n	80071e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c0:	f7fd fc9a 	bl	8004af8 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d803      	bhi.n	80071d8 <HAL_SPI_Receive+0x166>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d102      	bne.n	80071de <HAL_SPI_Receive+0x16c>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071e2:	e04a      	b.n	800727a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cb      	bne.n	8007186 <HAL_SPI_Receive+0x114>
 80071ee:	e031      	b.n	8007254 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d113      	bne.n	8007226 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	b292      	uxth	r2, r2
 800720a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	1c9a      	adds	r2, r3, #2
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007224:	e011      	b.n	800724a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007226:	f7fd fc67 	bl	8004af8 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d803      	bhi.n	800723e <HAL_SPI_Receive+0x1cc>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723c:	d102      	bne.n	8007244 <HAL_SPI_Receive+0x1d2>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007248:	e017      	b.n	800727a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724e:	b29b      	uxth	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1cd      	bne.n	80071f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fda9 	bl	8007db0 <SPI_EndRxTransaction>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
 8007276:	e000      	b.n	800727a <HAL_SPI_Receive+0x208>
  }

error :
 8007278:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08c      	sub	sp, #48	; 0x30
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072a2:	2301      	movs	r3, #1
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_SPI_TransmitReceive+0x26>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e18a      	b.n	80075d0 <HAL_SPI_TransmitReceive+0x33c>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072c2:	f7fd fc19 	bl	8004af8 <HAL_GetTick>
 80072c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80072d8:	887b      	ldrh	r3, [r7, #2]
 80072da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d00f      	beq.n	8007304 <HAL_SPI_TransmitReceive+0x70>
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ea:	d107      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d103      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x68>
 80072f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d003      	beq.n	8007304 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80072fc:	2302      	movs	r3, #2
 80072fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007302:	e15b      	b.n	80075bc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x82>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x82>
 8007310:	887b      	ldrh	r3, [r7, #2]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800731c:	e14e      	b.n	80075bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b04      	cmp	r3, #4
 8007328:	d003      	beq.n	8007332 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2205      	movs	r2, #5
 800732e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	887a      	ldrh	r2, [r7, #2]
 8007342:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	887a      	ldrh	r2, [r7, #2]
 8007348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	887a      	ldrh	r2, [r7, #2]
 8007354:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	887a      	ldrh	r2, [r7, #2]
 800735a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d007      	beq.n	8007386 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800738e:	d178      	bne.n	8007482 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_SPI_TransmitReceive+0x10a>
 8007398:	8b7b      	ldrh	r3, [r7, #26]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d166      	bne.n	800746c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	881a      	ldrh	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	1c9a      	adds	r2, r3, #2
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c2:	e053      	b.n	800746c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d11b      	bne.n	800740a <HAL_SPI_TransmitReceive+0x176>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d016      	beq.n	800740a <HAL_SPI_TransmitReceive+0x176>
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d113      	bne.n	800740a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	881a      	ldrh	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	1c9a      	adds	r2, r3, #2
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	d119      	bne.n	800744c <HAL_SPI_TransmitReceive+0x1b8>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d014      	beq.n	800744c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742c:	b292      	uxth	r2, r2
 800742e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007448:	2301      	movs	r3, #1
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800744c:	f7fd fb54 	bl	8004af8 <HAL_GetTick>
 8007450:	4602      	mov	r2, r0
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007458:	429a      	cmp	r2, r3
 800745a:	d807      	bhi.n	800746c <HAL_SPI_TransmitReceive+0x1d8>
 800745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007462:	d003      	beq.n	800746c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800746a:	e0a7      	b.n	80075bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1a6      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x130>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747a:	b29b      	uxth	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1a1      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x130>
 8007480:	e07c      	b.n	800757c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_SPI_TransmitReceive+0x1fc>
 800748a:	8b7b      	ldrh	r3, [r7, #26]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d16b      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	330c      	adds	r3, #12
 800749a:	7812      	ldrb	r2, [r2, #0]
 800749c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b6:	e057      	b.n	8007568 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d11c      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x26c>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x26c>
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d114      	bne.n	8007500 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	330c      	adds	r3, #12
 80074e0:	7812      	ldrb	r2, [r2, #0]
 80074e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b01      	cmp	r3, #1
 800750c:	d119      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x2ae>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d014      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800753e:	2301      	movs	r3, #1
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007542:	f7fd fad9 	bl	8004af8 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800754e:	429a      	cmp	r2, r3
 8007550:	d803      	bhi.n	800755a <HAL_SPI_TransmitReceive+0x2c6>
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d102      	bne.n	8007560 <HAL_SPI_TransmitReceive+0x2cc>
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007566:	e029      	b.n	80075bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1a2      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x224>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d19d      	bne.n	80074b8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800757c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 fc7b 	bl	8007e7c <SPI_EndRxTxTransaction>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d006      	beq.n	800759a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2220      	movs	r2, #32
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007598:	e010      	b.n	80075bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	e000      	b.n	80075bc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3730      	adds	r7, #48	; 0x30
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d110      	bne.n	8007614 <HAL_SPI_Receive_IT+0x3c>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075fa:	d10b      	bne.n	8007614 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2204      	movs	r2, #4
 8007600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f882 	bl	8007714 <HAL_SPI_TransmitReceive_IT>
 8007610:	4603      	mov	r3, r0
 8007612:	e076      	b.n	8007702 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_SPI_Receive_IT+0x4a>
 800761e:	2302      	movs	r3, #2
 8007620:	e06f      	b.n	8007702 <HAL_SPI_Receive_IT+0x12a>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	d002      	beq.n	800763c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007636:	2302      	movs	r3, #2
 8007638:	75fb      	strb	r3, [r7, #23]
    goto error;
 800763a:	e05d      	b.n	80076f8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <HAL_SPI_Receive_IT+0x70>
 8007642:	88fb      	ldrh	r3, [r7, #6]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800764c:	e054      	b.n	80076f8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2204      	movs	r2, #4
 8007652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	88fa      	ldrh	r2, [r7, #6]
 8007666:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	88fa      	ldrh	r2, [r7, #6]
 800766c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4a1e      	ldr	r2, [pc, #120]	; (800770c <HAL_SPI_Receive_IT+0x134>)
 8007692:	641a      	str	r2, [r3, #64]	; 0x40
 8007694:	e002      	b.n	800769c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <HAL_SPI_Receive_IT+0x138>)
 800769a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a4:	d10f      	bne.n	80076c6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80076d4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e0:	2b40      	cmp	r3, #64	; 0x40
 80076e2:	d008      	beq.n	80076f6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e000      	b.n	80076f8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80076f6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	08007c59 	.word	0x08007c59
 8007710:	08007c0f 	.word	0x08007c0f

08007714 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_SPI_TransmitReceive_IT+0x20>
 8007730:	2302      	movs	r3, #2
 8007732:	e075      	b.n	8007820 <HAL_SPI_TransmitReceive_IT+0x10c>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007742:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800774a:	7dbb      	ldrb	r3, [r7, #22]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d00d      	beq.n	800776c <HAL_SPI_TransmitReceive_IT+0x58>
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007756:	d106      	bne.n	8007766 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <HAL_SPI_TransmitReceive_IT+0x52>
 8007760:	7dbb      	ldrb	r3, [r7, #22]
 8007762:	2b04      	cmp	r3, #4
 8007764:	d002      	beq.n	800776c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007766:	2302      	movs	r3, #2
 8007768:	75fb      	strb	r3, [r7, #23]
    goto error;
 800776a:	e054      	b.n	8007816 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_SPI_TransmitReceive_IT+0x6a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <HAL_SPI_TransmitReceive_IT+0x6a>
 8007778:	887b      	ldrh	r3, [r7, #2]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d102      	bne.n	8007784 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007782:	e048      	b.n	8007816 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b04      	cmp	r3, #4
 800778e:	d003      	beq.n	8007798 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2205      	movs	r2, #5
 8007794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	887a      	ldrh	r2, [r7, #2]
 80077a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	887a      	ldrh	r2, [r7, #2]
 80077ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	887a      	ldrh	r2, [r7, #2]
 80077ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	887a      	ldrh	r2, [r7, #2]
 80077c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d006      	beq.n	80077d8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a17      	ldr	r2, [pc, #92]	; (800782c <HAL_SPI_TransmitReceive_IT+0x118>)
 80077ce:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4a17      	ldr	r2, [pc, #92]	; (8007830 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80077d4:	645a      	str	r2, [r3, #68]	; 0x44
 80077d6:	e005      	b.n	80077e4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	4a16      	ldr	r2, [pc, #88]	; (8007834 <HAL_SPI_TransmitReceive_IT+0x120>)
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4a15      	ldr	r2, [pc, #84]	; (8007838 <HAL_SPI_TransmitReceive_IT+0x124>)
 80077e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80077f2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d008      	beq.n	8007814 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e000      	b.n	8007816 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8007814:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007820:	4618      	mov	r0, r3
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr
 800782c:	08007b51 	.word	0x08007b51
 8007830:	08007bb1 	.word	0x08007bb1
 8007834:	08007a8d 	.word	0x08007a8d
 8007838:	08007af1 	.word	0x08007af1

0800783c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10f      	bne.n	8007880 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	099b      	lsrs	r3, r3, #6
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d004      	beq.n	8007880 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
    return;
 800787e:	e0d7      	b.n	8007a30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00a      	beq.n	80078a2 <HAL_SPI_IRQHandler+0x66>
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	09db      	lsrs	r3, r3, #7
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	4798      	blx	r3
    return;
 80078a0:	e0c6      	b.n	8007a30 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10c      	bne.n	80078c8 <HAL_SPI_IRQHandler+0x8c>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	099b      	lsrs	r3, r3, #6
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80b4 	beq.w	8007a30 <HAL_SPI_IRQHandler+0x1f4>
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80ad 	beq.w	8007a30 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	099b      	lsrs	r3, r3, #6
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d023      	beq.n	800792a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d011      	beq.n	8007912 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f043 0204 	orr.w	r2, r3, #4
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	e00b      	b.n	800792a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007912:	2300      	movs	r3, #0
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	693b      	ldr	r3, [r7, #16]
        return;
 8007928:	e082      	b.n	8007a30 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d014      	beq.n	8007960 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	f043 0201 	orr.w	r2, r3, #1
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	0a1b      	lsrs	r3, r3, #8
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00c      	beq.n	8007986 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007970:	f043 0208 	orr.w	r2, r3, #8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007978:	2300      	movs	r3, #0
 800797a:	60bb      	str	r3, [r7, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	60bb      	str	r3, [r7, #8]
 8007984:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	2b00      	cmp	r3, #0
 800798c:	d04f      	beq.n	8007a2e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800799c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <HAL_SPI_IRQHandler+0x17e>
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d034      	beq.n	8007a24 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f022 0203 	bic.w	r2, r2, #3
 80079c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d011      	beq.n	80079f6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d6:	4a18      	ldr	r2, [pc, #96]	; (8007a38 <HAL_SPI_IRQHandler+0x1fc>)
 80079d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fd f9cb 	bl	8004d7a <HAL_DMA_Abort_IT>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d016      	beq.n	8007a2c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a02:	4a0d      	ldr	r2, [pc, #52]	; (8007a38 <HAL_SPI_IRQHandler+0x1fc>)
 8007a04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fd f9b5 	bl	8004d7a <HAL_DMA_Abort_IT>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007a22:	e003      	b.n	8007a2c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f813 	bl	8007a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a2a:	e000      	b.n	8007a2e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007a2c:	bf00      	nop
    return;
 8007a2e:	bf00      	nop
  }
}
 8007a30:	3720      	adds	r7, #32
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	08007a65 	.word	0x08007a65

08007a3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff ffe6 	bl	8007a50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f103 020c 	add.w	r2, r3, #12
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	7812      	ldrb	r2, [r2, #0]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10f      	bne.n	8007ae8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ad6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa0c 	bl	8007f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	330c      	adds	r3, #12
 8007b02:	7812      	ldrb	r2, [r2, #0]
 8007b04:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10f      	bne.n	8007b48 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b36:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d102      	bne.n	8007b48 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f9dc 	bl	8007f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	b292      	uxth	r2, r2
 8007b64:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	1c9a      	adds	r2, r3, #2
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10f      	bne.n	8007ba8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b96:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f9ac 	bl	8007f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	881a      	ldrh	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc8:	1c9a      	adds	r2, r3, #2
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10f      	bne.n	8007c06 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bf4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f97d 	bl	8007f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b082      	sub	sp, #8
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f103 020c 	add.w	r2, r3, #12
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f9cc 	bl	8007fe8 <SPI_CloseRx_ISR>
  }
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	1c9a      	adds	r2, r3, #2
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d102      	bne.n	8007c96 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f9a9 	bl	8007fe8 <SPI_CloseRx_ISR>
  }
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
	...

08007ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b088      	sub	sp, #32
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	603b      	str	r3, [r7, #0]
 8007cac:	4613      	mov	r3, r2
 8007cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cb0:	f7fc ff22 	bl	8004af8 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cc0:	f7fc ff1a 	bl	8004af8 <HAL_GetTick>
 8007cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cc6:	4b39      	ldr	r3, [pc, #228]	; (8007dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	015b      	lsls	r3, r3, #5
 8007ccc:	0d1b      	lsrs	r3, r3, #20
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	fb02 f303 	mul.w	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cd6:	e054      	b.n	8007d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d050      	beq.n	8007d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ce0:	f7fc ff0a 	bl	8004af8 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d902      	bls.n	8007cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d13d      	bne.n	8007d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d0e:	d111      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d18:	d004      	beq.n	8007d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d22:	d107      	bne.n	8007d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3c:	d10f      	bne.n	8007d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d4c:	601a      	str	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e017      	b.n	8007da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689a      	ldr	r2, [r3, #8]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	bf0c      	ite	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	2300      	movne	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d19b      	bne.n	8007cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000020 	.word	0x20000020

08007db0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc4:	d111      	bne.n	8007dea <SPI_EndRxTransaction+0x3a>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dce:	d004      	beq.n	8007dda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd8:	d107      	bne.n	8007dea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007df2:	d12a      	bne.n	8007e4a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dfc:	d012      	beq.n	8007e24 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff ff49 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02d      	beq.n	8007e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e18:	f043 0220 	orr.w	r2, r3, #32
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e026      	b.n	8007e72 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff ff36 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01a      	beq.n	8007e70 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e3e:	f043 0220 	orr.w	r2, r3, #32
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e013      	b.n	8007e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2101      	movs	r1, #1
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff ff23 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e64:	f043 0220 	orr.w	r2, r3, #32
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e000      	b.n	8007e72 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
	...

08007e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af02      	add	r7, sp, #8
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e88:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <SPI_EndRxTxTransaction+0x7c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a1b      	ldr	r2, [pc, #108]	; (8007efc <SPI_EndRxTxTransaction+0x80>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	0d5b      	lsrs	r3, r3, #21
 8007e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e98:	fb02 f303 	mul.w	r3, r2, r3
 8007e9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea6:	d112      	bne.n	8007ece <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2180      	movs	r1, #128	; 0x80
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff fef4 	bl	8007ca0 <SPI_WaitFlagStateUntilTimeout>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d016      	beq.n	8007eec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec2:	f043 0220 	orr.w	r2, r3, #32
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e00f      	b.n	8007eee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee4:	2b80      	cmp	r3, #128	; 0x80
 8007ee6:	d0f2      	beq.n	8007ece <SPI_EndRxTxTransaction+0x52>
 8007ee8:	e000      	b.n	8007eec <SPI_EndRxTxTransaction+0x70>
        break;
 8007eea:	bf00      	nop
  }

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000020 	.word	0x20000020
 8007efc:	165e9f81 	.word	0x165e9f81

08007f00 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007f08:	4b35      	ldr	r3, [pc, #212]	; (8007fe0 <SPI_CloseRxTx_ISR+0xe0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a35      	ldr	r2, [pc, #212]	; (8007fe4 <SPI_CloseRxTx_ISR+0xe4>)
 8007f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f12:	0a5b      	lsrs	r3, r3, #9
 8007f14:	2264      	movs	r2, #100	; 0x64
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
 8007f1a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f1c:	f7fc fdec 	bl	8004af8 <HAL_GetTick>
 8007f20:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0220 	bic.w	r2, r2, #32
 8007f30:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3c:	f043 0220 	orr.w	r2, r3, #32
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f44:	e009      	b.n	8007f5a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0eb      	beq.n	8007f32 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	2164      	movs	r1, #100	; 0x64
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff ff8c 	bl	8007e7c <SPI_EndRxTxTransaction>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	f043 0220 	orr.w	r2, r3, #32
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10a      	bne.n	8007f94 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d115      	bne.n	8007fc8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b04      	cmp	r3, #4
 8007fa6:	d107      	bne.n	8007fb8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7fb ff43 	bl	8003e3c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007fb6:	e00e      	b.n	8007fd6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7ff fd3b 	bl	8007a3c <HAL_SPI_TxRxCpltCallback>
}
 8007fc6:	e006      	b.n	8007fd6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff fd3d 	bl	8007a50 <HAL_SPI_ErrorCallback>
}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000020 	.word	0x20000020
 8007fe4:	057619f1 	.word	0x057619f1

08007fe8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007ffe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008000:	f7fc fd7a 	bl	8004af8 <HAL_GetTick>
 8008004:	4603      	mov	r3, r0
 8008006:	461a      	mov	r2, r3
 8008008:	2164      	movs	r1, #100	; 0x64
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff fed0 	bl	8007db0 <SPI_EndRxTransaction>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801a:	f043 0220 	orr.w	r2, r3, #32
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10a      	bne.n	8008040 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fb fef3 	bl	8003e3c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008056:	e002      	b.n	800805e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff fcf9 	bl	8007a50 <HAL_SPI_ErrorCallback>
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e041      	b.n	80080fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d106      	bne.n	8008092 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fb ff63 	bl	8003f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3304      	adds	r3, #4
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f000 f9cd 	bl	8008444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	d001      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e04e      	b.n	80081ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0201 	orr.w	r2, r2, #1
 8008132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a23      	ldr	r2, [pc, #140]	; (80081c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d022      	beq.n	8008184 <HAL_TIM_Base_Start_IT+0x80>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008146:	d01d      	beq.n	8008184 <HAL_TIM_Base_Start_IT+0x80>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a1f      	ldr	r2, [pc, #124]	; (80081cc <HAL_TIM_Base_Start_IT+0xc8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d018      	beq.n	8008184 <HAL_TIM_Base_Start_IT+0x80>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a1e      	ldr	r2, [pc, #120]	; (80081d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d013      	beq.n	8008184 <HAL_TIM_Base_Start_IT+0x80>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a1c      	ldr	r2, [pc, #112]	; (80081d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00e      	beq.n	8008184 <HAL_TIM_Base_Start_IT+0x80>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a1b      	ldr	r2, [pc, #108]	; (80081d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d009      	beq.n	8008184 <HAL_TIM_Base_Start_IT+0x80>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a19      	ldr	r2, [pc, #100]	; (80081dc <HAL_TIM_Base_Start_IT+0xd8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d004      	beq.n	8008184 <HAL_TIM_Base_Start_IT+0x80>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a18      	ldr	r2, [pc, #96]	; (80081e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d111      	bne.n	80081a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b06      	cmp	r3, #6
 8008194:	d010      	beq.n	80081b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f042 0201 	orr.w	r2, r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a6:	e007      	b.n	80081b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0201 	orr.w	r2, r2, #1
 80081b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40010000 	.word	0x40010000
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800
 80081d4:	40000c00 	.word	0x40000c00
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40001800 	.word	0x40001800

080081e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d122      	bne.n	8008240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d11b      	bne.n	8008240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0202 	mvn.w	r2, #2
 8008210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	f003 0303 	and.w	r3, r3, #3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f8ee 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 800822c:	e005      	b.n	800823a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8e0 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f8f1 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0304 	and.w	r3, r3, #4
 800824a:	2b04      	cmp	r3, #4
 800824c:	d122      	bne.n	8008294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b04      	cmp	r3, #4
 800825a:	d11b      	bne.n	8008294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0204 	mvn.w	r2, #4
 8008264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f8c4 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 8008280:	e005      	b.n	800828e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f8b6 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f8c7 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d122      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d11b      	bne.n	80082e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f06f 0208 	mvn.w	r2, #8
 80082b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2204      	movs	r2, #4
 80082be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f89a 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 80082d4:	e005      	b.n	80082e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f88c 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f89d 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	d122      	bne.n	800833c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b10      	cmp	r3, #16
 8008302:	d11b      	bne.n	800833c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0210 	mvn.w	r2, #16
 800830c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2208      	movs	r2, #8
 8008312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f870 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 8008328:	e005      	b.n	8008336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f862 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f873 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b01      	cmp	r3, #1
 8008348:	d10e      	bne.n	8008368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b01      	cmp	r3, #1
 8008356:	d107      	bne.n	8008368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f06f 0201 	mvn.w	r2, #1
 8008360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7fb fcf0 	bl	8003d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008372:	2b80      	cmp	r3, #128	; 0x80
 8008374:	d10e      	bne.n	8008394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008380:	2b80      	cmp	r3, #128	; 0x80
 8008382:	d107      	bne.n	8008394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800838c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f902 	bl	8008598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	d10e      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d107      	bne.n	80083c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f838 	bl	8008430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	d10e      	bne.n	80083ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b20      	cmp	r3, #32
 80083da:	d107      	bne.n	80083ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0220 	mvn.w	r2, #32
 80083e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f8cc 	bl	8008584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a40      	ldr	r2, [pc, #256]	; (8008558 <TIM_Base_SetConfig+0x114>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d013      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008462:	d00f      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a3d      	ldr	r2, [pc, #244]	; (800855c <TIM_Base_SetConfig+0x118>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00b      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a3c      	ldr	r2, [pc, #240]	; (8008560 <TIM_Base_SetConfig+0x11c>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d007      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a3b      	ldr	r2, [pc, #236]	; (8008564 <TIM_Base_SetConfig+0x120>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d003      	beq.n	8008484 <TIM_Base_SetConfig+0x40>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a3a      	ldr	r2, [pc, #232]	; (8008568 <TIM_Base_SetConfig+0x124>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d108      	bne.n	8008496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4313      	orrs	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a2f      	ldr	r2, [pc, #188]	; (8008558 <TIM_Base_SetConfig+0x114>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d02b      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a4:	d027      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a2c      	ldr	r2, [pc, #176]	; (800855c <TIM_Base_SetConfig+0x118>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d023      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a2b      	ldr	r2, [pc, #172]	; (8008560 <TIM_Base_SetConfig+0x11c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d01f      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a2a      	ldr	r2, [pc, #168]	; (8008564 <TIM_Base_SetConfig+0x120>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d01b      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a29      	ldr	r2, [pc, #164]	; (8008568 <TIM_Base_SetConfig+0x124>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d017      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a28      	ldr	r2, [pc, #160]	; (800856c <TIM_Base_SetConfig+0x128>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d013      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a27      	ldr	r2, [pc, #156]	; (8008570 <TIM_Base_SetConfig+0x12c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00f      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a26      	ldr	r2, [pc, #152]	; (8008574 <TIM_Base_SetConfig+0x130>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00b      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a25      	ldr	r2, [pc, #148]	; (8008578 <TIM_Base_SetConfig+0x134>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d007      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a24      	ldr	r2, [pc, #144]	; (800857c <TIM_Base_SetConfig+0x138>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d003      	beq.n	80084f6 <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a23      	ldr	r2, [pc, #140]	; (8008580 <TIM_Base_SetConfig+0x13c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d108      	bne.n	8008508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a0a      	ldr	r2, [pc, #40]	; (8008558 <TIM_Base_SetConfig+0x114>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_Base_SetConfig+0xf8>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a0c      	ldr	r2, [pc, #48]	; (8008568 <TIM_Base_SetConfig+0x124>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d103      	bne.n	8008544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	615a      	str	r2, [r3, #20]
}
 800854a:	bf00      	nop
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	40010000 	.word	0x40010000
 800855c:	40000400 	.word	0x40000400
 8008560:	40000800 	.word	0x40000800
 8008564:	40000c00 	.word	0x40000c00
 8008568:	40010400 	.word	0x40010400
 800856c:	40014000 	.word	0x40014000
 8008570:	40014400 	.word	0x40014400
 8008574:	40014800 	.word	0x40014800
 8008578:	40001800 	.word	0x40001800
 800857c:	40001c00 	.word	0x40001c00
 8008580:	40002000 	.word	0x40002000

08008584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80085b2:	4b8d      	ldr	r3, [pc, #564]	; (80087e8 <MX_LWIP_Init+0x23c>)
 80085b4:	22c0      	movs	r2, #192	; 0xc0
 80085b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80085b8:	4b8b      	ldr	r3, [pc, #556]	; (80087e8 <MX_LWIP_Init+0x23c>)
 80085ba:	22a8      	movs	r2, #168	; 0xa8
 80085bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80085be:	4b8a      	ldr	r3, [pc, #552]	; (80087e8 <MX_LWIP_Init+0x23c>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80085c4:	4b88      	ldr	r3, [pc, #544]	; (80087e8 <MX_LWIP_Init+0x23c>)
 80085c6:	226f      	movs	r2, #111	; 0x6f
 80085c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80085ca:	4b88      	ldr	r3, [pc, #544]	; (80087ec <MX_LWIP_Init+0x240>)
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80085d0:	4b86      	ldr	r3, [pc, #536]	; (80087ec <MX_LWIP_Init+0x240>)
 80085d2:	22ff      	movs	r2, #255	; 0xff
 80085d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80085d6:	4b85      	ldr	r3, [pc, #532]	; (80087ec <MX_LWIP_Init+0x240>)
 80085d8:	22ff      	movs	r2, #255	; 0xff
 80085da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80085dc:	4b83      	ldr	r3, [pc, #524]	; (80087ec <MX_LWIP_Init+0x240>)
 80085de:	2200      	movs	r2, #0
 80085e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80085e2:	4b83      	ldr	r3, [pc, #524]	; (80087f0 <MX_LWIP_Init+0x244>)
 80085e4:	22c0      	movs	r2, #192	; 0xc0
 80085e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80085e8:	4b81      	ldr	r3, [pc, #516]	; (80087f0 <MX_LWIP_Init+0x244>)
 80085ea:	22a8      	movs	r2, #168	; 0xa8
 80085ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80085ee:	4b80      	ldr	r3, [pc, #512]	; (80087f0 <MX_LWIP_Init+0x244>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80085f4:	4b7e      	ldr	r3, [pc, #504]	; (80087f0 <MX_LWIP_Init+0x244>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80085fa:	f000 fcab 	bl	8008f54 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80085fe:	4b7a      	ldr	r3, [pc, #488]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	061a      	lsls	r2, r3, #24
 8008604:	4b78      	ldr	r3, [pc, #480]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	041b      	lsls	r3, r3, #16
 800860a:	431a      	orrs	r2, r3
 800860c:	4b76      	ldr	r3, [pc, #472]	; (80087e8 <MX_LWIP_Init+0x23c>)
 800860e:	789b      	ldrb	r3, [r3, #2]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	4313      	orrs	r3, r2
 8008614:	4a74      	ldr	r2, [pc, #464]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008616:	78d2      	ldrb	r2, [r2, #3]
 8008618:	4313      	orrs	r3, r2
 800861a:	061a      	lsls	r2, r3, #24
 800861c:	4b72      	ldr	r3, [pc, #456]	; (80087e8 <MX_LWIP_Init+0x23c>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	0619      	lsls	r1, r3, #24
 8008622:	4b71      	ldr	r3, [pc, #452]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008624:	785b      	ldrb	r3, [r3, #1]
 8008626:	041b      	lsls	r3, r3, #16
 8008628:	4319      	orrs	r1, r3
 800862a:	4b6f      	ldr	r3, [pc, #444]	; (80087e8 <MX_LWIP_Init+0x23c>)
 800862c:	789b      	ldrb	r3, [r3, #2]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	430b      	orrs	r3, r1
 8008632:	496d      	ldr	r1, [pc, #436]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008634:	78c9      	ldrb	r1, [r1, #3]
 8008636:	430b      	orrs	r3, r1
 8008638:	021b      	lsls	r3, r3, #8
 800863a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800863e:	431a      	orrs	r2, r3
 8008640:	4b69      	ldr	r3, [pc, #420]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	0619      	lsls	r1, r3, #24
 8008646:	4b68      	ldr	r3, [pc, #416]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	041b      	lsls	r3, r3, #16
 800864c:	4319      	orrs	r1, r3
 800864e:	4b66      	ldr	r3, [pc, #408]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008650:	789b      	ldrb	r3, [r3, #2]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	430b      	orrs	r3, r1
 8008656:	4964      	ldr	r1, [pc, #400]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008658:	78c9      	ldrb	r1, [r1, #3]
 800865a:	430b      	orrs	r3, r1
 800865c:	0a1b      	lsrs	r3, r3, #8
 800865e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008662:	431a      	orrs	r2, r3
 8008664:	4b60      	ldr	r3, [pc, #384]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	0619      	lsls	r1, r3, #24
 800866a:	4b5f      	ldr	r3, [pc, #380]	; (80087e8 <MX_LWIP_Init+0x23c>)
 800866c:	785b      	ldrb	r3, [r3, #1]
 800866e:	041b      	lsls	r3, r3, #16
 8008670:	4319      	orrs	r1, r3
 8008672:	4b5d      	ldr	r3, [pc, #372]	; (80087e8 <MX_LWIP_Init+0x23c>)
 8008674:	789b      	ldrb	r3, [r3, #2]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	430b      	orrs	r3, r1
 800867a:	495b      	ldr	r1, [pc, #364]	; (80087e8 <MX_LWIP_Init+0x23c>)
 800867c:	78c9      	ldrb	r1, [r1, #3]
 800867e:	430b      	orrs	r3, r1
 8008680:	0e1b      	lsrs	r3, r3, #24
 8008682:	4313      	orrs	r3, r2
 8008684:	4a5b      	ldr	r2, [pc, #364]	; (80087f4 <MX_LWIP_Init+0x248>)
 8008686:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008688:	4b58      	ldr	r3, [pc, #352]	; (80087ec <MX_LWIP_Init+0x240>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	061a      	lsls	r2, r3, #24
 800868e:	4b57      	ldr	r3, [pc, #348]	; (80087ec <MX_LWIP_Init+0x240>)
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	431a      	orrs	r2, r3
 8008696:	4b55      	ldr	r3, [pc, #340]	; (80087ec <MX_LWIP_Init+0x240>)
 8008698:	789b      	ldrb	r3, [r3, #2]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	4313      	orrs	r3, r2
 800869e:	4a53      	ldr	r2, [pc, #332]	; (80087ec <MX_LWIP_Init+0x240>)
 80086a0:	78d2      	ldrb	r2, [r2, #3]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	061a      	lsls	r2, r3, #24
 80086a6:	4b51      	ldr	r3, [pc, #324]	; (80087ec <MX_LWIP_Init+0x240>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	0619      	lsls	r1, r3, #24
 80086ac:	4b4f      	ldr	r3, [pc, #316]	; (80087ec <MX_LWIP_Init+0x240>)
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	041b      	lsls	r3, r3, #16
 80086b2:	4319      	orrs	r1, r3
 80086b4:	4b4d      	ldr	r3, [pc, #308]	; (80087ec <MX_LWIP_Init+0x240>)
 80086b6:	789b      	ldrb	r3, [r3, #2]
 80086b8:	021b      	lsls	r3, r3, #8
 80086ba:	430b      	orrs	r3, r1
 80086bc:	494b      	ldr	r1, [pc, #300]	; (80087ec <MX_LWIP_Init+0x240>)
 80086be:	78c9      	ldrb	r1, [r1, #3]
 80086c0:	430b      	orrs	r3, r1
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086c8:	431a      	orrs	r2, r3
 80086ca:	4b48      	ldr	r3, [pc, #288]	; (80087ec <MX_LWIP_Init+0x240>)
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	0619      	lsls	r1, r3, #24
 80086d0:	4b46      	ldr	r3, [pc, #280]	; (80087ec <MX_LWIP_Init+0x240>)
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	4319      	orrs	r1, r3
 80086d8:	4b44      	ldr	r3, [pc, #272]	; (80087ec <MX_LWIP_Init+0x240>)
 80086da:	789b      	ldrb	r3, [r3, #2]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	430b      	orrs	r3, r1
 80086e0:	4942      	ldr	r1, [pc, #264]	; (80087ec <MX_LWIP_Init+0x240>)
 80086e2:	78c9      	ldrb	r1, [r1, #3]
 80086e4:	430b      	orrs	r3, r1
 80086e6:	0a1b      	lsrs	r3, r3, #8
 80086e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80086ec:	431a      	orrs	r2, r3
 80086ee:	4b3f      	ldr	r3, [pc, #252]	; (80087ec <MX_LWIP_Init+0x240>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	0619      	lsls	r1, r3, #24
 80086f4:	4b3d      	ldr	r3, [pc, #244]	; (80087ec <MX_LWIP_Init+0x240>)
 80086f6:	785b      	ldrb	r3, [r3, #1]
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	4319      	orrs	r1, r3
 80086fc:	4b3b      	ldr	r3, [pc, #236]	; (80087ec <MX_LWIP_Init+0x240>)
 80086fe:	789b      	ldrb	r3, [r3, #2]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	430b      	orrs	r3, r1
 8008704:	4939      	ldr	r1, [pc, #228]	; (80087ec <MX_LWIP_Init+0x240>)
 8008706:	78c9      	ldrb	r1, [r1, #3]
 8008708:	430b      	orrs	r3, r1
 800870a:	0e1b      	lsrs	r3, r3, #24
 800870c:	4313      	orrs	r3, r2
 800870e:	4a3a      	ldr	r2, [pc, #232]	; (80087f8 <MX_LWIP_Init+0x24c>)
 8008710:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008712:	4b37      	ldr	r3, [pc, #220]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	061a      	lsls	r2, r3, #24
 8008718:	4b35      	ldr	r3, [pc, #212]	; (80087f0 <MX_LWIP_Init+0x244>)
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	041b      	lsls	r3, r3, #16
 800871e:	431a      	orrs	r2, r3
 8008720:	4b33      	ldr	r3, [pc, #204]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008722:	789b      	ldrb	r3, [r3, #2]
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	4313      	orrs	r3, r2
 8008728:	4a31      	ldr	r2, [pc, #196]	; (80087f0 <MX_LWIP_Init+0x244>)
 800872a:	78d2      	ldrb	r2, [r2, #3]
 800872c:	4313      	orrs	r3, r2
 800872e:	061a      	lsls	r2, r3, #24
 8008730:	4b2f      	ldr	r3, [pc, #188]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	0619      	lsls	r1, r3, #24
 8008736:	4b2e      	ldr	r3, [pc, #184]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	4319      	orrs	r1, r3
 800873e:	4b2c      	ldr	r3, [pc, #176]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008740:	789b      	ldrb	r3, [r3, #2]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	430b      	orrs	r3, r1
 8008746:	492a      	ldr	r1, [pc, #168]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008748:	78c9      	ldrb	r1, [r1, #3]
 800874a:	430b      	orrs	r3, r1
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008752:	431a      	orrs	r2, r3
 8008754:	4b26      	ldr	r3, [pc, #152]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	0619      	lsls	r1, r3, #24
 800875a:	4b25      	ldr	r3, [pc, #148]	; (80087f0 <MX_LWIP_Init+0x244>)
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	4319      	orrs	r1, r3
 8008762:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008764:	789b      	ldrb	r3, [r3, #2]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	430b      	orrs	r3, r1
 800876a:	4921      	ldr	r1, [pc, #132]	; (80087f0 <MX_LWIP_Init+0x244>)
 800876c:	78c9      	ldrb	r1, [r1, #3]
 800876e:	430b      	orrs	r3, r1
 8008770:	0a1b      	lsrs	r3, r3, #8
 8008772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008776:	431a      	orrs	r2, r3
 8008778:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <MX_LWIP_Init+0x244>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	0619      	lsls	r1, r3, #24
 800877e:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	041b      	lsls	r3, r3, #16
 8008784:	4319      	orrs	r1, r3
 8008786:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008788:	789b      	ldrb	r3, [r3, #2]
 800878a:	021b      	lsls	r3, r3, #8
 800878c:	430b      	orrs	r3, r1
 800878e:	4918      	ldr	r1, [pc, #96]	; (80087f0 <MX_LWIP_Init+0x244>)
 8008790:	78c9      	ldrb	r1, [r1, #3]
 8008792:	430b      	orrs	r3, r1
 8008794:	0e1b      	lsrs	r3, r3, #24
 8008796:	4313      	orrs	r3, r2
 8008798:	4a18      	ldr	r2, [pc, #96]	; (80087fc <MX_LWIP_Init+0x250>)
 800879a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800879c:	4b18      	ldr	r3, [pc, #96]	; (8008800 <MX_LWIP_Init+0x254>)
 800879e:	9302      	str	r3, [sp, #8]
 80087a0:	4b18      	ldr	r3, [pc, #96]	; (8008804 <MX_LWIP_Init+0x258>)
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	2300      	movs	r3, #0
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4b14      	ldr	r3, [pc, #80]	; (80087fc <MX_LWIP_Init+0x250>)
 80087aa:	4a13      	ldr	r2, [pc, #76]	; (80087f8 <MX_LWIP_Init+0x24c>)
 80087ac:	4911      	ldr	r1, [pc, #68]	; (80087f4 <MX_LWIP_Init+0x248>)
 80087ae:	4816      	ldr	r0, [pc, #88]	; (8008808 <MX_LWIP_Init+0x25c>)
 80087b0:	f001 f876 	bl	80098a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80087b4:	4814      	ldr	r0, [pc, #80]	; (8008808 <MX_LWIP_Init+0x25c>)
 80087b6:	f001 fa25 	bl	8009c04 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80087ba:	4b13      	ldr	r3, [pc, #76]	; (8008808 <MX_LWIP_Init+0x25c>)
 80087bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80087c0:	089b      	lsrs	r3, r3, #2
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80087cc:	480e      	ldr	r0, [pc, #56]	; (8008808 <MX_LWIP_Init+0x25c>)
 80087ce:	f001 fa29 	bl	8009c24 <netif_set_up>
 80087d2:	e002      	b.n	80087da <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80087d4:	480c      	ldr	r0, [pc, #48]	; (8008808 <MX_LWIP_Init+0x25c>)
 80087d6:	f001 fa91 	bl	8009cfc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80087da:	490c      	ldr	r1, [pc, #48]	; (800880c <MX_LWIP_Init+0x260>)
 80087dc:	480a      	ldr	r0, [pc, #40]	; (8008808 <MX_LWIP_Init+0x25c>)
 80087de:	f001 fabf 	bl	8009d60 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80087e2:	bf00      	nop
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	200008ec 	.word	0x200008ec
 80087ec:	200008e8 	.word	0x200008e8
 80087f0:	200008a8 	.word	0x200008a8
 80087f4:	200008e4 	.word	0x200008e4
 80087f8:	200008f0 	.word	0x200008f0
 80087fc:	200008f4 	.word	0x200008f4
 8008800:	08012de9 	.word	0x08012de9
 8008804:	08008d81 	.word	0x08008d81
 8008808:	200008ac 	.word	0x200008ac
 800880c:	08008ded 	.word	0x08008ded

08008810 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8008814:	4803      	ldr	r0, [pc, #12]	; (8008824 <MX_LWIP_Process+0x14>)
 8008816:	f000 fa93 	bl	8008d40 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800881a:	f007 fbb1 	bl	800ff80 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800881e:	bf00      	nop
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	200008ac 	.word	0x200008ac

08008828 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08e      	sub	sp, #56	; 0x38
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	605a      	str	r2, [r3, #4]
 800883a:	609a      	str	r2, [r3, #8]
 800883c:	60da      	str	r2, [r3, #12]
 800883e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a46      	ldr	r2, [pc, #280]	; (8008960 <HAL_ETH_MspInit+0x138>)
 8008846:	4293      	cmp	r3, r2
 8008848:	f040 8085 	bne.w	8008956 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800884c:	2300      	movs	r3, #0
 800884e:	623b      	str	r3, [r7, #32]
 8008850:	4b44      	ldr	r3, [pc, #272]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 8008852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008854:	4a43      	ldr	r2, [pc, #268]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 8008856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800885a:	6313      	str	r3, [r2, #48]	; 0x30
 800885c:	4b41      	ldr	r3, [pc, #260]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 800885e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008864:	623b      	str	r3, [r7, #32]
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	4b3d      	ldr	r3, [pc, #244]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	4a3c      	ldr	r2, [pc, #240]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 8008872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008876:	6313      	str	r3, [r2, #48]	; 0x30
 8008878:	4b3a      	ldr	r3, [pc, #232]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2300      	movs	r3, #0
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	4b36      	ldr	r3, [pc, #216]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	4a35      	ldr	r2, [pc, #212]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 800888e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008892:	6313      	str	r3, [r2, #48]	; 0x30
 8008894:	4b33      	ldr	r3, [pc, #204]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	4b2f      	ldr	r3, [pc, #188]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a8:	4a2e      	ldr	r2, [pc, #184]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088aa:	f043 0304 	orr.w	r3, r3, #4
 80088ae:	6313      	str	r3, [r2, #48]	; 0x30
 80088b0:	4b2c      	ldr	r3, [pc, #176]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c4:	4a27      	ldr	r2, [pc, #156]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	6313      	str	r3, [r2, #48]	; 0x30
 80088cc:	4b25      	ldr	r3, [pc, #148]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	4b21      	ldr	r3, [pc, #132]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	4a20      	ldr	r2, [pc, #128]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088e2:	f043 0302 	orr.w	r3, r3, #2
 80088e6:	6313      	str	r3, [r2, #48]	; 0x30
 80088e8:	4b1e      	ldr	r3, [pc, #120]	; (8008964 <HAL_ETH_MspInit+0x13c>)
 80088ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80088f4:	2332      	movs	r3, #50	; 0x32
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f8:	2302      	movs	r3, #2
 80088fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fc:	2300      	movs	r3, #0
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008900:	2303      	movs	r3, #3
 8008902:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008904:	230b      	movs	r3, #11
 8008906:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800890c:	4619      	mov	r1, r3
 800890e:	4816      	ldr	r0, [pc, #88]	; (8008968 <HAL_ETH_MspInit+0x140>)
 8008910:	f7fd fb7c 	bl	800600c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8008914:	2386      	movs	r3, #134	; 0x86
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008918:	2302      	movs	r3, #2
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800891c:	2300      	movs	r3, #0
 800891e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008920:	2303      	movs	r3, #3
 8008922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008924:	230b      	movs	r3, #11
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892c:	4619      	mov	r1, r3
 800892e:	480f      	ldr	r0, [pc, #60]	; (800896c <HAL_ETH_MspInit+0x144>)
 8008930:	f7fd fb6c 	bl	800600c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008934:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893a:	2302      	movs	r3, #2
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893e:	2300      	movs	r3, #0
 8008940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008942:	2303      	movs	r3, #3
 8008944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008946:	230b      	movs	r3, #11
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800894a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800894e:	4619      	mov	r1, r3
 8008950:	4807      	ldr	r0, [pc, #28]	; (8008970 <HAL_ETH_MspInit+0x148>)
 8008952:	f7fd fb5b 	bl	800600c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008956:	bf00      	nop
 8008958:	3738      	adds	r7, #56	; 0x38
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40028000 	.word	0x40028000
 8008964:	40023800 	.word	0x40023800
 8008968:	40020800 	.word	0x40020800
 800896c:	40020000 	.word	0x40020000
 8008970:	40020400 	.word	0x40020400

08008974 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800897c:	4b41      	ldr	r3, [pc, #260]	; (8008a84 <low_level_init+0x110>)
 800897e:	4a42      	ldr	r2, [pc, #264]	; (8008a88 <low_level_init+0x114>)
 8008980:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008982:	4b40      	ldr	r3, [pc, #256]	; (8008a84 <low_level_init+0x110>)
 8008984:	2201      	movs	r2, #1
 8008986:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008988:	4b3e      	ldr	r3, [pc, #248]	; (8008a84 <low_level_init+0x110>)
 800898a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800898e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008990:	4b3c      	ldr	r3, [pc, #240]	; (8008a84 <low_level_init+0x110>)
 8008992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008996:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 8008998:	4b3a      	ldr	r3, [pc, #232]	; (8008a84 <low_level_init+0x110>)
 800899a:	2200      	movs	r2, #0
 800899c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800899e:	2300      	movs	r3, #0
 80089a0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80089a2:	2380      	movs	r3, #128	; 0x80
 80089a4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80089a6:	23e1      	movs	r3, #225	; 0xe1
 80089a8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80089aa:	2300      	movs	r3, #0
 80089ac:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80089ae:	2300      	movs	r3, #0
 80089b0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80089b2:	2300      	movs	r3, #0
 80089b4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80089b6:	4a33      	ldr	r2, [pc, #204]	; (8008a84 <low_level_init+0x110>)
 80089b8:	f107 0308 	add.w	r3, r7, #8
 80089bc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80089be:	4b31      	ldr	r3, [pc, #196]	; (8008a84 <low_level_init+0x110>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80089c4:	4b2f      	ldr	r3, [pc, #188]	; (8008a84 <low_level_init+0x110>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80089ca:	4b2e      	ldr	r3, [pc, #184]	; (8008a84 <low_level_init+0x110>)
 80089cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80089d0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80089d2:	482c      	ldr	r0, [pc, #176]	; (8008a84 <low_level_init+0x110>)
 80089d4:	f7fc f9f4 	bl	8004dc0 <HAL_ETH_Init>
 80089d8:	4603      	mov	r3, r0
 80089da:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d108      	bne.n	80089f4 <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80089e8:	f043 0304 	orr.w	r3, r3, #4
 80089ec:	b2da      	uxtb	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80089f4:	2304      	movs	r3, #4
 80089f6:	4a25      	ldr	r2, [pc, #148]	; (8008a8c <low_level_init+0x118>)
 80089f8:	4925      	ldr	r1, [pc, #148]	; (8008a90 <low_level_init+0x11c>)
 80089fa:	4822      	ldr	r0, [pc, #136]	; (8008a84 <low_level_init+0x110>)
 80089fc:	f7fc fb7c 	bl	80050f8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008a00:	2304      	movs	r3, #4
 8008a02:	4a24      	ldr	r2, [pc, #144]	; (8008a94 <low_level_init+0x120>)
 8008a04:	4924      	ldr	r1, [pc, #144]	; (8008a98 <low_level_init+0x124>)
 8008a06:	481f      	ldr	r0, [pc, #124]	; (8008a84 <low_level_init+0x110>)
 8008a08:	f7fc fbdf 	bl	80051ca <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2206      	movs	r2, #6
 8008a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008a14:	4b1b      	ldr	r3, [pc, #108]	; (8008a84 <low_level_init+0x110>)
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	781a      	ldrb	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008a20:	4b18      	ldr	r3, [pc, #96]	; (8008a84 <low_level_init+0x110>)
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	785a      	ldrb	r2, [r3, #1]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008a2c:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <low_level_init+0x110>)
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	789a      	ldrb	r2, [r3, #2]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008a38:	4b12      	ldr	r3, [pc, #72]	; (8008a84 <low_level_init+0x110>)
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	78da      	ldrb	r2, [r3, #3]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <low_level_init+0x110>)
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	791a      	ldrb	r2, [r3, #4]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008a50:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <low_level_init+0x110>)
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	795a      	ldrb	r2, [r3, #5]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008a62:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a6a:	f043 030a 	orr.w	r3, r3, #10
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008a76:	4803      	ldr	r0, [pc, #12]	; (8008a84 <low_level_init+0x110>)
 8008a78:	f7fc fe50 	bl	800571c <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	200021c8 	.word	0x200021c8
 8008a88:	40028000 	.word	0x40028000
 8008a8c:	20002210 	.word	0x20002210
 8008a90:	200008f8 	.word	0x200008f8
 8008a94:	20000978 	.word	0x20000978
 8008a98:	20002148 	.word	0x20002148

08008a9c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08a      	sub	sp, #40	; 0x28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008aa6:	4b4b      	ldr	r3, [pc, #300]	; (8008bd4 <low_level_output+0x138>)
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008abe:	4b45      	ldr	r3, [pc, #276]	; (8008bd4 <low_level_output+0x138>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	623b      	str	r3, [r7, #32]
 8008acc:	e05a      	b.n	8008b84 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	da03      	bge.n	8008ade <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008ad6:	23f8      	movs	r3, #248	; 0xf8
 8008ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008adc:	e05c      	b.n	8008b98 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	895b      	ldrh	r3, [r3, #10]
 8008ae2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008ae8:	e02f      	b.n	8008b4a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	18d0      	adds	r0, r2, r3
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	18d1      	adds	r1, r2, r3
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008afe:	3304      	adds	r3, #4
 8008b00:	461a      	mov	r2, r3
 8008b02:	f00a fa8d 	bl	8013020 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	da03      	bge.n	8008b1c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008b14:	23f8      	movs	r3, #248	; 0xf8
 8008b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008b1a:	e03d      	b.n	8008b98 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008b2c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008b38:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008b44:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d8c8      	bhi.n	8008aea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	18d0      	adds	r0, r2, r3
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4413      	add	r3, r2
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f00a fa59 	bl	8013020 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008b7e:	6a3b      	ldr	r3, [r7, #32]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	623b      	str	r3, [r7, #32]
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1a1      	bne.n	8008ace <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008b8a:	6979      	ldr	r1, [r7, #20]
 8008b8c:	4811      	ldr	r0, [pc, #68]	; (8008bd4 <low_level_output+0x138>)
 8008b8e:	f7fc fb89 	bl	80052a4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008b98:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <low_level_output+0x138>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ba0:	3314      	adds	r3, #20
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0320 	and.w	r3, r3, #32
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <low_level_output+0x138>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bb4:	3314      	adds	r3, #20
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <low_level_output+0x138>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008bc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3728      	adds	r7, #40	; 0x28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	200021c8 	.word	0x200021c8

08008bd8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08c      	sub	sp, #48	; 0x30
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8008bfc:	484f      	ldr	r0, [pc, #316]	; (8008d3c <low_level_input+0x164>)
 8008bfe:	f7fc fc3b 	bl	8005478 <HAL_ETH_GetReceivedFrame>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <low_level_input+0x34>

    return NULL;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e092      	b.n	8008d32 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008c0c:	4b4b      	ldr	r3, [pc, #300]	; (8008d3c <low_level_input+0x164>)
 8008c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c10:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008c12:	4b4a      	ldr	r3, [pc, #296]	; (8008d3c <low_level_input+0x164>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008c18:	89fb      	ldrh	r3, [r7, #14]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008c1e:	89fb      	ldrh	r3, [r7, #14]
 8008c20:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008c24:	4619      	mov	r1, r3
 8008c26:	2000      	movs	r0, #0
 8008c28:	f001 f936 	bl	8009e98 <pbuf_alloc>
 8008c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d04b      	beq.n	8008ccc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008c34:	4b41      	ldr	r3, [pc, #260]	; (8008d3c <low_level_input+0x164>)
 8008c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c38:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c42:	e040      	b.n	8008cc6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	895b      	ldrh	r3, [r3, #10]
 8008c48:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008c4e:	e021      	b.n	8008c94 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	18d0      	adds	r0, r2, r3
 8008c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	18d1      	adds	r1, r2, r3
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008c64:	3304      	adds	r3, #4
 8008c66:	461a      	mov	r2, r3
 8008c68:	f00a f9da 	bl	8013020 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008c82:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008c84:	69ba      	ldr	r2, [r7, #24]
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008c8e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d8d6      	bhi.n	8008c50 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	18d0      	adds	r0, r2, r3
 8008caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	4413      	add	r3, r2
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	f00a f9b4 	bl	8013020 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1bb      	bne.n	8008c44 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008ccc:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <low_level_input+0x164>)
 8008cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	e00b      	b.n	8008cf0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	3301      	adds	r3, #1
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <low_level_input+0x164>)
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d3ee      	bcc.n	8008cd8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008cfa:	4b10      	ldr	r3, [pc, #64]	; (8008d3c <low_level_input+0x164>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008d00:	4b0e      	ldr	r3, [pc, #56]	; (8008d3c <low_level_input+0x164>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d08:	3314      	adds	r3, #20
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00d      	beq.n	8008d30 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008d14:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <low_level_input+0x164>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d1c:	3314      	adds	r3, #20
 8008d1e:	2280      	movs	r2, #128	; 0x80
 8008d20:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008d22:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <low_level_input+0x164>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3730      	adds	r7, #48	; 0x30
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	200021c8 	.word	0x200021c8

08008d40 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff ff45 	bl	8008bd8 <low_level_input>
 8008d4e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d010      	beq.n	8008d78 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	4798      	blx	r3
 8008d60:	4603      	mov	r3, r0
 8008d62:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008d64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d006      	beq.n	8008d7a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f001 fb77 	bl	800a460 <pbuf_free>
    p = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	e000      	b.n	8008d7a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008d78:	bf00      	nop
  }
}
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d106      	bne.n	8008d9c <ethernetif_init+0x1c>
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <ethernetif_init+0x48>)
 8008d90:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8008d94:	490d      	ldr	r1, [pc, #52]	; (8008dcc <ethernetif_init+0x4c>)
 8008d96:	480e      	ldr	r0, [pc, #56]	; (8008dd0 <ethernetif_init+0x50>)
 8008d98:	f00a fe86 	bl	8013aa8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2273      	movs	r2, #115	; 0x73
 8008da0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2274      	movs	r2, #116	; 0x74
 8008da8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a09      	ldr	r2, [pc, #36]	; (8008dd4 <ethernetif_init+0x54>)
 8008db0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <ethernetif_init+0x58>)
 8008db6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff fddb 	bl	8008974 <low_level_init>

  return ERR_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	080171b4 	.word	0x080171b4
 8008dcc:	080171d0 	.word	0x080171d0
 8008dd0:	080171e0 	.word	0x080171e0
 8008dd4:	080112b1 	.word	0x080112b1
 8008dd8:	08008a9d 	.word	0x08008a9d

08008ddc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008de0:	f7fb fe8a 	bl	8004af8 <HAL_GetTick>
 8008de4:	4603      	mov	r3, r0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e02:	089b      	lsrs	r3, r3, #2
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d05d      	beq.n	8008eca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008e0e:	4b34      	ldr	r3, [pc, #208]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d03f      	beq.n	8008e96 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008e16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4830      	ldr	r0, [pc, #192]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e1e:	f7fc fc17 	bl	8005650 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008e22:	f7fb fe69 	bl	8004af8 <HAL_GetTick>
 8008e26:	4603      	mov	r3, r0
 8008e28:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008e2a:	f107 0308 	add.w	r3, r7, #8
 8008e2e:	461a      	mov	r2, r3
 8008e30:	2101      	movs	r1, #1
 8008e32:	482b      	ldr	r0, [pc, #172]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e34:	f7fc fba4 	bl	8005580 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008e38:	f7fb fe5e 	bl	8004af8 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e46:	d828      	bhi.n	8008e9a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0eb      	beq.n	8008e2a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	461a      	mov	r2, r3
 8008e58:	211f      	movs	r1, #31
 8008e5a:	4821      	ldr	r0, [pc, #132]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e5c:	f7fc fb90 	bl	8005580 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f003 0310 	and.w	r3, r3, #16
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d004      	beq.n	8008e74 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008e6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e70:	60da      	str	r2, [r3, #12]
 8008e72:	e002      	b.n	8008e7a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f003 0304 	and.w	r3, r3, #4
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008e84:	4b16      	ldr	r3, [pc, #88]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	609a      	str	r2, [r3, #8]
 8008e8a:	e016      	b.n	8008eba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008e8c:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008e92:	609a      	str	r2, [r3, #8]
 8008e94:	e011      	b.n	8008eba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008e96:	bf00      	nop
 8008e98:	e000      	b.n	8008e9c <ethernetif_update_config+0xb0>
          goto error;
 8008e9a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008e9c:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	08db      	lsrs	r3, r3, #3
 8008ea2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008ea4:	4b0e      	ldr	r3, [pc, #56]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	085b      	lsrs	r3, r3, #1
 8008eaa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008eac:	4313      	orrs	r3, r2
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	480a      	ldr	r0, [pc, #40]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008eb6:	f7fc fbcb 	bl	8005650 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008eba:	2100      	movs	r1, #0
 8008ebc:	4808      	ldr	r0, [pc, #32]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008ebe:	f7fc fc8b 	bl	80057d8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008ec2:	4807      	ldr	r0, [pc, #28]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008ec4:	f7fc fc2a 	bl	800571c <HAL_ETH_Start>
 8008ec8:	e002      	b.n	8008ed0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008eca:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <ethernetif_update_config+0xf4>)
 8008ecc:	f7fc fc55 	bl	800577a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f807 	bl	8008ee4 <ethernetif_notify_conn_changed>
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200021c8 	.word	0x200021c8

08008ee4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	4603      	mov	r3, r0
 8008f00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8008f02:	88fb      	ldrh	r3, [r7, #6]
 8008f04:	021b      	lsls	r3, r3, #8
 8008f06:	b21a      	sxth	r2, r3
 8008f08:	88fb      	ldrh	r3, [r7, #6]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	b21b      	sxth	r3, r3
 8008f10:	4313      	orrs	r3, r2
 8008f12:	b21b      	sxth	r3, r3
 8008f14:	b29b      	uxth	r3, r3
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	061a      	lsls	r2, r3, #24
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008f36:	431a      	orrs	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	0e1b      	lsrs	r3, r3, #24
 8008f46:	4313      	orrs	r3, r2
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008f5e:	f000 f8d5 	bl	800910c <mem_init>
  memp_init();
 8008f62:	f000 fbdb 	bl	800971c <memp_init>
  pbuf_init();
  netif_init();
 8008f66:	f000 fc93 	bl	8009890 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008f6a:	f007 f84b 	bl	8010004 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008f6e:	f001 fda7 	bl	800aac0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008f72:	f006 ffbd 	bl	800fef0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008f8a:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <ptr_to_mem+0x20>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	88fb      	ldrh	r3, [r7, #6]
 8008f90:	4413      	add	r3, r2
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000294 	.word	0x20000294

08008fa4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8008fac:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <mem_to_ptr+0x20>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	b29b      	uxth	r3, r3
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000294 	.word	0x20000294

08008fc8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008fc8:	b590      	push	{r4, r7, lr}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008fd0:	4b45      	ldr	r3, [pc, #276]	; (80090e8 <plug_holes+0x120>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d206      	bcs.n	8008fe8 <plug_holes+0x20>
 8008fda:	4b44      	ldr	r3, [pc, #272]	; (80090ec <plug_holes+0x124>)
 8008fdc:	f240 12df 	movw	r2, #479	; 0x1df
 8008fe0:	4943      	ldr	r1, [pc, #268]	; (80090f0 <plug_holes+0x128>)
 8008fe2:	4844      	ldr	r0, [pc, #272]	; (80090f4 <plug_holes+0x12c>)
 8008fe4:	f00a fd60 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008fe8:	4b43      	ldr	r3, [pc, #268]	; (80090f8 <plug_holes+0x130>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d306      	bcc.n	8009000 <plug_holes+0x38>
 8008ff2:	4b3e      	ldr	r3, [pc, #248]	; (80090ec <plug_holes+0x124>)
 8008ff4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008ff8:	4940      	ldr	r1, [pc, #256]	; (80090fc <plug_holes+0x134>)
 8008ffa:	483e      	ldr	r0, [pc, #248]	; (80090f4 <plug_holes+0x12c>)
 8008ffc:	f00a fd54 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	791b      	ldrb	r3, [r3, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d006      	beq.n	8009016 <plug_holes+0x4e>
 8009008:	4b38      	ldr	r3, [pc, #224]	; (80090ec <plug_holes+0x124>)
 800900a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800900e:	493c      	ldr	r1, [pc, #240]	; (8009100 <plug_holes+0x138>)
 8009010:	4838      	ldr	r0, [pc, #224]	; (80090f4 <plug_holes+0x12c>)
 8009012:	f00a fd49 	bl	8013aa8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800901e:	d906      	bls.n	800902e <plug_holes+0x66>
 8009020:	4b32      	ldr	r3, [pc, #200]	; (80090ec <plug_holes+0x124>)
 8009022:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009026:	4937      	ldr	r1, [pc, #220]	; (8009104 <plug_holes+0x13c>)
 8009028:	4832      	ldr	r0, [pc, #200]	; (80090f4 <plug_holes+0x12c>)
 800902a:	f00a fd3d 	bl	8013aa8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff ffa4 	bl	8008f80 <ptr_to_mem>
 8009038:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	429a      	cmp	r2, r3
 8009040:	d024      	beq.n	800908c <plug_holes+0xc4>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	791b      	ldrb	r3, [r3, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d120      	bne.n	800908c <plug_holes+0xc4>
 800904a:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <plug_holes+0x130>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	429a      	cmp	r2, r3
 8009052:	d01b      	beq.n	800908c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009054:	4b2c      	ldr	r3, [pc, #176]	; (8009108 <plug_holes+0x140>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	429a      	cmp	r2, r3
 800905c:	d102      	bne.n	8009064 <plug_holes+0x9c>
      lfree = mem;
 800905e:	4a2a      	ldr	r2, [pc, #168]	; (8009108 <plug_holes+0x140>)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	881a      	ldrh	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009074:	d00a      	beq.n	800908c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff ff80 	bl	8008f80 <ptr_to_mem>
 8009080:	4604      	mov	r4, r0
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff ff8e 	bl	8008fa4 <mem_to_ptr>
 8009088:	4603      	mov	r3, r0
 800908a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	885b      	ldrh	r3, [r3, #2]
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff ff75 	bl	8008f80 <ptr_to_mem>
 8009096:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	429a      	cmp	r2, r3
 800909e:	d01f      	beq.n	80090e0 <plug_holes+0x118>
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	791b      	ldrb	r3, [r3, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d11b      	bne.n	80090e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80090a8:	4b17      	ldr	r3, [pc, #92]	; (8009108 <plug_holes+0x140>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d102      	bne.n	80090b8 <plug_holes+0xf0>
      lfree = pmem;
 80090b2:	4a15      	ldr	r2, [pc, #84]	; (8009108 <plug_holes+0x140>)
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	881a      	ldrh	r2, [r3, #0]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80090c8:	d00a      	beq.n	80090e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff ff56 	bl	8008f80 <ptr_to_mem>
 80090d4:	4604      	mov	r4, r0
 80090d6:	68b8      	ldr	r0, [r7, #8]
 80090d8:	f7ff ff64 	bl	8008fa4 <mem_to_ptr>
 80090dc:	4603      	mov	r3, r0
 80090de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80090e0:	bf00      	nop
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd90      	pop	{r4, r7, pc}
 80090e8:	20000294 	.word	0x20000294
 80090ec:	08017208 	.word	0x08017208
 80090f0:	08017238 	.word	0x08017238
 80090f4:	08017250 	.word	0x08017250
 80090f8:	20000298 	.word	0x20000298
 80090fc:	08017278 	.word	0x08017278
 8009100:	08017294 	.word	0x08017294
 8009104:	080172b0 	.word	0x080172b0
 8009108:	2000029c 	.word	0x2000029c

0800910c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009112:	4b18      	ldr	r3, [pc, #96]	; (8009174 <mem_init+0x68>)
 8009114:	3303      	adds	r3, #3
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	461a      	mov	r2, r3
 800911c:	4b16      	ldr	r3, [pc, #88]	; (8009178 <mem_init+0x6c>)
 800911e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009120:	4b15      	ldr	r3, [pc, #84]	; (8009178 <mem_init+0x6c>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800912c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800913a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800913e:	f7ff ff1f 	bl	8008f80 <ptr_to_mem>
 8009142:	4603      	mov	r3, r0
 8009144:	4a0d      	ldr	r2, [pc, #52]	; (800917c <mem_init+0x70>)
 8009146:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009148:	4b0c      	ldr	r3, [pc, #48]	; (800917c <mem_init+0x70>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2201      	movs	r2, #1
 800914e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <mem_init+0x70>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009158:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800915a:	4b08      	ldr	r3, [pc, #32]	; (800917c <mem_init+0x70>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009162:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009164:	4b04      	ldr	r3, [pc, #16]	; (8009178 <mem_init+0x6c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a05      	ldr	r2, [pc, #20]	; (8009180 <mem_init+0x74>)
 800916a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200039f8 	.word	0x200039f8
 8009178:	20000294 	.word	0x20000294
 800917c:	20000298 	.word	0x20000298
 8009180:	2000029c 	.word	0x2000029c

08009184 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ff09 	bl	8008fa4 <mem_to_ptr>
 8009192:	4603      	mov	r3, r0
 8009194:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff fef0 	bl	8008f80 <ptr_to_mem>
 80091a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	885b      	ldrh	r3, [r3, #2]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff feea 	bl	8008f80 <ptr_to_mem>
 80091ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80091b6:	d818      	bhi.n	80091ea <mem_link_valid+0x66>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	885b      	ldrh	r3, [r3, #2]
 80091bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80091c0:	d813      	bhi.n	80091ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80091c6:	8afa      	ldrh	r2, [r7, #22]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d004      	beq.n	80091d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	8afa      	ldrh	r2, [r7, #22]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d109      	bne.n	80091ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80091d6:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <mem_link_valid+0x74>)
 80091d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d006      	beq.n	80091ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	885b      	ldrh	r3, [r3, #2]
 80091e4:	8afa      	ldrh	r2, [r7, #22]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d001      	beq.n	80091ee <mem_link_valid+0x6a>
    return 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e000      	b.n	80091f0 <mem_link_valid+0x6c>
  }
  return 1;
 80091ee:	2301      	movs	r3, #1
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	20000298 	.word	0x20000298

080091fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d04c      	beq.n	80092a4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f003 0303 	and.w	r3, r3, #3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d007      	beq.n	8009224 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009214:	4b25      	ldr	r3, [pc, #148]	; (80092ac <mem_free+0xb0>)
 8009216:	f240 2273 	movw	r2, #627	; 0x273
 800921a:	4925      	ldr	r1, [pc, #148]	; (80092b0 <mem_free+0xb4>)
 800921c:	4825      	ldr	r0, [pc, #148]	; (80092b4 <mem_free+0xb8>)
 800921e:	f00a fc43 	bl	8013aa8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009222:	e040      	b.n	80092a6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3b08      	subs	r3, #8
 8009228:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800922a:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <mem_free+0xbc>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	429a      	cmp	r2, r3
 8009232:	d306      	bcc.n	8009242 <mem_free+0x46>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f103 020c 	add.w	r2, r3, #12
 800923a:	4b20      	ldr	r3, [pc, #128]	; (80092bc <mem_free+0xc0>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d907      	bls.n	8009252 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009242:	4b1a      	ldr	r3, [pc, #104]	; (80092ac <mem_free+0xb0>)
 8009244:	f240 227f 	movw	r2, #639	; 0x27f
 8009248:	491d      	ldr	r1, [pc, #116]	; (80092c0 <mem_free+0xc4>)
 800924a:	481a      	ldr	r0, [pc, #104]	; (80092b4 <mem_free+0xb8>)
 800924c:	f00a fc2c 	bl	8013aa8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009250:	e029      	b.n	80092a6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	791b      	ldrb	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d107      	bne.n	800926a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800925a:	4b14      	ldr	r3, [pc, #80]	; (80092ac <mem_free+0xb0>)
 800925c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009260:	4918      	ldr	r1, [pc, #96]	; (80092c4 <mem_free+0xc8>)
 8009262:	4814      	ldr	r0, [pc, #80]	; (80092b4 <mem_free+0xb8>)
 8009264:	f00a fc20 	bl	8013aa8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009268:	e01d      	b.n	80092a6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff ff8a 	bl	8009184 <mem_link_valid>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d107      	bne.n	8009286 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009276:	4b0d      	ldr	r3, [pc, #52]	; (80092ac <mem_free+0xb0>)
 8009278:	f240 2295 	movw	r2, #661	; 0x295
 800927c:	4912      	ldr	r1, [pc, #72]	; (80092c8 <mem_free+0xcc>)
 800927e:	480d      	ldr	r0, [pc, #52]	; (80092b4 <mem_free+0xb8>)
 8009280:	f00a fc12 	bl	8013aa8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009284:	e00f      	b.n	80092a6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800928c:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <mem_free+0xd0>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	429a      	cmp	r2, r3
 8009294:	d202      	bcs.n	800929c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009296:	4a0d      	ldr	r2, [pc, #52]	; (80092cc <mem_free+0xd0>)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7ff fe93 	bl	8008fc8 <plug_holes>
 80092a2:	e000      	b.n	80092a6 <mem_free+0xaa>
    return;
 80092a4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	08017208 	.word	0x08017208
 80092b0:	080172dc 	.word	0x080172dc
 80092b4:	08017250 	.word	0x08017250
 80092b8:	20000294 	.word	0x20000294
 80092bc:	20000298 	.word	0x20000298
 80092c0:	08017300 	.word	0x08017300
 80092c4:	0801731c 	.word	0x0801731c
 80092c8:	08017344 	.word	0x08017344
 80092cc:	2000029c 	.word	0x2000029c

080092d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80092dc:	887b      	ldrh	r3, [r7, #2]
 80092de:	3303      	adds	r3, #3
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f023 0303 	bic.w	r3, r3, #3
 80092e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80092e8:	8bfb      	ldrh	r3, [r7, #30]
 80092ea:	2b0b      	cmp	r3, #11
 80092ec:	d801      	bhi.n	80092f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80092ee:	230c      	movs	r3, #12
 80092f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80092f2:	8bfb      	ldrh	r3, [r7, #30]
 80092f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80092f8:	d803      	bhi.n	8009302 <mem_trim+0x32>
 80092fa:	8bfa      	ldrh	r2, [r7, #30]
 80092fc:	887b      	ldrh	r3, [r7, #2]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d201      	bcs.n	8009306 <mem_trim+0x36>
    return NULL;
 8009302:	2300      	movs	r3, #0
 8009304:	e0cc      	b.n	80094a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009306:	4b68      	ldr	r3, [pc, #416]	; (80094a8 <mem_trim+0x1d8>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	d304      	bcc.n	800931a <mem_trim+0x4a>
 8009310:	4b66      	ldr	r3, [pc, #408]	; (80094ac <mem_trim+0x1dc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	429a      	cmp	r2, r3
 8009318:	d306      	bcc.n	8009328 <mem_trim+0x58>
 800931a:	4b65      	ldr	r3, [pc, #404]	; (80094b0 <mem_trim+0x1e0>)
 800931c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009320:	4964      	ldr	r1, [pc, #400]	; (80094b4 <mem_trim+0x1e4>)
 8009322:	4865      	ldr	r0, [pc, #404]	; (80094b8 <mem_trim+0x1e8>)
 8009324:	f00a fbc0 	bl	8013aa8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009328:	4b5f      	ldr	r3, [pc, #380]	; (80094a8 <mem_trim+0x1d8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	429a      	cmp	r2, r3
 8009330:	d304      	bcc.n	800933c <mem_trim+0x6c>
 8009332:	4b5e      	ldr	r3, [pc, #376]	; (80094ac <mem_trim+0x1dc>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d301      	bcc.n	8009340 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	e0af      	b.n	80094a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3b08      	subs	r3, #8
 8009344:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009346:	69b8      	ldr	r0, [r7, #24]
 8009348:	f7ff fe2c 	bl	8008fa4 <mem_to_ptr>
 800934c:	4603      	mov	r3, r0
 800934e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	881a      	ldrh	r2, [r3, #0]
 8009354:	8afb      	ldrh	r3, [r7, #22]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	b29b      	uxth	r3, r3
 800935a:	3b08      	subs	r3, #8
 800935c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800935e:	8bfa      	ldrh	r2, [r7, #30]
 8009360:	8abb      	ldrh	r3, [r7, #20]
 8009362:	429a      	cmp	r2, r3
 8009364:	d906      	bls.n	8009374 <mem_trim+0xa4>
 8009366:	4b52      	ldr	r3, [pc, #328]	; (80094b0 <mem_trim+0x1e0>)
 8009368:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800936c:	4953      	ldr	r1, [pc, #332]	; (80094bc <mem_trim+0x1ec>)
 800936e:	4852      	ldr	r0, [pc, #328]	; (80094b8 <mem_trim+0x1e8>)
 8009370:	f00a fb9a 	bl	8013aa8 <iprintf>
  if (newsize > size) {
 8009374:	8bfa      	ldrh	r2, [r7, #30]
 8009376:	8abb      	ldrh	r3, [r7, #20]
 8009378:	429a      	cmp	r2, r3
 800937a:	d901      	bls.n	8009380 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	e08f      	b.n	80094a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8009380:	8bfa      	ldrh	r2, [r7, #30]
 8009382:	8abb      	ldrh	r3, [r7, #20]
 8009384:	429a      	cmp	r2, r3
 8009386:	d101      	bne.n	800938c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	e089      	b.n	80094a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff fdf5 	bl	8008f80 <ptr_to_mem>
 8009396:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	791b      	ldrb	r3, [r3, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d13f      	bne.n	8009420 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80093a8:	d106      	bne.n	80093b8 <mem_trim+0xe8>
 80093aa:	4b41      	ldr	r3, [pc, #260]	; (80094b0 <mem_trim+0x1e0>)
 80093ac:	f240 22f5 	movw	r2, #757	; 0x2f5
 80093b0:	4943      	ldr	r1, [pc, #268]	; (80094c0 <mem_trim+0x1f0>)
 80093b2:	4841      	ldr	r0, [pc, #260]	; (80094b8 <mem_trim+0x1e8>)
 80093b4:	f00a fb78 	bl	8013aa8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	881b      	ldrh	r3, [r3, #0]
 80093bc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80093be:	8afa      	ldrh	r2, [r7, #22]
 80093c0:	8bfb      	ldrh	r3, [r7, #30]
 80093c2:	4413      	add	r3, r2
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3308      	adds	r3, #8
 80093c8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80093ca:	4b3e      	ldr	r3, [pc, #248]	; (80094c4 <mem_trim+0x1f4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d106      	bne.n	80093e2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80093d4:	89fb      	ldrh	r3, [r7, #14]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fdd2 	bl	8008f80 <ptr_to_mem>
 80093dc:	4603      	mov	r3, r0
 80093de:	4a39      	ldr	r2, [pc, #228]	; (80094c4 <mem_trim+0x1f4>)
 80093e0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80093e2:	89fb      	ldrh	r3, [r7, #14]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff fdcb 	bl	8008f80 <ptr_to_mem>
 80093ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	2200      	movs	r2, #0
 80093f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	89ba      	ldrh	r2, [r7, #12]
 80093f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	8afa      	ldrh	r2, [r7, #22]
 80093fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	89fa      	ldrh	r2, [r7, #14]
 8009402:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800940c:	d047      	beq.n	800949e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f7ff fdb4 	bl	8008f80 <ptr_to_mem>
 8009418:	4602      	mov	r2, r0
 800941a:	89fb      	ldrh	r3, [r7, #14]
 800941c:	8053      	strh	r3, [r2, #2]
 800941e:	e03e      	b.n	800949e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009420:	8bfb      	ldrh	r3, [r7, #30]
 8009422:	f103 0214 	add.w	r2, r3, #20
 8009426:	8abb      	ldrh	r3, [r7, #20]
 8009428:	429a      	cmp	r2, r3
 800942a:	d838      	bhi.n	800949e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800942c:	8afa      	ldrh	r2, [r7, #22]
 800942e:	8bfb      	ldrh	r3, [r7, #30]
 8009430:	4413      	add	r3, r2
 8009432:	b29b      	uxth	r3, r3
 8009434:	3308      	adds	r3, #8
 8009436:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009440:	d106      	bne.n	8009450 <mem_trim+0x180>
 8009442:	4b1b      	ldr	r3, [pc, #108]	; (80094b0 <mem_trim+0x1e0>)
 8009444:	f240 3216 	movw	r2, #790	; 0x316
 8009448:	491d      	ldr	r1, [pc, #116]	; (80094c0 <mem_trim+0x1f0>)
 800944a:	481b      	ldr	r0, [pc, #108]	; (80094b8 <mem_trim+0x1e8>)
 800944c:	f00a fb2c 	bl	8013aa8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	4618      	mov	r0, r3
 8009454:	f7ff fd94 	bl	8008f80 <ptr_to_mem>
 8009458:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800945a:	4b1a      	ldr	r3, [pc, #104]	; (80094c4 <mem_trim+0x1f4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	693a      	ldr	r2, [r7, #16]
 8009460:	429a      	cmp	r2, r3
 8009462:	d202      	bcs.n	800946a <mem_trim+0x19a>
      lfree = mem2;
 8009464:	4a17      	ldr	r2, [pc, #92]	; (80094c4 <mem_trim+0x1f4>)
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	2200      	movs	r2, #0
 800946e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	881a      	ldrh	r2, [r3, #0]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	8afa      	ldrh	r2, [r7, #22]
 800947c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	89fa      	ldrh	r2, [r7, #14]
 8009482:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800948c:	d007      	beq.n	800949e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	881b      	ldrh	r3, [r3, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fd74 	bl	8008f80 <ptr_to_mem>
 8009498:	4602      	mov	r2, r0
 800949a:	89fb      	ldrh	r3, [r7, #14]
 800949c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800949e:	687b      	ldr	r3, [r7, #4]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3720      	adds	r7, #32
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000294 	.word	0x20000294
 80094ac:	20000298 	.word	0x20000298
 80094b0:	08017208 	.word	0x08017208
 80094b4:	08017378 	.word	0x08017378
 80094b8:	08017250 	.word	0x08017250
 80094bc:	08017390 	.word	0x08017390
 80094c0:	080173b0 	.word	0x080173b0
 80094c4:	2000029c 	.word	0x2000029c

080094c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <mem_malloc+0x14>
    return NULL;
 80094d8:	2300      	movs	r3, #0
 80094da:	e0d9      	b.n	8009690 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80094dc:	88fb      	ldrh	r3, [r7, #6]
 80094de:	3303      	adds	r3, #3
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f023 0303 	bic.w	r3, r3, #3
 80094e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80094e8:	8bbb      	ldrh	r3, [r7, #28]
 80094ea:	2b0b      	cmp	r3, #11
 80094ec:	d801      	bhi.n	80094f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80094ee:	230c      	movs	r3, #12
 80094f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80094f2:	8bbb      	ldrh	r3, [r7, #28]
 80094f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80094f8:	d803      	bhi.n	8009502 <mem_malloc+0x3a>
 80094fa:	8bba      	ldrh	r2, [r7, #28]
 80094fc:	88fb      	ldrh	r3, [r7, #6]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d201      	bcs.n	8009506 <mem_malloc+0x3e>
    return NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	e0c4      	b.n	8009690 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009506:	4b64      	ldr	r3, [pc, #400]	; (8009698 <mem_malloc+0x1d0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff fd4a 	bl	8008fa4 <mem_to_ptr>
 8009510:	4603      	mov	r3, r0
 8009512:	83fb      	strh	r3, [r7, #30]
 8009514:	e0b4      	b.n	8009680 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009516:	8bfb      	ldrh	r3, [r7, #30]
 8009518:	4618      	mov	r0, r3
 800951a:	f7ff fd31 	bl	8008f80 <ptr_to_mem>
 800951e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	791b      	ldrb	r3, [r3, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f040 80a4 	bne.w	8009672 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	8bfb      	ldrh	r3, [r7, #30]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	f1a3 0208 	sub.w	r2, r3, #8
 8009538:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800953a:	429a      	cmp	r2, r3
 800953c:	f0c0 8099 	bcc.w	8009672 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	8bfb      	ldrh	r3, [r7, #30]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	f1a3 0208 	sub.w	r2, r3, #8
 800954e:	8bbb      	ldrh	r3, [r7, #28]
 8009550:	3314      	adds	r3, #20
 8009552:	429a      	cmp	r2, r3
 8009554:	d333      	bcc.n	80095be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009556:	8bfa      	ldrh	r2, [r7, #30]
 8009558:	8bbb      	ldrh	r3, [r7, #28]
 800955a:	4413      	add	r3, r2
 800955c:	b29b      	uxth	r3, r3
 800955e:	3308      	adds	r3, #8
 8009560:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009562:	8a7b      	ldrh	r3, [r7, #18]
 8009564:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009568:	d106      	bne.n	8009578 <mem_malloc+0xb0>
 800956a:	4b4c      	ldr	r3, [pc, #304]	; (800969c <mem_malloc+0x1d4>)
 800956c:	f240 3287 	movw	r2, #903	; 0x387
 8009570:	494b      	ldr	r1, [pc, #300]	; (80096a0 <mem_malloc+0x1d8>)
 8009572:	484c      	ldr	r0, [pc, #304]	; (80096a4 <mem_malloc+0x1dc>)
 8009574:	f00a fa98 	bl	8013aa8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009578:	8a7b      	ldrh	r3, [r7, #18]
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff fd00 	bl	8008f80 <ptr_to_mem>
 8009580:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	881a      	ldrh	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8bfa      	ldrh	r2, [r7, #30]
 8009594:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	8a7a      	ldrh	r2, [r7, #18]
 800959a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2201      	movs	r2, #1
 80095a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80095aa:	d00b      	beq.n	80095c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff fce5 	bl	8008f80 <ptr_to_mem>
 80095b6:	4602      	mov	r2, r0
 80095b8:	8a7b      	ldrh	r3, [r7, #18]
 80095ba:	8053      	strh	r3, [r2, #2]
 80095bc:	e002      	b.n	80095c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2201      	movs	r2, #1
 80095c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80095c4:	4b34      	ldr	r3, [pc, #208]	; (8009698 <mem_malloc+0x1d0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d127      	bne.n	800961e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80095ce:	4b32      	ldr	r3, [pc, #200]	; (8009698 <mem_malloc+0x1d0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80095d4:	e005      	b.n	80095e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff fcd0 	bl	8008f80 <ptr_to_mem>
 80095e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	791b      	ldrb	r3, [r3, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d004      	beq.n	80095f4 <mem_malloc+0x12c>
 80095ea:	4b2f      	ldr	r3, [pc, #188]	; (80096a8 <mem_malloc+0x1e0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d1f0      	bne.n	80095d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80095f4:	4a28      	ldr	r2, [pc, #160]	; (8009698 <mem_malloc+0x1d0>)
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80095fa:	4b27      	ldr	r3, [pc, #156]	; (8009698 <mem_malloc+0x1d0>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b2a      	ldr	r3, [pc, #168]	; (80096a8 <mem_malloc+0x1e0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d00b      	beq.n	800961e <mem_malloc+0x156>
 8009606:	4b24      	ldr	r3, [pc, #144]	; (8009698 <mem_malloc+0x1d0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	791b      	ldrb	r3, [r3, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d006      	beq.n	800961e <mem_malloc+0x156>
 8009610:	4b22      	ldr	r3, [pc, #136]	; (800969c <mem_malloc+0x1d4>)
 8009612:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009616:	4925      	ldr	r1, [pc, #148]	; (80096ac <mem_malloc+0x1e4>)
 8009618:	4822      	ldr	r0, [pc, #136]	; (80096a4 <mem_malloc+0x1dc>)
 800961a:	f00a fa45 	bl	8013aa8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800961e:	8bba      	ldrh	r2, [r7, #28]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	4413      	add	r3, r2
 8009624:	3308      	adds	r3, #8
 8009626:	4a20      	ldr	r2, [pc, #128]	; (80096a8 <mem_malloc+0x1e0>)
 8009628:	6812      	ldr	r2, [r2, #0]
 800962a:	4293      	cmp	r3, r2
 800962c:	d906      	bls.n	800963c <mem_malloc+0x174>
 800962e:	4b1b      	ldr	r3, [pc, #108]	; (800969c <mem_malloc+0x1d4>)
 8009630:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009634:	491e      	ldr	r1, [pc, #120]	; (80096b0 <mem_malloc+0x1e8>)
 8009636:	481b      	ldr	r0, [pc, #108]	; (80096a4 <mem_malloc+0x1dc>)
 8009638:	f00a fa36 	bl	8013aa8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <mem_malloc+0x18c>
 8009646:	4b15      	ldr	r3, [pc, #84]	; (800969c <mem_malloc+0x1d4>)
 8009648:	f240 32bb 	movw	r2, #955	; 0x3bb
 800964c:	4919      	ldr	r1, [pc, #100]	; (80096b4 <mem_malloc+0x1ec>)
 800964e:	4815      	ldr	r0, [pc, #84]	; (80096a4 <mem_malloc+0x1dc>)
 8009650:	f00a fa2a 	bl	8013aa8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f003 0303 	and.w	r3, r3, #3
 800965a:	2b00      	cmp	r3, #0
 800965c:	d006      	beq.n	800966c <mem_malloc+0x1a4>
 800965e:	4b0f      	ldr	r3, [pc, #60]	; (800969c <mem_malloc+0x1d4>)
 8009660:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009664:	4914      	ldr	r1, [pc, #80]	; (80096b8 <mem_malloc+0x1f0>)
 8009666:	480f      	ldr	r0, [pc, #60]	; (80096a4 <mem_malloc+0x1dc>)
 8009668:	f00a fa1e 	bl	8013aa8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	3308      	adds	r3, #8
 8009670:	e00e      	b.n	8009690 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8009672:	8bfb      	ldrh	r3, [r7, #30]
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff fc83 	bl	8008f80 <ptr_to_mem>
 800967a:	4603      	mov	r3, r0
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009680:	8bfa      	ldrh	r2, [r7, #30]
 8009682:	8bbb      	ldrh	r3, [r7, #28]
 8009684:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8009688:	429a      	cmp	r2, r3
 800968a:	f4ff af44 	bcc.w	8009516 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	2000029c 	.word	0x2000029c
 800969c:	08017208 	.word	0x08017208
 80096a0:	080173b0 	.word	0x080173b0
 80096a4:	08017250 	.word	0x08017250
 80096a8:	20000298 	.word	0x20000298
 80096ac:	080173c4 	.word	0x080173c4
 80096b0:	080173e0 	.word	0x080173e0
 80096b4:	08017410 	.word	0x08017410
 80096b8:	08017440 	.word	0x08017440

080096bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	3303      	adds	r3, #3
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80096d8:	2300      	movs	r3, #0
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e011      	b.n	8009702 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	885b      	ldrh	r3, [r3, #2]
 8009706:	461a      	mov	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4293      	cmp	r3, r2
 800970c:	dbe7      	blt.n	80096de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800970e:	bf00      	nop
 8009710:	bf00      	nop
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009722:	2300      	movs	r3, #0
 8009724:	80fb      	strh	r3, [r7, #6]
 8009726:	e009      	b.n	800973c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009728:	88fb      	ldrh	r3, [r7, #6]
 800972a:	4a08      	ldr	r2, [pc, #32]	; (800974c <memp_init+0x30>)
 800972c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff ffc3 	bl	80096bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	3301      	adds	r3, #1
 800973a:	80fb      	strh	r3, [r7, #6]
 800973c:	88fb      	ldrh	r3, [r7, #6]
 800973e:	2b08      	cmp	r3, #8
 8009740:	d9f2      	bls.n	8009728 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009742:	bf00      	nop
 8009744:	bf00      	nop
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	08019c10 	.word	0x08019c10

08009750 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d012      	beq.n	800978c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	6812      	ldr	r2, [r2, #0]
 800976e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d006      	beq.n	8009788 <do_memp_malloc_pool+0x38>
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <do_memp_malloc_pool+0x48>)
 800977c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009780:	4906      	ldr	r1, [pc, #24]	; (800979c <do_memp_malloc_pool+0x4c>)
 8009782:	4807      	ldr	r0, [pc, #28]	; (80097a0 <do_memp_malloc_pool+0x50>)
 8009784:	f00a f990 	bl	8013aa8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	e000      	b.n	800978e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	08017464 	.word	0x08017464
 800979c:	08017494 	.word	0x08017494
 80097a0:	080174b8 	.word	0x080174b8

080097a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	2b08      	cmp	r3, #8
 80097b2:	d908      	bls.n	80097c6 <memp_malloc+0x22>
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <memp_malloc+0x3c>)
 80097b6:	f240 1257 	movw	r2, #343	; 0x157
 80097ba:	490a      	ldr	r1, [pc, #40]	; (80097e4 <memp_malloc+0x40>)
 80097bc:	480a      	ldr	r0, [pc, #40]	; (80097e8 <memp_malloc+0x44>)
 80097be:	f00a f973 	bl	8013aa8 <iprintf>
 80097c2:	2300      	movs	r3, #0
 80097c4:	e008      	b.n	80097d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	4a08      	ldr	r2, [pc, #32]	; (80097ec <memp_malloc+0x48>)
 80097ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7ff ffbe 	bl	8009750 <do_memp_malloc_pool>
 80097d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80097d6:	68fb      	ldr	r3, [r7, #12]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	08017464 	.word	0x08017464
 80097e4:	080174f4 	.word	0x080174f4
 80097e8:	080174b8 	.word	0x080174b8
 80097ec:	08019c10 	.word	0x08019c10

080097f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d006      	beq.n	8009812 <do_memp_free_pool+0x22>
 8009804:	4b0a      	ldr	r3, [pc, #40]	; (8009830 <do_memp_free_pool+0x40>)
 8009806:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800980a:	490a      	ldr	r1, [pc, #40]	; (8009834 <do_memp_free_pool+0x44>)
 800980c:	480a      	ldr	r0, [pc, #40]	; (8009838 <do_memp_free_pool+0x48>)
 800980e:	f00a f94b 	bl	8013aa8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8009828:	bf00      	nop
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	08017464 	.word	0x08017464
 8009834:	08017514 	.word	0x08017514
 8009838:	080174b8 	.word	0x080174b8

0800983c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	6039      	str	r1, [r7, #0]
 8009846:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	2b08      	cmp	r3, #8
 800984c:	d907      	bls.n	800985e <memp_free+0x22>
 800984e:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <memp_free+0x44>)
 8009850:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009854:	490b      	ldr	r1, [pc, #44]	; (8009884 <memp_free+0x48>)
 8009856:	480c      	ldr	r0, [pc, #48]	; (8009888 <memp_free+0x4c>)
 8009858:	f00a f926 	bl	8013aa8 <iprintf>
 800985c:	e00c      	b.n	8009878 <memp_free+0x3c>

  if (mem == NULL) {
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d008      	beq.n	8009876 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009864:	79fb      	ldrb	r3, [r7, #7]
 8009866:	4a09      	ldr	r2, [pc, #36]	; (800988c <memp_free+0x50>)
 8009868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800986c:	6839      	ldr	r1, [r7, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff ffbe 	bl	80097f0 <do_memp_free_pool>
 8009874:	e000      	b.n	8009878 <memp_free+0x3c>
    return;
 8009876:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	08017464 	.word	0x08017464
 8009884:	08017534 	.word	0x08017534
 8009888:	080174b8 	.word	0x080174b8
 800988c:	08019c10 	.word	0x08019c10

08009890 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009894:	bf00      	nop
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
	...

080098a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d108      	bne.n	80098c6 <netif_add+0x26>
 80098b4:	4b57      	ldr	r3, [pc, #348]	; (8009a14 <netif_add+0x174>)
 80098b6:	f240 1227 	movw	r2, #295	; 0x127
 80098ba:	4957      	ldr	r1, [pc, #348]	; (8009a18 <netif_add+0x178>)
 80098bc:	4857      	ldr	r0, [pc, #348]	; (8009a1c <netif_add+0x17c>)
 80098be:	f00a f8f3 	bl	8013aa8 <iprintf>
 80098c2:	2300      	movs	r3, #0
 80098c4:	e0a2      	b.n	8009a0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d108      	bne.n	80098de <netif_add+0x3e>
 80098cc:	4b51      	ldr	r3, [pc, #324]	; (8009a14 <netif_add+0x174>)
 80098ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 80098d2:	4953      	ldr	r1, [pc, #332]	; (8009a20 <netif_add+0x180>)
 80098d4:	4851      	ldr	r0, [pc, #324]	; (8009a1c <netif_add+0x17c>)
 80098d6:	f00a f8e7 	bl	8013aa8 <iprintf>
 80098da:	2300      	movs	r3, #0
 80098dc:	e096      	b.n	8009a0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80098e4:	4b4f      	ldr	r3, [pc, #316]	; (8009a24 <netif_add+0x184>)
 80098e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80098ee:	4b4d      	ldr	r3, [pc, #308]	; (8009a24 <netif_add+0x184>)
 80098f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80098f8:	4b4a      	ldr	r3, [pc, #296]	; (8009a24 <netif_add+0x184>)
 80098fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4a45      	ldr	r2, [pc, #276]	; (8009a28 <netif_add+0x188>)
 8009912:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a3a      	ldr	r2, [r7, #32]
 800992c:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 800992e:	4b3f      	ldr	r3, [pc, #252]	; (8009a2c <netif_add+0x18c>)
 8009930:	781a      	ldrb	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800993c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	68b9      	ldr	r1, [r7, #8]
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	f000 f913 	bl	8009b70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	4798      	blx	r3
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <netif_add+0xba>
    return NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	e058      	b.n	8009a0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009960:	2bff      	cmp	r3, #255	; 0xff
 8009962:	d103      	bne.n	800996c <netif_add+0xcc>
        netif->num = 0;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009970:	4b2f      	ldr	r3, [pc, #188]	; (8009a30 <netif_add+0x190>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	617b      	str	r3, [r7, #20]
 8009976:	e02b      	b.n	80099d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	429a      	cmp	r2, r3
 800997e:	d106      	bne.n	800998e <netif_add+0xee>
 8009980:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <netif_add+0x174>)
 8009982:	f240 128b 	movw	r2, #395	; 0x18b
 8009986:	492b      	ldr	r1, [pc, #172]	; (8009a34 <netif_add+0x194>)
 8009988:	4824      	ldr	r0, [pc, #144]	; (8009a1c <netif_add+0x17c>)
 800998a:	f00a f88d 	bl	8013aa8 <iprintf>
        num_netifs++;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3301      	adds	r3, #1
 8009992:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	2bff      	cmp	r3, #255	; 0xff
 8009998:	dd06      	ble.n	80099a8 <netif_add+0x108>
 800999a:	4b1e      	ldr	r3, [pc, #120]	; (8009a14 <netif_add+0x174>)
 800999c:	f240 128d 	movw	r2, #397	; 0x18d
 80099a0:	4925      	ldr	r1, [pc, #148]	; (8009a38 <netif_add+0x198>)
 80099a2:	481e      	ldr	r0, [pc, #120]	; (8009a1c <netif_add+0x17c>)
 80099a4:	f00a f880 	bl	8013aa8 <iprintf>
        if (netif2->num == netif->num) {
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d108      	bne.n	80099ca <netif_add+0x12a>
          netif->num++;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099be:	3301      	adds	r3, #1
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80099c8:	e005      	b.n	80099d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1d0      	bne.n	8009978 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1be      	bne.n	800995a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099e2:	2bfe      	cmp	r3, #254	; 0xfe
 80099e4:	d103      	bne.n	80099ee <netif_add+0x14e>
    netif_num = 0;
 80099e6:	4b11      	ldr	r3, [pc, #68]	; (8009a2c <netif_add+0x18c>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	e006      	b.n	80099fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099f4:	3301      	adds	r3, #1
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <netif_add+0x18c>)
 80099fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80099fc:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <netif_add+0x190>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009a04:	4a0a      	ldr	r2, [pc, #40]	; (8009a30 <netif_add+0x190>)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	08017550 	.word	0x08017550
 8009a18:	080175e4 	.word	0x080175e4
 8009a1c:	080175a0 	.word	0x080175a0
 8009a20:	08017600 	.word	0x08017600
 8009a24:	08019c74 	.word	0x08019c74
 8009a28:	08009d83 	.word	0x08009d83
 8009a2c:	200002c4 	.word	0x200002c4
 8009a30:	200090d4 	.word	0x200090d4
 8009a34:	08017624 	.word	0x08017624
 8009a38:	08017638 	.word	0x08017638

08009a3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f002 fb81 	bl	800c150 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f006 ffb1 	bl	80109b8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009a56:	bf00      	nop
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d106      	bne.n	8009a80 <netif_do_set_ipaddr+0x20>
 8009a72:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <netif_do_set_ipaddr+0x88>)
 8009a74:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009a78:	491c      	ldr	r1, [pc, #112]	; (8009aec <netif_do_set_ipaddr+0x8c>)
 8009a7a:	481d      	ldr	r0, [pc, #116]	; (8009af0 <netif_do_set_ipaddr+0x90>)
 8009a7c:	f00a f814 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <netif_do_set_ipaddr+0x34>
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <netif_do_set_ipaddr+0x88>)
 8009a88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009a8c:	4917      	ldr	r1, [pc, #92]	; (8009aec <netif_do_set_ipaddr+0x8c>)
 8009a8e:	4818      	ldr	r0, [pc, #96]	; (8009af0 <netif_do_set_ipaddr+0x90>)
 8009a90:	f00a f80a 	bl	8013aa8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d01c      	beq.n	8009adc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	3304      	adds	r3, #4
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009ab2:	f107 0314 	add.w	r3, r7, #20
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ffbf 	bl	8009a3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d002      	beq.n	8009aca <netif_do_set_ipaddr+0x6a>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	e000      	b.n	8009acc <netif_do_set_ipaddr+0x6c>
 8009aca:	2300      	movs	r3, #0
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 f8d2 	bl	8009c7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e000      	b.n	8009ade <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	08017550 	.word	0x08017550
 8009aec:	08017668 	.word	0x08017668
 8009af0:	080175a0 	.word	0x080175a0

08009af4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3308      	adds	r3, #8
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d00a      	beq.n	8009b24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <netif_do_set_netmask+0x26>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	e000      	b.n	8009b1c <netif_do_set_netmask+0x28>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8009b20:	2301      	movs	r3, #1
 8009b22:	e000      	b.n	8009b26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b085      	sub	sp, #20
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	330c      	adds	r3, #12
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d00a      	beq.n	8009b62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <netif_do_set_gw+0x26>
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	e000      	b.n	8009b5a <netif_do_set_gw+0x28>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009b82:	2300      	movs	r3, #0
 8009b84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009b8c:	4b1c      	ldr	r3, [pc, #112]	; (8009c00 <netif_set_addr+0x90>)
 8009b8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009b96:	4b1a      	ldr	r3, [pc, #104]	; (8009c00 <netif_set_addr+0x90>)
 8009b98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009ba0:	4b17      	ldr	r3, [pc, #92]	; (8009c00 <netif_set_addr+0x90>)
 8009ba2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d003      	beq.n	8009bb2 <netif_set_addr+0x42>
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <netif_set_addr+0x46>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <netif_set_addr+0x48>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d006      	beq.n	8009bce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009bc0:	f107 0310 	add.w	r3, r7, #16
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff ff49 	bl	8009a60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	6879      	ldr	r1, [r7, #4]
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7ff ff8e 	bl	8009af4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff ffa8 	bl	8009b32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d106      	bne.n	8009bf6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009be8:	f107 0310 	add.w	r3, r7, #16
 8009bec:	461a      	mov	r2, r3
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff ff35 	bl	8009a60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009bf6:	bf00      	nop
 8009bf8:	3720      	adds	r7, #32
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	08019c74 	.word	0x08019c74

08009c04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009c0c:	4a04      	ldr	r2, [pc, #16]	; (8009c20 <netif_set_default+0x1c>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009c12:	bf00      	nop
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	200090d8 	.word	0x200090d8

08009c24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d107      	bne.n	8009c42 <netif_set_up+0x1e>
 8009c32:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <netif_set_up+0x4c>)
 8009c34:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009c38:	490e      	ldr	r1, [pc, #56]	; (8009c74 <netif_set_up+0x50>)
 8009c3a:	480f      	ldr	r0, [pc, #60]	; (8009c78 <netif_set_up+0x54>)
 8009c3c:	f009 ff34 	bl	8013aa8 <iprintf>
 8009c40:	e013      	b.n	8009c6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10c      	bne.n	8009c6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009c62:	2103      	movs	r1, #3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f809 	bl	8009c7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	08017550 	.word	0x08017550
 8009c74:	080176d8 	.word	0x080176d8
 8009c78:	080175a0 	.word	0x080175a0

08009c7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d106      	bne.n	8009c9c <netif_issue_reports+0x20>
 8009c8e:	4b18      	ldr	r3, [pc, #96]	; (8009cf0 <netif_issue_reports+0x74>)
 8009c90:	f240 326d 	movw	r2, #877	; 0x36d
 8009c94:	4917      	ldr	r1, [pc, #92]	; (8009cf4 <netif_issue_reports+0x78>)
 8009c96:	4818      	ldr	r0, [pc, #96]	; (8009cf8 <netif_issue_reports+0x7c>)
 8009c98:	f009 ff06 	bl	8013aa8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d01e      	beq.n	8009ce8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009cb0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d017      	beq.n	8009ce8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d013      	beq.n	8009cea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d007      	beq.n	8009cea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f007 fdd3 	bl	801188c <etharp_request>
 8009ce6:	e000      	b.n	8009cea <netif_issue_reports+0x6e>
    return;
 8009ce8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	08017550 	.word	0x08017550
 8009cf4:	080176f4 	.word	0x080176f4
 8009cf8:	080175a0 	.word	0x080175a0

08009cfc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d107      	bne.n	8009d1a <netif_set_down+0x1e>
 8009d0a:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <netif_set_down+0x58>)
 8009d0c:	f240 329b 	movw	r2, #923	; 0x39b
 8009d10:	4911      	ldr	r1, [pc, #68]	; (8009d58 <netif_set_down+0x5c>)
 8009d12:	4812      	ldr	r0, [pc, #72]	; (8009d5c <netif_set_down+0x60>)
 8009d14:	f009 fec8 	bl	8013aa8 <iprintf>
 8009d18:	e019      	b.n	8009d4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d20:	f003 0301 	and.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d012      	beq.n	8009d4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009d40:	f003 0308 	and.w	r3, r3, #8
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f007 f95d 	bl	8011008 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	08017550 	.word	0x08017550
 8009d58:	08017718 	.word	0x08017718
 8009d5c:	080175a0 	.word	0x080175a0

08009d60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	61da      	str	r2, [r3, #28]
  }
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009d8e:	f06f 030b 	mvn.w	r3, #11
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
	...

08009da0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	4603      	mov	r3, r0
 8009da8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d013      	beq.n	8009dd8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009db0:	4b0d      	ldr	r3, [pc, #52]	; (8009de8 <netif_get_by_index+0x48>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	e00c      	b.n	8009dd2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	79fa      	ldrb	r2, [r7, #7]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d101      	bne.n	8009dcc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	e006      	b.n	8009dda <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1ef      	bne.n	8009db8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	200090d4 	.word	0x200090d4

08009dec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009df2:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <pbuf_free_ooseq+0x38>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009df8:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <pbuf_free_ooseq+0x3c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	607b      	str	r3, [r7, #4]
 8009dfe:	e00a      	b.n	8009e16 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f002 f9df 	bl	800c1cc <tcp_free_ooseq>
      return;
 8009e0e:	e005      	b.n	8009e1c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	607b      	str	r3, [r7, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f1      	bne.n	8009e00 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	200090dc 	.word	0x200090dc
 8009e28:	200090e4 	.word	0x200090e4

08009e2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009e30:	4b03      	ldr	r3, [pc, #12]	; (8009e40 <pbuf_pool_is_empty+0x14>)
 8009e32:	2201      	movs	r2, #1
 8009e34:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009e36:	bf00      	nop
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	200090dc 	.word	0x200090dc

08009e44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	460b      	mov	r3, r1
 8009e54:	80fb      	strh	r3, [r7, #6]
 8009e56:	4613      	mov	r3, r2
 8009e58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	88fa      	ldrh	r2, [r7, #6]
 8009e6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	88ba      	ldrh	r2, [r7, #4]
 8009e70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009e72:	8b3b      	ldrh	r3, [r7, #24]
 8009e74:	b2da      	uxtb	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	7f3a      	ldrb	r2, [r7, #28]
 8009e7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2201      	movs	r2, #1
 8009e84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	73da      	strb	r2, [r3, #15]
}
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08c      	sub	sp, #48	; 0x30
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	71fb      	strb	r3, [r7, #7]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	80bb      	strh	r3, [r7, #4]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009eae:	887b      	ldrh	r3, [r7, #2]
 8009eb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009eb4:	d07f      	beq.n	8009fb6 <pbuf_alloc+0x11e>
 8009eb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009eba:	f300 80c8 	bgt.w	800a04e <pbuf_alloc+0x1b6>
 8009ebe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009ec2:	d010      	beq.n	8009ee6 <pbuf_alloc+0x4e>
 8009ec4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009ec8:	f300 80c1 	bgt.w	800a04e <pbuf_alloc+0x1b6>
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d002      	beq.n	8009ed6 <pbuf_alloc+0x3e>
 8009ed0:	2b41      	cmp	r3, #65	; 0x41
 8009ed2:	f040 80bc 	bne.w	800a04e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009ed6:	887a      	ldrh	r2, [r7, #2]
 8009ed8:	88bb      	ldrh	r3, [r7, #4]
 8009eda:	4619      	mov	r1, r3
 8009edc:	2000      	movs	r0, #0
 8009ede:	f000 f8d1 	bl	800a084 <pbuf_alloc_reference>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009ee4:	e0bd      	b.n	800a062 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009eee:	88bb      	ldrh	r3, [r7, #4]
 8009ef0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009ef2:	2008      	movs	r0, #8
 8009ef4:	f7ff fc56 	bl	80097a4 <memp_malloc>
 8009ef8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d109      	bne.n	8009f14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009f00:	f7ff ff94 	bl	8009e2c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d002      	beq.n	8009f10 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f0c:	f000 faa8 	bl	800a460 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009f10:	2300      	movs	r3, #0
 8009f12:	e0a7      	b.n	800a064 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f16:	3303      	adds	r3, #3
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	f023 0303 	bic.w	r3, r3, #3
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	8b7a      	ldrh	r2, [r7, #26]
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	bf28      	it	cs
 8009f2c:	4613      	movcs	r3, r2
 8009f2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f32:	3310      	adds	r3, #16
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	4413      	add	r3, r2
 8009f38:	3303      	adds	r3, #3
 8009f3a:	f023 0303 	bic.w	r3, r3, #3
 8009f3e:	4618      	mov	r0, r3
 8009f40:	89f9      	ldrh	r1, [r7, #14]
 8009f42:	8b7a      	ldrh	r2, [r7, #26]
 8009f44:	2300      	movs	r3, #0
 8009f46:	9301      	str	r3, [sp, #4]
 8009f48:	887b      	ldrh	r3, [r7, #2]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4601      	mov	r1, r0
 8009f50:	6938      	ldr	r0, [r7, #16]
 8009f52:	f7ff ff77 	bl	8009e44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <pbuf_alloc+0xd8>
 8009f62:	4b42      	ldr	r3, [pc, #264]	; (800a06c <pbuf_alloc+0x1d4>)
 8009f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f68:	4941      	ldr	r1, [pc, #260]	; (800a070 <pbuf_alloc+0x1d8>)
 8009f6a:	4842      	ldr	r0, [pc, #264]	; (800a074 <pbuf_alloc+0x1dc>)
 8009f6c:	f009 fd9c 	bl	8013aa8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009f70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f72:	3303      	adds	r3, #3
 8009f74:	f023 0303 	bic.w	r3, r3, #3
 8009f78:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009f7c:	d106      	bne.n	8009f8c <pbuf_alloc+0xf4>
 8009f7e:	4b3b      	ldr	r3, [pc, #236]	; (800a06c <pbuf_alloc+0x1d4>)
 8009f80:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009f84:	493c      	ldr	r1, [pc, #240]	; (800a078 <pbuf_alloc+0x1e0>)
 8009f86:	483b      	ldr	r0, [pc, #236]	; (800a074 <pbuf_alloc+0x1dc>)
 8009f88:	f009 fd8e 	bl	8013aa8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d102      	bne.n	8009f98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
 8009f96:	e002      	b.n	8009f9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009fa2:	8b7a      	ldrh	r2, [r7, #26]
 8009fa4:	89fb      	ldrh	r3, [r7, #14]
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009fae:	8b7b      	ldrh	r3, [r7, #26]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d19e      	bne.n	8009ef2 <pbuf_alloc+0x5a>
      break;
 8009fb4:	e055      	b.n	800a062 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009fb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fb8:	3303      	adds	r3, #3
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	f023 0303 	bic.w	r3, r3, #3
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	88bb      	ldrh	r3, [r7, #4]
 8009fc4:	3303      	adds	r3, #3
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	f023 0303 	bic.w	r3, r3, #3
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	4413      	add	r3, r2
 8009fd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009fd2:	8b3b      	ldrh	r3, [r7, #24]
 8009fd4:	3310      	adds	r3, #16
 8009fd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009fd8:	8b3a      	ldrh	r2, [r7, #24]
 8009fda:	88bb      	ldrh	r3, [r7, #4]
 8009fdc:	3303      	adds	r3, #3
 8009fde:	f023 0303 	bic.w	r3, r3, #3
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d306      	bcc.n	8009ff4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009fe6:	8afa      	ldrh	r2, [r7, #22]
 8009fe8:	88bb      	ldrh	r3, [r7, #4]
 8009fea:	3303      	adds	r3, #3
 8009fec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d201      	bcs.n	8009ff8 <pbuf_alloc+0x160>
        return NULL;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e035      	b.n	800a064 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009ff8:	8afb      	ldrh	r3, [r7, #22]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff fa64 	bl	80094c8 <mem_malloc>
 800a000:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <pbuf_alloc+0x174>
        return NULL;
 800a008:	2300      	movs	r3, #0
 800a00a:	e02b      	b.n	800a064 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a00c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a00e:	3310      	adds	r3, #16
 800a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a012:	4413      	add	r3, r2
 800a014:	3303      	adds	r3, #3
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	4618      	mov	r0, r3
 800a01c:	88b9      	ldrh	r1, [r7, #4]
 800a01e:	88ba      	ldrh	r2, [r7, #4]
 800a020:	2300      	movs	r3, #0
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	887b      	ldrh	r3, [r7, #2]
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	460b      	mov	r3, r1
 800a02a:	4601      	mov	r1, r0
 800a02c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a02e:	f7ff ff09 	bl	8009e44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d010      	beq.n	800a060 <pbuf_alloc+0x1c8>
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <pbuf_alloc+0x1d4>)
 800a040:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a044:	490d      	ldr	r1, [pc, #52]	; (800a07c <pbuf_alloc+0x1e4>)
 800a046:	480b      	ldr	r0, [pc, #44]	; (800a074 <pbuf_alloc+0x1dc>)
 800a048:	f009 fd2e 	bl	8013aa8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a04c:	e008      	b.n	800a060 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a04e:	4b07      	ldr	r3, [pc, #28]	; (800a06c <pbuf_alloc+0x1d4>)
 800a050:	f240 1227 	movw	r2, #295	; 0x127
 800a054:	490a      	ldr	r1, [pc, #40]	; (800a080 <pbuf_alloc+0x1e8>)
 800a056:	4807      	ldr	r0, [pc, #28]	; (800a074 <pbuf_alloc+0x1dc>)
 800a058:	f009 fd26 	bl	8013aa8 <iprintf>
      return NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	e001      	b.n	800a064 <pbuf_alloc+0x1cc>
      break;
 800a060:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a064:	4618      	mov	r0, r3
 800a066:	3728      	adds	r7, #40	; 0x28
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08017780 	.word	0x08017780
 800a070:	080177b0 	.word	0x080177b0
 800a074:	080177e0 	.word	0x080177e0
 800a078:	08017808 	.word	0x08017808
 800a07c:	0801783c 	.word	0x0801783c
 800a080:	08017868 	.word	0x08017868

0800a084 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af02      	add	r7, sp, #8
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	460b      	mov	r3, r1
 800a08e:	807b      	strh	r3, [r7, #2]
 800a090:	4613      	mov	r3, r2
 800a092:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a094:	883b      	ldrh	r3, [r7, #0]
 800a096:	2b41      	cmp	r3, #65	; 0x41
 800a098:	d009      	beq.n	800a0ae <pbuf_alloc_reference+0x2a>
 800a09a:	883b      	ldrh	r3, [r7, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d006      	beq.n	800a0ae <pbuf_alloc_reference+0x2a>
 800a0a0:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <pbuf_alloc_reference+0x5c>)
 800a0a2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a0a6:	490f      	ldr	r1, [pc, #60]	; (800a0e4 <pbuf_alloc_reference+0x60>)
 800a0a8:	480f      	ldr	r0, [pc, #60]	; (800a0e8 <pbuf_alloc_reference+0x64>)
 800a0aa:	f009 fcfd 	bl	8013aa8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a0ae:	2007      	movs	r0, #7
 800a0b0:	f7ff fb78 	bl	80097a4 <memp_malloc>
 800a0b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e00b      	b.n	800a0d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a0c0:	8879      	ldrh	r1, [r7, #2]
 800a0c2:	887a      	ldrh	r2, [r7, #2]
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	883b      	ldrh	r3, [r7, #0]
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7ff feb7 	bl	8009e44 <pbuf_init_alloced_pbuf>
  return p;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	08017780 	.word	0x08017780
 800a0e4:	08017884 	.word	0x08017884
 800a0e8:	080177e0 	.word	0x080177e0

0800a0ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b088      	sub	sp, #32
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	81bb      	strh	r3, [r7, #12]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a104:	8a7b      	ldrh	r3, [r7, #18]
 800a106:	3303      	adds	r3, #3
 800a108:	f023 0203 	bic.w	r2, r3, #3
 800a10c:	89bb      	ldrh	r3, [r7, #12]
 800a10e:	441a      	add	r2, r3
 800a110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a112:	429a      	cmp	r2, r3
 800a114:	d901      	bls.n	800a11a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a116:	2300      	movs	r3, #0
 800a118:	e018      	b.n	800a14c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d007      	beq.n	800a130 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a120:	8a7b      	ldrh	r3, [r7, #18]
 800a122:	3303      	adds	r3, #3
 800a124:	f023 0303 	bic.w	r3, r3, #3
 800a128:	6a3a      	ldr	r2, [r7, #32]
 800a12a:	4413      	add	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	e001      	b.n	800a134 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a130:	2300      	movs	r3, #0
 800a132:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	89b9      	ldrh	r1, [r7, #12]
 800a138:	89ba      	ldrh	r2, [r7, #12]
 800a13a:	2302      	movs	r3, #2
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	897b      	ldrh	r3, [r7, #10]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	460b      	mov	r3, r1
 800a144:	6979      	ldr	r1, [r7, #20]
 800a146:	f7ff fe7d 	bl	8009e44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a14a:	687b      	ldr	r3, [r7, #4]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <pbuf_realloc+0x20>
 800a166:	4b3a      	ldr	r3, [pc, #232]	; (800a250 <pbuf_realloc+0xfc>)
 800a168:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a16c:	4939      	ldr	r1, [pc, #228]	; (800a254 <pbuf_realloc+0x100>)
 800a16e:	483a      	ldr	r0, [pc, #232]	; (800a258 <pbuf_realloc+0x104>)
 800a170:	f009 fc9a 	bl	8013aa8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	891b      	ldrh	r3, [r3, #8]
 800a178:	887a      	ldrh	r2, [r7, #2]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d263      	bcs.n	800a246 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	891a      	ldrh	r2, [r3, #8]
 800a182:	887b      	ldrh	r3, [r7, #2]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a188:	887b      	ldrh	r3, [r7, #2]
 800a18a:	817b      	strh	r3, [r7, #10]
  q = p;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a190:	e018      	b.n	800a1c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	895b      	ldrh	r3, [r3, #10]
 800a196:	897a      	ldrh	r2, [r7, #10]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	891a      	ldrh	r2, [r3, #8]
 800a1a0:	893b      	ldrh	r3, [r7, #8]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <pbuf_realloc+0x70>
 800a1b6:	4b26      	ldr	r3, [pc, #152]	; (800a250 <pbuf_realloc+0xfc>)
 800a1b8:	f240 12af 	movw	r2, #431	; 0x1af
 800a1bc:	4927      	ldr	r1, [pc, #156]	; (800a25c <pbuf_realloc+0x108>)
 800a1be:	4826      	ldr	r0, [pc, #152]	; (800a258 <pbuf_realloc+0x104>)
 800a1c0:	f009 fc72 	bl	8013aa8 <iprintf>
  while (rem_len > q->len) {
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	895b      	ldrh	r3, [r3, #10]
 800a1c8:	897a      	ldrh	r2, [r7, #10]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d8e1      	bhi.n	800a192 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	7b1b      	ldrb	r3, [r3, #12]
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d121      	bne.n	800a21e <pbuf_realloc+0xca>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	895b      	ldrh	r3, [r3, #10]
 800a1de:	897a      	ldrh	r2, [r7, #10]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d01c      	beq.n	800a21e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	7b5b      	ldrb	r3, [r3, #13]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d116      	bne.n	800a21e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	897b      	ldrh	r3, [r7, #10]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	4619      	mov	r1, r3
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff f864 	bl	80092d0 <mem_trim>
 800a208:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d106      	bne.n	800a21e <pbuf_realloc+0xca>
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <pbuf_realloc+0xfc>)
 800a212:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a216:	4912      	ldr	r1, [pc, #72]	; (800a260 <pbuf_realloc+0x10c>)
 800a218:	480f      	ldr	r0, [pc, #60]	; (800a258 <pbuf_realloc+0x104>)
 800a21a:	f009 fc45 	bl	8013aa8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	897a      	ldrh	r2, [r7, #10]
 800a222:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	895a      	ldrh	r2, [r3, #10]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 f911 	bl	800a460 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e000      	b.n	800a248 <pbuf_realloc+0xf4>
    return;
 800a246:	bf00      	nop

}
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	08017780 	.word	0x08017780
 800a254:	08017898 	.word	0x08017898
 800a258:	080177e0 	.word	0x080177e0
 800a25c:	080178b0 	.word	0x080178b0
 800a260:	080178c8 	.word	0x080178c8

0800a264 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d106      	bne.n	800a286 <pbuf_add_header_impl+0x22>
 800a278:	4b2b      	ldr	r3, [pc, #172]	; (800a328 <pbuf_add_header_impl+0xc4>)
 800a27a:	f240 12df 	movw	r2, #479	; 0x1df
 800a27e:	492b      	ldr	r1, [pc, #172]	; (800a32c <pbuf_add_header_impl+0xc8>)
 800a280:	482b      	ldr	r0, [pc, #172]	; (800a330 <pbuf_add_header_impl+0xcc>)
 800a282:	f009 fc11 	bl	8013aa8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <pbuf_add_header_impl+0x30>
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a292:	d301      	bcc.n	800a298 <pbuf_add_header_impl+0x34>
    return 1;
 800a294:	2301      	movs	r3, #1
 800a296:	e043      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d101      	bne.n	800a2a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e03e      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	891a      	ldrh	r2, [r3, #8]
 800a2aa:	8a7b      	ldrh	r3, [r7, #18]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	8a7a      	ldrh	r2, [r7, #18]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d901      	bls.n	800a2ba <pbuf_add_header_impl+0x56>
    return 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e032      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	7b1b      	ldrb	r3, [r3, #12]
 800a2be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a2c0:	8a3b      	ldrh	r3, [r7, #16]
 800a2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00c      	beq.n	800a2e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	685a      	ldr	r2, [r3, #4]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	425b      	negs	r3, r3
 800a2d2:	4413      	add	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3310      	adds	r3, #16
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d20d      	bcs.n	800a2fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e01d      	b.n	800a320 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a2e4:	79fb      	ldrb	r3, [r7, #7]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	425b      	negs	r3, r3
 800a2f2:	4413      	add	r3, r2
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	e001      	b.n	800a2fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e011      	b.n	800a320 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	895a      	ldrh	r2, [r3, #10]
 800a306:	8a7b      	ldrh	r3, [r7, #18]
 800a308:	4413      	add	r3, r2
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	891a      	ldrh	r2, [r3, #8]
 800a314:	8a7b      	ldrh	r3, [r7, #18]
 800a316:	4413      	add	r3, r2
 800a318:	b29a      	uxth	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	811a      	strh	r2, [r3, #8]


  return 0;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	08017780 	.word	0x08017780
 800a32c:	080178e4 	.word	0x080178e4
 800a330:	080177e0 	.word	0x080177e0

0800a334 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a33e:	2200      	movs	r2, #0
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff ff8e 	bl	800a264 <pbuf_add_header_impl>
 800a348:	4603      	mov	r3, r0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <pbuf_remove_header+0x1e>
 800a364:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <pbuf_remove_header+0x94>)
 800a366:	f240 224b 	movw	r2, #587	; 0x24b
 800a36a:	4920      	ldr	r1, [pc, #128]	; (800a3ec <pbuf_remove_header+0x98>)
 800a36c:	4820      	ldr	r0, [pc, #128]	; (800a3f0 <pbuf_remove_header+0x9c>)
 800a36e:	f009 fb9b 	bl	8013aa8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d003      	beq.n	800a380 <pbuf_remove_header+0x2c>
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a37e:	d301      	bcc.n	800a384 <pbuf_remove_header+0x30>
    return 1;
 800a380:	2301      	movs	r3, #1
 800a382:	e02c      	b.n	800a3de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <pbuf_remove_header+0x3a>
    return 0;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e027      	b.n	800a3de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	895b      	ldrh	r3, [r3, #10]
 800a396:	89fa      	ldrh	r2, [r7, #14]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d908      	bls.n	800a3ae <pbuf_remove_header+0x5a>
 800a39c:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <pbuf_remove_header+0x94>)
 800a39e:	f240 2255 	movw	r2, #597	; 0x255
 800a3a2:	4914      	ldr	r1, [pc, #80]	; (800a3f4 <pbuf_remove_header+0xa0>)
 800a3a4:	4812      	ldr	r0, [pc, #72]	; (800a3f0 <pbuf_remove_header+0x9c>)
 800a3a6:	f009 fb7f 	bl	8013aa8 <iprintf>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e017      	b.n	800a3de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	441a      	add	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	895a      	ldrh	r2, [r3, #10]
 800a3c4:	89fb      	ldrh	r3, [r7, #14]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	891a      	ldrh	r2, [r3, #8]
 800a3d2:	89fb      	ldrh	r3, [r7, #14]
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	08017780 	.word	0x08017780
 800a3ec:	080178e4 	.word	0x080178e4
 800a3f0:	080177e0 	.word	0x080177e0
 800a3f4:	080178f0 	.word	0x080178f0

0800a3f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	807b      	strh	r3, [r7, #2]
 800a404:	4613      	mov	r3, r2
 800a406:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800a408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	da08      	bge.n	800a422 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a410:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a414:	425b      	negs	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff ff9b 	bl	800a354 <pbuf_remove_header>
 800a41e:	4603      	mov	r3, r0
 800a420:	e007      	b.n	800a432 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a426:	787a      	ldrb	r2, [r7, #1]
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff ff1a 	bl	800a264 <pbuf_add_header_impl>
 800a430:	4603      	mov	r3, r0
  }
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800a446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a44a:	2201      	movs	r2, #1
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff ffd2 	bl	800a3f8 <pbuf_header_impl>
 800a454:	4603      	mov	r3, r0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d106      	bne.n	800a482 <pbuf_free+0x22>
 800a474:	4b38      	ldr	r3, [pc, #224]	; (800a558 <pbuf_free+0xf8>)
 800a476:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a47a:	4938      	ldr	r1, [pc, #224]	; (800a55c <pbuf_free+0xfc>)
 800a47c:	4838      	ldr	r0, [pc, #224]	; (800a560 <pbuf_free+0x100>)
 800a47e:	f009 fb13 	bl	8013aa8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a482:	2300      	movs	r3, #0
 800a484:	e063      	b.n	800a54e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a48a:	e05c      	b.n	800a546 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	7b9b      	ldrb	r3, [r3, #14]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <pbuf_free+0x42>
 800a494:	4b30      	ldr	r3, [pc, #192]	; (800a558 <pbuf_free+0xf8>)
 800a496:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a49a:	4932      	ldr	r1, [pc, #200]	; (800a564 <pbuf_free+0x104>)
 800a49c:	4830      	ldr	r0, [pc, #192]	; (800a560 <pbuf_free+0x100>)
 800a49e:	f009 fb03 	bl	8013aa8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	7b9b      	ldrb	r3, [r3, #14]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	739a      	strb	r2, [r3, #14]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	7b9b      	ldrb	r3, [r3, #14]
 800a4b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a4b4:	7dbb      	ldrb	r3, [r7, #22]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d143      	bne.n	800a542 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	7b1b      	ldrb	r3, [r3, #12]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	7b5b      	ldrb	r3, [r3, #13]
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d011      	beq.n	800a4fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <pbuf_free+0x90>
 800a4e2:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <pbuf_free+0xf8>)
 800a4e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a4e8:	491f      	ldr	r1, [pc, #124]	; (800a568 <pbuf_free+0x108>)
 800a4ea:	481d      	ldr	r0, [pc, #116]	; (800a560 <pbuf_free+0x100>)
 800a4ec:	f009 fadc 	bl	8013aa8 <iprintf>
        pc->custom_free_function(p);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
 800a4f8:	e01d      	b.n	800a536 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d104      	bne.n	800a50a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	2008      	movs	r0, #8
 800a504:	f7ff f99a 	bl	800983c <memp_free>
 800a508:	e015      	b.n	800a536 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d104      	bne.n	800a51a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800a510:	6879      	ldr	r1, [r7, #4]
 800a512:	2007      	movs	r0, #7
 800a514:	f7ff f992 	bl	800983c <memp_free>
 800a518:	e00d      	b.n	800a536 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <pbuf_free+0xc8>
          mem_free(p);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f7fe fe6b 	bl	80091fc <mem_free>
 800a526:	e006      	b.n	800a536 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800a528:	4b0b      	ldr	r3, [pc, #44]	; (800a558 <pbuf_free+0xf8>)
 800a52a:	f240 320f 	movw	r2, #783	; 0x30f
 800a52e:	490f      	ldr	r1, [pc, #60]	; (800a56c <pbuf_free+0x10c>)
 800a530:	480b      	ldr	r0, [pc, #44]	; (800a560 <pbuf_free+0x100>)
 800a532:	f009 fab9 	bl	8013aa8 <iprintf>
        }
      }
      count++;
 800a536:	7dfb      	ldrb	r3, [r7, #23]
 800a538:	3301      	adds	r3, #1
 800a53a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	607b      	str	r3, [r7, #4]
 800a540:	e001      	b.n	800a546 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d19f      	bne.n	800a48c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	08017780 	.word	0x08017780
 800a55c:	080178e4 	.word	0x080178e4
 800a560:	080177e0 	.word	0x080177e0
 800a564:	08017910 	.word	0x08017910
 800a568:	08017928 	.word	0x08017928
 800a56c:	0801794c 	.word	0x0801794c

0800a570 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a57c:	e005      	b.n	800a58a <pbuf_clen+0x1a>
    ++len;
 800a57e:	89fb      	ldrh	r3, [r7, #14]
 800a580:	3301      	adds	r3, #1
 800a582:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1f6      	bne.n	800a57e <pbuf_clen+0xe>
  }
  return len;
 800a590:	89fb      	ldrh	r3, [r7, #14]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
	...

0800a5a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d010      	beq.n	800a5d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	7b9b      	ldrb	r3, [r3, #14]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7b9b      	ldrb	r3, [r3, #14]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <pbuf_ref+0x30>
 800a5c2:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <pbuf_ref+0x38>)
 800a5c4:	f240 3242 	movw	r2, #834	; 0x342
 800a5c8:	4904      	ldr	r1, [pc, #16]	; (800a5dc <pbuf_ref+0x3c>)
 800a5ca:	4805      	ldr	r0, [pc, #20]	; (800a5e0 <pbuf_ref+0x40>)
 800a5cc:	f009 fa6c 	bl	8013aa8 <iprintf>
  }
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	08017780 	.word	0x08017780
 800a5dc:	08017960 	.word	0x08017960
 800a5e0:	080177e0 	.word	0x080177e0

0800a5e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <pbuf_cat+0x16>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d107      	bne.n	800a60a <pbuf_cat+0x26>
 800a5fa:	4b20      	ldr	r3, [pc, #128]	; (800a67c <pbuf_cat+0x98>)
 800a5fc:	f240 3259 	movw	r2, #857	; 0x359
 800a600:	491f      	ldr	r1, [pc, #124]	; (800a680 <pbuf_cat+0x9c>)
 800a602:	4820      	ldr	r0, [pc, #128]	; (800a684 <pbuf_cat+0xa0>)
 800a604:	f009 fa50 	bl	8013aa8 <iprintf>
 800a608:	e034      	b.n	800a674 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e00a      	b.n	800a626 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	891a      	ldrh	r2, [r3, #8]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	891b      	ldrh	r3, [r3, #8]
 800a618:	4413      	add	r3, r2
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1f0      	bne.n	800a610 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	891a      	ldrh	r2, [r3, #8]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	895b      	ldrh	r3, [r3, #10]
 800a636:	429a      	cmp	r2, r3
 800a638:	d006      	beq.n	800a648 <pbuf_cat+0x64>
 800a63a:	4b10      	ldr	r3, [pc, #64]	; (800a67c <pbuf_cat+0x98>)
 800a63c:	f240 3262 	movw	r2, #866	; 0x362
 800a640:	4911      	ldr	r1, [pc, #68]	; (800a688 <pbuf_cat+0xa4>)
 800a642:	4810      	ldr	r0, [pc, #64]	; (800a684 <pbuf_cat+0xa0>)
 800a644:	f009 fa30 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d006      	beq.n	800a65e <pbuf_cat+0x7a>
 800a650:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <pbuf_cat+0x98>)
 800a652:	f240 3263 	movw	r2, #867	; 0x363
 800a656:	490d      	ldr	r1, [pc, #52]	; (800a68c <pbuf_cat+0xa8>)
 800a658:	480a      	ldr	r0, [pc, #40]	; (800a684 <pbuf_cat+0xa0>)
 800a65a:	f009 fa25 	bl	8013aa8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	891a      	ldrh	r2, [r3, #8]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	891b      	ldrh	r3, [r3, #8]
 800a666:	4413      	add	r3, r2
 800a668:	b29a      	uxth	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	08017780 	.word	0x08017780
 800a680:	08017974 	.word	0x08017974
 800a684:	080177e0 	.word	0x080177e0
 800a688:	080179ac 	.word	0x080179ac
 800a68c:	080179dc 	.word	0x080179dc

0800a690 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a69a:	6839      	ldr	r1, [r7, #0]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ffa1 	bl	800a5e4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a6a2:	6838      	ldr	r0, [r7, #0]
 800a6a4:	f7ff ff7c 	bl	800a5a0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	617b      	str	r3, [r7, #20]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d008      	beq.n	800a6da <pbuf_copy+0x2a>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d005      	beq.n	800a6da <pbuf_copy+0x2a>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	891a      	ldrh	r2, [r3, #8]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	891b      	ldrh	r3, [r3, #8]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d209      	bcs.n	800a6ee <pbuf_copy+0x3e>
 800a6da:	4b57      	ldr	r3, [pc, #348]	; (800a838 <pbuf_copy+0x188>)
 800a6dc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a6e0:	4956      	ldr	r1, [pc, #344]	; (800a83c <pbuf_copy+0x18c>)
 800a6e2:	4857      	ldr	r0, [pc, #348]	; (800a840 <pbuf_copy+0x190>)
 800a6e4:	f009 f9e0 	bl	8013aa8 <iprintf>
 800a6e8:	f06f 030f 	mvn.w	r3, #15
 800a6ec:	e09f      	b.n	800a82e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	895b      	ldrh	r3, [r3, #10]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	1ad2      	subs	r2, r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	895b      	ldrh	r3, [r3, #10]
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	1acb      	subs	r3, r1, r3
 800a702:	429a      	cmp	r2, r3
 800a704:	d306      	bcc.n	800a714 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	895b      	ldrh	r3, [r3, #10]
 800a70a:	461a      	mov	r2, r3
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	e005      	b.n	800a720 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	895b      	ldrh	r3, [r3, #10]
 800a718:	461a      	mov	r2, r3
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	18d0      	adds	r0, r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	685a      	ldr	r2, [r3, #4]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	4413      	add	r3, r2
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4619      	mov	r1, r3
 800a734:	f008 fc74 	bl	8013020 <memcpy>
    offset_to += len;
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	895b      	ldrh	r3, [r3, #10]
 800a74c:	461a      	mov	r2, r3
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	4293      	cmp	r3, r2
 800a752:	d906      	bls.n	800a762 <pbuf_copy+0xb2>
 800a754:	4b38      	ldr	r3, [pc, #224]	; (800a838 <pbuf_copy+0x188>)
 800a756:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a75a:	493a      	ldr	r1, [pc, #232]	; (800a844 <pbuf_copy+0x194>)
 800a75c:	4838      	ldr	r0, [pc, #224]	; (800a840 <pbuf_copy+0x190>)
 800a75e:	f009 f9a3 	bl	8013aa8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	895b      	ldrh	r3, [r3, #10]
 800a766:	461a      	mov	r2, r3
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d906      	bls.n	800a77c <pbuf_copy+0xcc>
 800a76e:	4b32      	ldr	r3, [pc, #200]	; (800a838 <pbuf_copy+0x188>)
 800a770:	f240 32da 	movw	r2, #986	; 0x3da
 800a774:	4934      	ldr	r1, [pc, #208]	; (800a848 <pbuf_copy+0x198>)
 800a776:	4832      	ldr	r0, [pc, #200]	; (800a840 <pbuf_copy+0x190>)
 800a778:	f009 f996 	bl	8013aa8 <iprintf>
    if (offset_from >= p_from->len) {
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	895b      	ldrh	r3, [r3, #10]
 800a780:	461a      	mov	r2, r3
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	4293      	cmp	r3, r2
 800a786:	d304      	bcc.n	800a792 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	895b      	ldrh	r3, [r3, #10]
 800a796:	461a      	mov	r2, r3
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d114      	bne.n	800a7c8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10c      	bne.n	800a7c8 <pbuf_copy+0x118>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d009      	beq.n	800a7c8 <pbuf_copy+0x118>
 800a7b4:	4b20      	ldr	r3, [pc, #128]	; (800a838 <pbuf_copy+0x188>)
 800a7b6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a7ba:	4924      	ldr	r1, [pc, #144]	; (800a84c <pbuf_copy+0x19c>)
 800a7bc:	4820      	ldr	r0, [pc, #128]	; (800a840 <pbuf_copy+0x190>)
 800a7be:	f009 f973 	bl	8013aa8 <iprintf>
 800a7c2:	f06f 030f 	mvn.w	r3, #15
 800a7c6:	e032      	b.n	800a82e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d013      	beq.n	800a7f6 <pbuf_copy+0x146>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	895a      	ldrh	r2, [r3, #10]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	891b      	ldrh	r3, [r3, #8]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d10d      	bne.n	800a7f6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d009      	beq.n	800a7f6 <pbuf_copy+0x146>
 800a7e2:	4b15      	ldr	r3, [pc, #84]	; (800a838 <pbuf_copy+0x188>)
 800a7e4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a7e8:	4919      	ldr	r1, [pc, #100]	; (800a850 <pbuf_copy+0x1a0>)
 800a7ea:	4815      	ldr	r0, [pc, #84]	; (800a840 <pbuf_copy+0x190>)
 800a7ec:	f009 f95c 	bl	8013aa8 <iprintf>
 800a7f0:	f06f 0305 	mvn.w	r3, #5
 800a7f4:	e01b      	b.n	800a82e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d013      	beq.n	800a824 <pbuf_copy+0x174>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	895a      	ldrh	r2, [r3, #10]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	891b      	ldrh	r3, [r3, #8]
 800a804:	429a      	cmp	r2, r3
 800a806:	d10d      	bne.n	800a824 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d009      	beq.n	800a824 <pbuf_copy+0x174>
 800a810:	4b09      	ldr	r3, [pc, #36]	; (800a838 <pbuf_copy+0x188>)
 800a812:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a816:	490e      	ldr	r1, [pc, #56]	; (800a850 <pbuf_copy+0x1a0>)
 800a818:	4809      	ldr	r0, [pc, #36]	; (800a840 <pbuf_copy+0x190>)
 800a81a:	f009 f945 	bl	8013aa8 <iprintf>
 800a81e:	f06f 0305 	mvn.w	r3, #5
 800a822:	e004      	b.n	800a82e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f47f af61 	bne.w	800a6ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	08017780 	.word	0x08017780
 800a83c:	08017a28 	.word	0x08017a28
 800a840:	080177e0 	.word	0x080177e0
 800a844:	08017a58 	.word	0x08017a58
 800a848:	08017a70 	.word	0x08017a70
 800a84c:	08017a8c 	.word	0x08017a8c
 800a850:	08017a9c 	.word	0x08017a9c

0800a854 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	4611      	mov	r1, r2
 800a860:	461a      	mov	r2, r3
 800a862:	460b      	mov	r3, r1
 800a864:	80fb      	strh	r3, [r7, #6]
 800a866:	4613      	mov	r3, r2
 800a868:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d108      	bne.n	800a88a <pbuf_copy_partial+0x36>
 800a878:	4b2b      	ldr	r3, [pc, #172]	; (800a928 <pbuf_copy_partial+0xd4>)
 800a87a:	f240 420a 	movw	r2, #1034	; 0x40a
 800a87e:	492b      	ldr	r1, [pc, #172]	; (800a92c <pbuf_copy_partial+0xd8>)
 800a880:	482b      	ldr	r0, [pc, #172]	; (800a930 <pbuf_copy_partial+0xdc>)
 800a882:	f009 f911 	bl	8013aa8 <iprintf>
 800a886:	2300      	movs	r3, #0
 800a888:	e04a      	b.n	800a920 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d108      	bne.n	800a8a2 <pbuf_copy_partial+0x4e>
 800a890:	4b25      	ldr	r3, [pc, #148]	; (800a928 <pbuf_copy_partial+0xd4>)
 800a892:	f240 420b 	movw	r2, #1035	; 0x40b
 800a896:	4927      	ldr	r1, [pc, #156]	; (800a934 <pbuf_copy_partial+0xe0>)
 800a898:	4825      	ldr	r0, [pc, #148]	; (800a930 <pbuf_copy_partial+0xdc>)
 800a89a:	f009 f905 	bl	8013aa8 <iprintf>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e03e      	b.n	800a920 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e034      	b.n	800a912 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a8a8:	88bb      	ldrh	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00a      	beq.n	800a8c4 <pbuf_copy_partial+0x70>
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	895b      	ldrh	r3, [r3, #10]
 800a8b2:	88ba      	ldrh	r2, [r7, #4]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d305      	bcc.n	800a8c4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	895b      	ldrh	r3, [r3, #10]
 800a8bc:	88ba      	ldrh	r2, [r7, #4]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	80bb      	strh	r3, [r7, #4]
 800a8c2:	e023      	b.n	800a90c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	895a      	ldrh	r2, [r3, #10]
 800a8c8:	88bb      	ldrh	r3, [r7, #4]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a8ce:	8b3a      	ldrh	r2, [r7, #24]
 800a8d0:	88fb      	ldrh	r3, [r7, #6]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d901      	bls.n	800a8da <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a8d6:	88fb      	ldrh	r3, [r7, #6]
 800a8d8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a8da:	8b7b      	ldrh	r3, [r7, #26]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	18d0      	adds	r0, r2, r3
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	88bb      	ldrh	r3, [r7, #4]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	8b3a      	ldrh	r2, [r7, #24]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	f008 fb98 	bl	8013020 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a8f0:	8afa      	ldrh	r2, [r7, #22]
 800a8f2:	8b3b      	ldrh	r3, [r7, #24]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a8f8:	8b7a      	ldrh	r2, [r7, #26]
 800a8fa:	8b3b      	ldrh	r3, [r7, #24]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a900:	88fa      	ldrh	r2, [r7, #6]
 800a902:	8b3b      	ldrh	r3, [r7, #24]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	61fb      	str	r3, [r7, #28]
 800a912:	88fb      	ldrh	r3, [r7, #6]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <pbuf_copy_partial+0xca>
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1c4      	bne.n	800a8a8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a91e:	8afb      	ldrh	r3, [r7, #22]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	08017780 	.word	0x08017780
 800a92c:	08017ac8 	.word	0x08017ac8
 800a930:	080177e0 	.word	0x080177e0
 800a934:	08017ae8 	.word	0x08017ae8

0800a938 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800a946:	88fb      	ldrh	r3, [r7, #6]
 800a948:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d109      	bne.n	800a968 <pbuf_take+0x30>
 800a954:	4b3a      	ldr	r3, [pc, #232]	; (800aa40 <pbuf_take+0x108>)
 800a956:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800a95a:	493a      	ldr	r1, [pc, #232]	; (800aa44 <pbuf_take+0x10c>)
 800a95c:	483a      	ldr	r0, [pc, #232]	; (800aa48 <pbuf_take+0x110>)
 800a95e:	f009 f8a3 	bl	8013aa8 <iprintf>
 800a962:	f06f 030f 	mvn.w	r3, #15
 800a966:	e067      	b.n	800aa38 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d109      	bne.n	800a982 <pbuf_take+0x4a>
 800a96e:	4b34      	ldr	r3, [pc, #208]	; (800aa40 <pbuf_take+0x108>)
 800a970:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800a974:	4935      	ldr	r1, [pc, #212]	; (800aa4c <pbuf_take+0x114>)
 800a976:	4834      	ldr	r0, [pc, #208]	; (800aa48 <pbuf_take+0x110>)
 800a978:	f009 f896 	bl	8013aa8 <iprintf>
 800a97c:	f06f 030f 	mvn.w	r3, #15
 800a980:	e05a      	b.n	800aa38 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	891b      	ldrh	r3, [r3, #8]
 800a986:	88fa      	ldrh	r2, [r7, #6]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d909      	bls.n	800a9a0 <pbuf_take+0x68>
 800a98c:	4b2c      	ldr	r3, [pc, #176]	; (800aa40 <pbuf_take+0x108>)
 800a98e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800a992:	492f      	ldr	r1, [pc, #188]	; (800aa50 <pbuf_take+0x118>)
 800a994:	482c      	ldr	r0, [pc, #176]	; (800aa48 <pbuf_take+0x110>)
 800a996:	f009 f887 	bl	8013aa8 <iprintf>
 800a99a:	f04f 33ff 	mov.w	r3, #4294967295
 800a99e:	e04b      	b.n	800aa38 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d007      	beq.n	800a9b6 <pbuf_take+0x7e>
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d004      	beq.n	800a9b6 <pbuf_take+0x7e>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	891b      	ldrh	r3, [r3, #8]
 800a9b0:	88fa      	ldrh	r2, [r7, #6]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d902      	bls.n	800a9bc <pbuf_take+0x84>
    return ERR_ARG;
 800a9b6:	f06f 030f 	mvn.w	r3, #15
 800a9ba:	e03d      	b.n	800aa38 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	e028      	b.n	800aa14 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <pbuf_take+0x9e>
 800a9c8:	4b1d      	ldr	r3, [pc, #116]	; (800aa40 <pbuf_take+0x108>)
 800a9ca:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a9ce:	4921      	ldr	r1, [pc, #132]	; (800aa54 <pbuf_take+0x11c>)
 800a9d0:	481d      	ldr	r0, [pc, #116]	; (800aa48 <pbuf_take+0x110>)
 800a9d2:	f009 f869 	bl	8013aa8 <iprintf>
    buf_copy_len = total_copy_len;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	895b      	ldrh	r3, [r3, #10]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d902      	bls.n	800a9ec <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	895b      	ldrh	r3, [r3, #10]
 800a9ea:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	6858      	ldr	r0, [r3, #4]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	f008 fb11 	bl	8013020 <memcpy>
    total_copy_len -= buf_copy_len;
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	61fb      	str	r3, [r7, #28]
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1d3      	bne.n	800a9c2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d103      	bne.n	800aa28 <pbuf_take+0xf0>
 800aa20:	88fb      	ldrh	r3, [r7, #6]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d006      	beq.n	800aa36 <pbuf_take+0xfe>
 800aa28:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <pbuf_take+0x108>)
 800aa2a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800aa2e:	490a      	ldr	r1, [pc, #40]	; (800aa58 <pbuf_take+0x120>)
 800aa30:	4805      	ldr	r0, [pc, #20]	; (800aa48 <pbuf_take+0x110>)
 800aa32:	f009 f839 	bl	8013aa8 <iprintf>
  return ERR_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	08017780 	.word	0x08017780
 800aa44:	08017b58 	.word	0x08017b58
 800aa48:	080177e0 	.word	0x080177e0
 800aa4c:	08017b70 	.word	0x08017b70
 800aa50:	08017b8c 	.word	0x08017b8c
 800aa54:	08017bac 	.word	0x08017bac
 800aa58:	08017bc4 	.word	0x08017bc4

0800aa5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	603a      	str	r2, [r7, #0]
 800aa66:	71fb      	strb	r3, [r7, #7]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	8919      	ldrh	r1, [r3, #8]
 800aa70:	88ba      	ldrh	r2, [r7, #4]
 800aa72:	79fb      	ldrb	r3, [r7, #7]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff fa0f 	bl	8009e98 <pbuf_alloc>
 800aa7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d101      	bne.n	800aa86 <pbuf_clone+0x2a>
    return NULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	e011      	b.n	800aaaa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7ff fe11 	bl	800a6b0 <pbuf_copy>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800aa92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d006      	beq.n	800aaa8 <pbuf_clone+0x4c>
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <pbuf_clone+0x58>)
 800aa9c:	f240 5224 	movw	r2, #1316	; 0x524
 800aaa0:	4905      	ldr	r1, [pc, #20]	; (800aab8 <pbuf_clone+0x5c>)
 800aaa2:	4806      	ldr	r0, [pc, #24]	; (800aabc <pbuf_clone+0x60>)
 800aaa4:	f009 f800 	bl	8013aa8 <iprintf>
  return q;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	08017780 	.word	0x08017780
 800aab8:	08017bf4 	.word	0x08017bf4
 800aabc:	080177e0 	.word	0x080177e0

0800aac0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800aac4:	f009 f808 	bl	8013ad8 <rand>
 800aac8:	4603      	mov	r3, r0
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	4b01      	ldr	r3, [pc, #4]	; (800aae0 <tcp_init+0x20>)
 800aada:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800aadc:	bf00      	nop
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	2000004a 	.word	0x2000004a

0800aae4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	7d1b      	ldrb	r3, [r3, #20]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d105      	bne.n	800ab00 <tcp_free+0x1c>
 800aaf4:	4b06      	ldr	r3, [pc, #24]	; (800ab10 <tcp_free+0x2c>)
 800aaf6:	22d4      	movs	r2, #212	; 0xd4
 800aaf8:	4906      	ldr	r1, [pc, #24]	; (800ab14 <tcp_free+0x30>)
 800aafa:	4807      	ldr	r0, [pc, #28]	; (800ab18 <tcp_free+0x34>)
 800aafc:	f008 ffd4 	bl	8013aa8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	2001      	movs	r0, #1
 800ab04:	f7fe fe9a 	bl	800983c <memp_free>
}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	08017c80 	.word	0x08017c80
 800ab14:	08017cb0 	.word	0x08017cb0
 800ab18:	08017cc4 	.word	0x08017cc4

0800ab1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7d1b      	ldrb	r3, [r3, #20]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d105      	bne.n	800ab38 <tcp_free_listen+0x1c>
 800ab2c:	4b06      	ldr	r3, [pc, #24]	; (800ab48 <tcp_free_listen+0x2c>)
 800ab2e:	22df      	movs	r2, #223	; 0xdf
 800ab30:	4906      	ldr	r1, [pc, #24]	; (800ab4c <tcp_free_listen+0x30>)
 800ab32:	4807      	ldr	r0, [pc, #28]	; (800ab50 <tcp_free_listen+0x34>)
 800ab34:	f008 ffb8 	bl	8013aa8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	2002      	movs	r0, #2
 800ab3c:	f7fe fe7e 	bl	800983c <memp_free>
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	08017c80 	.word	0x08017c80
 800ab4c:	08017cec 	.word	0x08017cec
 800ab50:	08017cc4 	.word	0x08017cc4

0800ab54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ab58:	f000 fea2 	bl	800b8a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ab5c:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <tcp_tmr+0x28>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	3301      	adds	r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <tcp_tmr+0x28>)
 800ab66:	701a      	strb	r2, [r3, #0]
 800ab68:	4b04      	ldr	r3, [pc, #16]	; (800ab7c <tcp_tmr+0x28>)
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d001      	beq.n	800ab78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ab74:	f000 fb54 	bl	800b220 <tcp_slowtmr>
  }
}
 800ab78:	bf00      	nop
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	200002c5 	.word	0x200002c5

0800ab80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d105      	bne.n	800ab9c <tcp_remove_listener+0x1c>
 800ab90:	4b0d      	ldr	r3, [pc, #52]	; (800abc8 <tcp_remove_listener+0x48>)
 800ab92:	22ff      	movs	r2, #255	; 0xff
 800ab94:	490d      	ldr	r1, [pc, #52]	; (800abcc <tcp_remove_listener+0x4c>)
 800ab96:	480e      	ldr	r0, [pc, #56]	; (800abd0 <tcp_remove_listener+0x50>)
 800ab98:	f008 ff86 	bl	8013aa8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	e00a      	b.n	800abb8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d102      	bne.n	800abb2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2200      	movs	r2, #0
 800abb0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f1      	bne.n	800aba2 <tcp_remove_listener+0x22>
    }
  }
}
 800abbe:	bf00      	nop
 800abc0:	bf00      	nop
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	08017c80 	.word	0x08017c80
 800abcc:	08017d08 	.word	0x08017d08
 800abd0:	08017cc4 	.word	0x08017cc4

0800abd4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d106      	bne.n	800abf0 <tcp_listen_closed+0x1c>
 800abe2:	4b14      	ldr	r3, [pc, #80]	; (800ac34 <tcp_listen_closed+0x60>)
 800abe4:	f240 1211 	movw	r2, #273	; 0x111
 800abe8:	4913      	ldr	r1, [pc, #76]	; (800ac38 <tcp_listen_closed+0x64>)
 800abea:	4814      	ldr	r0, [pc, #80]	; (800ac3c <tcp_listen_closed+0x68>)
 800abec:	f008 ff5c 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7d1b      	ldrb	r3, [r3, #20]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d006      	beq.n	800ac06 <tcp_listen_closed+0x32>
 800abf8:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <tcp_listen_closed+0x60>)
 800abfa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800abfe:	4910      	ldr	r1, [pc, #64]	; (800ac40 <tcp_listen_closed+0x6c>)
 800ac00:	480e      	ldr	r0, [pc, #56]	; (800ac3c <tcp_listen_closed+0x68>)
 800ac02:	f008 ff51 	bl	8013aa8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ac06:	2301      	movs	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	e00b      	b.n	800ac24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ac0c:	4a0d      	ldr	r2, [pc, #52]	; (800ac44 <tcp_listen_closed+0x70>)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff ffb1 	bl	800ab80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3301      	adds	r3, #1
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d9f0      	bls.n	800ac0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ac2a:	bf00      	nop
 800ac2c:	bf00      	nop
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	08017c80 	.word	0x08017c80
 800ac38:	08017d30 	.word	0x08017d30
 800ac3c:	08017cc4 	.word	0x08017cc4
 800ac40:	08017d3c 	.word	0x08017d3c
 800ac44:	08019c4c 	.word	0x08019c4c

0800ac48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ac48:	b5b0      	push	{r4, r5, r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af04      	add	r7, sp, #16
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <tcp_close_shutdown+0x20>
 800ac5a:	4b63      	ldr	r3, [pc, #396]	; (800ade8 <tcp_close_shutdown+0x1a0>)
 800ac5c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ac60:	4962      	ldr	r1, [pc, #392]	; (800adec <tcp_close_shutdown+0x1a4>)
 800ac62:	4863      	ldr	r0, [pc, #396]	; (800adf0 <tcp_close_shutdown+0x1a8>)
 800ac64:	f008 ff20 	bl	8013aa8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d066      	beq.n	800ad3c <tcp_close_shutdown+0xf4>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	7d1b      	ldrb	r3, [r3, #20]
 800ac72:	2b04      	cmp	r3, #4
 800ac74:	d003      	beq.n	800ac7e <tcp_close_shutdown+0x36>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	7d1b      	ldrb	r3, [r3, #20]
 800ac7a:	2b07      	cmp	r3, #7
 800ac7c:	d15e      	bne.n	800ad3c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d104      	bne.n	800ac90 <tcp_close_shutdown+0x48>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac8a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ac8e:	d055      	beq.n	800ad3c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	8b5b      	ldrh	r3, [r3, #26]
 800ac94:	f003 0310 	and.w	r3, r3, #16
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d106      	bne.n	800acaa <tcp_close_shutdown+0x62>
 800ac9c:	4b52      	ldr	r3, [pc, #328]	; (800ade8 <tcp_close_shutdown+0x1a0>)
 800ac9e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800aca2:	4954      	ldr	r1, [pc, #336]	; (800adf4 <tcp_close_shutdown+0x1ac>)
 800aca4:	4852      	ldr	r0, [pc, #328]	; (800adf0 <tcp_close_shutdown+0x1a8>)
 800aca6:	f008 feff 	bl	8013aa8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800acb2:	687d      	ldr	r5, [r7, #4]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3304      	adds	r3, #4
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	8ad2      	ldrh	r2, [r2, #22]
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	8b09      	ldrh	r1, [r1, #24]
 800acc0:	9102      	str	r1, [sp, #8]
 800acc2:	9201      	str	r2, [sp, #4]
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	462b      	mov	r3, r5
 800acc8:	4622      	mov	r2, r4
 800acca:	4601      	mov	r1, r0
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f004 fe8d 	bl	800f9ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f001 f8c6 	bl	800be64 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800acd8:	4b47      	ldr	r3, [pc, #284]	; (800adf8 <tcp_close_shutdown+0x1b0>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d105      	bne.n	800acee <tcp_close_shutdown+0xa6>
 800ace2:	4b45      	ldr	r3, [pc, #276]	; (800adf8 <tcp_close_shutdown+0x1b0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	4a43      	ldr	r2, [pc, #268]	; (800adf8 <tcp_close_shutdown+0x1b0>)
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	e013      	b.n	800ad16 <tcp_close_shutdown+0xce>
 800acee:	4b42      	ldr	r3, [pc, #264]	; (800adf8 <tcp_close_shutdown+0x1b0>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	e00c      	b.n	800ad10 <tcp_close_shutdown+0xc8>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d104      	bne.n	800ad0a <tcp_close_shutdown+0xc2>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	60da      	str	r2, [r3, #12]
 800ad08:	e005      	b.n	800ad16 <tcp_close_shutdown+0xce>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1ef      	bne.n	800acf6 <tcp_close_shutdown+0xae>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	60da      	str	r2, [r3, #12]
 800ad1c:	4b37      	ldr	r3, [pc, #220]	; (800adfc <tcp_close_shutdown+0x1b4>)
 800ad1e:	2201      	movs	r2, #1
 800ad20:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ad22:	4b37      	ldr	r3, [pc, #220]	; (800ae00 <tcp_close_shutdown+0x1b8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d102      	bne.n	800ad32 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ad2c:	f003 fd5a 	bl	800e7e4 <tcp_trigger_input_pcb_close>
 800ad30:	e002      	b.n	800ad38 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff fed6 	bl	800aae4 <tcp_free>
      }
      return ERR_OK;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e050      	b.n	800adde <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7d1b      	ldrb	r3, [r3, #20]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d03b      	beq.n	800adbc <tcp_close_shutdown+0x174>
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	dc44      	bgt.n	800add2 <tcp_close_shutdown+0x18a>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <tcp_close_shutdown+0x10a>
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d02a      	beq.n	800ada6 <tcp_close_shutdown+0x15e>
 800ad50:	e03f      	b.n	800add2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	8adb      	ldrh	r3, [r3, #22]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d021      	beq.n	800ad9e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad5a:	4b2a      	ldr	r3, [pc, #168]	; (800ae04 <tcp_close_shutdown+0x1bc>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d105      	bne.n	800ad70 <tcp_close_shutdown+0x128>
 800ad64:	4b27      	ldr	r3, [pc, #156]	; (800ae04 <tcp_close_shutdown+0x1bc>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	4a26      	ldr	r2, [pc, #152]	; (800ae04 <tcp_close_shutdown+0x1bc>)
 800ad6c:	6013      	str	r3, [r2, #0]
 800ad6e:	e013      	b.n	800ad98 <tcp_close_shutdown+0x150>
 800ad70:	4b24      	ldr	r3, [pc, #144]	; (800ae04 <tcp_close_shutdown+0x1bc>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	60bb      	str	r3, [r7, #8]
 800ad76:	e00c      	b.n	800ad92 <tcp_close_shutdown+0x14a>
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d104      	bne.n	800ad8c <tcp_close_shutdown+0x144>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	60da      	str	r2, [r3, #12]
 800ad8a:	e005      	b.n	800ad98 <tcp_close_shutdown+0x150>
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	60bb      	str	r3, [r7, #8]
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1ef      	bne.n	800ad78 <tcp_close_shutdown+0x130>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff fea0 	bl	800aae4 <tcp_free>
      break;
 800ada4:	e01a      	b.n	800addc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff ff14 	bl	800abd4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800adac:	6879      	ldr	r1, [r7, #4]
 800adae:	4816      	ldr	r0, [pc, #88]	; (800ae08 <tcp_close_shutdown+0x1c0>)
 800adb0:	f001 f8a8 	bl	800bf04 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff feb1 	bl	800ab1c <tcp_free_listen>
      break;
 800adba:	e00f      	b.n	800addc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	480e      	ldr	r0, [pc, #56]	; (800adf8 <tcp_close_shutdown+0x1b0>)
 800adc0:	f001 f8a0 	bl	800bf04 <tcp_pcb_remove>
 800adc4:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <tcp_close_shutdown+0x1b4>)
 800adc6:	2201      	movs	r2, #1
 800adc8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff fe8a 	bl	800aae4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800add0:	e004      	b.n	800addc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f81a 	bl	800ae0c <tcp_close_shutdown_fin>
 800add8:	4603      	mov	r3, r0
 800adda:	e000      	b.n	800adde <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bdb0      	pop	{r4, r5, r7, pc}
 800ade6:	bf00      	nop
 800ade8:	08017c80 	.word	0x08017c80
 800adec:	08017d54 	.word	0x08017d54
 800adf0:	08017cc4 	.word	0x08017cc4
 800adf4:	08017d74 	.word	0x08017d74
 800adf8:	200090e4 	.word	0x200090e4
 800adfc:	200090e0 	.word	0x200090e0
 800ae00:	200090f8 	.word	0x200090f8
 800ae04:	200090f0 	.word	0x200090f0
 800ae08:	200090ec 	.word	0x200090ec

0800ae0c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <tcp_close_shutdown_fin+0x1c>
 800ae1a:	4b2e      	ldr	r3, [pc, #184]	; (800aed4 <tcp_close_shutdown_fin+0xc8>)
 800ae1c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ae20:	492d      	ldr	r1, [pc, #180]	; (800aed8 <tcp_close_shutdown_fin+0xcc>)
 800ae22:	482e      	ldr	r0, [pc, #184]	; (800aedc <tcp_close_shutdown_fin+0xd0>)
 800ae24:	f008 fe40 	bl	8013aa8 <iprintf>

  switch (pcb->state) {
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7d1b      	ldrb	r3, [r3, #20]
 800ae2c:	2b07      	cmp	r3, #7
 800ae2e:	d020      	beq.n	800ae72 <tcp_close_shutdown_fin+0x66>
 800ae30:	2b07      	cmp	r3, #7
 800ae32:	dc2b      	bgt.n	800ae8c <tcp_close_shutdown_fin+0x80>
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d002      	beq.n	800ae3e <tcp_close_shutdown_fin+0x32>
 800ae38:	2b04      	cmp	r3, #4
 800ae3a:	d00d      	beq.n	800ae58 <tcp_close_shutdown_fin+0x4c>
 800ae3c:	e026      	b.n	800ae8c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f003 fee2 	bl	800ec08 <tcp_send_fin>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ae48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d11f      	bne.n	800ae90 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2205      	movs	r2, #5
 800ae54:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ae56:	e01b      	b.n	800ae90 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f003 fed5 	bl	800ec08 <tcp_send_fin>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ae62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d114      	bne.n	800ae94 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2205      	movs	r2, #5
 800ae6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ae70:	e010      	b.n	800ae94 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f003 fec8 	bl	800ec08 <tcp_send_fin>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ae7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d109      	bne.n	800ae98 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2209      	movs	r2, #9
 800ae88:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ae8a:	e005      	b.n	800ae98 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e01c      	b.n	800aeca <tcp_close_shutdown_fin+0xbe>
      break;
 800ae90:	bf00      	nop
 800ae92:	e002      	b.n	800ae9a <tcp_close_shutdown_fin+0x8e>
      break;
 800ae94:	bf00      	nop
 800ae96:	e000      	b.n	800ae9a <tcp_close_shutdown_fin+0x8e>
      break;
 800ae98:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ae9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d103      	bne.n	800aeaa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f003 ffee 	bl	800ee84 <tcp_output>
 800aea8:	e00d      	b.n	800aec6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800aeaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb2:	d108      	bne.n	800aec6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	8b5b      	ldrh	r3, [r3, #26]
 800aeb8:	f043 0308 	orr.w	r3, r3, #8
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e001      	b.n	800aeca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800aec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	08017c80 	.word	0x08017c80
 800aed8:	08017d30 	.word	0x08017d30
 800aedc:	08017cc4 	.word	0x08017cc4

0800aee0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d109      	bne.n	800af02 <tcp_close+0x22>
 800aeee:	4b0f      	ldr	r3, [pc, #60]	; (800af2c <tcp_close+0x4c>)
 800aef0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800aef4:	490e      	ldr	r1, [pc, #56]	; (800af30 <tcp_close+0x50>)
 800aef6:	480f      	ldr	r0, [pc, #60]	; (800af34 <tcp_close+0x54>)
 800aef8:	f008 fdd6 	bl	8013aa8 <iprintf>
 800aefc:	f06f 030f 	mvn.w	r3, #15
 800af00:	e00f      	b.n	800af22 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	7d1b      	ldrb	r3, [r3, #20]
 800af06:	2b01      	cmp	r3, #1
 800af08:	d006      	beq.n	800af18 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	8b5b      	ldrh	r3, [r3, #26]
 800af0e:	f043 0310 	orr.w	r3, r3, #16
 800af12:	b29a      	uxth	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800af18:	2101      	movs	r1, #1
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fe94 	bl	800ac48 <tcp_close_shutdown>
 800af20:	4603      	mov	r3, r0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	08017c80 	.word	0x08017c80
 800af30:	08017d90 	.word	0x08017d90
 800af34:	08017cc4 	.word	0x08017cc4

0800af38 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b08e      	sub	sp, #56	; 0x38
 800af3c:	af04      	add	r7, sp, #16
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d107      	bne.n	800af58 <tcp_abandon+0x20>
 800af48:	4b52      	ldr	r3, [pc, #328]	; (800b094 <tcp_abandon+0x15c>)
 800af4a:	f240 223d 	movw	r2, #573	; 0x23d
 800af4e:	4952      	ldr	r1, [pc, #328]	; (800b098 <tcp_abandon+0x160>)
 800af50:	4852      	ldr	r0, [pc, #328]	; (800b09c <tcp_abandon+0x164>)
 800af52:	f008 fda9 	bl	8013aa8 <iprintf>
 800af56:	e099      	b.n	800b08c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7d1b      	ldrb	r3, [r3, #20]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d106      	bne.n	800af6e <tcp_abandon+0x36>
 800af60:	4b4c      	ldr	r3, [pc, #304]	; (800b094 <tcp_abandon+0x15c>)
 800af62:	f44f 7210 	mov.w	r2, #576	; 0x240
 800af66:	494e      	ldr	r1, [pc, #312]	; (800b0a0 <tcp_abandon+0x168>)
 800af68:	484c      	ldr	r0, [pc, #304]	; (800b09c <tcp_abandon+0x164>)
 800af6a:	f008 fd9d 	bl	8013aa8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7d1b      	ldrb	r3, [r3, #20]
 800af72:	2b0a      	cmp	r3, #10
 800af74:	d107      	bne.n	800af86 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	484a      	ldr	r0, [pc, #296]	; (800b0a4 <tcp_abandon+0x16c>)
 800af7a:	f000 ffc3 	bl	800bf04 <tcp_pcb_remove>
    tcp_free(pcb);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fdb0 	bl	800aae4 <tcp_free>
 800af84:	e082      	b.n	800b08c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af92:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	7d1b      	ldrb	r3, [r3, #20]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d126      	bne.n	800affe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	8adb      	ldrh	r3, [r3, #22]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d02e      	beq.n	800b016 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800afb8:	4b3b      	ldr	r3, [pc, #236]	; (800b0a8 <tcp_abandon+0x170>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d105      	bne.n	800afce <tcp_abandon+0x96>
 800afc2:	4b39      	ldr	r3, [pc, #228]	; (800b0a8 <tcp_abandon+0x170>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	4a37      	ldr	r2, [pc, #220]	; (800b0a8 <tcp_abandon+0x170>)
 800afca:	6013      	str	r3, [r2, #0]
 800afcc:	e013      	b.n	800aff6 <tcp_abandon+0xbe>
 800afce:	4b36      	ldr	r3, [pc, #216]	; (800b0a8 <tcp_abandon+0x170>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	61fb      	str	r3, [r7, #28]
 800afd4:	e00c      	b.n	800aff0 <tcp_abandon+0xb8>
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d104      	bne.n	800afea <tcp_abandon+0xb2>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	60da      	str	r2, [r3, #12]
 800afe8:	e005      	b.n	800aff6 <tcp_abandon+0xbe>
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	61fb      	str	r3, [r7, #28]
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1ef      	bne.n	800afd6 <tcp_abandon+0x9e>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	60da      	str	r2, [r3, #12]
 800affc:	e00b      	b.n	800b016 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	8adb      	ldrh	r3, [r3, #22]
 800b006:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4828      	ldr	r0, [pc, #160]	; (800b0ac <tcp_abandon+0x174>)
 800b00c:	f000 ff7a 	bl	800bf04 <tcp_pcb_remove>
 800b010:	4b27      	ldr	r3, [pc, #156]	; (800b0b0 <tcp_abandon+0x178>)
 800b012:	2201      	movs	r2, #1
 800b014:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d004      	beq.n	800b028 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fd1c 	bl	800ba60 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d004      	beq.n	800b03a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b034:	4618      	mov	r0, r3
 800b036:	f000 fd13 	bl	800ba60 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fd0a 	bl	800ba60 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00e      	beq.n	800b070 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3304      	adds	r3, #4
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	8b12      	ldrh	r2, [r2, #24]
 800b05c:	9202      	str	r2, [sp, #8]
 800b05e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b060:	9201      	str	r2, [sp, #4]
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	460b      	mov	r3, r1
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	69b9      	ldr	r1, [r7, #24]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f004 fcbe 	bl	800f9ec <tcp_rst>
    }
    last_state = pcb->state;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	7d1b      	ldrb	r3, [r3, #20]
 800b074:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fd34 	bl	800aae4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <tcp_abandon+0x154>
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f06f 010c 	mvn.w	r1, #12
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	4798      	blx	r3
  }
}
 800b08c:	3728      	adds	r7, #40	; 0x28
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	08017c80 	.word	0x08017c80
 800b098:	08017dc4 	.word	0x08017dc4
 800b09c:	08017cc4 	.word	0x08017cc4
 800b0a0:	08017de0 	.word	0x08017de0
 800b0a4:	200090f4 	.word	0x200090f4
 800b0a8:	200090f0 	.word	0x200090f0
 800b0ac:	200090e4 	.word	0x200090e4
 800b0b0:	200090e0 	.word	0x200090e0

0800b0b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b0bc:	2101      	movs	r1, #1
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f7ff ff3a 	bl	800af38 <tcp_abandon>
}
 800b0c4:	bf00      	nop
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d106      	bne.n	800b0e8 <tcp_update_rcv_ann_wnd+0x1c>
 800b0da:	4b25      	ldr	r3, [pc, #148]	; (800b170 <tcp_update_rcv_ann_wnd+0xa4>)
 800b0dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b0e0:	4924      	ldr	r1, [pc, #144]	; (800b174 <tcp_update_rcv_ann_wnd+0xa8>)
 800b0e2:	4825      	ldr	r0, [pc, #148]	; (800b178 <tcp_update_rcv_ann_wnd+0xac>)
 800b0e4:	f008 fce0 	bl	8013aa8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b0f0:	4413      	add	r3, r2
 800b0f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b0fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b100:	bf28      	it	cs
 800b102:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b106:	b292      	uxth	r2, r2
 800b108:	4413      	add	r3, r2
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	db08      	blt.n	800b124 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	e020      	b.n	800b166 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dd03      	ble.n	800b13a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b138:	e014      	b.n	800b164 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b14c:	d306      	bcc.n	800b15c <tcp_update_rcv_ann_wnd+0x90>
 800b14e:	4b08      	ldr	r3, [pc, #32]	; (800b170 <tcp_update_rcv_ann_wnd+0xa4>)
 800b150:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b154:	4909      	ldr	r1, [pc, #36]	; (800b17c <tcp_update_rcv_ann_wnd+0xb0>)
 800b156:	4808      	ldr	r0, [pc, #32]	; (800b178 <tcp_update_rcv_ann_wnd+0xac>)
 800b158:	f008 fca6 	bl	8013aa8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	b29a      	uxth	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b164:	2300      	movs	r3, #0
  }
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	08017c80 	.word	0x08017c80
 800b174:	08017edc 	.word	0x08017edc
 800b178:	08017cc4 	.word	0x08017cc4
 800b17c:	08017f00 	.word	0x08017f00

0800b180 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d107      	bne.n	800b1a2 <tcp_recved+0x22>
 800b192:	4b1f      	ldr	r3, [pc, #124]	; (800b210 <tcp_recved+0x90>)
 800b194:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b198:	491e      	ldr	r1, [pc, #120]	; (800b214 <tcp_recved+0x94>)
 800b19a:	481f      	ldr	r0, [pc, #124]	; (800b218 <tcp_recved+0x98>)
 800b19c:	f008 fc84 	bl	8013aa8 <iprintf>
 800b1a0:	e032      	b.n	800b208 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	7d1b      	ldrb	r3, [r3, #20]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d106      	bne.n	800b1b8 <tcp_recved+0x38>
 800b1aa:	4b19      	ldr	r3, [pc, #100]	; (800b210 <tcp_recved+0x90>)
 800b1ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b1b0:	491a      	ldr	r1, [pc, #104]	; (800b21c <tcp_recved+0x9c>)
 800b1b2:	4819      	ldr	r0, [pc, #100]	; (800b218 <tcp_recved+0x98>)
 800b1b4:	f008 fc78 	bl	8013aa8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b1bc:	887b      	ldrh	r3, [r7, #2]
 800b1be:	4413      	add	r3, r2
 800b1c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b1c2:	89fb      	ldrh	r3, [r7, #14]
 800b1c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b1c8:	d804      	bhi.n	800b1d4 <tcp_recved+0x54>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1ce:	89fa      	ldrh	r2, [r7, #14]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d204      	bcs.n	800b1de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b1da:	851a      	strh	r2, [r3, #40]	; 0x28
 800b1dc:	e002      	b.n	800b1e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	89fa      	ldrh	r2, [r7, #14]
 800b1e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ff71 	bl	800b0cc <tcp_update_rcv_ann_wnd>
 800b1ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b1f2:	d309      	bcc.n	800b208 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	8b5b      	ldrh	r3, [r3, #26]
 800b1f8:	f043 0302 	orr.w	r3, r3, #2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f003 fe3e 	bl	800ee84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b208:	3710      	adds	r7, #16
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	08017c80 	.word	0x08017c80
 800b214:	08017f1c 	.word	0x08017f1c
 800b218:	08017cc4 	.word	0x08017cc4
 800b21c:	08017f34 	.word	0x08017f34

0800b220 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b220:	b5b0      	push	{r4, r5, r7, lr}
 800b222:	b090      	sub	sp, #64	; 0x40
 800b224:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b22c:	4b94      	ldr	r3, [pc, #592]	; (800b480 <tcp_slowtmr+0x260>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	4a93      	ldr	r2, [pc, #588]	; (800b480 <tcp_slowtmr+0x260>)
 800b234:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b236:	4b93      	ldr	r3, [pc, #588]	; (800b484 <tcp_slowtmr+0x264>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	4b91      	ldr	r3, [pc, #580]	; (800b484 <tcp_slowtmr+0x264>)
 800b240:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b246:	4b90      	ldr	r3, [pc, #576]	; (800b488 <tcp_slowtmr+0x268>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b24c:	e29f      	b.n	800b78e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b250:	7d1b      	ldrb	r3, [r3, #20]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d106      	bne.n	800b264 <tcp_slowtmr+0x44>
 800b256:	4b8d      	ldr	r3, [pc, #564]	; (800b48c <tcp_slowtmr+0x26c>)
 800b258:	f240 42be 	movw	r2, #1214	; 0x4be
 800b25c:	498c      	ldr	r1, [pc, #560]	; (800b490 <tcp_slowtmr+0x270>)
 800b25e:	488d      	ldr	r0, [pc, #564]	; (800b494 <tcp_slowtmr+0x274>)
 800b260:	f008 fc22 	bl	8013aa8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	7d1b      	ldrb	r3, [r3, #20]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d106      	bne.n	800b27a <tcp_slowtmr+0x5a>
 800b26c:	4b87      	ldr	r3, [pc, #540]	; (800b48c <tcp_slowtmr+0x26c>)
 800b26e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b272:	4989      	ldr	r1, [pc, #548]	; (800b498 <tcp_slowtmr+0x278>)
 800b274:	4887      	ldr	r0, [pc, #540]	; (800b494 <tcp_slowtmr+0x274>)
 800b276:	f008 fc17 	bl	8013aa8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27c:	7d1b      	ldrb	r3, [r3, #20]
 800b27e:	2b0a      	cmp	r3, #10
 800b280:	d106      	bne.n	800b290 <tcp_slowtmr+0x70>
 800b282:	4b82      	ldr	r3, [pc, #520]	; (800b48c <tcp_slowtmr+0x26c>)
 800b284:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b288:	4984      	ldr	r1, [pc, #528]	; (800b49c <tcp_slowtmr+0x27c>)
 800b28a:	4882      	ldr	r0, [pc, #520]	; (800b494 <tcp_slowtmr+0x274>)
 800b28c:	f008 fc0c 	bl	8013aa8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b292:	7f9a      	ldrb	r2, [r3, #30]
 800b294:	4b7b      	ldr	r3, [pc, #492]	; (800b484 <tcp_slowtmr+0x264>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d105      	bne.n	800b2a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b2a6:	e272      	b.n	800b78e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b2a8:	4b76      	ldr	r3, [pc, #472]	; (800b484 <tcp_slowtmr+0x264>)
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	7d1b      	ldrb	r3, [r3, #20]
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d10a      	bne.n	800b2da <tcp_slowtmr+0xba>
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2ca:	2b05      	cmp	r3, #5
 800b2cc:	d905      	bls.n	800b2da <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2d8:	e11e      	b.n	800b518 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2e0:	2b0b      	cmp	r3, #11
 800b2e2:	d905      	bls.n	800b2f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b2ee:	e113      	b.n	800b518 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d075      	beq.n	800b3e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d006      	beq.n	800b310 <tcp_slowtmr+0xf0>
 800b302:	4b62      	ldr	r3, [pc, #392]	; (800b48c <tcp_slowtmr+0x26c>)
 800b304:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b308:	4965      	ldr	r1, [pc, #404]	; (800b4a0 <tcp_slowtmr+0x280>)
 800b30a:	4862      	ldr	r0, [pc, #392]	; (800b494 <tcp_slowtmr+0x274>)
 800b30c:	f008 fbcc 	bl	8013aa8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b314:	2b00      	cmp	r3, #0
 800b316:	d106      	bne.n	800b326 <tcp_slowtmr+0x106>
 800b318:	4b5c      	ldr	r3, [pc, #368]	; (800b48c <tcp_slowtmr+0x26c>)
 800b31a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b31e:	4961      	ldr	r1, [pc, #388]	; (800b4a4 <tcp_slowtmr+0x284>)
 800b320:	485c      	ldr	r0, [pc, #368]	; (800b494 <tcp_slowtmr+0x274>)
 800b322:	f008 fbc1 	bl	8013aa8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b32c:	2b0b      	cmp	r3, #11
 800b32e:	d905      	bls.n	800b33c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b334:	3301      	adds	r3, #1
 800b336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b33a:	e0ed      	b.n	800b518 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b342:	3b01      	subs	r3, #1
 800b344:	4a58      	ldr	r2, [pc, #352]	; (800b4a8 <tcp_slowtmr+0x288>)
 800b346:	5cd3      	ldrb	r3, [r2, r3]
 800b348:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b350:	7c7a      	ldrb	r2, [r7, #17]
 800b352:	429a      	cmp	r2, r3
 800b354:	d907      	bls.n	800b366 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b35c:	3301      	adds	r3, #1
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b362:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b36c:	7c7a      	ldrb	r2, [r7, #17]
 800b36e:	429a      	cmp	r2, r3
 800b370:	f200 80d2 	bhi.w	800b518 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b374:	2301      	movs	r3, #1
 800b376:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d108      	bne.n	800b394 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b384:	f004 fc26 	bl	800fbd4 <tcp_zero_window_probe>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d014      	beq.n	800b3b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b38e:	2300      	movs	r3, #0
 800b390:	623b      	str	r3, [r7, #32]
 800b392:	e011      	b.n	800b3b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b39a:	4619      	mov	r1, r3
 800b39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b39e:	f003 faeb 	bl	800e978 <tcp_split_unsent_seg>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d107      	bne.n	800b3b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b3a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3aa:	f003 fd6b 	bl	800ee84 <tcp_output>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d101      	bne.n	800b3b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 80ac 	beq.w	800b518 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b3ce:	2b06      	cmp	r3, #6
 800b3d0:	f200 80a2 	bhi.w	800b518 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b3da:	3301      	adds	r3, #1
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b3e4:	e098      	b.n	800b518 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	db0f      	blt.n	800b410 <tcp_slowtmr+0x1f0>
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b3f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d008      	beq.n	800b410 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800b3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b400:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b404:	b29b      	uxth	r3, r3
 800b406:	3301      	adds	r3, #1
 800b408:	b29b      	uxth	r3, r3
 800b40a:	b21a      	sxth	r2, r3
 800b40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b41c:	429a      	cmp	r2, r3
 800b41e:	db7b      	blt.n	800b518 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b422:	f004 f821 	bl	800f468 <tcp_rexmit_rto_prepare>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d007      	beq.n	800b43c <tcp_slowtmr+0x21c>
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b430:	2b00      	cmp	r3, #0
 800b432:	d171      	bne.n	800b518 <tcp_slowtmr+0x2f8>
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d06d      	beq.n	800b518 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800b43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43e:	7d1b      	ldrb	r3, [r3, #20]
 800b440:	2b02      	cmp	r3, #2
 800b442:	d03a      	beq.n	800b4ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b44a:	2b0c      	cmp	r3, #12
 800b44c:	bf28      	it	cs
 800b44e:	230c      	movcs	r3, #12
 800b450:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b458:	10db      	asrs	r3, r3, #3
 800b45a:	b21b      	sxth	r3, r3
 800b45c:	461a      	mov	r2, r3
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b464:	4413      	add	r3, r2
 800b466:	7efa      	ldrb	r2, [r7, #27]
 800b468:	4910      	ldr	r1, [pc, #64]	; (800b4ac <tcp_slowtmr+0x28c>)
 800b46a:	5c8a      	ldrb	r2, [r1, r2]
 800b46c:	4093      	lsls	r3, r2
 800b46e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b476:	4293      	cmp	r3, r2
 800b478:	dc1a      	bgt.n	800b4b0 <tcp_slowtmr+0x290>
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	b21a      	sxth	r2, r3
 800b47e:	e019      	b.n	800b4b4 <tcp_slowtmr+0x294>
 800b480:	200090e8 	.word	0x200090e8
 800b484:	200002c6 	.word	0x200002c6
 800b488:	200090e4 	.word	0x200090e4
 800b48c:	08017c80 	.word	0x08017c80
 800b490:	08017fc4 	.word	0x08017fc4
 800b494:	08017cc4 	.word	0x08017cc4
 800b498:	08017ff0 	.word	0x08017ff0
 800b49c:	0801801c 	.word	0x0801801c
 800b4a0:	0801804c 	.word	0x0801804c
 800b4a4:	08018080 	.word	0x08018080
 800b4a8:	08019c44 	.word	0x08019c44
 800b4ac:	08019c34 	.word	0x08019c34
 800b4b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800b4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4bc:	2200      	movs	r2, #0
 800b4be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	bf28      	it	cs
 800b4d0:	4613      	movcs	r3, r2
 800b4d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800b4d4:	8a7b      	ldrh	r3, [r7, #18]
 800b4d6:	085b      	lsrs	r3, r3, #1
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d206      	bcs.n	800b500 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b506:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800b50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800b512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b514:	f004 f818 	bl	800f548 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51a:	7d1b      	ldrb	r3, [r3, #20]
 800b51c:	2b06      	cmp	r3, #6
 800b51e:	d111      	bne.n	800b544 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b522:	8b5b      	ldrh	r3, [r3, #26]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b52c:	4b9d      	ldr	r3, [pc, #628]	; (800b7a4 <tcp_slowtmr+0x584>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	6a1b      	ldr	r3, [r3, #32]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b28      	cmp	r3, #40	; 0x28
 800b538:	d904      	bls.n	800b544 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b53a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b53e:	3301      	adds	r3, #1
 800b540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b546:	7a5b      	ldrb	r3, [r3, #9]
 800b548:	f003 0308 	and.w	r3, r3, #8
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d04c      	beq.n	800b5ea <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b554:	2b04      	cmp	r3, #4
 800b556:	d003      	beq.n	800b560 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800b55c:	2b07      	cmp	r3, #7
 800b55e:	d144      	bne.n	800b5ea <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b560:	4b90      	ldr	r3, [pc, #576]	; (800b7a4 <tcp_slowtmr+0x584>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b570:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b574:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b578:	498b      	ldr	r1, [pc, #556]	; (800b7a8 <tcp_slowtmr+0x588>)
 800b57a:	fba1 1303 	umull	r1, r3, r1, r3
 800b57e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b580:	429a      	cmp	r2, r3
 800b582:	d90a      	bls.n	800b59a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b588:	3301      	adds	r3, #1
 800b58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800b58e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b592:	3301      	adds	r3, #1
 800b594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b598:	e027      	b.n	800b5ea <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b59a:	4b82      	ldr	r3, [pc, #520]	; (800b7a4 <tcp_slowtmr+0x584>)
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800b5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	4b7e      	ldr	r3, [pc, #504]	; (800b7ac <tcp_slowtmr+0x58c>)
 800b5b4:	fb03 f300 	mul.w	r3, r3, r0
 800b5b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b5ba:	497b      	ldr	r1, [pc, #492]	; (800b7a8 <tcp_slowtmr+0x588>)
 800b5bc:	fba1 1303 	umull	r1, r3, r1, r3
 800b5c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d911      	bls.n	800b5ea <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800b5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5c8:	f004 fac4 	bl	800fb54 <tcp_keepalive>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800b5d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d107      	bne.n	800b5ea <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d011      	beq.n	800b616 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b5f2:	4b6c      	ldr	r3, [pc, #432]	; (800b7a4 <tcp_slowtmr+0x584>)
 800b5f4:	681a      	ldr	r2, [r3, #0]
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	1ad2      	subs	r2, r2, r3
 800b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b602:	4619      	mov	r1, r3
 800b604:	460b      	mov	r3, r1
 800b606:	005b      	lsls	r3, r3, #1
 800b608:	440b      	add	r3, r1
 800b60a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d302      	bcc.n	800b616 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800b610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b612:	f000 fddb 	bl	800c1cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	7d1b      	ldrb	r3, [r3, #20]
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d10b      	bne.n	800b636 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b61e:	4b61      	ldr	r3, [pc, #388]	; (800b7a4 <tcp_slowtmr+0x584>)
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b624:	6a1b      	ldr	r3, [r3, #32]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	2b28      	cmp	r3, #40	; 0x28
 800b62a:	d904      	bls.n	800b636 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b630:	3301      	adds	r3, #1
 800b632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b638:	7d1b      	ldrb	r3, [r3, #20]
 800b63a:	2b09      	cmp	r3, #9
 800b63c:	d10b      	bne.n	800b656 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b63e:	4b59      	ldr	r3, [pc, #356]	; (800b7a4 <tcp_slowtmr+0x584>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	2bf0      	cmp	r3, #240	; 0xf0
 800b64a:	d904      	bls.n	800b656 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b650:	3301      	adds	r3, #1
 800b652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d060      	beq.n	800b720 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b664:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b666:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b668:	f000 fbfc 	bl	800be64 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d010      	beq.n	800b694 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b672:	4b4f      	ldr	r3, [pc, #316]	; (800b7b0 <tcp_slowtmr+0x590>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b678:	429a      	cmp	r2, r3
 800b67a:	d106      	bne.n	800b68a <tcp_slowtmr+0x46a>
 800b67c:	4b4d      	ldr	r3, [pc, #308]	; (800b7b4 <tcp_slowtmr+0x594>)
 800b67e:	f240 526d 	movw	r2, #1389	; 0x56d
 800b682:	494d      	ldr	r1, [pc, #308]	; (800b7b8 <tcp_slowtmr+0x598>)
 800b684:	484d      	ldr	r0, [pc, #308]	; (800b7bc <tcp_slowtmr+0x59c>)
 800b686:	f008 fa0f 	bl	8013aa8 <iprintf>
        prev->next = pcb->next;
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	68da      	ldr	r2, [r3, #12]
 800b68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b690:	60da      	str	r2, [r3, #12]
 800b692:	e00f      	b.n	800b6b4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b694:	4b46      	ldr	r3, [pc, #280]	; (800b7b0 <tcp_slowtmr+0x590>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d006      	beq.n	800b6ac <tcp_slowtmr+0x48c>
 800b69e:	4b45      	ldr	r3, [pc, #276]	; (800b7b4 <tcp_slowtmr+0x594>)
 800b6a0:	f240 5271 	movw	r2, #1393	; 0x571
 800b6a4:	4946      	ldr	r1, [pc, #280]	; (800b7c0 <tcp_slowtmr+0x5a0>)
 800b6a6:	4845      	ldr	r0, [pc, #276]	; (800b7bc <tcp_slowtmr+0x59c>)
 800b6a8:	f008 f9fe 	bl	8013aa8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	4a3f      	ldr	r2, [pc, #252]	; (800b7b0 <tcp_slowtmr+0x590>)
 800b6b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b6b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d013      	beq.n	800b6e4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b6c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6cc:	8ad2      	ldrh	r2, [r2, #22]
 800b6ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6d0:	8b09      	ldrh	r1, [r1, #24]
 800b6d2:	9102      	str	r1, [sp, #8]
 800b6d4:	9201      	str	r2, [sp, #4]
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	462b      	mov	r3, r5
 800b6da:	4622      	mov	r2, r4
 800b6dc:	4601      	mov	r1, r0
 800b6de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6e0:	f004 f984 	bl	800f9ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	7d1b      	ldrb	r3, [r3, #20]
 800b6ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b6fa:	6838      	ldr	r0, [r7, #0]
 800b6fc:	f7ff f9f2 	bl	800aae4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b700:	4b30      	ldr	r3, [pc, #192]	; (800b7c4 <tcp_slowtmr+0x5a4>)
 800b702:	2200      	movs	r2, #0
 800b704:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d004      	beq.n	800b716 <tcp_slowtmr+0x4f6>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f06f 010c 	mvn.w	r1, #12
 800b712:	68b8      	ldr	r0, [r7, #8]
 800b714:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b716:	4b2b      	ldr	r3, [pc, #172]	; (800b7c4 <tcp_slowtmr+0x5a4>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d037      	beq.n	800b78e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b71e:	e590      	b.n	800b242 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	7f1b      	ldrb	r3, [r3, #28]
 800b72e:	3301      	adds	r3, #1
 800b730:	b2da      	uxtb	r2, r3
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	7f1a      	ldrb	r2, [r3, #28]
 800b73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73c:	7f5b      	ldrb	r3, [r3, #29]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d325      	bcc.n	800b78e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b744:	2200      	movs	r2, #0
 800b746:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b748:	4b1e      	ldr	r3, [pc, #120]	; (800b7c4 <tcp_slowtmr+0x5a4>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00b      	beq.n	800b770 <tcp_slowtmr+0x550>
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b75e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b760:	6912      	ldr	r2, [r2, #16]
 800b762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b764:	4610      	mov	r0, r2
 800b766:	4798      	blx	r3
 800b768:	4603      	mov	r3, r0
 800b76a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b76e:	e002      	b.n	800b776 <tcp_slowtmr+0x556>
 800b770:	2300      	movs	r3, #0
 800b772:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b776:	4b13      	ldr	r3, [pc, #76]	; (800b7c4 <tcp_slowtmr+0x5a4>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d000      	beq.n	800b780 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b77e:	e560      	b.n	800b242 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b780:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b78a:	f003 fb7b 	bl	800ee84 <tcp_output>
  while (pcb != NULL) {
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	2b00      	cmp	r3, #0
 800b792:	f47f ad5c 	bne.w	800b24e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b796:	2300      	movs	r3, #0
 800b798:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b79a:	4b0b      	ldr	r3, [pc, #44]	; (800b7c8 <tcp_slowtmr+0x5a8>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b7a0:	e067      	b.n	800b872 <tcp_slowtmr+0x652>
 800b7a2:	bf00      	nop
 800b7a4:	200090e8 	.word	0x200090e8
 800b7a8:	10624dd3 	.word	0x10624dd3
 800b7ac:	000124f8 	.word	0x000124f8
 800b7b0:	200090e4 	.word	0x200090e4
 800b7b4:	08017c80 	.word	0x08017c80
 800b7b8:	080180b8 	.word	0x080180b8
 800b7bc:	08017cc4 	.word	0x08017cc4
 800b7c0:	080180e4 	.word	0x080180e4
 800b7c4:	200090e0 	.word	0x200090e0
 800b7c8:	200090f4 	.word	0x200090f4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ce:	7d1b      	ldrb	r3, [r3, #20]
 800b7d0:	2b0a      	cmp	r3, #10
 800b7d2:	d006      	beq.n	800b7e2 <tcp_slowtmr+0x5c2>
 800b7d4:	4b2b      	ldr	r3, [pc, #172]	; (800b884 <tcp_slowtmr+0x664>)
 800b7d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b7da:	492b      	ldr	r1, [pc, #172]	; (800b888 <tcp_slowtmr+0x668>)
 800b7dc:	482b      	ldr	r0, [pc, #172]	; (800b88c <tcp_slowtmr+0x66c>)
 800b7de:	f008 f963 	bl	8013aa8 <iprintf>
    pcb_remove = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b7e8:	4b29      	ldr	r3, [pc, #164]	; (800b890 <tcp_slowtmr+0x670>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	1ad3      	subs	r3, r2, r3
 800b7f2:	2bf0      	cmp	r3, #240	; 0xf0
 800b7f4:	d904      	bls.n	800b800 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b7f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b804:	2b00      	cmp	r3, #0
 800b806:	d02f      	beq.n	800b868 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b80a:	f000 fb2b 	bl	800be64 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b810:	2b00      	cmp	r3, #0
 800b812:	d010      	beq.n	800b836 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b814:	4b1f      	ldr	r3, [pc, #124]	; (800b894 <tcp_slowtmr+0x674>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d106      	bne.n	800b82c <tcp_slowtmr+0x60c>
 800b81e:	4b19      	ldr	r3, [pc, #100]	; (800b884 <tcp_slowtmr+0x664>)
 800b820:	f240 52af 	movw	r2, #1455	; 0x5af
 800b824:	491c      	ldr	r1, [pc, #112]	; (800b898 <tcp_slowtmr+0x678>)
 800b826:	4819      	ldr	r0, [pc, #100]	; (800b88c <tcp_slowtmr+0x66c>)
 800b828:	f008 f93e 	bl	8013aa8 <iprintf>
        prev->next = pcb->next;
 800b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82e:	68da      	ldr	r2, [r3, #12]
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	60da      	str	r2, [r3, #12]
 800b834:	e00f      	b.n	800b856 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b836:	4b17      	ldr	r3, [pc, #92]	; (800b894 <tcp_slowtmr+0x674>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d006      	beq.n	800b84e <tcp_slowtmr+0x62e>
 800b840:	4b10      	ldr	r3, [pc, #64]	; (800b884 <tcp_slowtmr+0x664>)
 800b842:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b846:	4915      	ldr	r1, [pc, #84]	; (800b89c <tcp_slowtmr+0x67c>)
 800b848:	4810      	ldr	r0, [pc, #64]	; (800b88c <tcp_slowtmr+0x66c>)
 800b84a:	f008 f92d 	bl	8013aa8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	4a10      	ldr	r2, [pc, #64]	; (800b894 <tcp_slowtmr+0x674>)
 800b854:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b860:	69f8      	ldr	r0, [r7, #28]
 800b862:	f7ff f93f 	bl	800aae4 <tcp_free>
 800b866:	e004      	b.n	800b872 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1a9      	bne.n	800b7cc <tcp_slowtmr+0x5ac>
    }
  }
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	3730      	adds	r7, #48	; 0x30
 800b87e:	46bd      	mov	sp, r7
 800b880:	bdb0      	pop	{r4, r5, r7, pc}
 800b882:	bf00      	nop
 800b884:	08017c80 	.word	0x08017c80
 800b888:	08018110 	.word	0x08018110
 800b88c:	08017cc4 	.word	0x08017cc4
 800b890:	200090e8 	.word	0x200090e8
 800b894:	200090f4 	.word	0x200090f4
 800b898:	08018140 	.word	0x08018140
 800b89c:	08018168 	.word	0x08018168

0800b8a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b8a6:	4b2d      	ldr	r3, [pc, #180]	; (800b95c <tcp_fasttmr+0xbc>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	b2da      	uxtb	r2, r3
 800b8ae:	4b2b      	ldr	r3, [pc, #172]	; (800b95c <tcp_fasttmr+0xbc>)
 800b8b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b8b2:	4b2b      	ldr	r3, [pc, #172]	; (800b960 <tcp_fasttmr+0xc0>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b8b8:	e048      	b.n	800b94c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7f9a      	ldrb	r2, [r3, #30]
 800b8be:	4b27      	ldr	r3, [pc, #156]	; (800b95c <tcp_fasttmr+0xbc>)
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d03f      	beq.n	800b946 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b8c6:	4b25      	ldr	r3, [pc, #148]	; (800b95c <tcp_fasttmr+0xbc>)
 800b8c8:	781a      	ldrb	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	8b5b      	ldrh	r3, [r3, #26]
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d010      	beq.n	800b8fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	8b5b      	ldrh	r3, [r3, #26]
 800b8de:	f043 0302 	orr.w	r3, r3, #2
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f003 facb 	bl	800ee84 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	8b5b      	ldrh	r3, [r3, #26]
 800b8f2:	f023 0303 	bic.w	r3, r3, #3
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	8b5b      	ldrh	r3, [r3, #26]
 800b900:	f003 0308 	and.w	r3, r3, #8
 800b904:	2b00      	cmp	r3, #0
 800b906:	d009      	beq.n	800b91c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8b5b      	ldrh	r3, [r3, #26]
 800b90c:	f023 0308 	bic.w	r3, r3, #8
 800b910:	b29a      	uxth	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f7ff fa78 	bl	800ae0c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b92a:	4b0e      	ldr	r3, [pc, #56]	; (800b964 <tcp_fasttmr+0xc4>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f819 	bl	800b968 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b936:	4b0b      	ldr	r3, [pc, #44]	; (800b964 <tcp_fasttmr+0xc4>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d000      	beq.n	800b940 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b93e:	e7b8      	b.n	800b8b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	607b      	str	r3, [r7, #4]
 800b944:	e002      	b.n	800b94c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1b3      	bne.n	800b8ba <tcp_fasttmr+0x1a>
    }
  }
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	200002c6 	.word	0x200002c6
 800b960:	200090e4 	.word	0x200090e4
 800b964:	200090e0 	.word	0x200090e0

0800b968 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b968:	b590      	push	{r4, r7, lr}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <tcp_process_refused_data+0x22>
 800b976:	4b37      	ldr	r3, [pc, #220]	; (800ba54 <tcp_process_refused_data+0xec>)
 800b978:	f240 6209 	movw	r2, #1545	; 0x609
 800b97c:	4936      	ldr	r1, [pc, #216]	; (800ba58 <tcp_process_refused_data+0xf0>)
 800b97e:	4837      	ldr	r0, [pc, #220]	; (800ba5c <tcp_process_refused_data+0xf4>)
 800b980:	f008 f892 	bl	8013aa8 <iprintf>
 800b984:	f06f 030f 	mvn.w	r3, #15
 800b988:	e060      	b.n	800ba4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b98e:	7b5b      	ldrb	r3, [r3, #13]
 800b990:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b996:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00b      	beq.n	800b9c0 <tcp_process_refused_data+0x58>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6918      	ldr	r0, [r3, #16]
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	47a0      	blx	r4
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73fb      	strb	r3, [r7, #15]
 800b9be:	e007      	b.n	800b9d0 <tcp_process_refused_data+0x68>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	6879      	ldr	r1, [r7, #4]
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	f000 f8a4 	bl	800bb14 <tcp_recv_null>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d12a      	bne.n	800ba2e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	f003 0320 	and.w	r3, r3, #32
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d033      	beq.n	800ba4a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b9ea:	d005      	beq.n	800b9f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00b      	beq.n	800ba1a <tcp_process_refused_data+0xb2>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6918      	ldr	r0, [r3, #16]
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	2200      	movs	r2, #0
 800ba10:	6879      	ldr	r1, [r7, #4]
 800ba12:	47a0      	blx	r4
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
 800ba18:	e001      	b.n	800ba1e <tcp_process_refused_data+0xb6>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ba1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba22:	f113 0f0d 	cmn.w	r3, #13
 800ba26:	d110      	bne.n	800ba4a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ba28:	f06f 030c 	mvn.w	r3, #12
 800ba2c:	e00e      	b.n	800ba4c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ba2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba32:	f113 0f0d 	cmn.w	r3, #13
 800ba36:	d102      	bne.n	800ba3e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ba38:	f06f 030c 	mvn.w	r3, #12
 800ba3c:	e006      	b.n	800ba4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ba44:	f06f 0304 	mvn.w	r3, #4
 800ba48:	e000      	b.n	800ba4c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd90      	pop	{r4, r7, pc}
 800ba54:	08017c80 	.word	0x08017c80
 800ba58:	08018190 	.word	0x08018190
 800ba5c:	08017cc4 	.word	0x08017cc4

0800ba60 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ba68:	e007      	b.n	800ba7a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f80a 	bl	800ba8a <tcp_seg_free>
    seg = next;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1f4      	bne.n	800ba6a <tcp_segs_free+0xa>
  }
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00c      	beq.n	800bab2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d004      	beq.n	800baaa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe fcdb 	bl	800a460 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	2003      	movs	r0, #3
 800baae:	f7fd fec5 	bl	800983c <memp_free>
  }
}
 800bab2:	bf00      	nop
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
	...

0800babc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d106      	bne.n	800bad8 <tcp_seg_copy+0x1c>
 800baca:	4b0f      	ldr	r3, [pc, #60]	; (800bb08 <tcp_seg_copy+0x4c>)
 800bacc:	f240 6282 	movw	r2, #1666	; 0x682
 800bad0:	490e      	ldr	r1, [pc, #56]	; (800bb0c <tcp_seg_copy+0x50>)
 800bad2:	480f      	ldr	r0, [pc, #60]	; (800bb10 <tcp_seg_copy+0x54>)
 800bad4:	f007 ffe8 	bl	8013aa8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bad8:	2003      	movs	r0, #3
 800bada:	f7fd fe63 	bl	80097a4 <memp_malloc>
 800bade:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <tcp_seg_copy+0x2e>
    return NULL;
 800bae6:	2300      	movs	r3, #0
 800bae8:	e00a      	b.n	800bb00 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800baea:	2210      	movs	r2, #16
 800baec:	6879      	ldr	r1, [r7, #4]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f007 fa96 	bl	8013020 <memcpy>
  pbuf_ref(cseg->p);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fe fd51 	bl	800a5a0 <pbuf_ref>
  return cseg;
 800bafe:	68fb      	ldr	r3, [r7, #12]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	08017c80 	.word	0x08017c80
 800bb0c:	080181d4 	.word	0x080181d4
 800bb10:	08017cc4 	.word	0x08017cc4

0800bb14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d109      	bne.n	800bb3c <tcp_recv_null+0x28>
 800bb28:	4b12      	ldr	r3, [pc, #72]	; (800bb74 <tcp_recv_null+0x60>)
 800bb2a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bb2e:	4912      	ldr	r1, [pc, #72]	; (800bb78 <tcp_recv_null+0x64>)
 800bb30:	4812      	ldr	r0, [pc, #72]	; (800bb7c <tcp_recv_null+0x68>)
 800bb32:	f007 ffb9 	bl	8013aa8 <iprintf>
 800bb36:	f06f 030f 	mvn.w	r3, #15
 800bb3a:	e016      	b.n	800bb6a <tcp_recv_null+0x56>

  if (p != NULL) {
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d009      	beq.n	800bb56 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	891b      	ldrh	r3, [r3, #8]
 800bb46:	4619      	mov	r1, r3
 800bb48:	68b8      	ldr	r0, [r7, #8]
 800bb4a:	f7ff fb19 	bl	800b180 <tcp_recved>
    pbuf_free(p);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7fe fc86 	bl	800a460 <pbuf_free>
 800bb54:	e008      	b.n	800bb68 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800bb56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d104      	bne.n	800bb68 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800bb5e:	68b8      	ldr	r0, [r7, #8]
 800bb60:	f7ff f9be 	bl	800aee0 <tcp_close>
 800bb64:	4603      	mov	r3, r0
 800bb66:	e000      	b.n	800bb6a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	08017c80 	.word	0x08017c80
 800bb78:	080181f0 	.word	0x080181f0
 800bb7c:	08017cc4 	.word	0x08017cc4

0800bb80 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bb8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	db01      	blt.n	800bb96 <tcp_kill_prio+0x16>
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	e000      	b.n	800bb98 <tcp_kill_prio+0x18>
 800bb96:	237f      	movs	r3, #127	; 0x7f
 800bb98:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800bb9a:	7afb      	ldrb	r3, [r7, #11]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d034      	beq.n	800bc0a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800bba0:	7afb      	ldrb	r3, [r7, #11]
 800bba2:	3b01      	subs	r3, #1
 800bba4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbae:	4b19      	ldr	r3, [pc, #100]	; (800bc14 <tcp_kill_prio+0x94>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	617b      	str	r3, [r7, #20]
 800bbb4:	e01f      	b.n	800bbf6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	7d5b      	ldrb	r3, [r3, #21]
 800bbba:	7afa      	ldrb	r2, [r7, #11]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d80c      	bhi.n	800bbda <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800bbc4:	7afa      	ldrb	r2, [r7, #11]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d112      	bne.n	800bbf0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bbca:	4b13      	ldr	r3, [pc, #76]	; (800bc18 <tcp_kill_prio+0x98>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d80a      	bhi.n	800bbf0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800bbda:	4b0f      	ldr	r3, [pc, #60]	; (800bc18 <tcp_kill_prio+0x98>)
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	7d5b      	ldrb	r3, [r3, #21]
 800bbee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	617b      	str	r3, [r7, #20]
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1dc      	bne.n	800bbb6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d004      	beq.n	800bc0c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bc02:	6938      	ldr	r0, [r7, #16]
 800bc04:	f7ff fa56 	bl	800b0b4 <tcp_abort>
 800bc08:	e000      	b.n	800bc0c <tcp_kill_prio+0x8c>
    return;
 800bc0a:	bf00      	nop
  }
}
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	200090e4 	.word	0x200090e4
 800bc18:	200090e8 	.word	0x200090e8

0800bc1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bc26:	79fb      	ldrb	r3, [r7, #7]
 800bc28:	2b08      	cmp	r3, #8
 800bc2a:	d009      	beq.n	800bc40 <tcp_kill_state+0x24>
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	2b09      	cmp	r3, #9
 800bc30:	d006      	beq.n	800bc40 <tcp_kill_state+0x24>
 800bc32:	4b1a      	ldr	r3, [pc, #104]	; (800bc9c <tcp_kill_state+0x80>)
 800bc34:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800bc38:	4919      	ldr	r1, [pc, #100]	; (800bca0 <tcp_kill_state+0x84>)
 800bc3a:	481a      	ldr	r0, [pc, #104]	; (800bca4 <tcp_kill_state+0x88>)
 800bc3c:	f007 ff34 	bl	8013aa8 <iprintf>

  inactivity = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bc44:	2300      	movs	r3, #0
 800bc46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc48:	4b17      	ldr	r3, [pc, #92]	; (800bca8 <tcp_kill_state+0x8c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	617b      	str	r3, [r7, #20]
 800bc4e:	e017      	b.n	800bc80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	7d1b      	ldrb	r3, [r3, #20]
 800bc54:	79fa      	ldrb	r2, [r7, #7]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d10f      	bne.n	800bc7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc5a:	4b14      	ldr	r3, [pc, #80]	; (800bcac <tcp_kill_state+0x90>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d807      	bhi.n	800bc7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bc6a:	4b10      	ldr	r3, [pc, #64]	; (800bcac <tcp_kill_state+0x90>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1e4      	bne.n	800bc50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d003      	beq.n	800bc94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	6938      	ldr	r0, [r7, #16]
 800bc90:	f7ff f952 	bl	800af38 <tcp_abandon>
  }
}
 800bc94:	bf00      	nop
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	08017c80 	.word	0x08017c80
 800bca0:	0801820c 	.word	0x0801820c
 800bca4:	08017cc4 	.word	0x08017cc4
 800bca8:	200090e4 	.word	0x200090e4
 800bcac:	200090e8 	.word	0x200090e8

0800bcb0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcbe:	4b12      	ldr	r3, [pc, #72]	; (800bd08 <tcp_kill_timewait+0x58>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	e012      	b.n	800bcec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bcc6:	4b11      	ldr	r3, [pc, #68]	; (800bd0c <tcp_kill_timewait+0x5c>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6a1b      	ldr	r3, [r3, #32]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d807      	bhi.n	800bce6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bcd6:	4b0d      	ldr	r3, [pc, #52]	; (800bd0c <tcp_kill_timewait+0x5c>)
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6a1b      	ldr	r3, [r3, #32]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1e9      	bne.n	800bcc6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bcf8:	68b8      	ldr	r0, [r7, #8]
 800bcfa:	f7ff f9db 	bl	800b0b4 <tcp_abort>
  }
}
 800bcfe:	bf00      	nop
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	200090f4 	.word	0x200090f4
 800bd0c:	200090e8 	.word	0x200090e8

0800bd10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bd16:	4b10      	ldr	r3, [pc, #64]	; (800bd58 <tcp_handle_closepend+0x48>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bd1c:	e014      	b.n	800bd48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	8b5b      	ldrh	r3, [r3, #26]
 800bd28:	f003 0308 	and.w	r3, r3, #8
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d009      	beq.n	800bd44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8b5b      	ldrh	r3, [r3, #26]
 800bd34:	f023 0308 	bic.w	r3, r3, #8
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff f864 	bl	800ae0c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1e7      	bne.n	800bd1e <tcp_handle_closepend+0xe>
  }
}
 800bd4e:	bf00      	nop
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	200090e4 	.word	0x200090e4

0800bd5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b084      	sub	sp, #16
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	4603      	mov	r3, r0
 800bd64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd66:	2001      	movs	r0, #1
 800bd68:	f7fd fd1c 	bl	80097a4 <memp_malloc>
 800bd6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d126      	bne.n	800bdc2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800bd74:	f7ff ffcc 	bl	800bd10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bd78:	f7ff ff9a 	bl	800bcb0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f7fd fd11 	bl	80097a4 <memp_malloc>
 800bd82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d11b      	bne.n	800bdc2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bd8a:	2009      	movs	r0, #9
 800bd8c:	f7ff ff46 	bl	800bc1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd90:	2001      	movs	r0, #1
 800bd92:	f7fd fd07 	bl	80097a4 <memp_malloc>
 800bd96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d111      	bne.n	800bdc2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bd9e:	2008      	movs	r0, #8
 800bda0:	f7ff ff3c 	bl	800bc1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bda4:	2001      	movs	r0, #1
 800bda6:	f7fd fcfd 	bl	80097a4 <memp_malloc>
 800bdaa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d107      	bne.n	800bdc2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bdb2:	79fb      	ldrb	r3, [r7, #7]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff fee3 	bl	800bb80 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bdba:	2001      	movs	r0, #1
 800bdbc:	f7fd fcf2 	bl	80097a4 <memp_malloc>
 800bdc0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d03f      	beq.n	800be48 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bdc8:	229c      	movs	r2, #156	; 0x9c
 800bdca:	2100      	movs	r1, #0
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	f007 f94f 	bl	8013070 <memset>
    pcb->prio = prio;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	79fa      	ldrb	r2, [r7, #7]
 800bdd6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bdde:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bde8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	22ff      	movs	r2, #255	; 0xff
 800bdf6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bdfe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2206      	movs	r2, #6
 800be04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2206      	movs	r2, #6
 800be0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be14:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2201      	movs	r2, #1
 800be1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800be1e:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <tcp_alloc+0xf8>)
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800be26:	4b0c      	ldr	r3, [pc, #48]	; (800be58 <tcp_alloc+0xfc>)
 800be28:	781a      	ldrb	r2, [r3, #0]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800be34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4a08      	ldr	r2, [pc, #32]	; (800be5c <tcp_alloc+0x100>)
 800be3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4a07      	ldr	r2, [pc, #28]	; (800be60 <tcp_alloc+0x104>)
 800be44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800be48:	68fb      	ldr	r3, [r7, #12]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3710      	adds	r7, #16
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200090e8 	.word	0x200090e8
 800be58:	200002c6 	.word	0x200002c6
 800be5c:	0800bb15 	.word	0x0800bb15
 800be60:	006ddd00 	.word	0x006ddd00

0800be64 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d107      	bne.n	800be82 <tcp_pcb_purge+0x1e>
 800be72:	4b21      	ldr	r3, [pc, #132]	; (800bef8 <tcp_pcb_purge+0x94>)
 800be74:	f640 0251 	movw	r2, #2129	; 0x851
 800be78:	4920      	ldr	r1, [pc, #128]	; (800befc <tcp_pcb_purge+0x98>)
 800be7a:	4821      	ldr	r0, [pc, #132]	; (800bf00 <tcp_pcb_purge+0x9c>)
 800be7c:	f007 fe14 	bl	8013aa8 <iprintf>
 800be80:	e037      	b.n	800bef2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7d1b      	ldrb	r3, [r3, #20]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d033      	beq.n	800bef2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800be8e:	2b0a      	cmp	r3, #10
 800be90:	d02f      	beq.n	800bef2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800be96:	2b01      	cmp	r3, #1
 800be98:	d02b      	beq.n	800bef2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d007      	beq.n	800beb2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fada 	bl	800a460 <pbuf_free>
      pcb->refused_data = NULL;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 f986 	bl	800c1cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bec6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800becc:	4618      	mov	r0, r3
 800bece:	f7ff fdc7 	bl	800ba60 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff fdc2 	bl	800ba60 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	66da      	str	r2, [r3, #108]	; 0x6c
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	08017c80 	.word	0x08017c80
 800befc:	080182cc 	.word	0x080182cc
 800bf00:	08017cc4 	.word	0x08017cc4

0800bf04 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d106      	bne.n	800bf22 <tcp_pcb_remove+0x1e>
 800bf14:	4b3e      	ldr	r3, [pc, #248]	; (800c010 <tcp_pcb_remove+0x10c>)
 800bf16:	f640 0283 	movw	r2, #2179	; 0x883
 800bf1a:	493e      	ldr	r1, [pc, #248]	; (800c014 <tcp_pcb_remove+0x110>)
 800bf1c:	483e      	ldr	r0, [pc, #248]	; (800c018 <tcp_pcb_remove+0x114>)
 800bf1e:	f007 fdc3 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <tcp_pcb_remove+0x32>
 800bf28:	4b39      	ldr	r3, [pc, #228]	; (800c010 <tcp_pcb_remove+0x10c>)
 800bf2a:	f640 0284 	movw	r2, #2180	; 0x884
 800bf2e:	493b      	ldr	r1, [pc, #236]	; (800c01c <tcp_pcb_remove+0x118>)
 800bf30:	4839      	ldr	r0, [pc, #228]	; (800c018 <tcp_pcb_remove+0x114>)
 800bf32:	f007 fdb9 	bl	8013aa8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d105      	bne.n	800bf4c <tcp_pcb_remove+0x48>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68da      	ldr	r2, [r3, #12]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	601a      	str	r2, [r3, #0]
 800bf4a:	e013      	b.n	800bf74 <tcp_pcb_remove+0x70>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	e00c      	b.n	800bf6e <tcp_pcb_remove+0x6a>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d104      	bne.n	800bf68 <tcp_pcb_remove+0x64>
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	68da      	ldr	r2, [r3, #12]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	60da      	str	r2, [r3, #12]
 800bf66:	e005      	b.n	800bf74 <tcp_pcb_remove+0x70>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	60fb      	str	r3, [r7, #12]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1ef      	bne.n	800bf54 <tcp_pcb_remove+0x50>
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	2200      	movs	r2, #0
 800bf78:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bf7a:	6838      	ldr	r0, [r7, #0]
 800bf7c:	f7ff ff72 	bl	800be64 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	7d1b      	ldrb	r3, [r3, #20]
 800bf84:	2b0a      	cmp	r3, #10
 800bf86:	d013      	beq.n	800bfb0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d00f      	beq.n	800bfb0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	8b5b      	ldrh	r3, [r3, #26]
 800bf94:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d009      	beq.n	800bfb0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	8b5b      	ldrh	r3, [r3, #26]
 800bfa0:	f043 0302 	orr.w	r3, r3, #2
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bfaa:	6838      	ldr	r0, [r7, #0]
 800bfac:	f002 ff6a 	bl	800ee84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	7d1b      	ldrb	r3, [r3, #20]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d020      	beq.n	800bffa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d006      	beq.n	800bfce <tcp_pcb_remove+0xca>
 800bfc0:	4b13      	ldr	r3, [pc, #76]	; (800c010 <tcp_pcb_remove+0x10c>)
 800bfc2:	f640 0293 	movw	r2, #2195	; 0x893
 800bfc6:	4916      	ldr	r1, [pc, #88]	; (800c020 <tcp_pcb_remove+0x11c>)
 800bfc8:	4813      	ldr	r0, [pc, #76]	; (800c018 <tcp_pcb_remove+0x114>)
 800bfca:	f007 fd6d 	bl	8013aa8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d006      	beq.n	800bfe4 <tcp_pcb_remove+0xe0>
 800bfd6:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <tcp_pcb_remove+0x10c>)
 800bfd8:	f640 0294 	movw	r2, #2196	; 0x894
 800bfdc:	4911      	ldr	r1, [pc, #68]	; (800c024 <tcp_pcb_remove+0x120>)
 800bfde:	480e      	ldr	r0, [pc, #56]	; (800c018 <tcp_pcb_remove+0x114>)
 800bfe0:	f007 fd62 	bl	8013aa8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d006      	beq.n	800bffa <tcp_pcb_remove+0xf6>
 800bfec:	4b08      	ldr	r3, [pc, #32]	; (800c010 <tcp_pcb_remove+0x10c>)
 800bfee:	f640 0296 	movw	r2, #2198	; 0x896
 800bff2:	490d      	ldr	r1, [pc, #52]	; (800c028 <tcp_pcb_remove+0x124>)
 800bff4:	4808      	ldr	r0, [pc, #32]	; (800c018 <tcp_pcb_remove+0x114>)
 800bff6:	f007 fd57 	bl	8013aa8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2200      	movs	r2, #0
 800bffe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2200      	movs	r2, #0
 800c004:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c006:	bf00      	nop
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	08017c80 	.word	0x08017c80
 800c014:	080182e8 	.word	0x080182e8
 800c018:	08017cc4 	.word	0x08017cc4
 800c01c:	08018304 	.word	0x08018304
 800c020:	08018324 	.word	0x08018324
 800c024:	0801833c 	.word	0x0801833c
 800c028:	08018358 	.word	0x08018358

0800c02c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d106      	bne.n	800c048 <tcp_next_iss+0x1c>
 800c03a:	4b0a      	ldr	r3, [pc, #40]	; (800c064 <tcp_next_iss+0x38>)
 800c03c:	f640 02af 	movw	r2, #2223	; 0x8af
 800c040:	4909      	ldr	r1, [pc, #36]	; (800c068 <tcp_next_iss+0x3c>)
 800c042:	480a      	ldr	r0, [pc, #40]	; (800c06c <tcp_next_iss+0x40>)
 800c044:	f007 fd30 	bl	8013aa8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c048:	4b09      	ldr	r3, [pc, #36]	; (800c070 <tcp_next_iss+0x44>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <tcp_next_iss+0x48>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4413      	add	r3, r2
 800c052:	4a07      	ldr	r2, [pc, #28]	; (800c070 <tcp_next_iss+0x44>)
 800c054:	6013      	str	r3, [r2, #0]
  return iss;
 800c056:	4b06      	ldr	r3, [pc, #24]	; (800c070 <tcp_next_iss+0x44>)
 800c058:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3708      	adds	r7, #8
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	08017c80 	.word	0x08017c80
 800c068:	08018370 	.word	0x08018370
 800c06c:	08017cc4 	.word	0x08017cc4
 800c070:	2000004c 	.word	0x2000004c
 800c074:	200090e8 	.word	0x200090e8

0800c078 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d106      	bne.n	800c09a <tcp_eff_send_mss_netif+0x22>
 800c08c:	4b14      	ldr	r3, [pc, #80]	; (800c0e0 <tcp_eff_send_mss_netif+0x68>)
 800c08e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c092:	4914      	ldr	r1, [pc, #80]	; (800c0e4 <tcp_eff_send_mss_netif+0x6c>)
 800c094:	4814      	ldr	r0, [pc, #80]	; (800c0e8 <tcp_eff_send_mss_netif+0x70>)
 800c096:	f007 fd07 	bl	8013aa8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c0a0:	89fb      	ldrh	r3, [r7, #14]
 800c0a2:	e019      	b.n	800c0d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c0aa:	8afb      	ldrh	r3, [r7, #22]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d012      	beq.n	800c0d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c0b0:	2328      	movs	r3, #40	; 0x28
 800c0b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c0b4:	8afa      	ldrh	r2, [r7, #22]
 800c0b6:	8abb      	ldrh	r3, [r7, #20]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d904      	bls.n	800c0c6 <tcp_eff_send_mss_netif+0x4e>
 800c0bc:	8afa      	ldrh	r2, [r7, #22]
 800c0be:	8abb      	ldrh	r3, [r7, #20]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	e000      	b.n	800c0c8 <tcp_eff_send_mss_netif+0x50>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c0ca:	8a7a      	ldrh	r2, [r7, #18]
 800c0cc:	89fb      	ldrh	r3, [r7, #14]
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	bf28      	it	cs
 800c0d2:	4613      	movcs	r3, r2
 800c0d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c0d6:	89fb      	ldrh	r3, [r7, #14]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3718      	adds	r7, #24
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	08017c80 	.word	0x08017c80
 800c0e4:	0801838c 	.word	0x0801838c
 800c0e8:	08017cc4 	.word	0x08017cc4

0800c0ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d119      	bne.n	800c134 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c100:	4b10      	ldr	r3, [pc, #64]	; (800c144 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c102:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c106:	4910      	ldr	r1, [pc, #64]	; (800c148 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c108:	4810      	ldr	r0, [pc, #64]	; (800c14c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c10a:	f007 fccd 	bl	8013aa8 <iprintf>

  while (pcb != NULL) {
 800c10e:	e011      	b.n	800c134 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d108      	bne.n	800c12e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f7fe ffc6 	bl	800b0b4 <tcp_abort>
      pcb = next;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	e002      	b.n	800c134 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1ea      	bne.n	800c110 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c13a:	bf00      	nop
 800c13c:	bf00      	nop
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	08017c80 	.word	0x08017c80
 800c148:	080183b4 	.word	0x080183b4
 800c14c:	08017cc4 	.word	0x08017cc4

0800c150 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d02a      	beq.n	800c1b6 <tcp_netif_ip_addr_changed+0x66>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d026      	beq.n	800c1b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c168:	4b15      	ldr	r3, [pc, #84]	; (800c1c0 <tcp_netif_ip_addr_changed+0x70>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f7ff ffbc 	bl	800c0ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c174:	4b13      	ldr	r3, [pc, #76]	; (800c1c4 <tcp_netif_ip_addr_changed+0x74>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff ffb6 	bl	800c0ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d017      	beq.n	800c1b6 <tcp_netif_ip_addr_changed+0x66>
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d013      	beq.n	800c1b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c18e:	4b0e      	ldr	r3, [pc, #56]	; (800c1c8 <tcp_netif_ip_addr_changed+0x78>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	60fb      	str	r3, [r7, #12]
 800c194:	e00c      	b.n	800c1b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d103      	bne.n	800c1aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1ef      	bne.n	800c196 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	200090e4 	.word	0x200090e4
 800c1c4:	200090f0 	.word	0x200090f0
 800c1c8:	200090ec 	.word	0x200090ec

0800c1cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d007      	beq.n	800c1ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff fc3d 	bl	800ba60 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c1ec:	bf00      	nop
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c1f4:	b590      	push	{r4, r7, lr}
 800c1f6:	b08d      	sub	sp, #52	; 0x34
 800c1f8:	af04      	add	r7, sp, #16
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d105      	bne.n	800c210 <tcp_input+0x1c>
 800c204:	4b9b      	ldr	r3, [pc, #620]	; (800c474 <tcp_input+0x280>)
 800c206:	2283      	movs	r2, #131	; 0x83
 800c208:	499b      	ldr	r1, [pc, #620]	; (800c478 <tcp_input+0x284>)
 800c20a:	489c      	ldr	r0, [pc, #624]	; (800c47c <tcp_input+0x288>)
 800c20c:	f007 fc4c 	bl	8013aa8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	4a9a      	ldr	r2, [pc, #616]	; (800c480 <tcp_input+0x28c>)
 800c216:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	895b      	ldrh	r3, [r3, #10]
 800c21c:	2b13      	cmp	r3, #19
 800c21e:	f240 83c4 	bls.w	800c9aa <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c222:	4b98      	ldr	r3, [pc, #608]	; (800c484 <tcp_input+0x290>)
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	4a97      	ldr	r2, [pc, #604]	; (800c484 <tcp_input+0x290>)
 800c228:	6812      	ldr	r2, [r2, #0]
 800c22a:	4611      	mov	r1, r2
 800c22c:	4618      	mov	r0, r3
 800c22e:	f005 ff61 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	f040 83ba 	bne.w	800c9ae <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c23a:	4b92      	ldr	r3, [pc, #584]	; (800c484 <tcp_input+0x290>)
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c242:	2be0      	cmp	r3, #224	; 0xe0
 800c244:	f000 83b3 	beq.w	800c9ae <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c248:	4b8d      	ldr	r3, [pc, #564]	; (800c480 <tcp_input+0x28c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	899b      	ldrh	r3, [r3, #12]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	4618      	mov	r0, r3
 800c252:	f7fc fe51 	bl	8008ef8 <lwip_htons>
 800c256:	4603      	mov	r3, r0
 800c258:	0b1b      	lsrs	r3, r3, #12
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c262:	7cbb      	ldrb	r3, [r7, #18]
 800c264:	2b13      	cmp	r3, #19
 800c266:	f240 83a4 	bls.w	800c9b2 <tcp_input+0x7be>
 800c26a:	7cbb      	ldrb	r3, [r7, #18]
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	891b      	ldrh	r3, [r3, #8]
 800c272:	429a      	cmp	r2, r3
 800c274:	f200 839d 	bhi.w	800c9b2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c278:	7cbb      	ldrb	r3, [r7, #18]
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	3b14      	subs	r3, #20
 800c27e:	b29a      	uxth	r2, r3
 800c280:	4b81      	ldr	r3, [pc, #516]	; (800c488 <tcp_input+0x294>)
 800c282:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c284:	4b81      	ldr	r3, [pc, #516]	; (800c48c <tcp_input+0x298>)
 800c286:	2200      	movs	r2, #0
 800c288:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	895a      	ldrh	r2, [r3, #10]
 800c28e:	7cbb      	ldrb	r3, [r7, #18]
 800c290:	b29b      	uxth	r3, r3
 800c292:	429a      	cmp	r2, r3
 800c294:	d309      	bcc.n	800c2aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c296:	4b7c      	ldr	r3, [pc, #496]	; (800c488 <tcp_input+0x294>)
 800c298:	881a      	ldrh	r2, [r3, #0]
 800c29a:	4b7d      	ldr	r3, [pc, #500]	; (800c490 <tcp_input+0x29c>)
 800c29c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c29e:	7cbb      	ldrb	r3, [r7, #18]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7fe f856 	bl	800a354 <pbuf_remove_header>
 800c2a8:	e04e      	b.n	800c348 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d105      	bne.n	800c2be <tcp_input+0xca>
 800c2b2:	4b70      	ldr	r3, [pc, #448]	; (800c474 <tcp_input+0x280>)
 800c2b4:	22c2      	movs	r2, #194	; 0xc2
 800c2b6:	4977      	ldr	r1, [pc, #476]	; (800c494 <tcp_input+0x2a0>)
 800c2b8:	4870      	ldr	r0, [pc, #448]	; (800c47c <tcp_input+0x288>)
 800c2ba:	f007 fbf5 	bl	8013aa8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c2be:	2114      	movs	r1, #20
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7fe f847 	bl	800a354 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	895a      	ldrh	r2, [r3, #10]
 800c2ca:	4b71      	ldr	r3, [pc, #452]	; (800c490 <tcp_input+0x29c>)
 800c2cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c2ce:	4b6e      	ldr	r3, [pc, #440]	; (800c488 <tcp_input+0x294>)
 800c2d0:	881a      	ldrh	r2, [r3, #0]
 800c2d2:	4b6f      	ldr	r3, [pc, #444]	; (800c490 <tcp_input+0x29c>)
 800c2d4:	881b      	ldrh	r3, [r3, #0]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c2da:	4b6d      	ldr	r3, [pc, #436]	; (800c490 <tcp_input+0x29c>)
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	4619      	mov	r1, r3
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7fe f837 	bl	800a354 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	895b      	ldrh	r3, [r3, #10]
 800c2ec:	8a3a      	ldrh	r2, [r7, #16]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	f200 8361 	bhi.w	800c9b6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	4a64      	ldr	r2, [pc, #400]	; (800c48c <tcp_input+0x298>)
 800c2fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	8a3a      	ldrh	r2, [r7, #16]
 800c304:	4611      	mov	r1, r2
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe f824 	bl	800a354 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	891a      	ldrh	r2, [r3, #8]
 800c310:	8a3b      	ldrh	r3, [r7, #16]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	b29a      	uxth	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	895b      	ldrh	r3, [r3, #10]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d005      	beq.n	800c32e <tcp_input+0x13a>
 800c322:	4b54      	ldr	r3, [pc, #336]	; (800c474 <tcp_input+0x280>)
 800c324:	22df      	movs	r2, #223	; 0xdf
 800c326:	495c      	ldr	r1, [pc, #368]	; (800c498 <tcp_input+0x2a4>)
 800c328:	4854      	ldr	r0, [pc, #336]	; (800c47c <tcp_input+0x288>)
 800c32a:	f007 fbbd 	bl	8013aa8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	891a      	ldrh	r2, [r3, #8]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	891b      	ldrh	r3, [r3, #8]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d005      	beq.n	800c348 <tcp_input+0x154>
 800c33c:	4b4d      	ldr	r3, [pc, #308]	; (800c474 <tcp_input+0x280>)
 800c33e:	22e0      	movs	r2, #224	; 0xe0
 800c340:	4956      	ldr	r1, [pc, #344]	; (800c49c <tcp_input+0x2a8>)
 800c342:	484e      	ldr	r0, [pc, #312]	; (800c47c <tcp_input+0x288>)
 800c344:	f007 fbb0 	bl	8013aa8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c348:	4b4d      	ldr	r3, [pc, #308]	; (800c480 <tcp_input+0x28c>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4a4b      	ldr	r2, [pc, #300]	; (800c480 <tcp_input+0x28c>)
 800c352:	6814      	ldr	r4, [r2, #0]
 800c354:	4618      	mov	r0, r3
 800c356:	f7fc fdcf 	bl	8008ef8 <lwip_htons>
 800c35a:	4603      	mov	r3, r0
 800c35c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c35e:	4b48      	ldr	r3, [pc, #288]	; (800c480 <tcp_input+0x28c>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	885b      	ldrh	r3, [r3, #2]
 800c364:	b29b      	uxth	r3, r3
 800c366:	4a46      	ldr	r2, [pc, #280]	; (800c480 <tcp_input+0x28c>)
 800c368:	6814      	ldr	r4, [r2, #0]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fc fdc4 	bl	8008ef8 <lwip_htons>
 800c370:	4603      	mov	r3, r0
 800c372:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c374:	4b42      	ldr	r3, [pc, #264]	; (800c480 <tcp_input+0x28c>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	4a41      	ldr	r2, [pc, #260]	; (800c480 <tcp_input+0x28c>)
 800c37c:	6814      	ldr	r4, [r2, #0]
 800c37e:	4618      	mov	r0, r3
 800c380:	f7fc fdcf 	bl	8008f22 <lwip_htonl>
 800c384:	4603      	mov	r3, r0
 800c386:	6063      	str	r3, [r4, #4]
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	4a45      	ldr	r2, [pc, #276]	; (800c4a0 <tcp_input+0x2ac>)
 800c38c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c38e:	4b3c      	ldr	r3, [pc, #240]	; (800c480 <tcp_input+0x28c>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	4a3a      	ldr	r2, [pc, #232]	; (800c480 <tcp_input+0x28c>)
 800c396:	6814      	ldr	r4, [r2, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fc fdc2 	bl	8008f22 <lwip_htonl>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	60a3      	str	r3, [r4, #8]
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	4a3f      	ldr	r2, [pc, #252]	; (800c4a4 <tcp_input+0x2b0>)
 800c3a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c3a8:	4b35      	ldr	r3, [pc, #212]	; (800c480 <tcp_input+0x28c>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	89db      	ldrh	r3, [r3, #14]
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	4a33      	ldr	r2, [pc, #204]	; (800c480 <tcp_input+0x28c>)
 800c3b2:	6814      	ldr	r4, [r2, #0]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fc fd9f 	bl	8008ef8 <lwip_htons>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c3be:	4b30      	ldr	r3, [pc, #192]	; (800c480 <tcp_input+0x28c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	899b      	ldrh	r3, [r3, #12]
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fc fd96 	bl	8008ef8 <lwip_htons>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	4b34      	ldr	r3, [pc, #208]	; (800c4a8 <tcp_input+0x2b4>)
 800c3d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	891a      	ldrh	r2, [r3, #8]
 800c3de:	4b33      	ldr	r3, [pc, #204]	; (800c4ac <tcp_input+0x2b8>)
 800c3e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c3e2:	4b31      	ldr	r3, [pc, #196]	; (800c4a8 <tcp_input+0x2b4>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	f003 0303 	and.w	r3, r3, #3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00c      	beq.n	800c408 <tcp_input+0x214>
    tcplen++;
 800c3ee:	4b2f      	ldr	r3, [pc, #188]	; (800c4ac <tcp_input+0x2b8>)
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	4b2d      	ldr	r3, [pc, #180]	; (800c4ac <tcp_input+0x2b8>)
 800c3f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	891a      	ldrh	r2, [r3, #8]
 800c3fe:	4b2b      	ldr	r3, [pc, #172]	; (800c4ac <tcp_input+0x2b8>)
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	f200 82d9 	bhi.w	800c9ba <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c408:	2300      	movs	r3, #0
 800c40a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c40c:	4b28      	ldr	r3, [pc, #160]	; (800c4b0 <tcp_input+0x2bc>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	61fb      	str	r3, [r7, #28]
 800c412:	e09d      	b.n	800c550 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	7d1b      	ldrb	r3, [r3, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d105      	bne.n	800c428 <tcp_input+0x234>
 800c41c:	4b15      	ldr	r3, [pc, #84]	; (800c474 <tcp_input+0x280>)
 800c41e:	22fb      	movs	r2, #251	; 0xfb
 800c420:	4924      	ldr	r1, [pc, #144]	; (800c4b4 <tcp_input+0x2c0>)
 800c422:	4816      	ldr	r0, [pc, #88]	; (800c47c <tcp_input+0x288>)
 800c424:	f007 fb40 	bl	8013aa8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	7d1b      	ldrb	r3, [r3, #20]
 800c42c:	2b0a      	cmp	r3, #10
 800c42e:	d105      	bne.n	800c43c <tcp_input+0x248>
 800c430:	4b10      	ldr	r3, [pc, #64]	; (800c474 <tcp_input+0x280>)
 800c432:	22fc      	movs	r2, #252	; 0xfc
 800c434:	4920      	ldr	r1, [pc, #128]	; (800c4b8 <tcp_input+0x2c4>)
 800c436:	4811      	ldr	r0, [pc, #68]	; (800c47c <tcp_input+0x288>)
 800c438:	f007 fb36 	bl	8013aa8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	7d1b      	ldrb	r3, [r3, #20]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d105      	bne.n	800c450 <tcp_input+0x25c>
 800c444:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <tcp_input+0x280>)
 800c446:	22fd      	movs	r2, #253	; 0xfd
 800c448:	491c      	ldr	r1, [pc, #112]	; (800c4bc <tcp_input+0x2c8>)
 800c44a:	480c      	ldr	r0, [pc, #48]	; (800c47c <tcp_input+0x288>)
 800c44c:	f007 fb2c 	bl	8013aa8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	7a1b      	ldrb	r3, [r3, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d033      	beq.n	800c4c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	7a1a      	ldrb	r2, [r3, #8]
 800c45c:	4b09      	ldr	r3, [pc, #36]	; (800c484 <tcp_input+0x290>)
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c464:	3301      	adds	r3, #1
 800c466:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c468:	429a      	cmp	r2, r3
 800c46a:	d029      	beq.n	800c4c0 <tcp_input+0x2cc>
      prev = pcb;
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	61bb      	str	r3, [r7, #24]
      continue;
 800c470:	e06b      	b.n	800c54a <tcp_input+0x356>
 800c472:	bf00      	nop
 800c474:	080183e8 	.word	0x080183e8
 800c478:	0801841c 	.word	0x0801841c
 800c47c:	08018434 	.word	0x08018434
 800c480:	200002d8 	.word	0x200002d8
 800c484:	200039e0 	.word	0x200039e0
 800c488:	200002dc 	.word	0x200002dc
 800c48c:	200002e0 	.word	0x200002e0
 800c490:	200002de 	.word	0x200002de
 800c494:	0801845c 	.word	0x0801845c
 800c498:	0801846c 	.word	0x0801846c
 800c49c:	08018478 	.word	0x08018478
 800c4a0:	200002e8 	.word	0x200002e8
 800c4a4:	200002ec 	.word	0x200002ec
 800c4a8:	200002f4 	.word	0x200002f4
 800c4ac:	200002f2 	.word	0x200002f2
 800c4b0:	200090e4 	.word	0x200090e4
 800c4b4:	08018498 	.word	0x08018498
 800c4b8:	080184c0 	.word	0x080184c0
 800c4bc:	080184ec 	.word	0x080184ec
    }

    if (pcb->remote_port == tcphdr->src &&
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	8b1a      	ldrh	r2, [r3, #24]
 800c4c4:	4b94      	ldr	r3, [pc, #592]	; (800c718 <tcp_input+0x524>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d13a      	bne.n	800c546 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	8ada      	ldrh	r2, [r3, #22]
 800c4d4:	4b90      	ldr	r3, [pc, #576]	; (800c718 <tcp_input+0x524>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	885b      	ldrh	r3, [r3, #2]
 800c4da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d132      	bne.n	800c546 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	685a      	ldr	r2, [r3, #4]
 800c4e4:	4b8d      	ldr	r3, [pc, #564]	; (800c71c <tcp_input+0x528>)
 800c4e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d12c      	bne.n	800c546 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	4b8a      	ldr	r3, [pc, #552]	; (800c71c <tcp_input+0x528>)
 800c4f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d126      	bne.n	800c546 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	69fa      	ldr	r2, [r7, #28]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d106      	bne.n	800c510 <tcp_input+0x31c>
 800c502:	4b87      	ldr	r3, [pc, #540]	; (800c720 <tcp_input+0x52c>)
 800c504:	f240 120d 	movw	r2, #269	; 0x10d
 800c508:	4986      	ldr	r1, [pc, #536]	; (800c724 <tcp_input+0x530>)
 800c50a:	4887      	ldr	r0, [pc, #540]	; (800c728 <tcp_input+0x534>)
 800c50c:	f007 facc 	bl	8013aa8 <iprintf>
      if (prev != NULL) {
 800c510:	69bb      	ldr	r3, [r7, #24]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <tcp_input+0x338>
        prev->next = pcb->next;
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	68da      	ldr	r2, [r3, #12]
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c51e:	4b83      	ldr	r3, [pc, #524]	; (800c72c <tcp_input+0x538>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c526:	4a81      	ldr	r2, [pc, #516]	; (800c72c <tcp_input+0x538>)
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	69fa      	ldr	r2, [r7, #28]
 800c532:	429a      	cmp	r2, r3
 800c534:	d111      	bne.n	800c55a <tcp_input+0x366>
 800c536:	4b7a      	ldr	r3, [pc, #488]	; (800c720 <tcp_input+0x52c>)
 800c538:	f240 1215 	movw	r2, #277	; 0x115
 800c53c:	497c      	ldr	r1, [pc, #496]	; (800c730 <tcp_input+0x53c>)
 800c53e:	487a      	ldr	r0, [pc, #488]	; (800c728 <tcp_input+0x534>)
 800c540:	f007 fab2 	bl	8013aa8 <iprintf>
      break;
 800c544:	e009      	b.n	800c55a <tcp_input+0x366>
    }
    prev = pcb;
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	61fb      	str	r3, [r7, #28]
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	2b00      	cmp	r3, #0
 800c554:	f47f af5e 	bne.w	800c414 <tcp_input+0x220>
 800c558:	e000      	b.n	800c55c <tcp_input+0x368>
      break;
 800c55a:	bf00      	nop
  }

  if (pcb == NULL) {
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f040 8095 	bne.w	800c68e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c564:	4b73      	ldr	r3, [pc, #460]	; (800c734 <tcp_input+0x540>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	61fb      	str	r3, [r7, #28]
 800c56a:	e03f      	b.n	800c5ec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	7d1b      	ldrb	r3, [r3, #20]
 800c570:	2b0a      	cmp	r3, #10
 800c572:	d006      	beq.n	800c582 <tcp_input+0x38e>
 800c574:	4b6a      	ldr	r3, [pc, #424]	; (800c720 <tcp_input+0x52c>)
 800c576:	f240 121f 	movw	r2, #287	; 0x11f
 800c57a:	496f      	ldr	r1, [pc, #444]	; (800c738 <tcp_input+0x544>)
 800c57c:	486a      	ldr	r0, [pc, #424]	; (800c728 <tcp_input+0x534>)
 800c57e:	f007 fa93 	bl	8013aa8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	7a1b      	ldrb	r3, [r3, #8]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d009      	beq.n	800c59e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	7a1a      	ldrb	r2, [r3, #8]
 800c58e:	4b63      	ldr	r3, [pc, #396]	; (800c71c <tcp_input+0x528>)
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c596:	3301      	adds	r3, #1
 800c598:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d122      	bne.n	800c5e4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	8b1a      	ldrh	r2, [r3, #24]
 800c5a2:	4b5d      	ldr	r3, [pc, #372]	; (800c718 <tcp_input+0x524>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d11b      	bne.n	800c5e6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	8ada      	ldrh	r2, [r3, #22]
 800c5b2:	4b59      	ldr	r3, [pc, #356]	; (800c718 <tcp_input+0x524>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	885b      	ldrh	r3, [r3, #2]
 800c5b8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d113      	bne.n	800c5e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	685a      	ldr	r2, [r3, #4]
 800c5c2:	4b56      	ldr	r3, [pc, #344]	; (800c71c <tcp_input+0x528>)
 800c5c4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d10d      	bne.n	800c5e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	4b53      	ldr	r3, [pc, #332]	; (800c71c <tcp_input+0x528>)
 800c5d0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d107      	bne.n	800c5e6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c5d6:	69f8      	ldr	r0, [r7, #28]
 800c5d8:	f000 fb54 	bl	800cc84 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7fd ff3f 	bl	800a460 <pbuf_free>
        return;
 800c5e2:	e1f0      	b.n	800c9c6 <tcp_input+0x7d2>
        continue;
 800c5e4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	61fb      	str	r3, [r7, #28]
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1bc      	bne.n	800c56c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5f6:	4b51      	ldr	r3, [pc, #324]	; (800c73c <tcp_input+0x548>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	617b      	str	r3, [r7, #20]
 800c5fc:	e02a      	b.n	800c654 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	7a1b      	ldrb	r3, [r3, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00c      	beq.n	800c620 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	7a1a      	ldrb	r2, [r3, #8]
 800c60a:	4b44      	ldr	r3, [pc, #272]	; (800c71c <tcp_input+0x528>)
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c612:	3301      	adds	r3, #1
 800c614:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c616:	429a      	cmp	r2, r3
 800c618:	d002      	beq.n	800c620 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	61bb      	str	r3, [r7, #24]
        continue;
 800c61e:	e016      	b.n	800c64e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	8ada      	ldrh	r2, [r3, #22]
 800c624:	4b3c      	ldr	r3, [pc, #240]	; (800c718 <tcp_input+0x524>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	885b      	ldrh	r3, [r3, #2]
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d10c      	bne.n	800c64a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	4b39      	ldr	r3, [pc, #228]	; (800c71c <tcp_input+0x528>)
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d00f      	beq.n	800c65c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00d      	beq.n	800c65e <tcp_input+0x46a>
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d009      	beq.n	800c65e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	617b      	str	r3, [r7, #20]
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1d1      	bne.n	800c5fe <tcp_input+0x40a>
 800c65a:	e000      	b.n	800c65e <tcp_input+0x46a>
            break;
 800c65c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d014      	beq.n	800c68e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d00a      	beq.n	800c680 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c672:	4b32      	ldr	r3, [pc, #200]	; (800c73c <tcp_input+0x548>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c67a:	4a30      	ldr	r2, [pc, #192]	; (800c73c <tcp_input+0x548>)
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c680:	6978      	ldr	r0, [r7, #20]
 800c682:	f000 fa01 	bl	800ca88 <tcp_listen_input>
      }
      pbuf_free(p);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7fd feea 	bl	800a460 <pbuf_free>
      return;
 800c68c:	e19b      	b.n	800c9c6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 8160 	beq.w	800c956 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c696:	4b2a      	ldr	r3, [pc, #168]	; (800c740 <tcp_input+0x54c>)
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	891a      	ldrh	r2, [r3, #8]
 800c6a0:	4b27      	ldr	r3, [pc, #156]	; (800c740 <tcp_input+0x54c>)
 800c6a2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c6a4:	4a26      	ldr	r2, [pc, #152]	; (800c740 <tcp_input+0x54c>)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c6aa:	4b1b      	ldr	r3, [pc, #108]	; (800c718 <tcp_input+0x524>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a24      	ldr	r2, [pc, #144]	; (800c740 <tcp_input+0x54c>)
 800c6b0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c6b2:	4b24      	ldr	r3, [pc, #144]	; (800c744 <tcp_input+0x550>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c6b8:	4b23      	ldr	r3, [pc, #140]	; (800c748 <tcp_input+0x554>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c6be:	4b23      	ldr	r3, [pc, #140]	; (800c74c <tcp_input+0x558>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c6c4:	4b22      	ldr	r3, [pc, #136]	; (800c750 <tcp_input+0x55c>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	f003 0308 	and.w	r3, r3, #8
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d006      	beq.n	800c6de <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	7b5b      	ldrb	r3, [r3, #13]
 800c6d4:	f043 0301 	orr.w	r3, r3, #1
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d038      	beq.n	800c758 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c6e6:	69f8      	ldr	r0, [r7, #28]
 800c6e8:	f7ff f93e 	bl	800b968 <tcp_process_refused_data>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	f113 0f0d 	cmn.w	r3, #13
 800c6f2:	d007      	beq.n	800c704 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d02d      	beq.n	800c758 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c6fc:	4b15      	ldr	r3, [pc, #84]	; (800c754 <tcp_input+0x560>)
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d029      	beq.n	800c758 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f040 8104 	bne.w	800c916 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c70e:	69f8      	ldr	r0, [r7, #28]
 800c710:	f003 f9be 	bl	800fa90 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c714:	e0ff      	b.n	800c916 <tcp_input+0x722>
 800c716:	bf00      	nop
 800c718:	200002d8 	.word	0x200002d8
 800c71c:	200039e0 	.word	0x200039e0
 800c720:	080183e8 	.word	0x080183e8
 800c724:	08018514 	.word	0x08018514
 800c728:	08018434 	.word	0x08018434
 800c72c:	200090e4 	.word	0x200090e4
 800c730:	08018540 	.word	0x08018540
 800c734:	200090f4 	.word	0x200090f4
 800c738:	0801856c 	.word	0x0801856c
 800c73c:	200090ec 	.word	0x200090ec
 800c740:	200002c8 	.word	0x200002c8
 800c744:	200002f8 	.word	0x200002f8
 800c748:	200002f5 	.word	0x200002f5
 800c74c:	200002f0 	.word	0x200002f0
 800c750:	200002f4 	.word	0x200002f4
 800c754:	200002f2 	.word	0x200002f2
      }
    }
    tcp_input_pcb = pcb;
 800c758:	4a9c      	ldr	r2, [pc, #624]	; (800c9cc <tcp_input+0x7d8>)
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c75e:	69f8      	ldr	r0, [r7, #28]
 800c760:	f000 fb0a 	bl	800cd78 <tcp_process>
 800c764:	4603      	mov	r3, r0
 800c766:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c768:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c76c:	f113 0f0d 	cmn.w	r3, #13
 800c770:	f000 80d3 	beq.w	800c91a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c774:	4b96      	ldr	r3, [pc, #600]	; (800c9d0 <tcp_input+0x7dc>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f003 0308 	and.w	r3, r3, #8
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d015      	beq.n	800c7ac <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c786:	2b00      	cmp	r3, #0
 800c788:	d008      	beq.n	800c79c <tcp_input+0x5a8>
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c790:	69fa      	ldr	r2, [r7, #28]
 800c792:	6912      	ldr	r2, [r2, #16]
 800c794:	f06f 010d 	mvn.w	r1, #13
 800c798:	4610      	mov	r0, r2
 800c79a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c79c:	69f9      	ldr	r1, [r7, #28]
 800c79e:	488d      	ldr	r0, [pc, #564]	; (800c9d4 <tcp_input+0x7e0>)
 800c7a0:	f7ff fbb0 	bl	800bf04 <tcp_pcb_remove>
        tcp_free(pcb);
 800c7a4:	69f8      	ldr	r0, [r7, #28]
 800c7a6:	f7fe f99d 	bl	800aae4 <tcp_free>
 800c7aa:	e0c1      	b.n	800c930 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c7b0:	4b89      	ldr	r3, [pc, #548]	; (800c9d8 <tcp_input+0x7e4>)
 800c7b2:	881b      	ldrh	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01d      	beq.n	800c7f4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c7b8:	4b87      	ldr	r3, [pc, #540]	; (800c9d8 <tcp_input+0x7e4>)
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00a      	beq.n	800c7de <tcp_input+0x5ea>
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7ce:	69fa      	ldr	r2, [r7, #28]
 800c7d0:	6910      	ldr	r0, [r2, #16]
 800c7d2:	89fa      	ldrh	r2, [r7, #14]
 800c7d4:	69f9      	ldr	r1, [r7, #28]
 800c7d6:	4798      	blx	r3
 800c7d8:	4603      	mov	r3, r0
 800c7da:	74fb      	strb	r3, [r7, #19]
 800c7dc:	e001      	b.n	800c7e2 <tcp_input+0x5ee>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c7e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7e6:	f113 0f0d 	cmn.w	r3, #13
 800c7ea:	f000 8098 	beq.w	800c91e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c7ee:	4b7a      	ldr	r3, [pc, #488]	; (800c9d8 <tcp_input+0x7e4>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c7f4:	69f8      	ldr	r0, [r7, #28]
 800c7f6:	f000 f907 	bl	800ca08 <tcp_input_delayed_close>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f040 8090 	bne.w	800c922 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c802:	4b76      	ldr	r3, [pc, #472]	; (800c9dc <tcp_input+0x7e8>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d041      	beq.n	800c88e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c80a:	69fb      	ldr	r3, [r7, #28]
 800c80c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d006      	beq.n	800c820 <tcp_input+0x62c>
 800c812:	4b73      	ldr	r3, [pc, #460]	; (800c9e0 <tcp_input+0x7ec>)
 800c814:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c818:	4972      	ldr	r1, [pc, #456]	; (800c9e4 <tcp_input+0x7f0>)
 800c81a:	4873      	ldr	r0, [pc, #460]	; (800c9e8 <tcp_input+0x7f4>)
 800c81c:	f007 f944 	bl	8013aa8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	8b5b      	ldrh	r3, [r3, #26]
 800c824:	f003 0310 	and.w	r3, r3, #16
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d008      	beq.n	800c83e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c82c:	4b6b      	ldr	r3, [pc, #428]	; (800c9dc <tcp_input+0x7e8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4618      	mov	r0, r3
 800c832:	f7fd fe15 	bl	800a460 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c836:	69f8      	ldr	r0, [r7, #28]
 800c838:	f7fe fc3c 	bl	800b0b4 <tcp_abort>
            goto aborted;
 800c83c:	e078      	b.n	800c930 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00c      	beq.n	800c862 <tcp_input+0x66e>
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	6918      	ldr	r0, [r3, #16]
 800c852:	4b62      	ldr	r3, [pc, #392]	; (800c9dc <tcp_input+0x7e8>)
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	2300      	movs	r3, #0
 800c858:	69f9      	ldr	r1, [r7, #28]
 800c85a:	47a0      	blx	r4
 800c85c:	4603      	mov	r3, r0
 800c85e:	74fb      	strb	r3, [r7, #19]
 800c860:	e008      	b.n	800c874 <tcp_input+0x680>
 800c862:	4b5e      	ldr	r3, [pc, #376]	; (800c9dc <tcp_input+0x7e8>)
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	2300      	movs	r3, #0
 800c868:	69f9      	ldr	r1, [r7, #28]
 800c86a:	2000      	movs	r0, #0
 800c86c:	f7ff f952 	bl	800bb14 <tcp_recv_null>
 800c870:	4603      	mov	r3, r0
 800c872:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c874:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c878:	f113 0f0d 	cmn.w	r3, #13
 800c87c:	d053      	beq.n	800c926 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c87e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c886:	4b55      	ldr	r3, [pc, #340]	; (800c9dc <tcp_input+0x7e8>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c88e:	4b50      	ldr	r3, [pc, #320]	; (800c9d0 <tcp_input+0x7dc>)
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d030      	beq.n	800c8fc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d009      	beq.n	800c8b6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8a6:	7b5a      	ldrb	r2, [r3, #13]
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8ac:	f042 0220 	orr.w	r2, r2, #32
 800c8b0:	b2d2      	uxtb	r2, r2
 800c8b2:	735a      	strb	r2, [r3, #13]
 800c8b4:	e022      	b.n	800c8fc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8be:	d005      	beq.n	800c8cc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00b      	beq.n	800c8ee <tcp_input+0x6fa>
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	6918      	ldr	r0, [r3, #16]
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	69f9      	ldr	r1, [r7, #28]
 800c8e6:	47a0      	blx	r4
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	74fb      	strb	r3, [r7, #19]
 800c8ec:	e001      	b.n	800c8f2 <tcp_input+0x6fe>
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c8f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8f6:	f113 0f0d 	cmn.w	r3, #13
 800c8fa:	d016      	beq.n	800c92a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c8fc:	4b33      	ldr	r3, [pc, #204]	; (800c9cc <tcp_input+0x7d8>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c902:	69f8      	ldr	r0, [r7, #28]
 800c904:	f000 f880 	bl	800ca08 <tcp_input_delayed_close>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10f      	bne.n	800c92e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c90e:	69f8      	ldr	r0, [r7, #28]
 800c910:	f002 fab8 	bl	800ee84 <tcp_output>
 800c914:	e00c      	b.n	800c930 <tcp_input+0x73c>
        goto aborted;
 800c916:	bf00      	nop
 800c918:	e00a      	b.n	800c930 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c91a:	bf00      	nop
 800c91c:	e008      	b.n	800c930 <tcp_input+0x73c>
              goto aborted;
 800c91e:	bf00      	nop
 800c920:	e006      	b.n	800c930 <tcp_input+0x73c>
          goto aborted;
 800c922:	bf00      	nop
 800c924:	e004      	b.n	800c930 <tcp_input+0x73c>
            goto aborted;
 800c926:	bf00      	nop
 800c928:	e002      	b.n	800c930 <tcp_input+0x73c>
              goto aborted;
 800c92a:	bf00      	nop
 800c92c:	e000      	b.n	800c930 <tcp_input+0x73c>
          goto aborted;
 800c92e:	bf00      	nop
    tcp_input_pcb = NULL;
 800c930:	4b26      	ldr	r3, [pc, #152]	; (800c9cc <tcp_input+0x7d8>)
 800c932:	2200      	movs	r2, #0
 800c934:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c936:	4b29      	ldr	r3, [pc, #164]	; (800c9dc <tcp_input+0x7e8>)
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c93c:	4b2b      	ldr	r3, [pc, #172]	; (800c9ec <tcp_input+0x7f8>)
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d03f      	beq.n	800c9c4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c944:	4b29      	ldr	r3, [pc, #164]	; (800c9ec <tcp_input+0x7f8>)
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fd fd89 	bl	800a460 <pbuf_free>
      inseg.p = NULL;
 800c94e:	4b27      	ldr	r3, [pc, #156]	; (800c9ec <tcp_input+0x7f8>)
 800c950:	2200      	movs	r2, #0
 800c952:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c954:	e036      	b.n	800c9c4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c956:	4b26      	ldr	r3, [pc, #152]	; (800c9f0 <tcp_input+0x7fc>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	899b      	ldrh	r3, [r3, #12]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fc faca 	bl	8008ef8 <lwip_htons>
 800c964:	4603      	mov	r3, r0
 800c966:	b2db      	uxtb	r3, r3
 800c968:	f003 0304 	and.w	r3, r3, #4
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d118      	bne.n	800c9a2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c970:	4b20      	ldr	r3, [pc, #128]	; (800c9f4 <tcp_input+0x800>)
 800c972:	6819      	ldr	r1, [r3, #0]
 800c974:	4b20      	ldr	r3, [pc, #128]	; (800c9f8 <tcp_input+0x804>)
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	461a      	mov	r2, r3
 800c97a:	4b20      	ldr	r3, [pc, #128]	; (800c9fc <tcp_input+0x808>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c980:	4b1b      	ldr	r3, [pc, #108]	; (800c9f0 <tcp_input+0x7fc>)
 800c982:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c984:	885b      	ldrh	r3, [r3, #2]
 800c986:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c988:	4a19      	ldr	r2, [pc, #100]	; (800c9f0 <tcp_input+0x7fc>)
 800c98a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c98c:	8812      	ldrh	r2, [r2, #0]
 800c98e:	b292      	uxth	r2, r2
 800c990:	9202      	str	r2, [sp, #8]
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	4b1a      	ldr	r3, [pc, #104]	; (800ca00 <tcp_input+0x80c>)
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	4b1a      	ldr	r3, [pc, #104]	; (800ca04 <tcp_input+0x810>)
 800c99a:	4602      	mov	r2, r0
 800c99c:	2000      	movs	r0, #0
 800c99e:	f003 f825 	bl	800f9ec <tcp_rst>
    pbuf_free(p);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7fd fd5c 	bl	800a460 <pbuf_free>
  return;
 800c9a8:	e00c      	b.n	800c9c4 <tcp_input+0x7d0>
    goto dropped;
 800c9aa:	bf00      	nop
 800c9ac:	e006      	b.n	800c9bc <tcp_input+0x7c8>
    goto dropped;
 800c9ae:	bf00      	nop
 800c9b0:	e004      	b.n	800c9bc <tcp_input+0x7c8>
    goto dropped;
 800c9b2:	bf00      	nop
 800c9b4:	e002      	b.n	800c9bc <tcp_input+0x7c8>
      goto dropped;
 800c9b6:	bf00      	nop
 800c9b8:	e000      	b.n	800c9bc <tcp_input+0x7c8>
      goto dropped;
 800c9ba:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7fd fd4f 	bl	800a460 <pbuf_free>
 800c9c2:	e000      	b.n	800c9c6 <tcp_input+0x7d2>
  return;
 800c9c4:	bf00      	nop
}
 800c9c6:	3724      	adds	r7, #36	; 0x24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd90      	pop	{r4, r7, pc}
 800c9cc:	200090f8 	.word	0x200090f8
 800c9d0:	200002f5 	.word	0x200002f5
 800c9d4:	200090e4 	.word	0x200090e4
 800c9d8:	200002f0 	.word	0x200002f0
 800c9dc:	200002f8 	.word	0x200002f8
 800c9e0:	080183e8 	.word	0x080183e8
 800c9e4:	0801859c 	.word	0x0801859c
 800c9e8:	08018434 	.word	0x08018434
 800c9ec:	200002c8 	.word	0x200002c8
 800c9f0:	200002d8 	.word	0x200002d8
 800c9f4:	200002ec 	.word	0x200002ec
 800c9f8:	200002f2 	.word	0x200002f2
 800c9fc:	200002e8 	.word	0x200002e8
 800ca00:	200039f0 	.word	0x200039f0
 800ca04:	200039f4 	.word	0x200039f4

0800ca08 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <tcp_input_delayed_close+0x1c>
 800ca16:	4b17      	ldr	r3, [pc, #92]	; (800ca74 <tcp_input_delayed_close+0x6c>)
 800ca18:	f240 225a 	movw	r2, #602	; 0x25a
 800ca1c:	4916      	ldr	r1, [pc, #88]	; (800ca78 <tcp_input_delayed_close+0x70>)
 800ca1e:	4817      	ldr	r0, [pc, #92]	; (800ca7c <tcp_input_delayed_close+0x74>)
 800ca20:	f007 f842 	bl	8013aa8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ca24:	4b16      	ldr	r3, [pc, #88]	; (800ca80 <tcp_input_delayed_close+0x78>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	f003 0310 	and.w	r3, r3, #16
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d01c      	beq.n	800ca6a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	8b5b      	ldrh	r3, [r3, #26]
 800ca34:	f003 0310 	and.w	r3, r3, #16
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10d      	bne.n	800ca58 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d008      	beq.n	800ca58 <tcp_input_delayed_close+0x50>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	6912      	ldr	r2, [r2, #16]
 800ca50:	f06f 010e 	mvn.w	r1, #14
 800ca54:	4610      	mov	r0, r2
 800ca56:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	480a      	ldr	r0, [pc, #40]	; (800ca84 <tcp_input_delayed_close+0x7c>)
 800ca5c:	f7ff fa52 	bl	800bf04 <tcp_pcb_remove>
    tcp_free(pcb);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f7fe f83f 	bl	800aae4 <tcp_free>
    return 1;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e000      	b.n	800ca6c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	080183e8 	.word	0x080183e8
 800ca78:	080185b8 	.word	0x080185b8
 800ca7c:	08018434 	.word	0x08018434
 800ca80:	200002f5 	.word	0x200002f5
 800ca84:	200090e4 	.word	0x200090e4

0800ca88 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ca88:	b590      	push	{r4, r7, lr}
 800ca8a:	b08b      	sub	sp, #44	; 0x2c
 800ca8c:	af04      	add	r7, sp, #16
 800ca8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ca90:	4b6f      	ldr	r3, [pc, #444]	; (800cc50 <tcp_listen_input+0x1c8>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f040 80d2 	bne.w	800cc42 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d106      	bne.n	800cab2 <tcp_listen_input+0x2a>
 800caa4:	4b6b      	ldr	r3, [pc, #428]	; (800cc54 <tcp_listen_input+0x1cc>)
 800caa6:	f240 2281 	movw	r2, #641	; 0x281
 800caaa:	496b      	ldr	r1, [pc, #428]	; (800cc58 <tcp_listen_input+0x1d0>)
 800caac:	486b      	ldr	r0, [pc, #428]	; (800cc5c <tcp_listen_input+0x1d4>)
 800caae:	f006 fffb 	bl	8013aa8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800cab2:	4b67      	ldr	r3, [pc, #412]	; (800cc50 <tcp_listen_input+0x1c8>)
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	f003 0310 	and.w	r3, r3, #16
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d019      	beq.n	800caf2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cabe:	4b68      	ldr	r3, [pc, #416]	; (800cc60 <tcp_listen_input+0x1d8>)
 800cac0:	6819      	ldr	r1, [r3, #0]
 800cac2:	4b68      	ldr	r3, [pc, #416]	; (800cc64 <tcp_listen_input+0x1dc>)
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	461a      	mov	r2, r3
 800cac8:	4b67      	ldr	r3, [pc, #412]	; (800cc68 <tcp_listen_input+0x1e0>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cace:	4b67      	ldr	r3, [pc, #412]	; (800cc6c <tcp_listen_input+0x1e4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cad2:	885b      	ldrh	r3, [r3, #2]
 800cad4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cad6:	4a65      	ldr	r2, [pc, #404]	; (800cc6c <tcp_listen_input+0x1e4>)
 800cad8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cada:	8812      	ldrh	r2, [r2, #0]
 800cadc:	b292      	uxth	r2, r2
 800cade:	9202      	str	r2, [sp, #8]
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	4b63      	ldr	r3, [pc, #396]	; (800cc70 <tcp_listen_input+0x1e8>)
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	4b63      	ldr	r3, [pc, #396]	; (800cc74 <tcp_listen_input+0x1ec>)
 800cae8:	4602      	mov	r2, r0
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f002 ff7e 	bl	800f9ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800caf0:	e0a9      	b.n	800cc46 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800caf2:	4b57      	ldr	r3, [pc, #348]	; (800cc50 <tcp_listen_input+0x1c8>)
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 80a3 	beq.w	800cc46 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7d5b      	ldrb	r3, [r3, #21]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff f929 	bl	800bd5c <tcp_alloc>
 800cb0a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d111      	bne.n	800cb36 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <tcp_listen_input+0xa8>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	6910      	ldr	r0, [r2, #16]
 800cb22:	f04f 32ff 	mov.w	r2, #4294967295
 800cb26:	2100      	movs	r1, #0
 800cb28:	4798      	blx	r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	73bb      	strb	r3, [r7, #14]
      return;
 800cb2e:	e08b      	b.n	800cc48 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cb30:	23f0      	movs	r3, #240	; 0xf0
 800cb32:	73bb      	strb	r3, [r7, #14]
      return;
 800cb34:	e088      	b.n	800cc48 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cb36:	4b50      	ldr	r3, [pc, #320]	; (800cc78 <tcp_listen_input+0x1f0>)
 800cb38:	695a      	ldr	r2, [r3, #20]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cb3e:	4b4e      	ldr	r3, [pc, #312]	; (800cc78 <tcp_listen_input+0x1f0>)
 800cb40:	691a      	ldr	r2, [r3, #16]
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	8ada      	ldrh	r2, [r3, #22]
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cb4e:	4b47      	ldr	r3, [pc, #284]	; (800cc6c <tcp_listen_input+0x1e4>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	2203      	movs	r2, #3
 800cb5e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cb60:	4b41      	ldr	r3, [pc, #260]	; (800cc68 <tcp_listen_input+0x1e0>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	1c5a      	adds	r2, r3, #1
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cb72:	6978      	ldr	r0, [r7, #20]
 800cb74:	f7ff fa5a 	bl	800c02c <tcp_next_iss>
 800cb78:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	693a      	ldr	r2, [r7, #16]
 800cb8a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cb92:	4b35      	ldr	r3, [pc, #212]	; (800cc68 <tcp_listen_input+0x1e0>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	1e5a      	subs	r2, r3, #1
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	691a      	ldr	r2, [r3, #16]
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	7a5b      	ldrb	r3, [r3, #9]
 800cbae:	f003 030c 	and.w	r3, r3, #12
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7a1a      	ldrb	r2, [r3, #8]
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cbc0:	4b2e      	ldr	r3, [pc, #184]	; (800cc7c <tcp_listen_input+0x1f4>)
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	60da      	str	r2, [r3, #12]
 800cbc8:	4a2c      	ldr	r2, [pc, #176]	; (800cc7c <tcp_listen_input+0x1f4>)
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	6013      	str	r3, [r2, #0]
 800cbce:	f003 f8cf 	bl	800fd70 <tcp_timer_needed>
 800cbd2:	4b2b      	ldr	r3, [pc, #172]	; (800cc80 <tcp_listen_input+0x1f8>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cbd8:	6978      	ldr	r0, [r7, #20]
 800cbda:	f001 fd8d 	bl	800e6f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cbde:	4b23      	ldr	r3, [pc, #140]	; (800cc6c <tcp_listen_input+0x1e4>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	89db      	ldrh	r3, [r3, #14]
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	3304      	adds	r3, #4
 800cc00:	4618      	mov	r0, r3
 800cc02:	f004 ffe1 	bl	8011bc8 <ip4_route>
 800cc06:	4601      	mov	r1, r0
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f7ff fa32 	bl	800c078 <tcp_eff_send_mss_netif>
 800cc14:	4603      	mov	r3, r0
 800cc16:	461a      	mov	r2, r3
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cc1c:	2112      	movs	r1, #18
 800cc1e:	6978      	ldr	r0, [r7, #20]
 800cc20:	f002 f842 	bl	800eca8 <tcp_enqueue_flags>
 800cc24:	4603      	mov	r3, r0
 800cc26:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cc28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800cc30:	2100      	movs	r1, #0
 800cc32:	6978      	ldr	r0, [r7, #20]
 800cc34:	f7fe f980 	bl	800af38 <tcp_abandon>
      return;
 800cc38:	e006      	b.n	800cc48 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800cc3a:	6978      	ldr	r0, [r7, #20]
 800cc3c:	f002 f922 	bl	800ee84 <tcp_output>
  return;
 800cc40:	e001      	b.n	800cc46 <tcp_listen_input+0x1be>
    return;
 800cc42:	bf00      	nop
 800cc44:	e000      	b.n	800cc48 <tcp_listen_input+0x1c0>
  return;
 800cc46:	bf00      	nop
}
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd90      	pop	{r4, r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	200002f4 	.word	0x200002f4
 800cc54:	080183e8 	.word	0x080183e8
 800cc58:	080185e0 	.word	0x080185e0
 800cc5c:	08018434 	.word	0x08018434
 800cc60:	200002ec 	.word	0x200002ec
 800cc64:	200002f2 	.word	0x200002f2
 800cc68:	200002e8 	.word	0x200002e8
 800cc6c:	200002d8 	.word	0x200002d8
 800cc70:	200039f0 	.word	0x200039f0
 800cc74:	200039f4 	.word	0x200039f4
 800cc78:	200039e0 	.word	0x200039e0
 800cc7c:	200090e4 	.word	0x200090e4
 800cc80:	200090e0 	.word	0x200090e0

0800cc84 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af04      	add	r7, sp, #16
 800cc8a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cc8c:	4b2f      	ldr	r3, [pc, #188]	; (800cd4c <tcp_timewait_input+0xc8>)
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	f003 0304 	and.w	r3, r3, #4
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d153      	bne.n	800cd40 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d106      	bne.n	800ccac <tcp_timewait_input+0x28>
 800cc9e:	4b2c      	ldr	r3, [pc, #176]	; (800cd50 <tcp_timewait_input+0xcc>)
 800cca0:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cca4:	492b      	ldr	r1, [pc, #172]	; (800cd54 <tcp_timewait_input+0xd0>)
 800cca6:	482c      	ldr	r0, [pc, #176]	; (800cd58 <tcp_timewait_input+0xd4>)
 800cca8:	f006 fefe 	bl	8013aa8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ccac:	4b27      	ldr	r3, [pc, #156]	; (800cd4c <tcp_timewait_input+0xc8>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d02a      	beq.n	800cd0e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ccb8:	4b28      	ldr	r3, [pc, #160]	; (800cd5c <tcp_timewait_input+0xd8>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	db2d      	blt.n	800cd22 <tcp_timewait_input+0x9e>
 800ccc6:	4b25      	ldr	r3, [pc, #148]	; (800cd5c <tcp_timewait_input+0xd8>)
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccd2:	440b      	add	r3, r1
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	dc23      	bgt.n	800cd22 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccda:	4b21      	ldr	r3, [pc, #132]	; (800cd60 <tcp_timewait_input+0xdc>)
 800ccdc:	6819      	ldr	r1, [r3, #0]
 800ccde:	4b21      	ldr	r3, [pc, #132]	; (800cd64 <tcp_timewait_input+0xe0>)
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	4b1d      	ldr	r3, [pc, #116]	; (800cd5c <tcp_timewait_input+0xd8>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccea:	4b1f      	ldr	r3, [pc, #124]	; (800cd68 <tcp_timewait_input+0xe4>)
 800ccec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccee:	885b      	ldrh	r3, [r3, #2]
 800ccf0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ccf2:	4a1d      	ldr	r2, [pc, #116]	; (800cd68 <tcp_timewait_input+0xe4>)
 800ccf4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccf6:	8812      	ldrh	r2, [r2, #0]
 800ccf8:	b292      	uxth	r2, r2
 800ccfa:	9202      	str	r2, [sp, #8]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	4b1b      	ldr	r3, [pc, #108]	; (800cd6c <tcp_timewait_input+0xe8>)
 800cd00:	9300      	str	r3, [sp, #0]
 800cd02:	4b1b      	ldr	r3, [pc, #108]	; (800cd70 <tcp_timewait_input+0xec>)
 800cd04:	4602      	mov	r2, r0
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f002 fe70 	bl	800f9ec <tcp_rst>
      return;
 800cd0c:	e01b      	b.n	800cd46 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800cd0e:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <tcp_timewait_input+0xc8>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	f003 0301 	and.w	r3, r3, #1
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cd1a:	4b16      	ldr	r3, [pc, #88]	; (800cd74 <tcp_timewait_input+0xf0>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cd22:	4b10      	ldr	r3, [pc, #64]	; (800cd64 <tcp_timewait_input+0xe0>)
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d00c      	beq.n	800cd44 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	8b5b      	ldrh	r3, [r3, #26]
 800cd2e:	f043 0302 	orr.w	r3, r3, #2
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f002 f8a3 	bl	800ee84 <tcp_output>
  }
  return;
 800cd3e:	e001      	b.n	800cd44 <tcp_timewait_input+0xc0>
    return;
 800cd40:	bf00      	nop
 800cd42:	e000      	b.n	800cd46 <tcp_timewait_input+0xc2>
  return;
 800cd44:	bf00      	nop
}
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	200002f4 	.word	0x200002f4
 800cd50:	080183e8 	.word	0x080183e8
 800cd54:	08018600 	.word	0x08018600
 800cd58:	08018434 	.word	0x08018434
 800cd5c:	200002e8 	.word	0x200002e8
 800cd60:	200002ec 	.word	0x200002ec
 800cd64:	200002f2 	.word	0x200002f2
 800cd68:	200002d8 	.word	0x200002d8
 800cd6c:	200039f0 	.word	0x200039f0
 800cd70:	200039f4 	.word	0x200039f4
 800cd74:	200090e8 	.word	0x200090e8

0800cd78 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cd78:	b590      	push	{r4, r7, lr}
 800cd7a:	b08d      	sub	sp, #52	; 0x34
 800cd7c:	af04      	add	r7, sp, #16
 800cd7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d106      	bne.n	800cd9c <tcp_process+0x24>
 800cd8e:	4ba5      	ldr	r3, [pc, #660]	; (800d024 <tcp_process+0x2ac>)
 800cd90:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cd94:	49a4      	ldr	r1, [pc, #656]	; (800d028 <tcp_process+0x2b0>)
 800cd96:	48a5      	ldr	r0, [pc, #660]	; (800d02c <tcp_process+0x2b4>)
 800cd98:	f006 fe86 	bl	8013aa8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cd9c:	4ba4      	ldr	r3, [pc, #656]	; (800d030 <tcp_process+0x2b8>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	f003 0304 	and.w	r3, r3, #4
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d04e      	beq.n	800ce46 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	7d1b      	ldrb	r3, [r3, #20]
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d108      	bne.n	800cdc2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdb4:	4b9f      	ldr	r3, [pc, #636]	; (800d034 <tcp_process+0x2bc>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d123      	bne.n	800ce04 <tcp_process+0x8c>
        acceptable = 1;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	76fb      	strb	r3, [r7, #27]
 800cdc0:	e020      	b.n	800ce04 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdc6:	4b9c      	ldr	r3, [pc, #624]	; (800d038 <tcp_process+0x2c0>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d102      	bne.n	800cdd4 <tcp_process+0x5c>
        acceptable = 1;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	76fb      	strb	r3, [r7, #27]
 800cdd2:	e017      	b.n	800ce04 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cdd4:	4b98      	ldr	r3, [pc, #608]	; (800d038 <tcp_process+0x2c0>)
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	db10      	blt.n	800ce04 <tcp_process+0x8c>
 800cde2:	4b95      	ldr	r3, [pc, #596]	; (800d038 <tcp_process+0x2c0>)
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdea:	6879      	ldr	r1, [r7, #4]
 800cdec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdee:	440b      	add	r3, r1
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	dc06      	bgt.n	800ce04 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	8b5b      	ldrh	r3, [r3, #26]
 800cdfa:	f043 0302 	orr.w	r3, r3, #2
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ce04:	7efb      	ldrb	r3, [r7, #27]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d01b      	beq.n	800ce42 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7d1b      	ldrb	r3, [r3, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d106      	bne.n	800ce20 <tcp_process+0xa8>
 800ce12:	4b84      	ldr	r3, [pc, #528]	; (800d024 <tcp_process+0x2ac>)
 800ce14:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ce18:	4988      	ldr	r1, [pc, #544]	; (800d03c <tcp_process+0x2c4>)
 800ce1a:	4884      	ldr	r0, [pc, #528]	; (800d02c <tcp_process+0x2b4>)
 800ce1c:	f006 fe44 	bl	8013aa8 <iprintf>
      recv_flags |= TF_RESET;
 800ce20:	4b87      	ldr	r3, [pc, #540]	; (800d040 <tcp_process+0x2c8>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	f043 0308 	orr.w	r3, r3, #8
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	4b85      	ldr	r3, [pc, #532]	; (800d040 <tcp_process+0x2c8>)
 800ce2c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	8b5b      	ldrh	r3, [r3, #26]
 800ce32:	f023 0301 	bic.w	r3, r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ce3c:	f06f 030d 	mvn.w	r3, #13
 800ce40:	e37a      	b.n	800d538 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	e378      	b.n	800d538 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ce46:	4b7a      	ldr	r3, [pc, #488]	; (800d030 <tcp_process+0x2b8>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	f003 0302 	and.w	r3, r3, #2
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d010      	beq.n	800ce74 <tcp_process+0xfc>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	7d1b      	ldrb	r3, [r3, #20]
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d00c      	beq.n	800ce74 <tcp_process+0xfc>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	7d1b      	ldrb	r3, [r3, #20]
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	d008      	beq.n	800ce74 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	8b5b      	ldrh	r3, [r3, #26]
 800ce66:	f043 0302 	orr.w	r3, r3, #2
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	e361      	b.n	800d538 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	8b5b      	ldrh	r3, [r3, #26]
 800ce78:	f003 0310 	and.w	r3, r3, #16
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d103      	bne.n	800ce88 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ce80:	4b70      	ldr	r3, [pc, #448]	; (800d044 <tcp_process+0x2cc>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f001 fc2d 	bl	800e6f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	7d1b      	ldrb	r3, [r3, #20]
 800cea2:	3b02      	subs	r3, #2
 800cea4:	2b07      	cmp	r3, #7
 800cea6:	f200 8337 	bhi.w	800d518 <tcp_process+0x7a0>
 800ceaa:	a201      	add	r2, pc, #4	; (adr r2, 800ceb0 <tcp_process+0x138>)
 800ceac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb0:	0800ced1 	.word	0x0800ced1
 800ceb4:	0800d101 	.word	0x0800d101
 800ceb8:	0800d279 	.word	0x0800d279
 800cebc:	0800d2a3 	.word	0x0800d2a3
 800cec0:	0800d3c7 	.word	0x0800d3c7
 800cec4:	0800d279 	.word	0x0800d279
 800cec8:	0800d453 	.word	0x0800d453
 800cecc:	0800d4e3 	.word	0x0800d4e3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ced0:	4b57      	ldr	r3, [pc, #348]	; (800d030 <tcp_process+0x2b8>)
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	f003 0310 	and.w	r3, r3, #16
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f000 80e4 	beq.w	800d0a6 <tcp_process+0x32e>
 800cede:	4b54      	ldr	r3, [pc, #336]	; (800d030 <tcp_process+0x2b8>)
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	f003 0302 	and.w	r3, r3, #2
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 80dd 	beq.w	800d0a6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	4b50      	ldr	r3, [pc, #320]	; (800d034 <tcp_process+0x2bc>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	f040 80d5 	bne.w	800d0a6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800cefc:	4b4e      	ldr	r3, [pc, #312]	; (800d038 <tcp_process+0x2c0>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	1c5a      	adds	r2, r3, #1
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800cf0e:	4b49      	ldr	r3, [pc, #292]	; (800d034 <tcp_process+0x2bc>)
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800cf16:	4b4c      	ldr	r3, [pc, #304]	; (800d048 <tcp_process+0x2d0>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	89db      	ldrh	r3, [r3, #14]
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cf30:	4b41      	ldr	r3, [pc, #260]	; (800d038 <tcp_process+0x2c0>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	1e5a      	subs	r2, r3, #1
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2204      	movs	r2, #4
 800cf3e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	3304      	adds	r3, #4
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f004 fe3d 	bl	8011bc8 <ip4_route>
 800cf4e:	4601      	mov	r1, r0
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	3304      	adds	r3, #4
 800cf54:	461a      	mov	r2, r3
 800cf56:	4620      	mov	r0, r4
 800cf58:	f7ff f88e 	bl	800c078 <tcp_eff_send_mss_netif>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	461a      	mov	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf68:	009a      	lsls	r2, r3, #2
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf6e:	005b      	lsls	r3, r3, #1
 800cf70:	f241 111c 	movw	r1, #4380	; 0x111c
 800cf74:	428b      	cmp	r3, r1
 800cf76:	bf38      	it	cc
 800cf78:	460b      	movcc	r3, r1
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d204      	bcs.n	800cf88 <tcp_process+0x210>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	e00d      	b.n	800cfa4 <tcp_process+0x22c>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	f241 121c 	movw	r2, #4380	; 0x111c
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d904      	bls.n	800cfa0 <tcp_process+0x228>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	e001      	b.n	800cfa4 <tcp_process+0x22c>
 800cfa0:	f241 131c 	movw	r3, #4380	; 0x111c
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <tcp_process+0x24a>
 800cfb4:	4b1b      	ldr	r3, [pc, #108]	; (800d024 <tcp_process+0x2ac>)
 800cfb6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cfba:	4924      	ldr	r1, [pc, #144]	; (800d04c <tcp_process+0x2d4>)
 800cfbc:	481b      	ldr	r0, [pc, #108]	; (800d02c <tcp_process+0x2b4>)
 800cfbe:	f006 fd73 	bl	8013aa8 <iprintf>
        --pcb->snd_queuelen;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	b29a      	uxth	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfd6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d111      	bne.n	800d002 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <tcp_process+0x280>
 800cfea:	4b0e      	ldr	r3, [pc, #56]	; (800d024 <tcp_process+0x2ac>)
 800cfec:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cff0:	4917      	ldr	r1, [pc, #92]	; (800d050 <tcp_process+0x2d8>)
 800cff2:	480e      	ldr	r0, [pc, #56]	; (800d02c <tcp_process+0x2b4>)
 800cff4:	f006 fd58 	bl	8013aa8 <iprintf>
          pcb->unsent = rseg->next;
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	66da      	str	r2, [r3, #108]	; 0x6c
 800d000:	e003      	b.n	800d00a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d00a:	69f8      	ldr	r0, [r7, #28]
 800d00c:	f7fe fd3d 	bl	800ba8a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d014:	2b00      	cmp	r3, #0
 800d016:	d11d      	bne.n	800d054 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d01e:	861a      	strh	r2, [r3, #48]	; 0x30
 800d020:	e01f      	b.n	800d062 <tcp_process+0x2ea>
 800d022:	bf00      	nop
 800d024:	080183e8 	.word	0x080183e8
 800d028:	08018620 	.word	0x08018620
 800d02c:	08018434 	.word	0x08018434
 800d030:	200002f4 	.word	0x200002f4
 800d034:	200002ec 	.word	0x200002ec
 800d038:	200002e8 	.word	0x200002e8
 800d03c:	0801863c 	.word	0x0801863c
 800d040:	200002f5 	.word	0x200002f5
 800d044:	200090e8 	.word	0x200090e8
 800d048:	200002d8 	.word	0x200002d8
 800d04c:	0801865c 	.word	0x0801865c
 800d050:	08018674 	.word	0x08018674
        } else {
          pcb->rtime = 0;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00a      	beq.n	800d082 <tcp_process+0x30a>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	6910      	ldr	r0, [r2, #16]
 800d076:	2200      	movs	r2, #0
 800d078:	6879      	ldr	r1, [r7, #4]
 800d07a:	4798      	blx	r3
 800d07c:	4603      	mov	r3, r0
 800d07e:	76bb      	strb	r3, [r7, #26]
 800d080:	e001      	b.n	800d086 <tcp_process+0x30e>
 800d082:	2300      	movs	r3, #0
 800d084:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d086:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d08a:	f113 0f0d 	cmn.w	r3, #13
 800d08e:	d102      	bne.n	800d096 <tcp_process+0x31e>
          return ERR_ABRT;
 800d090:	f06f 030c 	mvn.w	r3, #12
 800d094:	e250      	b.n	800d538 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	8b5b      	ldrh	r3, [r3, #26]
 800d09a:	f043 0302 	orr.w	r3, r3, #2
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d0a4:	e23a      	b.n	800d51c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d0a6:	4b9d      	ldr	r3, [pc, #628]	; (800d31c <tcp_process+0x5a4>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	f003 0310 	and.w	r3, r3, #16
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f000 8234 	beq.w	800d51c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0b4:	4b9a      	ldr	r3, [pc, #616]	; (800d320 <tcp_process+0x5a8>)
 800d0b6:	6819      	ldr	r1, [r3, #0]
 800d0b8:	4b9a      	ldr	r3, [pc, #616]	; (800d324 <tcp_process+0x5ac>)
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	4b9a      	ldr	r3, [pc, #616]	; (800d328 <tcp_process+0x5b0>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0c4:	4b99      	ldr	r3, [pc, #612]	; (800d32c <tcp_process+0x5b4>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0c8:	885b      	ldrh	r3, [r3, #2]
 800d0ca:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0cc:	4a97      	ldr	r2, [pc, #604]	; (800d32c <tcp_process+0x5b4>)
 800d0ce:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0d0:	8812      	ldrh	r2, [r2, #0]
 800d0d2:	b292      	uxth	r2, r2
 800d0d4:	9202      	str	r2, [sp, #8]
 800d0d6:	9301      	str	r3, [sp, #4]
 800d0d8:	4b95      	ldr	r3, [pc, #596]	; (800d330 <tcp_process+0x5b8>)
 800d0da:	9300      	str	r3, [sp, #0]
 800d0dc:	4b95      	ldr	r3, [pc, #596]	; (800d334 <tcp_process+0x5bc>)
 800d0de:	4602      	mov	r2, r0
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f002 fc83 	bl	800f9ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0ec:	2b05      	cmp	r3, #5
 800d0ee:	f200 8215 	bhi.w	800d51c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f002 fa4d 	bl	800f598 <tcp_rexmit_rto>
      break;
 800d0fe:	e20d      	b.n	800d51c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d100:	4b86      	ldr	r3, [pc, #536]	; (800d31c <tcp_process+0x5a4>)
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	f003 0310 	and.w	r3, r3, #16
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 80a1 	beq.w	800d250 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d10e:	4b84      	ldr	r3, [pc, #528]	; (800d320 <tcp_process+0x5a8>)
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	3b01      	subs	r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	db7e      	blt.n	800d21c <tcp_process+0x4a4>
 800d11e:	4b80      	ldr	r3, [pc, #512]	; (800d320 <tcp_process+0x5a8>)
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d126:	1ad3      	subs	r3, r2, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	dc77      	bgt.n	800d21c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2204      	movs	r2, #4
 800d130:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d136:	2b00      	cmp	r3, #0
 800d138:	d102      	bne.n	800d140 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d13a:	23fa      	movs	r3, #250	; 0xfa
 800d13c:	76bb      	strb	r3, [r7, #26]
 800d13e:	e01d      	b.n	800d17c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d144:	699b      	ldr	r3, [r3, #24]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d106      	bne.n	800d158 <tcp_process+0x3e0>
 800d14a:	4b7b      	ldr	r3, [pc, #492]	; (800d338 <tcp_process+0x5c0>)
 800d14c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d150:	497a      	ldr	r1, [pc, #488]	; (800d33c <tcp_process+0x5c4>)
 800d152:	487b      	ldr	r0, [pc, #492]	; (800d340 <tcp_process+0x5c8>)
 800d154:	f006 fca8 	bl	8013aa8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00a      	beq.n	800d178 <tcp_process+0x400>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	6910      	ldr	r0, [r2, #16]
 800d16c:	2200      	movs	r2, #0
 800d16e:	6879      	ldr	r1, [r7, #4]
 800d170:	4798      	blx	r3
 800d172:	4603      	mov	r3, r0
 800d174:	76bb      	strb	r3, [r7, #26]
 800d176:	e001      	b.n	800d17c <tcp_process+0x404>
 800d178:	23f0      	movs	r3, #240	; 0xf0
 800d17a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d17c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d00a      	beq.n	800d19a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d184:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d188:	f113 0f0d 	cmn.w	r3, #13
 800d18c:	d002      	beq.n	800d194 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f7fd ff90 	bl	800b0b4 <tcp_abort>
            }
            return ERR_ABRT;
 800d194:	f06f 030c 	mvn.w	r3, #12
 800d198:	e1ce      	b.n	800d538 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fae0 	bl	800d760 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d1a0:	4b68      	ldr	r3, [pc, #416]	; (800d344 <tcp_process+0x5cc>)
 800d1a2:	881b      	ldrh	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d005      	beq.n	800d1b4 <tcp_process+0x43c>
            recv_acked--;
 800d1a8:	4b66      	ldr	r3, [pc, #408]	; (800d344 <tcp_process+0x5cc>)
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	4b64      	ldr	r3, [pc, #400]	; (800d344 <tcp_process+0x5cc>)
 800d1b2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1b8:	009a      	lsls	r2, r3, #2
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	f241 111c 	movw	r1, #4380	; 0x111c
 800d1c4:	428b      	cmp	r3, r1
 800d1c6:	bf38      	it	cc
 800d1c8:	460b      	movcc	r3, r1
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d204      	bcs.n	800d1d8 <tcp_process+0x460>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	e00d      	b.n	800d1f4 <tcp_process+0x47c>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	f241 121c 	movw	r2, #4380	; 0x111c
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d904      	bls.n	800d1f0 <tcp_process+0x478>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1ea:	005b      	lsls	r3, r3, #1
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	e001      	b.n	800d1f4 <tcp_process+0x47c>
 800d1f0:	f241 131c 	movw	r3, #4380	; 0x111c
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d1fa:	4b53      	ldr	r3, [pc, #332]	; (800d348 <tcp_process+0x5d0>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	f003 0320 	and.w	r3, r3, #32
 800d202:	2b00      	cmp	r3, #0
 800d204:	d037      	beq.n	800d276 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	8b5b      	ldrh	r3, [r3, #26]
 800d20a:	f043 0302 	orr.w	r3, r3, #2
 800d20e:	b29a      	uxth	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2207      	movs	r2, #7
 800d218:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d21a:	e02c      	b.n	800d276 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d21c:	4b40      	ldr	r3, [pc, #256]	; (800d320 <tcp_process+0x5a8>)
 800d21e:	6819      	ldr	r1, [r3, #0]
 800d220:	4b40      	ldr	r3, [pc, #256]	; (800d324 <tcp_process+0x5ac>)
 800d222:	881b      	ldrh	r3, [r3, #0]
 800d224:	461a      	mov	r2, r3
 800d226:	4b40      	ldr	r3, [pc, #256]	; (800d328 <tcp_process+0x5b0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d22c:	4b3f      	ldr	r3, [pc, #252]	; (800d32c <tcp_process+0x5b4>)
 800d22e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d230:	885b      	ldrh	r3, [r3, #2]
 800d232:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d234:	4a3d      	ldr	r2, [pc, #244]	; (800d32c <tcp_process+0x5b4>)
 800d236:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d238:	8812      	ldrh	r2, [r2, #0]
 800d23a:	b292      	uxth	r2, r2
 800d23c:	9202      	str	r2, [sp, #8]
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	4b3b      	ldr	r3, [pc, #236]	; (800d330 <tcp_process+0x5b8>)
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	4b3b      	ldr	r3, [pc, #236]	; (800d334 <tcp_process+0x5bc>)
 800d246:	4602      	mov	r2, r0
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f002 fbcf 	bl	800f9ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d24e:	e167      	b.n	800d520 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d250:	4b32      	ldr	r3, [pc, #200]	; (800d31c <tcp_process+0x5a4>)
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	f003 0302 	and.w	r3, r3, #2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 8161 	beq.w	800d520 <tcp_process+0x7a8>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d262:	1e5a      	subs	r2, r3, #1
 800d264:	4b30      	ldr	r3, [pc, #192]	; (800d328 <tcp_process+0x5b0>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	429a      	cmp	r2, r3
 800d26a:	f040 8159 	bne.w	800d520 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f002 f9b4 	bl	800f5dc <tcp_rexmit>
      break;
 800d274:	e154      	b.n	800d520 <tcp_process+0x7a8>
 800d276:	e153      	b.n	800d520 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 fa71 	bl	800d760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d27e:	4b32      	ldr	r3, [pc, #200]	; (800d348 <tcp_process+0x5d0>)
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	f003 0320 	and.w	r3, r3, #32
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 814c 	beq.w	800d524 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	8b5b      	ldrh	r3, [r3, #26]
 800d290:	f043 0302 	orr.w	r3, r3, #2
 800d294:	b29a      	uxth	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2207      	movs	r2, #7
 800d29e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d2a0:	e140      	b.n	800d524 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fa5c 	bl	800d760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d2a8:	4b27      	ldr	r3, [pc, #156]	; (800d348 <tcp_process+0x5d0>)
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	f003 0320 	and.w	r3, r3, #32
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d071      	beq.n	800d398 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2b4:	4b19      	ldr	r3, [pc, #100]	; (800d31c <tcp_process+0x5a4>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	f003 0310 	and.w	r3, r3, #16
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d060      	beq.n	800d382 <tcp_process+0x60a>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2c4:	4b16      	ldr	r3, [pc, #88]	; (800d320 <tcp_process+0x5a8>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d15a      	bne.n	800d382 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d156      	bne.n	800d382 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	8b5b      	ldrh	r3, [r3, #26]
 800d2d8:	f043 0302 	orr.w	r3, r3, #2
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7fe fdbe 	bl	800be64 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d2e8:	4b18      	ldr	r3, [pc, #96]	; (800d34c <tcp_process+0x5d4>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d105      	bne.n	800d2fe <tcp_process+0x586>
 800d2f2:	4b16      	ldr	r3, [pc, #88]	; (800d34c <tcp_process+0x5d4>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	4a14      	ldr	r2, [pc, #80]	; (800d34c <tcp_process+0x5d4>)
 800d2fa:	6013      	str	r3, [r2, #0]
 800d2fc:	e02e      	b.n	800d35c <tcp_process+0x5e4>
 800d2fe:	4b13      	ldr	r3, [pc, #76]	; (800d34c <tcp_process+0x5d4>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	617b      	str	r3, [r7, #20]
 800d304:	e027      	b.n	800d356 <tcp_process+0x5de>
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d11f      	bne.n	800d350 <tcp_process+0x5d8>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	68da      	ldr	r2, [r3, #12]
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	60da      	str	r2, [r3, #12]
 800d318:	e020      	b.n	800d35c <tcp_process+0x5e4>
 800d31a:	bf00      	nop
 800d31c:	200002f4 	.word	0x200002f4
 800d320:	200002ec 	.word	0x200002ec
 800d324:	200002f2 	.word	0x200002f2
 800d328:	200002e8 	.word	0x200002e8
 800d32c:	200002d8 	.word	0x200002d8
 800d330:	200039f0 	.word	0x200039f0
 800d334:	200039f4 	.word	0x200039f4
 800d338:	080183e8 	.word	0x080183e8
 800d33c:	08018688 	.word	0x08018688
 800d340:	08018434 	.word	0x08018434
 800d344:	200002f0 	.word	0x200002f0
 800d348:	200002f5 	.word	0x200002f5
 800d34c:	200090e4 	.word	0x200090e4
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	617b      	str	r3, [r7, #20]
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1d4      	bne.n	800d306 <tcp_process+0x58e>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	60da      	str	r2, [r3, #12]
 800d362:	4b77      	ldr	r3, [pc, #476]	; (800d540 <tcp_process+0x7c8>)
 800d364:	2201      	movs	r2, #1
 800d366:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	220a      	movs	r2, #10
 800d36c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d36e:	4b75      	ldr	r3, [pc, #468]	; (800d544 <tcp_process+0x7cc>)
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	60da      	str	r2, [r3, #12]
 800d376:	4a73      	ldr	r2, [pc, #460]	; (800d544 <tcp_process+0x7cc>)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	f002 fcf8 	bl	800fd70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d380:	e0d2      	b.n	800d528 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	8b5b      	ldrh	r3, [r3, #26]
 800d386:	f043 0302 	orr.w	r3, r3, #2
 800d38a:	b29a      	uxth	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2208      	movs	r2, #8
 800d394:	751a      	strb	r2, [r3, #20]
      break;
 800d396:	e0c7      	b.n	800d528 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d398:	4b6b      	ldr	r3, [pc, #428]	; (800d548 <tcp_process+0x7d0>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	f003 0310 	and.w	r3, r3, #16
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	f000 80c1 	beq.w	800d528 <tcp_process+0x7b0>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3aa:	4b68      	ldr	r3, [pc, #416]	; (800d54c <tcp_process+0x7d4>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	f040 80ba 	bne.w	800d528 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f040 80b5 	bne.w	800d528 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2206      	movs	r2, #6
 800d3c2:	751a      	strb	r2, [r3, #20]
      break;
 800d3c4:	e0b0      	b.n	800d528 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 f9ca 	bl	800d760 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d3cc:	4b60      	ldr	r3, [pc, #384]	; (800d550 <tcp_process+0x7d8>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	f003 0320 	and.w	r3, r3, #32
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 80a9 	beq.w	800d52c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	8b5b      	ldrh	r3, [r3, #26]
 800d3de:	f043 0302 	orr.w	r3, r3, #2
 800d3e2:	b29a      	uxth	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7fe fd3b 	bl	800be64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d3ee:	4b59      	ldr	r3, [pc, #356]	; (800d554 <tcp_process+0x7dc>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d105      	bne.n	800d404 <tcp_process+0x68c>
 800d3f8:	4b56      	ldr	r3, [pc, #344]	; (800d554 <tcp_process+0x7dc>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	4a55      	ldr	r2, [pc, #340]	; (800d554 <tcp_process+0x7dc>)
 800d400:	6013      	str	r3, [r2, #0]
 800d402:	e013      	b.n	800d42c <tcp_process+0x6b4>
 800d404:	4b53      	ldr	r3, [pc, #332]	; (800d554 <tcp_process+0x7dc>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	613b      	str	r3, [r7, #16]
 800d40a:	e00c      	b.n	800d426 <tcp_process+0x6ae>
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	68db      	ldr	r3, [r3, #12]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	429a      	cmp	r2, r3
 800d414:	d104      	bne.n	800d420 <tcp_process+0x6a8>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68da      	ldr	r2, [r3, #12]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	60da      	str	r2, [r3, #12]
 800d41e:	e005      	b.n	800d42c <tcp_process+0x6b4>
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	613b      	str	r3, [r7, #16]
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1ef      	bne.n	800d40c <tcp_process+0x694>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2200      	movs	r2, #0
 800d430:	60da      	str	r2, [r3, #12]
 800d432:	4b43      	ldr	r3, [pc, #268]	; (800d540 <tcp_process+0x7c8>)
 800d434:	2201      	movs	r2, #1
 800d436:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	220a      	movs	r2, #10
 800d43c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d43e:	4b41      	ldr	r3, [pc, #260]	; (800d544 <tcp_process+0x7cc>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	60da      	str	r2, [r3, #12]
 800d446:	4a3f      	ldr	r2, [pc, #252]	; (800d544 <tcp_process+0x7cc>)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	f002 fc90 	bl	800fd70 <tcp_timer_needed>
      }
      break;
 800d450:	e06c      	b.n	800d52c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f984 	bl	800d760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d458:	4b3b      	ldr	r3, [pc, #236]	; (800d548 <tcp_process+0x7d0>)
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	f003 0310 	and.w	r3, r3, #16
 800d460:	2b00      	cmp	r3, #0
 800d462:	d065      	beq.n	800d530 <tcp_process+0x7b8>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d468:	4b38      	ldr	r3, [pc, #224]	; (800d54c <tcp_process+0x7d4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d15f      	bne.n	800d530 <tcp_process+0x7b8>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d474:	2b00      	cmp	r3, #0
 800d476:	d15b      	bne.n	800d530 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7fe fcf3 	bl	800be64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d47e:	4b35      	ldr	r3, [pc, #212]	; (800d554 <tcp_process+0x7dc>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	429a      	cmp	r2, r3
 800d486:	d105      	bne.n	800d494 <tcp_process+0x71c>
 800d488:	4b32      	ldr	r3, [pc, #200]	; (800d554 <tcp_process+0x7dc>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	4a31      	ldr	r2, [pc, #196]	; (800d554 <tcp_process+0x7dc>)
 800d490:	6013      	str	r3, [r2, #0]
 800d492:	e013      	b.n	800d4bc <tcp_process+0x744>
 800d494:	4b2f      	ldr	r3, [pc, #188]	; (800d554 <tcp_process+0x7dc>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	60fb      	str	r3, [r7, #12]
 800d49a:	e00c      	b.n	800d4b6 <tcp_process+0x73e>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	687a      	ldr	r2, [r7, #4]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d104      	bne.n	800d4b0 <tcp_process+0x738>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	60da      	str	r2, [r3, #12]
 800d4ae:	e005      	b.n	800d4bc <tcp_process+0x744>
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1ef      	bne.n	800d49c <tcp_process+0x724>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	60da      	str	r2, [r3, #12]
 800d4c2:	4b1f      	ldr	r3, [pc, #124]	; (800d540 <tcp_process+0x7c8>)
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	220a      	movs	r2, #10
 800d4cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d4ce:	4b1d      	ldr	r3, [pc, #116]	; (800d544 <tcp_process+0x7cc>)
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	60da      	str	r2, [r3, #12]
 800d4d6:	4a1b      	ldr	r2, [pc, #108]	; (800d544 <tcp_process+0x7cc>)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6013      	str	r3, [r2, #0]
 800d4dc:	f002 fc48 	bl	800fd70 <tcp_timer_needed>
      }
      break;
 800d4e0:	e026      	b.n	800d530 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f93c 	bl	800d760 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d4e8:	4b17      	ldr	r3, [pc, #92]	; (800d548 <tcp_process+0x7d0>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	f003 0310 	and.w	r3, r3, #16
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d01f      	beq.n	800d534 <tcp_process+0x7bc>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4f8:	4b14      	ldr	r3, [pc, #80]	; (800d54c <tcp_process+0x7d4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d119      	bne.n	800d534 <tcp_process+0x7bc>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d504:	2b00      	cmp	r3, #0
 800d506:	d115      	bne.n	800d534 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d508:	4b11      	ldr	r3, [pc, #68]	; (800d550 <tcp_process+0x7d8>)
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	f043 0310 	orr.w	r3, r3, #16
 800d510:	b2da      	uxtb	r2, r3
 800d512:	4b0f      	ldr	r3, [pc, #60]	; (800d550 <tcp_process+0x7d8>)
 800d514:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d516:	e00d      	b.n	800d534 <tcp_process+0x7bc>
    default:
      break;
 800d518:	bf00      	nop
 800d51a:	e00c      	b.n	800d536 <tcp_process+0x7be>
      break;
 800d51c:	bf00      	nop
 800d51e:	e00a      	b.n	800d536 <tcp_process+0x7be>
      break;
 800d520:	bf00      	nop
 800d522:	e008      	b.n	800d536 <tcp_process+0x7be>
      break;
 800d524:	bf00      	nop
 800d526:	e006      	b.n	800d536 <tcp_process+0x7be>
      break;
 800d528:	bf00      	nop
 800d52a:	e004      	b.n	800d536 <tcp_process+0x7be>
      break;
 800d52c:	bf00      	nop
 800d52e:	e002      	b.n	800d536 <tcp_process+0x7be>
      break;
 800d530:	bf00      	nop
 800d532:	e000      	b.n	800d536 <tcp_process+0x7be>
      break;
 800d534:	bf00      	nop
  }
  return ERR_OK;
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3724      	adds	r7, #36	; 0x24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd90      	pop	{r4, r7, pc}
 800d540:	200090e0 	.word	0x200090e0
 800d544:	200090f4 	.word	0x200090f4
 800d548:	200002f4 	.word	0x200002f4
 800d54c:	200002ec 	.word	0x200002ec
 800d550:	200002f5 	.word	0x200002f5
 800d554:	200090e4 	.word	0x200090e4

0800d558 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d558:	b590      	push	{r4, r7, lr}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d106      	bne.n	800d576 <tcp_oos_insert_segment+0x1e>
 800d568:	4b3b      	ldr	r3, [pc, #236]	; (800d658 <tcp_oos_insert_segment+0x100>)
 800d56a:	f240 421f 	movw	r2, #1055	; 0x41f
 800d56e:	493b      	ldr	r1, [pc, #236]	; (800d65c <tcp_oos_insert_segment+0x104>)
 800d570:	483b      	ldr	r0, [pc, #236]	; (800d660 <tcp_oos_insert_segment+0x108>)
 800d572:	f006 fa99 	bl	8013aa8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	899b      	ldrh	r3, [r3, #12]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fb fcba 	bl	8008ef8 <lwip_htons>
 800d584:	4603      	mov	r3, r0
 800d586:	b2db      	uxtb	r3, r3
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d028      	beq.n	800d5e2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d590:	6838      	ldr	r0, [r7, #0]
 800d592:	f7fe fa65 	bl	800ba60 <tcp_segs_free>
    next = NULL;
 800d596:	2300      	movs	r3, #0
 800d598:	603b      	str	r3, [r7, #0]
 800d59a:	e056      	b.n	800d64a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	899b      	ldrh	r3, [r3, #12]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7fb fca7 	bl	8008ef8 <lwip_htons>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00d      	beq.n	800d5d2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	899b      	ldrh	r3, [r3, #12]
 800d5bc:	b29c      	uxth	r4, r3
 800d5be:	2001      	movs	r0, #1
 800d5c0:	f7fb fc9a 	bl	8008ef8 <lwip_htons>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	461a      	mov	r2, r3
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	4322      	orrs	r2, r4
 800d5ce:	b292      	uxth	r2, r2
 800d5d0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7fe fa54 	bl	800ba8a <tcp_seg_free>
    while (next &&
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00e      	beq.n	800d606 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	891b      	ldrh	r3, [r3, #8]
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	4b1d      	ldr	r3, [pc, #116]	; (800d664 <tcp_oos_insert_segment+0x10c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	441a      	add	r2, r3
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	68db      	ldr	r3, [r3, #12]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	8909      	ldrh	r1, [r1, #8]
 800d5fe:	440b      	add	r3, r1
 800d600:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d602:	2b00      	cmp	r3, #0
 800d604:	daca      	bge.n	800d59c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d01e      	beq.n	800d64a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	891b      	ldrh	r3, [r3, #8]
 800d610:	461a      	mov	r2, r3
 800d612:	4b14      	ldr	r3, [pc, #80]	; (800d664 <tcp_oos_insert_segment+0x10c>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	441a      	add	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d620:	2b00      	cmp	r3, #0
 800d622:	dd12      	ble.n	800d64a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	4b0d      	ldr	r3, [pc, #52]	; (800d664 <tcp_oos_insert_segment+0x10c>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	b29b      	uxth	r3, r3
 800d632:	1ad3      	subs	r3, r2, r3
 800d634:	b29a      	uxth	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685a      	ldr	r2, [r3, #4]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	891b      	ldrh	r3, [r3, #8]
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f7fc fd85 	bl	800a154 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	601a      	str	r2, [r3, #0]
}
 800d650:	bf00      	nop
 800d652:	3714      	adds	r7, #20
 800d654:	46bd      	mov	sp, r7
 800d656:	bd90      	pop	{r4, r7, pc}
 800d658:	080183e8 	.word	0x080183e8
 800d65c:	080186a8 	.word	0x080186a8
 800d660:	08018434 	.word	0x08018434
 800d664:	200002e8 	.word	0x200002e8

0800d668 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d668:	b5b0      	push	{r4, r5, r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d676:	e03e      	b.n	800d6f6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	4618      	mov	r0, r3
 800d688:	f7fc ff72 	bl	800a570 <pbuf_clen>
 800d68c:	4603      	mov	r3, r0
 800d68e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d696:	8a7a      	ldrh	r2, [r7, #18]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d906      	bls.n	800d6aa <tcp_free_acked_segments+0x42>
 800d69c:	4b2a      	ldr	r3, [pc, #168]	; (800d748 <tcp_free_acked_segments+0xe0>)
 800d69e:	f240 4257 	movw	r2, #1111	; 0x457
 800d6a2:	492a      	ldr	r1, [pc, #168]	; (800d74c <tcp_free_acked_segments+0xe4>)
 800d6a4:	482a      	ldr	r0, [pc, #168]	; (800d750 <tcp_free_acked_segments+0xe8>)
 800d6a6:	f006 f9ff 	bl	8013aa8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d6b0:	8a7b      	ldrh	r3, [r7, #18]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	891a      	ldrh	r2, [r3, #8]
 800d6c0:	4b24      	ldr	r3, [pc, #144]	; (800d754 <tcp_free_acked_segments+0xec>)
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	4413      	add	r3, r2
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	4b22      	ldr	r3, [pc, #136]	; (800d754 <tcp_free_acked_segments+0xec>)
 800d6ca:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d6cc:	6978      	ldr	r0, [r7, #20]
 800d6ce:	f7fe f9dc 	bl	800ba8a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00c      	beq.n	800d6f6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d109      	bne.n	800d6f6 <tcp_free_acked_segments+0x8e>
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d106      	bne.n	800d6f6 <tcp_free_acked_segments+0x8e>
 800d6e8:	4b17      	ldr	r3, [pc, #92]	; (800d748 <tcp_free_acked_segments+0xe0>)
 800d6ea:	f240 4261 	movw	r2, #1121	; 0x461
 800d6ee:	491a      	ldr	r1, [pc, #104]	; (800d758 <tcp_free_acked_segments+0xf0>)
 800d6f0:	4817      	ldr	r0, [pc, #92]	; (800d750 <tcp_free_acked_segments+0xe8>)
 800d6f2:	f006 f9d9 	bl	8013aa8 <iprintf>
  while (seg_list != NULL &&
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d020      	beq.n	800d73e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	f7fb fc0d 	bl	8008f22 <lwip_htonl>
 800d708:	4604      	mov	r4, r0
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	891b      	ldrh	r3, [r3, #8]
 800d70e:	461d      	mov	r5, r3
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	899b      	ldrh	r3, [r3, #12]
 800d716:	b29b      	uxth	r3, r3
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fb fbed 	bl	8008ef8 <lwip_htons>
 800d71e:	4603      	mov	r3, r0
 800d720:	b2db      	uxtb	r3, r3
 800d722:	f003 0303 	and.w	r3, r3, #3
 800d726:	2b00      	cmp	r3, #0
 800d728:	d001      	beq.n	800d72e <tcp_free_acked_segments+0xc6>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <tcp_free_acked_segments+0xc8>
 800d72e:	2300      	movs	r3, #0
 800d730:	442b      	add	r3, r5
 800d732:	18e2      	adds	r2, r4, r3
 800d734:	4b09      	ldr	r3, [pc, #36]	; (800d75c <tcp_free_acked_segments+0xf4>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	dd9c      	ble.n	800d678 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d73e:	68bb      	ldr	r3, [r7, #8]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bdb0      	pop	{r4, r5, r7, pc}
 800d748:	080183e8 	.word	0x080183e8
 800d74c:	080186d0 	.word	0x080186d0
 800d750:	08018434 	.word	0x08018434
 800d754:	200002f0 	.word	0x200002f0
 800d758:	080186f8 	.word	0x080186f8
 800d75c:	200002ec 	.word	0x200002ec

0800d760 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d760:	b5b0      	push	{r4, r5, r7, lr}
 800d762:	b094      	sub	sp, #80	; 0x50
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d106      	bne.n	800d780 <tcp_receive+0x20>
 800d772:	4ba6      	ldr	r3, [pc, #664]	; (800da0c <tcp_receive+0x2ac>)
 800d774:	f240 427b 	movw	r2, #1147	; 0x47b
 800d778:	49a5      	ldr	r1, [pc, #660]	; (800da10 <tcp_receive+0x2b0>)
 800d77a:	48a6      	ldr	r0, [pc, #664]	; (800da14 <tcp_receive+0x2b4>)
 800d77c:	f006 f994 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	7d1b      	ldrb	r3, [r3, #20]
 800d784:	2b03      	cmp	r3, #3
 800d786:	d806      	bhi.n	800d796 <tcp_receive+0x36>
 800d788:	4ba0      	ldr	r3, [pc, #640]	; (800da0c <tcp_receive+0x2ac>)
 800d78a:	f240 427c 	movw	r2, #1148	; 0x47c
 800d78e:	49a2      	ldr	r1, [pc, #648]	; (800da18 <tcp_receive+0x2b8>)
 800d790:	48a0      	ldr	r0, [pc, #640]	; (800da14 <tcp_receive+0x2b4>)
 800d792:	f006 f989 	bl	8013aa8 <iprintf>

  if (flags & TCP_ACK) {
 800d796:	4ba1      	ldr	r3, [pc, #644]	; (800da1c <tcp_receive+0x2bc>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	f003 0310 	and.w	r3, r3, #16
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 8263 	beq.w	800dc6a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7b0:	4413      	add	r3, r2
 800d7b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7b8:	4b99      	ldr	r3, [pc, #612]	; (800da20 <tcp_receive+0x2c0>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	1ad3      	subs	r3, r2, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	db1b      	blt.n	800d7fa <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7c6:	4b96      	ldr	r3, [pc, #600]	; (800da20 <tcp_receive+0x2c0>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d106      	bne.n	800d7dc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7d2:	4b94      	ldr	r3, [pc, #592]	; (800da24 <tcp_receive+0x2c4>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	1ad3      	subs	r3, r2, r3
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	db0e      	blt.n	800d7fa <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7e0:	4b90      	ldr	r3, [pc, #576]	; (800da24 <tcp_receive+0x2c4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d125      	bne.n	800d834 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d7e8:	4b8f      	ldr	r3, [pc, #572]	; (800da28 <tcp_receive+0x2c8>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	89db      	ldrh	r3, [r3, #14]
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d91c      	bls.n	800d834 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d7fa:	4b8b      	ldr	r3, [pc, #556]	; (800da28 <tcp_receive+0x2c8>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	89db      	ldrh	r3, [r3, #14]
 800d800:	b29a      	uxth	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d814:	429a      	cmp	r2, r3
 800d816:	d205      	bcs.n	800d824 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d824:	4b7e      	ldr	r3, [pc, #504]	; (800da20 <tcp_receive+0x2c0>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d82c:	4b7d      	ldr	r3, [pc, #500]	; (800da24 <tcp_receive+0x2c4>)
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d834:	4b7b      	ldr	r3, [pc, #492]	; (800da24 <tcp_receive+0x2c4>)
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dc58      	bgt.n	800d8f4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d842:	4b7a      	ldr	r3, [pc, #488]	; (800da2c <tcp_receive+0x2cc>)
 800d844:	881b      	ldrh	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d14b      	bne.n	800d8e2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d854:	4413      	add	r3, r2
 800d856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d858:	429a      	cmp	r2, r3
 800d85a:	d142      	bne.n	800d8e2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d862:	2b00      	cmp	r3, #0
 800d864:	db3d      	blt.n	800d8e2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d86a:	4b6e      	ldr	r3, [pc, #440]	; (800da24 <tcp_receive+0x2c4>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d137      	bne.n	800d8e2 <tcp_receive+0x182>
              found_dupack = 1;
 800d872:	2301      	movs	r3, #1
 800d874:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d87c:	2bff      	cmp	r3, #255	; 0xff
 800d87e:	d007      	beq.n	800d890 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d886:	3301      	adds	r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d896:	2b03      	cmp	r3, #3
 800d898:	d91b      	bls.n	800d8d2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8a4:	4413      	add	r3, r2
 800d8a6:	b29a      	uxth	r2, r3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d30a      	bcc.n	800d8c8 <tcp_receive+0x168>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8bc:	4413      	add	r3, r2
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d8c6:	e004      	b.n	800d8d2 <tcp_receive+0x172>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d902      	bls.n	800d8e2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f001 fee9 	bl	800f6b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f040 8160 	bne.w	800dbaa <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d8f2:	e15a      	b.n	800dbaa <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d8f4:	4b4b      	ldr	r3, [pc, #300]	; (800da24 <tcp_receive+0x2c4>)
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	3b01      	subs	r3, #1
 800d900:	2b00      	cmp	r3, #0
 800d902:	f2c0 814d 	blt.w	800dba0 <tcp_receive+0x440>
 800d906:	4b47      	ldr	r3, [pc, #284]	; (800da24 <tcp_receive+0x2c4>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d90e:	1ad3      	subs	r3, r2, r3
 800d910:	2b00      	cmp	r3, #0
 800d912:	f300 8145 	bgt.w	800dba0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	8b5b      	ldrh	r3, [r3, #26]
 800d91a:	f003 0304 	and.w	r3, r3, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d010      	beq.n	800d944 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8b5b      	ldrh	r3, [r3, #26]
 800d926:	f023 0304 	bic.w	r3, r3, #4
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d952:	10db      	asrs	r3, r3, #3
 800d954:	b21b      	sxth	r3, r3
 800d956:	b29a      	uxth	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d95e:	b29b      	uxth	r3, r3
 800d960:	4413      	add	r3, r2
 800d962:	b29b      	uxth	r3, r3
 800d964:	b21a      	sxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d96c:	4b2d      	ldr	r3, [pc, #180]	; (800da24 <tcp_receive+0x2c4>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	b29a      	uxth	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d976:	b29b      	uxth	r3, r3
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d984:	4b27      	ldr	r3, [pc, #156]	; (800da24 <tcp_receive+0x2c4>)
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	7d1b      	ldrb	r3, [r3, #20]
 800d990:	2b03      	cmp	r3, #3
 800d992:	f240 8096 	bls.w	800dac2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d244      	bcs.n	800da30 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	8b5b      	ldrh	r3, [r3, #26]
 800d9aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d001      	beq.n	800d9b6 <tcp_receive+0x256>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e000      	b.n	800d9b8 <tcp_receive+0x258>
 800d9b6:	2302      	movs	r3, #2
 800d9b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d9bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9c6:	fb12 f303 	smulbb	r3, r2, r3
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	bf28      	it	cs
 800d9d2:	4613      	movcs	r3, r2
 800d9d4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d9de:	4413      	add	r3, r2
 800d9e0:	b29a      	uxth	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d309      	bcc.n	800da00 <tcp_receive+0x2a0>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d9f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d9f4:	4413      	add	r3, r2
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d9fe:	e060      	b.n	800dac2 <tcp_receive+0x362>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800da0a:	e05a      	b.n	800dac2 <tcp_receive+0x362>
 800da0c:	080183e8 	.word	0x080183e8
 800da10:	08018718 	.word	0x08018718
 800da14:	08018434 	.word	0x08018434
 800da18:	08018734 	.word	0x08018734
 800da1c:	200002f4 	.word	0x200002f4
 800da20:	200002e8 	.word	0x200002e8
 800da24:	200002ec 	.word	0x200002ec
 800da28:	200002d8 	.word	0x200002d8
 800da2c:	200002f2 	.word	0x200002f2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da38:	4413      	add	r3, r2
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800da42:	429a      	cmp	r2, r3
 800da44:	d309      	bcc.n	800da5a <tcp_receive+0x2fa>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800da4e:	4413      	add	r3, r2
 800da50:	b29a      	uxth	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800da58:	e004      	b.n	800da64 <tcp_receive+0x304>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800da60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da70:	429a      	cmp	r2, r3
 800da72:	d326      	bcc.n	800dac2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	b29a      	uxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800da94:	4413      	add	r3, r2
 800da96:	b29a      	uxth	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d30a      	bcc.n	800dab8 <tcp_receive+0x358>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800daac:	4413      	add	r3, r2
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800dab6:	e004      	b.n	800dac2 <tcp_receive+0x362>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dabe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daca:	4a98      	ldr	r2, [pc, #608]	; (800dd2c <tcp_receive+0x5cc>)
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff fdcb 	bl	800d668 <tcp_free_acked_segments>
 800dad2:	4602      	mov	r2, r0
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae0:	4a93      	ldr	r2, [pc, #588]	; (800dd30 <tcp_receive+0x5d0>)
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7ff fdc0 	bl	800d668 <tcp_free_acked_segments>
 800dae8:	4602      	mov	r2, r0
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d104      	bne.n	800db00 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dafc:	861a      	strh	r2, [r3, #48]	; 0x30
 800dafe:	e002      	b.n	800db06 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db10:	2b00      	cmp	r3, #0
 800db12:	d103      	bne.n	800db1c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800db22:	4b84      	ldr	r3, [pc, #528]	; (800dd34 <tcp_receive+0x5d4>)
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	4413      	add	r3, r2
 800db28:	b29a      	uxth	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	8b5b      	ldrh	r3, [r3, #26]
 800db34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d035      	beq.n	800dba8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db40:	2b00      	cmp	r3, #0
 800db42:	d118      	bne.n	800db76 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00c      	beq.n	800db66 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fb f9e2 	bl	8008f22 <lwip_htonl>
 800db5e:	4603      	mov	r3, r0
 800db60:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800db62:	2b00      	cmp	r3, #0
 800db64:	dc20      	bgt.n	800dba8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	8b5b      	ldrh	r3, [r3, #26]
 800db6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db6e:	b29a      	uxth	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db74:	e018      	b.n	800dba8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	4618      	mov	r0, r3
 800db84:	f7fb f9cd 	bl	8008f22 <lwip_htonl>
 800db88:	4603      	mov	r3, r0
 800db8a:	1ae3      	subs	r3, r4, r3
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	dc0b      	bgt.n	800dba8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	8b5b      	ldrh	r3, [r3, #26]
 800db94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db98:	b29a      	uxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800db9e:	e003      	b.n	800dba8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f001 ff75 	bl	800fa90 <tcp_send_empty_ack>
 800dba6:	e000      	b.n	800dbaa <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dba8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d05b      	beq.n	800dc6a <tcp_receive+0x50a>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbb6:	4b60      	ldr	r3, [pc, #384]	; (800dd38 <tcp_receive+0x5d8>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	da54      	bge.n	800dc6a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800dbc0:	4b5e      	ldr	r3, [pc, #376]	; (800dd3c <tcp_receive+0x5dc>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800dbd4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbde:	10db      	asrs	r3, r3, #3
 800dbe0:	b21b      	sxth	r3, r3
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dbf8:	4413      	add	r3, r2
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	b21a      	sxth	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800dc02:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	da05      	bge.n	800dc16 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800dc0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dc0e:	425b      	negs	r3, r3
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800dc16:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc20:	109b      	asrs	r3, r3, #2
 800dc22:	b21b      	sxth	r3, r3
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800dc3a:	4413      	add	r3, r2
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	b21a      	sxth	r2, r3
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800dc4a:	10db      	asrs	r3, r3, #3
 800dc4c:	b21b      	sxth	r3, r3
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	4413      	add	r3, r2
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	b21a      	sxth	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800dc6a:	4b35      	ldr	r3, [pc, #212]	; (800dd40 <tcp_receive+0x5e0>)
 800dc6c:	881b      	ldrh	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f000 84e1 	beq.w	800e636 <tcp_receive+0xed6>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	7d1b      	ldrb	r3, [r3, #20]
 800dc78:	2b06      	cmp	r3, #6
 800dc7a:	f200 84dc 	bhi.w	800e636 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc82:	4b30      	ldr	r3, [pc, #192]	; (800dd44 <tcp_receive+0x5e4>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	3b01      	subs	r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f2c0 808e 	blt.w	800ddac <tcp_receive+0x64c>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc94:	4b2a      	ldr	r3, [pc, #168]	; (800dd40 <tcp_receive+0x5e0>)
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	4619      	mov	r1, r3
 800dc9a:	4b2a      	ldr	r3, [pc, #168]	; (800dd44 <tcp_receive+0x5e4>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	440b      	add	r3, r1
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	3301      	adds	r3, #1
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f300 8081 	bgt.w	800ddac <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800dcaa:	4b27      	ldr	r3, [pc, #156]	; (800dd48 <tcp_receive+0x5e8>)
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcb4:	4b23      	ldr	r3, [pc, #140]	; (800dd44 <tcp_receive+0x5e4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	1ad3      	subs	r3, r2, r3
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dcbc:	4b22      	ldr	r3, [pc, #136]	; (800dd48 <tcp_receive+0x5e8>)
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d106      	bne.n	800dcd2 <tcp_receive+0x572>
 800dcc4:	4b21      	ldr	r3, [pc, #132]	; (800dd4c <tcp_receive+0x5ec>)
 800dcc6:	f240 5294 	movw	r2, #1428	; 0x594
 800dcca:	4921      	ldr	r1, [pc, #132]	; (800dd50 <tcp_receive+0x5f0>)
 800dccc:	4821      	ldr	r0, [pc, #132]	; (800dd54 <tcp_receive+0x5f4>)
 800dcce:	f005 feeb 	bl	8013aa8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d906      	bls.n	800dcea <tcp_receive+0x58a>
 800dcdc:	4b1b      	ldr	r3, [pc, #108]	; (800dd4c <tcp_receive+0x5ec>)
 800dcde:	f240 5295 	movw	r2, #1429	; 0x595
 800dce2:	491d      	ldr	r1, [pc, #116]	; (800dd58 <tcp_receive+0x5f8>)
 800dce4:	481b      	ldr	r0, [pc, #108]	; (800dd54 <tcp_receive+0x5f4>)
 800dce6:	f005 fedf 	bl	8013aa8 <iprintf>
      off = (u16_t)off32;
 800dcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dcf0:	4b15      	ldr	r3, [pc, #84]	; (800dd48 <tcp_receive+0x5e8>)
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	891b      	ldrh	r3, [r3, #8]
 800dcf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d906      	bls.n	800dd0c <tcp_receive+0x5ac>
 800dcfe:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <tcp_receive+0x5ec>)
 800dd00:	f240 5297 	movw	r2, #1431	; 0x597
 800dd04:	4915      	ldr	r1, [pc, #84]	; (800dd5c <tcp_receive+0x5fc>)
 800dd06:	4813      	ldr	r0, [pc, #76]	; (800dd54 <tcp_receive+0x5f4>)
 800dd08:	f005 fece 	bl	8013aa8 <iprintf>
      inseg.len -= off;
 800dd0c:	4b0e      	ldr	r3, [pc, #56]	; (800dd48 <tcp_receive+0x5e8>)
 800dd0e:	891a      	ldrh	r2, [r3, #8]
 800dd10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <tcp_receive+0x5e8>)
 800dd1a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800dd1c:	4b0a      	ldr	r3, [pc, #40]	; (800dd48 <tcp_receive+0x5e8>)
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	891a      	ldrh	r2, [r3, #8]
 800dd22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800dd2a:	e029      	b.n	800dd80 <tcp_receive+0x620>
 800dd2c:	08018750 	.word	0x08018750
 800dd30:	08018758 	.word	0x08018758
 800dd34:	200002f0 	.word	0x200002f0
 800dd38:	200002ec 	.word	0x200002ec
 800dd3c:	200090e8 	.word	0x200090e8
 800dd40:	200002f2 	.word	0x200002f2
 800dd44:	200002e8 	.word	0x200002e8
 800dd48:	200002c8 	.word	0x200002c8
 800dd4c:	080183e8 	.word	0x080183e8
 800dd50:	08018760 	.word	0x08018760
 800dd54:	08018434 	.word	0x08018434
 800dd58:	08018770 	.word	0x08018770
 800dd5c:	08018780 	.word	0x08018780
        off -= p->len;
 800dd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd62:	895b      	ldrh	r3, [r3, #10]
 800dd64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd68:	1ad3      	subs	r3, r2, r3
 800dd6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800dd6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dd72:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800dd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd76:	2200      	movs	r2, #0
 800dd78:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800dd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800dd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd82:	895b      	ldrh	r3, [r3, #10]
 800dd84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d8e9      	bhi.n	800dd60 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800dd8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dd90:	4619      	mov	r1, r3
 800dd92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dd94:	f7fc fade 	bl	800a354 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9c:	4a91      	ldr	r2, [pc, #580]	; (800dfe4 <tcp_receive+0x884>)
 800dd9e:	6013      	str	r3, [r2, #0]
 800dda0:	4b91      	ldr	r3, [pc, #580]	; (800dfe8 <tcp_receive+0x888>)
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	4a8f      	ldr	r2, [pc, #572]	; (800dfe4 <tcp_receive+0x884>)
 800dda6:	6812      	ldr	r2, [r2, #0]
 800dda8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ddaa:	e00d      	b.n	800ddc8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ddac:	4b8d      	ldr	r3, [pc, #564]	; (800dfe4 <tcp_receive+0x884>)
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb4:	1ad3      	subs	r3, r2, r3
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	da06      	bge.n	800ddc8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	8b5b      	ldrh	r3, [r3, #26]
 800ddbe:	f043 0302 	orr.w	r3, r3, #2
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ddc8:	4b86      	ldr	r3, [pc, #536]	; (800dfe4 <tcp_receive+0x884>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f2c0 842a 	blt.w	800e62c <tcp_receive+0xecc>
 800ddd8:	4b82      	ldr	r3, [pc, #520]	; (800dfe4 <tcp_receive+0x884>)
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde0:	6879      	ldr	r1, [r7, #4]
 800dde2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dde4:	440b      	add	r3, r1
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	3301      	adds	r3, #1
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f300 841e 	bgt.w	800e62c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddf4:	4b7b      	ldr	r3, [pc, #492]	; (800dfe4 <tcp_receive+0x884>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	f040 829a 	bne.w	800e332 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ddfe:	4b7a      	ldr	r3, [pc, #488]	; (800dfe8 <tcp_receive+0x888>)
 800de00:	891c      	ldrh	r4, [r3, #8]
 800de02:	4b79      	ldr	r3, [pc, #484]	; (800dfe8 <tcp_receive+0x888>)
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	899b      	ldrh	r3, [r3, #12]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fb f874 	bl	8008ef8 <lwip_htons>
 800de10:	4603      	mov	r3, r0
 800de12:	b2db      	uxtb	r3, r3
 800de14:	f003 0303 	and.w	r3, r3, #3
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <tcp_receive+0x6c0>
 800de1c:	2301      	movs	r3, #1
 800de1e:	e000      	b.n	800de22 <tcp_receive+0x6c2>
 800de20:	2300      	movs	r3, #0
 800de22:	4423      	add	r3, r4
 800de24:	b29a      	uxth	r2, r3
 800de26:	4b71      	ldr	r3, [pc, #452]	; (800dfec <tcp_receive+0x88c>)
 800de28:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de2e:	4b6f      	ldr	r3, [pc, #444]	; (800dfec <tcp_receive+0x88c>)
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	429a      	cmp	r2, r3
 800de34:	d275      	bcs.n	800df22 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800de36:	4b6c      	ldr	r3, [pc, #432]	; (800dfe8 <tcp_receive+0x888>)
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	899b      	ldrh	r3, [r3, #12]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	4618      	mov	r0, r3
 800de40:	f7fb f85a 	bl	8008ef8 <lwip_htons>
 800de44:	4603      	mov	r3, r0
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d01f      	beq.n	800de90 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800de50:	4b65      	ldr	r3, [pc, #404]	; (800dfe8 <tcp_receive+0x888>)
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	899b      	ldrh	r3, [r3, #12]
 800de56:	b29b      	uxth	r3, r3
 800de58:	b21b      	sxth	r3, r3
 800de5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800de5e:	b21c      	sxth	r4, r3
 800de60:	4b61      	ldr	r3, [pc, #388]	; (800dfe8 <tcp_receive+0x888>)
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	899b      	ldrh	r3, [r3, #12]
 800de66:	b29b      	uxth	r3, r3
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fb f845 	bl	8008ef8 <lwip_htons>
 800de6e:	4603      	mov	r3, r0
 800de70:	b2db      	uxtb	r3, r3
 800de72:	b29b      	uxth	r3, r3
 800de74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800de78:	b29b      	uxth	r3, r3
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fb f83c 	bl	8008ef8 <lwip_htons>
 800de80:	4603      	mov	r3, r0
 800de82:	b21b      	sxth	r3, r3
 800de84:	4323      	orrs	r3, r4
 800de86:	b21a      	sxth	r2, r3
 800de88:	4b57      	ldr	r3, [pc, #348]	; (800dfe8 <tcp_receive+0x888>)
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	b292      	uxth	r2, r2
 800de8e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de94:	4b54      	ldr	r3, [pc, #336]	; (800dfe8 <tcp_receive+0x888>)
 800de96:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800de98:	4b53      	ldr	r3, [pc, #332]	; (800dfe8 <tcp_receive+0x888>)
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	899b      	ldrh	r3, [r3, #12]
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fb f829 	bl	8008ef8 <lwip_htons>
 800dea6:	4603      	mov	r3, r0
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	f003 0302 	and.w	r3, r3, #2
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d005      	beq.n	800debe <tcp_receive+0x75e>
            inseg.len -= 1;
 800deb2:	4b4d      	ldr	r3, [pc, #308]	; (800dfe8 <tcp_receive+0x888>)
 800deb4:	891b      	ldrh	r3, [r3, #8]
 800deb6:	3b01      	subs	r3, #1
 800deb8:	b29a      	uxth	r2, r3
 800deba:	4b4b      	ldr	r3, [pc, #300]	; (800dfe8 <tcp_receive+0x888>)
 800debc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800debe:	4b4a      	ldr	r3, [pc, #296]	; (800dfe8 <tcp_receive+0x888>)
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	4a49      	ldr	r2, [pc, #292]	; (800dfe8 <tcp_receive+0x888>)
 800dec4:	8912      	ldrh	r2, [r2, #8]
 800dec6:	4611      	mov	r1, r2
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fc f943 	bl	800a154 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dece:	4b46      	ldr	r3, [pc, #280]	; (800dfe8 <tcp_receive+0x888>)
 800ded0:	891c      	ldrh	r4, [r3, #8]
 800ded2:	4b45      	ldr	r3, [pc, #276]	; (800dfe8 <tcp_receive+0x888>)
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	899b      	ldrh	r3, [r3, #12]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fb f80c 	bl	8008ef8 <lwip_htons>
 800dee0:	4603      	mov	r3, r0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f003 0303 	and.w	r3, r3, #3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <tcp_receive+0x790>
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <tcp_receive+0x792>
 800def0:	2300      	movs	r3, #0
 800def2:	4423      	add	r3, r4
 800def4:	b29a      	uxth	r2, r3
 800def6:	4b3d      	ldr	r3, [pc, #244]	; (800dfec <tcp_receive+0x88c>)
 800def8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800defa:	4b3c      	ldr	r3, [pc, #240]	; (800dfec <tcp_receive+0x88c>)
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	4b38      	ldr	r3, [pc, #224]	; (800dfe4 <tcp_receive+0x884>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	441a      	add	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0a:	6879      	ldr	r1, [r7, #4]
 800df0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800df0e:	440b      	add	r3, r1
 800df10:	429a      	cmp	r2, r3
 800df12:	d006      	beq.n	800df22 <tcp_receive+0x7c2>
 800df14:	4b36      	ldr	r3, [pc, #216]	; (800dff0 <tcp_receive+0x890>)
 800df16:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800df1a:	4936      	ldr	r1, [pc, #216]	; (800dff4 <tcp_receive+0x894>)
 800df1c:	4836      	ldr	r0, [pc, #216]	; (800dff8 <tcp_receive+0x898>)
 800df1e:	f005 fdc3 	bl	8013aa8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df26:	2b00      	cmp	r3, #0
 800df28:	f000 80e7 	beq.w	800e0fa <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df2c:	4b2e      	ldr	r3, [pc, #184]	; (800dfe8 <tcp_receive+0x888>)
 800df2e:	68db      	ldr	r3, [r3, #12]
 800df30:	899b      	ldrh	r3, [r3, #12]
 800df32:	b29b      	uxth	r3, r3
 800df34:	4618      	mov	r0, r3
 800df36:	f7fa ffdf 	bl	8008ef8 <lwip_htons>
 800df3a:	4603      	mov	r3, r0
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b00      	cmp	r3, #0
 800df44:	d010      	beq.n	800df68 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800df46:	e00a      	b.n	800df5e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df4c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f7fd fd96 	bl	800ba8a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1f0      	bne.n	800df48 <tcp_receive+0x7e8>
 800df66:	e0c8      	b.n	800e0fa <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df6c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800df6e:	e052      	b.n	800e016 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800df70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	899b      	ldrh	r3, [r3, #12]
 800df76:	b29b      	uxth	r3, r3
 800df78:	4618      	mov	r0, r3
 800df7a:	f7fa ffbd 	bl	8008ef8 <lwip_htons>
 800df7e:	4603      	mov	r3, r0
 800df80:	b2db      	uxtb	r3, r3
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	2b00      	cmp	r3, #0
 800df88:	d03d      	beq.n	800e006 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800df8a:	4b17      	ldr	r3, [pc, #92]	; (800dfe8 <tcp_receive+0x888>)
 800df8c:	68db      	ldr	r3, [r3, #12]
 800df8e:	899b      	ldrh	r3, [r3, #12]
 800df90:	b29b      	uxth	r3, r3
 800df92:	4618      	mov	r0, r3
 800df94:	f7fa ffb0 	bl	8008ef8 <lwip_htons>
 800df98:	4603      	mov	r3, r0
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d130      	bne.n	800e006 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800dfa4:	4b10      	ldr	r3, [pc, #64]	; (800dfe8 <tcp_receive+0x888>)
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	899b      	ldrh	r3, [r3, #12]
 800dfaa:	b29c      	uxth	r4, r3
 800dfac:	2001      	movs	r0, #1
 800dfae:	f7fa ffa3 	bl	8008ef8 <lwip_htons>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	4b0c      	ldr	r3, [pc, #48]	; (800dfe8 <tcp_receive+0x888>)
 800dfb8:	68db      	ldr	r3, [r3, #12]
 800dfba:	4322      	orrs	r2, r4
 800dfbc:	b292      	uxth	r2, r2
 800dfbe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800dfc0:	4b09      	ldr	r3, [pc, #36]	; (800dfe8 <tcp_receive+0x888>)
 800dfc2:	891c      	ldrh	r4, [r3, #8]
 800dfc4:	4b08      	ldr	r3, [pc, #32]	; (800dfe8 <tcp_receive+0x888>)
 800dfc6:	68db      	ldr	r3, [r3, #12]
 800dfc8:	899b      	ldrh	r3, [r3, #12]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fa ff93 	bl	8008ef8 <lwip_htons>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	f003 0303 	and.w	r3, r3, #3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00e      	beq.n	800dffc <tcp_receive+0x89c>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e00d      	b.n	800dffe <tcp_receive+0x89e>
 800dfe2:	bf00      	nop
 800dfe4:	200002e8 	.word	0x200002e8
 800dfe8:	200002c8 	.word	0x200002c8
 800dfec:	200002f2 	.word	0x200002f2
 800dff0:	080183e8 	.word	0x080183e8
 800dff4:	08018790 	.word	0x08018790
 800dff8:	08018434 	.word	0x08018434
 800dffc:	2300      	movs	r3, #0
 800dffe:	4423      	add	r3, r4
 800e000:	b29a      	uxth	r2, r3
 800e002:	4b98      	ldr	r3, [pc, #608]	; (800e264 <tcp_receive+0xb04>)
 800e004:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e008:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e00a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e010:	6938      	ldr	r0, [r7, #16]
 800e012:	f7fd fd3a 	bl	800ba8a <tcp_seg_free>
            while (next &&
 800e016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d00e      	beq.n	800e03a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e01c:	4b91      	ldr	r3, [pc, #580]	; (800e264 <tcp_receive+0xb04>)
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	461a      	mov	r2, r3
 800e022:	4b91      	ldr	r3, [pc, #580]	; (800e268 <tcp_receive+0xb08>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	441a      	add	r2, r3
 800e028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e030:	8909      	ldrh	r1, [r1, #8]
 800e032:	440b      	add	r3, r1
 800e034:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e036:	2b00      	cmp	r3, #0
 800e038:	da9a      	bge.n	800df70 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d059      	beq.n	800e0f4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e040:	4b88      	ldr	r3, [pc, #544]	; (800e264 <tcp_receive+0xb04>)
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	461a      	mov	r2, r3
 800e046:	4b88      	ldr	r3, [pc, #544]	; (800e268 <tcp_receive+0xb08>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	441a      	add	r2, r3
 800e04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	685b      	ldr	r3, [r3, #4]
 800e052:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e054:	2b00      	cmp	r3, #0
 800e056:	dd4d      	ble.n	800e0f4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	b29a      	uxth	r2, r3
 800e060:	4b81      	ldr	r3, [pc, #516]	; (800e268 <tcp_receive+0xb08>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	b29b      	uxth	r3, r3
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	b29a      	uxth	r2, r3
 800e06a:	4b80      	ldr	r3, [pc, #512]	; (800e26c <tcp_receive+0xb0c>)
 800e06c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e06e:	4b7f      	ldr	r3, [pc, #508]	; (800e26c <tcp_receive+0xb0c>)
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	899b      	ldrh	r3, [r3, #12]
 800e074:	b29b      	uxth	r3, r3
 800e076:	4618      	mov	r0, r3
 800e078:	f7fa ff3e 	bl	8008ef8 <lwip_htons>
 800e07c:	4603      	mov	r3, r0
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	f003 0302 	and.w	r3, r3, #2
 800e084:	2b00      	cmp	r3, #0
 800e086:	d005      	beq.n	800e094 <tcp_receive+0x934>
                inseg.len -= 1;
 800e088:	4b78      	ldr	r3, [pc, #480]	; (800e26c <tcp_receive+0xb0c>)
 800e08a:	891b      	ldrh	r3, [r3, #8]
 800e08c:	3b01      	subs	r3, #1
 800e08e:	b29a      	uxth	r2, r3
 800e090:	4b76      	ldr	r3, [pc, #472]	; (800e26c <tcp_receive+0xb0c>)
 800e092:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e094:	4b75      	ldr	r3, [pc, #468]	; (800e26c <tcp_receive+0xb0c>)
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	4a74      	ldr	r2, [pc, #464]	; (800e26c <tcp_receive+0xb0c>)
 800e09a:	8912      	ldrh	r2, [r2, #8]
 800e09c:	4611      	mov	r1, r2
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fc f858 	bl	800a154 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e0a4:	4b71      	ldr	r3, [pc, #452]	; (800e26c <tcp_receive+0xb0c>)
 800e0a6:	891c      	ldrh	r4, [r3, #8]
 800e0a8:	4b70      	ldr	r3, [pc, #448]	; (800e26c <tcp_receive+0xb0c>)
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	899b      	ldrh	r3, [r3, #12]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fa ff21 	bl	8008ef8 <lwip_htons>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	f003 0303 	and.w	r3, r3, #3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <tcp_receive+0x966>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e000      	b.n	800e0c8 <tcp_receive+0x968>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	4423      	add	r3, r4
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	4b65      	ldr	r3, [pc, #404]	; (800e264 <tcp_receive+0xb04>)
 800e0ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e0d0:	4b64      	ldr	r3, [pc, #400]	; (800e264 <tcp_receive+0xb04>)
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	4b64      	ldr	r3, [pc, #400]	; (800e268 <tcp_receive+0xb08>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	441a      	add	r2, r3
 800e0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d006      	beq.n	800e0f4 <tcp_receive+0x994>
 800e0e6:	4b62      	ldr	r3, [pc, #392]	; (800e270 <tcp_receive+0xb10>)
 800e0e8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e0ec:	4961      	ldr	r1, [pc, #388]	; (800e274 <tcp_receive+0xb14>)
 800e0ee:	4862      	ldr	r0, [pc, #392]	; (800e278 <tcp_receive+0xb18>)
 800e0f0:	f005 fcda 	bl	8013aa8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0f8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e0fa:	4b5a      	ldr	r3, [pc, #360]	; (800e264 <tcp_receive+0xb04>)
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	461a      	mov	r2, r3
 800e100:	4b59      	ldr	r3, [pc, #356]	; (800e268 <tcp_receive+0xb08>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	441a      	add	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e10e:	4b55      	ldr	r3, [pc, #340]	; (800e264 <tcp_receive+0xb04>)
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	d206      	bcs.n	800e124 <tcp_receive+0x9c4>
 800e116:	4b56      	ldr	r3, [pc, #344]	; (800e270 <tcp_receive+0xb10>)
 800e118:	f240 6207 	movw	r2, #1543	; 0x607
 800e11c:	4957      	ldr	r1, [pc, #348]	; (800e27c <tcp_receive+0xb1c>)
 800e11e:	4856      	ldr	r0, [pc, #344]	; (800e278 <tcp_receive+0xb18>)
 800e120:	f005 fcc2 	bl	8013aa8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e128:	4b4e      	ldr	r3, [pc, #312]	; (800e264 <tcp_receive+0xb04>)
 800e12a:	881b      	ldrh	r3, [r3, #0]
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	b29a      	uxth	r2, r3
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7fc ffc9 	bl	800b0cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e13a:	4b4c      	ldr	r3, [pc, #304]	; (800e26c <tcp_receive+0xb0c>)
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	891b      	ldrh	r3, [r3, #8]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d006      	beq.n	800e152 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800e144:	4b49      	ldr	r3, [pc, #292]	; (800e26c <tcp_receive+0xb0c>)
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4a4d      	ldr	r2, [pc, #308]	; (800e280 <tcp_receive+0xb20>)
 800e14a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e14c:	4b47      	ldr	r3, [pc, #284]	; (800e26c <tcp_receive+0xb0c>)
 800e14e:	2200      	movs	r2, #0
 800e150:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e152:	4b46      	ldr	r3, [pc, #280]	; (800e26c <tcp_receive+0xb0c>)
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	899b      	ldrh	r3, [r3, #12]
 800e158:	b29b      	uxth	r3, r3
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fa fecc 	bl	8008ef8 <lwip_htons>
 800e160:	4603      	mov	r3, r0
 800e162:	b2db      	uxtb	r3, r3
 800e164:	f003 0301 	and.w	r3, r3, #1
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f000 80b8 	beq.w	800e2de <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e16e:	4b45      	ldr	r3, [pc, #276]	; (800e284 <tcp_receive+0xb24>)
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	f043 0320 	orr.w	r3, r3, #32
 800e176:	b2da      	uxtb	r2, r3
 800e178:	4b42      	ldr	r3, [pc, #264]	; (800e284 <tcp_receive+0xb24>)
 800e17a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e17c:	e0af      	b.n	800e2de <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e182:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	4a36      	ldr	r2, [pc, #216]	; (800e268 <tcp_receive+0xb08>)
 800e18e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	891b      	ldrh	r3, [r3, #8]
 800e194:	461c      	mov	r4, r3
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	899b      	ldrh	r3, [r3, #12]
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fa feaa 	bl	8008ef8 <lwip_htons>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	b2db      	uxtb	r3, r3
 800e1a8:	f003 0303 	and.w	r3, r3, #3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d001      	beq.n	800e1b4 <tcp_receive+0xa54>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e000      	b.n	800e1b6 <tcp_receive+0xa56>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	191a      	adds	r2, r3, r4
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1bc:	441a      	add	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1c6:	461c      	mov	r4, r3
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	891b      	ldrh	r3, [r3, #8]
 800e1cc:	461d      	mov	r5, r3
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	899b      	ldrh	r3, [r3, #12]
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fa fe8e 	bl	8008ef8 <lwip_htons>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	f003 0303 	and.w	r3, r3, #3
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <tcp_receive+0xa8c>
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e000      	b.n	800e1ee <tcp_receive+0xa8e>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	442b      	add	r3, r5
 800e1f0:	429c      	cmp	r4, r3
 800e1f2:	d206      	bcs.n	800e202 <tcp_receive+0xaa2>
 800e1f4:	4b1e      	ldr	r3, [pc, #120]	; (800e270 <tcp_receive+0xb10>)
 800e1f6:	f240 622b 	movw	r2, #1579	; 0x62b
 800e1fa:	4923      	ldr	r1, [pc, #140]	; (800e288 <tcp_receive+0xb28>)
 800e1fc:	481e      	ldr	r0, [pc, #120]	; (800e278 <tcp_receive+0xb18>)
 800e1fe:	f005 fc53 	bl	8013aa8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	891b      	ldrh	r3, [r3, #8]
 800e206:	461c      	mov	r4, r3
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	899b      	ldrh	r3, [r3, #12]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	4618      	mov	r0, r3
 800e212:	f7fa fe71 	bl	8008ef8 <lwip_htons>
 800e216:	4603      	mov	r3, r0
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	f003 0303 	and.w	r3, r3, #3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <tcp_receive+0xac6>
 800e222:	2301      	movs	r3, #1
 800e224:	e000      	b.n	800e228 <tcp_receive+0xac8>
 800e226:	2300      	movs	r3, #0
 800e228:	1919      	adds	r1, r3, r4
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e22e:	b28b      	uxth	r3, r1
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	b29a      	uxth	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7fc ff47 	bl	800b0cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	891b      	ldrh	r3, [r3, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d028      	beq.n	800e29a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e248:	4b0d      	ldr	r3, [pc, #52]	; (800e280 <tcp_receive+0xb20>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d01d      	beq.n	800e28c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800e250:	4b0b      	ldr	r3, [pc, #44]	; (800e280 <tcp_receive+0xb20>)
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	4619      	mov	r1, r3
 800e25a:	4610      	mov	r0, r2
 800e25c:	f7fc f9c2 	bl	800a5e4 <pbuf_cat>
 800e260:	e018      	b.n	800e294 <tcp_receive+0xb34>
 800e262:	bf00      	nop
 800e264:	200002f2 	.word	0x200002f2
 800e268:	200002e8 	.word	0x200002e8
 800e26c:	200002c8 	.word	0x200002c8
 800e270:	080183e8 	.word	0x080183e8
 800e274:	080187c8 	.word	0x080187c8
 800e278:	08018434 	.word	0x08018434
 800e27c:	08018804 	.word	0x08018804
 800e280:	200002f8 	.word	0x200002f8
 800e284:	200002f5 	.word	0x200002f5
 800e288:	08018824 	.word	0x08018824
            } else {
              recv_data = cseg->p;
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	4a70      	ldr	r2, [pc, #448]	; (800e454 <tcp_receive+0xcf4>)
 800e292:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2200      	movs	r2, #0
 800e298:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	899b      	ldrh	r3, [r3, #12]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fa fe28 	bl	8008ef8 <lwip_htons>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	f003 0301 	and.w	r3, r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00d      	beq.n	800e2d0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e2b4:	4b68      	ldr	r3, [pc, #416]	; (800e458 <tcp_receive+0xcf8>)
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	f043 0320 	orr.w	r3, r3, #32
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	4b66      	ldr	r3, [pc, #408]	; (800e458 <tcp_receive+0xcf8>)
 800e2c0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	7d1b      	ldrb	r3, [r3, #20]
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	d102      	bne.n	800e2d0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2207      	movs	r2, #7
 800e2ce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e2d8:	68b8      	ldr	r0, [r7, #8]
 800e2da:	f7fd fbd6 	bl	800ba8a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d008      	beq.n	800e2f8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	f43f af43 	beq.w	800e17e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	8b5b      	ldrh	r3, [r3, #26]
 800e2fc:	f003 0301 	and.w	r3, r3, #1
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00e      	beq.n	800e322 <tcp_receive+0xbc2>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	8b5b      	ldrh	r3, [r3, #26]
 800e308:	f023 0301 	bic.w	r3, r3, #1
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	835a      	strh	r2, [r3, #26]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	8b5b      	ldrh	r3, [r3, #26]
 800e316:	f043 0302 	orr.w	r3, r3, #2
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e320:	e188      	b.n	800e634 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	8b5b      	ldrh	r3, [r3, #26]
 800e326:	f043 0301 	orr.w	r3, r3, #1
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e330:	e180      	b.n	800e634 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e33a:	4848      	ldr	r0, [pc, #288]	; (800e45c <tcp_receive+0xcfc>)
 800e33c:	f7fd fbbe 	bl	800babc <tcp_seg_copy>
 800e340:	4602      	mov	r2, r0
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	675a      	str	r2, [r3, #116]	; 0x74
 800e346:	e16d      	b.n	800e624 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e348:	2300      	movs	r3, #0
 800e34a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e350:	63bb      	str	r3, [r7, #56]	; 0x38
 800e352:	e157      	b.n	800e604 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800e354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	685a      	ldr	r2, [r3, #4]
 800e35a:	4b41      	ldr	r3, [pc, #260]	; (800e460 <tcp_receive+0xd00>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d11d      	bne.n	800e39e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e362:	4b3e      	ldr	r3, [pc, #248]	; (800e45c <tcp_receive+0xcfc>)
 800e364:	891a      	ldrh	r2, [r3, #8]
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	891b      	ldrh	r3, [r3, #8]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	f240 814f 	bls.w	800e60e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e370:	483a      	ldr	r0, [pc, #232]	; (800e45c <tcp_receive+0xcfc>)
 800e372:	f7fd fba3 	bl	800babc <tcp_seg_copy>
 800e376:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f000 8149 	beq.w	800e612 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800e380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e382:	2b00      	cmp	r3, #0
 800e384:	d003      	beq.n	800e38e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800e386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	601a      	str	r2, [r3, #0]
 800e38c:	e002      	b.n	800e394 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	697a      	ldr	r2, [r7, #20]
 800e392:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e394:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e396:	6978      	ldr	r0, [r7, #20]
 800e398:	f7ff f8de 	bl	800d558 <tcp_oos_insert_segment>
                }
                break;
 800e39c:	e139      	b.n	800e612 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d117      	bne.n	800e3d4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e3a4:	4b2e      	ldr	r3, [pc, #184]	; (800e460 <tcp_receive+0xd00>)
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	da57      	bge.n	800e464 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e3b4:	4829      	ldr	r0, [pc, #164]	; (800e45c <tcp_receive+0xcfc>)
 800e3b6:	f7fd fb81 	bl	800babc <tcp_seg_copy>
 800e3ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f000 8129 	beq.w	800e616 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	69ba      	ldr	r2, [r7, #24]
 800e3c8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e3ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e3cc:	69b8      	ldr	r0, [r7, #24]
 800e3ce:	f7ff f8c3 	bl	800d558 <tcp_oos_insert_segment>
                  }
                  break;
 800e3d2:	e120      	b.n	800e616 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e3d4:	4b22      	ldr	r3, [pc, #136]	; (800e460 <tcp_receive+0xd00>)
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	db3e      	blt.n	800e464 <tcp_receive+0xd04>
 800e3e6:	4b1e      	ldr	r3, [pc, #120]	; (800e460 <tcp_receive+0xd00>)
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dc35      	bgt.n	800e464 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e3f8:	4818      	ldr	r0, [pc, #96]	; (800e45c <tcp_receive+0xcfc>)
 800e3fa:	f7fd fb5f 	bl	800babc <tcp_seg_copy>
 800e3fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 8109 	beq.w	800e61a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e410:	8912      	ldrh	r2, [r2, #8]
 800e412:	441a      	add	r2, r3
 800e414:	4b12      	ldr	r3, [pc, #72]	; (800e460 <tcp_receive+0xd00>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	dd12      	ble.n	800e444 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e41e:	4b10      	ldr	r3, [pc, #64]	; (800e460 <tcp_receive+0xd00>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	b29a      	uxth	r2, r3
 800e424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	1ad3      	subs	r3, r2, r3
 800e42e:	b29a      	uxth	r2, r3
 800e430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e432:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e43a:	891b      	ldrh	r3, [r3, #8]
 800e43c:	4619      	mov	r1, r3
 800e43e:	4610      	mov	r0, r2
 800e440:	f7fb fe88 	bl	800a154 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e446:	69fa      	ldr	r2, [r7, #28]
 800e448:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e44a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e44c:	69f8      	ldr	r0, [r7, #28]
 800e44e:	f7ff f883 	bl	800d558 <tcp_oos_insert_segment>
                  }
                  break;
 800e452:	e0e2      	b.n	800e61a <tcp_receive+0xeba>
 800e454:	200002f8 	.word	0x200002f8
 800e458:	200002f5 	.word	0x200002f5
 800e45c:	200002c8 	.word	0x200002c8
 800e460:	200002e8 	.word	0x200002e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800e464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e466:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f040 80c6 	bne.w	800e5fe <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e472:	4b80      	ldr	r3, [pc, #512]	; (800e674 <tcp_receive+0xf14>)
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f340 80bd 	ble.w	800e5fe <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	899b      	ldrh	r3, [r3, #12]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fa fd33 	bl	8008ef8 <lwip_htons>
 800e492:	4603      	mov	r3, r0
 800e494:	b2db      	uxtb	r3, r3
 800e496:	f003 0301 	and.w	r3, r3, #1
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f040 80bf 	bne.w	800e61e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e4a0:	4875      	ldr	r0, [pc, #468]	; (800e678 <tcp_receive+0xf18>)
 800e4a2:	f7fd fb0b 	bl	800babc <tcp_seg_copy>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 80b6 	beq.w	800e622 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4be:	8912      	ldrh	r2, [r2, #8]
 800e4c0:	441a      	add	r2, r3
 800e4c2:	4b6c      	ldr	r3, [pc, #432]	; (800e674 <tcp_receive+0xf14>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dd12      	ble.n	800e4f2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e4cc:	4b69      	ldr	r3, [pc, #420]	; (800e674 <tcp_receive+0xf14>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e4:	685a      	ldr	r2, [r3, #4]
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	891b      	ldrh	r3, [r3, #8]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	f7fb fe31 	bl	800a154 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e4f2:	4b62      	ldr	r3, [pc, #392]	; (800e67c <tcp_receive+0xf1c>)
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	4b5e      	ldr	r3, [pc, #376]	; (800e674 <tcp_receive+0xf14>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	441a      	add	r2, r3
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e502:	6879      	ldr	r1, [r7, #4]
 800e504:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e506:	440b      	add	r3, r1
 800e508:	1ad3      	subs	r3, r2, r3
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f340 8089 	ble.w	800e622 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	899b      	ldrh	r3, [r3, #12]
 800e518:	b29b      	uxth	r3, r3
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fa fcec 	bl	8008ef8 <lwip_htons>
 800e520:	4603      	mov	r3, r0
 800e522:	b2db      	uxtb	r3, r3
 800e524:	f003 0301 	and.w	r3, r3, #1
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d022      	beq.n	800e572 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	899b      	ldrh	r3, [r3, #12]
 800e534:	b29b      	uxth	r3, r3
 800e536:	b21b      	sxth	r3, r3
 800e538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e53c:	b21c      	sxth	r4, r3
 800e53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	899b      	ldrh	r3, [r3, #12]
 800e546:	b29b      	uxth	r3, r3
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fa fcd5 	bl	8008ef8 <lwip_htons>
 800e54e:	4603      	mov	r3, r0
 800e550:	b2db      	uxtb	r3, r3
 800e552:	b29b      	uxth	r3, r3
 800e554:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e558:	b29b      	uxth	r3, r3
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fa fccc 	bl	8008ef8 <lwip_htons>
 800e560:	4603      	mov	r3, r0
 800e562:	b21b      	sxth	r3, r3
 800e564:	4323      	orrs	r3, r4
 800e566:	b21a      	sxth	r2, r3
 800e568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68db      	ldr	r3, [r3, #12]
 800e56e:	b292      	uxth	r2, r2
 800e570:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e576:	b29a      	uxth	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e57c:	4413      	add	r3, r2
 800e57e:	b299      	uxth	r1, r3
 800e580:	4b3c      	ldr	r3, [pc, #240]	; (800e674 <tcp_receive+0xf14>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	b29a      	uxth	r2, r3
 800e586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	1a8a      	subs	r2, r1, r2
 800e58c:	b292      	uxth	r2, r2
 800e58e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	685a      	ldr	r2, [r3, #4]
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	891b      	ldrh	r3, [r3, #8]
 800e59c:	4619      	mov	r1, r3
 800e59e:	4610      	mov	r0, r2
 800e5a0:	f7fb fdd8 	bl	800a154 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	891c      	ldrh	r4, [r3, #8]
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	899b      	ldrh	r3, [r3, #12]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fa fc9f 	bl	8008ef8 <lwip_htons>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	b2db      	uxtb	r3, r3
 800e5be:	f003 0303 	and.w	r3, r3, #3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d001      	beq.n	800e5ca <tcp_receive+0xe6a>
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e000      	b.n	800e5cc <tcp_receive+0xe6c>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	4423      	add	r3, r4
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	4b2a      	ldr	r3, [pc, #168]	; (800e67c <tcp_receive+0xf1c>)
 800e5d2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e5d4:	4b29      	ldr	r3, [pc, #164]	; (800e67c <tcp_receive+0xf1c>)
 800e5d6:	881b      	ldrh	r3, [r3, #0]
 800e5d8:	461a      	mov	r2, r3
 800e5da:	4b26      	ldr	r3, [pc, #152]	; (800e674 <tcp_receive+0xf14>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	441a      	add	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e4:	6879      	ldr	r1, [r7, #4]
 800e5e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5e8:	440b      	add	r3, r1
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d019      	beq.n	800e622 <tcp_receive+0xec2>
 800e5ee:	4b24      	ldr	r3, [pc, #144]	; (800e680 <tcp_receive+0xf20>)
 800e5f0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e5f4:	4923      	ldr	r1, [pc, #140]	; (800e684 <tcp_receive+0xf24>)
 800e5f6:	4824      	ldr	r0, [pc, #144]	; (800e688 <tcp_receive+0xf28>)
 800e5f8:	f005 fa56 	bl	8013aa8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e5fc:	e011      	b.n	800e622 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	63bb      	str	r3, [r7, #56]	; 0x38
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	2b00      	cmp	r3, #0
 800e608:	f47f aea4 	bne.w	800e354 <tcp_receive+0xbf4>
 800e60c:	e00a      	b.n	800e624 <tcp_receive+0xec4>
                break;
 800e60e:	bf00      	nop
 800e610:	e008      	b.n	800e624 <tcp_receive+0xec4>
                break;
 800e612:	bf00      	nop
 800e614:	e006      	b.n	800e624 <tcp_receive+0xec4>
                  break;
 800e616:	bf00      	nop
 800e618:	e004      	b.n	800e624 <tcp_receive+0xec4>
                  break;
 800e61a:	bf00      	nop
 800e61c:	e002      	b.n	800e624 <tcp_receive+0xec4>
                  break;
 800e61e:	bf00      	nop
 800e620:	e000      	b.n	800e624 <tcp_receive+0xec4>
                break;
 800e622:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f001 fa33 	bl	800fa90 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e62a:	e003      	b.n	800e634 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f001 fa2f 	bl	800fa90 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e632:	e01a      	b.n	800e66a <tcp_receive+0xf0a>
 800e634:	e019      	b.n	800e66a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e636:	4b0f      	ldr	r3, [pc, #60]	; (800e674 <tcp_receive+0xf14>)
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	2b00      	cmp	r3, #0
 800e642:	db0a      	blt.n	800e65a <tcp_receive+0xefa>
 800e644:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <tcp_receive+0xf14>)
 800e646:	681a      	ldr	r2, [r3, #0]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64c:	6879      	ldr	r1, [r7, #4]
 800e64e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e650:	440b      	add	r3, r1
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	3301      	adds	r3, #1
 800e656:	2b00      	cmp	r3, #0
 800e658:	dd07      	ble.n	800e66a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	8b5b      	ldrh	r3, [r3, #26]
 800e65e:	f043 0302 	orr.w	r3, r3, #2
 800e662:	b29a      	uxth	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e668:	e7ff      	b.n	800e66a <tcp_receive+0xf0a>
 800e66a:	bf00      	nop
 800e66c:	3750      	adds	r7, #80	; 0x50
 800e66e:	46bd      	mov	sp, r7
 800e670:	bdb0      	pop	{r4, r5, r7, pc}
 800e672:	bf00      	nop
 800e674:	200002e8 	.word	0x200002e8
 800e678:	200002c8 	.word	0x200002c8
 800e67c:	200002f2 	.word	0x200002f2
 800e680:	080183e8 	.word	0x080183e8
 800e684:	08018790 	.word	0x08018790
 800e688:	08018434 	.word	0x08018434

0800e68c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e692:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <tcp_get_next_optbyte+0x5c>)
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	1c5a      	adds	r2, r3, #1
 800e698:	b291      	uxth	r1, r2
 800e69a:	4a13      	ldr	r2, [pc, #76]	; (800e6e8 <tcp_get_next_optbyte+0x5c>)
 800e69c:	8011      	strh	r1, [r2, #0]
 800e69e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e6a0:	4b12      	ldr	r3, [pc, #72]	; (800e6ec <tcp_get_next_optbyte+0x60>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d004      	beq.n	800e6b2 <tcp_get_next_optbyte+0x26>
 800e6a8:	4b11      	ldr	r3, [pc, #68]	; (800e6f0 <tcp_get_next_optbyte+0x64>)
 800e6aa:	881b      	ldrh	r3, [r3, #0]
 800e6ac:	88fa      	ldrh	r2, [r7, #6]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d208      	bcs.n	800e6c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e6b2:	4b10      	ldr	r3, [pc, #64]	; (800e6f4 <tcp_get_next_optbyte+0x68>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	3314      	adds	r3, #20
 800e6b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e6ba:	88fb      	ldrh	r3, [r7, #6]
 800e6bc:	683a      	ldr	r2, [r7, #0]
 800e6be:	4413      	add	r3, r2
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	e00b      	b.n	800e6dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e6c4:	88fb      	ldrh	r3, [r7, #6]
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	4b09      	ldr	r3, [pc, #36]	; (800e6f0 <tcp_get_next_optbyte+0x64>)
 800e6ca:	881b      	ldrh	r3, [r3, #0]
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e6d2:	4b06      	ldr	r3, [pc, #24]	; (800e6ec <tcp_get_next_optbyte+0x60>)
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	797b      	ldrb	r3, [r7, #5]
 800e6d8:	4413      	add	r3, r2
 800e6da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	200002e4 	.word	0x200002e4
 800e6ec:	200002e0 	.word	0x200002e0
 800e6f0:	200002de 	.word	0x200002de
 800e6f4:	200002d8 	.word	0x200002d8

0800e6f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d106      	bne.n	800e714 <tcp_parseopt+0x1c>
 800e706:	4b32      	ldr	r3, [pc, #200]	; (800e7d0 <tcp_parseopt+0xd8>)
 800e708:	f240 727d 	movw	r2, #1917	; 0x77d
 800e70c:	4931      	ldr	r1, [pc, #196]	; (800e7d4 <tcp_parseopt+0xdc>)
 800e70e:	4832      	ldr	r0, [pc, #200]	; (800e7d8 <tcp_parseopt+0xe0>)
 800e710:	f005 f9ca 	bl	8013aa8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e714:	4b31      	ldr	r3, [pc, #196]	; (800e7dc <tcp_parseopt+0xe4>)
 800e716:	881b      	ldrh	r3, [r3, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d055      	beq.n	800e7c8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e71c:	4b30      	ldr	r3, [pc, #192]	; (800e7e0 <tcp_parseopt+0xe8>)
 800e71e:	2200      	movs	r2, #0
 800e720:	801a      	strh	r2, [r3, #0]
 800e722:	e045      	b.n	800e7b0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e724:	f7ff ffb2 	bl	800e68c <tcp_get_next_optbyte>
 800e728:	4603      	mov	r3, r0
 800e72a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
 800e72e:	2b02      	cmp	r3, #2
 800e730:	d006      	beq.n	800e740 <tcp_parseopt+0x48>
 800e732:	2b02      	cmp	r3, #2
 800e734:	dc2b      	bgt.n	800e78e <tcp_parseopt+0x96>
 800e736:	2b00      	cmp	r3, #0
 800e738:	d041      	beq.n	800e7be <tcp_parseopt+0xc6>
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d127      	bne.n	800e78e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e73e:	e037      	b.n	800e7b0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e740:	f7ff ffa4 	bl	800e68c <tcp_get_next_optbyte>
 800e744:	4603      	mov	r3, r0
 800e746:	2b04      	cmp	r3, #4
 800e748:	d13b      	bne.n	800e7c2 <tcp_parseopt+0xca>
 800e74a:	4b25      	ldr	r3, [pc, #148]	; (800e7e0 <tcp_parseopt+0xe8>)
 800e74c:	881b      	ldrh	r3, [r3, #0]
 800e74e:	3301      	adds	r3, #1
 800e750:	4a22      	ldr	r2, [pc, #136]	; (800e7dc <tcp_parseopt+0xe4>)
 800e752:	8812      	ldrh	r2, [r2, #0]
 800e754:	4293      	cmp	r3, r2
 800e756:	da34      	bge.n	800e7c2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e758:	f7ff ff98 	bl	800e68c <tcp_get_next_optbyte>
 800e75c:	4603      	mov	r3, r0
 800e75e:	b29b      	uxth	r3, r3
 800e760:	021b      	lsls	r3, r3, #8
 800e762:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e764:	f7ff ff92 	bl	800e68c <tcp_get_next_optbyte>
 800e768:	4603      	mov	r3, r0
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	89bb      	ldrh	r3, [r7, #12]
 800e76e:	4313      	orrs	r3, r2
 800e770:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e772:	89bb      	ldrh	r3, [r7, #12]
 800e774:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e778:	d804      	bhi.n	800e784 <tcp_parseopt+0x8c>
 800e77a:	89bb      	ldrh	r3, [r7, #12]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <tcp_parseopt+0x8c>
 800e780:	89ba      	ldrh	r2, [r7, #12]
 800e782:	e001      	b.n	800e788 <tcp_parseopt+0x90>
 800e784:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e78c:	e010      	b.n	800e7b0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e78e:	f7ff ff7d 	bl	800e68c <tcp_get_next_optbyte>
 800e792:	4603      	mov	r3, r0
 800e794:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e796:	7afb      	ldrb	r3, [r7, #11]
 800e798:	2b01      	cmp	r3, #1
 800e79a:	d914      	bls.n	800e7c6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e79c:	7afb      	ldrb	r3, [r7, #11]
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	4b0f      	ldr	r3, [pc, #60]	; (800e7e0 <tcp_parseopt+0xe8>)
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	3b02      	subs	r3, #2
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	4b0c      	ldr	r3, [pc, #48]	; (800e7e0 <tcp_parseopt+0xe8>)
 800e7ae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e7b0:	4b0b      	ldr	r3, [pc, #44]	; (800e7e0 <tcp_parseopt+0xe8>)
 800e7b2:	881a      	ldrh	r2, [r3, #0]
 800e7b4:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <tcp_parseopt+0xe4>)
 800e7b6:	881b      	ldrh	r3, [r3, #0]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d3b3      	bcc.n	800e724 <tcp_parseopt+0x2c>
 800e7bc:	e004      	b.n	800e7c8 <tcp_parseopt+0xd0>
          return;
 800e7be:	bf00      	nop
 800e7c0:	e002      	b.n	800e7c8 <tcp_parseopt+0xd0>
            return;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <tcp_parseopt+0xd0>
            return;
 800e7c6:	bf00      	nop
      }
    }
  }
}
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	080183e8 	.word	0x080183e8
 800e7d4:	0801884c 	.word	0x0801884c
 800e7d8:	08018434 	.word	0x08018434
 800e7dc:	200002dc 	.word	0x200002dc
 800e7e0:	200002e4 	.word	0x200002e4

0800e7e4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e7e8:	4b05      	ldr	r3, [pc, #20]	; (800e800 <tcp_trigger_input_pcb_close+0x1c>)
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	f043 0310 	orr.w	r3, r3, #16
 800e7f0:	b2da      	uxtb	r2, r3
 800e7f2:	4b03      	ldr	r3, [pc, #12]	; (800e800 <tcp_trigger_input_pcb_close+0x1c>)
 800e7f4:	701a      	strb	r2, [r3, #0]
}
 800e7f6:	bf00      	nop
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr
 800e800:	200002f5 	.word	0x200002f5

0800e804 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00a      	beq.n	800e82c <tcp_route+0x28>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	7a1b      	ldrb	r3, [r3, #8]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d006      	beq.n	800e82c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	7a1b      	ldrb	r3, [r3, #8]
 800e822:	4618      	mov	r0, r3
 800e824:	f7fb fabc 	bl	8009da0 <netif_get_by_index>
 800e828:	4603      	mov	r3, r0
 800e82a:	e003      	b.n	800e834 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f003 f9cb 	bl	8011bc8 <ip4_route>
 800e832:	4603      	mov	r3, r0
  }
}
 800e834:	4618      	mov	r0, r3
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e83c:	b590      	push	{r4, r7, lr}
 800e83e:	b087      	sub	sp, #28
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	603b      	str	r3, [r7, #0]
 800e848:	4613      	mov	r3, r2
 800e84a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d105      	bne.n	800e85e <tcp_create_segment+0x22>
 800e852:	4b44      	ldr	r3, [pc, #272]	; (800e964 <tcp_create_segment+0x128>)
 800e854:	22a3      	movs	r2, #163	; 0xa3
 800e856:	4944      	ldr	r1, [pc, #272]	; (800e968 <tcp_create_segment+0x12c>)
 800e858:	4844      	ldr	r0, [pc, #272]	; (800e96c <tcp_create_segment+0x130>)
 800e85a:	f005 f925 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d105      	bne.n	800e870 <tcp_create_segment+0x34>
 800e864:	4b3f      	ldr	r3, [pc, #252]	; (800e964 <tcp_create_segment+0x128>)
 800e866:	22a4      	movs	r2, #164	; 0xa4
 800e868:	4941      	ldr	r1, [pc, #260]	; (800e970 <tcp_create_segment+0x134>)
 800e86a:	4840      	ldr	r0, [pc, #256]	; (800e96c <tcp_create_segment+0x130>)
 800e86c:	f005 f91c 	bl	8013aa8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e870:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 0304 	and.w	r3, r3, #4
 800e87c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e87e:	2003      	movs	r0, #3
 800e880:	f7fa ff90 	bl	80097a4 <memp_malloc>
 800e884:	6138      	str	r0, [r7, #16]
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d104      	bne.n	800e896 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e88c:	68b8      	ldr	r0, [r7, #8]
 800e88e:	f7fb fde7 	bl	800a460 <pbuf_free>
    return NULL;
 800e892:	2300      	movs	r3, #0
 800e894:	e061      	b.n	800e95a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e89c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	891a      	ldrh	r2, [r3, #8]
 800e8ae:	7dfb      	ldrb	r3, [r7, #23]
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d205      	bcs.n	800e8c2 <tcp_create_segment+0x86>
 800e8b6:	4b2b      	ldr	r3, [pc, #172]	; (800e964 <tcp_create_segment+0x128>)
 800e8b8:	22b0      	movs	r2, #176	; 0xb0
 800e8ba:	492e      	ldr	r1, [pc, #184]	; (800e974 <tcp_create_segment+0x138>)
 800e8bc:	482b      	ldr	r0, [pc, #172]	; (800e96c <tcp_create_segment+0x130>)
 800e8be:	f005 f8f3 	bl	8013aa8 <iprintf>
  seg->len = p->tot_len - optlen;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	891a      	ldrh	r2, [r3, #8]
 800e8c6:	7dfb      	ldrb	r3, [r7, #23]
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e8d2:	2114      	movs	r1, #20
 800e8d4:	68b8      	ldr	r0, [r7, #8]
 800e8d6:	f7fb fd2d 	bl	800a334 <pbuf_add_header>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d004      	beq.n	800e8ea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e8e0:	6938      	ldr	r0, [r7, #16]
 800e8e2:	f7fd f8d2 	bl	800ba8a <tcp_seg_free>
    return NULL;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	e037      	b.n	800e95a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	8ada      	ldrh	r2, [r3, #22]
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	68dc      	ldr	r4, [r3, #12]
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	f7fa fafb 	bl	8008ef8 <lwip_htons>
 800e902:	4603      	mov	r3, r0
 800e904:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	8b1a      	ldrh	r2, [r3, #24]
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	68dc      	ldr	r4, [r3, #12]
 800e90e:	4610      	mov	r0, r2
 800e910:	f7fa faf2 	bl	8008ef8 <lwip_htons>
 800e914:	4603      	mov	r3, r0
 800e916:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	68dc      	ldr	r4, [r3, #12]
 800e91c:	6838      	ldr	r0, [r7, #0]
 800e91e:	f7fa fb00 	bl	8008f22 <lwip_htonl>
 800e922:	4603      	mov	r3, r0
 800e924:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e926:	7dfb      	ldrb	r3, [r7, #23]
 800e928:	089b      	lsrs	r3, r3, #2
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	3305      	adds	r3, #5
 800e930:	b29b      	uxth	r3, r3
 800e932:	031b      	lsls	r3, r3, #12
 800e934:	b29a      	uxth	r2, r3
 800e936:	79fb      	ldrb	r3, [r7, #7]
 800e938:	b29b      	uxth	r3, r3
 800e93a:	4313      	orrs	r3, r2
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	68dc      	ldr	r4, [r3, #12]
 800e942:	4610      	mov	r0, r2
 800e944:	f7fa fad8 	bl	8008ef8 <lwip_htons>
 800e948:	4603      	mov	r3, r0
 800e94a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	749a      	strb	r2, [r3, #18]
 800e954:	2200      	movs	r2, #0
 800e956:	74da      	strb	r2, [r3, #19]
  return seg;
 800e958:	693b      	ldr	r3, [r7, #16]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	371c      	adds	r7, #28
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd90      	pop	{r4, r7, pc}
 800e962:	bf00      	nop
 800e964:	08018868 	.word	0x08018868
 800e968:	0801889c 	.word	0x0801889c
 800e96c:	080188bc 	.word	0x080188bc
 800e970:	080188e4 	.word	0x080188e4
 800e974:	08018908 	.word	0x08018908

0800e978 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e978:	b590      	push	{r4, r7, lr}
 800e97a:	b08b      	sub	sp, #44	; 0x2c
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e984:	2300      	movs	r3, #0
 800e986:	61fb      	str	r3, [r7, #28]
 800e988:	2300      	movs	r3, #0
 800e98a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e98c:	2300      	movs	r3, #0
 800e98e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d106      	bne.n	800e9a4 <tcp_split_unsent_seg+0x2c>
 800e996:	4b95      	ldr	r3, [pc, #596]	; (800ebec <tcp_split_unsent_seg+0x274>)
 800e998:	f240 324b 	movw	r2, #843	; 0x34b
 800e99c:	4994      	ldr	r1, [pc, #592]	; (800ebf0 <tcp_split_unsent_seg+0x278>)
 800e99e:	4895      	ldr	r0, [pc, #596]	; (800ebf4 <tcp_split_unsent_seg+0x27c>)
 800e9a0:	f005 f882 	bl	8013aa8 <iprintf>

  useg = pcb->unsent;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b4:	e116      	b.n	800ebe4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e9b6:	887b      	ldrh	r3, [r7, #2]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d109      	bne.n	800e9d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e9bc:	4b8b      	ldr	r3, [pc, #556]	; (800ebec <tcp_split_unsent_seg+0x274>)
 800e9be:	f240 3253 	movw	r2, #851	; 0x353
 800e9c2:	498d      	ldr	r1, [pc, #564]	; (800ebf8 <tcp_split_unsent_seg+0x280>)
 800e9c4:	488b      	ldr	r0, [pc, #556]	; (800ebf4 <tcp_split_unsent_seg+0x27c>)
 800e9c6:	f005 f86f 	bl	8013aa8 <iprintf>
    return ERR_VAL;
 800e9ca:	f06f 0305 	mvn.w	r3, #5
 800e9ce:	e109      	b.n	800ebe4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	891b      	ldrh	r3, [r3, #8]
 800e9d4:	887a      	ldrh	r2, [r7, #2]
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d301      	bcc.n	800e9de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	e102      	b.n	800ebe4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9e2:	887a      	ldrh	r2, [r7, #2]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d906      	bls.n	800e9f6 <tcp_split_unsent_seg+0x7e>
 800e9e8:	4b80      	ldr	r3, [pc, #512]	; (800ebec <tcp_split_unsent_seg+0x274>)
 800e9ea:	f240 325b 	movw	r2, #859	; 0x35b
 800e9ee:	4983      	ldr	r1, [pc, #524]	; (800ebfc <tcp_split_unsent_seg+0x284>)
 800e9f0:	4880      	ldr	r0, [pc, #512]	; (800ebf4 <tcp_split_unsent_seg+0x27c>)
 800e9f2:	f005 f859 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	891b      	ldrh	r3, [r3, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d106      	bne.n	800ea0c <tcp_split_unsent_seg+0x94>
 800e9fe:	4b7b      	ldr	r3, [pc, #492]	; (800ebec <tcp_split_unsent_seg+0x274>)
 800ea00:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ea04:	497e      	ldr	r1, [pc, #504]	; (800ec00 <tcp_split_unsent_seg+0x288>)
 800ea06:	487b      	ldr	r0, [pc, #492]	; (800ebf4 <tcp_split_unsent_seg+0x27c>)
 800ea08:	f005 f84e 	bl	8013aa8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	7a9b      	ldrb	r3, [r3, #10]
 800ea10:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	f003 0304 	and.w	r3, r3, #4
 800ea1c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	891a      	ldrh	r2, [r3, #8]
 800ea22:	887b      	ldrh	r3, [r7, #2]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ea28:	7bbb      	ldrb	r3, [r7, #14]
 800ea2a:	b29a      	uxth	r2, r3
 800ea2c:	89bb      	ldrh	r3, [r7, #12]
 800ea2e:	4413      	add	r3, r2
 800ea30:	b29b      	uxth	r3, r3
 800ea32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea36:	4619      	mov	r1, r3
 800ea38:	2036      	movs	r0, #54	; 0x36
 800ea3a:	f7fb fa2d 	bl	8009e98 <pbuf_alloc>
 800ea3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f000 80b7 	beq.w	800ebb6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	891a      	ldrh	r2, [r3, #8]
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	891b      	ldrh	r3, [r3, #8]
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	887b      	ldrh	r3, [r7, #2]
 800ea58:	4413      	add	r3, r2
 800ea5a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	6858      	ldr	r0, [r3, #4]
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	685a      	ldr	r2, [r3, #4]
 800ea64:	7bbb      	ldrb	r3, [r7, #14]
 800ea66:	18d1      	adds	r1, r2, r3
 800ea68:	897b      	ldrh	r3, [r7, #10]
 800ea6a:	89ba      	ldrh	r2, [r7, #12]
 800ea6c:	f7fb fef2 	bl	800a854 <pbuf_copy_partial>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	89bb      	ldrh	r3, [r7, #12]
 800ea76:	4293      	cmp	r3, r2
 800ea78:	f040 809f 	bne.w	800ebba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	899b      	ldrh	r3, [r3, #12]
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fa fa37 	bl	8008ef8 <lwip_htons>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea92:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ea94:	2300      	movs	r3, #0
 800ea96:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ea98:	7efb      	ldrb	r3, [r7, #27]
 800ea9a:	f003 0308 	and.w	r3, r3, #8
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d007      	beq.n	800eab2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800eaa2:	7efb      	ldrb	r3, [r7, #27]
 800eaa4:	f023 0308 	bic.w	r3, r3, #8
 800eaa8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800eaaa:	7ebb      	ldrb	r3, [r7, #26]
 800eaac:	f043 0308 	orr.w	r3, r3, #8
 800eab0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800eab2:	7efb      	ldrb	r3, [r7, #27]
 800eab4:	f003 0301 	and.w	r3, r3, #1
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d007      	beq.n	800eacc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800eabc:	7efb      	ldrb	r3, [r7, #27]
 800eabe:	f023 0301 	bic.w	r3, r3, #1
 800eac2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800eac4:	7ebb      	ldrb	r3, [r7, #26]
 800eac6:	f043 0301 	orr.w	r3, r3, #1
 800eaca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fa fa25 	bl	8008f22 <lwip_htonl>
 800ead8:	4602      	mov	r2, r0
 800eada:	887b      	ldrh	r3, [r7, #2]
 800eadc:	18d1      	adds	r1, r2, r3
 800eade:	7eba      	ldrb	r2, [r7, #26]
 800eae0:	7bfb      	ldrb	r3, [r7, #15]
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	460b      	mov	r3, r1
 800eae6:	6939      	ldr	r1, [r7, #16]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff fea7 	bl	800e83c <tcp_create_segment>
 800eaee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d063      	beq.n	800ebbe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fb fd38 	bl	800a570 <pbuf_clen>
 800eb00:	4603      	mov	r3, r0
 800eb02:	461a      	mov	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb0a:	1a9b      	subs	r3, r3, r2
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	6858      	ldr	r0, [r3, #4]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	891a      	ldrh	r2, [r3, #8]
 800eb1e:	89bb      	ldrh	r3, [r7, #12]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	4619      	mov	r1, r3
 800eb26:	f7fb fb15 	bl	800a154 <pbuf_realloc>
  useg->len -= remainder;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	891a      	ldrh	r2, [r3, #8]
 800eb2e:	89bb      	ldrh	r3, [r7, #12]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	899b      	ldrh	r3, [r3, #12]
 800eb3e:	b29c      	uxth	r4, r3
 800eb40:	7efb      	ldrb	r3, [r7, #27]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fa f9d7 	bl	8008ef8 <lwip_htons>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	4322      	orrs	r2, r4
 800eb54:	b292      	uxth	r2, r2
 800eb56:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fb fd07 	bl	800a570 <pbuf_clen>
 800eb62:	4603      	mov	r3, r0
 800eb64:	461a      	mov	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb6c:	4413      	add	r3, r2
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7fb fcf8 	bl	800a570 <pbuf_clen>
 800eb80:	4603      	mov	r3, r0
 800eb82:	461a      	mov	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb8a:	4413      	add	r3, r2
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d103      	bne.n	800ebb2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	e016      	b.n	800ebe4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ebb6:	bf00      	nop
 800ebb8:	e002      	b.n	800ebc0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ebba:	bf00      	nop
 800ebbc:	e000      	b.n	800ebc0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ebbe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d006      	beq.n	800ebd4 <tcp_split_unsent_seg+0x25c>
 800ebc6:	4b09      	ldr	r3, [pc, #36]	; (800ebec <tcp_split_unsent_seg+0x274>)
 800ebc8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ebcc:	490d      	ldr	r1, [pc, #52]	; (800ec04 <tcp_split_unsent_seg+0x28c>)
 800ebce:	4809      	ldr	r0, [pc, #36]	; (800ebf4 <tcp_split_unsent_seg+0x27c>)
 800ebd0:	f004 ff6a 	bl	8013aa8 <iprintf>
  if (p != NULL) {
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ebda:	6938      	ldr	r0, [r7, #16]
 800ebdc:	f7fb fc40 	bl	800a460 <pbuf_free>
  }

  return ERR_MEM;
 800ebe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3724      	adds	r7, #36	; 0x24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd90      	pop	{r4, r7, pc}
 800ebec:	08018868 	.word	0x08018868
 800ebf0:	08018bfc 	.word	0x08018bfc
 800ebf4:	080188bc 	.word	0x080188bc
 800ebf8:	08018c20 	.word	0x08018c20
 800ebfc:	08018c44 	.word	0x08018c44
 800ec00:	08018c54 	.word	0x08018c54
 800ec04:	08018c64 	.word	0x08018c64

0800ec08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ec08:	b590      	push	{r4, r7, lr}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d106      	bne.n	800ec24 <tcp_send_fin+0x1c>
 800ec16:	4b21      	ldr	r3, [pc, #132]	; (800ec9c <tcp_send_fin+0x94>)
 800ec18:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ec1c:	4920      	ldr	r1, [pc, #128]	; (800eca0 <tcp_send_fin+0x98>)
 800ec1e:	4821      	ldr	r0, [pc, #132]	; (800eca4 <tcp_send_fin+0x9c>)
 800ec20:	f004 ff42 	bl	8013aa8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d02e      	beq.n	800ec8a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec30:	60fb      	str	r3, [r7, #12]
 800ec32:	e002      	b.n	800ec3a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1f8      	bne.n	800ec34 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	899b      	ldrh	r3, [r3, #12]
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fa f954 	bl	8008ef8 <lwip_htons>
 800ec50:	4603      	mov	r3, r0
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	f003 0307 	and.w	r3, r3, #7
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d116      	bne.n	800ec8a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	899b      	ldrh	r3, [r3, #12]
 800ec62:	b29c      	uxth	r4, r3
 800ec64:	2001      	movs	r0, #1
 800ec66:	f7fa f947 	bl	8008ef8 <lwip_htons>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	4322      	orrs	r2, r4
 800ec74:	b292      	uxth	r2, r2
 800ec76:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	8b5b      	ldrh	r3, [r3, #26]
 800ec7c:	f043 0320 	orr.w	r3, r3, #32
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	e004      	b.n	800ec94 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f80b 	bl	800eca8 <tcp_enqueue_flags>
 800ec92:	4603      	mov	r3, r0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd90      	pop	{r4, r7, pc}
 800ec9c:	08018868 	.word	0x08018868
 800eca0:	08018c70 	.word	0x08018c70
 800eca4:	080188bc 	.word	0x080188bc

0800eca8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b08a      	sub	sp, #40	; 0x28
 800ecac:	af02      	add	r7, sp, #8
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ecbc:	78fb      	ldrb	r3, [r7, #3]
 800ecbe:	f003 0303 	and.w	r3, r3, #3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d106      	bne.n	800ecd4 <tcp_enqueue_flags+0x2c>
 800ecc6:	4b67      	ldr	r3, [pc, #412]	; (800ee64 <tcp_enqueue_flags+0x1bc>)
 800ecc8:	f240 4211 	movw	r2, #1041	; 0x411
 800eccc:	4966      	ldr	r1, [pc, #408]	; (800ee68 <tcp_enqueue_flags+0x1c0>)
 800ecce:	4867      	ldr	r0, [pc, #412]	; (800ee6c <tcp_enqueue_flags+0x1c4>)
 800ecd0:	f004 feea 	bl	8013aa8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <tcp_enqueue_flags+0x40>
 800ecda:	4b62      	ldr	r3, [pc, #392]	; (800ee64 <tcp_enqueue_flags+0x1bc>)
 800ecdc:	f240 4213 	movw	r2, #1043	; 0x413
 800ece0:	4963      	ldr	r1, [pc, #396]	; (800ee70 <tcp_enqueue_flags+0x1c8>)
 800ece2:	4862      	ldr	r0, [pc, #392]	; (800ee6c <tcp_enqueue_flags+0x1c4>)
 800ece4:	f004 fee0 	bl	8013aa8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ece8:	78fb      	ldrb	r3, [r7, #3]
 800ecea:	f003 0302 	and.w	r3, r3, #2
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d001      	beq.n	800ecf6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ecf6:	7ffb      	ldrb	r3, [r7, #31]
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	f003 0304 	and.w	r3, r3, #4
 800ed00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	b29b      	uxth	r3, r3
 800ed06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	2036      	movs	r0, #54	; 0x36
 800ed0e:	f7fb f8c3 	bl	8009e98 <pbuf_alloc>
 800ed12:	6138      	str	r0, [r7, #16]
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d109      	bne.n	800ed2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	8b5b      	ldrh	r3, [r3, #26]
 800ed1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ed28:	f04f 33ff 	mov.w	r3, #4294967295
 800ed2c:	e095      	b.n	800ee5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	895a      	ldrh	r2, [r3, #10]
 800ed32:	7dfb      	ldrb	r3, [r7, #23]
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d206      	bcs.n	800ed48 <tcp_enqueue_flags+0xa0>
 800ed3a:	4b4a      	ldr	r3, [pc, #296]	; (800ee64 <tcp_enqueue_flags+0x1bc>)
 800ed3c:	f240 4239 	movw	r2, #1081	; 0x439
 800ed40:	494c      	ldr	r1, [pc, #304]	; (800ee74 <tcp_enqueue_flags+0x1cc>)
 800ed42:	484a      	ldr	r0, [pc, #296]	; (800ee6c <tcp_enqueue_flags+0x1c4>)
 800ed44:	f004 feb0 	bl	8013aa8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ed4c:	78fa      	ldrb	r2, [r7, #3]
 800ed4e:	7ffb      	ldrb	r3, [r7, #31]
 800ed50:	9300      	str	r3, [sp, #0]
 800ed52:	460b      	mov	r3, r1
 800ed54:	6939      	ldr	r1, [r7, #16]
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f7ff fd70 	bl	800e83c <tcp_create_segment>
 800ed5c:	60f8      	str	r0, [r7, #12]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d109      	bne.n	800ed78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	8b5b      	ldrh	r3, [r3, #26]
 800ed68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed6c:	b29a      	uxth	r2, r3
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ed72:	f04f 33ff 	mov.w	r3, #4294967295
 800ed76:	e070      	b.n	800ee5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	f003 0303 	and.w	r3, r3, #3
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d006      	beq.n	800ed92 <tcp_enqueue_flags+0xea>
 800ed84:	4b37      	ldr	r3, [pc, #220]	; (800ee64 <tcp_enqueue_flags+0x1bc>)
 800ed86:	f240 4242 	movw	r2, #1090	; 0x442
 800ed8a:	493b      	ldr	r1, [pc, #236]	; (800ee78 <tcp_enqueue_flags+0x1d0>)
 800ed8c:	4837      	ldr	r0, [pc, #220]	; (800ee6c <tcp_enqueue_flags+0x1c4>)
 800ed8e:	f004 fe8b 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	891b      	ldrh	r3, [r3, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d006      	beq.n	800eda8 <tcp_enqueue_flags+0x100>
 800ed9a:	4b32      	ldr	r3, [pc, #200]	; (800ee64 <tcp_enqueue_flags+0x1bc>)
 800ed9c:	f240 4243 	movw	r2, #1091	; 0x443
 800eda0:	4936      	ldr	r1, [pc, #216]	; (800ee7c <tcp_enqueue_flags+0x1d4>)
 800eda2:	4832      	ldr	r0, [pc, #200]	; (800ee6c <tcp_enqueue_flags+0x1c4>)
 800eda4:	f004 fe80 	bl	8013aa8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edac:	2b00      	cmp	r3, #0
 800edae:	d103      	bne.n	800edb8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	66da      	str	r2, [r3, #108]	; 0x6c
 800edb6:	e00d      	b.n	800edd4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edbc:	61bb      	str	r3, [r7, #24]
 800edbe:	e002      	b.n	800edc6 <tcp_enqueue_flags+0x11e>
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	61bb      	str	r3, [r7, #24]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1f8      	bne.n	800edc0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800eddc:	78fb      	ldrb	r3, [r7, #3]
 800edde:	f003 0302 	and.w	r3, r3, #2
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d104      	bne.n	800edf0 <tcp_enqueue_flags+0x148>
 800ede6:	78fb      	ldrb	r3, [r7, #3]
 800ede8:	f003 0301 	and.w	r3, r3, #1
 800edec:	2b00      	cmp	r3, #0
 800edee:	d004      	beq.n	800edfa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800edfa:	78fb      	ldrb	r3, [r7, #3]
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d006      	beq.n	800ee12 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	8b5b      	ldrh	r3, [r3, #26]
 800ee08:	f043 0320 	orr.w	r3, r3, #32
 800ee0c:	b29a      	uxth	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fb fbaa 	bl	800a570 <pbuf_clen>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	461a      	mov	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee26:	4413      	add	r3, r2
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00e      	beq.n	800ee58 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d10a      	bne.n	800ee58 <tcp_enqueue_flags+0x1b0>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d106      	bne.n	800ee58 <tcp_enqueue_flags+0x1b0>
 800ee4a:	4b06      	ldr	r3, [pc, #24]	; (800ee64 <tcp_enqueue_flags+0x1bc>)
 800ee4c:	f240 4265 	movw	r2, #1125	; 0x465
 800ee50:	490b      	ldr	r1, [pc, #44]	; (800ee80 <tcp_enqueue_flags+0x1d8>)
 800ee52:	4806      	ldr	r0, [pc, #24]	; (800ee6c <tcp_enqueue_flags+0x1c4>)
 800ee54:	f004 fe28 	bl	8013aa8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ee58:	2300      	movs	r3, #0
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3720      	adds	r7, #32
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	08018868 	.word	0x08018868
 800ee68:	08018c8c 	.word	0x08018c8c
 800ee6c:	080188bc 	.word	0x080188bc
 800ee70:	08018ce4 	.word	0x08018ce4
 800ee74:	08018d04 	.word	0x08018d04
 800ee78:	08018d40 	.word	0x08018d40
 800ee7c:	08018d58 	.word	0x08018d58
 800ee80:	08018d84 	.word	0x08018d84

0800ee84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ee84:	b5b0      	push	{r4, r5, r7, lr}
 800ee86:	b08a      	sub	sp, #40	; 0x28
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <tcp_output+0x1c>
 800ee92:	4b9e      	ldr	r3, [pc, #632]	; (800f10c <tcp_output+0x288>)
 800ee94:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ee98:	499d      	ldr	r1, [pc, #628]	; (800f110 <tcp_output+0x28c>)
 800ee9a:	489e      	ldr	r0, [pc, #632]	; (800f114 <tcp_output+0x290>)
 800ee9c:	f004 fe04 	bl	8013aa8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	7d1b      	ldrb	r3, [r3, #20]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d106      	bne.n	800eeb6 <tcp_output+0x32>
 800eea8:	4b98      	ldr	r3, [pc, #608]	; (800f10c <tcp_output+0x288>)
 800eeaa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800eeae:	499a      	ldr	r1, [pc, #616]	; (800f118 <tcp_output+0x294>)
 800eeb0:	4898      	ldr	r0, [pc, #608]	; (800f114 <tcp_output+0x290>)
 800eeb2:	f004 fdf9 	bl	8013aa8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800eeb6:	4b99      	ldr	r3, [pc, #612]	; (800f11c <tcp_output+0x298>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d101      	bne.n	800eec4 <tcp_output+0x40>
    return ERR_OK;
 800eec0:	2300      	movs	r3, #0
 800eec2:	e1ce      	b.n	800f262 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eed0:	4293      	cmp	r3, r2
 800eed2:	bf28      	it	cs
 800eed4:	4613      	movcs	r3, r2
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eede:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d10b      	bne.n	800eefe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	8b5b      	ldrh	r3, [r3, #26]
 800eeea:	f003 0302 	and.w	r3, r3, #2
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	f000 81aa 	beq.w	800f248 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fdcb 	bl	800fa90 <tcp_send_empty_ack>
 800eefa:	4603      	mov	r3, r0
 800eefc:	e1b1      	b.n	800f262 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800eefe:	6879      	ldr	r1, [r7, #4]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3304      	adds	r3, #4
 800ef04:	461a      	mov	r2, r3
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7ff fc7c 	bl	800e804 <tcp_route>
 800ef0c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d102      	bne.n	800ef1a <tcp_output+0x96>
    return ERR_RTE;
 800ef14:	f06f 0303 	mvn.w	r3, #3
 800ef18:	e1a3      	b.n	800f262 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d003      	beq.n	800ef28 <tcp_output+0xa4>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d111      	bne.n	800ef4c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d002      	beq.n	800ef34 <tcp_output+0xb0>
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	3304      	adds	r3, #4
 800ef32:	e000      	b.n	800ef36 <tcp_output+0xb2>
 800ef34:	2300      	movs	r3, #0
 800ef36:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d102      	bne.n	800ef44 <tcp_output+0xc0>
      return ERR_RTE;
 800ef3e:	f06f 0303 	mvn.w	r3, #3
 800ef42:	e18e      	b.n	800f262 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4e:	68db      	ldr	r3, [r3, #12]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f9 ffe5 	bl	8008f22 <lwip_htonl>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef5e:	1ad3      	subs	r3, r2, r3
 800ef60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef62:	8912      	ldrh	r2, [r2, #8]
 800ef64:	4413      	add	r3, r2
 800ef66:	69ba      	ldr	r2, [r7, #24]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d227      	bcs.n	800efbc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef72:	461a      	mov	r2, r3
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d114      	bne.n	800efa4 <tcp_output+0x120>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d110      	bne.n	800efa4 <tcp_output+0x120>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d10b      	bne.n	800efa4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	8b5b      	ldrh	r3, [r3, #26]
 800efa8:	f003 0302 	and.w	r3, r3, #2
 800efac:	2b00      	cmp	r3, #0
 800efae:	f000 814d 	beq.w	800f24c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f000 fd6c 	bl	800fa90 <tcp_send_empty_ack>
 800efb8:	4603      	mov	r3, r0
 800efba:	e152      	b.n	800f262 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efc8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800efca:	6a3b      	ldr	r3, [r7, #32]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 811c 	beq.w	800f20a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800efd2:	e002      	b.n	800efda <tcp_output+0x156>
 800efd4:	6a3b      	ldr	r3, [r7, #32]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	623b      	str	r3, [r7, #32]
 800efda:	6a3b      	ldr	r3, [r7, #32]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1f8      	bne.n	800efd4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800efe2:	e112      	b.n	800f20a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800efe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	899b      	ldrh	r3, [r3, #12]
 800efea:	b29b      	uxth	r3, r3
 800efec:	4618      	mov	r0, r3
 800efee:	f7f9 ff83 	bl	8008ef8 <lwip_htons>
 800eff2:	4603      	mov	r3, r0
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	f003 0304 	and.w	r3, r3, #4
 800effa:	2b00      	cmp	r3, #0
 800effc:	d006      	beq.n	800f00c <tcp_output+0x188>
 800effe:	4b43      	ldr	r3, [pc, #268]	; (800f10c <tcp_output+0x288>)
 800f000:	f240 5236 	movw	r2, #1334	; 0x536
 800f004:	4946      	ldr	r1, [pc, #280]	; (800f120 <tcp_output+0x29c>)
 800f006:	4843      	ldr	r0, [pc, #268]	; (800f114 <tcp_output+0x290>)
 800f008:	f004 fd4e 	bl	8013aa8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f010:	2b00      	cmp	r3, #0
 800f012:	d01f      	beq.n	800f054 <tcp_output+0x1d0>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	8b5b      	ldrh	r3, [r3, #26]
 800f018:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d119      	bne.n	800f054 <tcp_output+0x1d0>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f024:	2b00      	cmp	r3, #0
 800f026:	d00b      	beq.n	800f040 <tcp_output+0x1bc>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d110      	bne.n	800f054 <tcp_output+0x1d0>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f036:	891a      	ldrh	r2, [r3, #8]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d209      	bcs.n	800f054 <tcp_output+0x1d0>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f046:	2b00      	cmp	r3, #0
 800f048:	d004      	beq.n	800f054 <tcp_output+0x1d0>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f050:	2b08      	cmp	r3, #8
 800f052:	d901      	bls.n	800f058 <tcp_output+0x1d4>
 800f054:	2301      	movs	r3, #1
 800f056:	e000      	b.n	800f05a <tcp_output+0x1d6>
 800f058:	2300      	movs	r3, #0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d106      	bne.n	800f06c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	8b5b      	ldrh	r3, [r3, #26]
 800f062:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f066:	2b00      	cmp	r3, #0
 800f068:	f000 80e4 	beq.w	800f234 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	7d1b      	ldrb	r3, [r3, #20]
 800f070:	2b02      	cmp	r3, #2
 800f072:	d00d      	beq.n	800f090 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	899b      	ldrh	r3, [r3, #12]
 800f07a:	b29c      	uxth	r4, r3
 800f07c:	2010      	movs	r0, #16
 800f07e:	f7f9 ff3b 	bl	8008ef8 <lwip_htons>
 800f082:	4603      	mov	r3, r0
 800f084:	461a      	mov	r2, r3
 800f086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	4322      	orrs	r2, r4
 800f08c:	b292      	uxth	r2, r2
 800f08e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f090:	697a      	ldr	r2, [r7, #20]
 800f092:	6879      	ldr	r1, [r7, #4]
 800f094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f096:	f000 f909 	bl	800f2ac <tcp_output_segment>
 800f09a:	4603      	mov	r3, r0
 800f09c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d009      	beq.n	800f0ba <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8b5b      	ldrh	r3, [r3, #26]
 800f0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	835a      	strh	r2, [r3, #26]
      return err;
 800f0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0b8:	e0d3      	b.n	800f262 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7d1b      	ldrb	r3, [r3, #20]
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d006      	beq.n	800f0d8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8b5b      	ldrh	r3, [r3, #26]
 800f0ce:	f023 0303 	bic.w	r3, r3, #3
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7f9 ff1f 	bl	8008f22 <lwip_htonl>
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e8:	891b      	ldrh	r3, [r3, #8]
 800f0ea:	461d      	mov	r5, r3
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	899b      	ldrh	r3, [r3, #12]
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f9 feff 	bl	8008ef8 <lwip_htons>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	f003 0303 	and.w	r3, r3, #3
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00e      	beq.n	800f124 <tcp_output+0x2a0>
 800f106:	2301      	movs	r3, #1
 800f108:	e00d      	b.n	800f126 <tcp_output+0x2a2>
 800f10a:	bf00      	nop
 800f10c:	08018868 	.word	0x08018868
 800f110:	08018dac 	.word	0x08018dac
 800f114:	080188bc 	.word	0x080188bc
 800f118:	08018dc4 	.word	0x08018dc4
 800f11c:	200090f8 	.word	0x200090f8
 800f120:	08018dec 	.word	0x08018dec
 800f124:	2300      	movs	r3, #0
 800f126:	442b      	add	r3, r5
 800f128:	4423      	add	r3, r4
 800f12a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	1ad3      	subs	r3, r2, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	da02      	bge.n	800f13e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	68ba      	ldr	r2, [r7, #8]
 800f13c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f140:	891b      	ldrh	r3, [r3, #8]
 800f142:	461c      	mov	r4, r3
 800f144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	899b      	ldrh	r3, [r3, #12]
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7f9 fed3 	bl	8008ef8 <lwip_htons>
 800f152:	4603      	mov	r3, r0
 800f154:	b2db      	uxtb	r3, r3
 800f156:	f003 0303 	and.w	r3, r3, #3
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d001      	beq.n	800f162 <tcp_output+0x2de>
 800f15e:	2301      	movs	r3, #1
 800f160:	e000      	b.n	800f164 <tcp_output+0x2e0>
 800f162:	2300      	movs	r3, #0
 800f164:	4423      	add	r3, r4
 800f166:	2b00      	cmp	r3, #0
 800f168:	d049      	beq.n	800f1fe <tcp_output+0x37a>
      seg->next = NULL;
 800f16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16c:	2200      	movs	r2, #0
 800f16e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f174:	2b00      	cmp	r3, #0
 800f176:	d105      	bne.n	800f184 <tcp_output+0x300>
        pcb->unacked = seg;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f17c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f180:	623b      	str	r3, [r7, #32]
 800f182:	e03f      	b.n	800f204 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7f9 fec9 	bl	8008f22 <lwip_htonl>
 800f190:	4604      	mov	r4, r0
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	4618      	mov	r0, r3
 800f19a:	f7f9 fec2 	bl	8008f22 <lwip_htonl>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	1ae3      	subs	r3, r4, r3
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	da24      	bge.n	800f1f0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	3370      	adds	r3, #112	; 0x70
 800f1aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1ac:	e002      	b.n	800f1b4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d011      	beq.n	800f1e0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7f9 feac 	bl	8008f22 <lwip_htonl>
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f9 fea5 	bl	8008f22 <lwip_htonl>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	dbe6      	blt.n	800f1ae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ec:	601a      	str	r2, [r3, #0]
 800f1ee:	e009      	b.n	800f204 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f1f0:	6a3b      	ldr	r3, [r7, #32]
 800f1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f1f6:	6a3b      	ldr	r3, [r7, #32]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	623b      	str	r3, [r7, #32]
 800f1fc:	e002      	b.n	800f204 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f1fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f200:	f7fc fc43 	bl	800ba8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f208:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d012      	beq.n	800f236 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	4618      	mov	r0, r3
 800f218:	f7f9 fe83 	bl	8008f22 <lwip_htonl>
 800f21c:	4602      	mov	r2, r0
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f226:	8912      	ldrh	r2, [r2, #8]
 800f228:	4413      	add	r3, r2
  while (seg != NULL &&
 800f22a:	69ba      	ldr	r2, [r7, #24]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	f4bf aed9 	bcs.w	800efe4 <tcp_output+0x160>
 800f232:	e000      	b.n	800f236 <tcp_output+0x3b2>
      break;
 800f234:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d108      	bne.n	800f250 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f246:	e004      	b.n	800f252 <tcp_output+0x3ce>
    goto output_done;
 800f248:	bf00      	nop
 800f24a:	e002      	b.n	800f252 <tcp_output+0x3ce>
    goto output_done;
 800f24c:	bf00      	nop
 800f24e:	e000      	b.n	800f252 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f250:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	8b5b      	ldrh	r3, [r3, #26]
 800f256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f25a:	b29a      	uxth	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f260:	2300      	movs	r3, #0
}
 800f262:	4618      	mov	r0, r3
 800f264:	3728      	adds	r7, #40	; 0x28
 800f266:	46bd      	mov	sp, r7
 800f268:	bdb0      	pop	{r4, r5, r7, pc}
 800f26a:	bf00      	nop

0800f26c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d106      	bne.n	800f288 <tcp_output_segment_busy+0x1c>
 800f27a:	4b09      	ldr	r3, [pc, #36]	; (800f2a0 <tcp_output_segment_busy+0x34>)
 800f27c:	f240 529a 	movw	r2, #1434	; 0x59a
 800f280:	4908      	ldr	r1, [pc, #32]	; (800f2a4 <tcp_output_segment_busy+0x38>)
 800f282:	4809      	ldr	r0, [pc, #36]	; (800f2a8 <tcp_output_segment_busy+0x3c>)
 800f284:	f004 fc10 	bl	8013aa8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	7b9b      	ldrb	r3, [r3, #14]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d001      	beq.n	800f296 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f292:	2301      	movs	r3, #1
 800f294:	e000      	b.n	800f298 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f296:	2300      	movs	r3, #0
}
 800f298:	4618      	mov	r0, r3
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	08018868 	.word	0x08018868
 800f2a4:	08018e04 	.word	0x08018e04
 800f2a8:	080188bc 	.word	0x080188bc

0800f2ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f2ac:	b5b0      	push	{r4, r5, r7, lr}
 800f2ae:	b08c      	sub	sp, #48	; 0x30
 800f2b0:	af04      	add	r7, sp, #16
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d106      	bne.n	800f2cc <tcp_output_segment+0x20>
 800f2be:	4b63      	ldr	r3, [pc, #396]	; (800f44c <tcp_output_segment+0x1a0>)
 800f2c0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f2c4:	4962      	ldr	r1, [pc, #392]	; (800f450 <tcp_output_segment+0x1a4>)
 800f2c6:	4863      	ldr	r0, [pc, #396]	; (800f454 <tcp_output_segment+0x1a8>)
 800f2c8:	f004 fbee 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d106      	bne.n	800f2e0 <tcp_output_segment+0x34>
 800f2d2:	4b5e      	ldr	r3, [pc, #376]	; (800f44c <tcp_output_segment+0x1a0>)
 800f2d4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f2d8:	495f      	ldr	r1, [pc, #380]	; (800f458 <tcp_output_segment+0x1ac>)
 800f2da:	485e      	ldr	r0, [pc, #376]	; (800f454 <tcp_output_segment+0x1a8>)
 800f2dc:	f004 fbe4 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d106      	bne.n	800f2f4 <tcp_output_segment+0x48>
 800f2e6:	4b59      	ldr	r3, [pc, #356]	; (800f44c <tcp_output_segment+0x1a0>)
 800f2e8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f2ec:	495b      	ldr	r1, [pc, #364]	; (800f45c <tcp_output_segment+0x1b0>)
 800f2ee:	4859      	ldr	r0, [pc, #356]	; (800f454 <tcp_output_segment+0x1a8>)
 800f2f0:	f004 fbda 	bl	8013aa8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f7ff ffb9 	bl	800f26c <tcp_output_segment_busy>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d001      	beq.n	800f304 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f300:	2300      	movs	r3, #0
 800f302:	e09f      	b.n	800f444 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	68dc      	ldr	r4, [r3, #12]
 800f30c:	4610      	mov	r0, r2
 800f30e:	f7f9 fe08 	bl	8008f22 <lwip_htonl>
 800f312:	4603      	mov	r3, r0
 800f314:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	68dc      	ldr	r4, [r3, #12]
 800f31e:	4610      	mov	r0, r2
 800f320:	f7f9 fdea 	bl	8008ef8 <lwip_htons>
 800f324:	4603      	mov	r3, r0
 800f326:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f330:	441a      	add	r2, r3
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	3314      	adds	r3, #20
 800f33c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	7a9b      	ldrb	r3, [r3, #10]
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	2b00      	cmp	r3, #0
 800f348:	d015      	beq.n	800f376 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	3304      	adds	r3, #4
 800f34e:	461a      	mov	r2, r3
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f356:	f7fc fe8f 	bl	800c078 <tcp_eff_send_mss_netif>
 800f35a:	4603      	mov	r3, r0
 800f35c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f35e:	8b7b      	ldrh	r3, [r7, #26]
 800f360:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f364:	4618      	mov	r0, r3
 800f366:	f7f9 fddc 	bl	8008f22 <lwip_htonl>
 800f36a:	4602      	mov	r2, r0
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	3304      	adds	r3, #4
 800f374:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	da02      	bge.n	800f386 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	2200      	movs	r2, #0
 800f384:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10c      	bne.n	800f3a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f38e:	4b34      	ldr	r3, [pc, #208]	; (800f460 <tcp_output_segment+0x1b4>)
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	685b      	ldr	r3, [r3, #4]
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f9 fdc0 	bl	8008f22 <lwip_htonl>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	68da      	ldr	r2, [r3, #12]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	8959      	ldrh	r1, [r3, #10]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	8b3a      	ldrh	r2, [r7, #24]
 800f3c2:	1a8a      	subs	r2, r1, r2
 800f3c4:	b292      	uxth	r2, r2
 800f3c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	8919      	ldrh	r1, [r3, #8]
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	8b3a      	ldrh	r2, [r7, #24]
 800f3d4:	1a8a      	subs	r2, r1, r2
 800f3d6:	b292      	uxth	r2, r2
 800f3d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	68d2      	ldr	r2, [r2, #12]
 800f3e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	741a      	strb	r2, [r3, #16]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	f103 0214 	add.w	r2, r3, #20
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	7a9b      	ldrb	r3, [r3, #10]
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	f003 0304 	and.w	r3, r3, #4
 800f402:	4413      	add	r3, r2
 800f404:	69fa      	ldr	r2, [r7, #28]
 800f406:	429a      	cmp	r2, r3
 800f408:	d006      	beq.n	800f418 <tcp_output_segment+0x16c>
 800f40a:	4b10      	ldr	r3, [pc, #64]	; (800f44c <tcp_output_segment+0x1a0>)
 800f40c:	f240 621c 	movw	r2, #1564	; 0x61c
 800f410:	4914      	ldr	r1, [pc, #80]	; (800f464 <tcp_output_segment+0x1b8>)
 800f412:	4810      	ldr	r0, [pc, #64]	; (800f454 <tcp_output_segment+0x1a8>)
 800f414:	f004 fb48 	bl	8013aa8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6858      	ldr	r0, [r3, #4]
 800f41c:	68b9      	ldr	r1, [r7, #8]
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	1d1c      	adds	r4, r3, #4
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	7add      	ldrb	r5, [r3, #11]
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	7a9b      	ldrb	r3, [r3, #10]
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	9202      	str	r2, [sp, #8]
 800f42e:	2206      	movs	r2, #6
 800f430:	9201      	str	r2, [sp, #4]
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	462b      	mov	r3, r5
 800f436:	4622      	mov	r2, r4
 800f438:	f002 fd84 	bl	8011f44 <ip4_output_if>
 800f43c:	4603      	mov	r3, r0
 800f43e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f440:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3720      	adds	r7, #32
 800f448:	46bd      	mov	sp, r7
 800f44a:	bdb0      	pop	{r4, r5, r7, pc}
 800f44c:	08018868 	.word	0x08018868
 800f450:	08018e2c 	.word	0x08018e2c
 800f454:	080188bc 	.word	0x080188bc
 800f458:	08018e4c 	.word	0x08018e4c
 800f45c:	08018e6c 	.word	0x08018e6c
 800f460:	200090e8 	.word	0x200090e8
 800f464:	08018e90 	.word	0x08018e90

0800f468 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f468:	b5b0      	push	{r4, r5, r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <tcp_rexmit_rto_prepare+0x1c>
 800f476:	4b31      	ldr	r3, [pc, #196]	; (800f53c <tcp_rexmit_rto_prepare+0xd4>)
 800f478:	f240 6263 	movw	r2, #1635	; 0x663
 800f47c:	4930      	ldr	r1, [pc, #192]	; (800f540 <tcp_rexmit_rto_prepare+0xd8>)
 800f47e:	4831      	ldr	r0, [pc, #196]	; (800f544 <tcp_rexmit_rto_prepare+0xdc>)
 800f480:	f004 fb12 	bl	8013aa8 <iprintf>

  if (pcb->unacked == NULL) {
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d102      	bne.n	800f492 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f48c:	f06f 0305 	mvn.w	r3, #5
 800f490:	e050      	b.n	800f534 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f496:	60fb      	str	r3, [r7, #12]
 800f498:	e00b      	b.n	800f4b2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f7ff fee6 	bl	800f26c <tcp_output_segment_busy>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d002      	beq.n	800f4ac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f4a6:	f06f 0305 	mvn.w	r3, #5
 800f4aa:	e043      	b.n	800f534 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1ef      	bne.n	800f49a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f7ff fed6 	bl	800f26c <tcp_output_segment_busy>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d002      	beq.n	800f4cc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f4c6:	f06f 0305 	mvn.w	r3, #5
 800f4ca:	e033      	b.n	800f534 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8b5b      	ldrh	r3, [r3, #26]
 800f4e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7f9 fd13 	bl	8008f22 <lwip_htonl>
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	891b      	ldrh	r3, [r3, #8]
 800f502:	461d      	mov	r5, r3
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	899b      	ldrh	r3, [r3, #12]
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7f9 fcf3 	bl	8008ef8 <lwip_htons>
 800f512:	4603      	mov	r3, r0
 800f514:	b2db      	uxtb	r3, r3
 800f516:	f003 0303 	and.w	r3, r3, #3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <tcp_rexmit_rto_prepare+0xba>
 800f51e:	2301      	movs	r3, #1
 800f520:	e000      	b.n	800f524 <tcp_rexmit_rto_prepare+0xbc>
 800f522:	2300      	movs	r3, #0
 800f524:	442b      	add	r3, r5
 800f526:	18e2      	adds	r2, r4, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3710      	adds	r7, #16
 800f538:	46bd      	mov	sp, r7
 800f53a:	bdb0      	pop	{r4, r5, r7, pc}
 800f53c:	08018868 	.word	0x08018868
 800f540:	08018ea4 	.word	0x08018ea4
 800f544:	080188bc 	.word	0x080188bc

0800f548 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d106      	bne.n	800f564 <tcp_rexmit_rto_commit+0x1c>
 800f556:	4b0d      	ldr	r3, [pc, #52]	; (800f58c <tcp_rexmit_rto_commit+0x44>)
 800f558:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f55c:	490c      	ldr	r1, [pc, #48]	; (800f590 <tcp_rexmit_rto_commit+0x48>)
 800f55e:	480d      	ldr	r0, [pc, #52]	; (800f594 <tcp_rexmit_rto_commit+0x4c>)
 800f560:	f004 faa2 	bl	8013aa8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f56a:	2bff      	cmp	r3, #255	; 0xff
 800f56c:	d007      	beq.n	800f57e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f574:	3301      	adds	r3, #1
 800f576:	b2da      	uxtb	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f7ff fc80 	bl	800ee84 <tcp_output>
}
 800f584:	bf00      	nop
 800f586:	3708      	adds	r7, #8
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}
 800f58c:	08018868 	.word	0x08018868
 800f590:	08018ec8 	.word	0x08018ec8
 800f594:	080188bc 	.word	0x080188bc

0800f598 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d106      	bne.n	800f5b4 <tcp_rexmit_rto+0x1c>
 800f5a6:	4b0a      	ldr	r3, [pc, #40]	; (800f5d0 <tcp_rexmit_rto+0x38>)
 800f5a8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f5ac:	4909      	ldr	r1, [pc, #36]	; (800f5d4 <tcp_rexmit_rto+0x3c>)
 800f5ae:	480a      	ldr	r0, [pc, #40]	; (800f5d8 <tcp_rexmit_rto+0x40>)
 800f5b0:	f004 fa7a 	bl	8013aa8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7ff ff57 	bl	800f468 <tcp_rexmit_rto_prepare>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d102      	bne.n	800f5c6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff ffc1 	bl	800f548 <tcp_rexmit_rto_commit>
  }
}
 800f5c6:	bf00      	nop
 800f5c8:	3708      	adds	r7, #8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	08018868 	.word	0x08018868
 800f5d4:	08018eec 	.word	0x08018eec
 800f5d8:	080188bc 	.word	0x080188bc

0800f5dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f5dc:	b590      	push	{r4, r7, lr}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d106      	bne.n	800f5f8 <tcp_rexmit+0x1c>
 800f5ea:	4b2f      	ldr	r3, [pc, #188]	; (800f6a8 <tcp_rexmit+0xcc>)
 800f5ec:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f5f0:	492e      	ldr	r1, [pc, #184]	; (800f6ac <tcp_rexmit+0xd0>)
 800f5f2:	482f      	ldr	r0, [pc, #188]	; (800f6b0 <tcp_rexmit+0xd4>)
 800f5f4:	f004 fa58 	bl	8013aa8 <iprintf>

  if (pcb->unacked == NULL) {
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d102      	bne.n	800f606 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f600:	f06f 0305 	mvn.w	r3, #5
 800f604:	e04c      	b.n	800f6a0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f60a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f60c:	68b8      	ldr	r0, [r7, #8]
 800f60e:	f7ff fe2d 	bl	800f26c <tcp_output_segment_busy>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d002      	beq.n	800f61e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f618:	f06f 0305 	mvn.w	r3, #5
 800f61c:	e040      	b.n	800f6a0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	336c      	adds	r3, #108	; 0x6c
 800f62a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f62c:	e002      	b.n	800f634 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d011      	beq.n	800f660 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	4618      	mov	r0, r3
 800f646:	f7f9 fc6c 	bl	8008f22 <lwip_htonl>
 800f64a:	4604      	mov	r4, r0
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	4618      	mov	r0, r3
 800f654:	f7f9 fc65 	bl	8008f22 <lwip_htonl>
 800f658:	4603      	mov	r3, r0
 800f65a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	dbe6      	blt.n	800f62e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	68ba      	ldr	r2, [r7, #8]
 800f66c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d103      	bne.n	800f67e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2200      	movs	r2, #0
 800f67a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f684:	2bff      	cmp	r3, #255	; 0xff
 800f686:	d007      	beq.n	800f698 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f68e:	3301      	adds	r3, #1
 800f690:	b2da      	uxtb	r2, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f69e:	2300      	movs	r3, #0
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3714      	adds	r7, #20
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd90      	pop	{r4, r7, pc}
 800f6a8:	08018868 	.word	0x08018868
 800f6ac:	08018f08 	.word	0x08018f08
 800f6b0:	080188bc 	.word	0x080188bc

0800f6b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d106      	bne.n	800f6d0 <tcp_rexmit_fast+0x1c>
 800f6c2:	4b2a      	ldr	r3, [pc, #168]	; (800f76c <tcp_rexmit_fast+0xb8>)
 800f6c4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f6c8:	4929      	ldr	r1, [pc, #164]	; (800f770 <tcp_rexmit_fast+0xbc>)
 800f6ca:	482a      	ldr	r0, [pc, #168]	; (800f774 <tcp_rexmit_fast+0xc0>)
 800f6cc:	f004 f9ec 	bl	8013aa8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d044      	beq.n	800f762 <tcp_rexmit_fast+0xae>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	8b5b      	ldrh	r3, [r3, #26]
 800f6dc:	f003 0304 	and.w	r3, r3, #4
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d13e      	bne.n	800f762 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7ff ff79 	bl	800f5dc <tcp_rexmit>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d138      	bne.n	800f762 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	bf28      	it	cs
 800f700:	4613      	movcs	r3, r2
 800f702:	b29b      	uxth	r3, r3
 800f704:	0fda      	lsrs	r2, r3, #31
 800f706:	4413      	add	r3, r2
 800f708:	105b      	asrs	r3, r3, #1
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f718:	461a      	mov	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	429a      	cmp	r2, r3
 800f722:	d206      	bcs.n	800f732 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f728:	005b      	lsls	r3, r3, #1
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f73c:	4619      	mov	r1, r3
 800f73e:	0049      	lsls	r1, r1, #1
 800f740:	440b      	add	r3, r1
 800f742:	b29b      	uxth	r3, r3
 800f744:	4413      	add	r3, r2
 800f746:	b29a      	uxth	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	8b5b      	ldrh	r3, [r3, #26]
 800f752:	f043 0304 	orr.w	r3, r3, #4
 800f756:	b29a      	uxth	r2, r3
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f762:	bf00      	nop
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	08018868 	.word	0x08018868
 800f770:	08018f20 	.word	0x08018f20
 800f774:	080188bc 	.word	0x080188bc

0800f778 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	607b      	str	r3, [r7, #4]
 800f782:	460b      	mov	r3, r1
 800f784:	817b      	strh	r3, [r7, #10]
 800f786:	4613      	mov	r3, r2
 800f788:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f78a:	897a      	ldrh	r2, [r7, #10]
 800f78c:	893b      	ldrh	r3, [r7, #8]
 800f78e:	4413      	add	r3, r2
 800f790:	b29b      	uxth	r3, r3
 800f792:	3314      	adds	r3, #20
 800f794:	b29b      	uxth	r3, r3
 800f796:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f79a:	4619      	mov	r1, r3
 800f79c:	2022      	movs	r0, #34	; 0x22
 800f79e:	f7fa fb7b 	bl	8009e98 <pbuf_alloc>
 800f7a2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d04d      	beq.n	800f846 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f7aa:	897b      	ldrh	r3, [r7, #10]
 800f7ac:	3313      	adds	r3, #19
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	8952      	ldrh	r2, [r2, #10]
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	db06      	blt.n	800f7c4 <tcp_output_alloc_header_common+0x4c>
 800f7b6:	4b26      	ldr	r3, [pc, #152]	; (800f850 <tcp_output_alloc_header_common+0xd8>)
 800f7b8:	f240 7223 	movw	r2, #1827	; 0x723
 800f7bc:	4925      	ldr	r1, [pc, #148]	; (800f854 <tcp_output_alloc_header_common+0xdc>)
 800f7be:	4826      	ldr	r0, [pc, #152]	; (800f858 <tcp_output_alloc_header_common+0xe0>)
 800f7c0:	f004 f972 	bl	8013aa8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f7ca:	8c3b      	ldrh	r3, [r7, #32]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7f9 fb93 	bl	8008ef8 <lwip_htons>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f7da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7f9 fb8b 	bl	8008ef8 <lwip_htons>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f7f9 fb96 	bl	8008f22 <lwip_htonl>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f7fc:	897b      	ldrh	r3, [r7, #10]
 800f7fe:	089b      	lsrs	r3, r3, #2
 800f800:	b29b      	uxth	r3, r3
 800f802:	3305      	adds	r3, #5
 800f804:	b29b      	uxth	r3, r3
 800f806:	031b      	lsls	r3, r3, #12
 800f808:	b29a      	uxth	r2, r3
 800f80a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f80e:	b29b      	uxth	r3, r3
 800f810:	4313      	orrs	r3, r2
 800f812:	b29b      	uxth	r3, r3
 800f814:	4618      	mov	r0, r3
 800f816:	f7f9 fb6f 	bl	8008ef8 <lwip_htons>
 800f81a:	4603      	mov	r3, r0
 800f81c:	461a      	mov	r2, r3
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f822:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f824:	4618      	mov	r0, r3
 800f826:	f7f9 fb67 	bl	8008ef8 <lwip_htons>
 800f82a:	4603      	mov	r3, r0
 800f82c:	461a      	mov	r2, r3
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	2200      	movs	r2, #0
 800f836:	741a      	strb	r2, [r3, #16]
 800f838:	2200      	movs	r2, #0
 800f83a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	2200      	movs	r2, #0
 800f840:	749a      	strb	r2, [r3, #18]
 800f842:	2200      	movs	r2, #0
 800f844:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f846:	697b      	ldr	r3, [r7, #20]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3718      	adds	r7, #24
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	08018868 	.word	0x08018868
 800f854:	08018f40 	.word	0x08018f40
 800f858:	080188bc 	.word	0x080188bc

0800f85c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f85c:	b5b0      	push	{r4, r5, r7, lr}
 800f85e:	b08a      	sub	sp, #40	; 0x28
 800f860:	af04      	add	r7, sp, #16
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	607b      	str	r3, [r7, #4]
 800f866:	460b      	mov	r3, r1
 800f868:	817b      	strh	r3, [r7, #10]
 800f86a:	4613      	mov	r3, r2
 800f86c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d106      	bne.n	800f882 <tcp_output_alloc_header+0x26>
 800f874:	4b15      	ldr	r3, [pc, #84]	; (800f8cc <tcp_output_alloc_header+0x70>)
 800f876:	f240 7242 	movw	r2, #1858	; 0x742
 800f87a:	4915      	ldr	r1, [pc, #84]	; (800f8d0 <tcp_output_alloc_header+0x74>)
 800f87c:	4815      	ldr	r0, [pc, #84]	; (800f8d4 <tcp_output_alloc_header+0x78>)
 800f87e:	f004 f913 	bl	8013aa8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	8adb      	ldrh	r3, [r3, #22]
 800f88a:	68fa      	ldr	r2, [r7, #12]
 800f88c:	8b12      	ldrh	r2, [r2, #24]
 800f88e:	68f9      	ldr	r1, [r7, #12]
 800f890:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f892:	893d      	ldrh	r5, [r7, #8]
 800f894:	897c      	ldrh	r4, [r7, #10]
 800f896:	9103      	str	r1, [sp, #12]
 800f898:	2110      	movs	r1, #16
 800f89a:	9102      	str	r1, [sp, #8]
 800f89c:	9201      	str	r2, [sp, #4]
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	462a      	mov	r2, r5
 800f8a4:	4621      	mov	r1, r4
 800f8a6:	f7ff ff67 	bl	800f778 <tcp_output_alloc_header_common>
 800f8aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d006      	beq.n	800f8c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b6:	68fa      	ldr	r2, [r7, #12]
 800f8b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f8ba:	441a      	add	r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f8c0:	697b      	ldr	r3, [r7, #20]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3718      	adds	r7, #24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	08018868 	.word	0x08018868
 800f8d0:	08018f70 	.word	0x08018f70
 800f8d4:	080188bc 	.word	0x080188bc

0800f8d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	71fb      	strb	r3, [r7, #7]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d106      	bne.n	800f906 <tcp_output_fill_options+0x2e>
 800f8f8:	4b13      	ldr	r3, [pc, #76]	; (800f948 <tcp_output_fill_options+0x70>)
 800f8fa:	f240 7256 	movw	r2, #1878	; 0x756
 800f8fe:	4913      	ldr	r1, [pc, #76]	; (800f94c <tcp_output_fill_options+0x74>)
 800f900:	4813      	ldr	r0, [pc, #76]	; (800f950 <tcp_output_fill_options+0x78>)
 800f902:	f004 f8d1 	bl	8013aa8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	3314      	adds	r3, #20
 800f910:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f912:	69bb      	ldr	r3, [r7, #24]
 800f914:	f103 0214 	add.w	r2, r3, #20
 800f918:	8bfb      	ldrh	r3, [r7, #30]
 800f91a:	009b      	lsls	r3, r3, #2
 800f91c:	4619      	mov	r1, r3
 800f91e:	79fb      	ldrb	r3, [r7, #7]
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	f003 0304 	and.w	r3, r3, #4
 800f926:	440b      	add	r3, r1
 800f928:	4413      	add	r3, r2
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d006      	beq.n	800f93e <tcp_output_fill_options+0x66>
 800f930:	4b05      	ldr	r3, [pc, #20]	; (800f948 <tcp_output_fill_options+0x70>)
 800f932:	f240 7275 	movw	r2, #1909	; 0x775
 800f936:	4907      	ldr	r1, [pc, #28]	; (800f954 <tcp_output_fill_options+0x7c>)
 800f938:	4805      	ldr	r0, [pc, #20]	; (800f950 <tcp_output_fill_options+0x78>)
 800f93a:	f004 f8b5 	bl	8013aa8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f93e:	bf00      	nop
 800f940:	3720      	adds	r7, #32
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	08018868 	.word	0x08018868
 800f94c:	08018f98 	.word	0x08018f98
 800f950:	080188bc 	.word	0x080188bc
 800f954:	08018e90 	.word	0x08018e90

0800f958 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b08a      	sub	sp, #40	; 0x28
 800f95c:	af04      	add	r7, sp, #16
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
 800f964:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d106      	bne.n	800f97a <tcp_output_control_segment+0x22>
 800f96c:	4b1c      	ldr	r3, [pc, #112]	; (800f9e0 <tcp_output_control_segment+0x88>)
 800f96e:	f240 7287 	movw	r2, #1927	; 0x787
 800f972:	491c      	ldr	r1, [pc, #112]	; (800f9e4 <tcp_output_control_segment+0x8c>)
 800f974:	481c      	ldr	r0, [pc, #112]	; (800f9e8 <tcp_output_control_segment+0x90>)
 800f976:	f004 f897 	bl	8013aa8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f97a:	683a      	ldr	r2, [r7, #0]
 800f97c:	6879      	ldr	r1, [r7, #4]
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f7fe ff40 	bl	800e804 <tcp_route>
 800f984:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d102      	bne.n	800f992 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f98c:	23fc      	movs	r3, #252	; 0xfc
 800f98e:	75fb      	strb	r3, [r7, #23]
 800f990:	e01c      	b.n	800f9cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d006      	beq.n	800f9a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	7adb      	ldrb	r3, [r3, #11]
 800f99c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	7a9b      	ldrb	r3, [r3, #10]
 800f9a2:	757b      	strb	r3, [r7, #21]
 800f9a4:	e003      	b.n	800f9ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f9a6:	23ff      	movs	r3, #255	; 0xff
 800f9a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f9ae:	7dba      	ldrb	r2, [r7, #22]
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	9302      	str	r3, [sp, #8]
 800f9b4:	2306      	movs	r3, #6
 800f9b6:	9301      	str	r3, [sp, #4]
 800f9b8:	7d7b      	ldrb	r3, [r7, #21]
 800f9ba:	9300      	str	r3, [sp, #0]
 800f9bc:	4613      	mov	r3, r2
 800f9be:	683a      	ldr	r2, [r7, #0]
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	68b8      	ldr	r0, [r7, #8]
 800f9c4:	f002 fabe 	bl	8011f44 <ip4_output_if>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f9cc:	68b8      	ldr	r0, [r7, #8]
 800f9ce:	f7fa fd47 	bl	800a460 <pbuf_free>
  return err;
 800f9d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3718      	adds	r7, #24
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	08018868 	.word	0x08018868
 800f9e4:	08018fc0 	.word	0x08018fc0
 800f9e8:	080188bc 	.word	0x080188bc

0800f9ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f9ec:	b590      	push	{r4, r7, lr}
 800f9ee:	b08b      	sub	sp, #44	; 0x2c
 800f9f0:	af04      	add	r7, sp, #16
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
 800f9f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d106      	bne.n	800fa0e <tcp_rst+0x22>
 800fa00:	4b1f      	ldr	r3, [pc, #124]	; (800fa80 <tcp_rst+0x94>)
 800fa02:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fa06:	491f      	ldr	r1, [pc, #124]	; (800fa84 <tcp_rst+0x98>)
 800fa08:	481f      	ldr	r0, [pc, #124]	; (800fa88 <tcp_rst+0x9c>)
 800fa0a:	f004 f84d 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d106      	bne.n	800fa22 <tcp_rst+0x36>
 800fa14:	4b1a      	ldr	r3, [pc, #104]	; (800fa80 <tcp_rst+0x94>)
 800fa16:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fa1a:	491c      	ldr	r1, [pc, #112]	; (800fa8c <tcp_rst+0xa0>)
 800fa1c:	481a      	ldr	r0, [pc, #104]	; (800fa88 <tcp_rst+0x9c>)
 800fa1e:	f004 f843 	bl	8013aa8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa22:	2300      	movs	r3, #0
 800fa24:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fa26:	f246 0308 	movw	r3, #24584	; 0x6008
 800fa2a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fa2c:	7dfb      	ldrb	r3, [r7, #23]
 800fa2e:	b29c      	uxth	r4, r3
 800fa30:	68b8      	ldr	r0, [r7, #8]
 800fa32:	f7f9 fa76 	bl	8008f22 <lwip_htonl>
 800fa36:	4602      	mov	r2, r0
 800fa38:	8abb      	ldrh	r3, [r7, #20]
 800fa3a:	9303      	str	r3, [sp, #12]
 800fa3c:	2314      	movs	r3, #20
 800fa3e:	9302      	str	r3, [sp, #8]
 800fa40:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	4613      	mov	r3, r2
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	4621      	mov	r1, r4
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7ff fe92 	bl	800f778 <tcp_output_alloc_header_common>
 800fa54:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d00c      	beq.n	800fa76 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fa5c:	7dfb      	ldrb	r3, [r7, #23]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	6939      	ldr	r1, [r7, #16]
 800fa62:	68f8      	ldr	r0, [r7, #12]
 800fa64:	f7ff ff38 	bl	800f8d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	683a      	ldr	r2, [r7, #0]
 800fa6c:	6939      	ldr	r1, [r7, #16]
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	f7ff ff72 	bl	800f958 <tcp_output_control_segment>
 800fa74:	e000      	b.n	800fa78 <tcp_rst+0x8c>
    return;
 800fa76:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800fa78:	371c      	adds	r7, #28
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd90      	pop	{r4, r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	08018868 	.word	0x08018868
 800fa84:	08018fec 	.word	0x08018fec
 800fa88:	080188bc 	.word	0x080188bc
 800fa8c:	08019008 	.word	0x08019008

0800fa90 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fa90:	b590      	push	{r4, r7, lr}
 800fa92:	b087      	sub	sp, #28
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d106      	bne.n	800fab4 <tcp_send_empty_ack+0x24>
 800faa6:	4b28      	ldr	r3, [pc, #160]	; (800fb48 <tcp_send_empty_ack+0xb8>)
 800faa8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800faac:	4927      	ldr	r1, [pc, #156]	; (800fb4c <tcp_send_empty_ack+0xbc>)
 800faae:	4828      	ldr	r0, [pc, #160]	; (800fb50 <tcp_send_empty_ack+0xc0>)
 800fab0:	f003 fffa 	bl	8013aa8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fab4:	7dfb      	ldrb	r3, [r7, #23]
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	b2db      	uxtb	r3, r3
 800faba:	f003 0304 	and.w	r3, r3, #4
 800fabe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800fac0:	7d7b      	ldrb	r3, [r7, #21]
 800fac2:	b29c      	uxth	r4, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fac8:	4618      	mov	r0, r3
 800faca:	f7f9 fa2a 	bl	8008f22 <lwip_htonl>
 800face:	4603      	mov	r3, r0
 800fad0:	2200      	movs	r2, #0
 800fad2:	4621      	mov	r1, r4
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff fec1 	bl	800f85c <tcp_output_alloc_header>
 800fada:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d109      	bne.n	800faf6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	8b5b      	ldrh	r3, [r3, #26]
 800fae6:	f043 0303 	orr.w	r3, r3, #3
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800faf0:	f06f 0301 	mvn.w	r3, #1
 800faf4:	e023      	b.n	800fb3e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800faf6:	7dbb      	ldrb	r3, [r7, #22]
 800faf8:	7dfa      	ldrb	r2, [r7, #23]
 800fafa:	6939      	ldr	r1, [r7, #16]
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f7ff feeb 	bl	800f8d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb02:	687a      	ldr	r2, [r7, #4]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	3304      	adds	r3, #4
 800fb08:	6939      	ldr	r1, [r7, #16]
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7ff ff24 	bl	800f958 <tcp_output_control_segment>
 800fb10:	4603      	mov	r3, r0
 800fb12:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fb14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d007      	beq.n	800fb2c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	8b5b      	ldrh	r3, [r3, #26]
 800fb20:	f043 0303 	orr.w	r3, r3, #3
 800fb24:	b29a      	uxth	r2, r3
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	835a      	strh	r2, [r3, #26]
 800fb2a:	e006      	b.n	800fb3a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	8b5b      	ldrh	r3, [r3, #26]
 800fb30:	f023 0303 	bic.w	r3, r3, #3
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fb3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	371c      	adds	r7, #28
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd90      	pop	{r4, r7, pc}
 800fb46:	bf00      	nop
 800fb48:	08018868 	.word	0x08018868
 800fb4c:	08019024 	.word	0x08019024
 800fb50:	080188bc 	.word	0x080188bc

0800fb54 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fb54:	b590      	push	{r4, r7, lr}
 800fb56:	b087      	sub	sp, #28
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d106      	bne.n	800fb74 <tcp_keepalive+0x20>
 800fb66:	4b18      	ldr	r3, [pc, #96]	; (800fbc8 <tcp_keepalive+0x74>)
 800fb68:	f640 0224 	movw	r2, #2084	; 0x824
 800fb6c:	4917      	ldr	r1, [pc, #92]	; (800fbcc <tcp_keepalive+0x78>)
 800fb6e:	4818      	ldr	r0, [pc, #96]	; (800fbd0 <tcp_keepalive+0x7c>)
 800fb70:	f003 ff9a 	bl	8013aa8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fb74:	7dfb      	ldrb	r3, [r7, #23]
 800fb76:	b29c      	uxth	r4, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7f9 f9cf 	bl	8008f22 <lwip_htonl>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2200      	movs	r2, #0
 800fb88:	4621      	mov	r1, r4
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff fe66 	bl	800f85c <tcp_output_alloc_header>
 800fb90:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d102      	bne.n	800fb9e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fb98:	f04f 33ff 	mov.w	r3, #4294967295
 800fb9c:	e010      	b.n	800fbc0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fb9e:	7dfb      	ldrb	r3, [r7, #23]
 800fba0:	2200      	movs	r2, #0
 800fba2:	6939      	ldr	r1, [r7, #16]
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7ff fe97 	bl	800f8d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3304      	adds	r3, #4
 800fbb0:	6939      	ldr	r1, [r7, #16]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7ff fed0 	bl	800f958 <tcp_output_control_segment>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fbbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	371c      	adds	r7, #28
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd90      	pop	{r4, r7, pc}
 800fbc8:	08018868 	.word	0x08018868
 800fbcc:	08019044 	.word	0x08019044
 800fbd0:	080188bc 	.word	0x080188bc

0800fbd4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fbd4:	b590      	push	{r4, r7, lr}
 800fbd6:	b08b      	sub	sp, #44	; 0x2c
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fbdc:	2300      	movs	r3, #0
 800fbde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d106      	bne.n	800fbf6 <tcp_zero_window_probe+0x22>
 800fbe8:	4b4c      	ldr	r3, [pc, #304]	; (800fd1c <tcp_zero_window_probe+0x148>)
 800fbea:	f640 024f 	movw	r2, #2127	; 0x84f
 800fbee:	494c      	ldr	r1, [pc, #304]	; (800fd20 <tcp_zero_window_probe+0x14c>)
 800fbf0:	484c      	ldr	r0, [pc, #304]	; (800fd24 <tcp_zero_window_probe+0x150>)
 800fbf2:	f003 ff59 	bl	8013aa8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbfa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fbfc:	6a3b      	ldr	r3, [r7, #32]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fc02:	2300      	movs	r3, #0
 800fc04:	e086      	b.n	800fd14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc0c:	2bff      	cmp	r3, #255	; 0xff
 800fc0e:	d007      	beq.n	800fc20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc16:	3301      	adds	r3, #1
 800fc18:	b2da      	uxtb	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	899b      	ldrh	r3, [r3, #12]
 800fc26:	b29b      	uxth	r3, r3
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7f9 f965 	bl	8008ef8 <lwip_htons>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	b2db      	uxtb	r3, r3
 800fc32:	f003 0301 	and.w	r3, r3, #1
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d005      	beq.n	800fc46 <tcp_zero_window_probe+0x72>
 800fc3a:	6a3b      	ldr	r3, [r7, #32]
 800fc3c:	891b      	ldrh	r3, [r3, #8]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d101      	bne.n	800fc46 <tcp_zero_window_probe+0x72>
 800fc42:	2301      	movs	r3, #1
 800fc44:	e000      	b.n	800fc48 <tcp_zero_window_probe+0x74>
 800fc46:	2300      	movs	r3, #0
 800fc48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fc4a:	7ffb      	ldrb	r3, [r7, #31]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	bf0c      	ite	eq
 800fc50:	2301      	moveq	r3, #1
 800fc52:	2300      	movne	r3, #0
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc5c:	b299      	uxth	r1, r3
 800fc5e:	6a3b      	ldr	r3, [r7, #32]
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	8bba      	ldrh	r2, [r7, #28]
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7ff fdf8 	bl	800f85c <tcp_output_alloc_header>
 800fc6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fc6e:	69bb      	ldr	r3, [r7, #24]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d102      	bne.n	800fc7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fc74:	f04f 33ff 	mov.w	r3, #4294967295
 800fc78:	e04c      	b.n	800fd14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fc80:	7ffb      	ldrb	r3, [r7, #31]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d011      	beq.n	800fcaa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	899b      	ldrh	r3, [r3, #12]
 800fc8a:	b29b      	uxth	r3, r3
 800fc8c:	b21b      	sxth	r3, r3
 800fc8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc92:	b21c      	sxth	r4, r3
 800fc94:	2011      	movs	r0, #17
 800fc96:	f7f9 f92f 	bl	8008ef8 <lwip_htons>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	b21b      	sxth	r3, r3
 800fc9e:	4323      	orrs	r3, r4
 800fca0:	b21b      	sxth	r3, r3
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	819a      	strh	r2, [r3, #12]
 800fca8:	e010      	b.n	800fccc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	3314      	adds	r3, #20
 800fcb0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fcb2:	6a3b      	ldr	r3, [r7, #32]
 800fcb4:	6858      	ldr	r0, [r3, #4]
 800fcb6:	6a3b      	ldr	r3, [r7, #32]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	891a      	ldrh	r2, [r3, #8]
 800fcbc:	6a3b      	ldr	r3, [r7, #32]
 800fcbe:	891b      	ldrh	r3, [r3, #8]
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	2201      	movs	r2, #1
 800fcc6:	6939      	ldr	r1, [r7, #16]
 800fcc8:	f7fa fdc4 	bl	800a854 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7f9 f925 	bl	8008f22 <lwip_htonl>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	3301      	adds	r3, #1
 800fcdc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	da02      	bge.n	800fcf0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	68fa      	ldr	r2, [r7, #12]
 800fcee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fcf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	69b9      	ldr	r1, [r7, #24]
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff fded 	bl	800f8d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	3304      	adds	r3, #4
 800fd04:	69b9      	ldr	r1, [r7, #24]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f7ff fe26 	bl	800f958 <tcp_output_control_segment>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fd10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	372c      	adds	r7, #44	; 0x2c
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd90      	pop	{r4, r7, pc}
 800fd1c:	08018868 	.word	0x08018868
 800fd20:	08019060 	.word	0x08019060
 800fd24:	080188bc 	.word	0x080188bc

0800fd28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fd30:	f7fa ff10 	bl	800ab54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fd34:	4b0a      	ldr	r3, [pc, #40]	; (800fd60 <tcpip_tcp_timer+0x38>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d103      	bne.n	800fd44 <tcpip_tcp_timer+0x1c>
 800fd3c:	4b09      	ldr	r3, [pc, #36]	; (800fd64 <tcpip_tcp_timer+0x3c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d005      	beq.n	800fd50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fd44:	2200      	movs	r2, #0
 800fd46:	4908      	ldr	r1, [pc, #32]	; (800fd68 <tcpip_tcp_timer+0x40>)
 800fd48:	20fa      	movs	r0, #250	; 0xfa
 800fd4a:	f000 f8f3 	bl	800ff34 <sys_timeout>
 800fd4e:	e003      	b.n	800fd58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fd50:	4b06      	ldr	r3, [pc, #24]	; (800fd6c <tcpip_tcp_timer+0x44>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]
  }
}
 800fd56:	bf00      	nop
 800fd58:	bf00      	nop
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	200090e4 	.word	0x200090e4
 800fd64:	200090f4 	.word	0x200090f4
 800fd68:	0800fd29 	.word	0x0800fd29
 800fd6c:	20000304 	.word	0x20000304

0800fd70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fd74:	4b0a      	ldr	r3, [pc, #40]	; (800fda0 <tcp_timer_needed+0x30>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d10f      	bne.n	800fd9c <tcp_timer_needed+0x2c>
 800fd7c:	4b09      	ldr	r3, [pc, #36]	; (800fda4 <tcp_timer_needed+0x34>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d103      	bne.n	800fd8c <tcp_timer_needed+0x1c>
 800fd84:	4b08      	ldr	r3, [pc, #32]	; (800fda8 <tcp_timer_needed+0x38>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d007      	beq.n	800fd9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fd8c:	4b04      	ldr	r3, [pc, #16]	; (800fda0 <tcp_timer_needed+0x30>)
 800fd8e:	2201      	movs	r2, #1
 800fd90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fd92:	2200      	movs	r2, #0
 800fd94:	4905      	ldr	r1, [pc, #20]	; (800fdac <tcp_timer_needed+0x3c>)
 800fd96:	20fa      	movs	r0, #250	; 0xfa
 800fd98:	f000 f8cc 	bl	800ff34 <sys_timeout>
  }
}
 800fd9c:	bf00      	nop
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	20000304 	.word	0x20000304
 800fda4:	200090e4 	.word	0x200090e4
 800fda8:	200090f4 	.word	0x200090f4
 800fdac:	0800fd29 	.word	0x0800fd29

0800fdb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fdbc:	2006      	movs	r0, #6
 800fdbe:	f7f9 fcf1 	bl	80097a4 <memp_malloc>
 800fdc2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d109      	bne.n	800fdde <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fdca:	693b      	ldr	r3, [r7, #16]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d151      	bne.n	800fe74 <sys_timeout_abs+0xc4>
 800fdd0:	4b2a      	ldr	r3, [pc, #168]	; (800fe7c <sys_timeout_abs+0xcc>)
 800fdd2:	22be      	movs	r2, #190	; 0xbe
 800fdd4:	492a      	ldr	r1, [pc, #168]	; (800fe80 <sys_timeout_abs+0xd0>)
 800fdd6:	482b      	ldr	r0, [pc, #172]	; (800fe84 <sys_timeout_abs+0xd4>)
 800fdd8:	f003 fe66 	bl	8013aa8 <iprintf>
    return;
 800fddc:	e04a      	b.n	800fe74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	2200      	movs	r2, #0
 800fde2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fdf6:	4b24      	ldr	r3, [pc, #144]	; (800fe88 <sys_timeout_abs+0xd8>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d103      	bne.n	800fe06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fdfe:	4a22      	ldr	r2, [pc, #136]	; (800fe88 <sys_timeout_abs+0xd8>)
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	6013      	str	r3, [r2, #0]
    return;
 800fe04:	e037      	b.n	800fe76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	685a      	ldr	r2, [r3, #4]
 800fe0a:	4b1f      	ldr	r3, [pc, #124]	; (800fe88 <sys_timeout_abs+0xd8>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	0fdb      	lsrs	r3, r3, #31
 800fe14:	f003 0301 	and.w	r3, r3, #1
 800fe18:	b2db      	uxtb	r3, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d007      	beq.n	800fe2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fe1e:	4b1a      	ldr	r3, [pc, #104]	; (800fe88 <sys_timeout_abs+0xd8>)
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fe26:	4a18      	ldr	r2, [pc, #96]	; (800fe88 <sys_timeout_abs+0xd8>)
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	6013      	str	r3, [r2, #0]
 800fe2c:	e023      	b.n	800fe76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fe2e:	4b16      	ldr	r3, [pc, #88]	; (800fe88 <sys_timeout_abs+0xd8>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	617b      	str	r3, [r7, #20]
 800fe34:	e01a      	b.n	800fe6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d00b      	beq.n	800fe56 <sys_timeout_abs+0xa6>
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	685a      	ldr	r2, [r3, #4]
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	1ad3      	subs	r3, r2, r3
 800fe4a:	0fdb      	lsrs	r3, r3, #31
 800fe4c:	f003 0301 	and.w	r3, r3, #1
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d007      	beq.n	800fe66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	693a      	ldr	r2, [r7, #16]
 800fe62:	601a      	str	r2, [r3, #0]
        break;
 800fe64:	e007      	b.n	800fe76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	617b      	str	r3, [r7, #20]
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1e1      	bne.n	800fe36 <sys_timeout_abs+0x86>
 800fe72:	e000      	b.n	800fe76 <sys_timeout_abs+0xc6>
    return;
 800fe74:	bf00      	nop
      }
    }
  }
}
 800fe76:	3718      	adds	r7, #24
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	08019084 	.word	0x08019084
 800fe80:	080190b8 	.word	0x080190b8
 800fe84:	080190f8 	.word	0x080190f8
 800fe88:	200002fc 	.word	0x200002fc

0800fe8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b086      	sub	sp, #24
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	4798      	blx	r3

  now = sys_now();
 800fe9e:	f7f8 ff9d 	bl	8008ddc <sys_now>
 800fea2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <lwip_cyclic_timer+0x5c>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4413      	add	r3, r2
 800feae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800feb0:	68fa      	ldr	r2, [r7, #12]
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	1ad3      	subs	r3, r2, r3
 800feb6:	0fdb      	lsrs	r3, r3, #31
 800feb8:	f003 0301 	and.w	r3, r3, #1
 800febc:	b2db      	uxtb	r3, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d009      	beq.n	800fed6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	4413      	add	r3, r2
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	4907      	ldr	r1, [pc, #28]	; (800feec <lwip_cyclic_timer+0x60>)
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff ff6e 	bl	800fdb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800fed4:	e004      	b.n	800fee0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	4904      	ldr	r1, [pc, #16]	; (800feec <lwip_cyclic_timer+0x60>)
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7ff ff68 	bl	800fdb0 <sys_timeout_abs>
}
 800fee0:	bf00      	nop
 800fee2:	3718      	adds	r7, #24
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	20000300 	.word	0x20000300
 800feec:	0800fe8d 	.word	0x0800fe8d

0800fef0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fef6:	2301      	movs	r3, #1
 800fef8:	607b      	str	r3, [r7, #4]
 800fefa:	e00e      	b.n	800ff1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800fefc:	4a0b      	ldr	r2, [pc, #44]	; (800ff2c <sys_timeouts_init+0x3c>)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	00db      	lsls	r3, r3, #3
 800ff08:	4a08      	ldr	r2, [pc, #32]	; (800ff2c <sys_timeouts_init+0x3c>)
 800ff0a:	4413      	add	r3, r2
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	4908      	ldr	r1, [pc, #32]	; (800ff30 <sys_timeouts_init+0x40>)
 800ff10:	f000 f810 	bl	800ff34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	3301      	adds	r3, #1
 800ff18:	607b      	str	r3, [r7, #4]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2b02      	cmp	r3, #2
 800ff1e:	d9ed      	bls.n	800fefc <sys_timeouts_init+0xc>
  }
}
 800ff20:	bf00      	nop
 800ff22:	bf00      	nop
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	08019c5c 	.word	0x08019c5c
 800ff30:	0800fe8d 	.word	0x0800fe8d

0800ff34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b086      	sub	sp, #24
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	60f8      	str	r0, [r7, #12]
 800ff3c:	60b9      	str	r1, [r7, #8]
 800ff3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff46:	d306      	bcc.n	800ff56 <sys_timeout+0x22>
 800ff48:	4b0a      	ldr	r3, [pc, #40]	; (800ff74 <sys_timeout+0x40>)
 800ff4a:	f240 1229 	movw	r2, #297	; 0x129
 800ff4e:	490a      	ldr	r1, [pc, #40]	; (800ff78 <sys_timeout+0x44>)
 800ff50:	480a      	ldr	r0, [pc, #40]	; (800ff7c <sys_timeout+0x48>)
 800ff52:	f003 fda9 	bl	8013aa8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ff56:	f7f8 ff41 	bl	8008ddc <sys_now>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	4413      	add	r3, r2
 800ff60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	68b9      	ldr	r1, [r7, #8]
 800ff66:	6978      	ldr	r0, [r7, #20]
 800ff68:	f7ff ff22 	bl	800fdb0 <sys_timeout_abs>
#endif
}
 800ff6c:	bf00      	nop
 800ff6e:	3718      	adds	r7, #24
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	08019084 	.word	0x08019084
 800ff78:	08019120 	.word	0x08019120
 800ff7c:	080190f8 	.word	0x080190f8

0800ff80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ff86:	f7f8 ff29 	bl	8008ddc <sys_now>
 800ff8a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ff8c:	4b1a      	ldr	r3, [pc, #104]	; (800fff8 <sys_check_timeouts+0x78>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d001      	beq.n	800ff9a <sys_check_timeouts+0x1a>
 800ff96:	f7f9 ff29 	bl	8009dec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ff9a:	4b18      	ldr	r3, [pc, #96]	; (800fffc <sys_check_timeouts+0x7c>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d022      	beq.n	800ffec <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	0fdb      	lsrs	r3, r3, #31
 800ffb0:	f003 0301 	and.w	r3, r3, #1
 800ffb4:	b2db      	uxtb	r3, r3
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d11a      	bne.n	800fff0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4a0f      	ldr	r2, [pc, #60]	; (800fffc <sys_check_timeouts+0x7c>)
 800ffc0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	4a0b      	ldr	r2, [pc, #44]	; (8010000 <sys_check_timeouts+0x80>)
 800ffd4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ffd6:	68b9      	ldr	r1, [r7, #8]
 800ffd8:	2006      	movs	r0, #6
 800ffda:	f7f9 fc2f 	bl	800983c <memp_free>
    if (handler != NULL) {
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d0d3      	beq.n	800ff8c <sys_check_timeouts+0xc>
      handler(arg);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6838      	ldr	r0, [r7, #0]
 800ffe8:	4798      	blx	r3
  do {
 800ffea:	e7cf      	b.n	800ff8c <sys_check_timeouts+0xc>
      return;
 800ffec:	bf00      	nop
 800ffee:	e000      	b.n	800fff2 <sys_check_timeouts+0x72>
      return;
 800fff0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	200090dc 	.word	0x200090dc
 800fffc:	200002fc 	.word	0x200002fc
 8010000:	20000300 	.word	0x20000300

08010004 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010008:	f003 fd66 	bl	8013ad8 <rand>
 801000c:	4603      	mov	r3, r0
 801000e:	b29b      	uxth	r3, r3
 8010010:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010014:	b29b      	uxth	r3, r3
 8010016:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801001a:	b29a      	uxth	r2, r3
 801001c:	4b01      	ldr	r3, [pc, #4]	; (8010024 <udp_init+0x20>)
 801001e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010020:	bf00      	nop
 8010022:	bd80      	pop	{r7, pc}
 8010024:	20000050 	.word	0x20000050

08010028 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801002e:	2300      	movs	r3, #0
 8010030:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010032:	4b17      	ldr	r3, [pc, #92]	; (8010090 <udp_new_port+0x68>)
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	1c5a      	adds	r2, r3, #1
 8010038:	b291      	uxth	r1, r2
 801003a:	4a15      	ldr	r2, [pc, #84]	; (8010090 <udp_new_port+0x68>)
 801003c:	8011      	strh	r1, [r2, #0]
 801003e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010042:	4293      	cmp	r3, r2
 8010044:	d103      	bne.n	801004e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010046:	4b12      	ldr	r3, [pc, #72]	; (8010090 <udp_new_port+0x68>)
 8010048:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801004c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801004e:	4b11      	ldr	r3, [pc, #68]	; (8010094 <udp_new_port+0x6c>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	603b      	str	r3, [r7, #0]
 8010054:	e011      	b.n	801007a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	8a5a      	ldrh	r2, [r3, #18]
 801005a:	4b0d      	ldr	r3, [pc, #52]	; (8010090 <udp_new_port+0x68>)
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	429a      	cmp	r2, r3
 8010060:	d108      	bne.n	8010074 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010062:	88fb      	ldrh	r3, [r7, #6]
 8010064:	3301      	adds	r3, #1
 8010066:	80fb      	strh	r3, [r7, #6]
 8010068:	88fb      	ldrh	r3, [r7, #6]
 801006a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801006e:	d3e0      	bcc.n	8010032 <udp_new_port+0xa>
        return 0;
 8010070:	2300      	movs	r3, #0
 8010072:	e007      	b.n	8010084 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	603b      	str	r3, [r7, #0]
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1ea      	bne.n	8010056 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010080:	4b03      	ldr	r3, [pc, #12]	; (8010090 <udp_new_port+0x68>)
 8010082:	881b      	ldrh	r3, [r3, #0]
}
 8010084:	4618      	mov	r0, r3
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	20000050 	.word	0x20000050
 8010094:	200090fc 	.word	0x200090fc

08010098 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	60f8      	str	r0, [r7, #12]
 80100a0:	60b9      	str	r1, [r7, #8]
 80100a2:	4613      	mov	r3, r2
 80100a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d105      	bne.n	80100b8 <udp_input_local_match+0x20>
 80100ac:	4b27      	ldr	r3, [pc, #156]	; (801014c <udp_input_local_match+0xb4>)
 80100ae:	2287      	movs	r2, #135	; 0x87
 80100b0:	4927      	ldr	r1, [pc, #156]	; (8010150 <udp_input_local_match+0xb8>)
 80100b2:	4828      	ldr	r0, [pc, #160]	; (8010154 <udp_input_local_match+0xbc>)
 80100b4:	f003 fcf8 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d105      	bne.n	80100ca <udp_input_local_match+0x32>
 80100be:	4b23      	ldr	r3, [pc, #140]	; (801014c <udp_input_local_match+0xb4>)
 80100c0:	2288      	movs	r2, #136	; 0x88
 80100c2:	4925      	ldr	r1, [pc, #148]	; (8010158 <udp_input_local_match+0xc0>)
 80100c4:	4823      	ldr	r0, [pc, #140]	; (8010154 <udp_input_local_match+0xbc>)
 80100c6:	f003 fcef 	bl	8013aa8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	7a1b      	ldrb	r3, [r3, #8]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00b      	beq.n	80100ea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	7a1a      	ldrb	r2, [r3, #8]
 80100d6:	4b21      	ldr	r3, [pc, #132]	; (801015c <udp_input_local_match+0xc4>)
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100de:	3301      	adds	r3, #1
 80100e0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d001      	beq.n	80100ea <udp_input_local_match+0x52>
    return 0;
 80100e6:	2300      	movs	r3, #0
 80100e8:	e02b      	b.n	8010142 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d018      	beq.n	8010122 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d013      	beq.n	801011e <udp_input_local_match+0x86>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00f      	beq.n	801011e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80100fe:	4b17      	ldr	r3, [pc, #92]	; (801015c <udp_input_local_match+0xc4>)
 8010100:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010106:	d00a      	beq.n	801011e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	4b13      	ldr	r3, [pc, #76]	; (801015c <udp_input_local_match+0xc4>)
 801010e:	695b      	ldr	r3, [r3, #20]
 8010110:	405a      	eors	r2, r3
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	3308      	adds	r3, #8
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801011a:	2b00      	cmp	r3, #0
 801011c:	d110      	bne.n	8010140 <udp_input_local_match+0xa8>
          return 1;
 801011e:	2301      	movs	r3, #1
 8010120:	e00f      	b.n	8010142 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d009      	beq.n	801013c <udp_input_local_match+0xa4>
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d005      	beq.n	801013c <udp_input_local_match+0xa4>
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	4b09      	ldr	r3, [pc, #36]	; (801015c <udp_input_local_match+0xc4>)
 8010136:	695b      	ldr	r3, [r3, #20]
 8010138:	429a      	cmp	r2, r3
 801013a:	d101      	bne.n	8010140 <udp_input_local_match+0xa8>
        return 1;
 801013c:	2301      	movs	r3, #1
 801013e:	e000      	b.n	8010142 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	0801916c 	.word	0x0801916c
 8010150:	0801919c 	.word	0x0801919c
 8010154:	080191c0 	.word	0x080191c0
 8010158:	080191e8 	.word	0x080191e8
 801015c:	200039e0 	.word	0x200039e0

08010160 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010160:	b590      	push	{r4, r7, lr}
 8010162:	b08d      	sub	sp, #52	; 0x34
 8010164:	af02      	add	r7, sp, #8
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801016a:	2300      	movs	r3, #0
 801016c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d105      	bne.n	8010180 <udp_input+0x20>
 8010174:	4b7c      	ldr	r3, [pc, #496]	; (8010368 <udp_input+0x208>)
 8010176:	22cf      	movs	r2, #207	; 0xcf
 8010178:	497c      	ldr	r1, [pc, #496]	; (801036c <udp_input+0x20c>)
 801017a:	487d      	ldr	r0, [pc, #500]	; (8010370 <udp_input+0x210>)
 801017c:	f003 fc94 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d105      	bne.n	8010192 <udp_input+0x32>
 8010186:	4b78      	ldr	r3, [pc, #480]	; (8010368 <udp_input+0x208>)
 8010188:	22d0      	movs	r2, #208	; 0xd0
 801018a:	497a      	ldr	r1, [pc, #488]	; (8010374 <udp_input+0x214>)
 801018c:	4878      	ldr	r0, [pc, #480]	; (8010370 <udp_input+0x210>)
 801018e:	f003 fc8b 	bl	8013aa8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	895b      	ldrh	r3, [r3, #10]
 8010196:	2b07      	cmp	r3, #7
 8010198:	d803      	bhi.n	80101a2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f7fa f960 	bl	800a460 <pbuf_free>
    goto end;
 80101a0:	e0de      	b.n	8010360 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80101a8:	4b73      	ldr	r3, [pc, #460]	; (8010378 <udp_input+0x218>)
 80101aa:	695b      	ldr	r3, [r3, #20]
 80101ac:	4a72      	ldr	r2, [pc, #456]	; (8010378 <udp_input+0x218>)
 80101ae:	6812      	ldr	r2, [r2, #0]
 80101b0:	4611      	mov	r1, r2
 80101b2:	4618      	mov	r0, r3
 80101b4:	f001 ff9e 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 80101b8:	4603      	mov	r3, r0
 80101ba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7f8 fe98 	bl	8008ef8 <lwip_htons>
 80101c8:	4603      	mov	r3, r0
 80101ca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	885b      	ldrh	r3, [r3, #2]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7f8 fe90 	bl	8008ef8 <lwip_htons>
 80101d8:	4603      	mov	r3, r0
 80101da:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80101dc:	2300      	movs	r3, #0
 80101de:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80101e0:	2300      	movs	r3, #0
 80101e2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80101e8:	4b64      	ldr	r3, [pc, #400]	; (801037c <udp_input+0x21c>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	627b      	str	r3, [r7, #36]	; 0x24
 80101ee:	e054      	b.n	801029a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f2:	8a5b      	ldrh	r3, [r3, #18]
 80101f4:	89fa      	ldrh	r2, [r7, #14]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d14a      	bne.n	8010290 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80101fa:	7cfb      	ldrb	r3, [r7, #19]
 80101fc:	461a      	mov	r2, r3
 80101fe:	6839      	ldr	r1, [r7, #0]
 8010200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010202:	f7ff ff49 	bl	8010098 <udp_input_local_match>
 8010206:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010208:	2b00      	cmp	r3, #0
 801020a:	d041      	beq.n	8010290 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	7c1b      	ldrb	r3, [r3, #16]
 8010210:	f003 0304 	and.w	r3, r3, #4
 8010214:	2b00      	cmp	r3, #0
 8010216:	d11d      	bne.n	8010254 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d102      	bne.n	8010224 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010220:	61fb      	str	r3, [r7, #28]
 8010222:	e017      	b.n	8010254 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010224:	7cfb      	ldrb	r3, [r7, #19]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d014      	beq.n	8010254 <udp_input+0xf4>
 801022a:	4b53      	ldr	r3, [pc, #332]	; (8010378 <udp_input+0x218>)
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010232:	d10f      	bne.n	8010254 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	3304      	adds	r3, #4
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	429a      	cmp	r2, r3
 8010240:	d008      	beq.n	8010254 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	3304      	adds	r3, #4
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	429a      	cmp	r2, r3
 801024e:	d101      	bne.n	8010254 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010252:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010256:	8a9b      	ldrh	r3, [r3, #20]
 8010258:	8a3a      	ldrh	r2, [r7, #16]
 801025a:	429a      	cmp	r2, r3
 801025c:	d118      	bne.n	8010290 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010262:	2b00      	cmp	r3, #0
 8010264:	d005      	beq.n	8010272 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010268:	685a      	ldr	r2, [r3, #4]
 801026a:	4b43      	ldr	r3, [pc, #268]	; (8010378 <udp_input+0x218>)
 801026c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801026e:	429a      	cmp	r2, r3
 8010270:	d10e      	bne.n	8010290 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010272:	6a3b      	ldr	r3, [r7, #32]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d014      	beq.n	80102a2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	68da      	ldr	r2, [r3, #12]
 801027c:	6a3b      	ldr	r3, [r7, #32]
 801027e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010280:	4b3e      	ldr	r3, [pc, #248]	; (801037c <udp_input+0x21c>)
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010286:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010288:	4a3c      	ldr	r2, [pc, #240]	; (801037c <udp_input+0x21c>)
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801028e:	e008      	b.n	80102a2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	627b      	str	r3, [r7, #36]	; 0x24
 801029a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1a7      	bne.n	80101f0 <udp_input+0x90>
 80102a0:	e000      	b.n	80102a4 <udp_input+0x144>
        break;
 80102a2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <udp_input+0x14e>
    pcb = uncon_pcb;
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d002      	beq.n	80102ba <udp_input+0x15a>
    for_us = 1;
 80102b4:	2301      	movs	r3, #1
 80102b6:	76fb      	strb	r3, [r7, #27]
 80102b8:	e00a      	b.n	80102d0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	3304      	adds	r3, #4
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	4b2d      	ldr	r3, [pc, #180]	; (8010378 <udp_input+0x218>)
 80102c2:	695b      	ldr	r3, [r3, #20]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	bf0c      	ite	eq
 80102c8:	2301      	moveq	r3, #1
 80102ca:	2300      	movne	r3, #0
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80102d0:	7efb      	ldrb	r3, [r7, #27]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d041      	beq.n	801035a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80102d6:	2108      	movs	r1, #8
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f7fa f83b 	bl	800a354 <pbuf_remove_header>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00a      	beq.n	80102fa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80102e4:	4b20      	ldr	r3, [pc, #128]	; (8010368 <udp_input+0x208>)
 80102e6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80102ea:	4925      	ldr	r1, [pc, #148]	; (8010380 <udp_input+0x220>)
 80102ec:	4820      	ldr	r0, [pc, #128]	; (8010370 <udp_input+0x210>)
 80102ee:	f003 fbdb 	bl	8013aa8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f7fa f8b4 	bl	800a460 <pbuf_free>
      goto end;
 80102f8:	e032      	b.n	8010360 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d012      	beq.n	8010326 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010302:	699b      	ldr	r3, [r3, #24]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00a      	beq.n	801031e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	699c      	ldr	r4, [r3, #24]
 801030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030e:	69d8      	ldr	r0, [r3, #28]
 8010310:	8a3b      	ldrh	r3, [r7, #16]
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	4b1b      	ldr	r3, [pc, #108]	; (8010384 <udp_input+0x224>)
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801031a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801031c:	e021      	b.n	8010362 <udp_input+0x202>
        pbuf_free(p);
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f7fa f89e 	bl	800a460 <pbuf_free>
        goto end;
 8010324:	e01c      	b.n	8010360 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010326:	7cfb      	ldrb	r3, [r7, #19]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d112      	bne.n	8010352 <udp_input+0x1f2>
 801032c:	4b12      	ldr	r3, [pc, #72]	; (8010378 <udp_input+0x218>)
 801032e:	695b      	ldr	r3, [r3, #20]
 8010330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010334:	2be0      	cmp	r3, #224	; 0xe0
 8010336:	d00c      	beq.n	8010352 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010338:	4b0f      	ldr	r3, [pc, #60]	; (8010378 <udp_input+0x218>)
 801033a:	899b      	ldrh	r3, [r3, #12]
 801033c:	3308      	adds	r3, #8
 801033e:	b29b      	uxth	r3, r3
 8010340:	b21b      	sxth	r3, r3
 8010342:	4619      	mov	r1, r3
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f7fa f878 	bl	800a43a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801034a:	2103      	movs	r1, #3
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f001 fbb1 	bl	8011ab4 <icmp_dest_unreach>
      pbuf_free(p);
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7fa f884 	bl	800a460 <pbuf_free>
  return;
 8010358:	e003      	b.n	8010362 <udp_input+0x202>
    pbuf_free(p);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7fa f880 	bl	800a460 <pbuf_free>
  return;
 8010360:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010362:	372c      	adds	r7, #44	; 0x2c
 8010364:	46bd      	mov	sp, r7
 8010366:	bd90      	pop	{r4, r7, pc}
 8010368:	0801916c 	.word	0x0801916c
 801036c:	08019210 	.word	0x08019210
 8010370:	080191c0 	.word	0x080191c0
 8010374:	08019228 	.word	0x08019228
 8010378:	200039e0 	.word	0x200039e0
 801037c:	200090fc 	.word	0x200090fc
 8010380:	08019244 	.word	0x08019244
 8010384:	200039f0 	.word	0x200039f0

08010388 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d109      	bne.n	80103ac <udp_send+0x24>
 8010398:	4b11      	ldr	r3, [pc, #68]	; (80103e0 <udp_send+0x58>)
 801039a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801039e:	4911      	ldr	r1, [pc, #68]	; (80103e4 <udp_send+0x5c>)
 80103a0:	4811      	ldr	r0, [pc, #68]	; (80103e8 <udp_send+0x60>)
 80103a2:	f003 fb81 	bl	8013aa8 <iprintf>
 80103a6:	f06f 030f 	mvn.w	r3, #15
 80103aa:	e015      	b.n	80103d8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d109      	bne.n	80103c6 <udp_send+0x3e>
 80103b2:	4b0b      	ldr	r3, [pc, #44]	; (80103e0 <udp_send+0x58>)
 80103b4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80103b8:	490c      	ldr	r1, [pc, #48]	; (80103ec <udp_send+0x64>)
 80103ba:	480b      	ldr	r0, [pc, #44]	; (80103e8 <udp_send+0x60>)
 80103bc:	f003 fb74 	bl	8013aa8 <iprintf>
 80103c0:	f06f 030f 	mvn.w	r3, #15
 80103c4:	e008      	b.n	80103d8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	1d1a      	adds	r2, r3, #4
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	8a9b      	ldrh	r3, [r3, #20]
 80103ce:	6839      	ldr	r1, [r7, #0]
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f000 f80d 	bl	80103f0 <udp_sendto>
 80103d6:	4603      	mov	r3, r0
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	0801916c 	.word	0x0801916c
 80103e4:	08019260 	.word	0x08019260
 80103e8:	080191c0 	.word	0x080191c0
 80103ec:	08019278 	.word	0x08019278

080103f0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b088      	sub	sp, #32
 80103f4:	af02      	add	r7, sp, #8
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	607a      	str	r2, [r7, #4]
 80103fc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d109      	bne.n	8010418 <udp_sendto+0x28>
 8010404:	4b23      	ldr	r3, [pc, #140]	; (8010494 <udp_sendto+0xa4>)
 8010406:	f44f 7206 	mov.w	r2, #536	; 0x218
 801040a:	4923      	ldr	r1, [pc, #140]	; (8010498 <udp_sendto+0xa8>)
 801040c:	4823      	ldr	r0, [pc, #140]	; (801049c <udp_sendto+0xac>)
 801040e:	f003 fb4b 	bl	8013aa8 <iprintf>
 8010412:	f06f 030f 	mvn.w	r3, #15
 8010416:	e038      	b.n	801048a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d109      	bne.n	8010432 <udp_sendto+0x42>
 801041e:	4b1d      	ldr	r3, [pc, #116]	; (8010494 <udp_sendto+0xa4>)
 8010420:	f240 2219 	movw	r2, #537	; 0x219
 8010424:	491e      	ldr	r1, [pc, #120]	; (80104a0 <udp_sendto+0xb0>)
 8010426:	481d      	ldr	r0, [pc, #116]	; (801049c <udp_sendto+0xac>)
 8010428:	f003 fb3e 	bl	8013aa8 <iprintf>
 801042c:	f06f 030f 	mvn.w	r3, #15
 8010430:	e02b      	b.n	801048a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d109      	bne.n	801044c <udp_sendto+0x5c>
 8010438:	4b16      	ldr	r3, [pc, #88]	; (8010494 <udp_sendto+0xa4>)
 801043a:	f240 221a 	movw	r2, #538	; 0x21a
 801043e:	4919      	ldr	r1, [pc, #100]	; (80104a4 <udp_sendto+0xb4>)
 8010440:	4816      	ldr	r0, [pc, #88]	; (801049c <udp_sendto+0xac>)
 8010442:	f003 fb31 	bl	8013aa8 <iprintf>
 8010446:	f06f 030f 	mvn.w	r3, #15
 801044a:	e01e      	b.n	801048a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	7a1b      	ldrb	r3, [r3, #8]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d006      	beq.n	8010462 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	7a1b      	ldrb	r3, [r3, #8]
 8010458:	4618      	mov	r0, r3
 801045a:	f7f9 fca1 	bl	8009da0 <netif_get_by_index>
 801045e:	6178      	str	r0, [r7, #20]
 8010460:	e003      	b.n	801046a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f001 fbb0 	bl	8011bc8 <ip4_route>
 8010468:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d102      	bne.n	8010476 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010470:	f06f 0303 	mvn.w	r3, #3
 8010474:	e009      	b.n	801048a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8010476:	887a      	ldrh	r2, [r7, #2]
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	4613      	mov	r3, r2
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	68b9      	ldr	r1, [r7, #8]
 8010482:	68f8      	ldr	r0, [r7, #12]
 8010484:	f000 f810 	bl	80104a8 <udp_sendto_if>
 8010488:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801048a:	4618      	mov	r0, r3
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	0801916c 	.word	0x0801916c
 8010498:	08019290 	.word	0x08019290
 801049c:	080191c0 	.word	0x080191c0
 80104a0:	080192a8 	.word	0x080192a8
 80104a4:	080192c4 	.word	0x080192c4

080104a8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b088      	sub	sp, #32
 80104ac:	af02      	add	r7, sp, #8
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
 80104b4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d109      	bne.n	80104d0 <udp_sendto_if+0x28>
 80104bc:	4b2e      	ldr	r3, [pc, #184]	; (8010578 <udp_sendto_if+0xd0>)
 80104be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104c2:	492e      	ldr	r1, [pc, #184]	; (801057c <udp_sendto_if+0xd4>)
 80104c4:	482e      	ldr	r0, [pc, #184]	; (8010580 <udp_sendto_if+0xd8>)
 80104c6:	f003 faef 	bl	8013aa8 <iprintf>
 80104ca:	f06f 030f 	mvn.w	r3, #15
 80104ce:	e04f      	b.n	8010570 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d109      	bne.n	80104ea <udp_sendto_if+0x42>
 80104d6:	4b28      	ldr	r3, [pc, #160]	; (8010578 <udp_sendto_if+0xd0>)
 80104d8:	f240 2281 	movw	r2, #641	; 0x281
 80104dc:	4929      	ldr	r1, [pc, #164]	; (8010584 <udp_sendto_if+0xdc>)
 80104de:	4828      	ldr	r0, [pc, #160]	; (8010580 <udp_sendto_if+0xd8>)
 80104e0:	f003 fae2 	bl	8013aa8 <iprintf>
 80104e4:	f06f 030f 	mvn.w	r3, #15
 80104e8:	e042      	b.n	8010570 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d109      	bne.n	8010504 <udp_sendto_if+0x5c>
 80104f0:	4b21      	ldr	r3, [pc, #132]	; (8010578 <udp_sendto_if+0xd0>)
 80104f2:	f240 2282 	movw	r2, #642	; 0x282
 80104f6:	4924      	ldr	r1, [pc, #144]	; (8010588 <udp_sendto_if+0xe0>)
 80104f8:	4821      	ldr	r0, [pc, #132]	; (8010580 <udp_sendto_if+0xd8>)
 80104fa:	f003 fad5 	bl	8013aa8 <iprintf>
 80104fe:	f06f 030f 	mvn.w	r3, #15
 8010502:	e035      	b.n	8010570 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d109      	bne.n	801051e <udp_sendto_if+0x76>
 801050a:	4b1b      	ldr	r3, [pc, #108]	; (8010578 <udp_sendto_if+0xd0>)
 801050c:	f240 2283 	movw	r2, #643	; 0x283
 8010510:	491e      	ldr	r1, [pc, #120]	; (801058c <udp_sendto_if+0xe4>)
 8010512:	481b      	ldr	r0, [pc, #108]	; (8010580 <udp_sendto_if+0xd8>)
 8010514:	f003 fac8 	bl	8013aa8 <iprintf>
 8010518:	f06f 030f 	mvn.w	r3, #15
 801051c:	e028      	b.n	8010570 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d009      	beq.n	8010538 <udp_sendto_if+0x90>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d005      	beq.n	8010538 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010534:	2be0      	cmp	r3, #224	; 0xe0
 8010536:	d103      	bne.n	8010540 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010538:	6a3b      	ldr	r3, [r7, #32]
 801053a:	3304      	adds	r3, #4
 801053c:	617b      	str	r3, [r7, #20]
 801053e:	e00b      	b.n	8010558 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	6a3b      	ldr	r3, [r7, #32]
 8010546:	3304      	adds	r3, #4
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	429a      	cmp	r2, r3
 801054c:	d002      	beq.n	8010554 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801054e:	f06f 0303 	mvn.w	r3, #3
 8010552:	e00d      	b.n	8010570 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010558:	887a      	ldrh	r2, [r7, #2]
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	9301      	str	r3, [sp, #4]
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	4613      	mov	r3, r2
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	68b9      	ldr	r1, [r7, #8]
 8010568:	68f8      	ldr	r0, [r7, #12]
 801056a:	f000 f811 	bl	8010590 <udp_sendto_if_src>
 801056e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010570:	4618      	mov	r0, r3
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	0801916c 	.word	0x0801916c
 801057c:	080192e0 	.word	0x080192e0
 8010580:	080191c0 	.word	0x080191c0
 8010584:	080192fc 	.word	0x080192fc
 8010588:	08019318 	.word	0x08019318
 801058c:	08019338 	.word	0x08019338

08010590 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b08c      	sub	sp, #48	; 0x30
 8010594:	af04      	add	r7, sp, #16
 8010596:	60f8      	str	r0, [r7, #12]
 8010598:	60b9      	str	r1, [r7, #8]
 801059a:	607a      	str	r2, [r7, #4]
 801059c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d109      	bne.n	80105b8 <udp_sendto_if_src+0x28>
 80105a4:	4b65      	ldr	r3, [pc, #404]	; (801073c <udp_sendto_if_src+0x1ac>)
 80105a6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80105aa:	4965      	ldr	r1, [pc, #404]	; (8010740 <udp_sendto_if_src+0x1b0>)
 80105ac:	4865      	ldr	r0, [pc, #404]	; (8010744 <udp_sendto_if_src+0x1b4>)
 80105ae:	f003 fa7b 	bl	8013aa8 <iprintf>
 80105b2:	f06f 030f 	mvn.w	r3, #15
 80105b6:	e0bc      	b.n	8010732 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d109      	bne.n	80105d2 <udp_sendto_if_src+0x42>
 80105be:	4b5f      	ldr	r3, [pc, #380]	; (801073c <udp_sendto_if_src+0x1ac>)
 80105c0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80105c4:	4960      	ldr	r1, [pc, #384]	; (8010748 <udp_sendto_if_src+0x1b8>)
 80105c6:	485f      	ldr	r0, [pc, #380]	; (8010744 <udp_sendto_if_src+0x1b4>)
 80105c8:	f003 fa6e 	bl	8013aa8 <iprintf>
 80105cc:	f06f 030f 	mvn.w	r3, #15
 80105d0:	e0af      	b.n	8010732 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d109      	bne.n	80105ec <udp_sendto_if_src+0x5c>
 80105d8:	4b58      	ldr	r3, [pc, #352]	; (801073c <udp_sendto_if_src+0x1ac>)
 80105da:	f240 22d3 	movw	r2, #723	; 0x2d3
 80105de:	495b      	ldr	r1, [pc, #364]	; (801074c <udp_sendto_if_src+0x1bc>)
 80105e0:	4858      	ldr	r0, [pc, #352]	; (8010744 <udp_sendto_if_src+0x1b4>)
 80105e2:	f003 fa61 	bl	8013aa8 <iprintf>
 80105e6:	f06f 030f 	mvn.w	r3, #15
 80105ea:	e0a2      	b.n	8010732 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80105ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d109      	bne.n	8010606 <udp_sendto_if_src+0x76>
 80105f2:	4b52      	ldr	r3, [pc, #328]	; (801073c <udp_sendto_if_src+0x1ac>)
 80105f4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80105f8:	4955      	ldr	r1, [pc, #340]	; (8010750 <udp_sendto_if_src+0x1c0>)
 80105fa:	4852      	ldr	r0, [pc, #328]	; (8010744 <udp_sendto_if_src+0x1b4>)
 80105fc:	f003 fa54 	bl	8013aa8 <iprintf>
 8010600:	f06f 030f 	mvn.w	r3, #15
 8010604:	e095      	b.n	8010732 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010608:	2b00      	cmp	r3, #0
 801060a:	d109      	bne.n	8010620 <udp_sendto_if_src+0x90>
 801060c:	4b4b      	ldr	r3, [pc, #300]	; (801073c <udp_sendto_if_src+0x1ac>)
 801060e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010612:	4950      	ldr	r1, [pc, #320]	; (8010754 <udp_sendto_if_src+0x1c4>)
 8010614:	484b      	ldr	r0, [pc, #300]	; (8010744 <udp_sendto_if_src+0x1b4>)
 8010616:	f003 fa47 	bl	8013aa8 <iprintf>
 801061a:	f06f 030f 	mvn.w	r3, #15
 801061e:	e088      	b.n	8010732 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	8a5b      	ldrh	r3, [r3, #18]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d10f      	bne.n	8010648 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010628:	68f9      	ldr	r1, [r7, #12]
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	8a5b      	ldrh	r3, [r3, #18]
 801062e:	461a      	mov	r2, r3
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f000 f893 	bl	801075c <udp_bind>
 8010636:	4603      	mov	r3, r0
 8010638:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801063a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d002      	beq.n	8010648 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010642:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010646:	e074      	b.n	8010732 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	891b      	ldrh	r3, [r3, #8]
 801064c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010650:	4293      	cmp	r3, r2
 8010652:	d902      	bls.n	801065a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010654:	f04f 33ff 	mov.w	r3, #4294967295
 8010658:	e06b      	b.n	8010732 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801065a:	2108      	movs	r1, #8
 801065c:	68b8      	ldr	r0, [r7, #8]
 801065e:	f7f9 fe69 	bl	800a334 <pbuf_add_header>
 8010662:	4603      	mov	r3, r0
 8010664:	2b00      	cmp	r3, #0
 8010666:	d015      	beq.n	8010694 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010668:	f44f 7220 	mov.w	r2, #640	; 0x280
 801066c:	2108      	movs	r1, #8
 801066e:	2022      	movs	r0, #34	; 0x22
 8010670:	f7f9 fc12 	bl	8009e98 <pbuf_alloc>
 8010674:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010676:	69fb      	ldr	r3, [r7, #28]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d102      	bne.n	8010682 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801067c:	f04f 33ff 	mov.w	r3, #4294967295
 8010680:	e057      	b.n	8010732 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	891b      	ldrh	r3, [r3, #8]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d006      	beq.n	8010698 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801068a:	68b9      	ldr	r1, [r7, #8]
 801068c:	69f8      	ldr	r0, [r7, #28]
 801068e:	f7f9 ffff 	bl	800a690 <pbuf_chain>
 8010692:	e001      	b.n	8010698 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010698:	69fb      	ldr	r3, [r7, #28]
 801069a:	895b      	ldrh	r3, [r3, #10]
 801069c:	2b07      	cmp	r3, #7
 801069e:	d806      	bhi.n	80106ae <udp_sendto_if_src+0x11e>
 80106a0:	4b26      	ldr	r3, [pc, #152]	; (801073c <udp_sendto_if_src+0x1ac>)
 80106a2:	f240 320d 	movw	r2, #781	; 0x30d
 80106a6:	492c      	ldr	r1, [pc, #176]	; (8010758 <udp_sendto_if_src+0x1c8>)
 80106a8:	4826      	ldr	r0, [pc, #152]	; (8010744 <udp_sendto_if_src+0x1b4>)
 80106aa:	f003 f9fd 	bl	8013aa8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	8a5b      	ldrh	r3, [r3, #18]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7f8 fc1d 	bl	8008ef8 <lwip_htons>
 80106be:	4603      	mov	r3, r0
 80106c0:	461a      	mov	r2, r3
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80106c6:	887b      	ldrh	r3, [r7, #2]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7f8 fc15 	bl	8008ef8 <lwip_htons>
 80106ce:	4603      	mov	r3, r0
 80106d0:	461a      	mov	r2, r3
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	2200      	movs	r2, #0
 80106da:	719a      	strb	r2, [r3, #6]
 80106dc:	2200      	movs	r2, #0
 80106de:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80106e0:	69fb      	ldr	r3, [r7, #28]
 80106e2:	891b      	ldrh	r3, [r3, #8]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7f8 fc07 	bl	8008ef8 <lwip_htons>
 80106ea:	4603      	mov	r3, r0
 80106ec:	461a      	mov	r2, r3
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80106f2:	2311      	movs	r3, #17
 80106f4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	7adb      	ldrb	r3, [r3, #11]
 80106fa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	7a9b      	ldrb	r3, [r3, #10]
 8010700:	7cb9      	ldrb	r1, [r7, #18]
 8010702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010704:	9202      	str	r2, [sp, #8]
 8010706:	7cfa      	ldrb	r2, [r7, #19]
 8010708:	9201      	str	r2, [sp, #4]
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	460b      	mov	r3, r1
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010712:	69f8      	ldr	r0, [r7, #28]
 8010714:	f001 fc40 	bl	8011f98 <ip4_output_if_src>
 8010718:	4603      	mov	r3, r0
 801071a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801071c:	69fa      	ldr	r2, [r7, #28]
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	429a      	cmp	r2, r3
 8010722:	d004      	beq.n	801072e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010724:	69f8      	ldr	r0, [r7, #28]
 8010726:	f7f9 fe9b 	bl	800a460 <pbuf_free>
    q = NULL;
 801072a:	2300      	movs	r3, #0
 801072c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801072e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010732:	4618      	mov	r0, r3
 8010734:	3720      	adds	r7, #32
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	0801916c 	.word	0x0801916c
 8010740:	08019358 	.word	0x08019358
 8010744:	080191c0 	.word	0x080191c0
 8010748:	08019378 	.word	0x08019378
 801074c:	08019398 	.word	0x08019398
 8010750:	080193bc 	.word	0x080193bc
 8010754:	080193e0 	.word	0x080193e0
 8010758:	08019404 	.word	0x08019404

0801075c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b086      	sub	sp, #24
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	4613      	mov	r3, r2
 8010768:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010770:	4b39      	ldr	r3, [pc, #228]	; (8010858 <udp_bind+0xfc>)
 8010772:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d109      	bne.n	801078e <udp_bind+0x32>
 801077a:	4b38      	ldr	r3, [pc, #224]	; (801085c <udp_bind+0x100>)
 801077c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010780:	4937      	ldr	r1, [pc, #220]	; (8010860 <udp_bind+0x104>)
 8010782:	4838      	ldr	r0, [pc, #224]	; (8010864 <udp_bind+0x108>)
 8010784:	f003 f990 	bl	8013aa8 <iprintf>
 8010788:	f06f 030f 	mvn.w	r3, #15
 801078c:	e060      	b.n	8010850 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801078e:	2300      	movs	r3, #0
 8010790:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010792:	4b35      	ldr	r3, [pc, #212]	; (8010868 <udp_bind+0x10c>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	617b      	str	r3, [r7, #20]
 8010798:	e009      	b.n	80107ae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d102      	bne.n	80107a8 <udp_bind+0x4c>
      rebind = 1;
 80107a2:	2301      	movs	r3, #1
 80107a4:	74fb      	strb	r3, [r7, #19]
      break;
 80107a6:	e005      	b.n	80107b4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	617b      	str	r3, [r7, #20]
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1f2      	bne.n	801079a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80107b4:	88fb      	ldrh	r3, [r7, #6]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d109      	bne.n	80107ce <udp_bind+0x72>
    port = udp_new_port();
 80107ba:	f7ff fc35 	bl	8010028 <udp_new_port>
 80107be:	4603      	mov	r3, r0
 80107c0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80107c2:	88fb      	ldrh	r3, [r7, #6]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d12c      	bne.n	8010822 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80107c8:	f06f 0307 	mvn.w	r3, #7
 80107cc:	e040      	b.n	8010850 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80107ce:	4b26      	ldr	r3, [pc, #152]	; (8010868 <udp_bind+0x10c>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	617b      	str	r3, [r7, #20]
 80107d4:	e022      	b.n	801081c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d01b      	beq.n	8010816 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	8a5b      	ldrh	r3, [r3, #18]
 80107e2:	88fa      	ldrh	r2, [r7, #6]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d116      	bne.n	8010816 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80107f0:	429a      	cmp	r2, r3
 80107f2:	d00d      	beq.n	8010810 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d00a      	beq.n	8010810 <udp_bind+0xb4>
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d006      	beq.n	8010810 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010802:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010804:	2b00      	cmp	r3, #0
 8010806:	d003      	beq.n	8010810 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d102      	bne.n	8010816 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010810:	f06f 0307 	mvn.w	r3, #7
 8010814:	e01c      	b.n	8010850 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	617b      	str	r3, [r7, #20]
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d1d9      	bne.n	80107d6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <udp_bind+0xd2>
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	e000      	b.n	8010830 <udp_bind+0xd4>
 801082e:	2300      	movs	r3, #0
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	88fa      	ldrh	r2, [r7, #6]
 8010838:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801083a:	7cfb      	ldrb	r3, [r7, #19]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d106      	bne.n	801084e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010840:	4b09      	ldr	r3, [pc, #36]	; (8010868 <udp_bind+0x10c>)
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010848:	4a07      	ldr	r2, [pc, #28]	; (8010868 <udp_bind+0x10c>)
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801084e:	2300      	movs	r3, #0
}
 8010850:	4618      	mov	r0, r3
 8010852:	3718      	adds	r7, #24
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	08019c74 	.word	0x08019c74
 801085c:	0801916c 	.word	0x0801916c
 8010860:	08019434 	.word	0x08019434
 8010864:	080191c0 	.word	0x080191c0
 8010868:	200090fc 	.word	0x200090fc

0801086c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b086      	sub	sp, #24
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	4613      	mov	r3, r2
 8010878:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d109      	bne.n	8010894 <udp_connect+0x28>
 8010880:	4b2c      	ldr	r3, [pc, #176]	; (8010934 <udp_connect+0xc8>)
 8010882:	f240 4235 	movw	r2, #1077	; 0x435
 8010886:	492c      	ldr	r1, [pc, #176]	; (8010938 <udp_connect+0xcc>)
 8010888:	482c      	ldr	r0, [pc, #176]	; (801093c <udp_connect+0xd0>)
 801088a:	f003 f90d 	bl	8013aa8 <iprintf>
 801088e:	f06f 030f 	mvn.w	r3, #15
 8010892:	e04b      	b.n	801092c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d109      	bne.n	80108ae <udp_connect+0x42>
 801089a:	4b26      	ldr	r3, [pc, #152]	; (8010934 <udp_connect+0xc8>)
 801089c:	f240 4236 	movw	r2, #1078	; 0x436
 80108a0:	4927      	ldr	r1, [pc, #156]	; (8010940 <udp_connect+0xd4>)
 80108a2:	4826      	ldr	r0, [pc, #152]	; (801093c <udp_connect+0xd0>)
 80108a4:	f003 f900 	bl	8013aa8 <iprintf>
 80108a8:	f06f 030f 	mvn.w	r3, #15
 80108ac:	e03e      	b.n	801092c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	8a5b      	ldrh	r3, [r3, #18]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d10f      	bne.n	80108d6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80108b6:	68f9      	ldr	r1, [r7, #12]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	8a5b      	ldrh	r3, [r3, #18]
 80108bc:	461a      	mov	r2, r3
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7ff ff4c 	bl	801075c <udp_bind>
 80108c4:	4603      	mov	r3, r0
 80108c6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80108c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <udp_connect+0x6a>
      return err;
 80108d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80108d4:	e02a      	b.n	801092c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <udp_connect+0x76>
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	e000      	b.n	80108e4 <udp_connect+0x78>
 80108e2:	2300      	movs	r3, #0
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	88fa      	ldrh	r2, [r7, #6]
 80108ec:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	7c1b      	ldrb	r3, [r3, #16]
 80108f2:	f043 0304 	orr.w	r3, r3, #4
 80108f6:	b2da      	uxtb	r2, r3
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80108fc:	4b11      	ldr	r3, [pc, #68]	; (8010944 <udp_connect+0xd8>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	617b      	str	r3, [r7, #20]
 8010902:	e008      	b.n	8010916 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010904:	68fa      	ldr	r2, [r7, #12]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	429a      	cmp	r2, r3
 801090a:	d101      	bne.n	8010910 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801090c:	2300      	movs	r3, #0
 801090e:	e00d      	b.n	801092c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	617b      	str	r3, [r7, #20]
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d1f3      	bne.n	8010904 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801091c:	4b09      	ldr	r3, [pc, #36]	; (8010944 <udp_connect+0xd8>)
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010924:	4a07      	ldr	r2, [pc, #28]	; (8010944 <udp_connect+0xd8>)
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801092a:	2300      	movs	r3, #0
}
 801092c:	4618      	mov	r0, r3
 801092e:	3718      	adds	r7, #24
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}
 8010934:	0801916c 	.word	0x0801916c
 8010938:	0801944c 	.word	0x0801944c
 801093c:	080191c0 	.word	0x080191c0
 8010940:	08019468 	.word	0x08019468
 8010944:	200090fc 	.word	0x200090fc

08010948 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	60f8      	str	r0, [r7, #12]
 8010950:	60b9      	str	r1, [r7, #8]
 8010952:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d107      	bne.n	801096a <udp_recv+0x22>
 801095a:	4b08      	ldr	r3, [pc, #32]	; (801097c <udp_recv+0x34>)
 801095c:	f240 428a 	movw	r2, #1162	; 0x48a
 8010960:	4907      	ldr	r1, [pc, #28]	; (8010980 <udp_recv+0x38>)
 8010962:	4808      	ldr	r0, [pc, #32]	; (8010984 <udp_recv+0x3c>)
 8010964:	f003 f8a0 	bl	8013aa8 <iprintf>
 8010968:	e005      	b.n	8010976 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	68ba      	ldr	r2, [r7, #8]
 801096e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	61da      	str	r2, [r3, #28]
}
 8010976:	3710      	adds	r7, #16
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	0801916c 	.word	0x0801916c
 8010980:	080194a0 	.word	0x080194a0
 8010984:	080191c0 	.word	0x080191c0

08010988 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801098e:	2000      	movs	r0, #0
 8010990:	f7f8 ff08 	bl	80097a4 <memp_malloc>
 8010994:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d007      	beq.n	80109ac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801099c:	2220      	movs	r2, #32
 801099e:	2100      	movs	r1, #0
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f002 fb65 	bl	8013070 <memset>
    pcb->ttl = UDP_TTL;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	22ff      	movs	r2, #255	; 0xff
 80109aa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80109ac:	687b      	ldr	r3, [r7, #4]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3708      	adds	r7, #8
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
	...

080109b8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d01e      	beq.n	8010a06 <udp_netif_ip_addr_changed+0x4e>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d01a      	beq.n	8010a06 <udp_netif_ip_addr_changed+0x4e>
 80109d0:	683b      	ldr	r3, [r7, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d017      	beq.n	8010a06 <udp_netif_ip_addr_changed+0x4e>
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d013      	beq.n	8010a06 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80109de:	4b0d      	ldr	r3, [pc, #52]	; (8010a14 <udp_netif_ip_addr_changed+0x5c>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	60fb      	str	r3, [r7, #12]
 80109e4:	e00c      	b.n	8010a00 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681a      	ldr	r2, [r3, #0]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d103      	bne.n	80109fa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	60fb      	str	r3, [r7, #12]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1ef      	bne.n	80109e6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010a06:	bf00      	nop
 8010a08:	3714      	adds	r7, #20
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	200090fc 	.word	0x200090fc

08010a18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010a20:	4915      	ldr	r1, [pc, #84]	; (8010a78 <etharp_free_entry+0x60>)
 8010a22:	687a      	ldr	r2, [r7, #4]
 8010a24:	4613      	mov	r3, r2
 8010a26:	005b      	lsls	r3, r3, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	00db      	lsls	r3, r3, #3
 8010a2c:	440b      	add	r3, r1
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d013      	beq.n	8010a5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010a34:	4910      	ldr	r1, [pc, #64]	; (8010a78 <etharp_free_entry+0x60>)
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	005b      	lsls	r3, r3, #1
 8010a3c:	4413      	add	r3, r2
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	440b      	add	r3, r1
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7f9 fd0b 	bl	800a460 <pbuf_free>
    arp_table[i].q = NULL;
 8010a4a:	490b      	ldr	r1, [pc, #44]	; (8010a78 <etharp_free_entry+0x60>)
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	2200      	movs	r2, #0
 8010a5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010a5c:	4906      	ldr	r1, [pc, #24]	; (8010a78 <etharp_free_entry+0x60>)
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	4613      	mov	r3, r2
 8010a62:	005b      	lsls	r3, r3, #1
 8010a64:	4413      	add	r3, r2
 8010a66:	00db      	lsls	r3, r3, #3
 8010a68:	440b      	add	r3, r1
 8010a6a:	3314      	adds	r3, #20
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010a70:	bf00      	nop
 8010a72:	3708      	adds	r7, #8
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}
 8010a78:	20000308 	.word	0x20000308

08010a7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b082      	sub	sp, #8
 8010a80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a82:	2300      	movs	r3, #0
 8010a84:	607b      	str	r3, [r7, #4]
 8010a86:	e096      	b.n	8010bb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010a88:	494f      	ldr	r1, [pc, #316]	; (8010bc8 <etharp_tmr+0x14c>)
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	4413      	add	r3, r2
 8010a92:	00db      	lsls	r3, r3, #3
 8010a94:	440b      	add	r3, r1
 8010a96:	3314      	adds	r3, #20
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010a9c:	78fb      	ldrb	r3, [r7, #3]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	f000 8086 	beq.w	8010bb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010aa4:	4948      	ldr	r1, [pc, #288]	; (8010bc8 <etharp_tmr+0x14c>)
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	005b      	lsls	r3, r3, #1
 8010aac:	4413      	add	r3, r2
 8010aae:	00db      	lsls	r3, r3, #3
 8010ab0:	440b      	add	r3, r1
 8010ab2:	3312      	adds	r3, #18
 8010ab4:	881b      	ldrh	r3, [r3, #0]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	b298      	uxth	r0, r3
 8010aba:	4943      	ldr	r1, [pc, #268]	; (8010bc8 <etharp_tmr+0x14c>)
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	4613      	mov	r3, r2
 8010ac0:	005b      	lsls	r3, r3, #1
 8010ac2:	4413      	add	r3, r2
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	440b      	add	r3, r1
 8010ac8:	3312      	adds	r3, #18
 8010aca:	4602      	mov	r2, r0
 8010acc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010ace:	493e      	ldr	r1, [pc, #248]	; (8010bc8 <etharp_tmr+0x14c>)
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	4413      	add	r3, r2
 8010ad8:	00db      	lsls	r3, r3, #3
 8010ada:	440b      	add	r3, r1
 8010adc:	3312      	adds	r3, #18
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010ae4:	d215      	bcs.n	8010b12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010ae6:	4938      	ldr	r1, [pc, #224]	; (8010bc8 <etharp_tmr+0x14c>)
 8010ae8:	687a      	ldr	r2, [r7, #4]
 8010aea:	4613      	mov	r3, r2
 8010aec:	005b      	lsls	r3, r3, #1
 8010aee:	4413      	add	r3, r2
 8010af0:	00db      	lsls	r3, r3, #3
 8010af2:	440b      	add	r3, r1
 8010af4:	3314      	adds	r3, #20
 8010af6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d10e      	bne.n	8010b1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010afc:	4932      	ldr	r1, [pc, #200]	; (8010bc8 <etharp_tmr+0x14c>)
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	4613      	mov	r3, r2
 8010b02:	005b      	lsls	r3, r3, #1
 8010b04:	4413      	add	r3, r2
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	440b      	add	r3, r1
 8010b0a:	3312      	adds	r3, #18
 8010b0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010b0e:	2b04      	cmp	r3, #4
 8010b10:	d903      	bls.n	8010b1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7ff ff80 	bl	8010a18 <etharp_free_entry>
 8010b18:	e04a      	b.n	8010bb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010b1a:	492b      	ldr	r1, [pc, #172]	; (8010bc8 <etharp_tmr+0x14c>)
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4413      	add	r3, r2
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	440b      	add	r3, r1
 8010b28:	3314      	adds	r3, #20
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b03      	cmp	r3, #3
 8010b2e:	d10a      	bne.n	8010b46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010b30:	4925      	ldr	r1, [pc, #148]	; (8010bc8 <etharp_tmr+0x14c>)
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	4613      	mov	r3, r2
 8010b36:	005b      	lsls	r3, r3, #1
 8010b38:	4413      	add	r3, r2
 8010b3a:	00db      	lsls	r3, r3, #3
 8010b3c:	440b      	add	r3, r1
 8010b3e:	3314      	adds	r3, #20
 8010b40:	2204      	movs	r2, #4
 8010b42:	701a      	strb	r2, [r3, #0]
 8010b44:	e034      	b.n	8010bb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010b46:	4920      	ldr	r1, [pc, #128]	; (8010bc8 <etharp_tmr+0x14c>)
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	4413      	add	r3, r2
 8010b50:	00db      	lsls	r3, r3, #3
 8010b52:	440b      	add	r3, r1
 8010b54:	3314      	adds	r3, #20
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	2b04      	cmp	r3, #4
 8010b5a:	d10a      	bne.n	8010b72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010b5c:	491a      	ldr	r1, [pc, #104]	; (8010bc8 <etharp_tmr+0x14c>)
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	4613      	mov	r3, r2
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	4413      	add	r3, r2
 8010b66:	00db      	lsls	r3, r3, #3
 8010b68:	440b      	add	r3, r1
 8010b6a:	3314      	adds	r3, #20
 8010b6c:	2202      	movs	r2, #2
 8010b6e:	701a      	strb	r2, [r3, #0]
 8010b70:	e01e      	b.n	8010bb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010b72:	4915      	ldr	r1, [pc, #84]	; (8010bc8 <etharp_tmr+0x14c>)
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	4613      	mov	r3, r2
 8010b78:	005b      	lsls	r3, r3, #1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	00db      	lsls	r3, r3, #3
 8010b7e:	440b      	add	r3, r1
 8010b80:	3314      	adds	r3, #20
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	2b01      	cmp	r3, #1
 8010b86:	d113      	bne.n	8010bb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010b88:	490f      	ldr	r1, [pc, #60]	; (8010bc8 <etharp_tmr+0x14c>)
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	4413      	add	r3, r2
 8010b92:	00db      	lsls	r3, r3, #3
 8010b94:	440b      	add	r3, r1
 8010b96:	3308      	adds	r3, #8
 8010b98:	6818      	ldr	r0, [r3, #0]
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	005b      	lsls	r3, r3, #1
 8010ba0:	4413      	add	r3, r2
 8010ba2:	00db      	lsls	r3, r3, #3
 8010ba4:	4a08      	ldr	r2, [pc, #32]	; (8010bc8 <etharp_tmr+0x14c>)
 8010ba6:	4413      	add	r3, r2
 8010ba8:	3304      	adds	r3, #4
 8010baa:	4619      	mov	r1, r3
 8010bac:	f000 fe6e 	bl	801188c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	3301      	adds	r3, #1
 8010bb4:	607b      	str	r3, [r7, #4]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	2b09      	cmp	r3, #9
 8010bba:	f77f af65 	ble.w	8010a88 <etharp_tmr+0xc>
      }
    }
  }
}
 8010bbe:	bf00      	nop
 8010bc0:	bf00      	nop
 8010bc2:	3708      	adds	r7, #8
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	bd80      	pop	{r7, pc}
 8010bc8:	20000308 	.word	0x20000308

08010bcc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b08a      	sub	sp, #40	; 0x28
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	607a      	str	r2, [r7, #4]
 8010bd8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010bda:	230a      	movs	r3, #10
 8010bdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010bde:	230a      	movs	r3, #10
 8010be0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010be2:	230a      	movs	r3, #10
 8010be4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8010be6:	2300      	movs	r3, #0
 8010be8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8010bea:	230a      	movs	r3, #10
 8010bec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	83bb      	strh	r3, [r7, #28]
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	837b      	strh	r3, [r7, #26]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	843b      	strh	r3, [r7, #32]
 8010bfe:	e0ae      	b.n	8010d5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010c00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c04:	49a6      	ldr	r1, [pc, #664]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010c06:	4613      	mov	r3, r2
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	00db      	lsls	r3, r3, #3
 8010c0e:	440b      	add	r3, r1
 8010c10:	3314      	adds	r3, #20
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010c16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010c1a:	2b0a      	cmp	r3, #10
 8010c1c:	d105      	bne.n	8010c2a <etharp_find_entry+0x5e>
 8010c1e:	7dfb      	ldrb	r3, [r7, #23]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d102      	bne.n	8010c2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010c24:	8c3b      	ldrh	r3, [r7, #32]
 8010c26:	847b      	strh	r3, [r7, #34]	; 0x22
 8010c28:	e095      	b.n	8010d56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010c2a:	7dfb      	ldrb	r3, [r7, #23]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f000 8092 	beq.w	8010d56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010c32:	7dfb      	ldrb	r3, [r7, #23]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d009      	beq.n	8010c4c <etharp_find_entry+0x80>
 8010c38:	7dfb      	ldrb	r3, [r7, #23]
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d806      	bhi.n	8010c4c <etharp_find_entry+0x80>
 8010c3e:	4b99      	ldr	r3, [pc, #612]	; (8010ea4 <etharp_find_entry+0x2d8>)
 8010c40:	f240 1223 	movw	r2, #291	; 0x123
 8010c44:	4998      	ldr	r1, [pc, #608]	; (8010ea8 <etharp_find_entry+0x2dc>)
 8010c46:	4899      	ldr	r0, [pc, #612]	; (8010eac <etharp_find_entry+0x2e0>)
 8010c48:	f002 ff2e 	bl	8013aa8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d020      	beq.n	8010c94 <etharp_find_entry+0xc8>
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	6819      	ldr	r1, [r3, #0]
 8010c56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c5a:	4891      	ldr	r0, [pc, #580]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	005b      	lsls	r3, r3, #1
 8010c60:	4413      	add	r3, r2
 8010c62:	00db      	lsls	r3, r3, #3
 8010c64:	4403      	add	r3, r0
 8010c66:	3304      	adds	r3, #4
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	4299      	cmp	r1, r3
 8010c6c:	d112      	bne.n	8010c94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d00c      	beq.n	8010c8e <etharp_find_entry+0xc2>
 8010c74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c78:	4989      	ldr	r1, [pc, #548]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	005b      	lsls	r3, r3, #1
 8010c7e:	4413      	add	r3, r2
 8010c80:	00db      	lsls	r3, r3, #3
 8010c82:	440b      	add	r3, r1
 8010c84:	3308      	adds	r3, #8
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d102      	bne.n	8010c94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010c8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c92:	e100      	b.n	8010e96 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010c94:	7dfb      	ldrb	r3, [r7, #23]
 8010c96:	2b01      	cmp	r3, #1
 8010c98:	d140      	bne.n	8010d1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010c9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c9e:	4980      	ldr	r1, [pc, #512]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	005b      	lsls	r3, r3, #1
 8010ca4:	4413      	add	r3, r2
 8010ca6:	00db      	lsls	r3, r3, #3
 8010ca8:	440b      	add	r3, r1
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d01a      	beq.n	8010ce6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010cb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cb4:	497a      	ldr	r1, [pc, #488]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	005b      	lsls	r3, r3, #1
 8010cba:	4413      	add	r3, r2
 8010cbc:	00db      	lsls	r3, r3, #3
 8010cbe:	440b      	add	r3, r1
 8010cc0:	3312      	adds	r3, #18
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	8bba      	ldrh	r2, [r7, #28]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d845      	bhi.n	8010d56 <etharp_find_entry+0x18a>
            old_queue = i;
 8010cca:	8c3b      	ldrh	r3, [r7, #32]
 8010ccc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010cce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cd2:	4973      	ldr	r1, [pc, #460]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	4413      	add	r3, r2
 8010cda:	00db      	lsls	r3, r3, #3
 8010cdc:	440b      	add	r3, r1
 8010cde:	3312      	adds	r3, #18
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	83bb      	strh	r3, [r7, #28]
 8010ce4:	e037      	b.n	8010d56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010ce6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010cea:	496d      	ldr	r1, [pc, #436]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010cec:	4613      	mov	r3, r2
 8010cee:	005b      	lsls	r3, r3, #1
 8010cf0:	4413      	add	r3, r2
 8010cf2:	00db      	lsls	r3, r3, #3
 8010cf4:	440b      	add	r3, r1
 8010cf6:	3312      	adds	r3, #18
 8010cf8:	881b      	ldrh	r3, [r3, #0]
 8010cfa:	8b7a      	ldrh	r2, [r7, #26]
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d82a      	bhi.n	8010d56 <etharp_find_entry+0x18a>
            old_pending = i;
 8010d00:	8c3b      	ldrh	r3, [r7, #32]
 8010d02:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010d04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d08:	4965      	ldr	r1, [pc, #404]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	005b      	lsls	r3, r3, #1
 8010d0e:	4413      	add	r3, r2
 8010d10:	00db      	lsls	r3, r3, #3
 8010d12:	440b      	add	r3, r1
 8010d14:	3312      	adds	r3, #18
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	837b      	strh	r3, [r7, #26]
 8010d1a:	e01c      	b.n	8010d56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010d1c:	7dfb      	ldrb	r3, [r7, #23]
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d919      	bls.n	8010d56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010d22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d26:	495e      	ldr	r1, [pc, #376]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010d28:	4613      	mov	r3, r2
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	4413      	add	r3, r2
 8010d2e:	00db      	lsls	r3, r3, #3
 8010d30:	440b      	add	r3, r1
 8010d32:	3312      	adds	r3, #18
 8010d34:	881b      	ldrh	r3, [r3, #0]
 8010d36:	8b3a      	ldrh	r2, [r7, #24]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d80c      	bhi.n	8010d56 <etharp_find_entry+0x18a>
            old_stable = i;
 8010d3c:	8c3b      	ldrh	r3, [r7, #32]
 8010d3e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010d40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010d44:	4956      	ldr	r1, [pc, #344]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010d46:	4613      	mov	r3, r2
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	4413      	add	r3, r2
 8010d4c:	00db      	lsls	r3, r3, #3
 8010d4e:	440b      	add	r3, r1
 8010d50:	3312      	adds	r3, #18
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010d56:	8c3b      	ldrh	r3, [r7, #32]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	843b      	strh	r3, [r7, #32]
 8010d5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010d62:	2b09      	cmp	r3, #9
 8010d64:	f77f af4c 	ble.w	8010c00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010d68:	7afb      	ldrb	r3, [r7, #11]
 8010d6a:	f003 0302 	and.w	r3, r3, #2
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d108      	bne.n	8010d84 <etharp_find_entry+0x1b8>
 8010d72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d76:	2b0a      	cmp	r3, #10
 8010d78:	d107      	bne.n	8010d8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010d7a:	7afb      	ldrb	r3, [r7, #11]
 8010d7c:	f003 0301 	and.w	r3, r3, #1
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d102      	bne.n	8010d8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010d84:	f04f 33ff 	mov.w	r3, #4294967295
 8010d88:	e085      	b.n	8010e96 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010d8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010d8e:	2b09      	cmp	r3, #9
 8010d90:	dc02      	bgt.n	8010d98 <etharp_find_entry+0x1cc>
    i = empty;
 8010d92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010d94:	843b      	strh	r3, [r7, #32]
 8010d96:	e039      	b.n	8010e0c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010d98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010d9c:	2b09      	cmp	r3, #9
 8010d9e:	dc14      	bgt.n	8010dca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010da2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010da4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010da8:	493d      	ldr	r1, [pc, #244]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010daa:	4613      	mov	r3, r2
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	4413      	add	r3, r2
 8010db0:	00db      	lsls	r3, r3, #3
 8010db2:	440b      	add	r3, r1
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d018      	beq.n	8010dec <etharp_find_entry+0x220>
 8010dba:	4b3a      	ldr	r3, [pc, #232]	; (8010ea4 <etharp_find_entry+0x2d8>)
 8010dbc:	f240 126d 	movw	r2, #365	; 0x16d
 8010dc0:	493b      	ldr	r1, [pc, #236]	; (8010eb0 <etharp_find_entry+0x2e4>)
 8010dc2:	483a      	ldr	r0, [pc, #232]	; (8010eac <etharp_find_entry+0x2e0>)
 8010dc4:	f002 fe70 	bl	8013aa8 <iprintf>
 8010dc8:	e010      	b.n	8010dec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010dca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010dce:	2b09      	cmp	r3, #9
 8010dd0:	dc02      	bgt.n	8010dd8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010dd4:	843b      	strh	r3, [r7, #32]
 8010dd6:	e009      	b.n	8010dec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010dd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010ddc:	2b09      	cmp	r3, #9
 8010dde:	dc02      	bgt.n	8010de6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010de0:	8bfb      	ldrh	r3, [r7, #30]
 8010de2:	843b      	strh	r3, [r7, #32]
 8010de4:	e002      	b.n	8010dec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010de6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dea:	e054      	b.n	8010e96 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010dec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010df0:	2b09      	cmp	r3, #9
 8010df2:	dd06      	ble.n	8010e02 <etharp_find_entry+0x236>
 8010df4:	4b2b      	ldr	r3, [pc, #172]	; (8010ea4 <etharp_find_entry+0x2d8>)
 8010df6:	f240 127f 	movw	r2, #383	; 0x17f
 8010dfa:	492e      	ldr	r1, [pc, #184]	; (8010eb4 <etharp_find_entry+0x2e8>)
 8010dfc:	482b      	ldr	r0, [pc, #172]	; (8010eac <etharp_find_entry+0x2e0>)
 8010dfe:	f002 fe53 	bl	8013aa8 <iprintf>
    etharp_free_entry(i);
 8010e02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7ff fe06 	bl	8010a18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010e0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010e10:	2b09      	cmp	r3, #9
 8010e12:	dd06      	ble.n	8010e22 <etharp_find_entry+0x256>
 8010e14:	4b23      	ldr	r3, [pc, #140]	; (8010ea4 <etharp_find_entry+0x2d8>)
 8010e16:	f240 1283 	movw	r2, #387	; 0x183
 8010e1a:	4926      	ldr	r1, [pc, #152]	; (8010eb4 <etharp_find_entry+0x2e8>)
 8010e1c:	4823      	ldr	r0, [pc, #140]	; (8010eac <etharp_find_entry+0x2e0>)
 8010e1e:	f002 fe43 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010e22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e26:	491e      	ldr	r1, [pc, #120]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010e28:	4613      	mov	r3, r2
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	4413      	add	r3, r2
 8010e2e:	00db      	lsls	r3, r3, #3
 8010e30:	440b      	add	r3, r1
 8010e32:	3314      	adds	r3, #20
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d006      	beq.n	8010e48 <etharp_find_entry+0x27c>
 8010e3a:	4b1a      	ldr	r3, [pc, #104]	; (8010ea4 <etharp_find_entry+0x2d8>)
 8010e3c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010e40:	491d      	ldr	r1, [pc, #116]	; (8010eb8 <etharp_find_entry+0x2ec>)
 8010e42:	481a      	ldr	r0, [pc, #104]	; (8010eac <etharp_find_entry+0x2e0>)
 8010e44:	f002 fe30 	bl	8013aa8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00b      	beq.n	8010e66 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010e4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	6819      	ldr	r1, [r3, #0]
 8010e56:	4812      	ldr	r0, [pc, #72]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010e58:	4613      	mov	r3, r2
 8010e5a:	005b      	lsls	r3, r3, #1
 8010e5c:	4413      	add	r3, r2
 8010e5e:	00db      	lsls	r3, r3, #3
 8010e60:	4403      	add	r3, r0
 8010e62:	3304      	adds	r3, #4
 8010e64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010e66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e6a:	490d      	ldr	r1, [pc, #52]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	005b      	lsls	r3, r3, #1
 8010e70:	4413      	add	r3, r2
 8010e72:	00db      	lsls	r3, r3, #3
 8010e74:	440b      	add	r3, r1
 8010e76:	3312      	adds	r3, #18
 8010e78:	2200      	movs	r2, #0
 8010e7a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010e7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010e80:	4907      	ldr	r1, [pc, #28]	; (8010ea0 <etharp_find_entry+0x2d4>)
 8010e82:	4613      	mov	r3, r2
 8010e84:	005b      	lsls	r3, r3, #1
 8010e86:	4413      	add	r3, r2
 8010e88:	00db      	lsls	r3, r3, #3
 8010e8a:	440b      	add	r3, r1
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	687a      	ldr	r2, [r7, #4]
 8010e90:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010e92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3728      	adds	r7, #40	; 0x28
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	20000308 	.word	0x20000308
 8010ea4:	080194d0 	.word	0x080194d0
 8010ea8:	08019508 	.word	0x08019508
 8010eac:	08019548 	.word	0x08019548
 8010eb0:	08019570 	.word	0x08019570
 8010eb4:	08019588 	.word	0x08019588
 8010eb8:	0801959c 	.word	0x0801959c

08010ebc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b088      	sub	sp, #32
 8010ec0:	af02      	add	r7, sp, #8
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
 8010ec8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ed0:	2b06      	cmp	r3, #6
 8010ed2:	d006      	beq.n	8010ee2 <etharp_update_arp_entry+0x26>
 8010ed4:	4b48      	ldr	r3, [pc, #288]	; (8010ff8 <etharp_update_arp_entry+0x13c>)
 8010ed6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010eda:	4948      	ldr	r1, [pc, #288]	; (8010ffc <etharp_update_arp_entry+0x140>)
 8010edc:	4848      	ldr	r0, [pc, #288]	; (8011000 <etharp_update_arp_entry+0x144>)
 8010ede:	f002 fde3 	bl	8013aa8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d012      	beq.n	8010f0e <etharp_update_arp_entry+0x52>
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00e      	beq.n	8010f0e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	68f9      	ldr	r1, [r7, #12]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f001 f8fc 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 8010efc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d105      	bne.n	8010f0e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010f0a:	2be0      	cmp	r3, #224	; 0xe0
 8010f0c:	d102      	bne.n	8010f14 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010f0e:	f06f 030f 	mvn.w	r3, #15
 8010f12:	e06c      	b.n	8010fee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010f14:	78fb      	ldrb	r3, [r7, #3]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	4619      	mov	r1, r3
 8010f1a:	68b8      	ldr	r0, [r7, #8]
 8010f1c:	f7ff fe56 	bl	8010bcc <etharp_find_entry>
 8010f20:	4603      	mov	r3, r0
 8010f22:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010f24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	da02      	bge.n	8010f32 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010f2c:	8afb      	ldrh	r3, [r7, #22]
 8010f2e:	b25b      	sxtb	r3, r3
 8010f30:	e05d      	b.n	8010fee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010f32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f36:	4933      	ldr	r1, [pc, #204]	; (8011004 <etharp_update_arp_entry+0x148>)
 8010f38:	4613      	mov	r3, r2
 8010f3a:	005b      	lsls	r3, r3, #1
 8010f3c:	4413      	add	r3, r2
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	440b      	add	r3, r1
 8010f42:	3314      	adds	r3, #20
 8010f44:	2202      	movs	r2, #2
 8010f46:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010f48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f4c:	492d      	ldr	r1, [pc, #180]	; (8011004 <etharp_update_arp_entry+0x148>)
 8010f4e:	4613      	mov	r3, r2
 8010f50:	005b      	lsls	r3, r3, #1
 8010f52:	4413      	add	r3, r2
 8010f54:	00db      	lsls	r3, r3, #3
 8010f56:	440b      	add	r3, r1
 8010f58:	3308      	adds	r3, #8
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010f5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f62:	4613      	mov	r3, r2
 8010f64:	005b      	lsls	r3, r3, #1
 8010f66:	4413      	add	r3, r2
 8010f68:	00db      	lsls	r3, r3, #3
 8010f6a:	3308      	adds	r3, #8
 8010f6c:	4a25      	ldr	r2, [pc, #148]	; (8011004 <etharp_update_arp_entry+0x148>)
 8010f6e:	4413      	add	r3, r2
 8010f70:	3304      	adds	r3, #4
 8010f72:	2206      	movs	r2, #6
 8010f74:	6879      	ldr	r1, [r7, #4]
 8010f76:	4618      	mov	r0, r3
 8010f78:	f002 f852 	bl	8013020 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f80:	4920      	ldr	r1, [pc, #128]	; (8011004 <etharp_update_arp_entry+0x148>)
 8010f82:	4613      	mov	r3, r2
 8010f84:	005b      	lsls	r3, r3, #1
 8010f86:	4413      	add	r3, r2
 8010f88:	00db      	lsls	r3, r3, #3
 8010f8a:	440b      	add	r3, r1
 8010f8c:	3312      	adds	r3, #18
 8010f8e:	2200      	movs	r2, #0
 8010f90:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010f92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010f96:	491b      	ldr	r1, [pc, #108]	; (8011004 <etharp_update_arp_entry+0x148>)
 8010f98:	4613      	mov	r3, r2
 8010f9a:	005b      	lsls	r3, r3, #1
 8010f9c:	4413      	add	r3, r2
 8010f9e:	00db      	lsls	r3, r3, #3
 8010fa0:	440b      	add	r3, r1
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d021      	beq.n	8010fec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010fa8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fac:	4915      	ldr	r1, [pc, #84]	; (8011004 <etharp_update_arp_entry+0x148>)
 8010fae:	4613      	mov	r3, r2
 8010fb0:	005b      	lsls	r3, r3, #1
 8010fb2:	4413      	add	r3, r2
 8010fb4:	00db      	lsls	r3, r3, #3
 8010fb6:	440b      	add	r3, r1
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010fbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010fc0:	4910      	ldr	r1, [pc, #64]	; (8011004 <etharp_update_arp_entry+0x148>)
 8010fc2:	4613      	mov	r3, r2
 8010fc4:	005b      	lsls	r3, r3, #1
 8010fc6:	4413      	add	r3, r2
 8010fc8:	00db      	lsls	r3, r3, #3
 8010fca:	440b      	add	r3, r1
 8010fcc:	2200      	movs	r2, #0
 8010fce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8010fd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6939      	ldr	r1, [r7, #16]
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f001 ff8f 	bl	8012f04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010fe6:	6938      	ldr	r0, [r7, #16]
 8010fe8:	f7f9 fa3a 	bl	800a460 <pbuf_free>
  }
  return ERR_OK;
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3718      	adds	r7, #24
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	080194d0 	.word	0x080194d0
 8010ffc:	080195c8 	.word	0x080195c8
 8011000:	08019548 	.word	0x08019548
 8011004:	20000308 	.word	0x20000308

08011008 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011010:	2300      	movs	r3, #0
 8011012:	60fb      	str	r3, [r7, #12]
 8011014:	e01e      	b.n	8011054 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011016:	4913      	ldr	r1, [pc, #76]	; (8011064 <etharp_cleanup_netif+0x5c>)
 8011018:	68fa      	ldr	r2, [r7, #12]
 801101a:	4613      	mov	r3, r2
 801101c:	005b      	lsls	r3, r3, #1
 801101e:	4413      	add	r3, r2
 8011020:	00db      	lsls	r3, r3, #3
 8011022:	440b      	add	r3, r1
 8011024:	3314      	adds	r3, #20
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801102a:	7afb      	ldrb	r3, [r7, #11]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d00e      	beq.n	801104e <etharp_cleanup_netif+0x46>
 8011030:	490c      	ldr	r1, [pc, #48]	; (8011064 <etharp_cleanup_netif+0x5c>)
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	4613      	mov	r3, r2
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	4413      	add	r3, r2
 801103a:	00db      	lsls	r3, r3, #3
 801103c:	440b      	add	r3, r1
 801103e:	3308      	adds	r3, #8
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	429a      	cmp	r2, r3
 8011046:	d102      	bne.n	801104e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011048:	68f8      	ldr	r0, [r7, #12]
 801104a:	f7ff fce5 	bl	8010a18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3301      	adds	r3, #1
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2b09      	cmp	r3, #9
 8011058:	dddd      	ble.n	8011016 <etharp_cleanup_netif+0xe>
    }
  }
}
 801105a:	bf00      	nop
 801105c:	bf00      	nop
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}
 8011064:	20000308 	.word	0x20000308

08011068 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011068:	b5b0      	push	{r4, r5, r7, lr}
 801106a:	b08a      	sub	sp, #40	; 0x28
 801106c:	af04      	add	r7, sp, #16
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d107      	bne.n	8011088 <etharp_input+0x20>
 8011078:	4b3d      	ldr	r3, [pc, #244]	; (8011170 <etharp_input+0x108>)
 801107a:	f240 228a 	movw	r2, #650	; 0x28a
 801107e:	493d      	ldr	r1, [pc, #244]	; (8011174 <etharp_input+0x10c>)
 8011080:	483d      	ldr	r0, [pc, #244]	; (8011178 <etharp_input+0x110>)
 8011082:	f002 fd11 	bl	8013aa8 <iprintf>
 8011086:	e06f      	b.n	8011168 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	881b      	ldrh	r3, [r3, #0]
 8011092:	b29b      	uxth	r3, r3
 8011094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011098:	d10c      	bne.n	80110b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801109e:	2b06      	cmp	r3, #6
 80110a0:	d108      	bne.n	80110b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80110a6:	2b04      	cmp	r3, #4
 80110a8:	d104      	bne.n	80110b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	885b      	ldrh	r3, [r3, #2]
 80110ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80110b0:	2b08      	cmp	r3, #8
 80110b2:	d003      	beq.n	80110bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7f9 f9d3 	bl	800a460 <pbuf_free>
    return;
 80110ba:	e055      	b.n	8011168 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	330e      	adds	r3, #14
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	3318      	adds	r3, #24
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	3304      	adds	r3, #4
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d102      	bne.n	80110dc <etharp_input+0x74>
    for_us = 0;
 80110d6:	2300      	movs	r3, #0
 80110d8:	75fb      	strb	r3, [r7, #23]
 80110da:	e009      	b.n	80110f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	3304      	adds	r3, #4
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	bf0c      	ite	eq
 80110e8:	2301      	moveq	r3, #1
 80110ea:	2300      	movne	r3, #0
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	f103 0208 	add.w	r2, r3, #8
 80110f6:	7dfb      	ldrb	r3, [r7, #23]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <etharp_input+0x98>
 80110fc:	2301      	movs	r3, #1
 80110fe:	e000      	b.n	8011102 <etharp_input+0x9a>
 8011100:	2302      	movs	r3, #2
 8011102:	f107 010c 	add.w	r1, r7, #12
 8011106:	6838      	ldr	r0, [r7, #0]
 8011108:	f7ff fed8 	bl	8010ebc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	88db      	ldrh	r3, [r3, #6]
 8011110:	b29b      	uxth	r3, r3
 8011112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011116:	d003      	beq.n	8011120 <etharp_input+0xb8>
 8011118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801111c:	d01e      	beq.n	801115c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801111e:	e020      	b.n	8011162 <etharp_input+0xfa>
      if (for_us) {
 8011120:	7dfb      	ldrb	r3, [r7, #23]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d01c      	beq.n	8011160 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801113c:	693a      	ldr	r2, [r7, #16]
 801113e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011140:	2102      	movs	r1, #2
 8011142:	9103      	str	r1, [sp, #12]
 8011144:	f107 010c 	add.w	r1, r7, #12
 8011148:	9102      	str	r1, [sp, #8]
 801114a:	9201      	str	r2, [sp, #4]
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	462b      	mov	r3, r5
 8011150:	4622      	mov	r2, r4
 8011152:	4601      	mov	r1, r0
 8011154:	6838      	ldr	r0, [r7, #0]
 8011156:	f000 faeb 	bl	8011730 <etharp_raw>
      break;
 801115a:	e001      	b.n	8011160 <etharp_input+0xf8>
      break;
 801115c:	bf00      	nop
 801115e:	e000      	b.n	8011162 <etharp_input+0xfa>
      break;
 8011160:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f7f9 f97c 	bl	800a460 <pbuf_free>
}
 8011168:	3718      	adds	r7, #24
 801116a:	46bd      	mov	sp, r7
 801116c:	bdb0      	pop	{r4, r5, r7, pc}
 801116e:	bf00      	nop
 8011170:	080194d0 	.word	0x080194d0
 8011174:	08019620 	.word	0x08019620
 8011178:	08019548 	.word	0x08019548

0801117c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b086      	sub	sp, #24
 8011180:	af02      	add	r7, sp, #8
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	4613      	mov	r3, r2
 8011188:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801118a:	79fa      	ldrb	r2, [r7, #7]
 801118c:	4944      	ldr	r1, [pc, #272]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 801118e:	4613      	mov	r3, r2
 8011190:	005b      	lsls	r3, r3, #1
 8011192:	4413      	add	r3, r2
 8011194:	00db      	lsls	r3, r3, #3
 8011196:	440b      	add	r3, r1
 8011198:	3314      	adds	r3, #20
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	2b01      	cmp	r3, #1
 801119e:	d806      	bhi.n	80111ae <etharp_output_to_arp_index+0x32>
 80111a0:	4b40      	ldr	r3, [pc, #256]	; (80112a4 <etharp_output_to_arp_index+0x128>)
 80111a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80111a6:	4940      	ldr	r1, [pc, #256]	; (80112a8 <etharp_output_to_arp_index+0x12c>)
 80111a8:	4840      	ldr	r0, [pc, #256]	; (80112ac <etharp_output_to_arp_index+0x130>)
 80111aa:	f002 fc7d 	bl	8013aa8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80111ae:	79fa      	ldrb	r2, [r7, #7]
 80111b0:	493b      	ldr	r1, [pc, #236]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 80111b2:	4613      	mov	r3, r2
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	4413      	add	r3, r2
 80111b8:	00db      	lsls	r3, r3, #3
 80111ba:	440b      	add	r3, r1
 80111bc:	3314      	adds	r3, #20
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	2b02      	cmp	r3, #2
 80111c2:	d153      	bne.n	801126c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80111c4:	79fa      	ldrb	r2, [r7, #7]
 80111c6:	4936      	ldr	r1, [pc, #216]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 80111c8:	4613      	mov	r3, r2
 80111ca:	005b      	lsls	r3, r3, #1
 80111cc:	4413      	add	r3, r2
 80111ce:	00db      	lsls	r3, r3, #3
 80111d0:	440b      	add	r3, r1
 80111d2:	3312      	adds	r3, #18
 80111d4:	881b      	ldrh	r3, [r3, #0]
 80111d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80111da:	d919      	bls.n	8011210 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80111dc:	79fa      	ldrb	r2, [r7, #7]
 80111de:	4613      	mov	r3, r2
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	4413      	add	r3, r2
 80111e4:	00db      	lsls	r3, r3, #3
 80111e6:	4a2e      	ldr	r2, [pc, #184]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 80111e8:	4413      	add	r3, r2
 80111ea:	3304      	adds	r3, #4
 80111ec:	4619      	mov	r1, r3
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f000 fb4c 	bl	801188c <etharp_request>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d138      	bne.n	801126c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80111fa:	79fa      	ldrb	r2, [r7, #7]
 80111fc:	4928      	ldr	r1, [pc, #160]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 80111fe:	4613      	mov	r3, r2
 8011200:	005b      	lsls	r3, r3, #1
 8011202:	4413      	add	r3, r2
 8011204:	00db      	lsls	r3, r3, #3
 8011206:	440b      	add	r3, r1
 8011208:	3314      	adds	r3, #20
 801120a:	2203      	movs	r2, #3
 801120c:	701a      	strb	r2, [r3, #0]
 801120e:	e02d      	b.n	801126c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011210:	79fa      	ldrb	r2, [r7, #7]
 8011212:	4923      	ldr	r1, [pc, #140]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 8011214:	4613      	mov	r3, r2
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	4413      	add	r3, r2
 801121a:	00db      	lsls	r3, r3, #3
 801121c:	440b      	add	r3, r1
 801121e:	3312      	adds	r3, #18
 8011220:	881b      	ldrh	r3, [r3, #0]
 8011222:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011226:	d321      	bcc.n	801126c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011228:	79fa      	ldrb	r2, [r7, #7]
 801122a:	4613      	mov	r3, r2
 801122c:	005b      	lsls	r3, r3, #1
 801122e:	4413      	add	r3, r2
 8011230:	00db      	lsls	r3, r3, #3
 8011232:	4a1b      	ldr	r2, [pc, #108]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 8011234:	4413      	add	r3, r2
 8011236:	1d19      	adds	r1, r3, #4
 8011238:	79fa      	ldrb	r2, [r7, #7]
 801123a:	4613      	mov	r3, r2
 801123c:	005b      	lsls	r3, r3, #1
 801123e:	4413      	add	r3, r2
 8011240:	00db      	lsls	r3, r3, #3
 8011242:	3308      	adds	r3, #8
 8011244:	4a16      	ldr	r2, [pc, #88]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 8011246:	4413      	add	r3, r2
 8011248:	3304      	adds	r3, #4
 801124a:	461a      	mov	r2, r3
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f000 fafb 	bl	8011848 <etharp_request_dst>
 8011252:	4603      	mov	r3, r0
 8011254:	2b00      	cmp	r3, #0
 8011256:	d109      	bne.n	801126c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011258:	79fa      	ldrb	r2, [r7, #7]
 801125a:	4911      	ldr	r1, [pc, #68]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 801125c:	4613      	mov	r3, r2
 801125e:	005b      	lsls	r3, r3, #1
 8011260:	4413      	add	r3, r2
 8011262:	00db      	lsls	r3, r3, #3
 8011264:	440b      	add	r3, r1
 8011266:	3314      	adds	r3, #20
 8011268:	2203      	movs	r2, #3
 801126a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011272:	79fa      	ldrb	r2, [r7, #7]
 8011274:	4613      	mov	r3, r2
 8011276:	005b      	lsls	r3, r3, #1
 8011278:	4413      	add	r3, r2
 801127a:	00db      	lsls	r3, r3, #3
 801127c:	3308      	adds	r3, #8
 801127e:	4a08      	ldr	r2, [pc, #32]	; (80112a0 <etharp_output_to_arp_index+0x124>)
 8011280:	4413      	add	r3, r2
 8011282:	3304      	adds	r3, #4
 8011284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011288:	9200      	str	r2, [sp, #0]
 801128a:	460a      	mov	r2, r1
 801128c:	68b9      	ldr	r1, [r7, #8]
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f001 fe38 	bl	8012f04 <ethernet_output>
 8011294:	4603      	mov	r3, r0
}
 8011296:	4618      	mov	r0, r3
 8011298:	3710      	adds	r7, #16
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	20000308 	.word	0x20000308
 80112a4:	080194d0 	.word	0x080194d0
 80112a8:	08019640 	.word	0x08019640
 80112ac:	08019548 	.word	0x08019548

080112b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b08a      	sub	sp, #40	; 0x28
 80112b4:	af02      	add	r7, sp, #8
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d106      	bne.n	80112d4 <etharp_output+0x24>
 80112c6:	4b73      	ldr	r3, [pc, #460]	; (8011494 <etharp_output+0x1e4>)
 80112c8:	f240 321e 	movw	r2, #798	; 0x31e
 80112cc:	4972      	ldr	r1, [pc, #456]	; (8011498 <etharp_output+0x1e8>)
 80112ce:	4873      	ldr	r0, [pc, #460]	; (801149c <etharp_output+0x1ec>)
 80112d0:	f002 fbea 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d106      	bne.n	80112e8 <etharp_output+0x38>
 80112da:	4b6e      	ldr	r3, [pc, #440]	; (8011494 <etharp_output+0x1e4>)
 80112dc:	f240 321f 	movw	r2, #799	; 0x31f
 80112e0:	496f      	ldr	r1, [pc, #444]	; (80114a0 <etharp_output+0x1f0>)
 80112e2:	486e      	ldr	r0, [pc, #440]	; (801149c <etharp_output+0x1ec>)
 80112e4:	f002 fbe0 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d106      	bne.n	80112fc <etharp_output+0x4c>
 80112ee:	4b69      	ldr	r3, [pc, #420]	; (8011494 <etharp_output+0x1e4>)
 80112f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80112f4:	496b      	ldr	r1, [pc, #428]	; (80114a4 <etharp_output+0x1f4>)
 80112f6:	4869      	ldr	r0, [pc, #420]	; (801149c <etharp_output+0x1ec>)
 80112f8:	f002 fbd6 	bl	8013aa8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	68f9      	ldr	r1, [r7, #12]
 8011302:	4618      	mov	r0, r3
 8011304:	f000 fef6 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d002      	beq.n	8011314 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801130e:	4b66      	ldr	r3, [pc, #408]	; (80114a8 <etharp_output+0x1f8>)
 8011310:	61fb      	str	r3, [r7, #28]
 8011312:	e0af      	b.n	8011474 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801131c:	2be0      	cmp	r3, #224	; 0xe0
 801131e:	d118      	bne.n	8011352 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011320:	2301      	movs	r3, #1
 8011322:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011324:	2300      	movs	r3, #0
 8011326:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011328:	235e      	movs	r3, #94	; 0x5e
 801132a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3301      	adds	r3, #1
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011336:	b2db      	uxtb	r3, r3
 8011338:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	3302      	adds	r3, #2
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	3303      	adds	r3, #3
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801134a:	f107 0310 	add.w	r3, r7, #16
 801134e:	61fb      	str	r3, [r7, #28]
 8011350:	e090      	b.n	8011474 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	3304      	adds	r3, #4
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	405a      	eors	r2, r3
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	3308      	adds	r3, #8
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	4013      	ands	r3, r2
 8011366:	2b00      	cmp	r3, #0
 8011368:	d012      	beq.n	8011390 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011370:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011374:	4293      	cmp	r3, r2
 8011376:	d00b      	beq.n	8011390 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	330c      	adds	r3, #12
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d003      	beq.n	801138a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	330c      	adds	r3, #12
 8011386:	61bb      	str	r3, [r7, #24]
 8011388:	e002      	b.n	8011390 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801138a:	f06f 0303 	mvn.w	r3, #3
 801138e:	e07d      	b.n	801148c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011390:	4b46      	ldr	r3, [pc, #280]	; (80114ac <etharp_output+0x1fc>)
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	4619      	mov	r1, r3
 8011396:	4a46      	ldr	r2, [pc, #280]	; (80114b0 <etharp_output+0x200>)
 8011398:	460b      	mov	r3, r1
 801139a:	005b      	lsls	r3, r3, #1
 801139c:	440b      	add	r3, r1
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	4413      	add	r3, r2
 80113a2:	3314      	adds	r3, #20
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d925      	bls.n	80113f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80113aa:	4b40      	ldr	r3, [pc, #256]	; (80114ac <etharp_output+0x1fc>)
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	4619      	mov	r1, r3
 80113b0:	4a3f      	ldr	r2, [pc, #252]	; (80114b0 <etharp_output+0x200>)
 80113b2:	460b      	mov	r3, r1
 80113b4:	005b      	lsls	r3, r3, #1
 80113b6:	440b      	add	r3, r1
 80113b8:	00db      	lsls	r3, r3, #3
 80113ba:	4413      	add	r3, r2
 80113bc:	3308      	adds	r3, #8
 80113be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80113c0:	68fa      	ldr	r2, [r7, #12]
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d117      	bne.n	80113f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	4b38      	ldr	r3, [pc, #224]	; (80114ac <etharp_output+0x1fc>)
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	4618      	mov	r0, r3
 80113d0:	4937      	ldr	r1, [pc, #220]	; (80114b0 <etharp_output+0x200>)
 80113d2:	4603      	mov	r3, r0
 80113d4:	005b      	lsls	r3, r3, #1
 80113d6:	4403      	add	r3, r0
 80113d8:	00db      	lsls	r3, r3, #3
 80113da:	440b      	add	r3, r1
 80113dc:	3304      	adds	r3, #4
 80113de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d108      	bne.n	80113f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80113e4:	4b31      	ldr	r3, [pc, #196]	; (80114ac <etharp_output+0x1fc>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	461a      	mov	r2, r3
 80113ea:	68b9      	ldr	r1, [r7, #8]
 80113ec:	68f8      	ldr	r0, [r7, #12]
 80113ee:	f7ff fec5 	bl	801117c <etharp_output_to_arp_index>
 80113f2:	4603      	mov	r3, r0
 80113f4:	e04a      	b.n	801148c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80113f6:	2300      	movs	r3, #0
 80113f8:	75fb      	strb	r3, [r7, #23]
 80113fa:	e031      	b.n	8011460 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80113fc:	7dfa      	ldrb	r2, [r7, #23]
 80113fe:	492c      	ldr	r1, [pc, #176]	; (80114b0 <etharp_output+0x200>)
 8011400:	4613      	mov	r3, r2
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	4413      	add	r3, r2
 8011406:	00db      	lsls	r3, r3, #3
 8011408:	440b      	add	r3, r1
 801140a:	3314      	adds	r3, #20
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	2b01      	cmp	r3, #1
 8011410:	d923      	bls.n	801145a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011412:	7dfa      	ldrb	r2, [r7, #23]
 8011414:	4926      	ldr	r1, [pc, #152]	; (80114b0 <etharp_output+0x200>)
 8011416:	4613      	mov	r3, r2
 8011418:	005b      	lsls	r3, r3, #1
 801141a:	4413      	add	r3, r2
 801141c:	00db      	lsls	r3, r3, #3
 801141e:	440b      	add	r3, r1
 8011420:	3308      	adds	r3, #8
 8011422:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	429a      	cmp	r2, r3
 8011428:	d117      	bne.n	801145a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	6819      	ldr	r1, [r3, #0]
 801142e:	7dfa      	ldrb	r2, [r7, #23]
 8011430:	481f      	ldr	r0, [pc, #124]	; (80114b0 <etharp_output+0x200>)
 8011432:	4613      	mov	r3, r2
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	4413      	add	r3, r2
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	4403      	add	r3, r0
 801143c:	3304      	adds	r3, #4
 801143e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011440:	4299      	cmp	r1, r3
 8011442:	d10a      	bne.n	801145a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011444:	4a19      	ldr	r2, [pc, #100]	; (80114ac <etharp_output+0x1fc>)
 8011446:	7dfb      	ldrb	r3, [r7, #23]
 8011448:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801144a:	7dfb      	ldrb	r3, [r7, #23]
 801144c:	461a      	mov	r2, r3
 801144e:	68b9      	ldr	r1, [r7, #8]
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f7ff fe93 	bl	801117c <etharp_output_to_arp_index>
 8011456:	4603      	mov	r3, r0
 8011458:	e018      	b.n	801148c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	3301      	adds	r3, #1
 801145e:	75fb      	strb	r3, [r7, #23]
 8011460:	7dfb      	ldrb	r3, [r7, #23]
 8011462:	2b09      	cmp	r3, #9
 8011464:	d9ca      	bls.n	80113fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011466:	68ba      	ldr	r2, [r7, #8]
 8011468:	69b9      	ldr	r1, [r7, #24]
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 f822 	bl	80114b4 <etharp_query>
 8011470:	4603      	mov	r3, r0
 8011472:	e00b      	b.n	801148c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801147a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	68b9      	ldr	r1, [r7, #8]
 8011484:	68f8      	ldr	r0, [r7, #12]
 8011486:	f001 fd3d 	bl	8012f04 <ethernet_output>
 801148a:	4603      	mov	r3, r0
}
 801148c:	4618      	mov	r0, r3
 801148e:	3720      	adds	r7, #32
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}
 8011494:	080194d0 	.word	0x080194d0
 8011498:	08019620 	.word	0x08019620
 801149c:	08019548 	.word	0x08019548
 80114a0:	08019670 	.word	0x08019670
 80114a4:	08019610 	.word	0x08019610
 80114a8:	08019c78 	.word	0x08019c78
 80114ac:	200003f8 	.word	0x200003f8
 80114b0:	20000308 	.word	0x20000308

080114b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b08c      	sub	sp, #48	; 0x30
 80114b8:	af02      	add	r7, sp, #8
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	332a      	adds	r3, #42	; 0x2a
 80114c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80114c6:	23ff      	movs	r3, #255	; 0xff
 80114c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80114cc:	2300      	movs	r3, #0
 80114ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	68f9      	ldr	r1, [r7, #12]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f000 fe0c 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 80114dc:	4603      	mov	r3, r0
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d10c      	bne.n	80114fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80114ea:	2be0      	cmp	r3, #224	; 0xe0
 80114ec:	d006      	beq.n	80114fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d003      	beq.n	80114fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d102      	bne.n	8011502 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80114fc:	f06f 030f 	mvn.w	r3, #15
 8011500:	e101      	b.n	8011706 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	2101      	movs	r1, #1
 8011506:	68b8      	ldr	r0, [r7, #8]
 8011508:	f7ff fb60 	bl	8010bcc <etharp_find_entry>
 801150c:	4603      	mov	r3, r0
 801150e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011514:	2b00      	cmp	r3, #0
 8011516:	da02      	bge.n	801151e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011518:	8a7b      	ldrh	r3, [r7, #18]
 801151a:	b25b      	sxtb	r3, r3
 801151c:	e0f3      	b.n	8011706 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801151e:	8a7b      	ldrh	r3, [r7, #18]
 8011520:	2b7e      	cmp	r3, #126	; 0x7e
 8011522:	d906      	bls.n	8011532 <etharp_query+0x7e>
 8011524:	4b7a      	ldr	r3, [pc, #488]	; (8011710 <etharp_query+0x25c>)
 8011526:	f240 32c1 	movw	r2, #961	; 0x3c1
 801152a:	497a      	ldr	r1, [pc, #488]	; (8011714 <etharp_query+0x260>)
 801152c:	487a      	ldr	r0, [pc, #488]	; (8011718 <etharp_query+0x264>)
 801152e:	f002 fabb 	bl	8013aa8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011532:	8a7b      	ldrh	r3, [r7, #18]
 8011534:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011536:	7c7a      	ldrb	r2, [r7, #17]
 8011538:	4978      	ldr	r1, [pc, #480]	; (801171c <etharp_query+0x268>)
 801153a:	4613      	mov	r3, r2
 801153c:	005b      	lsls	r3, r3, #1
 801153e:	4413      	add	r3, r2
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	440b      	add	r3, r1
 8011544:	3314      	adds	r3, #20
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d115      	bne.n	8011578 <etharp_query+0xc4>
    is_new_entry = 1;
 801154c:	2301      	movs	r3, #1
 801154e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011550:	7c7a      	ldrb	r2, [r7, #17]
 8011552:	4972      	ldr	r1, [pc, #456]	; (801171c <etharp_query+0x268>)
 8011554:	4613      	mov	r3, r2
 8011556:	005b      	lsls	r3, r3, #1
 8011558:	4413      	add	r3, r2
 801155a:	00db      	lsls	r3, r3, #3
 801155c:	440b      	add	r3, r1
 801155e:	3314      	adds	r3, #20
 8011560:	2201      	movs	r2, #1
 8011562:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011564:	7c7a      	ldrb	r2, [r7, #17]
 8011566:	496d      	ldr	r1, [pc, #436]	; (801171c <etharp_query+0x268>)
 8011568:	4613      	mov	r3, r2
 801156a:	005b      	lsls	r3, r3, #1
 801156c:	4413      	add	r3, r2
 801156e:	00db      	lsls	r3, r3, #3
 8011570:	440b      	add	r3, r1
 8011572:	3308      	adds	r3, #8
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011578:	7c7a      	ldrb	r2, [r7, #17]
 801157a:	4968      	ldr	r1, [pc, #416]	; (801171c <etharp_query+0x268>)
 801157c:	4613      	mov	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	4413      	add	r3, r2
 8011582:	00db      	lsls	r3, r3, #3
 8011584:	440b      	add	r3, r1
 8011586:	3314      	adds	r3, #20
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d011      	beq.n	80115b2 <etharp_query+0xfe>
 801158e:	7c7a      	ldrb	r2, [r7, #17]
 8011590:	4962      	ldr	r1, [pc, #392]	; (801171c <etharp_query+0x268>)
 8011592:	4613      	mov	r3, r2
 8011594:	005b      	lsls	r3, r3, #1
 8011596:	4413      	add	r3, r2
 8011598:	00db      	lsls	r3, r3, #3
 801159a:	440b      	add	r3, r1
 801159c:	3314      	adds	r3, #20
 801159e:	781b      	ldrb	r3, [r3, #0]
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d806      	bhi.n	80115b2 <etharp_query+0xfe>
 80115a4:	4b5a      	ldr	r3, [pc, #360]	; (8011710 <etharp_query+0x25c>)
 80115a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80115aa:	495d      	ldr	r1, [pc, #372]	; (8011720 <etharp_query+0x26c>)
 80115ac:	485a      	ldr	r0, [pc, #360]	; (8011718 <etharp_query+0x264>)
 80115ae:	f002 fa7b 	bl	8013aa8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80115b2:	6a3b      	ldr	r3, [r7, #32]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d102      	bne.n	80115be <etharp_query+0x10a>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10c      	bne.n	80115d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80115be:	68b9      	ldr	r1, [r7, #8]
 80115c0:	68f8      	ldr	r0, [r7, #12]
 80115c2:	f000 f963 	bl	801188c <etharp_request>
 80115c6:	4603      	mov	r3, r0
 80115c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d102      	bne.n	80115d8 <etharp_query+0x124>
      return result;
 80115d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80115d6:	e096      	b.n	8011706 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d106      	bne.n	80115ec <etharp_query+0x138>
 80115de:	4b4c      	ldr	r3, [pc, #304]	; (8011710 <etharp_query+0x25c>)
 80115e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80115e4:	494f      	ldr	r1, [pc, #316]	; (8011724 <etharp_query+0x270>)
 80115e6:	484c      	ldr	r0, [pc, #304]	; (8011718 <etharp_query+0x264>)
 80115e8:	f002 fa5e 	bl	8013aa8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80115ec:	7c7a      	ldrb	r2, [r7, #17]
 80115ee:	494b      	ldr	r1, [pc, #300]	; (801171c <etharp_query+0x268>)
 80115f0:	4613      	mov	r3, r2
 80115f2:	005b      	lsls	r3, r3, #1
 80115f4:	4413      	add	r3, r2
 80115f6:	00db      	lsls	r3, r3, #3
 80115f8:	440b      	add	r3, r1
 80115fa:	3314      	adds	r3, #20
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2b01      	cmp	r3, #1
 8011600:	d917      	bls.n	8011632 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011602:	4a49      	ldr	r2, [pc, #292]	; (8011728 <etharp_query+0x274>)
 8011604:	7c7b      	ldrb	r3, [r7, #17]
 8011606:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011608:	7c7a      	ldrb	r2, [r7, #17]
 801160a:	4613      	mov	r3, r2
 801160c:	005b      	lsls	r3, r3, #1
 801160e:	4413      	add	r3, r2
 8011610:	00db      	lsls	r3, r3, #3
 8011612:	3308      	adds	r3, #8
 8011614:	4a41      	ldr	r2, [pc, #260]	; (801171c <etharp_query+0x268>)
 8011616:	4413      	add	r3, r2
 8011618:	3304      	adds	r3, #4
 801161a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801161e:	9200      	str	r2, [sp, #0]
 8011620:	697a      	ldr	r2, [r7, #20]
 8011622:	6879      	ldr	r1, [r7, #4]
 8011624:	68f8      	ldr	r0, [r7, #12]
 8011626:	f001 fc6d 	bl	8012f04 <ethernet_output>
 801162a:	4603      	mov	r3, r0
 801162c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011630:	e067      	b.n	8011702 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011632:	7c7a      	ldrb	r2, [r7, #17]
 8011634:	4939      	ldr	r1, [pc, #228]	; (801171c <etharp_query+0x268>)
 8011636:	4613      	mov	r3, r2
 8011638:	005b      	lsls	r3, r3, #1
 801163a:	4413      	add	r3, r2
 801163c:	00db      	lsls	r3, r3, #3
 801163e:	440b      	add	r3, r1
 8011640:	3314      	adds	r3, #20
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	2b01      	cmp	r3, #1
 8011646:	d15c      	bne.n	8011702 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011648:	2300      	movs	r3, #0
 801164a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011650:	e01c      	b.n	801168c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	895a      	ldrh	r2, [r3, #10]
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	891b      	ldrh	r3, [r3, #8]
 801165a:	429a      	cmp	r2, r3
 801165c:	d10a      	bne.n	8011674 <etharp_query+0x1c0>
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d006      	beq.n	8011674 <etharp_query+0x1c0>
 8011666:	4b2a      	ldr	r3, [pc, #168]	; (8011710 <etharp_query+0x25c>)
 8011668:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801166c:	492f      	ldr	r1, [pc, #188]	; (801172c <etharp_query+0x278>)
 801166e:	482a      	ldr	r0, [pc, #168]	; (8011718 <etharp_query+0x264>)
 8011670:	f002 fa1a 	bl	8013aa8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011674:	69fb      	ldr	r3, [r7, #28]
 8011676:	7b1b      	ldrb	r3, [r3, #12]
 8011678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801167c:	2b00      	cmp	r3, #0
 801167e:	d002      	beq.n	8011686 <etharp_query+0x1d2>
        copy_needed = 1;
 8011680:	2301      	movs	r3, #1
 8011682:	61bb      	str	r3, [r7, #24]
        break;
 8011684:	e005      	b.n	8011692 <etharp_query+0x1de>
      }
      p = p->next;
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d1df      	bne.n	8011652 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d007      	beq.n	80116a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801169e:	200e      	movs	r0, #14
 80116a0:	f7f9 f9dc 	bl	800aa5c <pbuf_clone>
 80116a4:	61f8      	str	r0, [r7, #28]
 80116a6:	e004      	b.n	80116b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80116ac:	69f8      	ldr	r0, [r7, #28]
 80116ae:	f7f8 ff77 	bl	800a5a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d021      	beq.n	80116fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80116b8:	7c7a      	ldrb	r2, [r7, #17]
 80116ba:	4918      	ldr	r1, [pc, #96]	; (801171c <etharp_query+0x268>)
 80116bc:	4613      	mov	r3, r2
 80116be:	005b      	lsls	r3, r3, #1
 80116c0:	4413      	add	r3, r2
 80116c2:	00db      	lsls	r3, r3, #3
 80116c4:	440b      	add	r3, r1
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d00a      	beq.n	80116e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80116cc:	7c7a      	ldrb	r2, [r7, #17]
 80116ce:	4913      	ldr	r1, [pc, #76]	; (801171c <etharp_query+0x268>)
 80116d0:	4613      	mov	r3, r2
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	4413      	add	r3, r2
 80116d6:	00db      	lsls	r3, r3, #3
 80116d8:	440b      	add	r3, r1
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	4618      	mov	r0, r3
 80116de:	f7f8 febf 	bl	800a460 <pbuf_free>
      }
      arp_table[i].q = p;
 80116e2:	7c7a      	ldrb	r2, [r7, #17]
 80116e4:	490d      	ldr	r1, [pc, #52]	; (801171c <etharp_query+0x268>)
 80116e6:	4613      	mov	r3, r2
 80116e8:	005b      	lsls	r3, r3, #1
 80116ea:	4413      	add	r3, r2
 80116ec:	00db      	lsls	r3, r3, #3
 80116ee:	440b      	add	r3, r1
 80116f0:	69fa      	ldr	r2, [r7, #28]
 80116f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80116f4:	2300      	movs	r3, #0
 80116f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116fa:	e002      	b.n	8011702 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80116fc:	23ff      	movs	r3, #255	; 0xff
 80116fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011702:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011706:	4618      	mov	r0, r3
 8011708:	3728      	adds	r7, #40	; 0x28
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	080194d0 	.word	0x080194d0
 8011714:	0801967c 	.word	0x0801967c
 8011718:	08019548 	.word	0x08019548
 801171c:	20000308 	.word	0x20000308
 8011720:	0801968c 	.word	0x0801968c
 8011724:	08019670 	.word	0x08019670
 8011728:	200003f8 	.word	0x200003f8
 801172c:	080196b4 	.word	0x080196b4

08011730 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b08a      	sub	sp, #40	; 0x28
 8011734:	af02      	add	r7, sp, #8
 8011736:	60f8      	str	r0, [r7, #12]
 8011738:	60b9      	str	r1, [r7, #8]
 801173a:	607a      	str	r2, [r7, #4]
 801173c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801173e:	2300      	movs	r3, #0
 8011740:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d106      	bne.n	8011756 <etharp_raw+0x26>
 8011748:	4b3a      	ldr	r3, [pc, #232]	; (8011834 <etharp_raw+0x104>)
 801174a:	f240 4257 	movw	r2, #1111	; 0x457
 801174e:	493a      	ldr	r1, [pc, #232]	; (8011838 <etharp_raw+0x108>)
 8011750:	483a      	ldr	r0, [pc, #232]	; (801183c <etharp_raw+0x10c>)
 8011752:	f002 f9a9 	bl	8013aa8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011756:	f44f 7220 	mov.w	r2, #640	; 0x280
 801175a:	211c      	movs	r1, #28
 801175c:	200e      	movs	r0, #14
 801175e:	f7f8 fb9b 	bl	8009e98 <pbuf_alloc>
 8011762:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d102      	bne.n	8011770 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801176a:	f04f 33ff 	mov.w	r3, #4294967295
 801176e:	e05d      	b.n	801182c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	895b      	ldrh	r3, [r3, #10]
 8011774:	2b1b      	cmp	r3, #27
 8011776:	d806      	bhi.n	8011786 <etharp_raw+0x56>
 8011778:	4b2e      	ldr	r3, [pc, #184]	; (8011834 <etharp_raw+0x104>)
 801177a:	f240 4262 	movw	r2, #1122	; 0x462
 801177e:	4930      	ldr	r1, [pc, #192]	; (8011840 <etharp_raw+0x110>)
 8011780:	482e      	ldr	r0, [pc, #184]	; (801183c <etharp_raw+0x10c>)
 8011782:	f002 f991 	bl	8013aa8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801178c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801178e:	4618      	mov	r0, r3
 8011790:	f7f7 fbb2 	bl	8008ef8 <lwip_htons>
 8011794:	4603      	mov	r3, r0
 8011796:	461a      	mov	r2, r3
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117a2:	2b06      	cmp	r3, #6
 80117a4:	d006      	beq.n	80117b4 <etharp_raw+0x84>
 80117a6:	4b23      	ldr	r3, [pc, #140]	; (8011834 <etharp_raw+0x104>)
 80117a8:	f240 4269 	movw	r2, #1129	; 0x469
 80117ac:	4925      	ldr	r1, [pc, #148]	; (8011844 <etharp_raw+0x114>)
 80117ae:	4823      	ldr	r0, [pc, #140]	; (801183c <etharp_raw+0x10c>)
 80117b0:	f002 f97a 	bl	8013aa8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	3308      	adds	r3, #8
 80117b8:	2206      	movs	r2, #6
 80117ba:	6839      	ldr	r1, [r7, #0]
 80117bc:	4618      	mov	r0, r3
 80117be:	f001 fc2f 	bl	8013020 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	3312      	adds	r3, #18
 80117c6:	2206      	movs	r2, #6
 80117c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117ca:	4618      	mov	r0, r3
 80117cc:	f001 fc28 	bl	8013020 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	330e      	adds	r3, #14
 80117d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117d6:	6812      	ldr	r2, [r2, #0]
 80117d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	3318      	adds	r3, #24
 80117de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117e0:	6812      	ldr	r2, [r2, #0]
 80117e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	2200      	movs	r2, #0
 80117e8:	701a      	strb	r2, [r3, #0]
 80117ea:	2200      	movs	r2, #0
 80117ec:	f042 0201 	orr.w	r2, r2, #1
 80117f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	2200      	movs	r2, #0
 80117f6:	f042 0208 	orr.w	r2, r2, #8
 80117fa:	709a      	strb	r2, [r3, #2]
 80117fc:	2200      	movs	r2, #0
 80117fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	2206      	movs	r2, #6
 8011804:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	2204      	movs	r2, #4
 801180a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801180c:	f640 0306 	movw	r3, #2054	; 0x806
 8011810:	9300      	str	r3, [sp, #0]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	69b9      	ldr	r1, [r7, #24]
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f001 fb73 	bl	8012f04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801181e:	69b8      	ldr	r0, [r7, #24]
 8011820:	f7f8 fe1e 	bl	800a460 <pbuf_free>
  p = NULL;
 8011824:	2300      	movs	r3, #0
 8011826:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011828:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801182c:	4618      	mov	r0, r3
 801182e:	3720      	adds	r7, #32
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}
 8011834:	080194d0 	.word	0x080194d0
 8011838:	08019620 	.word	0x08019620
 801183c:	08019548 	.word	0x08019548
 8011840:	080196d0 	.word	0x080196d0
 8011844:	08019704 	.word	0x08019704

08011848 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b088      	sub	sp, #32
 801184c:	af04      	add	r7, sp, #16
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011864:	2201      	movs	r2, #1
 8011866:	9203      	str	r2, [sp, #12]
 8011868:	68ba      	ldr	r2, [r7, #8]
 801186a:	9202      	str	r2, [sp, #8]
 801186c:	4a06      	ldr	r2, [pc, #24]	; (8011888 <etharp_request_dst+0x40>)
 801186e:	9201      	str	r2, [sp, #4]
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	4603      	mov	r3, r0
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f7ff ff5a 	bl	8011730 <etharp_raw>
 801187c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	08019c80 	.word	0x08019c80

0801188c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b082      	sub	sp, #8
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011896:	4a05      	ldr	r2, [pc, #20]	; (80118ac <etharp_request+0x20>)
 8011898:	6839      	ldr	r1, [r7, #0]
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f7ff ffd4 	bl	8011848 <etharp_request_dst>
 80118a0:	4603      	mov	r3, r0
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3708      	adds	r7, #8
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	08019c78 	.word	0x08019c78

080118b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b08e      	sub	sp, #56	; 0x38
 80118b4:	af04      	add	r7, sp, #16
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80118ba:	4b78      	ldr	r3, [pc, #480]	; (8011a9c <icmp_input+0x1ec>)
 80118bc:	689b      	ldr	r3, [r3, #8]
 80118be:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 80118c0:	6a3b      	ldr	r3, [r7, #32]
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	f003 030f 	and.w	r3, r3, #15
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	b2db      	uxtb	r3, r3
 80118ce:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 80118d0:	8bfb      	ldrh	r3, [r7, #30]
 80118d2:	2b13      	cmp	r3, #19
 80118d4:	f240 80cf 	bls.w	8011a76 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	895b      	ldrh	r3, [r3, #10]
 80118dc:	2b03      	cmp	r3, #3
 80118de:	f240 80cc 	bls.w	8011a7a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80118ea:	7f7b      	ldrb	r3, [r7, #29]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	f000 80bb 	beq.w	8011a68 <icmp_input+0x1b8>
 80118f2:	2b08      	cmp	r3, #8
 80118f4:	f040 80bb 	bne.w	8011a6e <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80118f8:	4b69      	ldr	r3, [pc, #420]	; (8011aa0 <icmp_input+0x1f0>)
 80118fa:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80118fc:	4b67      	ldr	r3, [pc, #412]	; (8011a9c <icmp_input+0x1ec>)
 80118fe:	695b      	ldr	r3, [r3, #20]
 8011900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011904:	2be0      	cmp	r3, #224	; 0xe0
 8011906:	d102      	bne.n	801190e <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	3304      	adds	r3, #4
 801190c:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801190e:	4b63      	ldr	r3, [pc, #396]	; (8011a9c <icmp_input+0x1ec>)
 8011910:	695b      	ldr	r3, [r3, #20]
 8011912:	4a62      	ldr	r2, [pc, #392]	; (8011a9c <icmp_input+0x1ec>)
 8011914:	6812      	ldr	r2, [r2, #0]
 8011916:	4611      	mov	r1, r2
 8011918:	4618      	mov	r0, r3
 801191a:	f000 fbeb 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d002      	beq.n	801192a <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	3304      	adds	r3, #4
 8011928:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	891b      	ldrh	r3, [r3, #8]
 801192e:	2b07      	cmp	r3, #7
 8011930:	f240 80a5 	bls.w	8011a7e <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011934:	8bfb      	ldrh	r3, [r7, #30]
 8011936:	330e      	adds	r3, #14
 8011938:	4619      	mov	r1, r3
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7f8 fcfa 	bl	800a334 <pbuf_add_header>
 8011940:	4603      	mov	r3, r0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d04b      	beq.n	80119de <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	891a      	ldrh	r2, [r3, #8]
 801194a:	8bfb      	ldrh	r3, [r7, #30]
 801194c:	4413      	add	r3, r2
 801194e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	891b      	ldrh	r3, [r3, #8]
 8011954:	8b7a      	ldrh	r2, [r7, #26]
 8011956:	429a      	cmp	r2, r3
 8011958:	f0c0 8096 	bcc.w	8011a88 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801195c:	8b7b      	ldrh	r3, [r7, #26]
 801195e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011962:	4619      	mov	r1, r3
 8011964:	200e      	movs	r0, #14
 8011966:	f7f8 fa97 	bl	8009e98 <pbuf_alloc>
 801196a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	2b00      	cmp	r3, #0
 8011970:	f000 808c 	beq.w	8011a8c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	895b      	ldrh	r3, [r3, #10]
 8011978:	461a      	mov	r2, r3
 801197a:	8bfb      	ldrh	r3, [r7, #30]
 801197c:	3308      	adds	r3, #8
 801197e:	429a      	cmp	r2, r3
 8011980:	d203      	bcs.n	801198a <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011982:	6978      	ldr	r0, [r7, #20]
 8011984:	f7f8 fd6c 	bl	800a460 <pbuf_free>
          goto icmperr;
 8011988:	e081      	b.n	8011a8e <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	685b      	ldr	r3, [r3, #4]
 801198e:	8bfa      	ldrh	r2, [r7, #30]
 8011990:	6a39      	ldr	r1, [r7, #32]
 8011992:	4618      	mov	r0, r3
 8011994:	f001 fb44 	bl	8013020 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011998:	8bfb      	ldrh	r3, [r7, #30]
 801199a:	4619      	mov	r1, r3
 801199c:	6978      	ldr	r0, [r7, #20]
 801199e:	f7f8 fcd9 	bl	800a354 <pbuf_remove_header>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d009      	beq.n	80119bc <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80119a8:	4b3e      	ldr	r3, [pc, #248]	; (8011aa4 <icmp_input+0x1f4>)
 80119aa:	22b6      	movs	r2, #182	; 0xb6
 80119ac:	493e      	ldr	r1, [pc, #248]	; (8011aa8 <icmp_input+0x1f8>)
 80119ae:	483f      	ldr	r0, [pc, #252]	; (8011aac <icmp_input+0x1fc>)
 80119b0:	f002 f87a 	bl	8013aa8 <iprintf>
          pbuf_free(r);
 80119b4:	6978      	ldr	r0, [r7, #20]
 80119b6:	f7f8 fd53 	bl	800a460 <pbuf_free>
          goto icmperr;
 80119ba:	e068      	b.n	8011a8e <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80119bc:	6879      	ldr	r1, [r7, #4]
 80119be:	6978      	ldr	r0, [r7, #20]
 80119c0:	f7f8 fe76 	bl	800a6b0 <pbuf_copy>
 80119c4:	4603      	mov	r3, r0
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d003      	beq.n	80119d2 <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80119ca:	6978      	ldr	r0, [r7, #20]
 80119cc:	f7f8 fd48 	bl	800a460 <pbuf_free>
          goto icmperr;
 80119d0:	e05d      	b.n	8011a8e <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f7f8 fd44 	bl	800a460 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	607b      	str	r3, [r7, #4]
 80119dc:	e00f      	b.n	80119fe <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80119de:	8bfb      	ldrh	r3, [r7, #30]
 80119e0:	330e      	adds	r3, #14
 80119e2:	4619      	mov	r1, r3
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f7f8 fcb5 	bl	800a354 <pbuf_remove_header>
 80119ea:	4603      	mov	r3, r0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d006      	beq.n	80119fe <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80119f0:	4b2c      	ldr	r3, [pc, #176]	; (8011aa4 <icmp_input+0x1f4>)
 80119f2:	22c7      	movs	r2, #199	; 0xc7
 80119f4:	492e      	ldr	r1, [pc, #184]	; (8011ab0 <icmp_input+0x200>)
 80119f6:	482d      	ldr	r0, [pc, #180]	; (8011aac <icmp_input+0x1fc>)
 80119f8:	f002 f856 	bl	8013aa8 <iprintf>
          goto icmperr;
 80119fc:	e047      	b.n	8011a8e <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011a04:	8bfb      	ldrh	r3, [r7, #30]
 8011a06:	4619      	mov	r1, r3
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f7f8 fc93 	bl	800a334 <pbuf_add_header>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d12b      	bne.n	8011a6c <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1c:	681a      	ldr	r2, [r3, #0]
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011a22:	4b1e      	ldr	r3, [pc, #120]	; (8011a9c <icmp_input+0x1ec>)
 8011a24:	691a      	ldr	r2, [r3, #16]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	2200      	movs	r2, #0
 8011a34:	709a      	strb	r2, [r3, #2]
 8011a36:	2200      	movs	r2, #0
 8011a38:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	22ff      	movs	r2, #255	; 0xff
 8011a3e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2200      	movs	r2, #0
 8011a44:	729a      	strb	r2, [r3, #10]
 8011a46:	2200      	movs	r2, #0
 8011a48:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	9302      	str	r3, [sp, #8]
 8011a4e:	2301      	movs	r3, #1
 8011a50:	9301      	str	r3, [sp, #4]
 8011a52:	2300      	movs	r3, #0
 8011a54:	9300      	str	r3, [sp, #0]
 8011a56:	23ff      	movs	r3, #255	; 0xff
 8011a58:	2200      	movs	r2, #0
 8011a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f000 fa71 	bl	8011f44 <ip4_output_if>
 8011a62:	4603      	mov	r3, r0
 8011a64:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011a66:	e001      	b.n	8011a6c <icmp_input+0x1bc>
      break;
 8011a68:	bf00      	nop
 8011a6a:	e000      	b.n	8011a6e <icmp_input+0x1be>
      break;
 8011a6c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f7f8 fcf6 	bl	800a460 <pbuf_free>
  return;
 8011a74:	e00f      	b.n	8011a96 <icmp_input+0x1e6>
    goto lenerr;
 8011a76:	bf00      	nop
 8011a78:	e002      	b.n	8011a80 <icmp_input+0x1d0>
    goto lenerr;
 8011a7a:	bf00      	nop
 8011a7c:	e000      	b.n	8011a80 <icmp_input+0x1d0>
        goto lenerr;
 8011a7e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f7f8 fced 	bl	800a460 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011a86:	e006      	b.n	8011a96 <icmp_input+0x1e6>
          goto icmperr;
 8011a88:	bf00      	nop
 8011a8a:	e000      	b.n	8011a8e <icmp_input+0x1de>
          goto icmperr;
 8011a8c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f7f8 fce6 	bl	800a460 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011a94:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011a96:	3728      	adds	r7, #40	; 0x28
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	200039e0 	.word	0x200039e0
 8011aa0:	200039f4 	.word	0x200039f4
 8011aa4:	08019748 	.word	0x08019748
 8011aa8:	08019780 	.word	0x08019780
 8011aac:	080197b8 	.word	0x080197b8
 8011ab0:	080197e0 	.word	0x080197e0

08011ab4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	460b      	mov	r3, r1
 8011abe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011ac0:	78fb      	ldrb	r3, [r7, #3]
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	2103      	movs	r1, #3
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f000 f814 	bl	8011af4 <icmp_send_response>
}
 8011acc:	bf00      	nop
 8011ace:	3708      	adds	r7, #8
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	460b      	mov	r3, r1
 8011ade:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011ae0:	78fb      	ldrb	r3, [r7, #3]
 8011ae2:	461a      	mov	r2, r3
 8011ae4:	210b      	movs	r1, #11
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f000 f804 	bl	8011af4 <icmp_send_response>
}
 8011aec:	bf00      	nop
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b08c      	sub	sp, #48	; 0x30
 8011af8:	af04      	add	r7, sp, #16
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	460b      	mov	r3, r1
 8011afe:	70fb      	strb	r3, [r7, #3]
 8011b00:	4613      	mov	r3, r2
 8011b02:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011b04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b08:	2124      	movs	r1, #36	; 0x24
 8011b0a:	2022      	movs	r0, #34	; 0x22
 8011b0c:	f7f8 f9c4 	bl	8009e98 <pbuf_alloc>
 8011b10:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d04c      	beq.n	8011bb2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	895b      	ldrh	r3, [r3, #10]
 8011b1c:	2b23      	cmp	r3, #35	; 0x23
 8011b1e:	d806      	bhi.n	8011b2e <icmp_send_response+0x3a>
 8011b20:	4b26      	ldr	r3, [pc, #152]	; (8011bbc <icmp_send_response+0xc8>)
 8011b22:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011b26:	4926      	ldr	r1, [pc, #152]	; (8011bc0 <icmp_send_response+0xcc>)
 8011b28:	4826      	ldr	r0, [pc, #152]	; (8011bc4 <icmp_send_response+0xd0>)
 8011b2a:	f001 ffbd 	bl	8013aa8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	78fa      	ldrb	r2, [r7, #3]
 8011b3e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	78ba      	ldrb	r2, [r7, #2]
 8011b44:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	711a      	strb	r2, [r3, #4]
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	2200      	movs	r2, #0
 8011b54:	719a      	strb	r2, [r3, #6]
 8011b56:	2200      	movs	r2, #0
 8011b58:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011b5a:	69fb      	ldr	r3, [r7, #28]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	f103 0008 	add.w	r0, r3, #8
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	221c      	movs	r2, #28
 8011b68:	4619      	mov	r1, r3
 8011b6a:	f001 fa59 	bl	8013020 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8011b74:	f107 030c 	add.w	r3, r7, #12
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f000 f825 	bl	8011bc8 <ip4_route>
 8011b7e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d011      	beq.n	8011baa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	709a      	strb	r2, [r3, #2]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011b90:	f107 020c 	add.w	r2, r7, #12
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	9302      	str	r3, [sp, #8]
 8011b98:	2301      	movs	r3, #1
 8011b9a:	9301      	str	r3, [sp, #4]
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	23ff      	movs	r3, #255	; 0xff
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	69f8      	ldr	r0, [r7, #28]
 8011ba6:	f000 f9cd 	bl	8011f44 <ip4_output_if>
  }
  pbuf_free(q);
 8011baa:	69f8      	ldr	r0, [r7, #28]
 8011bac:	f7f8 fc58 	bl	800a460 <pbuf_free>
 8011bb0:	e000      	b.n	8011bb4 <icmp_send_response+0xc0>
    return;
 8011bb2:	bf00      	nop
}
 8011bb4:	3720      	adds	r7, #32
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	08019748 	.word	0x08019748
 8011bc0:	08019814 	.word	0x08019814
 8011bc4:	080197b8 	.word	0x080197b8

08011bc8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b085      	sub	sp, #20
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011bd0:	4b33      	ldr	r3, [pc, #204]	; (8011ca0 <ip4_route+0xd8>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	60fb      	str	r3, [r7, #12]
 8011bd6:	e036      	b.n	8011c46 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011bde:	f003 0301 	and.w	r3, r3, #1
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d02b      	beq.n	8011c40 <ip4_route+0x78>
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011bee:	089b      	lsrs	r3, r3, #2
 8011bf0:	f003 0301 	and.w	r3, r3, #1
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d022      	beq.n	8011c40 <ip4_route+0x78>
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d01d      	beq.n	8011c40 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3304      	adds	r3, #4
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	405a      	eors	r2, r3
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	3308      	adds	r3, #8
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	4013      	ands	r3, r2
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d101      	bne.n	8011c20 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	e038      	b.n	8011c92 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011c26:	f003 0302 	and.w	r3, r3, #2
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d108      	bne.n	8011c40 <ip4_route+0x78>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	330c      	adds	r3, #12
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d101      	bne.n	8011c40 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	e028      	b.n	8011c92 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	60fb      	str	r3, [r7, #12]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1c5      	bne.n	8011bd8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011c4c:	4b15      	ldr	r3, [pc, #84]	; (8011ca4 <ip4_route+0xdc>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d01a      	beq.n	8011c8a <ip4_route+0xc2>
 8011c54:	4b13      	ldr	r3, [pc, #76]	; (8011ca4 <ip4_route+0xdc>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011c5c:	f003 0301 	and.w	r3, r3, #1
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d012      	beq.n	8011c8a <ip4_route+0xc2>
 8011c64:	4b0f      	ldr	r3, [pc, #60]	; (8011ca4 <ip4_route+0xdc>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011c6c:	f003 0304 	and.w	r3, r3, #4
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d00a      	beq.n	8011c8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011c74:	4b0b      	ldr	r3, [pc, #44]	; (8011ca4 <ip4_route+0xdc>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d004      	beq.n	8011c8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	2b7f      	cmp	r3, #127	; 0x7f
 8011c88:	d101      	bne.n	8011c8e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	e001      	b.n	8011c92 <ip4_route+0xca>
  }

  return netif_default;
 8011c8e:	4b05      	ldr	r3, [pc, #20]	; (8011ca4 <ip4_route+0xdc>)
 8011c90:	681b      	ldr	r3, [r3, #0]
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3714      	adds	r7, #20
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr
 8011c9e:	bf00      	nop
 8011ca0:	200090d4 	.word	0x200090d4
 8011ca4:	200090d8 	.word	0x200090d8

08011ca8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b082      	sub	sp, #8
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011cb6:	f003 0301 	and.w	r3, r3, #1
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d016      	beq.n	8011cee <ip4_input_accept+0x46>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	3304      	adds	r3, #4
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d011      	beq.n	8011cee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011cca:	4b0b      	ldr	r3, [pc, #44]	; (8011cf8 <ip4_input_accept+0x50>)
 8011ccc:	695a      	ldr	r2, [r3, #20]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	3304      	adds	r3, #4
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d008      	beq.n	8011cea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011cd8:	4b07      	ldr	r3, [pc, #28]	; (8011cf8 <ip4_input_accept+0x50>)
 8011cda:	695b      	ldr	r3, [r3, #20]
 8011cdc:	6879      	ldr	r1, [r7, #4]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f000 fa08 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 8011ce4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d001      	beq.n	8011cee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011cea:	2301      	movs	r3, #1
 8011cec:	e000      	b.n	8011cf0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011cee:	2300      	movs	r3, #0
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}
 8011cf8:	200039e0 	.word	0x200039e0

08011cfc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b086      	sub	sp, #24
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	091b      	lsrs	r3, r3, #4
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	2b04      	cmp	r3, #4
 8011d16:	d004      	beq.n	8011d22 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f7f8 fba1 	bl	800a460 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	e107      	b.n	8011f32 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	f003 030f 	and.w	r3, r3, #15
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	885b      	ldrh	r3, [r3, #2]
 8011d36:	b29b      	uxth	r3, r3
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7f7 f8dd 	bl	8008ef8 <lwip_htons>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	891b      	ldrh	r3, [r3, #8]
 8011d46:	89ba      	ldrh	r2, [r7, #12]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d204      	bcs.n	8011d56 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011d4c:	89bb      	ldrh	r3, [r7, #12]
 8011d4e:	4619      	mov	r1, r3
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7f8 f9ff 	bl	800a154 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	895b      	ldrh	r3, [r3, #10]
 8011d5a:	89fa      	ldrh	r2, [r7, #14]
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d807      	bhi.n	8011d70 <ip4_input+0x74>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	891b      	ldrh	r3, [r3, #8]
 8011d64:	89ba      	ldrh	r2, [r7, #12]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d802      	bhi.n	8011d70 <ip4_input+0x74>
 8011d6a:	89fb      	ldrh	r3, [r7, #14]
 8011d6c:	2b13      	cmp	r3, #19
 8011d6e:	d804      	bhi.n	8011d7a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7f8 fb75 	bl	800a460 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011d76:	2300      	movs	r3, #0
 8011d78:	e0db      	b.n	8011f32 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	691b      	ldr	r3, [r3, #16]
 8011d7e:	4a6f      	ldr	r2, [pc, #444]	; (8011f3c <ip4_input+0x240>)
 8011d80:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	4a6d      	ldr	r2, [pc, #436]	; (8011f3c <ip4_input+0x240>)
 8011d88:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d8a:	4b6c      	ldr	r3, [pc, #432]	; (8011f3c <ip4_input+0x240>)
 8011d8c:	695b      	ldr	r3, [r3, #20]
 8011d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d92:	2be0      	cmp	r3, #224	; 0xe0
 8011d94:	d112      	bne.n	8011dbc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d9c:	f003 0301 	and.w	r3, r3, #1
 8011da0:	b2db      	uxtb	r3, r3
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d007      	beq.n	8011db6 <ip4_input+0xba>
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	3304      	adds	r3, #4
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d002      	beq.n	8011db6 <ip4_input+0xba>
      netif = inp;
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	613b      	str	r3, [r7, #16]
 8011db4:	e02a      	b.n	8011e0c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011db6:	2300      	movs	r3, #0
 8011db8:	613b      	str	r3, [r7, #16]
 8011dba:	e027      	b.n	8011e0c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011dbc:	6838      	ldr	r0, [r7, #0]
 8011dbe:	f7ff ff73 	bl	8011ca8 <ip4_input_accept>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d002      	beq.n	8011dce <ip4_input+0xd2>
      netif = inp;
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	613b      	str	r3, [r7, #16]
 8011dcc:	e01e      	b.n	8011e0c <ip4_input+0x110>
    } else {
      netif = NULL;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011dd2:	4b5a      	ldr	r3, [pc, #360]	; (8011f3c <ip4_input+0x240>)
 8011dd4:	695b      	ldr	r3, [r3, #20]
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8011dda:	d017      	beq.n	8011e0c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011ddc:	4b58      	ldr	r3, [pc, #352]	; (8011f40 <ip4_input+0x244>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	613b      	str	r3, [r7, #16]
 8011de2:	e00e      	b.n	8011e02 <ip4_input+0x106>
          if (netif == inp) {
 8011de4:	693a      	ldr	r2, [r7, #16]
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d006      	beq.n	8011dfa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011dec:	6938      	ldr	r0, [r7, #16]
 8011dee:	f7ff ff5b 	bl	8011ca8 <ip4_input_accept>
 8011df2:	4603      	mov	r3, r0
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d108      	bne.n	8011e0a <ip4_input+0x10e>
 8011df8:	e000      	b.n	8011dfc <ip4_input+0x100>
            continue;
 8011dfa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	613b      	str	r3, [r7, #16]
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d1ed      	bne.n	8011de4 <ip4_input+0xe8>
 8011e08:	e000      	b.n	8011e0c <ip4_input+0x110>
            break;
 8011e0a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011e0c:	4b4b      	ldr	r3, [pc, #300]	; (8011f3c <ip4_input+0x240>)
 8011e0e:	691b      	ldr	r3, [r3, #16]
 8011e10:	6839      	ldr	r1, [r7, #0]
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 f96e 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d105      	bne.n	8011e2a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011e1e:	4b47      	ldr	r3, [pc, #284]	; (8011f3c <ip4_input+0x240>)
 8011e20:	691b      	ldr	r3, [r3, #16]
 8011e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011e26:	2be0      	cmp	r3, #224	; 0xe0
 8011e28:	d104      	bne.n	8011e34 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f7f8 fb18 	bl	800a460 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011e30:	2300      	movs	r3, #0
 8011e32:	e07e      	b.n	8011f32 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d104      	bne.n	8011e44 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f7f8 fb10 	bl	800a460 <pbuf_free>
    return ERR_OK;
 8011e40:	2300      	movs	r3, #0
 8011e42:	e076      	b.n	8011f32 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	88db      	ldrh	r3, [r3, #6]
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011e50:	4013      	ands	r3, r2
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d00b      	beq.n	8011e6e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 fc92 	bl	8012780 <ip4_reass>
 8011e5c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d101      	bne.n	8011e68 <ip4_input+0x16c>
      return ERR_OK;
 8011e64:	2300      	movs	r3, #0
 8011e66:	e064      	b.n	8011f32 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011e6e:	4a33      	ldr	r2, [pc, #204]	; (8011f3c <ip4_input+0x240>)
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011e74:	4a31      	ldr	r2, [pc, #196]	; (8011f3c <ip4_input+0x240>)
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011e7a:	4a30      	ldr	r2, [pc, #192]	; (8011f3c <ip4_input+0x240>)
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	f003 030f 	and.w	r3, r3, #15
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	009b      	lsls	r3, r3, #2
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	4b2a      	ldr	r3, [pc, #168]	; (8011f3c <ip4_input+0x240>)
 8011e92:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011e94:	89fb      	ldrh	r3, [r7, #14]
 8011e96:	4619      	mov	r1, r3
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7f8 fa5b 	bl	800a354 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	7a5b      	ldrb	r3, [r3, #9]
 8011ea2:	2b11      	cmp	r3, #17
 8011ea4:	d006      	beq.n	8011eb4 <ip4_input+0x1b8>
 8011ea6:	2b11      	cmp	r3, #17
 8011ea8:	dc13      	bgt.n	8011ed2 <ip4_input+0x1d6>
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d00c      	beq.n	8011ec8 <ip4_input+0x1cc>
 8011eae:	2b06      	cmp	r3, #6
 8011eb0:	d005      	beq.n	8011ebe <ip4_input+0x1c2>
 8011eb2:	e00e      	b.n	8011ed2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011eb4:	6839      	ldr	r1, [r7, #0]
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f7fe f952 	bl	8010160 <udp_input>
        break;
 8011ebc:	e026      	b.n	8011f0c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011ebe:	6839      	ldr	r1, [r7, #0]
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7fa f997 	bl	800c1f4 <tcp_input>
        break;
 8011ec6:	e021      	b.n	8011f0c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011ec8:	6839      	ldr	r1, [r7, #0]
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f7ff fcf0 	bl	80118b0 <icmp_input>
        break;
 8011ed0:	e01c      	b.n	8011f0c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011ed2:	4b1a      	ldr	r3, [pc, #104]	; (8011f3c <ip4_input+0x240>)
 8011ed4:	695b      	ldr	r3, [r3, #20]
 8011ed6:	6939      	ldr	r1, [r7, #16]
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f000 f90b 	bl	80120f4 <ip4_addr_isbroadcast_u32>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d10f      	bne.n	8011f04 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ee4:	4b15      	ldr	r3, [pc, #84]	; (8011f3c <ip4_input+0x240>)
 8011ee6:	695b      	ldr	r3, [r3, #20]
 8011ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011eec:	2be0      	cmp	r3, #224	; 0xe0
 8011eee:	d009      	beq.n	8011f04 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f7f8 fa9f 	bl	800a43a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011efc:	2102      	movs	r1, #2
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7ff fdd8 	bl	8011ab4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f7f8 faab 	bl	800a460 <pbuf_free>
        break;
 8011f0a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011f0c:	4b0b      	ldr	r3, [pc, #44]	; (8011f3c <ip4_input+0x240>)
 8011f0e:	2200      	movs	r2, #0
 8011f10:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011f12:	4b0a      	ldr	r3, [pc, #40]	; (8011f3c <ip4_input+0x240>)
 8011f14:	2200      	movs	r2, #0
 8011f16:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011f18:	4b08      	ldr	r3, [pc, #32]	; (8011f3c <ip4_input+0x240>)
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011f1e:	4b07      	ldr	r3, [pc, #28]	; (8011f3c <ip4_input+0x240>)
 8011f20:	2200      	movs	r2, #0
 8011f22:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011f24:	4b05      	ldr	r3, [pc, #20]	; (8011f3c <ip4_input+0x240>)
 8011f26:	2200      	movs	r2, #0
 8011f28:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011f2a:	4b04      	ldr	r3, [pc, #16]	; (8011f3c <ip4_input+0x240>)
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011f30:	2300      	movs	r3, #0
}
 8011f32:	4618      	mov	r0, r3
 8011f34:	3718      	adds	r7, #24
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}
 8011f3a:	bf00      	nop
 8011f3c:	200039e0 	.word	0x200039e0
 8011f40:	200090d4 	.word	0x200090d4

08011f44 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b08a      	sub	sp, #40	; 0x28
 8011f48:	af04      	add	r7, sp, #16
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	607a      	str	r2, [r7, #4]
 8011f50:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d009      	beq.n	8011f70 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d003      	beq.n	8011f6a <ip4_output_if+0x26>
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d102      	bne.n	8011f70 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011f70:	78fa      	ldrb	r2, [r7, #3]
 8011f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f74:	9302      	str	r3, [sp, #8]
 8011f76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011f7a:	9301      	str	r3, [sp, #4]
 8011f7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	4613      	mov	r3, r2
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	6979      	ldr	r1, [r7, #20]
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f000 f805 	bl	8011f98 <ip4_output_if_src>
 8011f8e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3718      	adds	r7, #24
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
 8011fa4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	7b9b      	ldrb	r3, [r3, #14]
 8011faa:	2b01      	cmp	r3, #1
 8011fac:	d006      	beq.n	8011fbc <ip4_output_if_src+0x24>
 8011fae:	4b4b      	ldr	r3, [pc, #300]	; (80120dc <ip4_output_if_src+0x144>)
 8011fb0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011fb4:	494a      	ldr	r1, [pc, #296]	; (80120e0 <ip4_output_if_src+0x148>)
 8011fb6:	484b      	ldr	r0, [pc, #300]	; (80120e4 <ip4_output_if_src+0x14c>)
 8011fb8:	f001 fd76 	bl	8013aa8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d060      	beq.n	8012084 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011fc2:	2314      	movs	r3, #20
 8011fc4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011fc6:	2114      	movs	r1, #20
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f7f8 f9b3 	bl	800a334 <pbuf_add_header>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d002      	beq.n	8011fda <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011fd4:	f06f 0301 	mvn.w	r3, #1
 8011fd8:	e07c      	b.n	80120d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	895b      	ldrh	r3, [r3, #10]
 8011fe4:	2b13      	cmp	r3, #19
 8011fe6:	d806      	bhi.n	8011ff6 <ip4_output_if_src+0x5e>
 8011fe8:	4b3c      	ldr	r3, [pc, #240]	; (80120dc <ip4_output_if_src+0x144>)
 8011fea:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011fee:	493e      	ldr	r1, [pc, #248]	; (80120e8 <ip4_output_if_src+0x150>)
 8011ff0:	483c      	ldr	r0, [pc, #240]	; (80120e4 <ip4_output_if_src+0x14c>)
 8011ff2:	f001 fd59 	bl	8013aa8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	78fa      	ldrb	r2, [r7, #3]
 8011ffa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012002:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801200c:	8b7b      	ldrh	r3, [r7, #26]
 801200e:	089b      	lsrs	r3, r3, #2
 8012010:	b29b      	uxth	r3, r3
 8012012:	b2db      	uxtb	r3, r3
 8012014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012018:	b2da      	uxtb	r2, r3
 801201a:	69fb      	ldr	r3, [r7, #28]
 801201c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012024:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	891b      	ldrh	r3, [r3, #8]
 801202a:	4618      	mov	r0, r3
 801202c:	f7f6 ff64 	bl	8008ef8 <lwip_htons>
 8012030:	4603      	mov	r3, r0
 8012032:	461a      	mov	r2, r3
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	2200      	movs	r2, #0
 801203c:	719a      	strb	r2, [r3, #6]
 801203e:	2200      	movs	r2, #0
 8012040:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012042:	4b2a      	ldr	r3, [pc, #168]	; (80120ec <ip4_output_if_src+0x154>)
 8012044:	881b      	ldrh	r3, [r3, #0]
 8012046:	4618      	mov	r0, r3
 8012048:	f7f6 ff56 	bl	8008ef8 <lwip_htons>
 801204c:	4603      	mov	r3, r0
 801204e:	461a      	mov	r2, r3
 8012050:	69fb      	ldr	r3, [r7, #28]
 8012052:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012054:	4b25      	ldr	r3, [pc, #148]	; (80120ec <ip4_output_if_src+0x154>)
 8012056:	881b      	ldrh	r3, [r3, #0]
 8012058:	3301      	adds	r3, #1
 801205a:	b29a      	uxth	r2, r3
 801205c:	4b23      	ldr	r3, [pc, #140]	; (80120ec <ip4_output_if_src+0x154>)
 801205e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d104      	bne.n	8012070 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012066:	4b22      	ldr	r3, [pc, #136]	; (80120f0 <ip4_output_if_src+0x158>)
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	60da      	str	r2, [r3, #12]
 801206e:	e003      	b.n	8012078 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	2200      	movs	r2, #0
 801207c:	729a      	strb	r2, [r3, #10]
 801207e:	2200      	movs	r2, #0
 8012080:	72da      	strb	r2, [r3, #11]
 8012082:	e00f      	b.n	80120a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	895b      	ldrh	r3, [r3, #10]
 8012088:	2b13      	cmp	r3, #19
 801208a:	d802      	bhi.n	8012092 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801208c:	f06f 0301 	mvn.w	r3, #1
 8012090:	e020      	b.n	80120d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801209e:	f107 0314 	add.w	r3, r7, #20
 80120a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80120a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d00c      	beq.n	80120c6 <ip4_output_if_src+0x12e>
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	891a      	ldrh	r2, [r3, #8]
 80120b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d906      	bls.n	80120c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f000 fd4d 	bl	8012b5c <ip4_frag>
 80120c2:	4603      	mov	r3, r0
 80120c4:	e006      	b.n	80120d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80120c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c8:	695b      	ldr	r3, [r3, #20]
 80120ca:	687a      	ldr	r2, [r7, #4]
 80120cc:	68f9      	ldr	r1, [r7, #12]
 80120ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120d0:	4798      	blx	r3
 80120d2:	4603      	mov	r3, r0
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	3720      	adds	r7, #32
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	08019840 	.word	0x08019840
 80120e0:	08019874 	.word	0x08019874
 80120e4:	08019880 	.word	0x08019880
 80120e8:	080198a8 	.word	0x080198a8
 80120ec:	200003fa 	.word	0x200003fa
 80120f0:	08019c74 	.word	0x08019c74

080120f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012108:	d002      	beq.n	8012110 <ip4_addr_isbroadcast_u32+0x1c>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d101      	bne.n	8012114 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012110:	2301      	movs	r3, #1
 8012112:	e02a      	b.n	801216a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801211a:	f003 0302 	and.w	r3, r3, #2
 801211e:	2b00      	cmp	r3, #0
 8012120:	d101      	bne.n	8012126 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012122:	2300      	movs	r3, #0
 8012124:	e021      	b.n	801216a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	3304      	adds	r3, #4
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	687a      	ldr	r2, [r7, #4]
 801212e:	429a      	cmp	r2, r3
 8012130:	d101      	bne.n	8012136 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012132:	2300      	movs	r3, #0
 8012134:	e019      	b.n	801216a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012136:	68fa      	ldr	r2, [r7, #12]
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	3304      	adds	r3, #4
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	405a      	eors	r2, r3
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	3308      	adds	r3, #8
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	4013      	ands	r3, r2
 8012148:	2b00      	cmp	r3, #0
 801214a:	d10d      	bne.n	8012168 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	3308      	adds	r3, #8
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	43da      	mvns	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	3308      	adds	r3, #8
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012160:	429a      	cmp	r2, r3
 8012162:	d101      	bne.n	8012168 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012164:	2301      	movs	r3, #1
 8012166:	e000      	b.n	801216a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012168:	2300      	movs	r3, #0
  }
}
 801216a:	4618      	mov	r0, r3
 801216c:	3714      	adds	r7, #20
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr
	...

08012178 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b084      	sub	sp, #16
 801217c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801217e:	2300      	movs	r3, #0
 8012180:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012182:	4b12      	ldr	r3, [pc, #72]	; (80121cc <ip_reass_tmr+0x54>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012188:	e018      	b.n	80121bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	7fdb      	ldrb	r3, [r3, #31]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d00b      	beq.n	80121aa <ip_reass_tmr+0x32>
      r->timer--;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	7fdb      	ldrb	r3, [r3, #31]
 8012196:	3b01      	subs	r3, #1
 8012198:	b2da      	uxtb	r2, r3
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	60fb      	str	r3, [r7, #12]
 80121a8:	e008      	b.n	80121bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80121b4:	68b9      	ldr	r1, [r7, #8]
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f000 f80a 	bl	80121d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1e3      	bne.n	801218a <ip_reass_tmr+0x12>
    }
  }
}
 80121c2:	bf00      	nop
 80121c4:	bf00      	nop
 80121c6:	3710      	adds	r7, #16
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	200003fc 	.word	0x200003fc

080121d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b088      	sub	sp, #32
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80121da:	2300      	movs	r3, #0
 80121dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d105      	bne.n	80121f2 <ip_reass_free_complete_datagram+0x22>
 80121e6:	4b45      	ldr	r3, [pc, #276]	; (80122fc <ip_reass_free_complete_datagram+0x12c>)
 80121e8:	22ab      	movs	r2, #171	; 0xab
 80121ea:	4945      	ldr	r1, [pc, #276]	; (8012300 <ip_reass_free_complete_datagram+0x130>)
 80121ec:	4845      	ldr	r0, [pc, #276]	; (8012304 <ip_reass_free_complete_datagram+0x134>)
 80121ee:	f001 fc5b 	bl	8013aa8 <iprintf>
  if (prev != NULL) {
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00a      	beq.n	801220e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d005      	beq.n	801220e <ip_reass_free_complete_datagram+0x3e>
 8012202:	4b3e      	ldr	r3, [pc, #248]	; (80122fc <ip_reass_free_complete_datagram+0x12c>)
 8012204:	22ad      	movs	r2, #173	; 0xad
 8012206:	4940      	ldr	r1, [pc, #256]	; (8012308 <ip_reass_free_complete_datagram+0x138>)
 8012208:	483e      	ldr	r0, [pc, #248]	; (8012304 <ip_reass_free_complete_datagram+0x134>)
 801220a:	f001 fc4d 	bl	8013aa8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	685b      	ldr	r3, [r3, #4]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	889b      	ldrh	r3, [r3, #4]
 801221a:	b29b      	uxth	r3, r3
 801221c:	2b00      	cmp	r3, #0
 801221e:	d12a      	bne.n	8012276 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	681a      	ldr	r2, [r3, #0]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	6858      	ldr	r0, [r3, #4]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	3308      	adds	r3, #8
 8012236:	2214      	movs	r2, #20
 8012238:	4619      	mov	r1, r3
 801223a:	f000 fef1 	bl	8013020 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801223e:	2101      	movs	r1, #1
 8012240:	69b8      	ldr	r0, [r7, #24]
 8012242:	f7ff fc47 	bl	8011ad4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012246:	69b8      	ldr	r0, [r7, #24]
 8012248:	f7f8 f992 	bl	800a570 <pbuf_clen>
 801224c:	4603      	mov	r3, r0
 801224e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012250:	8bfa      	ldrh	r2, [r7, #30]
 8012252:	8a7b      	ldrh	r3, [r7, #18]
 8012254:	4413      	add	r3, r2
 8012256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801225a:	db05      	blt.n	8012268 <ip_reass_free_complete_datagram+0x98>
 801225c:	4b27      	ldr	r3, [pc, #156]	; (80122fc <ip_reass_free_complete_datagram+0x12c>)
 801225e:	22bc      	movs	r2, #188	; 0xbc
 8012260:	492a      	ldr	r1, [pc, #168]	; (801230c <ip_reass_free_complete_datagram+0x13c>)
 8012262:	4828      	ldr	r0, [pc, #160]	; (8012304 <ip_reass_free_complete_datagram+0x134>)
 8012264:	f001 fc20 	bl	8013aa8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012268:	8bfa      	ldrh	r2, [r7, #30]
 801226a:	8a7b      	ldrh	r3, [r7, #18]
 801226c:	4413      	add	r3, r2
 801226e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012270:	69b8      	ldr	r0, [r7, #24]
 8012272:	f7f8 f8f5 	bl	800a460 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801227c:	e01f      	b.n	80122be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801227e:	69bb      	ldr	r3, [r7, #24]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	f7f8 f96e 	bl	800a570 <pbuf_clen>
 8012294:	4603      	mov	r3, r0
 8012296:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012298:	8bfa      	ldrh	r2, [r7, #30]
 801229a:	8a7b      	ldrh	r3, [r7, #18]
 801229c:	4413      	add	r3, r2
 801229e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122a2:	db05      	blt.n	80122b0 <ip_reass_free_complete_datagram+0xe0>
 80122a4:	4b15      	ldr	r3, [pc, #84]	; (80122fc <ip_reass_free_complete_datagram+0x12c>)
 80122a6:	22cc      	movs	r2, #204	; 0xcc
 80122a8:	4918      	ldr	r1, [pc, #96]	; (801230c <ip_reass_free_complete_datagram+0x13c>)
 80122aa:	4816      	ldr	r0, [pc, #88]	; (8012304 <ip_reass_free_complete_datagram+0x134>)
 80122ac:	f001 fbfc 	bl	8013aa8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80122b0:	8bfa      	ldrh	r2, [r7, #30]
 80122b2:	8a7b      	ldrh	r3, [r7, #18]
 80122b4:	4413      	add	r3, r2
 80122b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f7f8 f8d1 	bl	800a460 <pbuf_free>
  while (p != NULL) {
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1dc      	bne.n	801227e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80122c4:	6839      	ldr	r1, [r7, #0]
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f000 f8c2 	bl	8012450 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80122cc:	4b10      	ldr	r3, [pc, #64]	; (8012310 <ip_reass_free_complete_datagram+0x140>)
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	8bfa      	ldrh	r2, [r7, #30]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d905      	bls.n	80122e2 <ip_reass_free_complete_datagram+0x112>
 80122d6:	4b09      	ldr	r3, [pc, #36]	; (80122fc <ip_reass_free_complete_datagram+0x12c>)
 80122d8:	22d2      	movs	r2, #210	; 0xd2
 80122da:	490e      	ldr	r1, [pc, #56]	; (8012314 <ip_reass_free_complete_datagram+0x144>)
 80122dc:	4809      	ldr	r0, [pc, #36]	; (8012304 <ip_reass_free_complete_datagram+0x134>)
 80122de:	f001 fbe3 	bl	8013aa8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80122e2:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <ip_reass_free_complete_datagram+0x140>)
 80122e4:	881a      	ldrh	r2, [r3, #0]
 80122e6:	8bfb      	ldrh	r3, [r7, #30]
 80122e8:	1ad3      	subs	r3, r2, r3
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	4b08      	ldr	r3, [pc, #32]	; (8012310 <ip_reass_free_complete_datagram+0x140>)
 80122ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80122f0:	8bfb      	ldrh	r3, [r7, #30]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3720      	adds	r7, #32
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	080198d8 	.word	0x080198d8
 8012300:	08019914 	.word	0x08019914
 8012304:	08019920 	.word	0x08019920
 8012308:	08019948 	.word	0x08019948
 801230c:	0801995c 	.word	0x0801995c
 8012310:	20000400 	.word	0x20000400
 8012314:	0801997c 	.word	0x0801997c

08012318 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b08a      	sub	sp, #40	; 0x28
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
 8012320:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012322:	2300      	movs	r3, #0
 8012324:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012326:	2300      	movs	r3, #0
 8012328:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801232a:	2300      	movs	r3, #0
 801232c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801232e:	2300      	movs	r3, #0
 8012330:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012332:	2300      	movs	r3, #0
 8012334:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012336:	4b28      	ldr	r3, [pc, #160]	; (80123d8 <ip_reass_remove_oldest_datagram+0xc0>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801233c:	e030      	b.n	80123a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012340:	695a      	ldr	r2, [r3, #20]
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	429a      	cmp	r2, r3
 8012348:	d10c      	bne.n	8012364 <ip_reass_remove_oldest_datagram+0x4c>
 801234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234c:	699a      	ldr	r2, [r3, #24]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	691b      	ldr	r3, [r3, #16]
 8012352:	429a      	cmp	r2, r3
 8012354:	d106      	bne.n	8012364 <ip_reass_remove_oldest_datagram+0x4c>
 8012356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012358:	899a      	ldrh	r2, [r3, #12]
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	889b      	ldrh	r3, [r3, #4]
 801235e:	b29b      	uxth	r3, r3
 8012360:	429a      	cmp	r2, r3
 8012362:	d014      	beq.n	801238e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	3301      	adds	r3, #1
 8012368:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801236a:	6a3b      	ldr	r3, [r7, #32]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d104      	bne.n	801237a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	61bb      	str	r3, [r7, #24]
 8012378:	e009      	b.n	801238e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	7fda      	ldrb	r2, [r3, #31]
 801237e:	6a3b      	ldr	r3, [r7, #32]
 8012380:	7fdb      	ldrb	r3, [r3, #31]
 8012382:	429a      	cmp	r2, r3
 8012384:	d803      	bhi.n	801238e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012388:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d001      	beq.n	801239a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012398:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80123a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d1cb      	bne.n	801233e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80123a6:	6a3b      	ldr	r3, [r7, #32]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d008      	beq.n	80123be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80123ac:	69b9      	ldr	r1, [r7, #24]
 80123ae:	6a38      	ldr	r0, [r7, #32]
 80123b0:	f7ff ff0e 	bl	80121d0 <ip_reass_free_complete_datagram>
 80123b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80123b6:	697a      	ldr	r2, [r7, #20]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	4413      	add	r3, r2
 80123bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80123be:	697a      	ldr	r2, [r7, #20]
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	429a      	cmp	r2, r3
 80123c4:	da02      	bge.n	80123cc <ip_reass_remove_oldest_datagram+0xb4>
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	dcac      	bgt.n	8012326 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80123cc:	697b      	ldr	r3, [r7, #20]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3728      	adds	r7, #40	; 0x28
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	200003fc 	.word	0x200003fc

080123dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80123e6:	2004      	movs	r0, #4
 80123e8:	f7f7 f9dc 	bl	80097a4 <memp_malloc>
 80123ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d110      	bne.n	8012416 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f7ff ff8e 	bl	8012318 <ip_reass_remove_oldest_datagram>
 80123fc:	4602      	mov	r2, r0
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	4293      	cmp	r3, r2
 8012402:	dc03      	bgt.n	801240c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012404:	2004      	movs	r0, #4
 8012406:	f7f7 f9cd 	bl	80097a4 <memp_malloc>
 801240a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012412:	2300      	movs	r3, #0
 8012414:	e016      	b.n	8012444 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012416:	2220      	movs	r2, #32
 8012418:	2100      	movs	r1, #0
 801241a:	68f8      	ldr	r0, [r7, #12]
 801241c:	f000 fe28 	bl	8013070 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	220f      	movs	r2, #15
 8012424:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012426:	4b09      	ldr	r3, [pc, #36]	; (801244c <ip_reass_enqueue_new_datagram+0x70>)
 8012428:	681a      	ldr	r2, [r3, #0]
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801242e:	4a07      	ldr	r2, [pc, #28]	; (801244c <ip_reass_enqueue_new_datagram+0x70>)
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	3308      	adds	r3, #8
 8012438:	2214      	movs	r2, #20
 801243a:	6879      	ldr	r1, [r7, #4]
 801243c:	4618      	mov	r0, r3
 801243e:	f000 fdef 	bl	8013020 <memcpy>
  return ipr;
 8012442:	68fb      	ldr	r3, [r7, #12]
}
 8012444:	4618      	mov	r0, r3
 8012446:	3710      	adds	r7, #16
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	200003fc 	.word	0x200003fc

08012450 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801245a:	4b10      	ldr	r3, [pc, #64]	; (801249c <ip_reass_dequeue_datagram+0x4c>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	687a      	ldr	r2, [r7, #4]
 8012460:	429a      	cmp	r2, r3
 8012462:	d104      	bne.n	801246e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	4a0c      	ldr	r2, [pc, #48]	; (801249c <ip_reass_dequeue_datagram+0x4c>)
 801246a:	6013      	str	r3, [r2, #0]
 801246c:	e00d      	b.n	801248a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d106      	bne.n	8012482 <ip_reass_dequeue_datagram+0x32>
 8012474:	4b0a      	ldr	r3, [pc, #40]	; (80124a0 <ip_reass_dequeue_datagram+0x50>)
 8012476:	f240 1245 	movw	r2, #325	; 0x145
 801247a:	490a      	ldr	r1, [pc, #40]	; (80124a4 <ip_reass_dequeue_datagram+0x54>)
 801247c:	480a      	ldr	r0, [pc, #40]	; (80124a8 <ip_reass_dequeue_datagram+0x58>)
 801247e:	f001 fb13 	bl	8013aa8 <iprintf>
    prev->next = ipr->next;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801248a:	6879      	ldr	r1, [r7, #4]
 801248c:	2004      	movs	r0, #4
 801248e:	f7f7 f9d5 	bl	800983c <memp_free>
}
 8012492:	bf00      	nop
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	200003fc 	.word	0x200003fc
 80124a0:	080198d8 	.word	0x080198d8
 80124a4:	080199a0 	.word	0x080199a0
 80124a8:	08019920 	.word	0x08019920

080124ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b08c      	sub	sp, #48	; 0x30
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80124b8:	2300      	movs	r3, #0
 80124ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80124bc:	2301      	movs	r3, #1
 80124be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	885b      	ldrh	r3, [r3, #2]
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7f6 fd13 	bl	8008ef8 <lwip_htons>
 80124d2:	4603      	mov	r3, r0
 80124d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80124d6:	69fb      	ldr	r3, [r7, #28]
 80124d8:	781b      	ldrb	r3, [r3, #0]
 80124da:	f003 030f 	and.w	r3, r3, #15
 80124de:	b2db      	uxtb	r3, r3
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80124e4:	7e7b      	ldrb	r3, [r7, #25]
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	8b7a      	ldrh	r2, [r7, #26]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d202      	bcs.n	80124f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80124ee:	f04f 33ff 	mov.w	r3, #4294967295
 80124f2:	e135      	b.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80124f4:	7e7b      	ldrb	r3, [r7, #25]
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	8b7a      	ldrh	r2, [r7, #26]
 80124fa:	1ad3      	subs	r3, r2, r3
 80124fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	88db      	ldrh	r3, [r3, #6]
 8012502:	b29b      	uxth	r3, r3
 8012504:	4618      	mov	r0, r3
 8012506:	f7f6 fcf7 	bl	8008ef8 <lwip_htons>
 801250a:	4603      	mov	r3, r0
 801250c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012510:	b29b      	uxth	r3, r3
 8012512:	00db      	lsls	r3, r3, #3
 8012514:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	685b      	ldr	r3, [r3, #4]
 801251a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251e:	2200      	movs	r2, #0
 8012520:	701a      	strb	r2, [r3, #0]
 8012522:	2200      	movs	r2, #0
 8012524:	705a      	strb	r2, [r3, #1]
 8012526:	2200      	movs	r2, #0
 8012528:	709a      	strb	r2, [r3, #2]
 801252a:	2200      	movs	r2, #0
 801252c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012530:	8afa      	ldrh	r2, [r7, #22]
 8012532:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012534:	8afa      	ldrh	r2, [r7, #22]
 8012536:	8b7b      	ldrh	r3, [r7, #26]
 8012538:	4413      	add	r3, r2
 801253a:	b29a      	uxth	r2, r3
 801253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012542:	88db      	ldrh	r3, [r3, #6]
 8012544:	b29b      	uxth	r3, r3
 8012546:	8afa      	ldrh	r2, [r7, #22]
 8012548:	429a      	cmp	r2, r3
 801254a:	d902      	bls.n	8012552 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801254c:	f04f 33ff 	mov.w	r3, #4294967295
 8012550:	e106      	b.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	627b      	str	r3, [r7, #36]	; 0x24
 8012558:	e068      	b.n	801262c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012562:	889b      	ldrh	r3, [r3, #4]
 8012564:	b29a      	uxth	r2, r3
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	889b      	ldrh	r3, [r3, #4]
 801256a:	b29b      	uxth	r3, r3
 801256c:	429a      	cmp	r2, r3
 801256e:	d235      	bcs.n	80125dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012574:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012578:	2b00      	cmp	r3, #0
 801257a:	d020      	beq.n	80125be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257e:	889b      	ldrh	r3, [r3, #4]
 8012580:	b29a      	uxth	r2, r3
 8012582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012584:	88db      	ldrh	r3, [r3, #6]
 8012586:	b29b      	uxth	r3, r3
 8012588:	429a      	cmp	r2, r3
 801258a:	d307      	bcc.n	801259c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258e:	88db      	ldrh	r3, [r3, #6]
 8012590:	b29a      	uxth	r2, r3
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	889b      	ldrh	r3, [r3, #4]
 8012596:	b29b      	uxth	r3, r3
 8012598:	429a      	cmp	r2, r3
 801259a:	d902      	bls.n	80125a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801259c:	f04f 33ff 	mov.w	r3, #4294967295
 80125a0:	e0de      	b.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80125a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a4:	68ba      	ldr	r2, [r7, #8]
 80125a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80125a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125aa:	88db      	ldrh	r3, [r3, #6]
 80125ac:	b29a      	uxth	r2, r3
 80125ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b0:	889b      	ldrh	r3, [r3, #4]
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d03d      	beq.n	8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80125b8:	2300      	movs	r3, #0
 80125ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80125bc:	e03a      	b.n	8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80125be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c0:	88db      	ldrh	r3, [r3, #6]
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	889b      	ldrh	r3, [r3, #4]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d902      	bls.n	80125d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125ce:	f04f 33ff 	mov.w	r3, #4294967295
 80125d2:	e0c5      	b.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	68ba      	ldr	r2, [r7, #8]
 80125d8:	605a      	str	r2, [r3, #4]
      break;
 80125da:	e02b      	b.n	8012634 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80125dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125de:	889b      	ldrh	r3, [r3, #4]
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	889b      	ldrh	r3, [r3, #4]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	429a      	cmp	r2, r3
 80125ea:	d102      	bne.n	80125f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80125ec:	f04f 33ff 	mov.w	r3, #4294967295
 80125f0:	e0b6      	b.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80125f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f4:	889b      	ldrh	r3, [r3, #4]
 80125f6:	b29a      	uxth	r2, r3
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	88db      	ldrh	r3, [r3, #6]
 80125fc:	b29b      	uxth	r3, r3
 80125fe:	429a      	cmp	r2, r3
 8012600:	d202      	bcs.n	8012608 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012602:	f04f 33ff 	mov.w	r3, #4294967295
 8012606:	e0ab      	b.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260a:	2b00      	cmp	r3, #0
 801260c:	d009      	beq.n	8012622 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012610:	88db      	ldrh	r3, [r3, #6]
 8012612:	b29a      	uxth	r2, r3
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	889b      	ldrh	r3, [r3, #4]
 8012618:	b29b      	uxth	r3, r3
 801261a:	429a      	cmp	r2, r3
 801261c:	d001      	beq.n	8012622 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801261e:	2300      	movs	r3, #0
 8012620:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	2b00      	cmp	r3, #0
 8012630:	d193      	bne.n	801255a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012632:	e000      	b.n	8012636 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012634:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012638:	2b00      	cmp	r3, #0
 801263a:	d12d      	bne.n	8012698 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801263e:	2b00      	cmp	r3, #0
 8012640:	d01c      	beq.n	801267c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012644:	88db      	ldrh	r3, [r3, #6]
 8012646:	b29a      	uxth	r2, r3
 8012648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264a:	889b      	ldrh	r3, [r3, #4]
 801264c:	b29b      	uxth	r3, r3
 801264e:	429a      	cmp	r2, r3
 8012650:	d906      	bls.n	8012660 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012652:	4b45      	ldr	r3, [pc, #276]	; (8012768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012654:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012658:	4944      	ldr	r1, [pc, #272]	; (801276c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801265a:	4845      	ldr	r0, [pc, #276]	; (8012770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801265c:	f001 fa24 	bl	8013aa8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012662:	68ba      	ldr	r2, [r7, #8]
 8012664:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012668:	88db      	ldrh	r3, [r3, #6]
 801266a:	b29a      	uxth	r2, r3
 801266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801266e:	889b      	ldrh	r3, [r3, #4]
 8012670:	b29b      	uxth	r3, r3
 8012672:	429a      	cmp	r2, r3
 8012674:	d010      	beq.n	8012698 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012676:	2300      	movs	r3, #0
 8012678:	623b      	str	r3, [r7, #32]
 801267a:	e00d      	b.n	8012698 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d006      	beq.n	8012692 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012684:	4b38      	ldr	r3, [pc, #224]	; (8012768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012686:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801268a:	493a      	ldr	r1, [pc, #232]	; (8012774 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801268c:	4838      	ldr	r0, [pc, #224]	; (8012770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801268e:	f001 fa0b 	bl	8013aa8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	68ba      	ldr	r2, [r7, #8]
 8012696:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d105      	bne.n	80126aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	7f9b      	ldrb	r3, [r3, #30]
 80126a2:	f003 0301 	and.w	r3, r3, #1
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d059      	beq.n	801275e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80126aa:	6a3b      	ldr	r3, [r7, #32]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d04f      	beq.n	8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d006      	beq.n	80126c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	685b      	ldr	r3, [r3, #4]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	889b      	ldrh	r3, [r3, #4]
 80126c0:	b29b      	uxth	r3, r3
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d002      	beq.n	80126cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80126c6:	2300      	movs	r3, #0
 80126c8:	623b      	str	r3, [r7, #32]
 80126ca:	e041      	b.n	8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80126cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80126d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80126d6:	e012      	b.n	80126fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80126d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126da:	685b      	ldr	r3, [r3, #4]
 80126dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80126de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e0:	88db      	ldrh	r3, [r3, #6]
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e6:	889b      	ldrh	r3, [r3, #4]
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d002      	beq.n	80126f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80126ee:	2300      	movs	r3, #0
 80126f0:	623b      	str	r3, [r7, #32]
            break;
 80126f2:	e007      	b.n	8012704 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80126f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80126f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80126fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012700:	2b00      	cmp	r3, #0
 8012702:	d1e9      	bne.n	80126d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012704:	6a3b      	ldr	r3, [r7, #32]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d022      	beq.n	8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d106      	bne.n	8012720 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012712:	4b15      	ldr	r3, [pc, #84]	; (8012768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012714:	f240 12df 	movw	r2, #479	; 0x1df
 8012718:	4917      	ldr	r1, [pc, #92]	; (8012778 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801271a:	4815      	ldr	r0, [pc, #84]	; (8012770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801271c:	f001 f9c4 	bl	8013aa8 <iprintf>
          LWIP_ASSERT("sanity check",
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012728:	429a      	cmp	r2, r3
 801272a:	d106      	bne.n	801273a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801272c:	4b0e      	ldr	r3, [pc, #56]	; (8012768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801272e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012732:	4911      	ldr	r1, [pc, #68]	; (8012778 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012734:	480e      	ldr	r0, [pc, #56]	; (8012770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012736:	f001 f9b7 	bl	8013aa8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801273a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d006      	beq.n	8012750 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012742:	4b09      	ldr	r3, [pc, #36]	; (8012768 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012744:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012748:	490c      	ldr	r1, [pc, #48]	; (801277c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801274a:	4809      	ldr	r0, [pc, #36]	; (8012770 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801274c:	f001 f9ac 	bl	8013aa8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012750:	6a3b      	ldr	r3, [r7, #32]
 8012752:	2b00      	cmp	r3, #0
 8012754:	bf14      	ite	ne
 8012756:	2301      	movne	r3, #1
 8012758:	2300      	moveq	r3, #0
 801275a:	b2db      	uxtb	r3, r3
 801275c:	e000      	b.n	8012760 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801275e:	2300      	movs	r3, #0
}
 8012760:	4618      	mov	r0, r3
 8012762:	3730      	adds	r7, #48	; 0x30
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	080198d8 	.word	0x080198d8
 801276c:	080199bc 	.word	0x080199bc
 8012770:	08019920 	.word	0x08019920
 8012774:	080199dc 	.word	0x080199dc
 8012778:	08019a14 	.word	0x08019a14
 801277c:	08019a24 	.word	0x08019a24

08012780 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b08e      	sub	sp, #56	; 0x38
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	f003 030f 	and.w	r3, r3, #15
 8012796:	b2db      	uxtb	r3, r3
 8012798:	009b      	lsls	r3, r3, #2
 801279a:	b2db      	uxtb	r3, r3
 801279c:	2b14      	cmp	r3, #20
 801279e:	f040 8167 	bne.w	8012a70 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80127a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a4:	88db      	ldrh	r3, [r3, #6]
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f6 fba5 	bl	8008ef8 <lwip_htons>
 80127ae:	4603      	mov	r3, r0
 80127b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	00db      	lsls	r3, r3, #3
 80127b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80127ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127bc:	885b      	ldrh	r3, [r3, #2]
 80127be:	b29b      	uxth	r3, r3
 80127c0:	4618      	mov	r0, r3
 80127c2:	f7f6 fb99 	bl	8008ef8 <lwip_htons>
 80127c6:	4603      	mov	r3, r0
 80127c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80127ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	f003 030f 	and.w	r3, r3, #15
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80127da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127de:	b29b      	uxth	r3, r3
 80127e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127e2:	429a      	cmp	r2, r3
 80127e4:	f0c0 8146 	bcc.w	8012a74 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80127e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127f0:	1ad3      	subs	r3, r2, r3
 80127f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7f7 febb 	bl	800a570 <pbuf_clen>
 80127fa:	4603      	mov	r3, r0
 80127fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80127fe:	4b9f      	ldr	r3, [pc, #636]	; (8012a7c <ip4_reass+0x2fc>)
 8012800:	881b      	ldrh	r3, [r3, #0]
 8012802:	461a      	mov	r2, r3
 8012804:	8c3b      	ldrh	r3, [r7, #32]
 8012806:	4413      	add	r3, r2
 8012808:	2b0a      	cmp	r3, #10
 801280a:	dd10      	ble.n	801282e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801280c:	8c3b      	ldrh	r3, [r7, #32]
 801280e:	4619      	mov	r1, r3
 8012810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012812:	f7ff fd81 	bl	8012318 <ip_reass_remove_oldest_datagram>
 8012816:	4603      	mov	r3, r0
 8012818:	2b00      	cmp	r3, #0
 801281a:	f000 812d 	beq.w	8012a78 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801281e:	4b97      	ldr	r3, [pc, #604]	; (8012a7c <ip4_reass+0x2fc>)
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	461a      	mov	r2, r3
 8012824:	8c3b      	ldrh	r3, [r7, #32]
 8012826:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012828:	2b0a      	cmp	r3, #10
 801282a:	f300 8125 	bgt.w	8012a78 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801282e:	4b94      	ldr	r3, [pc, #592]	; (8012a80 <ip4_reass+0x300>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	633b      	str	r3, [r7, #48]	; 0x30
 8012834:	e015      	b.n	8012862 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012838:	695a      	ldr	r2, [r3, #20]
 801283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283c:	68db      	ldr	r3, [r3, #12]
 801283e:	429a      	cmp	r2, r3
 8012840:	d10c      	bne.n	801285c <ip4_reass+0xdc>
 8012842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012844:	699a      	ldr	r2, [r3, #24]
 8012846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012848:	691b      	ldr	r3, [r3, #16]
 801284a:	429a      	cmp	r2, r3
 801284c:	d106      	bne.n	801285c <ip4_reass+0xdc>
 801284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012850:	899a      	ldrh	r2, [r3, #12]
 8012852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012854:	889b      	ldrh	r3, [r3, #4]
 8012856:	b29b      	uxth	r3, r3
 8012858:	429a      	cmp	r2, r3
 801285a:	d006      	beq.n	801286a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	633b      	str	r3, [r7, #48]	; 0x30
 8012862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012864:	2b00      	cmp	r3, #0
 8012866:	d1e6      	bne.n	8012836 <ip4_reass+0xb6>
 8012868:	e000      	b.n	801286c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801286a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286e:	2b00      	cmp	r3, #0
 8012870:	d109      	bne.n	8012886 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012872:	8c3b      	ldrh	r3, [r7, #32]
 8012874:	4619      	mov	r1, r3
 8012876:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012878:	f7ff fdb0 	bl	80123dc <ip_reass_enqueue_new_datagram>
 801287c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012880:	2b00      	cmp	r3, #0
 8012882:	d11c      	bne.n	80128be <ip4_reass+0x13e>
      goto nullreturn;
 8012884:	e109      	b.n	8012a9a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012888:	88db      	ldrh	r3, [r3, #6]
 801288a:	b29b      	uxth	r3, r3
 801288c:	4618      	mov	r0, r3
 801288e:	f7f6 fb33 	bl	8008ef8 <lwip_htons>
 8012892:	4603      	mov	r3, r0
 8012894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012898:	2b00      	cmp	r3, #0
 801289a:	d110      	bne.n	80128be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289e:	89db      	ldrh	r3, [r3, #14]
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7f6 fb29 	bl	8008ef8 <lwip_htons>
 80128a6:	4603      	mov	r3, r0
 80128a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d006      	beq.n	80128be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80128b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b2:	3308      	adds	r3, #8
 80128b4:	2214      	movs	r2, #20
 80128b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80128b8:	4618      	mov	r0, r3
 80128ba:	f000 fbb1 	bl	8013020 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80128be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c0:	88db      	ldrh	r3, [r3, #6]
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	f003 0320 	and.w	r3, r3, #32
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	bf0c      	ite	eq
 80128cc:	2301      	moveq	r3, #1
 80128ce:	2300      	movne	r3, #0
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00e      	beq.n	80128f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80128da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80128dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80128de:	4413      	add	r3, r2
 80128e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80128e2:	8b7a      	ldrh	r2, [r7, #26]
 80128e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80128e6:	429a      	cmp	r2, r3
 80128e8:	f0c0 80a0 	bcc.w	8012a2c <ip4_reass+0x2ac>
 80128ec:	8b7b      	ldrh	r3, [r7, #26]
 80128ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80128f2:	4293      	cmp	r3, r2
 80128f4:	f200 809a 	bhi.w	8012a2c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80128f8:	69fa      	ldr	r2, [r7, #28]
 80128fa:	6879      	ldr	r1, [r7, #4]
 80128fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128fe:	f7ff fdd5 	bl	80124ac <ip_reass_chain_frag_into_datagram_and_validate>
 8012902:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	f1b3 3fff 	cmp.w	r3, #4294967295
 801290a:	f000 8091 	beq.w	8012a30 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801290e:	4b5b      	ldr	r3, [pc, #364]	; (8012a7c <ip4_reass+0x2fc>)
 8012910:	881a      	ldrh	r2, [r3, #0]
 8012912:	8c3b      	ldrh	r3, [r7, #32]
 8012914:	4413      	add	r3, r2
 8012916:	b29a      	uxth	r2, r3
 8012918:	4b58      	ldr	r3, [pc, #352]	; (8012a7c <ip4_reass+0x2fc>)
 801291a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d00d      	beq.n	801293e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012922:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012926:	4413      	add	r3, r2
 8012928:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801292c:	8a7a      	ldrh	r2, [r7, #18]
 801292e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012932:	7f9b      	ldrb	r3, [r3, #30]
 8012934:	f043 0301 	orr.w	r3, r3, #1
 8012938:	b2da      	uxtb	r2, r3
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	2b01      	cmp	r3, #1
 8012942:	d171      	bne.n	8012a28 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012946:	8b9b      	ldrh	r3, [r3, #28]
 8012948:	3314      	adds	r3, #20
 801294a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012960:	3308      	adds	r3, #8
 8012962:	2214      	movs	r2, #20
 8012964:	4619      	mov	r1, r3
 8012966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012968:	f000 fb5a 	bl	8013020 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801296c:	8a3b      	ldrh	r3, [r7, #16]
 801296e:	4618      	mov	r0, r3
 8012970:	f7f6 fac2 	bl	8008ef8 <lwip_htons>
 8012974:	4603      	mov	r3, r0
 8012976:	461a      	mov	r2, r3
 8012978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801297a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801297e:	2200      	movs	r2, #0
 8012980:	719a      	strb	r2, [r3, #6]
 8012982:	2200      	movs	r2, #0
 8012984:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012988:	2200      	movs	r2, #0
 801298a:	729a      	strb	r2, [r3, #10]
 801298c:	2200      	movs	r2, #0
 801298e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012996:	e00d      	b.n	80129b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801299e:	2114      	movs	r1, #20
 80129a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80129a2:	f7f7 fcd7 	bl	800a354 <pbuf_remove_header>
      pbuf_cat(p, r);
 80129a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f7f7 fe1b 	bl	800a5e4 <pbuf_cat>
      r = iprh->next_pbuf;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80129b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d1ee      	bne.n	8012998 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80129ba:	4b31      	ldr	r3, [pc, #196]	; (8012a80 <ip4_reass+0x300>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d102      	bne.n	80129ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80129c4:	2300      	movs	r3, #0
 80129c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129c8:	e010      	b.n	80129ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80129ca:	4b2d      	ldr	r3, [pc, #180]	; (8012a80 <ip4_reass+0x300>)
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129d0:	e007      	b.n	80129e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80129d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129d8:	429a      	cmp	r2, r3
 80129da:	d006      	beq.n	80129ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80129dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d1f4      	bne.n	80129d2 <ip4_reass+0x252>
 80129e8:	e000      	b.n	80129ec <ip4_reass+0x26c>
          break;
 80129ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80129ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129f0:	f7ff fd2e 	bl	8012450 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7f7 fdbb 	bl	800a570 <pbuf_clen>
 80129fa:	4603      	mov	r3, r0
 80129fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80129fe:	4b1f      	ldr	r3, [pc, #124]	; (8012a7c <ip4_reass+0x2fc>)
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	8c3a      	ldrh	r2, [r7, #32]
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d906      	bls.n	8012a16 <ip4_reass+0x296>
 8012a08:	4b1e      	ldr	r3, [pc, #120]	; (8012a84 <ip4_reass+0x304>)
 8012a0a:	f240 229b 	movw	r2, #667	; 0x29b
 8012a0e:	491e      	ldr	r1, [pc, #120]	; (8012a88 <ip4_reass+0x308>)
 8012a10:	481e      	ldr	r0, [pc, #120]	; (8012a8c <ip4_reass+0x30c>)
 8012a12:	f001 f849 	bl	8013aa8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012a16:	4b19      	ldr	r3, [pc, #100]	; (8012a7c <ip4_reass+0x2fc>)
 8012a18:	881a      	ldrh	r2, [r3, #0]
 8012a1a:	8c3b      	ldrh	r3, [r7, #32]
 8012a1c:	1ad3      	subs	r3, r2, r3
 8012a1e:	b29a      	uxth	r2, r3
 8012a20:	4b16      	ldr	r3, [pc, #88]	; (8012a7c <ip4_reass+0x2fc>)
 8012a22:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	e03c      	b.n	8012aa2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e03a      	b.n	8012aa2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012a2c:	bf00      	nop
 8012a2e:	e000      	b.n	8012a32 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012a30:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d106      	bne.n	8012a46 <ip4_reass+0x2c6>
 8012a38:	4b12      	ldr	r3, [pc, #72]	; (8012a84 <ip4_reass+0x304>)
 8012a3a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012a3e:	4914      	ldr	r1, [pc, #80]	; (8012a90 <ip4_reass+0x310>)
 8012a40:	4812      	ldr	r0, [pc, #72]	; (8012a8c <ip4_reass+0x30c>)
 8012a42:	f001 f831 	bl	8013aa8 <iprintf>
  if (ipr->p == NULL) {
 8012a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d124      	bne.n	8012a98 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012a4e:	4b0c      	ldr	r3, [pc, #48]	; (8012a80 <ip4_reass+0x300>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d006      	beq.n	8012a66 <ip4_reass+0x2e6>
 8012a58:	4b0a      	ldr	r3, [pc, #40]	; (8012a84 <ip4_reass+0x304>)
 8012a5a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012a5e:	490d      	ldr	r1, [pc, #52]	; (8012a94 <ip4_reass+0x314>)
 8012a60:	480a      	ldr	r0, [pc, #40]	; (8012a8c <ip4_reass+0x30c>)
 8012a62:	f001 f821 	bl	8013aa8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012a66:	2100      	movs	r1, #0
 8012a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a6a:	f7ff fcf1 	bl	8012450 <ip_reass_dequeue_datagram>
 8012a6e:	e014      	b.n	8012a9a <ip4_reass+0x31a>
    goto nullreturn;
 8012a70:	bf00      	nop
 8012a72:	e012      	b.n	8012a9a <ip4_reass+0x31a>
    goto nullreturn;
 8012a74:	bf00      	nop
 8012a76:	e010      	b.n	8012a9a <ip4_reass+0x31a>
      goto nullreturn;
 8012a78:	bf00      	nop
 8012a7a:	e00e      	b.n	8012a9a <ip4_reass+0x31a>
 8012a7c:	20000400 	.word	0x20000400
 8012a80:	200003fc 	.word	0x200003fc
 8012a84:	080198d8 	.word	0x080198d8
 8012a88:	08019a48 	.word	0x08019a48
 8012a8c:	08019920 	.word	0x08019920
 8012a90:	08019a64 	.word	0x08019a64
 8012a94:	08019a70 	.word	0x08019a70
  }

nullreturn:
 8012a98:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7f7 fce0 	bl	800a460 <pbuf_free>
  return NULL;
 8012aa0:	2300      	movs	r3, #0
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3738      	adds	r7, #56	; 0x38
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop

08012aac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012ab0:	2005      	movs	r0, #5
 8012ab2:	f7f6 fe77 	bl	80097a4 <memp_malloc>
 8012ab6:	4603      	mov	r3, r0
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	bd80      	pop	{r7, pc}

08012abc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d106      	bne.n	8012ad8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012aca:	4b07      	ldr	r3, [pc, #28]	; (8012ae8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012acc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012ad0:	4906      	ldr	r1, [pc, #24]	; (8012aec <ip_frag_free_pbuf_custom_ref+0x30>)
 8012ad2:	4807      	ldr	r0, [pc, #28]	; (8012af0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012ad4:	f000 ffe8 	bl	8013aa8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012ad8:	6879      	ldr	r1, [r7, #4]
 8012ada:	2005      	movs	r0, #5
 8012adc:	f7f6 feae 	bl	800983c <memp_free>
}
 8012ae0:	bf00      	nop
 8012ae2:	3708      	adds	r7, #8
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	080198d8 	.word	0x080198d8
 8012aec:	08019a90 	.word	0x08019a90
 8012af0:	08019920 	.word	0x08019920

08012af4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b084      	sub	sp, #16
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d106      	bne.n	8012b14 <ipfrag_free_pbuf_custom+0x20>
 8012b06:	4b11      	ldr	r3, [pc, #68]	; (8012b4c <ipfrag_free_pbuf_custom+0x58>)
 8012b08:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012b0c:	4910      	ldr	r1, [pc, #64]	; (8012b50 <ipfrag_free_pbuf_custom+0x5c>)
 8012b0e:	4811      	ldr	r0, [pc, #68]	; (8012b54 <ipfrag_free_pbuf_custom+0x60>)
 8012b10:	f000 ffca 	bl	8013aa8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012b14:	68fa      	ldr	r2, [r7, #12]
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d006      	beq.n	8012b2a <ipfrag_free_pbuf_custom+0x36>
 8012b1c:	4b0b      	ldr	r3, [pc, #44]	; (8012b4c <ipfrag_free_pbuf_custom+0x58>)
 8012b1e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012b22:	490d      	ldr	r1, [pc, #52]	; (8012b58 <ipfrag_free_pbuf_custom+0x64>)
 8012b24:	480b      	ldr	r0, [pc, #44]	; (8012b54 <ipfrag_free_pbuf_custom+0x60>)
 8012b26:	f000 ffbf 	bl	8013aa8 <iprintf>
  if (pcr->original != NULL) {
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	695b      	ldr	r3, [r3, #20]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d004      	beq.n	8012b3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	695b      	ldr	r3, [r3, #20]
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7f7 fc92 	bl	800a460 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012b3c:	68f8      	ldr	r0, [r7, #12]
 8012b3e:	f7ff ffbd 	bl	8012abc <ip_frag_free_pbuf_custom_ref>
}
 8012b42:	bf00      	nop
 8012b44:	3710      	adds	r7, #16
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}
 8012b4a:	bf00      	nop
 8012b4c:	080198d8 	.word	0x080198d8
 8012b50:	08019a9c 	.word	0x08019a9c
 8012b54:	08019920 	.word	0x08019920
 8012b58:	08019aa8 	.word	0x08019aa8

08012b5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b094      	sub	sp, #80	; 0x50
 8012b60:	af02      	add	r7, sp, #8
 8012b62:	60f8      	str	r0, [r7, #12]
 8012b64:	60b9      	str	r1, [r7, #8]
 8012b66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b72:	3b14      	subs	r3, #20
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	da00      	bge.n	8012b7a <ip4_frag+0x1e>
 8012b78:	3307      	adds	r3, #7
 8012b7a:	10db      	asrs	r3, r3, #3
 8012b7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012b7e:	2314      	movs	r3, #20
 8012b80:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8012b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	f003 030f 	and.w	r3, r3, #15
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	2b14      	cmp	r3, #20
 8012b9c:	d002      	beq.n	8012ba4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8012b9e:	f06f 0305 	mvn.w	r3, #5
 8012ba2:	e110      	b.n	8012dc6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	895b      	ldrh	r3, [r3, #10]
 8012ba8:	2b13      	cmp	r3, #19
 8012baa:	d809      	bhi.n	8012bc0 <ip4_frag+0x64>
 8012bac:	4b88      	ldr	r3, [pc, #544]	; (8012dd0 <ip4_frag+0x274>)
 8012bae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8012bb2:	4988      	ldr	r1, [pc, #544]	; (8012dd4 <ip4_frag+0x278>)
 8012bb4:	4888      	ldr	r0, [pc, #544]	; (8012dd8 <ip4_frag+0x27c>)
 8012bb6:	f000 ff77 	bl	8013aa8 <iprintf>
 8012bba:	f06f 0305 	mvn.w	r3, #5
 8012bbe:	e102      	b.n	8012dc6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc2:	88db      	ldrh	r3, [r3, #6]
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7f6 f996 	bl	8008ef8 <lwip_htons>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8012bd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012bd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012bda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012be0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	891b      	ldrh	r3, [r3, #8]
 8012be6:	3b14      	subs	r3, #20
 8012be8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012bec:	e0e1      	b.n	8012db2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012bee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bf0:	00db      	lsls	r3, r3, #3
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	bf28      	it	cs
 8012bfc:	4613      	movcs	r3, r2
 8012bfe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012c00:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c04:	2114      	movs	r1, #20
 8012c06:	200e      	movs	r0, #14
 8012c08:	f7f7 f946 	bl	8009e98 <pbuf_alloc>
 8012c0c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	f000 80d5 	beq.w	8012dc0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c18:	895b      	ldrh	r3, [r3, #10]
 8012c1a:	2b13      	cmp	r3, #19
 8012c1c:	d806      	bhi.n	8012c2c <ip4_frag+0xd0>
 8012c1e:	4b6c      	ldr	r3, [pc, #432]	; (8012dd0 <ip4_frag+0x274>)
 8012c20:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012c24:	496d      	ldr	r1, [pc, #436]	; (8012ddc <ip4_frag+0x280>)
 8012c26:	486c      	ldr	r0, [pc, #432]	; (8012dd8 <ip4_frag+0x27c>)
 8012c28:	f000 ff3e 	bl	8013aa8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	2214      	movs	r2, #20
 8012c32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012c34:	4618      	mov	r0, r3
 8012c36:	f000 f9f3 	bl	8013020 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012c40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012c46:	e064      	b.n	8012d12 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	895a      	ldrh	r2, [r3, #10]
 8012c4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012c4e:	1ad3      	subs	r3, r2, r3
 8012c50:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	895b      	ldrh	r3, [r3, #10]
 8012c56:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d906      	bls.n	8012c6a <ip4_frag+0x10e>
 8012c5c:	4b5c      	ldr	r3, [pc, #368]	; (8012dd0 <ip4_frag+0x274>)
 8012c5e:	f240 322d 	movw	r2, #813	; 0x32d
 8012c62:	495f      	ldr	r1, [pc, #380]	; (8012de0 <ip4_frag+0x284>)
 8012c64:	485c      	ldr	r0, [pc, #368]	; (8012dd8 <ip4_frag+0x27c>)
 8012c66:	f000 ff1f 	bl	8013aa8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012c6a:	8bfa      	ldrh	r2, [r7, #30]
 8012c6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012c70:	4293      	cmp	r3, r2
 8012c72:	bf28      	it	cs
 8012c74:	4613      	movcs	r3, r2
 8012c76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012c7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d105      	bne.n	8012c8e <ip4_frag+0x132>
        poff = 0;
 8012c82:	2300      	movs	r3, #0
 8012c84:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	60fb      	str	r3, [r7, #12]
        continue;
 8012c8c:	e041      	b.n	8012d12 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012c8e:	f7ff ff0d 	bl	8012aac <ip_frag_alloc_pbuf_custom_ref>
 8012c92:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012c94:	69bb      	ldr	r3, [r7, #24]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d103      	bne.n	8012ca2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012c9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c9c:	f7f7 fbe0 	bl	800a460 <pbuf_free>
        goto memerr;
 8012ca0:	e08f      	b.n	8012dc2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ca2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ca8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012caa:	4413      	add	r3, r2
 8012cac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012cb0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012cb4:	9201      	str	r2, [sp, #4]
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2241      	movs	r2, #65	; 0x41
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	f7f7 fa15 	bl	800a0ec <pbuf_alloced_custom>
 8012cc2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d106      	bne.n	8012cd8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012cca:	69b8      	ldr	r0, [r7, #24]
 8012ccc:	f7ff fef6 	bl	8012abc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cd2:	f7f7 fbc5 	bl	800a460 <pbuf_free>
        goto memerr;
 8012cd6:	e074      	b.n	8012dc2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012cd8:	68f8      	ldr	r0, [r7, #12]
 8012cda:	f7f7 fc61 	bl	800a5a0 <pbuf_ref>
      pcr->original = p;
 8012cde:	69bb      	ldr	r3, [r7, #24]
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012ce4:	69bb      	ldr	r3, [r7, #24]
 8012ce6:	4a3f      	ldr	r2, [pc, #252]	; (8012de4 <ip4_frag+0x288>)
 8012ce8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012cea:	6979      	ldr	r1, [r7, #20]
 8012cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cee:	f7f7 fc79 	bl	800a5e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012cf2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012cf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012cfa:	1ad3      	subs	r3, r2, r3
 8012cfc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012d00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d004      	beq.n	8012d12 <ip4_frag+0x1b6>
        poff = 0;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012d12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d196      	bne.n	8012c48 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012d1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012d1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012d20:	4413      	add	r3, r2
 8012d22:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d28:	f1a3 0213 	sub.w	r2, r3, #19
 8012d2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d30:	429a      	cmp	r2, r3
 8012d32:	bfcc      	ite	gt
 8012d34:	2301      	movgt	r3, #1
 8012d36:	2300      	movle	r3, #0
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012d3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d44:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012d46:	6a3b      	ldr	r3, [r7, #32]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <ip4_frag+0x1f6>
 8012d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d003      	beq.n	8012d5a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012d52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012d58:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012d5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7f6 f8cb 	bl	8008ef8 <lwip_htons>
 8012d62:	4603      	mov	r3, r0
 8012d64:	461a      	mov	r2, r3
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012d6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012d6c:	3314      	adds	r3, #20
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7f6 f8c1 	bl	8008ef8 <lwip_htons>
 8012d76:	4603      	mov	r3, r0
 8012d78:	461a      	mov	r2, r3
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	2200      	movs	r2, #0
 8012d82:	729a      	strb	r2, [r3, #10]
 8012d84:	2200      	movs	r2, #0
 8012d86:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012d88:	68bb      	ldr	r3, [r7, #8]
 8012d8a:	695b      	ldr	r3, [r3, #20]
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d90:	68b8      	ldr	r0, [r7, #8]
 8012d92:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d96:	f7f7 fb63 	bl	800a460 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012d9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012da6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012daa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012dac:	4413      	add	r3, r2
 8012dae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012db2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	f47f af19 	bne.w	8012bee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	e002      	b.n	8012dc6 <ip4_frag+0x26a>
      goto memerr;
 8012dc0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3748      	adds	r7, #72	; 0x48
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	080198d8 	.word	0x080198d8
 8012dd4:	08019ab4 	.word	0x08019ab4
 8012dd8:	08019920 	.word	0x08019920
 8012ddc:	08019ad0 	.word	0x08019ad0
 8012de0:	08019af0 	.word	0x08019af0
 8012de4:	08012af5 	.word	0x08012af5

08012de8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b086      	sub	sp, #24
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012df2:	230e      	movs	r3, #14
 8012df4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	895b      	ldrh	r3, [r3, #10]
 8012dfa:	2b0e      	cmp	r3, #14
 8012dfc:	d96e      	bls.n	8012edc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	7bdb      	ldrb	r3, [r3, #15]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	b2da      	uxtb	r2, r3
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	7b1a      	ldrb	r2, [r3, #12]
 8012e1e:	7b5b      	ldrb	r3, [r3, #13]
 8012e20:	021b      	lsls	r3, r3, #8
 8012e22:	4313      	orrs	r3, r2
 8012e24:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	f003 0301 	and.w	r3, r3, #1
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d023      	beq.n	8012e7a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	d10f      	bne.n	8012e5a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	785b      	ldrb	r3, [r3, #1]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d11b      	bne.n	8012e7a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012e46:	2b5e      	cmp	r3, #94	; 0x5e
 8012e48:	d117      	bne.n	8012e7a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	7b5b      	ldrb	r3, [r3, #13]
 8012e4e:	f043 0310 	orr.w	r3, r3, #16
 8012e52:	b2da      	uxtb	r2, r3
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	735a      	strb	r2, [r3, #13]
 8012e58:	e00f      	b.n	8012e7a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	2206      	movs	r2, #6
 8012e5e:	4928      	ldr	r1, [pc, #160]	; (8012f00 <ethernet_input+0x118>)
 8012e60:	4618      	mov	r0, r3
 8012e62:	f000 f8cf 	bl	8013004 <memcmp>
 8012e66:	4603      	mov	r3, r0
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d106      	bne.n	8012e7a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	7b5b      	ldrb	r3, [r3, #13]
 8012e70:	f043 0308 	orr.w	r3, r3, #8
 8012e74:	b2da      	uxtb	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012e7a:	89fb      	ldrh	r3, [r7, #14]
 8012e7c:	2b08      	cmp	r3, #8
 8012e7e:	d003      	beq.n	8012e88 <ethernet_input+0xa0>
 8012e80:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012e84:	d014      	beq.n	8012eb0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012e86:	e032      	b.n	8012eee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012e8e:	f003 0308 	and.w	r3, r3, #8
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d024      	beq.n	8012ee0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012e96:	8afb      	ldrh	r3, [r7, #22]
 8012e98:	4619      	mov	r1, r3
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f7f7 fa5a 	bl	800a354 <pbuf_remove_header>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d11e      	bne.n	8012ee4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012ea6:	6839      	ldr	r1, [r7, #0]
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f7fe ff27 	bl	8011cfc <ip4_input>
      break;
 8012eae:	e013      	b.n	8012ed8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012eb6:	f003 0308 	and.w	r3, r3, #8
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d014      	beq.n	8012ee8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012ebe:	8afb      	ldrh	r3, [r7, #22]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f7f7 fa46 	bl	800a354 <pbuf_remove_header>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d10e      	bne.n	8012eec <ethernet_input+0x104>
        etharp_input(p, netif);
 8012ece:	6839      	ldr	r1, [r7, #0]
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f7fe f8c9 	bl	8011068 <etharp_input>
      break;
 8012ed6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	e00c      	b.n	8012ef6 <ethernet_input+0x10e>
    goto free_and_return;
 8012edc:	bf00      	nop
 8012ede:	e006      	b.n	8012eee <ethernet_input+0x106>
        goto free_and_return;
 8012ee0:	bf00      	nop
 8012ee2:	e004      	b.n	8012eee <ethernet_input+0x106>
        goto free_and_return;
 8012ee4:	bf00      	nop
 8012ee6:	e002      	b.n	8012eee <ethernet_input+0x106>
        goto free_and_return;
 8012ee8:	bf00      	nop
 8012eea:	e000      	b.n	8012eee <ethernet_input+0x106>
        goto free_and_return;
 8012eec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f7f7 fab6 	bl	800a460 <pbuf_free>
  return ERR_OK;
 8012ef4:	2300      	movs	r3, #0
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3718      	adds	r7, #24
 8012efa:	46bd      	mov	sp, r7
 8012efc:	bd80      	pop	{r7, pc}
 8012efe:	bf00      	nop
 8012f00:	08019c78 	.word	0x08019c78

08012f04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b086      	sub	sp, #24
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	60f8      	str	r0, [r7, #12]
 8012f0c:	60b9      	str	r1, [r7, #8]
 8012f0e:	607a      	str	r2, [r7, #4]
 8012f10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012f12:	8c3b      	ldrh	r3, [r7, #32]
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7f5 ffef 	bl	8008ef8 <lwip_htons>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012f1e:	210e      	movs	r1, #14
 8012f20:	68b8      	ldr	r0, [r7, #8]
 8012f22:	f7f7 fa07 	bl	800a334 <pbuf_add_header>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d125      	bne.n	8012f78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012f32:	693b      	ldr	r3, [r7, #16]
 8012f34:	8afa      	ldrh	r2, [r7, #22]
 8012f36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	2206      	movs	r2, #6
 8012f3c:	6839      	ldr	r1, [r7, #0]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f000 f86e 	bl	8013020 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	3306      	adds	r3, #6
 8012f48:	2206      	movs	r2, #6
 8012f4a:	6879      	ldr	r1, [r7, #4]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 f867 	bl	8013020 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f58:	2b06      	cmp	r3, #6
 8012f5a:	d006      	beq.n	8012f6a <ethernet_output+0x66>
 8012f5c:	4b0a      	ldr	r3, [pc, #40]	; (8012f88 <ethernet_output+0x84>)
 8012f5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012f62:	490a      	ldr	r1, [pc, #40]	; (8012f8c <ethernet_output+0x88>)
 8012f64:	480a      	ldr	r0, [pc, #40]	; (8012f90 <ethernet_output+0x8c>)
 8012f66:	f000 fd9f 	bl	8013aa8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	699b      	ldr	r3, [r3, #24]
 8012f6e:	68b9      	ldr	r1, [r7, #8]
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	4798      	blx	r3
 8012f74:	4603      	mov	r3, r0
 8012f76:	e002      	b.n	8012f7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012f78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012f7a:	f06f 0301 	mvn.w	r3, #1
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	3718      	adds	r7, #24
 8012f82:	46bd      	mov	sp, r7
 8012f84:	bd80      	pop	{r7, pc}
 8012f86:	bf00      	nop
 8012f88:	08019b00 	.word	0x08019b00
 8012f8c:	08019b38 	.word	0x08019b38
 8012f90:	08019b6c 	.word	0x08019b6c

08012f94 <atoi>:
 8012f94:	220a      	movs	r2, #10
 8012f96:	2100      	movs	r1, #0
 8012f98:	f000 beae 	b.w	8013cf8 <strtol>

08012f9c <__libc_init_array>:
 8012f9c:	b570      	push	{r4, r5, r6, lr}
 8012f9e:	4d0d      	ldr	r5, [pc, #52]	; (8012fd4 <__libc_init_array+0x38>)
 8012fa0:	4c0d      	ldr	r4, [pc, #52]	; (8012fd8 <__libc_init_array+0x3c>)
 8012fa2:	1b64      	subs	r4, r4, r5
 8012fa4:	10a4      	asrs	r4, r4, #2
 8012fa6:	2600      	movs	r6, #0
 8012fa8:	42a6      	cmp	r6, r4
 8012faa:	d109      	bne.n	8012fc0 <__libc_init_array+0x24>
 8012fac:	4d0b      	ldr	r5, [pc, #44]	; (8012fdc <__libc_init_array+0x40>)
 8012fae:	4c0c      	ldr	r4, [pc, #48]	; (8012fe0 <__libc_init_array+0x44>)
 8012fb0:	f003 ff88 	bl	8016ec4 <_init>
 8012fb4:	1b64      	subs	r4, r4, r5
 8012fb6:	10a4      	asrs	r4, r4, #2
 8012fb8:	2600      	movs	r6, #0
 8012fba:	42a6      	cmp	r6, r4
 8012fbc:	d105      	bne.n	8012fca <__libc_init_array+0x2e>
 8012fbe:	bd70      	pop	{r4, r5, r6, pc}
 8012fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fc4:	4798      	blx	r3
 8012fc6:	3601      	adds	r6, #1
 8012fc8:	e7ee      	b.n	8012fa8 <__libc_init_array+0xc>
 8012fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fce:	4798      	blx	r3
 8012fd0:	3601      	adds	r6, #1
 8012fd2:	e7f2      	b.n	8012fba <__libc_init_array+0x1e>
 8012fd4:	0801a110 	.word	0x0801a110
 8012fd8:	0801a110 	.word	0x0801a110
 8012fdc:	0801a110 	.word	0x0801a110
 8012fe0:	0801a114 	.word	0x0801a114

08012fe4 <malloc>:
 8012fe4:	4b02      	ldr	r3, [pc, #8]	; (8012ff0 <malloc+0xc>)
 8012fe6:	4601      	mov	r1, r0
 8012fe8:	6818      	ldr	r0, [r3, #0]
 8012fea:	f000 b899 	b.w	8013120 <_malloc_r>
 8012fee:	bf00      	nop
 8012ff0:	20000054 	.word	0x20000054

08012ff4 <free>:
 8012ff4:	4b02      	ldr	r3, [pc, #8]	; (8013000 <free+0xc>)
 8012ff6:	4601      	mov	r1, r0
 8012ff8:	6818      	ldr	r0, [r3, #0]
 8012ffa:	f000 b841 	b.w	8013080 <_free_r>
 8012ffe:	bf00      	nop
 8013000:	20000054 	.word	0x20000054

08013004 <memcmp>:
 8013004:	b530      	push	{r4, r5, lr}
 8013006:	3901      	subs	r1, #1
 8013008:	2400      	movs	r4, #0
 801300a:	42a2      	cmp	r2, r4
 801300c:	d101      	bne.n	8013012 <memcmp+0xe>
 801300e:	2000      	movs	r0, #0
 8013010:	e005      	b.n	801301e <memcmp+0x1a>
 8013012:	5d03      	ldrb	r3, [r0, r4]
 8013014:	3401      	adds	r4, #1
 8013016:	5d0d      	ldrb	r5, [r1, r4]
 8013018:	42ab      	cmp	r3, r5
 801301a:	d0f6      	beq.n	801300a <memcmp+0x6>
 801301c:	1b58      	subs	r0, r3, r5
 801301e:	bd30      	pop	{r4, r5, pc}

08013020 <memcpy>:
 8013020:	440a      	add	r2, r1
 8013022:	4291      	cmp	r1, r2
 8013024:	f100 33ff 	add.w	r3, r0, #4294967295
 8013028:	d100      	bne.n	801302c <memcpy+0xc>
 801302a:	4770      	bx	lr
 801302c:	b510      	push	{r4, lr}
 801302e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013036:	4291      	cmp	r1, r2
 8013038:	d1f9      	bne.n	801302e <memcpy+0xe>
 801303a:	bd10      	pop	{r4, pc}

0801303c <memmove>:
 801303c:	4288      	cmp	r0, r1
 801303e:	b510      	push	{r4, lr}
 8013040:	eb01 0402 	add.w	r4, r1, r2
 8013044:	d902      	bls.n	801304c <memmove+0x10>
 8013046:	4284      	cmp	r4, r0
 8013048:	4623      	mov	r3, r4
 801304a:	d807      	bhi.n	801305c <memmove+0x20>
 801304c:	1e43      	subs	r3, r0, #1
 801304e:	42a1      	cmp	r1, r4
 8013050:	d008      	beq.n	8013064 <memmove+0x28>
 8013052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013056:	f803 2f01 	strb.w	r2, [r3, #1]!
 801305a:	e7f8      	b.n	801304e <memmove+0x12>
 801305c:	4402      	add	r2, r0
 801305e:	4601      	mov	r1, r0
 8013060:	428a      	cmp	r2, r1
 8013062:	d100      	bne.n	8013066 <memmove+0x2a>
 8013064:	bd10      	pop	{r4, pc}
 8013066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801306a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801306e:	e7f7      	b.n	8013060 <memmove+0x24>

08013070 <memset>:
 8013070:	4402      	add	r2, r0
 8013072:	4603      	mov	r3, r0
 8013074:	4293      	cmp	r3, r2
 8013076:	d100      	bne.n	801307a <memset+0xa>
 8013078:	4770      	bx	lr
 801307a:	f803 1b01 	strb.w	r1, [r3], #1
 801307e:	e7f9      	b.n	8013074 <memset+0x4>

08013080 <_free_r>:
 8013080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013082:	2900      	cmp	r1, #0
 8013084:	d048      	beq.n	8013118 <_free_r+0x98>
 8013086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801308a:	9001      	str	r0, [sp, #4]
 801308c:	2b00      	cmp	r3, #0
 801308e:	f1a1 0404 	sub.w	r4, r1, #4
 8013092:	bfb8      	it	lt
 8013094:	18e4      	addlt	r4, r4, r3
 8013096:	f001 fde5 	bl	8014c64 <__malloc_lock>
 801309a:	4a20      	ldr	r2, [pc, #128]	; (801311c <_free_r+0x9c>)
 801309c:	9801      	ldr	r0, [sp, #4]
 801309e:	6813      	ldr	r3, [r2, #0]
 80130a0:	4615      	mov	r5, r2
 80130a2:	b933      	cbnz	r3, 80130b2 <_free_r+0x32>
 80130a4:	6063      	str	r3, [r4, #4]
 80130a6:	6014      	str	r4, [r2, #0]
 80130a8:	b003      	add	sp, #12
 80130aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130ae:	f001 bddf 	b.w	8014c70 <__malloc_unlock>
 80130b2:	42a3      	cmp	r3, r4
 80130b4:	d90b      	bls.n	80130ce <_free_r+0x4e>
 80130b6:	6821      	ldr	r1, [r4, #0]
 80130b8:	1862      	adds	r2, r4, r1
 80130ba:	4293      	cmp	r3, r2
 80130bc:	bf04      	itt	eq
 80130be:	681a      	ldreq	r2, [r3, #0]
 80130c0:	685b      	ldreq	r3, [r3, #4]
 80130c2:	6063      	str	r3, [r4, #4]
 80130c4:	bf04      	itt	eq
 80130c6:	1852      	addeq	r2, r2, r1
 80130c8:	6022      	streq	r2, [r4, #0]
 80130ca:	602c      	str	r4, [r5, #0]
 80130cc:	e7ec      	b.n	80130a8 <_free_r+0x28>
 80130ce:	461a      	mov	r2, r3
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	b10b      	cbz	r3, 80130d8 <_free_r+0x58>
 80130d4:	42a3      	cmp	r3, r4
 80130d6:	d9fa      	bls.n	80130ce <_free_r+0x4e>
 80130d8:	6811      	ldr	r1, [r2, #0]
 80130da:	1855      	adds	r5, r2, r1
 80130dc:	42a5      	cmp	r5, r4
 80130de:	d10b      	bne.n	80130f8 <_free_r+0x78>
 80130e0:	6824      	ldr	r4, [r4, #0]
 80130e2:	4421      	add	r1, r4
 80130e4:	1854      	adds	r4, r2, r1
 80130e6:	42a3      	cmp	r3, r4
 80130e8:	6011      	str	r1, [r2, #0]
 80130ea:	d1dd      	bne.n	80130a8 <_free_r+0x28>
 80130ec:	681c      	ldr	r4, [r3, #0]
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	6053      	str	r3, [r2, #4]
 80130f2:	4421      	add	r1, r4
 80130f4:	6011      	str	r1, [r2, #0]
 80130f6:	e7d7      	b.n	80130a8 <_free_r+0x28>
 80130f8:	d902      	bls.n	8013100 <_free_r+0x80>
 80130fa:	230c      	movs	r3, #12
 80130fc:	6003      	str	r3, [r0, #0]
 80130fe:	e7d3      	b.n	80130a8 <_free_r+0x28>
 8013100:	6825      	ldr	r5, [r4, #0]
 8013102:	1961      	adds	r1, r4, r5
 8013104:	428b      	cmp	r3, r1
 8013106:	bf04      	itt	eq
 8013108:	6819      	ldreq	r1, [r3, #0]
 801310a:	685b      	ldreq	r3, [r3, #4]
 801310c:	6063      	str	r3, [r4, #4]
 801310e:	bf04      	itt	eq
 8013110:	1949      	addeq	r1, r1, r5
 8013112:	6021      	streq	r1, [r4, #0]
 8013114:	6054      	str	r4, [r2, #4]
 8013116:	e7c7      	b.n	80130a8 <_free_r+0x28>
 8013118:	b003      	add	sp, #12
 801311a:	bd30      	pop	{r4, r5, pc}
 801311c:	20000404 	.word	0x20000404

08013120 <_malloc_r>:
 8013120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013122:	1ccd      	adds	r5, r1, #3
 8013124:	f025 0503 	bic.w	r5, r5, #3
 8013128:	3508      	adds	r5, #8
 801312a:	2d0c      	cmp	r5, #12
 801312c:	bf38      	it	cc
 801312e:	250c      	movcc	r5, #12
 8013130:	2d00      	cmp	r5, #0
 8013132:	4606      	mov	r6, r0
 8013134:	db01      	blt.n	801313a <_malloc_r+0x1a>
 8013136:	42a9      	cmp	r1, r5
 8013138:	d903      	bls.n	8013142 <_malloc_r+0x22>
 801313a:	230c      	movs	r3, #12
 801313c:	6033      	str	r3, [r6, #0]
 801313e:	2000      	movs	r0, #0
 8013140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013142:	f001 fd8f 	bl	8014c64 <__malloc_lock>
 8013146:	4921      	ldr	r1, [pc, #132]	; (80131cc <_malloc_r+0xac>)
 8013148:	680a      	ldr	r2, [r1, #0]
 801314a:	4614      	mov	r4, r2
 801314c:	b99c      	cbnz	r4, 8013176 <_malloc_r+0x56>
 801314e:	4f20      	ldr	r7, [pc, #128]	; (80131d0 <_malloc_r+0xb0>)
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	b923      	cbnz	r3, 801315e <_malloc_r+0x3e>
 8013154:	4621      	mov	r1, r4
 8013156:	4630      	mov	r0, r6
 8013158:	f000 fcfe 	bl	8013b58 <_sbrk_r>
 801315c:	6038      	str	r0, [r7, #0]
 801315e:	4629      	mov	r1, r5
 8013160:	4630      	mov	r0, r6
 8013162:	f000 fcf9 	bl	8013b58 <_sbrk_r>
 8013166:	1c43      	adds	r3, r0, #1
 8013168:	d123      	bne.n	80131b2 <_malloc_r+0x92>
 801316a:	230c      	movs	r3, #12
 801316c:	6033      	str	r3, [r6, #0]
 801316e:	4630      	mov	r0, r6
 8013170:	f001 fd7e 	bl	8014c70 <__malloc_unlock>
 8013174:	e7e3      	b.n	801313e <_malloc_r+0x1e>
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	1b5b      	subs	r3, r3, r5
 801317a:	d417      	bmi.n	80131ac <_malloc_r+0x8c>
 801317c:	2b0b      	cmp	r3, #11
 801317e:	d903      	bls.n	8013188 <_malloc_r+0x68>
 8013180:	6023      	str	r3, [r4, #0]
 8013182:	441c      	add	r4, r3
 8013184:	6025      	str	r5, [r4, #0]
 8013186:	e004      	b.n	8013192 <_malloc_r+0x72>
 8013188:	6863      	ldr	r3, [r4, #4]
 801318a:	42a2      	cmp	r2, r4
 801318c:	bf0c      	ite	eq
 801318e:	600b      	streq	r3, [r1, #0]
 8013190:	6053      	strne	r3, [r2, #4]
 8013192:	4630      	mov	r0, r6
 8013194:	f001 fd6c 	bl	8014c70 <__malloc_unlock>
 8013198:	f104 000b 	add.w	r0, r4, #11
 801319c:	1d23      	adds	r3, r4, #4
 801319e:	f020 0007 	bic.w	r0, r0, #7
 80131a2:	1ac2      	subs	r2, r0, r3
 80131a4:	d0cc      	beq.n	8013140 <_malloc_r+0x20>
 80131a6:	1a1b      	subs	r3, r3, r0
 80131a8:	50a3      	str	r3, [r4, r2]
 80131aa:	e7c9      	b.n	8013140 <_malloc_r+0x20>
 80131ac:	4622      	mov	r2, r4
 80131ae:	6864      	ldr	r4, [r4, #4]
 80131b0:	e7cc      	b.n	801314c <_malloc_r+0x2c>
 80131b2:	1cc4      	adds	r4, r0, #3
 80131b4:	f024 0403 	bic.w	r4, r4, #3
 80131b8:	42a0      	cmp	r0, r4
 80131ba:	d0e3      	beq.n	8013184 <_malloc_r+0x64>
 80131bc:	1a21      	subs	r1, r4, r0
 80131be:	4630      	mov	r0, r6
 80131c0:	f000 fcca 	bl	8013b58 <_sbrk_r>
 80131c4:	3001      	adds	r0, #1
 80131c6:	d1dd      	bne.n	8013184 <_malloc_r+0x64>
 80131c8:	e7cf      	b.n	801316a <_malloc_r+0x4a>
 80131ca:	bf00      	nop
 80131cc:	20000404 	.word	0x20000404
 80131d0:	20000408 	.word	0x20000408

080131d4 <__cvt>:
 80131d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80131d8:	ec55 4b10 	vmov	r4, r5, d0
 80131dc:	2d00      	cmp	r5, #0
 80131de:	460e      	mov	r6, r1
 80131e0:	4619      	mov	r1, r3
 80131e2:	462b      	mov	r3, r5
 80131e4:	bfbb      	ittet	lt
 80131e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80131ea:	461d      	movlt	r5, r3
 80131ec:	2300      	movge	r3, #0
 80131ee:	232d      	movlt	r3, #45	; 0x2d
 80131f0:	700b      	strb	r3, [r1, #0]
 80131f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80131f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80131f8:	4691      	mov	r9, r2
 80131fa:	f023 0820 	bic.w	r8, r3, #32
 80131fe:	bfbc      	itt	lt
 8013200:	4622      	movlt	r2, r4
 8013202:	4614      	movlt	r4, r2
 8013204:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013208:	d005      	beq.n	8013216 <__cvt+0x42>
 801320a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801320e:	d100      	bne.n	8013212 <__cvt+0x3e>
 8013210:	3601      	adds	r6, #1
 8013212:	2102      	movs	r1, #2
 8013214:	e000      	b.n	8013218 <__cvt+0x44>
 8013216:	2103      	movs	r1, #3
 8013218:	ab03      	add	r3, sp, #12
 801321a:	9301      	str	r3, [sp, #4]
 801321c:	ab02      	add	r3, sp, #8
 801321e:	9300      	str	r3, [sp, #0]
 8013220:	ec45 4b10 	vmov	d0, r4, r5
 8013224:	4653      	mov	r3, sl
 8013226:	4632      	mov	r2, r6
 8013228:	f000 fe1a 	bl	8013e60 <_dtoa_r>
 801322c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013230:	4607      	mov	r7, r0
 8013232:	d102      	bne.n	801323a <__cvt+0x66>
 8013234:	f019 0f01 	tst.w	r9, #1
 8013238:	d022      	beq.n	8013280 <__cvt+0xac>
 801323a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801323e:	eb07 0906 	add.w	r9, r7, r6
 8013242:	d110      	bne.n	8013266 <__cvt+0x92>
 8013244:	783b      	ldrb	r3, [r7, #0]
 8013246:	2b30      	cmp	r3, #48	; 0x30
 8013248:	d10a      	bne.n	8013260 <__cvt+0x8c>
 801324a:	2200      	movs	r2, #0
 801324c:	2300      	movs	r3, #0
 801324e:	4620      	mov	r0, r4
 8013250:	4629      	mov	r1, r5
 8013252:	f7ed fc49 	bl	8000ae8 <__aeabi_dcmpeq>
 8013256:	b918      	cbnz	r0, 8013260 <__cvt+0x8c>
 8013258:	f1c6 0601 	rsb	r6, r6, #1
 801325c:	f8ca 6000 	str.w	r6, [sl]
 8013260:	f8da 3000 	ldr.w	r3, [sl]
 8013264:	4499      	add	r9, r3
 8013266:	2200      	movs	r2, #0
 8013268:	2300      	movs	r3, #0
 801326a:	4620      	mov	r0, r4
 801326c:	4629      	mov	r1, r5
 801326e:	f7ed fc3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8013272:	b108      	cbz	r0, 8013278 <__cvt+0xa4>
 8013274:	f8cd 900c 	str.w	r9, [sp, #12]
 8013278:	2230      	movs	r2, #48	; 0x30
 801327a:	9b03      	ldr	r3, [sp, #12]
 801327c:	454b      	cmp	r3, r9
 801327e:	d307      	bcc.n	8013290 <__cvt+0xbc>
 8013280:	9b03      	ldr	r3, [sp, #12]
 8013282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013284:	1bdb      	subs	r3, r3, r7
 8013286:	4638      	mov	r0, r7
 8013288:	6013      	str	r3, [r2, #0]
 801328a:	b004      	add	sp, #16
 801328c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013290:	1c59      	adds	r1, r3, #1
 8013292:	9103      	str	r1, [sp, #12]
 8013294:	701a      	strb	r2, [r3, #0]
 8013296:	e7f0      	b.n	801327a <__cvt+0xa6>

08013298 <__exponent>:
 8013298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801329a:	4603      	mov	r3, r0
 801329c:	2900      	cmp	r1, #0
 801329e:	bfb8      	it	lt
 80132a0:	4249      	neglt	r1, r1
 80132a2:	f803 2b02 	strb.w	r2, [r3], #2
 80132a6:	bfb4      	ite	lt
 80132a8:	222d      	movlt	r2, #45	; 0x2d
 80132aa:	222b      	movge	r2, #43	; 0x2b
 80132ac:	2909      	cmp	r1, #9
 80132ae:	7042      	strb	r2, [r0, #1]
 80132b0:	dd2a      	ble.n	8013308 <__exponent+0x70>
 80132b2:	f10d 0407 	add.w	r4, sp, #7
 80132b6:	46a4      	mov	ip, r4
 80132b8:	270a      	movs	r7, #10
 80132ba:	46a6      	mov	lr, r4
 80132bc:	460a      	mov	r2, r1
 80132be:	fb91 f6f7 	sdiv	r6, r1, r7
 80132c2:	fb07 1516 	mls	r5, r7, r6, r1
 80132c6:	3530      	adds	r5, #48	; 0x30
 80132c8:	2a63      	cmp	r2, #99	; 0x63
 80132ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80132ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80132d2:	4631      	mov	r1, r6
 80132d4:	dcf1      	bgt.n	80132ba <__exponent+0x22>
 80132d6:	3130      	adds	r1, #48	; 0x30
 80132d8:	f1ae 0502 	sub.w	r5, lr, #2
 80132dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80132e0:	1c44      	adds	r4, r0, #1
 80132e2:	4629      	mov	r1, r5
 80132e4:	4561      	cmp	r1, ip
 80132e6:	d30a      	bcc.n	80132fe <__exponent+0x66>
 80132e8:	f10d 0209 	add.w	r2, sp, #9
 80132ec:	eba2 020e 	sub.w	r2, r2, lr
 80132f0:	4565      	cmp	r5, ip
 80132f2:	bf88      	it	hi
 80132f4:	2200      	movhi	r2, #0
 80132f6:	4413      	add	r3, r2
 80132f8:	1a18      	subs	r0, r3, r0
 80132fa:	b003      	add	sp, #12
 80132fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013302:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013306:	e7ed      	b.n	80132e4 <__exponent+0x4c>
 8013308:	2330      	movs	r3, #48	; 0x30
 801330a:	3130      	adds	r1, #48	; 0x30
 801330c:	7083      	strb	r3, [r0, #2]
 801330e:	70c1      	strb	r1, [r0, #3]
 8013310:	1d03      	adds	r3, r0, #4
 8013312:	e7f1      	b.n	80132f8 <__exponent+0x60>

08013314 <_printf_float>:
 8013314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013318:	ed2d 8b02 	vpush	{d8}
 801331c:	b08d      	sub	sp, #52	; 0x34
 801331e:	460c      	mov	r4, r1
 8013320:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013324:	4616      	mov	r6, r2
 8013326:	461f      	mov	r7, r3
 8013328:	4605      	mov	r5, r0
 801332a:	f001 fc93 	bl	8014c54 <_localeconv_r>
 801332e:	f8d0 a000 	ldr.w	sl, [r0]
 8013332:	4650      	mov	r0, sl
 8013334:	f7ec ff56 	bl	80001e4 <strlen>
 8013338:	2300      	movs	r3, #0
 801333a:	930a      	str	r3, [sp, #40]	; 0x28
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	9305      	str	r3, [sp, #20]
 8013340:	f8d8 3000 	ldr.w	r3, [r8]
 8013344:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013348:	3307      	adds	r3, #7
 801334a:	f023 0307 	bic.w	r3, r3, #7
 801334e:	f103 0208 	add.w	r2, r3, #8
 8013352:	f8c8 2000 	str.w	r2, [r8]
 8013356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801335e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013366:	9307      	str	r3, [sp, #28]
 8013368:	f8cd 8018 	str.w	r8, [sp, #24]
 801336c:	ee08 0a10 	vmov	s16, r0
 8013370:	4b9f      	ldr	r3, [pc, #636]	; (80135f0 <_printf_float+0x2dc>)
 8013372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013376:	f04f 32ff 	mov.w	r2, #4294967295
 801337a:	f7ed fbe7 	bl	8000b4c <__aeabi_dcmpun>
 801337e:	bb88      	cbnz	r0, 80133e4 <_printf_float+0xd0>
 8013380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013384:	4b9a      	ldr	r3, [pc, #616]	; (80135f0 <_printf_float+0x2dc>)
 8013386:	f04f 32ff 	mov.w	r2, #4294967295
 801338a:	f7ed fbc1 	bl	8000b10 <__aeabi_dcmple>
 801338e:	bb48      	cbnz	r0, 80133e4 <_printf_float+0xd0>
 8013390:	2200      	movs	r2, #0
 8013392:	2300      	movs	r3, #0
 8013394:	4640      	mov	r0, r8
 8013396:	4649      	mov	r1, r9
 8013398:	f7ed fbb0 	bl	8000afc <__aeabi_dcmplt>
 801339c:	b110      	cbz	r0, 80133a4 <_printf_float+0x90>
 801339e:	232d      	movs	r3, #45	; 0x2d
 80133a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80133a4:	4b93      	ldr	r3, [pc, #588]	; (80135f4 <_printf_float+0x2e0>)
 80133a6:	4894      	ldr	r0, [pc, #592]	; (80135f8 <_printf_float+0x2e4>)
 80133a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80133ac:	bf94      	ite	ls
 80133ae:	4698      	movls	r8, r3
 80133b0:	4680      	movhi	r8, r0
 80133b2:	2303      	movs	r3, #3
 80133b4:	6123      	str	r3, [r4, #16]
 80133b6:	9b05      	ldr	r3, [sp, #20]
 80133b8:	f023 0204 	bic.w	r2, r3, #4
 80133bc:	6022      	str	r2, [r4, #0]
 80133be:	f04f 0900 	mov.w	r9, #0
 80133c2:	9700      	str	r7, [sp, #0]
 80133c4:	4633      	mov	r3, r6
 80133c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80133c8:	4621      	mov	r1, r4
 80133ca:	4628      	mov	r0, r5
 80133cc:	f000 f9d8 	bl	8013780 <_printf_common>
 80133d0:	3001      	adds	r0, #1
 80133d2:	f040 8090 	bne.w	80134f6 <_printf_float+0x1e2>
 80133d6:	f04f 30ff 	mov.w	r0, #4294967295
 80133da:	b00d      	add	sp, #52	; 0x34
 80133dc:	ecbd 8b02 	vpop	{d8}
 80133e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133e4:	4642      	mov	r2, r8
 80133e6:	464b      	mov	r3, r9
 80133e8:	4640      	mov	r0, r8
 80133ea:	4649      	mov	r1, r9
 80133ec:	f7ed fbae 	bl	8000b4c <__aeabi_dcmpun>
 80133f0:	b140      	cbz	r0, 8013404 <_printf_float+0xf0>
 80133f2:	464b      	mov	r3, r9
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	bfbc      	itt	lt
 80133f8:	232d      	movlt	r3, #45	; 0x2d
 80133fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80133fe:	487f      	ldr	r0, [pc, #508]	; (80135fc <_printf_float+0x2e8>)
 8013400:	4b7f      	ldr	r3, [pc, #508]	; (8013600 <_printf_float+0x2ec>)
 8013402:	e7d1      	b.n	80133a8 <_printf_float+0x94>
 8013404:	6863      	ldr	r3, [r4, #4]
 8013406:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801340a:	9206      	str	r2, [sp, #24]
 801340c:	1c5a      	adds	r2, r3, #1
 801340e:	d13f      	bne.n	8013490 <_printf_float+0x17c>
 8013410:	2306      	movs	r3, #6
 8013412:	6063      	str	r3, [r4, #4]
 8013414:	9b05      	ldr	r3, [sp, #20]
 8013416:	6861      	ldr	r1, [r4, #4]
 8013418:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801341c:	2300      	movs	r3, #0
 801341e:	9303      	str	r3, [sp, #12]
 8013420:	ab0a      	add	r3, sp, #40	; 0x28
 8013422:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013426:	ab09      	add	r3, sp, #36	; 0x24
 8013428:	ec49 8b10 	vmov	d0, r8, r9
 801342c:	9300      	str	r3, [sp, #0]
 801342e:	6022      	str	r2, [r4, #0]
 8013430:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013434:	4628      	mov	r0, r5
 8013436:	f7ff fecd 	bl	80131d4 <__cvt>
 801343a:	9b06      	ldr	r3, [sp, #24]
 801343c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801343e:	2b47      	cmp	r3, #71	; 0x47
 8013440:	4680      	mov	r8, r0
 8013442:	d108      	bne.n	8013456 <_printf_float+0x142>
 8013444:	1cc8      	adds	r0, r1, #3
 8013446:	db02      	blt.n	801344e <_printf_float+0x13a>
 8013448:	6863      	ldr	r3, [r4, #4]
 801344a:	4299      	cmp	r1, r3
 801344c:	dd41      	ble.n	80134d2 <_printf_float+0x1be>
 801344e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013452:	fa5f fb8b 	uxtb.w	fp, fp
 8013456:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801345a:	d820      	bhi.n	801349e <_printf_float+0x18a>
 801345c:	3901      	subs	r1, #1
 801345e:	465a      	mov	r2, fp
 8013460:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013464:	9109      	str	r1, [sp, #36]	; 0x24
 8013466:	f7ff ff17 	bl	8013298 <__exponent>
 801346a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801346c:	1813      	adds	r3, r2, r0
 801346e:	2a01      	cmp	r2, #1
 8013470:	4681      	mov	r9, r0
 8013472:	6123      	str	r3, [r4, #16]
 8013474:	dc02      	bgt.n	801347c <_printf_float+0x168>
 8013476:	6822      	ldr	r2, [r4, #0]
 8013478:	07d2      	lsls	r2, r2, #31
 801347a:	d501      	bpl.n	8013480 <_printf_float+0x16c>
 801347c:	3301      	adds	r3, #1
 801347e:	6123      	str	r3, [r4, #16]
 8013480:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013484:	2b00      	cmp	r3, #0
 8013486:	d09c      	beq.n	80133c2 <_printf_float+0xae>
 8013488:	232d      	movs	r3, #45	; 0x2d
 801348a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801348e:	e798      	b.n	80133c2 <_printf_float+0xae>
 8013490:	9a06      	ldr	r2, [sp, #24]
 8013492:	2a47      	cmp	r2, #71	; 0x47
 8013494:	d1be      	bne.n	8013414 <_printf_float+0x100>
 8013496:	2b00      	cmp	r3, #0
 8013498:	d1bc      	bne.n	8013414 <_printf_float+0x100>
 801349a:	2301      	movs	r3, #1
 801349c:	e7b9      	b.n	8013412 <_printf_float+0xfe>
 801349e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80134a2:	d118      	bne.n	80134d6 <_printf_float+0x1c2>
 80134a4:	2900      	cmp	r1, #0
 80134a6:	6863      	ldr	r3, [r4, #4]
 80134a8:	dd0b      	ble.n	80134c2 <_printf_float+0x1ae>
 80134aa:	6121      	str	r1, [r4, #16]
 80134ac:	b913      	cbnz	r3, 80134b4 <_printf_float+0x1a0>
 80134ae:	6822      	ldr	r2, [r4, #0]
 80134b0:	07d0      	lsls	r0, r2, #31
 80134b2:	d502      	bpl.n	80134ba <_printf_float+0x1a6>
 80134b4:	3301      	adds	r3, #1
 80134b6:	440b      	add	r3, r1
 80134b8:	6123      	str	r3, [r4, #16]
 80134ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80134bc:	f04f 0900 	mov.w	r9, #0
 80134c0:	e7de      	b.n	8013480 <_printf_float+0x16c>
 80134c2:	b913      	cbnz	r3, 80134ca <_printf_float+0x1b6>
 80134c4:	6822      	ldr	r2, [r4, #0]
 80134c6:	07d2      	lsls	r2, r2, #31
 80134c8:	d501      	bpl.n	80134ce <_printf_float+0x1ba>
 80134ca:	3302      	adds	r3, #2
 80134cc:	e7f4      	b.n	80134b8 <_printf_float+0x1a4>
 80134ce:	2301      	movs	r3, #1
 80134d0:	e7f2      	b.n	80134b8 <_printf_float+0x1a4>
 80134d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80134d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134d8:	4299      	cmp	r1, r3
 80134da:	db05      	blt.n	80134e8 <_printf_float+0x1d4>
 80134dc:	6823      	ldr	r3, [r4, #0]
 80134de:	6121      	str	r1, [r4, #16]
 80134e0:	07d8      	lsls	r0, r3, #31
 80134e2:	d5ea      	bpl.n	80134ba <_printf_float+0x1a6>
 80134e4:	1c4b      	adds	r3, r1, #1
 80134e6:	e7e7      	b.n	80134b8 <_printf_float+0x1a4>
 80134e8:	2900      	cmp	r1, #0
 80134ea:	bfd4      	ite	le
 80134ec:	f1c1 0202 	rsble	r2, r1, #2
 80134f0:	2201      	movgt	r2, #1
 80134f2:	4413      	add	r3, r2
 80134f4:	e7e0      	b.n	80134b8 <_printf_float+0x1a4>
 80134f6:	6823      	ldr	r3, [r4, #0]
 80134f8:	055a      	lsls	r2, r3, #21
 80134fa:	d407      	bmi.n	801350c <_printf_float+0x1f8>
 80134fc:	6923      	ldr	r3, [r4, #16]
 80134fe:	4642      	mov	r2, r8
 8013500:	4631      	mov	r1, r6
 8013502:	4628      	mov	r0, r5
 8013504:	47b8      	blx	r7
 8013506:	3001      	adds	r0, #1
 8013508:	d12c      	bne.n	8013564 <_printf_float+0x250>
 801350a:	e764      	b.n	80133d6 <_printf_float+0xc2>
 801350c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013510:	f240 80e0 	bls.w	80136d4 <_printf_float+0x3c0>
 8013514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013518:	2200      	movs	r2, #0
 801351a:	2300      	movs	r3, #0
 801351c:	f7ed fae4 	bl	8000ae8 <__aeabi_dcmpeq>
 8013520:	2800      	cmp	r0, #0
 8013522:	d034      	beq.n	801358e <_printf_float+0x27a>
 8013524:	4a37      	ldr	r2, [pc, #220]	; (8013604 <_printf_float+0x2f0>)
 8013526:	2301      	movs	r3, #1
 8013528:	4631      	mov	r1, r6
 801352a:	4628      	mov	r0, r5
 801352c:	47b8      	blx	r7
 801352e:	3001      	adds	r0, #1
 8013530:	f43f af51 	beq.w	80133d6 <_printf_float+0xc2>
 8013534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013538:	429a      	cmp	r2, r3
 801353a:	db02      	blt.n	8013542 <_printf_float+0x22e>
 801353c:	6823      	ldr	r3, [r4, #0]
 801353e:	07d8      	lsls	r0, r3, #31
 8013540:	d510      	bpl.n	8013564 <_printf_float+0x250>
 8013542:	ee18 3a10 	vmov	r3, s16
 8013546:	4652      	mov	r2, sl
 8013548:	4631      	mov	r1, r6
 801354a:	4628      	mov	r0, r5
 801354c:	47b8      	blx	r7
 801354e:	3001      	adds	r0, #1
 8013550:	f43f af41 	beq.w	80133d6 <_printf_float+0xc2>
 8013554:	f04f 0800 	mov.w	r8, #0
 8013558:	f104 091a 	add.w	r9, r4, #26
 801355c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801355e:	3b01      	subs	r3, #1
 8013560:	4543      	cmp	r3, r8
 8013562:	dc09      	bgt.n	8013578 <_printf_float+0x264>
 8013564:	6823      	ldr	r3, [r4, #0]
 8013566:	079b      	lsls	r3, r3, #30
 8013568:	f100 8105 	bmi.w	8013776 <_printf_float+0x462>
 801356c:	68e0      	ldr	r0, [r4, #12]
 801356e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013570:	4298      	cmp	r0, r3
 8013572:	bfb8      	it	lt
 8013574:	4618      	movlt	r0, r3
 8013576:	e730      	b.n	80133da <_printf_float+0xc6>
 8013578:	2301      	movs	r3, #1
 801357a:	464a      	mov	r2, r9
 801357c:	4631      	mov	r1, r6
 801357e:	4628      	mov	r0, r5
 8013580:	47b8      	blx	r7
 8013582:	3001      	adds	r0, #1
 8013584:	f43f af27 	beq.w	80133d6 <_printf_float+0xc2>
 8013588:	f108 0801 	add.w	r8, r8, #1
 801358c:	e7e6      	b.n	801355c <_printf_float+0x248>
 801358e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013590:	2b00      	cmp	r3, #0
 8013592:	dc39      	bgt.n	8013608 <_printf_float+0x2f4>
 8013594:	4a1b      	ldr	r2, [pc, #108]	; (8013604 <_printf_float+0x2f0>)
 8013596:	2301      	movs	r3, #1
 8013598:	4631      	mov	r1, r6
 801359a:	4628      	mov	r0, r5
 801359c:	47b8      	blx	r7
 801359e:	3001      	adds	r0, #1
 80135a0:	f43f af19 	beq.w	80133d6 <_printf_float+0xc2>
 80135a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135a8:	4313      	orrs	r3, r2
 80135aa:	d102      	bne.n	80135b2 <_printf_float+0x29e>
 80135ac:	6823      	ldr	r3, [r4, #0]
 80135ae:	07d9      	lsls	r1, r3, #31
 80135b0:	d5d8      	bpl.n	8013564 <_printf_float+0x250>
 80135b2:	ee18 3a10 	vmov	r3, s16
 80135b6:	4652      	mov	r2, sl
 80135b8:	4631      	mov	r1, r6
 80135ba:	4628      	mov	r0, r5
 80135bc:	47b8      	blx	r7
 80135be:	3001      	adds	r0, #1
 80135c0:	f43f af09 	beq.w	80133d6 <_printf_float+0xc2>
 80135c4:	f04f 0900 	mov.w	r9, #0
 80135c8:	f104 0a1a 	add.w	sl, r4, #26
 80135cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135ce:	425b      	negs	r3, r3
 80135d0:	454b      	cmp	r3, r9
 80135d2:	dc01      	bgt.n	80135d8 <_printf_float+0x2c4>
 80135d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135d6:	e792      	b.n	80134fe <_printf_float+0x1ea>
 80135d8:	2301      	movs	r3, #1
 80135da:	4652      	mov	r2, sl
 80135dc:	4631      	mov	r1, r6
 80135de:	4628      	mov	r0, r5
 80135e0:	47b8      	blx	r7
 80135e2:	3001      	adds	r0, #1
 80135e4:	f43f aef7 	beq.w	80133d6 <_printf_float+0xc2>
 80135e8:	f109 0901 	add.w	r9, r9, #1
 80135ec:	e7ee      	b.n	80135cc <_printf_float+0x2b8>
 80135ee:	bf00      	nop
 80135f0:	7fefffff 	.word	0x7fefffff
 80135f4:	08019d8c 	.word	0x08019d8c
 80135f8:	08019d90 	.word	0x08019d90
 80135fc:	08019d98 	.word	0x08019d98
 8013600:	08019d94 	.word	0x08019d94
 8013604:	08019d9c 	.word	0x08019d9c
 8013608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801360a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801360c:	429a      	cmp	r2, r3
 801360e:	bfa8      	it	ge
 8013610:	461a      	movge	r2, r3
 8013612:	2a00      	cmp	r2, #0
 8013614:	4691      	mov	r9, r2
 8013616:	dc37      	bgt.n	8013688 <_printf_float+0x374>
 8013618:	f04f 0b00 	mov.w	fp, #0
 801361c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013620:	f104 021a 	add.w	r2, r4, #26
 8013624:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013626:	9305      	str	r3, [sp, #20]
 8013628:	eba3 0309 	sub.w	r3, r3, r9
 801362c:	455b      	cmp	r3, fp
 801362e:	dc33      	bgt.n	8013698 <_printf_float+0x384>
 8013630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013634:	429a      	cmp	r2, r3
 8013636:	db3b      	blt.n	80136b0 <_printf_float+0x39c>
 8013638:	6823      	ldr	r3, [r4, #0]
 801363a:	07da      	lsls	r2, r3, #31
 801363c:	d438      	bmi.n	80136b0 <_printf_float+0x39c>
 801363e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013640:	9b05      	ldr	r3, [sp, #20]
 8013642:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013644:	1ad3      	subs	r3, r2, r3
 8013646:	eba2 0901 	sub.w	r9, r2, r1
 801364a:	4599      	cmp	r9, r3
 801364c:	bfa8      	it	ge
 801364e:	4699      	movge	r9, r3
 8013650:	f1b9 0f00 	cmp.w	r9, #0
 8013654:	dc35      	bgt.n	80136c2 <_printf_float+0x3ae>
 8013656:	f04f 0800 	mov.w	r8, #0
 801365a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801365e:	f104 0a1a 	add.w	sl, r4, #26
 8013662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013666:	1a9b      	subs	r3, r3, r2
 8013668:	eba3 0309 	sub.w	r3, r3, r9
 801366c:	4543      	cmp	r3, r8
 801366e:	f77f af79 	ble.w	8013564 <_printf_float+0x250>
 8013672:	2301      	movs	r3, #1
 8013674:	4652      	mov	r2, sl
 8013676:	4631      	mov	r1, r6
 8013678:	4628      	mov	r0, r5
 801367a:	47b8      	blx	r7
 801367c:	3001      	adds	r0, #1
 801367e:	f43f aeaa 	beq.w	80133d6 <_printf_float+0xc2>
 8013682:	f108 0801 	add.w	r8, r8, #1
 8013686:	e7ec      	b.n	8013662 <_printf_float+0x34e>
 8013688:	4613      	mov	r3, r2
 801368a:	4631      	mov	r1, r6
 801368c:	4642      	mov	r2, r8
 801368e:	4628      	mov	r0, r5
 8013690:	47b8      	blx	r7
 8013692:	3001      	adds	r0, #1
 8013694:	d1c0      	bne.n	8013618 <_printf_float+0x304>
 8013696:	e69e      	b.n	80133d6 <_printf_float+0xc2>
 8013698:	2301      	movs	r3, #1
 801369a:	4631      	mov	r1, r6
 801369c:	4628      	mov	r0, r5
 801369e:	9205      	str	r2, [sp, #20]
 80136a0:	47b8      	blx	r7
 80136a2:	3001      	adds	r0, #1
 80136a4:	f43f ae97 	beq.w	80133d6 <_printf_float+0xc2>
 80136a8:	9a05      	ldr	r2, [sp, #20]
 80136aa:	f10b 0b01 	add.w	fp, fp, #1
 80136ae:	e7b9      	b.n	8013624 <_printf_float+0x310>
 80136b0:	ee18 3a10 	vmov	r3, s16
 80136b4:	4652      	mov	r2, sl
 80136b6:	4631      	mov	r1, r6
 80136b8:	4628      	mov	r0, r5
 80136ba:	47b8      	blx	r7
 80136bc:	3001      	adds	r0, #1
 80136be:	d1be      	bne.n	801363e <_printf_float+0x32a>
 80136c0:	e689      	b.n	80133d6 <_printf_float+0xc2>
 80136c2:	9a05      	ldr	r2, [sp, #20]
 80136c4:	464b      	mov	r3, r9
 80136c6:	4442      	add	r2, r8
 80136c8:	4631      	mov	r1, r6
 80136ca:	4628      	mov	r0, r5
 80136cc:	47b8      	blx	r7
 80136ce:	3001      	adds	r0, #1
 80136d0:	d1c1      	bne.n	8013656 <_printf_float+0x342>
 80136d2:	e680      	b.n	80133d6 <_printf_float+0xc2>
 80136d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136d6:	2a01      	cmp	r2, #1
 80136d8:	dc01      	bgt.n	80136de <_printf_float+0x3ca>
 80136da:	07db      	lsls	r3, r3, #31
 80136dc:	d538      	bpl.n	8013750 <_printf_float+0x43c>
 80136de:	2301      	movs	r3, #1
 80136e0:	4642      	mov	r2, r8
 80136e2:	4631      	mov	r1, r6
 80136e4:	4628      	mov	r0, r5
 80136e6:	47b8      	blx	r7
 80136e8:	3001      	adds	r0, #1
 80136ea:	f43f ae74 	beq.w	80133d6 <_printf_float+0xc2>
 80136ee:	ee18 3a10 	vmov	r3, s16
 80136f2:	4652      	mov	r2, sl
 80136f4:	4631      	mov	r1, r6
 80136f6:	4628      	mov	r0, r5
 80136f8:	47b8      	blx	r7
 80136fa:	3001      	adds	r0, #1
 80136fc:	f43f ae6b 	beq.w	80133d6 <_printf_float+0xc2>
 8013700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013704:	2200      	movs	r2, #0
 8013706:	2300      	movs	r3, #0
 8013708:	f7ed f9ee 	bl	8000ae8 <__aeabi_dcmpeq>
 801370c:	b9d8      	cbnz	r0, 8013746 <_printf_float+0x432>
 801370e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013710:	f108 0201 	add.w	r2, r8, #1
 8013714:	3b01      	subs	r3, #1
 8013716:	4631      	mov	r1, r6
 8013718:	4628      	mov	r0, r5
 801371a:	47b8      	blx	r7
 801371c:	3001      	adds	r0, #1
 801371e:	d10e      	bne.n	801373e <_printf_float+0x42a>
 8013720:	e659      	b.n	80133d6 <_printf_float+0xc2>
 8013722:	2301      	movs	r3, #1
 8013724:	4652      	mov	r2, sl
 8013726:	4631      	mov	r1, r6
 8013728:	4628      	mov	r0, r5
 801372a:	47b8      	blx	r7
 801372c:	3001      	adds	r0, #1
 801372e:	f43f ae52 	beq.w	80133d6 <_printf_float+0xc2>
 8013732:	f108 0801 	add.w	r8, r8, #1
 8013736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013738:	3b01      	subs	r3, #1
 801373a:	4543      	cmp	r3, r8
 801373c:	dcf1      	bgt.n	8013722 <_printf_float+0x40e>
 801373e:	464b      	mov	r3, r9
 8013740:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013744:	e6dc      	b.n	8013500 <_printf_float+0x1ec>
 8013746:	f04f 0800 	mov.w	r8, #0
 801374a:	f104 0a1a 	add.w	sl, r4, #26
 801374e:	e7f2      	b.n	8013736 <_printf_float+0x422>
 8013750:	2301      	movs	r3, #1
 8013752:	4642      	mov	r2, r8
 8013754:	e7df      	b.n	8013716 <_printf_float+0x402>
 8013756:	2301      	movs	r3, #1
 8013758:	464a      	mov	r2, r9
 801375a:	4631      	mov	r1, r6
 801375c:	4628      	mov	r0, r5
 801375e:	47b8      	blx	r7
 8013760:	3001      	adds	r0, #1
 8013762:	f43f ae38 	beq.w	80133d6 <_printf_float+0xc2>
 8013766:	f108 0801 	add.w	r8, r8, #1
 801376a:	68e3      	ldr	r3, [r4, #12]
 801376c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801376e:	1a5b      	subs	r3, r3, r1
 8013770:	4543      	cmp	r3, r8
 8013772:	dcf0      	bgt.n	8013756 <_printf_float+0x442>
 8013774:	e6fa      	b.n	801356c <_printf_float+0x258>
 8013776:	f04f 0800 	mov.w	r8, #0
 801377a:	f104 0919 	add.w	r9, r4, #25
 801377e:	e7f4      	b.n	801376a <_printf_float+0x456>

08013780 <_printf_common>:
 8013780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013784:	4616      	mov	r6, r2
 8013786:	4699      	mov	r9, r3
 8013788:	688a      	ldr	r2, [r1, #8]
 801378a:	690b      	ldr	r3, [r1, #16]
 801378c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013790:	4293      	cmp	r3, r2
 8013792:	bfb8      	it	lt
 8013794:	4613      	movlt	r3, r2
 8013796:	6033      	str	r3, [r6, #0]
 8013798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801379c:	4607      	mov	r7, r0
 801379e:	460c      	mov	r4, r1
 80137a0:	b10a      	cbz	r2, 80137a6 <_printf_common+0x26>
 80137a2:	3301      	adds	r3, #1
 80137a4:	6033      	str	r3, [r6, #0]
 80137a6:	6823      	ldr	r3, [r4, #0]
 80137a8:	0699      	lsls	r1, r3, #26
 80137aa:	bf42      	ittt	mi
 80137ac:	6833      	ldrmi	r3, [r6, #0]
 80137ae:	3302      	addmi	r3, #2
 80137b0:	6033      	strmi	r3, [r6, #0]
 80137b2:	6825      	ldr	r5, [r4, #0]
 80137b4:	f015 0506 	ands.w	r5, r5, #6
 80137b8:	d106      	bne.n	80137c8 <_printf_common+0x48>
 80137ba:	f104 0a19 	add.w	sl, r4, #25
 80137be:	68e3      	ldr	r3, [r4, #12]
 80137c0:	6832      	ldr	r2, [r6, #0]
 80137c2:	1a9b      	subs	r3, r3, r2
 80137c4:	42ab      	cmp	r3, r5
 80137c6:	dc26      	bgt.n	8013816 <_printf_common+0x96>
 80137c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80137cc:	1e13      	subs	r3, r2, #0
 80137ce:	6822      	ldr	r2, [r4, #0]
 80137d0:	bf18      	it	ne
 80137d2:	2301      	movne	r3, #1
 80137d4:	0692      	lsls	r2, r2, #26
 80137d6:	d42b      	bmi.n	8013830 <_printf_common+0xb0>
 80137d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80137dc:	4649      	mov	r1, r9
 80137de:	4638      	mov	r0, r7
 80137e0:	47c0      	blx	r8
 80137e2:	3001      	adds	r0, #1
 80137e4:	d01e      	beq.n	8013824 <_printf_common+0xa4>
 80137e6:	6823      	ldr	r3, [r4, #0]
 80137e8:	68e5      	ldr	r5, [r4, #12]
 80137ea:	6832      	ldr	r2, [r6, #0]
 80137ec:	f003 0306 	and.w	r3, r3, #6
 80137f0:	2b04      	cmp	r3, #4
 80137f2:	bf08      	it	eq
 80137f4:	1aad      	subeq	r5, r5, r2
 80137f6:	68a3      	ldr	r3, [r4, #8]
 80137f8:	6922      	ldr	r2, [r4, #16]
 80137fa:	bf0c      	ite	eq
 80137fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013800:	2500      	movne	r5, #0
 8013802:	4293      	cmp	r3, r2
 8013804:	bfc4      	itt	gt
 8013806:	1a9b      	subgt	r3, r3, r2
 8013808:	18ed      	addgt	r5, r5, r3
 801380a:	2600      	movs	r6, #0
 801380c:	341a      	adds	r4, #26
 801380e:	42b5      	cmp	r5, r6
 8013810:	d11a      	bne.n	8013848 <_printf_common+0xc8>
 8013812:	2000      	movs	r0, #0
 8013814:	e008      	b.n	8013828 <_printf_common+0xa8>
 8013816:	2301      	movs	r3, #1
 8013818:	4652      	mov	r2, sl
 801381a:	4649      	mov	r1, r9
 801381c:	4638      	mov	r0, r7
 801381e:	47c0      	blx	r8
 8013820:	3001      	adds	r0, #1
 8013822:	d103      	bne.n	801382c <_printf_common+0xac>
 8013824:	f04f 30ff 	mov.w	r0, #4294967295
 8013828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801382c:	3501      	adds	r5, #1
 801382e:	e7c6      	b.n	80137be <_printf_common+0x3e>
 8013830:	18e1      	adds	r1, r4, r3
 8013832:	1c5a      	adds	r2, r3, #1
 8013834:	2030      	movs	r0, #48	; 0x30
 8013836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801383a:	4422      	add	r2, r4
 801383c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013844:	3302      	adds	r3, #2
 8013846:	e7c7      	b.n	80137d8 <_printf_common+0x58>
 8013848:	2301      	movs	r3, #1
 801384a:	4622      	mov	r2, r4
 801384c:	4649      	mov	r1, r9
 801384e:	4638      	mov	r0, r7
 8013850:	47c0      	blx	r8
 8013852:	3001      	adds	r0, #1
 8013854:	d0e6      	beq.n	8013824 <_printf_common+0xa4>
 8013856:	3601      	adds	r6, #1
 8013858:	e7d9      	b.n	801380e <_printf_common+0x8e>
	...

0801385c <_printf_i>:
 801385c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013860:	460c      	mov	r4, r1
 8013862:	4691      	mov	r9, r2
 8013864:	7e27      	ldrb	r7, [r4, #24]
 8013866:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013868:	2f78      	cmp	r7, #120	; 0x78
 801386a:	4680      	mov	r8, r0
 801386c:	469a      	mov	sl, r3
 801386e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013872:	d807      	bhi.n	8013884 <_printf_i+0x28>
 8013874:	2f62      	cmp	r7, #98	; 0x62
 8013876:	d80a      	bhi.n	801388e <_printf_i+0x32>
 8013878:	2f00      	cmp	r7, #0
 801387a:	f000 80d8 	beq.w	8013a2e <_printf_i+0x1d2>
 801387e:	2f58      	cmp	r7, #88	; 0x58
 8013880:	f000 80a3 	beq.w	80139ca <_printf_i+0x16e>
 8013884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801388c:	e03a      	b.n	8013904 <_printf_i+0xa8>
 801388e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013892:	2b15      	cmp	r3, #21
 8013894:	d8f6      	bhi.n	8013884 <_printf_i+0x28>
 8013896:	a001      	add	r0, pc, #4	; (adr r0, 801389c <_printf_i+0x40>)
 8013898:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801389c:	080138f5 	.word	0x080138f5
 80138a0:	08013909 	.word	0x08013909
 80138a4:	08013885 	.word	0x08013885
 80138a8:	08013885 	.word	0x08013885
 80138ac:	08013885 	.word	0x08013885
 80138b0:	08013885 	.word	0x08013885
 80138b4:	08013909 	.word	0x08013909
 80138b8:	08013885 	.word	0x08013885
 80138bc:	08013885 	.word	0x08013885
 80138c0:	08013885 	.word	0x08013885
 80138c4:	08013885 	.word	0x08013885
 80138c8:	08013a15 	.word	0x08013a15
 80138cc:	08013939 	.word	0x08013939
 80138d0:	080139f7 	.word	0x080139f7
 80138d4:	08013885 	.word	0x08013885
 80138d8:	08013885 	.word	0x08013885
 80138dc:	08013a37 	.word	0x08013a37
 80138e0:	08013885 	.word	0x08013885
 80138e4:	08013939 	.word	0x08013939
 80138e8:	08013885 	.word	0x08013885
 80138ec:	08013885 	.word	0x08013885
 80138f0:	080139ff 	.word	0x080139ff
 80138f4:	680b      	ldr	r3, [r1, #0]
 80138f6:	1d1a      	adds	r2, r3, #4
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	600a      	str	r2, [r1, #0]
 80138fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013904:	2301      	movs	r3, #1
 8013906:	e0a3      	b.n	8013a50 <_printf_i+0x1f4>
 8013908:	6825      	ldr	r5, [r4, #0]
 801390a:	6808      	ldr	r0, [r1, #0]
 801390c:	062e      	lsls	r6, r5, #24
 801390e:	f100 0304 	add.w	r3, r0, #4
 8013912:	d50a      	bpl.n	801392a <_printf_i+0xce>
 8013914:	6805      	ldr	r5, [r0, #0]
 8013916:	600b      	str	r3, [r1, #0]
 8013918:	2d00      	cmp	r5, #0
 801391a:	da03      	bge.n	8013924 <_printf_i+0xc8>
 801391c:	232d      	movs	r3, #45	; 0x2d
 801391e:	426d      	negs	r5, r5
 8013920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013924:	485e      	ldr	r0, [pc, #376]	; (8013aa0 <_printf_i+0x244>)
 8013926:	230a      	movs	r3, #10
 8013928:	e019      	b.n	801395e <_printf_i+0x102>
 801392a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801392e:	6805      	ldr	r5, [r0, #0]
 8013930:	600b      	str	r3, [r1, #0]
 8013932:	bf18      	it	ne
 8013934:	b22d      	sxthne	r5, r5
 8013936:	e7ef      	b.n	8013918 <_printf_i+0xbc>
 8013938:	680b      	ldr	r3, [r1, #0]
 801393a:	6825      	ldr	r5, [r4, #0]
 801393c:	1d18      	adds	r0, r3, #4
 801393e:	6008      	str	r0, [r1, #0]
 8013940:	0628      	lsls	r0, r5, #24
 8013942:	d501      	bpl.n	8013948 <_printf_i+0xec>
 8013944:	681d      	ldr	r5, [r3, #0]
 8013946:	e002      	b.n	801394e <_printf_i+0xf2>
 8013948:	0669      	lsls	r1, r5, #25
 801394a:	d5fb      	bpl.n	8013944 <_printf_i+0xe8>
 801394c:	881d      	ldrh	r5, [r3, #0]
 801394e:	4854      	ldr	r0, [pc, #336]	; (8013aa0 <_printf_i+0x244>)
 8013950:	2f6f      	cmp	r7, #111	; 0x6f
 8013952:	bf0c      	ite	eq
 8013954:	2308      	moveq	r3, #8
 8013956:	230a      	movne	r3, #10
 8013958:	2100      	movs	r1, #0
 801395a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801395e:	6866      	ldr	r6, [r4, #4]
 8013960:	60a6      	str	r6, [r4, #8]
 8013962:	2e00      	cmp	r6, #0
 8013964:	bfa2      	ittt	ge
 8013966:	6821      	ldrge	r1, [r4, #0]
 8013968:	f021 0104 	bicge.w	r1, r1, #4
 801396c:	6021      	strge	r1, [r4, #0]
 801396e:	b90d      	cbnz	r5, 8013974 <_printf_i+0x118>
 8013970:	2e00      	cmp	r6, #0
 8013972:	d04d      	beq.n	8013a10 <_printf_i+0x1b4>
 8013974:	4616      	mov	r6, r2
 8013976:	fbb5 f1f3 	udiv	r1, r5, r3
 801397a:	fb03 5711 	mls	r7, r3, r1, r5
 801397e:	5dc7      	ldrb	r7, [r0, r7]
 8013980:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013984:	462f      	mov	r7, r5
 8013986:	42bb      	cmp	r3, r7
 8013988:	460d      	mov	r5, r1
 801398a:	d9f4      	bls.n	8013976 <_printf_i+0x11a>
 801398c:	2b08      	cmp	r3, #8
 801398e:	d10b      	bne.n	80139a8 <_printf_i+0x14c>
 8013990:	6823      	ldr	r3, [r4, #0]
 8013992:	07df      	lsls	r7, r3, #31
 8013994:	d508      	bpl.n	80139a8 <_printf_i+0x14c>
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	6861      	ldr	r1, [r4, #4]
 801399a:	4299      	cmp	r1, r3
 801399c:	bfde      	ittt	le
 801399e:	2330      	movle	r3, #48	; 0x30
 80139a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80139a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80139a8:	1b92      	subs	r2, r2, r6
 80139aa:	6122      	str	r2, [r4, #16]
 80139ac:	f8cd a000 	str.w	sl, [sp]
 80139b0:	464b      	mov	r3, r9
 80139b2:	aa03      	add	r2, sp, #12
 80139b4:	4621      	mov	r1, r4
 80139b6:	4640      	mov	r0, r8
 80139b8:	f7ff fee2 	bl	8013780 <_printf_common>
 80139bc:	3001      	adds	r0, #1
 80139be:	d14c      	bne.n	8013a5a <_printf_i+0x1fe>
 80139c0:	f04f 30ff 	mov.w	r0, #4294967295
 80139c4:	b004      	add	sp, #16
 80139c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ca:	4835      	ldr	r0, [pc, #212]	; (8013aa0 <_printf_i+0x244>)
 80139cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80139d0:	6823      	ldr	r3, [r4, #0]
 80139d2:	680e      	ldr	r6, [r1, #0]
 80139d4:	061f      	lsls	r7, r3, #24
 80139d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80139da:	600e      	str	r6, [r1, #0]
 80139dc:	d514      	bpl.n	8013a08 <_printf_i+0x1ac>
 80139de:	07d9      	lsls	r1, r3, #31
 80139e0:	bf44      	itt	mi
 80139e2:	f043 0320 	orrmi.w	r3, r3, #32
 80139e6:	6023      	strmi	r3, [r4, #0]
 80139e8:	b91d      	cbnz	r5, 80139f2 <_printf_i+0x196>
 80139ea:	6823      	ldr	r3, [r4, #0]
 80139ec:	f023 0320 	bic.w	r3, r3, #32
 80139f0:	6023      	str	r3, [r4, #0]
 80139f2:	2310      	movs	r3, #16
 80139f4:	e7b0      	b.n	8013958 <_printf_i+0xfc>
 80139f6:	6823      	ldr	r3, [r4, #0]
 80139f8:	f043 0320 	orr.w	r3, r3, #32
 80139fc:	6023      	str	r3, [r4, #0]
 80139fe:	2378      	movs	r3, #120	; 0x78
 8013a00:	4828      	ldr	r0, [pc, #160]	; (8013aa4 <_printf_i+0x248>)
 8013a02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a06:	e7e3      	b.n	80139d0 <_printf_i+0x174>
 8013a08:	065e      	lsls	r6, r3, #25
 8013a0a:	bf48      	it	mi
 8013a0c:	b2ad      	uxthmi	r5, r5
 8013a0e:	e7e6      	b.n	80139de <_printf_i+0x182>
 8013a10:	4616      	mov	r6, r2
 8013a12:	e7bb      	b.n	801398c <_printf_i+0x130>
 8013a14:	680b      	ldr	r3, [r1, #0]
 8013a16:	6826      	ldr	r6, [r4, #0]
 8013a18:	6960      	ldr	r0, [r4, #20]
 8013a1a:	1d1d      	adds	r5, r3, #4
 8013a1c:	600d      	str	r5, [r1, #0]
 8013a1e:	0635      	lsls	r5, r6, #24
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	d501      	bpl.n	8013a28 <_printf_i+0x1cc>
 8013a24:	6018      	str	r0, [r3, #0]
 8013a26:	e002      	b.n	8013a2e <_printf_i+0x1d2>
 8013a28:	0671      	lsls	r1, r6, #25
 8013a2a:	d5fb      	bpl.n	8013a24 <_printf_i+0x1c8>
 8013a2c:	8018      	strh	r0, [r3, #0]
 8013a2e:	2300      	movs	r3, #0
 8013a30:	6123      	str	r3, [r4, #16]
 8013a32:	4616      	mov	r6, r2
 8013a34:	e7ba      	b.n	80139ac <_printf_i+0x150>
 8013a36:	680b      	ldr	r3, [r1, #0]
 8013a38:	1d1a      	adds	r2, r3, #4
 8013a3a:	600a      	str	r2, [r1, #0]
 8013a3c:	681e      	ldr	r6, [r3, #0]
 8013a3e:	6862      	ldr	r2, [r4, #4]
 8013a40:	2100      	movs	r1, #0
 8013a42:	4630      	mov	r0, r6
 8013a44:	f7ec fbdc 	bl	8000200 <memchr>
 8013a48:	b108      	cbz	r0, 8013a4e <_printf_i+0x1f2>
 8013a4a:	1b80      	subs	r0, r0, r6
 8013a4c:	6060      	str	r0, [r4, #4]
 8013a4e:	6863      	ldr	r3, [r4, #4]
 8013a50:	6123      	str	r3, [r4, #16]
 8013a52:	2300      	movs	r3, #0
 8013a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a58:	e7a8      	b.n	80139ac <_printf_i+0x150>
 8013a5a:	6923      	ldr	r3, [r4, #16]
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	4649      	mov	r1, r9
 8013a60:	4640      	mov	r0, r8
 8013a62:	47d0      	blx	sl
 8013a64:	3001      	adds	r0, #1
 8013a66:	d0ab      	beq.n	80139c0 <_printf_i+0x164>
 8013a68:	6823      	ldr	r3, [r4, #0]
 8013a6a:	079b      	lsls	r3, r3, #30
 8013a6c:	d413      	bmi.n	8013a96 <_printf_i+0x23a>
 8013a6e:	68e0      	ldr	r0, [r4, #12]
 8013a70:	9b03      	ldr	r3, [sp, #12]
 8013a72:	4298      	cmp	r0, r3
 8013a74:	bfb8      	it	lt
 8013a76:	4618      	movlt	r0, r3
 8013a78:	e7a4      	b.n	80139c4 <_printf_i+0x168>
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	4632      	mov	r2, r6
 8013a7e:	4649      	mov	r1, r9
 8013a80:	4640      	mov	r0, r8
 8013a82:	47d0      	blx	sl
 8013a84:	3001      	adds	r0, #1
 8013a86:	d09b      	beq.n	80139c0 <_printf_i+0x164>
 8013a88:	3501      	adds	r5, #1
 8013a8a:	68e3      	ldr	r3, [r4, #12]
 8013a8c:	9903      	ldr	r1, [sp, #12]
 8013a8e:	1a5b      	subs	r3, r3, r1
 8013a90:	42ab      	cmp	r3, r5
 8013a92:	dcf2      	bgt.n	8013a7a <_printf_i+0x21e>
 8013a94:	e7eb      	b.n	8013a6e <_printf_i+0x212>
 8013a96:	2500      	movs	r5, #0
 8013a98:	f104 0619 	add.w	r6, r4, #25
 8013a9c:	e7f5      	b.n	8013a8a <_printf_i+0x22e>
 8013a9e:	bf00      	nop
 8013aa0:	08019d9e 	.word	0x08019d9e
 8013aa4:	08019daf 	.word	0x08019daf

08013aa8 <iprintf>:
 8013aa8:	b40f      	push	{r0, r1, r2, r3}
 8013aaa:	4b0a      	ldr	r3, [pc, #40]	; (8013ad4 <iprintf+0x2c>)
 8013aac:	b513      	push	{r0, r1, r4, lr}
 8013aae:	681c      	ldr	r4, [r3, #0]
 8013ab0:	b124      	cbz	r4, 8013abc <iprintf+0x14>
 8013ab2:	69a3      	ldr	r3, [r4, #24]
 8013ab4:	b913      	cbnz	r3, 8013abc <iprintf+0x14>
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f001 f81c 	bl	8014af4 <__sinit>
 8013abc:	ab05      	add	r3, sp, #20
 8013abe:	9a04      	ldr	r2, [sp, #16]
 8013ac0:	68a1      	ldr	r1, [r4, #8]
 8013ac2:	9301      	str	r3, [sp, #4]
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	f001 fdeb 	bl	80156a0 <_vfiprintf_r>
 8013aca:	b002      	add	sp, #8
 8013acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ad0:	b004      	add	sp, #16
 8013ad2:	4770      	bx	lr
 8013ad4:	20000054 	.word	0x20000054

08013ad8 <rand>:
 8013ad8:	4b17      	ldr	r3, [pc, #92]	; (8013b38 <rand+0x60>)
 8013ada:	b510      	push	{r4, lr}
 8013adc:	681c      	ldr	r4, [r3, #0]
 8013ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ae0:	b9b3      	cbnz	r3, 8013b10 <rand+0x38>
 8013ae2:	2018      	movs	r0, #24
 8013ae4:	f7ff fa7e 	bl	8012fe4 <malloc>
 8013ae8:	63a0      	str	r0, [r4, #56]	; 0x38
 8013aea:	b928      	cbnz	r0, 8013af8 <rand+0x20>
 8013aec:	4602      	mov	r2, r0
 8013aee:	4b13      	ldr	r3, [pc, #76]	; (8013b3c <rand+0x64>)
 8013af0:	4813      	ldr	r0, [pc, #76]	; (8013b40 <rand+0x68>)
 8013af2:	214e      	movs	r1, #78	; 0x4e
 8013af4:	f000 f90a 	bl	8013d0c <__assert_func>
 8013af8:	4a12      	ldr	r2, [pc, #72]	; (8013b44 <rand+0x6c>)
 8013afa:	4b13      	ldr	r3, [pc, #76]	; (8013b48 <rand+0x70>)
 8013afc:	e9c0 2300 	strd	r2, r3, [r0]
 8013b00:	4b12      	ldr	r3, [pc, #72]	; (8013b4c <rand+0x74>)
 8013b02:	6083      	str	r3, [r0, #8]
 8013b04:	230b      	movs	r3, #11
 8013b06:	8183      	strh	r3, [r0, #12]
 8013b08:	2201      	movs	r2, #1
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013b10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013b12:	480f      	ldr	r0, [pc, #60]	; (8013b50 <rand+0x78>)
 8013b14:	690a      	ldr	r2, [r1, #16]
 8013b16:	694b      	ldr	r3, [r1, #20]
 8013b18:	4c0e      	ldr	r4, [pc, #56]	; (8013b54 <rand+0x7c>)
 8013b1a:	4350      	muls	r0, r2
 8013b1c:	fb04 0003 	mla	r0, r4, r3, r0
 8013b20:	fba2 3404 	umull	r3, r4, r2, r4
 8013b24:	1c5a      	adds	r2, r3, #1
 8013b26:	4404      	add	r4, r0
 8013b28:	f144 0000 	adc.w	r0, r4, #0
 8013b2c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013b30:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013b34:	bd10      	pop	{r4, pc}
 8013b36:	bf00      	nop
 8013b38:	20000054 	.word	0x20000054
 8013b3c:	08019dc0 	.word	0x08019dc0
 8013b40:	08019dd7 	.word	0x08019dd7
 8013b44:	abcd330e 	.word	0xabcd330e
 8013b48:	e66d1234 	.word	0xe66d1234
 8013b4c:	0005deec 	.word	0x0005deec
 8013b50:	5851f42d 	.word	0x5851f42d
 8013b54:	4c957f2d 	.word	0x4c957f2d

08013b58 <_sbrk_r>:
 8013b58:	b538      	push	{r3, r4, r5, lr}
 8013b5a:	4d06      	ldr	r5, [pc, #24]	; (8013b74 <_sbrk_r+0x1c>)
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	4604      	mov	r4, r0
 8013b60:	4608      	mov	r0, r1
 8013b62:	602b      	str	r3, [r5, #0]
 8013b64:	f7f0 fb16 	bl	8004194 <_sbrk>
 8013b68:	1c43      	adds	r3, r0, #1
 8013b6a:	d102      	bne.n	8013b72 <_sbrk_r+0x1a>
 8013b6c:	682b      	ldr	r3, [r5, #0]
 8013b6e:	b103      	cbz	r3, 8013b72 <_sbrk_r+0x1a>
 8013b70:	6023      	str	r3, [r4, #0]
 8013b72:	bd38      	pop	{r3, r4, r5, pc}
 8013b74:	20009100 	.word	0x20009100

08013b78 <siprintf>:
 8013b78:	b40e      	push	{r1, r2, r3}
 8013b7a:	b500      	push	{lr}
 8013b7c:	b09c      	sub	sp, #112	; 0x70
 8013b7e:	ab1d      	add	r3, sp, #116	; 0x74
 8013b80:	9002      	str	r0, [sp, #8]
 8013b82:	9006      	str	r0, [sp, #24]
 8013b84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b88:	4809      	ldr	r0, [pc, #36]	; (8013bb0 <siprintf+0x38>)
 8013b8a:	9107      	str	r1, [sp, #28]
 8013b8c:	9104      	str	r1, [sp, #16]
 8013b8e:	4909      	ldr	r1, [pc, #36]	; (8013bb4 <siprintf+0x3c>)
 8013b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b94:	9105      	str	r1, [sp, #20]
 8013b96:	6800      	ldr	r0, [r0, #0]
 8013b98:	9301      	str	r3, [sp, #4]
 8013b9a:	a902      	add	r1, sp, #8
 8013b9c:	f001 fc56 	bl	801544c <_svfiprintf_r>
 8013ba0:	9b02      	ldr	r3, [sp, #8]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	701a      	strb	r2, [r3, #0]
 8013ba6:	b01c      	add	sp, #112	; 0x70
 8013ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013bac:	b003      	add	sp, #12
 8013bae:	4770      	bx	lr
 8013bb0:	20000054 	.word	0x20000054
 8013bb4:	ffff0208 	.word	0xffff0208

08013bb8 <strcpy>:
 8013bb8:	4603      	mov	r3, r0
 8013bba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013bbe:	f803 2b01 	strb.w	r2, [r3], #1
 8013bc2:	2a00      	cmp	r2, #0
 8013bc4:	d1f9      	bne.n	8013bba <strcpy+0x2>
 8013bc6:	4770      	bx	lr

08013bc8 <strncpy>:
 8013bc8:	b510      	push	{r4, lr}
 8013bca:	3901      	subs	r1, #1
 8013bcc:	4603      	mov	r3, r0
 8013bce:	b132      	cbz	r2, 8013bde <strncpy+0x16>
 8013bd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013bd4:	f803 4b01 	strb.w	r4, [r3], #1
 8013bd8:	3a01      	subs	r2, #1
 8013bda:	2c00      	cmp	r4, #0
 8013bdc:	d1f7      	bne.n	8013bce <strncpy+0x6>
 8013bde:	441a      	add	r2, r3
 8013be0:	2100      	movs	r1, #0
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d100      	bne.n	8013be8 <strncpy+0x20>
 8013be6:	bd10      	pop	{r4, pc}
 8013be8:	f803 1b01 	strb.w	r1, [r3], #1
 8013bec:	e7f9      	b.n	8013be2 <strncpy+0x1a>
	...

08013bf0 <_strtol_l.isra.0>:
 8013bf0:	2b01      	cmp	r3, #1
 8013bf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bf6:	d001      	beq.n	8013bfc <_strtol_l.isra.0+0xc>
 8013bf8:	2b24      	cmp	r3, #36	; 0x24
 8013bfa:	d906      	bls.n	8013c0a <_strtol_l.isra.0+0x1a>
 8013bfc:	f000 ff1c 	bl	8014a38 <__errno>
 8013c00:	2316      	movs	r3, #22
 8013c02:	6003      	str	r3, [r0, #0]
 8013c04:	2000      	movs	r0, #0
 8013c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c0a:	4f3a      	ldr	r7, [pc, #232]	; (8013cf4 <_strtol_l.isra.0+0x104>)
 8013c0c:	468e      	mov	lr, r1
 8013c0e:	4676      	mov	r6, lr
 8013c10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013c14:	5de5      	ldrb	r5, [r4, r7]
 8013c16:	f015 0508 	ands.w	r5, r5, #8
 8013c1a:	d1f8      	bne.n	8013c0e <_strtol_l.isra.0+0x1e>
 8013c1c:	2c2d      	cmp	r4, #45	; 0x2d
 8013c1e:	d134      	bne.n	8013c8a <_strtol_l.isra.0+0x9a>
 8013c20:	f89e 4000 	ldrb.w	r4, [lr]
 8013c24:	f04f 0801 	mov.w	r8, #1
 8013c28:	f106 0e02 	add.w	lr, r6, #2
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d05c      	beq.n	8013cea <_strtol_l.isra.0+0xfa>
 8013c30:	2b10      	cmp	r3, #16
 8013c32:	d10c      	bne.n	8013c4e <_strtol_l.isra.0+0x5e>
 8013c34:	2c30      	cmp	r4, #48	; 0x30
 8013c36:	d10a      	bne.n	8013c4e <_strtol_l.isra.0+0x5e>
 8013c38:	f89e 4000 	ldrb.w	r4, [lr]
 8013c3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013c40:	2c58      	cmp	r4, #88	; 0x58
 8013c42:	d14d      	bne.n	8013ce0 <_strtol_l.isra.0+0xf0>
 8013c44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013c48:	2310      	movs	r3, #16
 8013c4a:	f10e 0e02 	add.w	lr, lr, #2
 8013c4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013c52:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013c56:	2600      	movs	r6, #0
 8013c58:	fbbc f9f3 	udiv	r9, ip, r3
 8013c5c:	4635      	mov	r5, r6
 8013c5e:	fb03 ca19 	mls	sl, r3, r9, ip
 8013c62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013c66:	2f09      	cmp	r7, #9
 8013c68:	d818      	bhi.n	8013c9c <_strtol_l.isra.0+0xac>
 8013c6a:	463c      	mov	r4, r7
 8013c6c:	42a3      	cmp	r3, r4
 8013c6e:	dd24      	ble.n	8013cba <_strtol_l.isra.0+0xca>
 8013c70:	2e00      	cmp	r6, #0
 8013c72:	db1f      	blt.n	8013cb4 <_strtol_l.isra.0+0xc4>
 8013c74:	45a9      	cmp	r9, r5
 8013c76:	d31d      	bcc.n	8013cb4 <_strtol_l.isra.0+0xc4>
 8013c78:	d101      	bne.n	8013c7e <_strtol_l.isra.0+0x8e>
 8013c7a:	45a2      	cmp	sl, r4
 8013c7c:	db1a      	blt.n	8013cb4 <_strtol_l.isra.0+0xc4>
 8013c7e:	fb05 4503 	mla	r5, r5, r3, r4
 8013c82:	2601      	movs	r6, #1
 8013c84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013c88:	e7eb      	b.n	8013c62 <_strtol_l.isra.0+0x72>
 8013c8a:	2c2b      	cmp	r4, #43	; 0x2b
 8013c8c:	bf08      	it	eq
 8013c8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013c92:	46a8      	mov	r8, r5
 8013c94:	bf08      	it	eq
 8013c96:	f106 0e02 	addeq.w	lr, r6, #2
 8013c9a:	e7c7      	b.n	8013c2c <_strtol_l.isra.0+0x3c>
 8013c9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013ca0:	2f19      	cmp	r7, #25
 8013ca2:	d801      	bhi.n	8013ca8 <_strtol_l.isra.0+0xb8>
 8013ca4:	3c37      	subs	r4, #55	; 0x37
 8013ca6:	e7e1      	b.n	8013c6c <_strtol_l.isra.0+0x7c>
 8013ca8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013cac:	2f19      	cmp	r7, #25
 8013cae:	d804      	bhi.n	8013cba <_strtol_l.isra.0+0xca>
 8013cb0:	3c57      	subs	r4, #87	; 0x57
 8013cb2:	e7db      	b.n	8013c6c <_strtol_l.isra.0+0x7c>
 8013cb4:	f04f 36ff 	mov.w	r6, #4294967295
 8013cb8:	e7e4      	b.n	8013c84 <_strtol_l.isra.0+0x94>
 8013cba:	2e00      	cmp	r6, #0
 8013cbc:	da05      	bge.n	8013cca <_strtol_l.isra.0+0xda>
 8013cbe:	2322      	movs	r3, #34	; 0x22
 8013cc0:	6003      	str	r3, [r0, #0]
 8013cc2:	4665      	mov	r5, ip
 8013cc4:	b942      	cbnz	r2, 8013cd8 <_strtol_l.isra.0+0xe8>
 8013cc6:	4628      	mov	r0, r5
 8013cc8:	e79d      	b.n	8013c06 <_strtol_l.isra.0+0x16>
 8013cca:	f1b8 0f00 	cmp.w	r8, #0
 8013cce:	d000      	beq.n	8013cd2 <_strtol_l.isra.0+0xe2>
 8013cd0:	426d      	negs	r5, r5
 8013cd2:	2a00      	cmp	r2, #0
 8013cd4:	d0f7      	beq.n	8013cc6 <_strtol_l.isra.0+0xd6>
 8013cd6:	b10e      	cbz	r6, 8013cdc <_strtol_l.isra.0+0xec>
 8013cd8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013cdc:	6011      	str	r1, [r2, #0]
 8013cde:	e7f2      	b.n	8013cc6 <_strtol_l.isra.0+0xd6>
 8013ce0:	2430      	movs	r4, #48	; 0x30
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d1b3      	bne.n	8013c4e <_strtol_l.isra.0+0x5e>
 8013ce6:	2308      	movs	r3, #8
 8013ce8:	e7b1      	b.n	8013c4e <_strtol_l.isra.0+0x5e>
 8013cea:	2c30      	cmp	r4, #48	; 0x30
 8013cec:	d0a4      	beq.n	8013c38 <_strtol_l.isra.0+0x48>
 8013cee:	230a      	movs	r3, #10
 8013cf0:	e7ad      	b.n	8013c4e <_strtol_l.isra.0+0x5e>
 8013cf2:	bf00      	nop
 8013cf4:	08019c87 	.word	0x08019c87

08013cf8 <strtol>:
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	460a      	mov	r2, r1
 8013cfc:	4601      	mov	r1, r0
 8013cfe:	4802      	ldr	r0, [pc, #8]	; (8013d08 <strtol+0x10>)
 8013d00:	6800      	ldr	r0, [r0, #0]
 8013d02:	f7ff bf75 	b.w	8013bf0 <_strtol_l.isra.0>
 8013d06:	bf00      	nop
 8013d08:	20000054 	.word	0x20000054

08013d0c <__assert_func>:
 8013d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013d0e:	4614      	mov	r4, r2
 8013d10:	461a      	mov	r2, r3
 8013d12:	4b09      	ldr	r3, [pc, #36]	; (8013d38 <__assert_func+0x2c>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	4605      	mov	r5, r0
 8013d18:	68d8      	ldr	r0, [r3, #12]
 8013d1a:	b14c      	cbz	r4, 8013d30 <__assert_func+0x24>
 8013d1c:	4b07      	ldr	r3, [pc, #28]	; (8013d3c <__assert_func+0x30>)
 8013d1e:	9100      	str	r1, [sp, #0]
 8013d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013d24:	4906      	ldr	r1, [pc, #24]	; (8013d40 <__assert_func+0x34>)
 8013d26:	462b      	mov	r3, r5
 8013d28:	f000 ff62 	bl	8014bf0 <fiprintf>
 8013d2c:	f001 fefe 	bl	8015b2c <abort>
 8013d30:	4b04      	ldr	r3, [pc, #16]	; (8013d44 <__assert_func+0x38>)
 8013d32:	461c      	mov	r4, r3
 8013d34:	e7f3      	b.n	8013d1e <__assert_func+0x12>
 8013d36:	bf00      	nop
 8013d38:	20000054 	.word	0x20000054
 8013d3c:	08019e36 	.word	0x08019e36
 8013d40:	08019e43 	.word	0x08019e43
 8013d44:	08019e71 	.word	0x08019e71

08013d48 <quorem>:
 8013d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d4c:	6903      	ldr	r3, [r0, #16]
 8013d4e:	690c      	ldr	r4, [r1, #16]
 8013d50:	42a3      	cmp	r3, r4
 8013d52:	4607      	mov	r7, r0
 8013d54:	f2c0 8081 	blt.w	8013e5a <quorem+0x112>
 8013d58:	3c01      	subs	r4, #1
 8013d5a:	f101 0814 	add.w	r8, r1, #20
 8013d5e:	f100 0514 	add.w	r5, r0, #20
 8013d62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d66:	9301      	str	r3, [sp, #4]
 8013d68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d70:	3301      	adds	r3, #1
 8013d72:	429a      	cmp	r2, r3
 8013d74:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013d78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013d7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013d80:	d331      	bcc.n	8013de6 <quorem+0x9e>
 8013d82:	f04f 0e00 	mov.w	lr, #0
 8013d86:	4640      	mov	r0, r8
 8013d88:	46ac      	mov	ip, r5
 8013d8a:	46f2      	mov	sl, lr
 8013d8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d90:	b293      	uxth	r3, r2
 8013d92:	fb06 e303 	mla	r3, r6, r3, lr
 8013d96:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	ebaa 0303 	sub.w	r3, sl, r3
 8013da0:	0c12      	lsrs	r2, r2, #16
 8013da2:	f8dc a000 	ldr.w	sl, [ip]
 8013da6:	fb06 e202 	mla	r2, r6, r2, lr
 8013daa:	fa13 f38a 	uxtah	r3, r3, sl
 8013dae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013db2:	fa1f fa82 	uxth.w	sl, r2
 8013db6:	f8dc 2000 	ldr.w	r2, [ip]
 8013dba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013dbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013dc8:	4581      	cmp	r9, r0
 8013dca:	f84c 3b04 	str.w	r3, [ip], #4
 8013dce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013dd2:	d2db      	bcs.n	8013d8c <quorem+0x44>
 8013dd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8013dd8:	b92b      	cbnz	r3, 8013de6 <quorem+0x9e>
 8013dda:	9b01      	ldr	r3, [sp, #4]
 8013ddc:	3b04      	subs	r3, #4
 8013dde:	429d      	cmp	r5, r3
 8013de0:	461a      	mov	r2, r3
 8013de2:	d32e      	bcc.n	8013e42 <quorem+0xfa>
 8013de4:	613c      	str	r4, [r7, #16]
 8013de6:	4638      	mov	r0, r7
 8013de8:	f001 f9c6 	bl	8015178 <__mcmp>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	db24      	blt.n	8013e3a <quorem+0xf2>
 8013df0:	3601      	adds	r6, #1
 8013df2:	4628      	mov	r0, r5
 8013df4:	f04f 0c00 	mov.w	ip, #0
 8013df8:	f858 2b04 	ldr.w	r2, [r8], #4
 8013dfc:	f8d0 e000 	ldr.w	lr, [r0]
 8013e00:	b293      	uxth	r3, r2
 8013e02:	ebac 0303 	sub.w	r3, ip, r3
 8013e06:	0c12      	lsrs	r2, r2, #16
 8013e08:	fa13 f38e 	uxtah	r3, r3, lr
 8013e0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013e10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013e1a:	45c1      	cmp	r9, r8
 8013e1c:	f840 3b04 	str.w	r3, [r0], #4
 8013e20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e24:	d2e8      	bcs.n	8013df8 <quorem+0xb0>
 8013e26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013e2e:	b922      	cbnz	r2, 8013e3a <quorem+0xf2>
 8013e30:	3b04      	subs	r3, #4
 8013e32:	429d      	cmp	r5, r3
 8013e34:	461a      	mov	r2, r3
 8013e36:	d30a      	bcc.n	8013e4e <quorem+0x106>
 8013e38:	613c      	str	r4, [r7, #16]
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	b003      	add	sp, #12
 8013e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e42:	6812      	ldr	r2, [r2, #0]
 8013e44:	3b04      	subs	r3, #4
 8013e46:	2a00      	cmp	r2, #0
 8013e48:	d1cc      	bne.n	8013de4 <quorem+0x9c>
 8013e4a:	3c01      	subs	r4, #1
 8013e4c:	e7c7      	b.n	8013dde <quorem+0x96>
 8013e4e:	6812      	ldr	r2, [r2, #0]
 8013e50:	3b04      	subs	r3, #4
 8013e52:	2a00      	cmp	r2, #0
 8013e54:	d1f0      	bne.n	8013e38 <quorem+0xf0>
 8013e56:	3c01      	subs	r4, #1
 8013e58:	e7eb      	b.n	8013e32 <quorem+0xea>
 8013e5a:	2000      	movs	r0, #0
 8013e5c:	e7ee      	b.n	8013e3c <quorem+0xf4>
	...

08013e60 <_dtoa_r>:
 8013e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e64:	ed2d 8b02 	vpush	{d8}
 8013e68:	ec57 6b10 	vmov	r6, r7, d0
 8013e6c:	b095      	sub	sp, #84	; 0x54
 8013e6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013e74:	9105      	str	r1, [sp, #20]
 8013e76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8013e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e80:	b975      	cbnz	r5, 8013ea0 <_dtoa_r+0x40>
 8013e82:	2010      	movs	r0, #16
 8013e84:	f7ff f8ae 	bl	8012fe4 <malloc>
 8013e88:	4602      	mov	r2, r0
 8013e8a:	6260      	str	r0, [r4, #36]	; 0x24
 8013e8c:	b920      	cbnz	r0, 8013e98 <_dtoa_r+0x38>
 8013e8e:	4bb2      	ldr	r3, [pc, #712]	; (8014158 <_dtoa_r+0x2f8>)
 8013e90:	21ea      	movs	r1, #234	; 0xea
 8013e92:	48b2      	ldr	r0, [pc, #712]	; (801415c <_dtoa_r+0x2fc>)
 8013e94:	f7ff ff3a 	bl	8013d0c <__assert_func>
 8013e98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013e9c:	6005      	str	r5, [r0, #0]
 8013e9e:	60c5      	str	r5, [r0, #12]
 8013ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013ea2:	6819      	ldr	r1, [r3, #0]
 8013ea4:	b151      	cbz	r1, 8013ebc <_dtoa_r+0x5c>
 8013ea6:	685a      	ldr	r2, [r3, #4]
 8013ea8:	604a      	str	r2, [r1, #4]
 8013eaa:	2301      	movs	r3, #1
 8013eac:	4093      	lsls	r3, r2
 8013eae:	608b      	str	r3, [r1, #8]
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	f000 ff23 	bl	8014cfc <_Bfree>
 8013eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013eb8:	2200      	movs	r2, #0
 8013eba:	601a      	str	r2, [r3, #0]
 8013ebc:	1e3b      	subs	r3, r7, #0
 8013ebe:	bfb9      	ittee	lt
 8013ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013ec4:	9303      	strlt	r3, [sp, #12]
 8013ec6:	2300      	movge	r3, #0
 8013ec8:	f8c8 3000 	strge.w	r3, [r8]
 8013ecc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013ed0:	4ba3      	ldr	r3, [pc, #652]	; (8014160 <_dtoa_r+0x300>)
 8013ed2:	bfbc      	itt	lt
 8013ed4:	2201      	movlt	r2, #1
 8013ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8013eda:	ea33 0309 	bics.w	r3, r3, r9
 8013ede:	d11b      	bne.n	8013f18 <_dtoa_r+0xb8>
 8013ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013ee2:	f242 730f 	movw	r3, #9999	; 0x270f
 8013ee6:	6013      	str	r3, [r2, #0]
 8013ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013eec:	4333      	orrs	r3, r6
 8013eee:	f000 857a 	beq.w	80149e6 <_dtoa_r+0xb86>
 8013ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ef4:	b963      	cbnz	r3, 8013f10 <_dtoa_r+0xb0>
 8013ef6:	4b9b      	ldr	r3, [pc, #620]	; (8014164 <_dtoa_r+0x304>)
 8013ef8:	e024      	b.n	8013f44 <_dtoa_r+0xe4>
 8013efa:	4b9b      	ldr	r3, [pc, #620]	; (8014168 <_dtoa_r+0x308>)
 8013efc:	9300      	str	r3, [sp, #0]
 8013efe:	3308      	adds	r3, #8
 8013f00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013f02:	6013      	str	r3, [r2, #0]
 8013f04:	9800      	ldr	r0, [sp, #0]
 8013f06:	b015      	add	sp, #84	; 0x54
 8013f08:	ecbd 8b02 	vpop	{d8}
 8013f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f10:	4b94      	ldr	r3, [pc, #592]	; (8014164 <_dtoa_r+0x304>)
 8013f12:	9300      	str	r3, [sp, #0]
 8013f14:	3303      	adds	r3, #3
 8013f16:	e7f3      	b.n	8013f00 <_dtoa_r+0xa0>
 8013f18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	ec51 0b17 	vmov	r0, r1, d7
 8013f22:	2300      	movs	r3, #0
 8013f24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013f28:	f7ec fdde 	bl	8000ae8 <__aeabi_dcmpeq>
 8013f2c:	4680      	mov	r8, r0
 8013f2e:	b158      	cbz	r0, 8013f48 <_dtoa_r+0xe8>
 8013f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f32:	2301      	movs	r3, #1
 8013f34:	6013      	str	r3, [r2, #0]
 8013f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	f000 8551 	beq.w	80149e0 <_dtoa_r+0xb80>
 8013f3e:	488b      	ldr	r0, [pc, #556]	; (801416c <_dtoa_r+0x30c>)
 8013f40:	6018      	str	r0, [r3, #0]
 8013f42:	1e43      	subs	r3, r0, #1
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	e7dd      	b.n	8013f04 <_dtoa_r+0xa4>
 8013f48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013f4c:	aa12      	add	r2, sp, #72	; 0x48
 8013f4e:	a913      	add	r1, sp, #76	; 0x4c
 8013f50:	4620      	mov	r0, r4
 8013f52:	f001 f9b5 	bl	80152c0 <__d2b>
 8013f56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013f5a:	4683      	mov	fp, r0
 8013f5c:	2d00      	cmp	r5, #0
 8013f5e:	d07c      	beq.n	801405a <_dtoa_r+0x1fa>
 8013f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013f6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013f72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013f7a:	4b7d      	ldr	r3, [pc, #500]	; (8014170 <_dtoa_r+0x310>)
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	4630      	mov	r0, r6
 8013f80:	4639      	mov	r1, r7
 8013f82:	f7ec f991 	bl	80002a8 <__aeabi_dsub>
 8013f86:	a36e      	add	r3, pc, #440	; (adr r3, 8014140 <_dtoa_r+0x2e0>)
 8013f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f8c:	f7ec fb44 	bl	8000618 <__aeabi_dmul>
 8013f90:	a36d      	add	r3, pc, #436	; (adr r3, 8014148 <_dtoa_r+0x2e8>)
 8013f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f96:	f7ec f989 	bl	80002ac <__adddf3>
 8013f9a:	4606      	mov	r6, r0
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	460f      	mov	r7, r1
 8013fa0:	f7ec fad0 	bl	8000544 <__aeabi_i2d>
 8013fa4:	a36a      	add	r3, pc, #424	; (adr r3, 8014150 <_dtoa_r+0x2f0>)
 8013fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013faa:	f7ec fb35 	bl	8000618 <__aeabi_dmul>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	4639      	mov	r1, r7
 8013fb6:	f7ec f979 	bl	80002ac <__adddf3>
 8013fba:	4606      	mov	r6, r0
 8013fbc:	460f      	mov	r7, r1
 8013fbe:	f7ec fddb 	bl	8000b78 <__aeabi_d2iz>
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	4682      	mov	sl, r0
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	4630      	mov	r0, r6
 8013fca:	4639      	mov	r1, r7
 8013fcc:	f7ec fd96 	bl	8000afc <__aeabi_dcmplt>
 8013fd0:	b148      	cbz	r0, 8013fe6 <_dtoa_r+0x186>
 8013fd2:	4650      	mov	r0, sl
 8013fd4:	f7ec fab6 	bl	8000544 <__aeabi_i2d>
 8013fd8:	4632      	mov	r2, r6
 8013fda:	463b      	mov	r3, r7
 8013fdc:	f7ec fd84 	bl	8000ae8 <__aeabi_dcmpeq>
 8013fe0:	b908      	cbnz	r0, 8013fe6 <_dtoa_r+0x186>
 8013fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fe6:	f1ba 0f16 	cmp.w	sl, #22
 8013fea:	d854      	bhi.n	8014096 <_dtoa_r+0x236>
 8013fec:	4b61      	ldr	r3, [pc, #388]	; (8014174 <_dtoa_r+0x314>)
 8013fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ff6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ffa:	f7ec fd7f 	bl	8000afc <__aeabi_dcmplt>
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d04b      	beq.n	801409a <_dtoa_r+0x23a>
 8014002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014006:	2300      	movs	r3, #0
 8014008:	930e      	str	r3, [sp, #56]	; 0x38
 801400a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801400c:	1b5d      	subs	r5, r3, r5
 801400e:	1e6b      	subs	r3, r5, #1
 8014010:	9304      	str	r3, [sp, #16]
 8014012:	bf43      	ittte	mi
 8014014:	2300      	movmi	r3, #0
 8014016:	f1c5 0801 	rsbmi	r8, r5, #1
 801401a:	9304      	strmi	r3, [sp, #16]
 801401c:	f04f 0800 	movpl.w	r8, #0
 8014020:	f1ba 0f00 	cmp.w	sl, #0
 8014024:	db3b      	blt.n	801409e <_dtoa_r+0x23e>
 8014026:	9b04      	ldr	r3, [sp, #16]
 8014028:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801402c:	4453      	add	r3, sl
 801402e:	9304      	str	r3, [sp, #16]
 8014030:	2300      	movs	r3, #0
 8014032:	9306      	str	r3, [sp, #24]
 8014034:	9b05      	ldr	r3, [sp, #20]
 8014036:	2b09      	cmp	r3, #9
 8014038:	d869      	bhi.n	801410e <_dtoa_r+0x2ae>
 801403a:	2b05      	cmp	r3, #5
 801403c:	bfc4      	itt	gt
 801403e:	3b04      	subgt	r3, #4
 8014040:	9305      	strgt	r3, [sp, #20]
 8014042:	9b05      	ldr	r3, [sp, #20]
 8014044:	f1a3 0302 	sub.w	r3, r3, #2
 8014048:	bfcc      	ite	gt
 801404a:	2500      	movgt	r5, #0
 801404c:	2501      	movle	r5, #1
 801404e:	2b03      	cmp	r3, #3
 8014050:	d869      	bhi.n	8014126 <_dtoa_r+0x2c6>
 8014052:	e8df f003 	tbb	[pc, r3]
 8014056:	4e2c      	.short	0x4e2c
 8014058:	5a4c      	.short	0x5a4c
 801405a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801405e:	441d      	add	r5, r3
 8014060:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014064:	2b20      	cmp	r3, #32
 8014066:	bfc1      	itttt	gt
 8014068:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801406c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014070:	fa09 f303 	lslgt.w	r3, r9, r3
 8014074:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014078:	bfda      	itte	le
 801407a:	f1c3 0320 	rsble	r3, r3, #32
 801407e:	fa06 f003 	lslle.w	r0, r6, r3
 8014082:	4318      	orrgt	r0, r3
 8014084:	f7ec fa4e 	bl	8000524 <__aeabi_ui2d>
 8014088:	2301      	movs	r3, #1
 801408a:	4606      	mov	r6, r0
 801408c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014090:	3d01      	subs	r5, #1
 8014092:	9310      	str	r3, [sp, #64]	; 0x40
 8014094:	e771      	b.n	8013f7a <_dtoa_r+0x11a>
 8014096:	2301      	movs	r3, #1
 8014098:	e7b6      	b.n	8014008 <_dtoa_r+0x1a8>
 801409a:	900e      	str	r0, [sp, #56]	; 0x38
 801409c:	e7b5      	b.n	801400a <_dtoa_r+0x1aa>
 801409e:	f1ca 0300 	rsb	r3, sl, #0
 80140a2:	9306      	str	r3, [sp, #24]
 80140a4:	2300      	movs	r3, #0
 80140a6:	eba8 080a 	sub.w	r8, r8, sl
 80140aa:	930d      	str	r3, [sp, #52]	; 0x34
 80140ac:	e7c2      	b.n	8014034 <_dtoa_r+0x1d4>
 80140ae:	2300      	movs	r3, #0
 80140b0:	9308      	str	r3, [sp, #32]
 80140b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	dc39      	bgt.n	801412c <_dtoa_r+0x2cc>
 80140b8:	f04f 0901 	mov.w	r9, #1
 80140bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80140c0:	464b      	mov	r3, r9
 80140c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80140c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80140c8:	2200      	movs	r2, #0
 80140ca:	6042      	str	r2, [r0, #4]
 80140cc:	2204      	movs	r2, #4
 80140ce:	f102 0614 	add.w	r6, r2, #20
 80140d2:	429e      	cmp	r6, r3
 80140d4:	6841      	ldr	r1, [r0, #4]
 80140d6:	d92f      	bls.n	8014138 <_dtoa_r+0x2d8>
 80140d8:	4620      	mov	r0, r4
 80140da:	f000 fdcf 	bl	8014c7c <_Balloc>
 80140de:	9000      	str	r0, [sp, #0]
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d14b      	bne.n	801417c <_dtoa_r+0x31c>
 80140e4:	4b24      	ldr	r3, [pc, #144]	; (8014178 <_dtoa_r+0x318>)
 80140e6:	4602      	mov	r2, r0
 80140e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80140ec:	e6d1      	b.n	8013e92 <_dtoa_r+0x32>
 80140ee:	2301      	movs	r3, #1
 80140f0:	e7de      	b.n	80140b0 <_dtoa_r+0x250>
 80140f2:	2300      	movs	r3, #0
 80140f4:	9308      	str	r3, [sp, #32]
 80140f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140f8:	eb0a 0903 	add.w	r9, sl, r3
 80140fc:	f109 0301 	add.w	r3, r9, #1
 8014100:	2b01      	cmp	r3, #1
 8014102:	9301      	str	r3, [sp, #4]
 8014104:	bfb8      	it	lt
 8014106:	2301      	movlt	r3, #1
 8014108:	e7dd      	b.n	80140c6 <_dtoa_r+0x266>
 801410a:	2301      	movs	r3, #1
 801410c:	e7f2      	b.n	80140f4 <_dtoa_r+0x294>
 801410e:	2501      	movs	r5, #1
 8014110:	2300      	movs	r3, #0
 8014112:	9305      	str	r3, [sp, #20]
 8014114:	9508      	str	r5, [sp, #32]
 8014116:	f04f 39ff 	mov.w	r9, #4294967295
 801411a:	2200      	movs	r2, #0
 801411c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014120:	2312      	movs	r3, #18
 8014122:	9209      	str	r2, [sp, #36]	; 0x24
 8014124:	e7cf      	b.n	80140c6 <_dtoa_r+0x266>
 8014126:	2301      	movs	r3, #1
 8014128:	9308      	str	r3, [sp, #32]
 801412a:	e7f4      	b.n	8014116 <_dtoa_r+0x2b6>
 801412c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014130:	f8cd 9004 	str.w	r9, [sp, #4]
 8014134:	464b      	mov	r3, r9
 8014136:	e7c6      	b.n	80140c6 <_dtoa_r+0x266>
 8014138:	3101      	adds	r1, #1
 801413a:	6041      	str	r1, [r0, #4]
 801413c:	0052      	lsls	r2, r2, #1
 801413e:	e7c6      	b.n	80140ce <_dtoa_r+0x26e>
 8014140:	636f4361 	.word	0x636f4361
 8014144:	3fd287a7 	.word	0x3fd287a7
 8014148:	8b60c8b3 	.word	0x8b60c8b3
 801414c:	3fc68a28 	.word	0x3fc68a28
 8014150:	509f79fb 	.word	0x509f79fb
 8014154:	3fd34413 	.word	0x3fd34413
 8014158:	08019dc0 	.word	0x08019dc0
 801415c:	08019e7f 	.word	0x08019e7f
 8014160:	7ff00000 	.word	0x7ff00000
 8014164:	08019e7b 	.word	0x08019e7b
 8014168:	08019e72 	.word	0x08019e72
 801416c:	08019d9d 	.word	0x08019d9d
 8014170:	3ff80000 	.word	0x3ff80000
 8014174:	08019fd8 	.word	0x08019fd8
 8014178:	08019ede 	.word	0x08019ede
 801417c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801417e:	9a00      	ldr	r2, [sp, #0]
 8014180:	601a      	str	r2, [r3, #0]
 8014182:	9b01      	ldr	r3, [sp, #4]
 8014184:	2b0e      	cmp	r3, #14
 8014186:	f200 80ad 	bhi.w	80142e4 <_dtoa_r+0x484>
 801418a:	2d00      	cmp	r5, #0
 801418c:	f000 80aa 	beq.w	80142e4 <_dtoa_r+0x484>
 8014190:	f1ba 0f00 	cmp.w	sl, #0
 8014194:	dd36      	ble.n	8014204 <_dtoa_r+0x3a4>
 8014196:	4ac3      	ldr	r2, [pc, #780]	; (80144a4 <_dtoa_r+0x644>)
 8014198:	f00a 030f 	and.w	r3, sl, #15
 801419c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80141a0:	ed93 7b00 	vldr	d7, [r3]
 80141a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80141a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80141ac:	eeb0 8a47 	vmov.f32	s16, s14
 80141b0:	eef0 8a67 	vmov.f32	s17, s15
 80141b4:	d016      	beq.n	80141e4 <_dtoa_r+0x384>
 80141b6:	4bbc      	ldr	r3, [pc, #752]	; (80144a8 <_dtoa_r+0x648>)
 80141b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80141bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80141c0:	f7ec fb54 	bl	800086c <__aeabi_ddiv>
 80141c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141c8:	f007 070f 	and.w	r7, r7, #15
 80141cc:	2503      	movs	r5, #3
 80141ce:	4eb6      	ldr	r6, [pc, #728]	; (80144a8 <_dtoa_r+0x648>)
 80141d0:	b957      	cbnz	r7, 80141e8 <_dtoa_r+0x388>
 80141d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141d6:	ec53 2b18 	vmov	r2, r3, d8
 80141da:	f7ec fb47 	bl	800086c <__aeabi_ddiv>
 80141de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141e2:	e029      	b.n	8014238 <_dtoa_r+0x3d8>
 80141e4:	2502      	movs	r5, #2
 80141e6:	e7f2      	b.n	80141ce <_dtoa_r+0x36e>
 80141e8:	07f9      	lsls	r1, r7, #31
 80141ea:	d508      	bpl.n	80141fe <_dtoa_r+0x39e>
 80141ec:	ec51 0b18 	vmov	r0, r1, d8
 80141f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80141f4:	f7ec fa10 	bl	8000618 <__aeabi_dmul>
 80141f8:	ec41 0b18 	vmov	d8, r0, r1
 80141fc:	3501      	adds	r5, #1
 80141fe:	107f      	asrs	r7, r7, #1
 8014200:	3608      	adds	r6, #8
 8014202:	e7e5      	b.n	80141d0 <_dtoa_r+0x370>
 8014204:	f000 80a6 	beq.w	8014354 <_dtoa_r+0x4f4>
 8014208:	f1ca 0600 	rsb	r6, sl, #0
 801420c:	4ba5      	ldr	r3, [pc, #660]	; (80144a4 <_dtoa_r+0x644>)
 801420e:	4fa6      	ldr	r7, [pc, #664]	; (80144a8 <_dtoa_r+0x648>)
 8014210:	f006 020f 	and.w	r2, r6, #15
 8014214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801421c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014220:	f7ec f9fa 	bl	8000618 <__aeabi_dmul>
 8014224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014228:	1136      	asrs	r6, r6, #4
 801422a:	2300      	movs	r3, #0
 801422c:	2502      	movs	r5, #2
 801422e:	2e00      	cmp	r6, #0
 8014230:	f040 8085 	bne.w	801433e <_dtoa_r+0x4de>
 8014234:	2b00      	cmp	r3, #0
 8014236:	d1d2      	bne.n	80141de <_dtoa_r+0x37e>
 8014238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801423a:	2b00      	cmp	r3, #0
 801423c:	f000 808c 	beq.w	8014358 <_dtoa_r+0x4f8>
 8014240:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014244:	4b99      	ldr	r3, [pc, #612]	; (80144ac <_dtoa_r+0x64c>)
 8014246:	2200      	movs	r2, #0
 8014248:	4630      	mov	r0, r6
 801424a:	4639      	mov	r1, r7
 801424c:	f7ec fc56 	bl	8000afc <__aeabi_dcmplt>
 8014250:	2800      	cmp	r0, #0
 8014252:	f000 8081 	beq.w	8014358 <_dtoa_r+0x4f8>
 8014256:	9b01      	ldr	r3, [sp, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d07d      	beq.n	8014358 <_dtoa_r+0x4f8>
 801425c:	f1b9 0f00 	cmp.w	r9, #0
 8014260:	dd3c      	ble.n	80142dc <_dtoa_r+0x47c>
 8014262:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014266:	9307      	str	r3, [sp, #28]
 8014268:	2200      	movs	r2, #0
 801426a:	4b91      	ldr	r3, [pc, #580]	; (80144b0 <_dtoa_r+0x650>)
 801426c:	4630      	mov	r0, r6
 801426e:	4639      	mov	r1, r7
 8014270:	f7ec f9d2 	bl	8000618 <__aeabi_dmul>
 8014274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014278:	3501      	adds	r5, #1
 801427a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801427e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014282:	4628      	mov	r0, r5
 8014284:	f7ec f95e 	bl	8000544 <__aeabi_i2d>
 8014288:	4632      	mov	r2, r6
 801428a:	463b      	mov	r3, r7
 801428c:	f7ec f9c4 	bl	8000618 <__aeabi_dmul>
 8014290:	4b88      	ldr	r3, [pc, #544]	; (80144b4 <_dtoa_r+0x654>)
 8014292:	2200      	movs	r2, #0
 8014294:	f7ec f80a 	bl	80002ac <__adddf3>
 8014298:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801429c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80142a0:	9303      	str	r3, [sp, #12]
 80142a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d15c      	bne.n	8014362 <_dtoa_r+0x502>
 80142a8:	4b83      	ldr	r3, [pc, #524]	; (80144b8 <_dtoa_r+0x658>)
 80142aa:	2200      	movs	r2, #0
 80142ac:	4630      	mov	r0, r6
 80142ae:	4639      	mov	r1, r7
 80142b0:	f7eb fffa 	bl	80002a8 <__aeabi_dsub>
 80142b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80142b8:	4606      	mov	r6, r0
 80142ba:	460f      	mov	r7, r1
 80142bc:	f7ec fc3c 	bl	8000b38 <__aeabi_dcmpgt>
 80142c0:	2800      	cmp	r0, #0
 80142c2:	f040 8296 	bne.w	80147f2 <_dtoa_r+0x992>
 80142c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80142ca:	4630      	mov	r0, r6
 80142cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142d0:	4639      	mov	r1, r7
 80142d2:	f7ec fc13 	bl	8000afc <__aeabi_dcmplt>
 80142d6:	2800      	cmp	r0, #0
 80142d8:	f040 8288 	bne.w	80147ec <_dtoa_r+0x98c>
 80142dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80142e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	f2c0 8158 	blt.w	801459c <_dtoa_r+0x73c>
 80142ec:	f1ba 0f0e 	cmp.w	sl, #14
 80142f0:	f300 8154 	bgt.w	801459c <_dtoa_r+0x73c>
 80142f4:	4b6b      	ldr	r3, [pc, #428]	; (80144a4 <_dtoa_r+0x644>)
 80142f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80142fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80142fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014300:	2b00      	cmp	r3, #0
 8014302:	f280 80e3 	bge.w	80144cc <_dtoa_r+0x66c>
 8014306:	9b01      	ldr	r3, [sp, #4]
 8014308:	2b00      	cmp	r3, #0
 801430a:	f300 80df 	bgt.w	80144cc <_dtoa_r+0x66c>
 801430e:	f040 826d 	bne.w	80147ec <_dtoa_r+0x98c>
 8014312:	4b69      	ldr	r3, [pc, #420]	; (80144b8 <_dtoa_r+0x658>)
 8014314:	2200      	movs	r2, #0
 8014316:	4640      	mov	r0, r8
 8014318:	4649      	mov	r1, r9
 801431a:	f7ec f97d 	bl	8000618 <__aeabi_dmul>
 801431e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014322:	f7ec fbff 	bl	8000b24 <__aeabi_dcmpge>
 8014326:	9e01      	ldr	r6, [sp, #4]
 8014328:	4637      	mov	r7, r6
 801432a:	2800      	cmp	r0, #0
 801432c:	f040 8243 	bne.w	80147b6 <_dtoa_r+0x956>
 8014330:	9d00      	ldr	r5, [sp, #0]
 8014332:	2331      	movs	r3, #49	; 0x31
 8014334:	f805 3b01 	strb.w	r3, [r5], #1
 8014338:	f10a 0a01 	add.w	sl, sl, #1
 801433c:	e23f      	b.n	80147be <_dtoa_r+0x95e>
 801433e:	07f2      	lsls	r2, r6, #31
 8014340:	d505      	bpl.n	801434e <_dtoa_r+0x4ee>
 8014342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014346:	f7ec f967 	bl	8000618 <__aeabi_dmul>
 801434a:	3501      	adds	r5, #1
 801434c:	2301      	movs	r3, #1
 801434e:	1076      	asrs	r6, r6, #1
 8014350:	3708      	adds	r7, #8
 8014352:	e76c      	b.n	801422e <_dtoa_r+0x3ce>
 8014354:	2502      	movs	r5, #2
 8014356:	e76f      	b.n	8014238 <_dtoa_r+0x3d8>
 8014358:	9b01      	ldr	r3, [sp, #4]
 801435a:	f8cd a01c 	str.w	sl, [sp, #28]
 801435e:	930c      	str	r3, [sp, #48]	; 0x30
 8014360:	e78d      	b.n	801427e <_dtoa_r+0x41e>
 8014362:	9900      	ldr	r1, [sp, #0]
 8014364:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014368:	4b4e      	ldr	r3, [pc, #312]	; (80144a4 <_dtoa_r+0x644>)
 801436a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801436e:	4401      	add	r1, r0
 8014370:	9102      	str	r1, [sp, #8]
 8014372:	9908      	ldr	r1, [sp, #32]
 8014374:	eeb0 8a47 	vmov.f32	s16, s14
 8014378:	eef0 8a67 	vmov.f32	s17, s15
 801437c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014380:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014384:	2900      	cmp	r1, #0
 8014386:	d045      	beq.n	8014414 <_dtoa_r+0x5b4>
 8014388:	494c      	ldr	r1, [pc, #304]	; (80144bc <_dtoa_r+0x65c>)
 801438a:	2000      	movs	r0, #0
 801438c:	f7ec fa6e 	bl	800086c <__aeabi_ddiv>
 8014390:	ec53 2b18 	vmov	r2, r3, d8
 8014394:	f7eb ff88 	bl	80002a8 <__aeabi_dsub>
 8014398:	9d00      	ldr	r5, [sp, #0]
 801439a:	ec41 0b18 	vmov	d8, r0, r1
 801439e:	4639      	mov	r1, r7
 80143a0:	4630      	mov	r0, r6
 80143a2:	f7ec fbe9 	bl	8000b78 <__aeabi_d2iz>
 80143a6:	900c      	str	r0, [sp, #48]	; 0x30
 80143a8:	f7ec f8cc 	bl	8000544 <__aeabi_i2d>
 80143ac:	4602      	mov	r2, r0
 80143ae:	460b      	mov	r3, r1
 80143b0:	4630      	mov	r0, r6
 80143b2:	4639      	mov	r1, r7
 80143b4:	f7eb ff78 	bl	80002a8 <__aeabi_dsub>
 80143b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143ba:	3330      	adds	r3, #48	; 0x30
 80143bc:	f805 3b01 	strb.w	r3, [r5], #1
 80143c0:	ec53 2b18 	vmov	r2, r3, d8
 80143c4:	4606      	mov	r6, r0
 80143c6:	460f      	mov	r7, r1
 80143c8:	f7ec fb98 	bl	8000afc <__aeabi_dcmplt>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d165      	bne.n	801449c <_dtoa_r+0x63c>
 80143d0:	4632      	mov	r2, r6
 80143d2:	463b      	mov	r3, r7
 80143d4:	4935      	ldr	r1, [pc, #212]	; (80144ac <_dtoa_r+0x64c>)
 80143d6:	2000      	movs	r0, #0
 80143d8:	f7eb ff66 	bl	80002a8 <__aeabi_dsub>
 80143dc:	ec53 2b18 	vmov	r2, r3, d8
 80143e0:	f7ec fb8c 	bl	8000afc <__aeabi_dcmplt>
 80143e4:	2800      	cmp	r0, #0
 80143e6:	f040 80b9 	bne.w	801455c <_dtoa_r+0x6fc>
 80143ea:	9b02      	ldr	r3, [sp, #8]
 80143ec:	429d      	cmp	r5, r3
 80143ee:	f43f af75 	beq.w	80142dc <_dtoa_r+0x47c>
 80143f2:	4b2f      	ldr	r3, [pc, #188]	; (80144b0 <_dtoa_r+0x650>)
 80143f4:	ec51 0b18 	vmov	r0, r1, d8
 80143f8:	2200      	movs	r2, #0
 80143fa:	f7ec f90d 	bl	8000618 <__aeabi_dmul>
 80143fe:	4b2c      	ldr	r3, [pc, #176]	; (80144b0 <_dtoa_r+0x650>)
 8014400:	ec41 0b18 	vmov	d8, r0, r1
 8014404:	2200      	movs	r2, #0
 8014406:	4630      	mov	r0, r6
 8014408:	4639      	mov	r1, r7
 801440a:	f7ec f905 	bl	8000618 <__aeabi_dmul>
 801440e:	4606      	mov	r6, r0
 8014410:	460f      	mov	r7, r1
 8014412:	e7c4      	b.n	801439e <_dtoa_r+0x53e>
 8014414:	ec51 0b17 	vmov	r0, r1, d7
 8014418:	f7ec f8fe 	bl	8000618 <__aeabi_dmul>
 801441c:	9b02      	ldr	r3, [sp, #8]
 801441e:	9d00      	ldr	r5, [sp, #0]
 8014420:	930c      	str	r3, [sp, #48]	; 0x30
 8014422:	ec41 0b18 	vmov	d8, r0, r1
 8014426:	4639      	mov	r1, r7
 8014428:	4630      	mov	r0, r6
 801442a:	f7ec fba5 	bl	8000b78 <__aeabi_d2iz>
 801442e:	9011      	str	r0, [sp, #68]	; 0x44
 8014430:	f7ec f888 	bl	8000544 <__aeabi_i2d>
 8014434:	4602      	mov	r2, r0
 8014436:	460b      	mov	r3, r1
 8014438:	4630      	mov	r0, r6
 801443a:	4639      	mov	r1, r7
 801443c:	f7eb ff34 	bl	80002a8 <__aeabi_dsub>
 8014440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014442:	3330      	adds	r3, #48	; 0x30
 8014444:	f805 3b01 	strb.w	r3, [r5], #1
 8014448:	9b02      	ldr	r3, [sp, #8]
 801444a:	429d      	cmp	r5, r3
 801444c:	4606      	mov	r6, r0
 801444e:	460f      	mov	r7, r1
 8014450:	f04f 0200 	mov.w	r2, #0
 8014454:	d134      	bne.n	80144c0 <_dtoa_r+0x660>
 8014456:	4b19      	ldr	r3, [pc, #100]	; (80144bc <_dtoa_r+0x65c>)
 8014458:	ec51 0b18 	vmov	r0, r1, d8
 801445c:	f7eb ff26 	bl	80002ac <__adddf3>
 8014460:	4602      	mov	r2, r0
 8014462:	460b      	mov	r3, r1
 8014464:	4630      	mov	r0, r6
 8014466:	4639      	mov	r1, r7
 8014468:	f7ec fb66 	bl	8000b38 <__aeabi_dcmpgt>
 801446c:	2800      	cmp	r0, #0
 801446e:	d175      	bne.n	801455c <_dtoa_r+0x6fc>
 8014470:	ec53 2b18 	vmov	r2, r3, d8
 8014474:	4911      	ldr	r1, [pc, #68]	; (80144bc <_dtoa_r+0x65c>)
 8014476:	2000      	movs	r0, #0
 8014478:	f7eb ff16 	bl	80002a8 <__aeabi_dsub>
 801447c:	4602      	mov	r2, r0
 801447e:	460b      	mov	r3, r1
 8014480:	4630      	mov	r0, r6
 8014482:	4639      	mov	r1, r7
 8014484:	f7ec fb3a 	bl	8000afc <__aeabi_dcmplt>
 8014488:	2800      	cmp	r0, #0
 801448a:	f43f af27 	beq.w	80142dc <_dtoa_r+0x47c>
 801448e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014490:	1e6b      	subs	r3, r5, #1
 8014492:	930c      	str	r3, [sp, #48]	; 0x30
 8014494:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014498:	2b30      	cmp	r3, #48	; 0x30
 801449a:	d0f8      	beq.n	801448e <_dtoa_r+0x62e>
 801449c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80144a0:	e04a      	b.n	8014538 <_dtoa_r+0x6d8>
 80144a2:	bf00      	nop
 80144a4:	08019fd8 	.word	0x08019fd8
 80144a8:	08019fb0 	.word	0x08019fb0
 80144ac:	3ff00000 	.word	0x3ff00000
 80144b0:	40240000 	.word	0x40240000
 80144b4:	401c0000 	.word	0x401c0000
 80144b8:	40140000 	.word	0x40140000
 80144bc:	3fe00000 	.word	0x3fe00000
 80144c0:	4baf      	ldr	r3, [pc, #700]	; (8014780 <_dtoa_r+0x920>)
 80144c2:	f7ec f8a9 	bl	8000618 <__aeabi_dmul>
 80144c6:	4606      	mov	r6, r0
 80144c8:	460f      	mov	r7, r1
 80144ca:	e7ac      	b.n	8014426 <_dtoa_r+0x5c6>
 80144cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80144d0:	9d00      	ldr	r5, [sp, #0]
 80144d2:	4642      	mov	r2, r8
 80144d4:	464b      	mov	r3, r9
 80144d6:	4630      	mov	r0, r6
 80144d8:	4639      	mov	r1, r7
 80144da:	f7ec f9c7 	bl	800086c <__aeabi_ddiv>
 80144de:	f7ec fb4b 	bl	8000b78 <__aeabi_d2iz>
 80144e2:	9002      	str	r0, [sp, #8]
 80144e4:	f7ec f82e 	bl	8000544 <__aeabi_i2d>
 80144e8:	4642      	mov	r2, r8
 80144ea:	464b      	mov	r3, r9
 80144ec:	f7ec f894 	bl	8000618 <__aeabi_dmul>
 80144f0:	4602      	mov	r2, r0
 80144f2:	460b      	mov	r3, r1
 80144f4:	4630      	mov	r0, r6
 80144f6:	4639      	mov	r1, r7
 80144f8:	f7eb fed6 	bl	80002a8 <__aeabi_dsub>
 80144fc:	9e02      	ldr	r6, [sp, #8]
 80144fe:	9f01      	ldr	r7, [sp, #4]
 8014500:	3630      	adds	r6, #48	; 0x30
 8014502:	f805 6b01 	strb.w	r6, [r5], #1
 8014506:	9e00      	ldr	r6, [sp, #0]
 8014508:	1bae      	subs	r6, r5, r6
 801450a:	42b7      	cmp	r7, r6
 801450c:	4602      	mov	r2, r0
 801450e:	460b      	mov	r3, r1
 8014510:	d137      	bne.n	8014582 <_dtoa_r+0x722>
 8014512:	f7eb fecb 	bl	80002ac <__adddf3>
 8014516:	4642      	mov	r2, r8
 8014518:	464b      	mov	r3, r9
 801451a:	4606      	mov	r6, r0
 801451c:	460f      	mov	r7, r1
 801451e:	f7ec fb0b 	bl	8000b38 <__aeabi_dcmpgt>
 8014522:	b9c8      	cbnz	r0, 8014558 <_dtoa_r+0x6f8>
 8014524:	4642      	mov	r2, r8
 8014526:	464b      	mov	r3, r9
 8014528:	4630      	mov	r0, r6
 801452a:	4639      	mov	r1, r7
 801452c:	f7ec fadc 	bl	8000ae8 <__aeabi_dcmpeq>
 8014530:	b110      	cbz	r0, 8014538 <_dtoa_r+0x6d8>
 8014532:	9b02      	ldr	r3, [sp, #8]
 8014534:	07d9      	lsls	r1, r3, #31
 8014536:	d40f      	bmi.n	8014558 <_dtoa_r+0x6f8>
 8014538:	4620      	mov	r0, r4
 801453a:	4659      	mov	r1, fp
 801453c:	f000 fbde 	bl	8014cfc <_Bfree>
 8014540:	2300      	movs	r3, #0
 8014542:	702b      	strb	r3, [r5, #0]
 8014544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014546:	f10a 0001 	add.w	r0, sl, #1
 801454a:	6018      	str	r0, [r3, #0]
 801454c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801454e:	2b00      	cmp	r3, #0
 8014550:	f43f acd8 	beq.w	8013f04 <_dtoa_r+0xa4>
 8014554:	601d      	str	r5, [r3, #0]
 8014556:	e4d5      	b.n	8013f04 <_dtoa_r+0xa4>
 8014558:	f8cd a01c 	str.w	sl, [sp, #28]
 801455c:	462b      	mov	r3, r5
 801455e:	461d      	mov	r5, r3
 8014560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014564:	2a39      	cmp	r2, #57	; 0x39
 8014566:	d108      	bne.n	801457a <_dtoa_r+0x71a>
 8014568:	9a00      	ldr	r2, [sp, #0]
 801456a:	429a      	cmp	r2, r3
 801456c:	d1f7      	bne.n	801455e <_dtoa_r+0x6fe>
 801456e:	9a07      	ldr	r2, [sp, #28]
 8014570:	9900      	ldr	r1, [sp, #0]
 8014572:	3201      	adds	r2, #1
 8014574:	9207      	str	r2, [sp, #28]
 8014576:	2230      	movs	r2, #48	; 0x30
 8014578:	700a      	strb	r2, [r1, #0]
 801457a:	781a      	ldrb	r2, [r3, #0]
 801457c:	3201      	adds	r2, #1
 801457e:	701a      	strb	r2, [r3, #0]
 8014580:	e78c      	b.n	801449c <_dtoa_r+0x63c>
 8014582:	4b7f      	ldr	r3, [pc, #508]	; (8014780 <_dtoa_r+0x920>)
 8014584:	2200      	movs	r2, #0
 8014586:	f7ec f847 	bl	8000618 <__aeabi_dmul>
 801458a:	2200      	movs	r2, #0
 801458c:	2300      	movs	r3, #0
 801458e:	4606      	mov	r6, r0
 8014590:	460f      	mov	r7, r1
 8014592:	f7ec faa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8014596:	2800      	cmp	r0, #0
 8014598:	d09b      	beq.n	80144d2 <_dtoa_r+0x672>
 801459a:	e7cd      	b.n	8014538 <_dtoa_r+0x6d8>
 801459c:	9a08      	ldr	r2, [sp, #32]
 801459e:	2a00      	cmp	r2, #0
 80145a0:	f000 80c4 	beq.w	801472c <_dtoa_r+0x8cc>
 80145a4:	9a05      	ldr	r2, [sp, #20]
 80145a6:	2a01      	cmp	r2, #1
 80145a8:	f300 80a8 	bgt.w	80146fc <_dtoa_r+0x89c>
 80145ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80145ae:	2a00      	cmp	r2, #0
 80145b0:	f000 80a0 	beq.w	80146f4 <_dtoa_r+0x894>
 80145b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80145b8:	9e06      	ldr	r6, [sp, #24]
 80145ba:	4645      	mov	r5, r8
 80145bc:	9a04      	ldr	r2, [sp, #16]
 80145be:	2101      	movs	r1, #1
 80145c0:	441a      	add	r2, r3
 80145c2:	4620      	mov	r0, r4
 80145c4:	4498      	add	r8, r3
 80145c6:	9204      	str	r2, [sp, #16]
 80145c8:	f000 fc54 	bl	8014e74 <__i2b>
 80145cc:	4607      	mov	r7, r0
 80145ce:	2d00      	cmp	r5, #0
 80145d0:	dd0b      	ble.n	80145ea <_dtoa_r+0x78a>
 80145d2:	9b04      	ldr	r3, [sp, #16]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	dd08      	ble.n	80145ea <_dtoa_r+0x78a>
 80145d8:	42ab      	cmp	r3, r5
 80145da:	9a04      	ldr	r2, [sp, #16]
 80145dc:	bfa8      	it	ge
 80145de:	462b      	movge	r3, r5
 80145e0:	eba8 0803 	sub.w	r8, r8, r3
 80145e4:	1aed      	subs	r5, r5, r3
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	9304      	str	r3, [sp, #16]
 80145ea:	9b06      	ldr	r3, [sp, #24]
 80145ec:	b1fb      	cbz	r3, 801462e <_dtoa_r+0x7ce>
 80145ee:	9b08      	ldr	r3, [sp, #32]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f000 809f 	beq.w	8014734 <_dtoa_r+0x8d4>
 80145f6:	2e00      	cmp	r6, #0
 80145f8:	dd11      	ble.n	801461e <_dtoa_r+0x7be>
 80145fa:	4639      	mov	r1, r7
 80145fc:	4632      	mov	r2, r6
 80145fe:	4620      	mov	r0, r4
 8014600:	f000 fcf4 	bl	8014fec <__pow5mult>
 8014604:	465a      	mov	r2, fp
 8014606:	4601      	mov	r1, r0
 8014608:	4607      	mov	r7, r0
 801460a:	4620      	mov	r0, r4
 801460c:	f000 fc48 	bl	8014ea0 <__multiply>
 8014610:	4659      	mov	r1, fp
 8014612:	9007      	str	r0, [sp, #28]
 8014614:	4620      	mov	r0, r4
 8014616:	f000 fb71 	bl	8014cfc <_Bfree>
 801461a:	9b07      	ldr	r3, [sp, #28]
 801461c:	469b      	mov	fp, r3
 801461e:	9b06      	ldr	r3, [sp, #24]
 8014620:	1b9a      	subs	r2, r3, r6
 8014622:	d004      	beq.n	801462e <_dtoa_r+0x7ce>
 8014624:	4659      	mov	r1, fp
 8014626:	4620      	mov	r0, r4
 8014628:	f000 fce0 	bl	8014fec <__pow5mult>
 801462c:	4683      	mov	fp, r0
 801462e:	2101      	movs	r1, #1
 8014630:	4620      	mov	r0, r4
 8014632:	f000 fc1f 	bl	8014e74 <__i2b>
 8014636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014638:	2b00      	cmp	r3, #0
 801463a:	4606      	mov	r6, r0
 801463c:	dd7c      	ble.n	8014738 <_dtoa_r+0x8d8>
 801463e:	461a      	mov	r2, r3
 8014640:	4601      	mov	r1, r0
 8014642:	4620      	mov	r0, r4
 8014644:	f000 fcd2 	bl	8014fec <__pow5mult>
 8014648:	9b05      	ldr	r3, [sp, #20]
 801464a:	2b01      	cmp	r3, #1
 801464c:	4606      	mov	r6, r0
 801464e:	dd76      	ble.n	801473e <_dtoa_r+0x8de>
 8014650:	2300      	movs	r3, #0
 8014652:	9306      	str	r3, [sp, #24]
 8014654:	6933      	ldr	r3, [r6, #16]
 8014656:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801465a:	6918      	ldr	r0, [r3, #16]
 801465c:	f000 fbba 	bl	8014dd4 <__hi0bits>
 8014660:	f1c0 0020 	rsb	r0, r0, #32
 8014664:	9b04      	ldr	r3, [sp, #16]
 8014666:	4418      	add	r0, r3
 8014668:	f010 001f 	ands.w	r0, r0, #31
 801466c:	f000 8086 	beq.w	801477c <_dtoa_r+0x91c>
 8014670:	f1c0 0320 	rsb	r3, r0, #32
 8014674:	2b04      	cmp	r3, #4
 8014676:	dd7f      	ble.n	8014778 <_dtoa_r+0x918>
 8014678:	f1c0 001c 	rsb	r0, r0, #28
 801467c:	9b04      	ldr	r3, [sp, #16]
 801467e:	4403      	add	r3, r0
 8014680:	4480      	add	r8, r0
 8014682:	4405      	add	r5, r0
 8014684:	9304      	str	r3, [sp, #16]
 8014686:	f1b8 0f00 	cmp.w	r8, #0
 801468a:	dd05      	ble.n	8014698 <_dtoa_r+0x838>
 801468c:	4659      	mov	r1, fp
 801468e:	4642      	mov	r2, r8
 8014690:	4620      	mov	r0, r4
 8014692:	f000 fd05 	bl	80150a0 <__lshift>
 8014696:	4683      	mov	fp, r0
 8014698:	9b04      	ldr	r3, [sp, #16]
 801469a:	2b00      	cmp	r3, #0
 801469c:	dd05      	ble.n	80146aa <_dtoa_r+0x84a>
 801469e:	4631      	mov	r1, r6
 80146a0:	461a      	mov	r2, r3
 80146a2:	4620      	mov	r0, r4
 80146a4:	f000 fcfc 	bl	80150a0 <__lshift>
 80146a8:	4606      	mov	r6, r0
 80146aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d069      	beq.n	8014784 <_dtoa_r+0x924>
 80146b0:	4631      	mov	r1, r6
 80146b2:	4658      	mov	r0, fp
 80146b4:	f000 fd60 	bl	8015178 <__mcmp>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	da63      	bge.n	8014784 <_dtoa_r+0x924>
 80146bc:	2300      	movs	r3, #0
 80146be:	4659      	mov	r1, fp
 80146c0:	220a      	movs	r2, #10
 80146c2:	4620      	mov	r0, r4
 80146c4:	f000 fb3c 	bl	8014d40 <__multadd>
 80146c8:	9b08      	ldr	r3, [sp, #32]
 80146ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146ce:	4683      	mov	fp, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	f000 818f 	beq.w	80149f4 <_dtoa_r+0xb94>
 80146d6:	4639      	mov	r1, r7
 80146d8:	2300      	movs	r3, #0
 80146da:	220a      	movs	r2, #10
 80146dc:	4620      	mov	r0, r4
 80146de:	f000 fb2f 	bl	8014d40 <__multadd>
 80146e2:	f1b9 0f00 	cmp.w	r9, #0
 80146e6:	4607      	mov	r7, r0
 80146e8:	f300 808e 	bgt.w	8014808 <_dtoa_r+0x9a8>
 80146ec:	9b05      	ldr	r3, [sp, #20]
 80146ee:	2b02      	cmp	r3, #2
 80146f0:	dc50      	bgt.n	8014794 <_dtoa_r+0x934>
 80146f2:	e089      	b.n	8014808 <_dtoa_r+0x9a8>
 80146f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80146f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80146fa:	e75d      	b.n	80145b8 <_dtoa_r+0x758>
 80146fc:	9b01      	ldr	r3, [sp, #4]
 80146fe:	1e5e      	subs	r6, r3, #1
 8014700:	9b06      	ldr	r3, [sp, #24]
 8014702:	42b3      	cmp	r3, r6
 8014704:	bfbf      	itttt	lt
 8014706:	9b06      	ldrlt	r3, [sp, #24]
 8014708:	9606      	strlt	r6, [sp, #24]
 801470a:	1af2      	sublt	r2, r6, r3
 801470c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801470e:	bfb6      	itet	lt
 8014710:	189b      	addlt	r3, r3, r2
 8014712:	1b9e      	subge	r6, r3, r6
 8014714:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014716:	9b01      	ldr	r3, [sp, #4]
 8014718:	bfb8      	it	lt
 801471a:	2600      	movlt	r6, #0
 801471c:	2b00      	cmp	r3, #0
 801471e:	bfb5      	itete	lt
 8014720:	eba8 0503 	sublt.w	r5, r8, r3
 8014724:	9b01      	ldrge	r3, [sp, #4]
 8014726:	2300      	movlt	r3, #0
 8014728:	4645      	movge	r5, r8
 801472a:	e747      	b.n	80145bc <_dtoa_r+0x75c>
 801472c:	9e06      	ldr	r6, [sp, #24]
 801472e:	9f08      	ldr	r7, [sp, #32]
 8014730:	4645      	mov	r5, r8
 8014732:	e74c      	b.n	80145ce <_dtoa_r+0x76e>
 8014734:	9a06      	ldr	r2, [sp, #24]
 8014736:	e775      	b.n	8014624 <_dtoa_r+0x7c4>
 8014738:	9b05      	ldr	r3, [sp, #20]
 801473a:	2b01      	cmp	r3, #1
 801473c:	dc18      	bgt.n	8014770 <_dtoa_r+0x910>
 801473e:	9b02      	ldr	r3, [sp, #8]
 8014740:	b9b3      	cbnz	r3, 8014770 <_dtoa_r+0x910>
 8014742:	9b03      	ldr	r3, [sp, #12]
 8014744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014748:	b9a3      	cbnz	r3, 8014774 <_dtoa_r+0x914>
 801474a:	9b03      	ldr	r3, [sp, #12]
 801474c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014750:	0d1b      	lsrs	r3, r3, #20
 8014752:	051b      	lsls	r3, r3, #20
 8014754:	b12b      	cbz	r3, 8014762 <_dtoa_r+0x902>
 8014756:	9b04      	ldr	r3, [sp, #16]
 8014758:	3301      	adds	r3, #1
 801475a:	9304      	str	r3, [sp, #16]
 801475c:	f108 0801 	add.w	r8, r8, #1
 8014760:	2301      	movs	r3, #1
 8014762:	9306      	str	r3, [sp, #24]
 8014764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014766:	2b00      	cmp	r3, #0
 8014768:	f47f af74 	bne.w	8014654 <_dtoa_r+0x7f4>
 801476c:	2001      	movs	r0, #1
 801476e:	e779      	b.n	8014664 <_dtoa_r+0x804>
 8014770:	2300      	movs	r3, #0
 8014772:	e7f6      	b.n	8014762 <_dtoa_r+0x902>
 8014774:	9b02      	ldr	r3, [sp, #8]
 8014776:	e7f4      	b.n	8014762 <_dtoa_r+0x902>
 8014778:	d085      	beq.n	8014686 <_dtoa_r+0x826>
 801477a:	4618      	mov	r0, r3
 801477c:	301c      	adds	r0, #28
 801477e:	e77d      	b.n	801467c <_dtoa_r+0x81c>
 8014780:	40240000 	.word	0x40240000
 8014784:	9b01      	ldr	r3, [sp, #4]
 8014786:	2b00      	cmp	r3, #0
 8014788:	dc38      	bgt.n	80147fc <_dtoa_r+0x99c>
 801478a:	9b05      	ldr	r3, [sp, #20]
 801478c:	2b02      	cmp	r3, #2
 801478e:	dd35      	ble.n	80147fc <_dtoa_r+0x99c>
 8014790:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014794:	f1b9 0f00 	cmp.w	r9, #0
 8014798:	d10d      	bne.n	80147b6 <_dtoa_r+0x956>
 801479a:	4631      	mov	r1, r6
 801479c:	464b      	mov	r3, r9
 801479e:	2205      	movs	r2, #5
 80147a0:	4620      	mov	r0, r4
 80147a2:	f000 facd 	bl	8014d40 <__multadd>
 80147a6:	4601      	mov	r1, r0
 80147a8:	4606      	mov	r6, r0
 80147aa:	4658      	mov	r0, fp
 80147ac:	f000 fce4 	bl	8015178 <__mcmp>
 80147b0:	2800      	cmp	r0, #0
 80147b2:	f73f adbd 	bgt.w	8014330 <_dtoa_r+0x4d0>
 80147b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147b8:	9d00      	ldr	r5, [sp, #0]
 80147ba:	ea6f 0a03 	mvn.w	sl, r3
 80147be:	f04f 0800 	mov.w	r8, #0
 80147c2:	4631      	mov	r1, r6
 80147c4:	4620      	mov	r0, r4
 80147c6:	f000 fa99 	bl	8014cfc <_Bfree>
 80147ca:	2f00      	cmp	r7, #0
 80147cc:	f43f aeb4 	beq.w	8014538 <_dtoa_r+0x6d8>
 80147d0:	f1b8 0f00 	cmp.w	r8, #0
 80147d4:	d005      	beq.n	80147e2 <_dtoa_r+0x982>
 80147d6:	45b8      	cmp	r8, r7
 80147d8:	d003      	beq.n	80147e2 <_dtoa_r+0x982>
 80147da:	4641      	mov	r1, r8
 80147dc:	4620      	mov	r0, r4
 80147de:	f000 fa8d 	bl	8014cfc <_Bfree>
 80147e2:	4639      	mov	r1, r7
 80147e4:	4620      	mov	r0, r4
 80147e6:	f000 fa89 	bl	8014cfc <_Bfree>
 80147ea:	e6a5      	b.n	8014538 <_dtoa_r+0x6d8>
 80147ec:	2600      	movs	r6, #0
 80147ee:	4637      	mov	r7, r6
 80147f0:	e7e1      	b.n	80147b6 <_dtoa_r+0x956>
 80147f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80147f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80147f8:	4637      	mov	r7, r6
 80147fa:	e599      	b.n	8014330 <_dtoa_r+0x4d0>
 80147fc:	9b08      	ldr	r3, [sp, #32]
 80147fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 80fd 	beq.w	8014a02 <_dtoa_r+0xba2>
 8014808:	2d00      	cmp	r5, #0
 801480a:	dd05      	ble.n	8014818 <_dtoa_r+0x9b8>
 801480c:	4639      	mov	r1, r7
 801480e:	462a      	mov	r2, r5
 8014810:	4620      	mov	r0, r4
 8014812:	f000 fc45 	bl	80150a0 <__lshift>
 8014816:	4607      	mov	r7, r0
 8014818:	9b06      	ldr	r3, [sp, #24]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d05c      	beq.n	80148d8 <_dtoa_r+0xa78>
 801481e:	6879      	ldr	r1, [r7, #4]
 8014820:	4620      	mov	r0, r4
 8014822:	f000 fa2b 	bl	8014c7c <_Balloc>
 8014826:	4605      	mov	r5, r0
 8014828:	b928      	cbnz	r0, 8014836 <_dtoa_r+0x9d6>
 801482a:	4b80      	ldr	r3, [pc, #512]	; (8014a2c <_dtoa_r+0xbcc>)
 801482c:	4602      	mov	r2, r0
 801482e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014832:	f7ff bb2e 	b.w	8013e92 <_dtoa_r+0x32>
 8014836:	693a      	ldr	r2, [r7, #16]
 8014838:	3202      	adds	r2, #2
 801483a:	0092      	lsls	r2, r2, #2
 801483c:	f107 010c 	add.w	r1, r7, #12
 8014840:	300c      	adds	r0, #12
 8014842:	f7fe fbed 	bl	8013020 <memcpy>
 8014846:	2201      	movs	r2, #1
 8014848:	4629      	mov	r1, r5
 801484a:	4620      	mov	r0, r4
 801484c:	f000 fc28 	bl	80150a0 <__lshift>
 8014850:	9b00      	ldr	r3, [sp, #0]
 8014852:	3301      	adds	r3, #1
 8014854:	9301      	str	r3, [sp, #4]
 8014856:	9b00      	ldr	r3, [sp, #0]
 8014858:	444b      	add	r3, r9
 801485a:	9307      	str	r3, [sp, #28]
 801485c:	9b02      	ldr	r3, [sp, #8]
 801485e:	f003 0301 	and.w	r3, r3, #1
 8014862:	46b8      	mov	r8, r7
 8014864:	9306      	str	r3, [sp, #24]
 8014866:	4607      	mov	r7, r0
 8014868:	9b01      	ldr	r3, [sp, #4]
 801486a:	4631      	mov	r1, r6
 801486c:	3b01      	subs	r3, #1
 801486e:	4658      	mov	r0, fp
 8014870:	9302      	str	r3, [sp, #8]
 8014872:	f7ff fa69 	bl	8013d48 <quorem>
 8014876:	4603      	mov	r3, r0
 8014878:	3330      	adds	r3, #48	; 0x30
 801487a:	9004      	str	r0, [sp, #16]
 801487c:	4641      	mov	r1, r8
 801487e:	4658      	mov	r0, fp
 8014880:	9308      	str	r3, [sp, #32]
 8014882:	f000 fc79 	bl	8015178 <__mcmp>
 8014886:	463a      	mov	r2, r7
 8014888:	4681      	mov	r9, r0
 801488a:	4631      	mov	r1, r6
 801488c:	4620      	mov	r0, r4
 801488e:	f000 fc8f 	bl	80151b0 <__mdiff>
 8014892:	68c2      	ldr	r2, [r0, #12]
 8014894:	9b08      	ldr	r3, [sp, #32]
 8014896:	4605      	mov	r5, r0
 8014898:	bb02      	cbnz	r2, 80148dc <_dtoa_r+0xa7c>
 801489a:	4601      	mov	r1, r0
 801489c:	4658      	mov	r0, fp
 801489e:	f000 fc6b 	bl	8015178 <__mcmp>
 80148a2:	9b08      	ldr	r3, [sp, #32]
 80148a4:	4602      	mov	r2, r0
 80148a6:	4629      	mov	r1, r5
 80148a8:	4620      	mov	r0, r4
 80148aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80148ae:	f000 fa25 	bl	8014cfc <_Bfree>
 80148b2:	9b05      	ldr	r3, [sp, #20]
 80148b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148b6:	9d01      	ldr	r5, [sp, #4]
 80148b8:	ea43 0102 	orr.w	r1, r3, r2
 80148bc:	9b06      	ldr	r3, [sp, #24]
 80148be:	430b      	orrs	r3, r1
 80148c0:	9b08      	ldr	r3, [sp, #32]
 80148c2:	d10d      	bne.n	80148e0 <_dtoa_r+0xa80>
 80148c4:	2b39      	cmp	r3, #57	; 0x39
 80148c6:	d029      	beq.n	801491c <_dtoa_r+0xabc>
 80148c8:	f1b9 0f00 	cmp.w	r9, #0
 80148cc:	dd01      	ble.n	80148d2 <_dtoa_r+0xa72>
 80148ce:	9b04      	ldr	r3, [sp, #16]
 80148d0:	3331      	adds	r3, #49	; 0x31
 80148d2:	9a02      	ldr	r2, [sp, #8]
 80148d4:	7013      	strb	r3, [r2, #0]
 80148d6:	e774      	b.n	80147c2 <_dtoa_r+0x962>
 80148d8:	4638      	mov	r0, r7
 80148da:	e7b9      	b.n	8014850 <_dtoa_r+0x9f0>
 80148dc:	2201      	movs	r2, #1
 80148de:	e7e2      	b.n	80148a6 <_dtoa_r+0xa46>
 80148e0:	f1b9 0f00 	cmp.w	r9, #0
 80148e4:	db06      	blt.n	80148f4 <_dtoa_r+0xa94>
 80148e6:	9905      	ldr	r1, [sp, #20]
 80148e8:	ea41 0909 	orr.w	r9, r1, r9
 80148ec:	9906      	ldr	r1, [sp, #24]
 80148ee:	ea59 0101 	orrs.w	r1, r9, r1
 80148f2:	d120      	bne.n	8014936 <_dtoa_r+0xad6>
 80148f4:	2a00      	cmp	r2, #0
 80148f6:	ddec      	ble.n	80148d2 <_dtoa_r+0xa72>
 80148f8:	4659      	mov	r1, fp
 80148fa:	2201      	movs	r2, #1
 80148fc:	4620      	mov	r0, r4
 80148fe:	9301      	str	r3, [sp, #4]
 8014900:	f000 fbce 	bl	80150a0 <__lshift>
 8014904:	4631      	mov	r1, r6
 8014906:	4683      	mov	fp, r0
 8014908:	f000 fc36 	bl	8015178 <__mcmp>
 801490c:	2800      	cmp	r0, #0
 801490e:	9b01      	ldr	r3, [sp, #4]
 8014910:	dc02      	bgt.n	8014918 <_dtoa_r+0xab8>
 8014912:	d1de      	bne.n	80148d2 <_dtoa_r+0xa72>
 8014914:	07da      	lsls	r2, r3, #31
 8014916:	d5dc      	bpl.n	80148d2 <_dtoa_r+0xa72>
 8014918:	2b39      	cmp	r3, #57	; 0x39
 801491a:	d1d8      	bne.n	80148ce <_dtoa_r+0xa6e>
 801491c:	9a02      	ldr	r2, [sp, #8]
 801491e:	2339      	movs	r3, #57	; 0x39
 8014920:	7013      	strb	r3, [r2, #0]
 8014922:	462b      	mov	r3, r5
 8014924:	461d      	mov	r5, r3
 8014926:	3b01      	subs	r3, #1
 8014928:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801492c:	2a39      	cmp	r2, #57	; 0x39
 801492e:	d050      	beq.n	80149d2 <_dtoa_r+0xb72>
 8014930:	3201      	adds	r2, #1
 8014932:	701a      	strb	r2, [r3, #0]
 8014934:	e745      	b.n	80147c2 <_dtoa_r+0x962>
 8014936:	2a00      	cmp	r2, #0
 8014938:	dd03      	ble.n	8014942 <_dtoa_r+0xae2>
 801493a:	2b39      	cmp	r3, #57	; 0x39
 801493c:	d0ee      	beq.n	801491c <_dtoa_r+0xabc>
 801493e:	3301      	adds	r3, #1
 8014940:	e7c7      	b.n	80148d2 <_dtoa_r+0xa72>
 8014942:	9a01      	ldr	r2, [sp, #4]
 8014944:	9907      	ldr	r1, [sp, #28]
 8014946:	f802 3c01 	strb.w	r3, [r2, #-1]
 801494a:	428a      	cmp	r2, r1
 801494c:	d02a      	beq.n	80149a4 <_dtoa_r+0xb44>
 801494e:	4659      	mov	r1, fp
 8014950:	2300      	movs	r3, #0
 8014952:	220a      	movs	r2, #10
 8014954:	4620      	mov	r0, r4
 8014956:	f000 f9f3 	bl	8014d40 <__multadd>
 801495a:	45b8      	cmp	r8, r7
 801495c:	4683      	mov	fp, r0
 801495e:	f04f 0300 	mov.w	r3, #0
 8014962:	f04f 020a 	mov.w	r2, #10
 8014966:	4641      	mov	r1, r8
 8014968:	4620      	mov	r0, r4
 801496a:	d107      	bne.n	801497c <_dtoa_r+0xb1c>
 801496c:	f000 f9e8 	bl	8014d40 <__multadd>
 8014970:	4680      	mov	r8, r0
 8014972:	4607      	mov	r7, r0
 8014974:	9b01      	ldr	r3, [sp, #4]
 8014976:	3301      	adds	r3, #1
 8014978:	9301      	str	r3, [sp, #4]
 801497a:	e775      	b.n	8014868 <_dtoa_r+0xa08>
 801497c:	f000 f9e0 	bl	8014d40 <__multadd>
 8014980:	4639      	mov	r1, r7
 8014982:	4680      	mov	r8, r0
 8014984:	2300      	movs	r3, #0
 8014986:	220a      	movs	r2, #10
 8014988:	4620      	mov	r0, r4
 801498a:	f000 f9d9 	bl	8014d40 <__multadd>
 801498e:	4607      	mov	r7, r0
 8014990:	e7f0      	b.n	8014974 <_dtoa_r+0xb14>
 8014992:	f1b9 0f00 	cmp.w	r9, #0
 8014996:	9a00      	ldr	r2, [sp, #0]
 8014998:	bfcc      	ite	gt
 801499a:	464d      	movgt	r5, r9
 801499c:	2501      	movle	r5, #1
 801499e:	4415      	add	r5, r2
 80149a0:	f04f 0800 	mov.w	r8, #0
 80149a4:	4659      	mov	r1, fp
 80149a6:	2201      	movs	r2, #1
 80149a8:	4620      	mov	r0, r4
 80149aa:	9301      	str	r3, [sp, #4]
 80149ac:	f000 fb78 	bl	80150a0 <__lshift>
 80149b0:	4631      	mov	r1, r6
 80149b2:	4683      	mov	fp, r0
 80149b4:	f000 fbe0 	bl	8015178 <__mcmp>
 80149b8:	2800      	cmp	r0, #0
 80149ba:	dcb2      	bgt.n	8014922 <_dtoa_r+0xac2>
 80149bc:	d102      	bne.n	80149c4 <_dtoa_r+0xb64>
 80149be:	9b01      	ldr	r3, [sp, #4]
 80149c0:	07db      	lsls	r3, r3, #31
 80149c2:	d4ae      	bmi.n	8014922 <_dtoa_r+0xac2>
 80149c4:	462b      	mov	r3, r5
 80149c6:	461d      	mov	r5, r3
 80149c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80149cc:	2a30      	cmp	r2, #48	; 0x30
 80149ce:	d0fa      	beq.n	80149c6 <_dtoa_r+0xb66>
 80149d0:	e6f7      	b.n	80147c2 <_dtoa_r+0x962>
 80149d2:	9a00      	ldr	r2, [sp, #0]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d1a5      	bne.n	8014924 <_dtoa_r+0xac4>
 80149d8:	f10a 0a01 	add.w	sl, sl, #1
 80149dc:	2331      	movs	r3, #49	; 0x31
 80149de:	e779      	b.n	80148d4 <_dtoa_r+0xa74>
 80149e0:	4b13      	ldr	r3, [pc, #76]	; (8014a30 <_dtoa_r+0xbd0>)
 80149e2:	f7ff baaf 	b.w	8013f44 <_dtoa_r+0xe4>
 80149e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	f47f aa86 	bne.w	8013efa <_dtoa_r+0x9a>
 80149ee:	4b11      	ldr	r3, [pc, #68]	; (8014a34 <_dtoa_r+0xbd4>)
 80149f0:	f7ff baa8 	b.w	8013f44 <_dtoa_r+0xe4>
 80149f4:	f1b9 0f00 	cmp.w	r9, #0
 80149f8:	dc03      	bgt.n	8014a02 <_dtoa_r+0xba2>
 80149fa:	9b05      	ldr	r3, [sp, #20]
 80149fc:	2b02      	cmp	r3, #2
 80149fe:	f73f aec9 	bgt.w	8014794 <_dtoa_r+0x934>
 8014a02:	9d00      	ldr	r5, [sp, #0]
 8014a04:	4631      	mov	r1, r6
 8014a06:	4658      	mov	r0, fp
 8014a08:	f7ff f99e 	bl	8013d48 <quorem>
 8014a0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014a10:	f805 3b01 	strb.w	r3, [r5], #1
 8014a14:	9a00      	ldr	r2, [sp, #0]
 8014a16:	1aaa      	subs	r2, r5, r2
 8014a18:	4591      	cmp	r9, r2
 8014a1a:	ddba      	ble.n	8014992 <_dtoa_r+0xb32>
 8014a1c:	4659      	mov	r1, fp
 8014a1e:	2300      	movs	r3, #0
 8014a20:	220a      	movs	r2, #10
 8014a22:	4620      	mov	r0, r4
 8014a24:	f000 f98c 	bl	8014d40 <__multadd>
 8014a28:	4683      	mov	fp, r0
 8014a2a:	e7eb      	b.n	8014a04 <_dtoa_r+0xba4>
 8014a2c:	08019ede 	.word	0x08019ede
 8014a30:	08019d9c 	.word	0x08019d9c
 8014a34:	08019e72 	.word	0x08019e72

08014a38 <__errno>:
 8014a38:	4b01      	ldr	r3, [pc, #4]	; (8014a40 <__errno+0x8>)
 8014a3a:	6818      	ldr	r0, [r3, #0]
 8014a3c:	4770      	bx	lr
 8014a3e:	bf00      	nop
 8014a40:	20000054 	.word	0x20000054

08014a44 <std>:
 8014a44:	2300      	movs	r3, #0
 8014a46:	b510      	push	{r4, lr}
 8014a48:	4604      	mov	r4, r0
 8014a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8014a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a52:	6083      	str	r3, [r0, #8]
 8014a54:	8181      	strh	r1, [r0, #12]
 8014a56:	6643      	str	r3, [r0, #100]	; 0x64
 8014a58:	81c2      	strh	r2, [r0, #14]
 8014a5a:	6183      	str	r3, [r0, #24]
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	2208      	movs	r2, #8
 8014a60:	305c      	adds	r0, #92	; 0x5c
 8014a62:	f7fe fb05 	bl	8013070 <memset>
 8014a66:	4b05      	ldr	r3, [pc, #20]	; (8014a7c <std+0x38>)
 8014a68:	6263      	str	r3, [r4, #36]	; 0x24
 8014a6a:	4b05      	ldr	r3, [pc, #20]	; (8014a80 <std+0x3c>)
 8014a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014a6e:	4b05      	ldr	r3, [pc, #20]	; (8014a84 <std+0x40>)
 8014a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a72:	4b05      	ldr	r3, [pc, #20]	; (8014a88 <std+0x44>)
 8014a74:	6224      	str	r4, [r4, #32]
 8014a76:	6323      	str	r3, [r4, #48]	; 0x30
 8014a78:	bd10      	pop	{r4, pc}
 8014a7a:	bf00      	nop
 8014a7c:	08015901 	.word	0x08015901
 8014a80:	08015923 	.word	0x08015923
 8014a84:	0801595b 	.word	0x0801595b
 8014a88:	0801597f 	.word	0x0801597f

08014a8c <_cleanup_r>:
 8014a8c:	4901      	ldr	r1, [pc, #4]	; (8014a94 <_cleanup_r+0x8>)
 8014a8e:	f000 b8c1 	b.w	8014c14 <_fwalk_reent>
 8014a92:	bf00      	nop
 8014a94:	08015c69 	.word	0x08015c69

08014a98 <__sfmoreglue>:
 8014a98:	b570      	push	{r4, r5, r6, lr}
 8014a9a:	1e4a      	subs	r2, r1, #1
 8014a9c:	2568      	movs	r5, #104	; 0x68
 8014a9e:	4355      	muls	r5, r2
 8014aa0:	460e      	mov	r6, r1
 8014aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014aa6:	f7fe fb3b 	bl	8013120 <_malloc_r>
 8014aaa:	4604      	mov	r4, r0
 8014aac:	b140      	cbz	r0, 8014ac0 <__sfmoreglue+0x28>
 8014aae:	2100      	movs	r1, #0
 8014ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8014ab4:	300c      	adds	r0, #12
 8014ab6:	60a0      	str	r0, [r4, #8]
 8014ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014abc:	f7fe fad8 	bl	8013070 <memset>
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}

08014ac4 <__sfp_lock_acquire>:
 8014ac4:	4801      	ldr	r0, [pc, #4]	; (8014acc <__sfp_lock_acquire+0x8>)
 8014ac6:	f000 b8ca 	b.w	8014c5e <__retarget_lock_acquire_recursive>
 8014aca:	bf00      	nop
 8014acc:	2000910c 	.word	0x2000910c

08014ad0 <__sfp_lock_release>:
 8014ad0:	4801      	ldr	r0, [pc, #4]	; (8014ad8 <__sfp_lock_release+0x8>)
 8014ad2:	f000 b8c5 	b.w	8014c60 <__retarget_lock_release_recursive>
 8014ad6:	bf00      	nop
 8014ad8:	2000910c 	.word	0x2000910c

08014adc <__sinit_lock_acquire>:
 8014adc:	4801      	ldr	r0, [pc, #4]	; (8014ae4 <__sinit_lock_acquire+0x8>)
 8014ade:	f000 b8be 	b.w	8014c5e <__retarget_lock_acquire_recursive>
 8014ae2:	bf00      	nop
 8014ae4:	20009107 	.word	0x20009107

08014ae8 <__sinit_lock_release>:
 8014ae8:	4801      	ldr	r0, [pc, #4]	; (8014af0 <__sinit_lock_release+0x8>)
 8014aea:	f000 b8b9 	b.w	8014c60 <__retarget_lock_release_recursive>
 8014aee:	bf00      	nop
 8014af0:	20009107 	.word	0x20009107

08014af4 <__sinit>:
 8014af4:	b510      	push	{r4, lr}
 8014af6:	4604      	mov	r4, r0
 8014af8:	f7ff fff0 	bl	8014adc <__sinit_lock_acquire>
 8014afc:	69a3      	ldr	r3, [r4, #24]
 8014afe:	b11b      	cbz	r3, 8014b08 <__sinit+0x14>
 8014b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b04:	f7ff bff0 	b.w	8014ae8 <__sinit_lock_release>
 8014b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8014b0e:	4b13      	ldr	r3, [pc, #76]	; (8014b5c <__sinit+0x68>)
 8014b10:	4a13      	ldr	r2, [pc, #76]	; (8014b60 <__sinit+0x6c>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8014b16:	42a3      	cmp	r3, r4
 8014b18:	bf04      	itt	eq
 8014b1a:	2301      	moveq	r3, #1
 8014b1c:	61a3      	streq	r3, [r4, #24]
 8014b1e:	4620      	mov	r0, r4
 8014b20:	f000 f820 	bl	8014b64 <__sfp>
 8014b24:	6060      	str	r0, [r4, #4]
 8014b26:	4620      	mov	r0, r4
 8014b28:	f000 f81c 	bl	8014b64 <__sfp>
 8014b2c:	60a0      	str	r0, [r4, #8]
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f000 f818 	bl	8014b64 <__sfp>
 8014b34:	2200      	movs	r2, #0
 8014b36:	60e0      	str	r0, [r4, #12]
 8014b38:	2104      	movs	r1, #4
 8014b3a:	6860      	ldr	r0, [r4, #4]
 8014b3c:	f7ff ff82 	bl	8014a44 <std>
 8014b40:	68a0      	ldr	r0, [r4, #8]
 8014b42:	2201      	movs	r2, #1
 8014b44:	2109      	movs	r1, #9
 8014b46:	f7ff ff7d 	bl	8014a44 <std>
 8014b4a:	68e0      	ldr	r0, [r4, #12]
 8014b4c:	2202      	movs	r2, #2
 8014b4e:	2112      	movs	r1, #18
 8014b50:	f7ff ff78 	bl	8014a44 <std>
 8014b54:	2301      	movs	r3, #1
 8014b56:	61a3      	str	r3, [r4, #24]
 8014b58:	e7d2      	b.n	8014b00 <__sinit+0xc>
 8014b5a:	bf00      	nop
 8014b5c:	08019d88 	.word	0x08019d88
 8014b60:	08014a8d 	.word	0x08014a8d

08014b64 <__sfp>:
 8014b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b66:	4607      	mov	r7, r0
 8014b68:	f7ff ffac 	bl	8014ac4 <__sfp_lock_acquire>
 8014b6c:	4b1e      	ldr	r3, [pc, #120]	; (8014be8 <__sfp+0x84>)
 8014b6e:	681e      	ldr	r6, [r3, #0]
 8014b70:	69b3      	ldr	r3, [r6, #24]
 8014b72:	b913      	cbnz	r3, 8014b7a <__sfp+0x16>
 8014b74:	4630      	mov	r0, r6
 8014b76:	f7ff ffbd 	bl	8014af4 <__sinit>
 8014b7a:	3648      	adds	r6, #72	; 0x48
 8014b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014b80:	3b01      	subs	r3, #1
 8014b82:	d503      	bpl.n	8014b8c <__sfp+0x28>
 8014b84:	6833      	ldr	r3, [r6, #0]
 8014b86:	b30b      	cbz	r3, 8014bcc <__sfp+0x68>
 8014b88:	6836      	ldr	r6, [r6, #0]
 8014b8a:	e7f7      	b.n	8014b7c <__sfp+0x18>
 8014b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014b90:	b9d5      	cbnz	r5, 8014bc8 <__sfp+0x64>
 8014b92:	4b16      	ldr	r3, [pc, #88]	; (8014bec <__sfp+0x88>)
 8014b94:	60e3      	str	r3, [r4, #12]
 8014b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8014b9c:	f000 f85e 	bl	8014c5c <__retarget_lock_init_recursive>
 8014ba0:	f7ff ff96 	bl	8014ad0 <__sfp_lock_release>
 8014ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014bac:	6025      	str	r5, [r4, #0]
 8014bae:	61a5      	str	r5, [r4, #24]
 8014bb0:	2208      	movs	r2, #8
 8014bb2:	4629      	mov	r1, r5
 8014bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014bb8:	f7fe fa5a 	bl	8013070 <memset>
 8014bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bc8:	3468      	adds	r4, #104	; 0x68
 8014bca:	e7d9      	b.n	8014b80 <__sfp+0x1c>
 8014bcc:	2104      	movs	r1, #4
 8014bce:	4638      	mov	r0, r7
 8014bd0:	f7ff ff62 	bl	8014a98 <__sfmoreglue>
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	6030      	str	r0, [r6, #0]
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	d1d5      	bne.n	8014b88 <__sfp+0x24>
 8014bdc:	f7ff ff78 	bl	8014ad0 <__sfp_lock_release>
 8014be0:	230c      	movs	r3, #12
 8014be2:	603b      	str	r3, [r7, #0]
 8014be4:	e7ee      	b.n	8014bc4 <__sfp+0x60>
 8014be6:	bf00      	nop
 8014be8:	08019d88 	.word	0x08019d88
 8014bec:	ffff0001 	.word	0xffff0001

08014bf0 <fiprintf>:
 8014bf0:	b40e      	push	{r1, r2, r3}
 8014bf2:	b503      	push	{r0, r1, lr}
 8014bf4:	4601      	mov	r1, r0
 8014bf6:	ab03      	add	r3, sp, #12
 8014bf8:	4805      	ldr	r0, [pc, #20]	; (8014c10 <fiprintf+0x20>)
 8014bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bfe:	6800      	ldr	r0, [r0, #0]
 8014c00:	9301      	str	r3, [sp, #4]
 8014c02:	f000 fd4d 	bl	80156a0 <_vfiprintf_r>
 8014c06:	b002      	add	sp, #8
 8014c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c0c:	b003      	add	sp, #12
 8014c0e:	4770      	bx	lr
 8014c10:	20000054 	.word	0x20000054

08014c14 <_fwalk_reent>:
 8014c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c18:	4606      	mov	r6, r0
 8014c1a:	4688      	mov	r8, r1
 8014c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c20:	2700      	movs	r7, #0
 8014c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014c26:	f1b9 0901 	subs.w	r9, r9, #1
 8014c2a:	d505      	bpl.n	8014c38 <_fwalk_reent+0x24>
 8014c2c:	6824      	ldr	r4, [r4, #0]
 8014c2e:	2c00      	cmp	r4, #0
 8014c30:	d1f7      	bne.n	8014c22 <_fwalk_reent+0xe>
 8014c32:	4638      	mov	r0, r7
 8014c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c38:	89ab      	ldrh	r3, [r5, #12]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	d907      	bls.n	8014c4e <_fwalk_reent+0x3a>
 8014c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c42:	3301      	adds	r3, #1
 8014c44:	d003      	beq.n	8014c4e <_fwalk_reent+0x3a>
 8014c46:	4629      	mov	r1, r5
 8014c48:	4630      	mov	r0, r6
 8014c4a:	47c0      	blx	r8
 8014c4c:	4307      	orrs	r7, r0
 8014c4e:	3568      	adds	r5, #104	; 0x68
 8014c50:	e7e9      	b.n	8014c26 <_fwalk_reent+0x12>
	...

08014c54 <_localeconv_r>:
 8014c54:	4800      	ldr	r0, [pc, #0]	; (8014c58 <_localeconv_r+0x4>)
 8014c56:	4770      	bx	lr
 8014c58:	200001a8 	.word	0x200001a8

08014c5c <__retarget_lock_init_recursive>:
 8014c5c:	4770      	bx	lr

08014c5e <__retarget_lock_acquire_recursive>:
 8014c5e:	4770      	bx	lr

08014c60 <__retarget_lock_release_recursive>:
 8014c60:	4770      	bx	lr
	...

08014c64 <__malloc_lock>:
 8014c64:	4801      	ldr	r0, [pc, #4]	; (8014c6c <__malloc_lock+0x8>)
 8014c66:	f7ff bffa 	b.w	8014c5e <__retarget_lock_acquire_recursive>
 8014c6a:	bf00      	nop
 8014c6c:	20009108 	.word	0x20009108

08014c70 <__malloc_unlock>:
 8014c70:	4801      	ldr	r0, [pc, #4]	; (8014c78 <__malloc_unlock+0x8>)
 8014c72:	f7ff bff5 	b.w	8014c60 <__retarget_lock_release_recursive>
 8014c76:	bf00      	nop
 8014c78:	20009108 	.word	0x20009108

08014c7c <_Balloc>:
 8014c7c:	b570      	push	{r4, r5, r6, lr}
 8014c7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014c80:	4604      	mov	r4, r0
 8014c82:	460d      	mov	r5, r1
 8014c84:	b976      	cbnz	r6, 8014ca4 <_Balloc+0x28>
 8014c86:	2010      	movs	r0, #16
 8014c88:	f7fe f9ac 	bl	8012fe4 <malloc>
 8014c8c:	4602      	mov	r2, r0
 8014c8e:	6260      	str	r0, [r4, #36]	; 0x24
 8014c90:	b920      	cbnz	r0, 8014c9c <_Balloc+0x20>
 8014c92:	4b18      	ldr	r3, [pc, #96]	; (8014cf4 <_Balloc+0x78>)
 8014c94:	4818      	ldr	r0, [pc, #96]	; (8014cf8 <_Balloc+0x7c>)
 8014c96:	2166      	movs	r1, #102	; 0x66
 8014c98:	f7ff f838 	bl	8013d0c <__assert_func>
 8014c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ca0:	6006      	str	r6, [r0, #0]
 8014ca2:	60c6      	str	r6, [r0, #12]
 8014ca4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014ca6:	68f3      	ldr	r3, [r6, #12]
 8014ca8:	b183      	cbz	r3, 8014ccc <_Balloc+0x50>
 8014caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cac:	68db      	ldr	r3, [r3, #12]
 8014cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014cb2:	b9b8      	cbnz	r0, 8014ce4 <_Balloc+0x68>
 8014cb4:	2101      	movs	r1, #1
 8014cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8014cba:	1d72      	adds	r2, r6, #5
 8014cbc:	0092      	lsls	r2, r2, #2
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f000 fb5a 	bl	8015378 <_calloc_r>
 8014cc4:	b160      	cbz	r0, 8014ce0 <_Balloc+0x64>
 8014cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014cca:	e00e      	b.n	8014cea <_Balloc+0x6e>
 8014ccc:	2221      	movs	r2, #33	; 0x21
 8014cce:	2104      	movs	r1, #4
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 fb51 	bl	8015378 <_calloc_r>
 8014cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cd8:	60f0      	str	r0, [r6, #12]
 8014cda:	68db      	ldr	r3, [r3, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d1e4      	bne.n	8014caa <_Balloc+0x2e>
 8014ce0:	2000      	movs	r0, #0
 8014ce2:	bd70      	pop	{r4, r5, r6, pc}
 8014ce4:	6802      	ldr	r2, [r0, #0]
 8014ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014cea:	2300      	movs	r3, #0
 8014cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014cf0:	e7f7      	b.n	8014ce2 <_Balloc+0x66>
 8014cf2:	bf00      	nop
 8014cf4:	08019dc0 	.word	0x08019dc0
 8014cf8:	08019f50 	.word	0x08019f50

08014cfc <_Bfree>:
 8014cfc:	b570      	push	{r4, r5, r6, lr}
 8014cfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014d00:	4605      	mov	r5, r0
 8014d02:	460c      	mov	r4, r1
 8014d04:	b976      	cbnz	r6, 8014d24 <_Bfree+0x28>
 8014d06:	2010      	movs	r0, #16
 8014d08:	f7fe f96c 	bl	8012fe4 <malloc>
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	6268      	str	r0, [r5, #36]	; 0x24
 8014d10:	b920      	cbnz	r0, 8014d1c <_Bfree+0x20>
 8014d12:	4b09      	ldr	r3, [pc, #36]	; (8014d38 <_Bfree+0x3c>)
 8014d14:	4809      	ldr	r0, [pc, #36]	; (8014d3c <_Bfree+0x40>)
 8014d16:	218a      	movs	r1, #138	; 0x8a
 8014d18:	f7fe fff8 	bl	8013d0c <__assert_func>
 8014d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d20:	6006      	str	r6, [r0, #0]
 8014d22:	60c6      	str	r6, [r0, #12]
 8014d24:	b13c      	cbz	r4, 8014d36 <_Bfree+0x3a>
 8014d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d28:	6862      	ldr	r2, [r4, #4]
 8014d2a:	68db      	ldr	r3, [r3, #12]
 8014d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d30:	6021      	str	r1, [r4, #0]
 8014d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014d36:	bd70      	pop	{r4, r5, r6, pc}
 8014d38:	08019dc0 	.word	0x08019dc0
 8014d3c:	08019f50 	.word	0x08019f50

08014d40 <__multadd>:
 8014d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d44:	690e      	ldr	r6, [r1, #16]
 8014d46:	4607      	mov	r7, r0
 8014d48:	4698      	mov	r8, r3
 8014d4a:	460c      	mov	r4, r1
 8014d4c:	f101 0014 	add.w	r0, r1, #20
 8014d50:	2300      	movs	r3, #0
 8014d52:	6805      	ldr	r5, [r0, #0]
 8014d54:	b2a9      	uxth	r1, r5
 8014d56:	fb02 8101 	mla	r1, r2, r1, r8
 8014d5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014d5e:	0c2d      	lsrs	r5, r5, #16
 8014d60:	fb02 c505 	mla	r5, r2, r5, ip
 8014d64:	b289      	uxth	r1, r1
 8014d66:	3301      	adds	r3, #1
 8014d68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014d6c:	429e      	cmp	r6, r3
 8014d6e:	f840 1b04 	str.w	r1, [r0], #4
 8014d72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014d76:	dcec      	bgt.n	8014d52 <__multadd+0x12>
 8014d78:	f1b8 0f00 	cmp.w	r8, #0
 8014d7c:	d022      	beq.n	8014dc4 <__multadd+0x84>
 8014d7e:	68a3      	ldr	r3, [r4, #8]
 8014d80:	42b3      	cmp	r3, r6
 8014d82:	dc19      	bgt.n	8014db8 <__multadd+0x78>
 8014d84:	6861      	ldr	r1, [r4, #4]
 8014d86:	4638      	mov	r0, r7
 8014d88:	3101      	adds	r1, #1
 8014d8a:	f7ff ff77 	bl	8014c7c <_Balloc>
 8014d8e:	4605      	mov	r5, r0
 8014d90:	b928      	cbnz	r0, 8014d9e <__multadd+0x5e>
 8014d92:	4602      	mov	r2, r0
 8014d94:	4b0d      	ldr	r3, [pc, #52]	; (8014dcc <__multadd+0x8c>)
 8014d96:	480e      	ldr	r0, [pc, #56]	; (8014dd0 <__multadd+0x90>)
 8014d98:	21b5      	movs	r1, #181	; 0xb5
 8014d9a:	f7fe ffb7 	bl	8013d0c <__assert_func>
 8014d9e:	6922      	ldr	r2, [r4, #16]
 8014da0:	3202      	adds	r2, #2
 8014da2:	f104 010c 	add.w	r1, r4, #12
 8014da6:	0092      	lsls	r2, r2, #2
 8014da8:	300c      	adds	r0, #12
 8014daa:	f7fe f939 	bl	8013020 <memcpy>
 8014dae:	4621      	mov	r1, r4
 8014db0:	4638      	mov	r0, r7
 8014db2:	f7ff ffa3 	bl	8014cfc <_Bfree>
 8014db6:	462c      	mov	r4, r5
 8014db8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014dbc:	3601      	adds	r6, #1
 8014dbe:	f8c3 8014 	str.w	r8, [r3, #20]
 8014dc2:	6126      	str	r6, [r4, #16]
 8014dc4:	4620      	mov	r0, r4
 8014dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dca:	bf00      	nop
 8014dcc:	08019ede 	.word	0x08019ede
 8014dd0:	08019f50 	.word	0x08019f50

08014dd4 <__hi0bits>:
 8014dd4:	0c03      	lsrs	r3, r0, #16
 8014dd6:	041b      	lsls	r3, r3, #16
 8014dd8:	b9d3      	cbnz	r3, 8014e10 <__hi0bits+0x3c>
 8014dda:	0400      	lsls	r0, r0, #16
 8014ddc:	2310      	movs	r3, #16
 8014dde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014de2:	bf04      	itt	eq
 8014de4:	0200      	lsleq	r0, r0, #8
 8014de6:	3308      	addeq	r3, #8
 8014de8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014dec:	bf04      	itt	eq
 8014dee:	0100      	lsleq	r0, r0, #4
 8014df0:	3304      	addeq	r3, #4
 8014df2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014df6:	bf04      	itt	eq
 8014df8:	0080      	lsleq	r0, r0, #2
 8014dfa:	3302      	addeq	r3, #2
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	db05      	blt.n	8014e0c <__hi0bits+0x38>
 8014e00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014e04:	f103 0301 	add.w	r3, r3, #1
 8014e08:	bf08      	it	eq
 8014e0a:	2320      	moveq	r3, #32
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	4770      	bx	lr
 8014e10:	2300      	movs	r3, #0
 8014e12:	e7e4      	b.n	8014dde <__hi0bits+0xa>

08014e14 <__lo0bits>:
 8014e14:	6803      	ldr	r3, [r0, #0]
 8014e16:	f013 0207 	ands.w	r2, r3, #7
 8014e1a:	4601      	mov	r1, r0
 8014e1c:	d00b      	beq.n	8014e36 <__lo0bits+0x22>
 8014e1e:	07da      	lsls	r2, r3, #31
 8014e20:	d424      	bmi.n	8014e6c <__lo0bits+0x58>
 8014e22:	0798      	lsls	r0, r3, #30
 8014e24:	bf49      	itett	mi
 8014e26:	085b      	lsrmi	r3, r3, #1
 8014e28:	089b      	lsrpl	r3, r3, #2
 8014e2a:	2001      	movmi	r0, #1
 8014e2c:	600b      	strmi	r3, [r1, #0]
 8014e2e:	bf5c      	itt	pl
 8014e30:	600b      	strpl	r3, [r1, #0]
 8014e32:	2002      	movpl	r0, #2
 8014e34:	4770      	bx	lr
 8014e36:	b298      	uxth	r0, r3
 8014e38:	b9b0      	cbnz	r0, 8014e68 <__lo0bits+0x54>
 8014e3a:	0c1b      	lsrs	r3, r3, #16
 8014e3c:	2010      	movs	r0, #16
 8014e3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014e42:	bf04      	itt	eq
 8014e44:	0a1b      	lsreq	r3, r3, #8
 8014e46:	3008      	addeq	r0, #8
 8014e48:	071a      	lsls	r2, r3, #28
 8014e4a:	bf04      	itt	eq
 8014e4c:	091b      	lsreq	r3, r3, #4
 8014e4e:	3004      	addeq	r0, #4
 8014e50:	079a      	lsls	r2, r3, #30
 8014e52:	bf04      	itt	eq
 8014e54:	089b      	lsreq	r3, r3, #2
 8014e56:	3002      	addeq	r0, #2
 8014e58:	07da      	lsls	r2, r3, #31
 8014e5a:	d403      	bmi.n	8014e64 <__lo0bits+0x50>
 8014e5c:	085b      	lsrs	r3, r3, #1
 8014e5e:	f100 0001 	add.w	r0, r0, #1
 8014e62:	d005      	beq.n	8014e70 <__lo0bits+0x5c>
 8014e64:	600b      	str	r3, [r1, #0]
 8014e66:	4770      	bx	lr
 8014e68:	4610      	mov	r0, r2
 8014e6a:	e7e8      	b.n	8014e3e <__lo0bits+0x2a>
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	4770      	bx	lr
 8014e70:	2020      	movs	r0, #32
 8014e72:	4770      	bx	lr

08014e74 <__i2b>:
 8014e74:	b510      	push	{r4, lr}
 8014e76:	460c      	mov	r4, r1
 8014e78:	2101      	movs	r1, #1
 8014e7a:	f7ff feff 	bl	8014c7c <_Balloc>
 8014e7e:	4602      	mov	r2, r0
 8014e80:	b928      	cbnz	r0, 8014e8e <__i2b+0x1a>
 8014e82:	4b05      	ldr	r3, [pc, #20]	; (8014e98 <__i2b+0x24>)
 8014e84:	4805      	ldr	r0, [pc, #20]	; (8014e9c <__i2b+0x28>)
 8014e86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014e8a:	f7fe ff3f 	bl	8013d0c <__assert_func>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	6144      	str	r4, [r0, #20]
 8014e92:	6103      	str	r3, [r0, #16]
 8014e94:	bd10      	pop	{r4, pc}
 8014e96:	bf00      	nop
 8014e98:	08019ede 	.word	0x08019ede
 8014e9c:	08019f50 	.word	0x08019f50

08014ea0 <__multiply>:
 8014ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea4:	4614      	mov	r4, r2
 8014ea6:	690a      	ldr	r2, [r1, #16]
 8014ea8:	6923      	ldr	r3, [r4, #16]
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	bfb8      	it	lt
 8014eae:	460b      	movlt	r3, r1
 8014eb0:	460d      	mov	r5, r1
 8014eb2:	bfbc      	itt	lt
 8014eb4:	4625      	movlt	r5, r4
 8014eb6:	461c      	movlt	r4, r3
 8014eb8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014ebc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014ec0:	68ab      	ldr	r3, [r5, #8]
 8014ec2:	6869      	ldr	r1, [r5, #4]
 8014ec4:	eb0a 0709 	add.w	r7, sl, r9
 8014ec8:	42bb      	cmp	r3, r7
 8014eca:	b085      	sub	sp, #20
 8014ecc:	bfb8      	it	lt
 8014ece:	3101      	addlt	r1, #1
 8014ed0:	f7ff fed4 	bl	8014c7c <_Balloc>
 8014ed4:	b930      	cbnz	r0, 8014ee4 <__multiply+0x44>
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	4b42      	ldr	r3, [pc, #264]	; (8014fe4 <__multiply+0x144>)
 8014eda:	4843      	ldr	r0, [pc, #268]	; (8014fe8 <__multiply+0x148>)
 8014edc:	f240 115d 	movw	r1, #349	; 0x15d
 8014ee0:	f7fe ff14 	bl	8013d0c <__assert_func>
 8014ee4:	f100 0614 	add.w	r6, r0, #20
 8014ee8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014eec:	4633      	mov	r3, r6
 8014eee:	2200      	movs	r2, #0
 8014ef0:	4543      	cmp	r3, r8
 8014ef2:	d31e      	bcc.n	8014f32 <__multiply+0x92>
 8014ef4:	f105 0c14 	add.w	ip, r5, #20
 8014ef8:	f104 0314 	add.w	r3, r4, #20
 8014efc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014f00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014f04:	9202      	str	r2, [sp, #8]
 8014f06:	ebac 0205 	sub.w	r2, ip, r5
 8014f0a:	3a15      	subs	r2, #21
 8014f0c:	f022 0203 	bic.w	r2, r2, #3
 8014f10:	3204      	adds	r2, #4
 8014f12:	f105 0115 	add.w	r1, r5, #21
 8014f16:	458c      	cmp	ip, r1
 8014f18:	bf38      	it	cc
 8014f1a:	2204      	movcc	r2, #4
 8014f1c:	9201      	str	r2, [sp, #4]
 8014f1e:	9a02      	ldr	r2, [sp, #8]
 8014f20:	9303      	str	r3, [sp, #12]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d808      	bhi.n	8014f38 <__multiply+0x98>
 8014f26:	2f00      	cmp	r7, #0
 8014f28:	dc55      	bgt.n	8014fd6 <__multiply+0x136>
 8014f2a:	6107      	str	r7, [r0, #16]
 8014f2c:	b005      	add	sp, #20
 8014f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f32:	f843 2b04 	str.w	r2, [r3], #4
 8014f36:	e7db      	b.n	8014ef0 <__multiply+0x50>
 8014f38:	f8b3 a000 	ldrh.w	sl, [r3]
 8014f3c:	f1ba 0f00 	cmp.w	sl, #0
 8014f40:	d020      	beq.n	8014f84 <__multiply+0xe4>
 8014f42:	f105 0e14 	add.w	lr, r5, #20
 8014f46:	46b1      	mov	r9, r6
 8014f48:	2200      	movs	r2, #0
 8014f4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014f4e:	f8d9 b000 	ldr.w	fp, [r9]
 8014f52:	b2a1      	uxth	r1, r4
 8014f54:	fa1f fb8b 	uxth.w	fp, fp
 8014f58:	fb0a b101 	mla	r1, sl, r1, fp
 8014f5c:	4411      	add	r1, r2
 8014f5e:	f8d9 2000 	ldr.w	r2, [r9]
 8014f62:	0c24      	lsrs	r4, r4, #16
 8014f64:	0c12      	lsrs	r2, r2, #16
 8014f66:	fb0a 2404 	mla	r4, sl, r4, r2
 8014f6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014f6e:	b289      	uxth	r1, r1
 8014f70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014f74:	45f4      	cmp	ip, lr
 8014f76:	f849 1b04 	str.w	r1, [r9], #4
 8014f7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014f7e:	d8e4      	bhi.n	8014f4a <__multiply+0xaa>
 8014f80:	9901      	ldr	r1, [sp, #4]
 8014f82:	5072      	str	r2, [r6, r1]
 8014f84:	9a03      	ldr	r2, [sp, #12]
 8014f86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014f8a:	3304      	adds	r3, #4
 8014f8c:	f1b9 0f00 	cmp.w	r9, #0
 8014f90:	d01f      	beq.n	8014fd2 <__multiply+0x132>
 8014f92:	6834      	ldr	r4, [r6, #0]
 8014f94:	f105 0114 	add.w	r1, r5, #20
 8014f98:	46b6      	mov	lr, r6
 8014f9a:	f04f 0a00 	mov.w	sl, #0
 8014f9e:	880a      	ldrh	r2, [r1, #0]
 8014fa0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014fa4:	fb09 b202 	mla	r2, r9, r2, fp
 8014fa8:	4492      	add	sl, r2
 8014faa:	b2a4      	uxth	r4, r4
 8014fac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014fb0:	f84e 4b04 	str.w	r4, [lr], #4
 8014fb4:	f851 4b04 	ldr.w	r4, [r1], #4
 8014fb8:	f8be 2000 	ldrh.w	r2, [lr]
 8014fbc:	0c24      	lsrs	r4, r4, #16
 8014fbe:	fb09 2404 	mla	r4, r9, r4, r2
 8014fc2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014fc6:	458c      	cmp	ip, r1
 8014fc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014fcc:	d8e7      	bhi.n	8014f9e <__multiply+0xfe>
 8014fce:	9a01      	ldr	r2, [sp, #4]
 8014fd0:	50b4      	str	r4, [r6, r2]
 8014fd2:	3604      	adds	r6, #4
 8014fd4:	e7a3      	b.n	8014f1e <__multiply+0x7e>
 8014fd6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d1a5      	bne.n	8014f2a <__multiply+0x8a>
 8014fde:	3f01      	subs	r7, #1
 8014fe0:	e7a1      	b.n	8014f26 <__multiply+0x86>
 8014fe2:	bf00      	nop
 8014fe4:	08019ede 	.word	0x08019ede
 8014fe8:	08019f50 	.word	0x08019f50

08014fec <__pow5mult>:
 8014fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ff0:	4615      	mov	r5, r2
 8014ff2:	f012 0203 	ands.w	r2, r2, #3
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	460f      	mov	r7, r1
 8014ffa:	d007      	beq.n	801500c <__pow5mult+0x20>
 8014ffc:	4c25      	ldr	r4, [pc, #148]	; (8015094 <__pow5mult+0xa8>)
 8014ffe:	3a01      	subs	r2, #1
 8015000:	2300      	movs	r3, #0
 8015002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015006:	f7ff fe9b 	bl	8014d40 <__multadd>
 801500a:	4607      	mov	r7, r0
 801500c:	10ad      	asrs	r5, r5, #2
 801500e:	d03d      	beq.n	801508c <__pow5mult+0xa0>
 8015010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015012:	b97c      	cbnz	r4, 8015034 <__pow5mult+0x48>
 8015014:	2010      	movs	r0, #16
 8015016:	f7fd ffe5 	bl	8012fe4 <malloc>
 801501a:	4602      	mov	r2, r0
 801501c:	6270      	str	r0, [r6, #36]	; 0x24
 801501e:	b928      	cbnz	r0, 801502c <__pow5mult+0x40>
 8015020:	4b1d      	ldr	r3, [pc, #116]	; (8015098 <__pow5mult+0xac>)
 8015022:	481e      	ldr	r0, [pc, #120]	; (801509c <__pow5mult+0xb0>)
 8015024:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015028:	f7fe fe70 	bl	8013d0c <__assert_func>
 801502c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015030:	6004      	str	r4, [r0, #0]
 8015032:	60c4      	str	r4, [r0, #12]
 8015034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801503c:	b94c      	cbnz	r4, 8015052 <__pow5mult+0x66>
 801503e:	f240 2171 	movw	r1, #625	; 0x271
 8015042:	4630      	mov	r0, r6
 8015044:	f7ff ff16 	bl	8014e74 <__i2b>
 8015048:	2300      	movs	r3, #0
 801504a:	f8c8 0008 	str.w	r0, [r8, #8]
 801504e:	4604      	mov	r4, r0
 8015050:	6003      	str	r3, [r0, #0]
 8015052:	f04f 0900 	mov.w	r9, #0
 8015056:	07eb      	lsls	r3, r5, #31
 8015058:	d50a      	bpl.n	8015070 <__pow5mult+0x84>
 801505a:	4639      	mov	r1, r7
 801505c:	4622      	mov	r2, r4
 801505e:	4630      	mov	r0, r6
 8015060:	f7ff ff1e 	bl	8014ea0 <__multiply>
 8015064:	4639      	mov	r1, r7
 8015066:	4680      	mov	r8, r0
 8015068:	4630      	mov	r0, r6
 801506a:	f7ff fe47 	bl	8014cfc <_Bfree>
 801506e:	4647      	mov	r7, r8
 8015070:	106d      	asrs	r5, r5, #1
 8015072:	d00b      	beq.n	801508c <__pow5mult+0xa0>
 8015074:	6820      	ldr	r0, [r4, #0]
 8015076:	b938      	cbnz	r0, 8015088 <__pow5mult+0x9c>
 8015078:	4622      	mov	r2, r4
 801507a:	4621      	mov	r1, r4
 801507c:	4630      	mov	r0, r6
 801507e:	f7ff ff0f 	bl	8014ea0 <__multiply>
 8015082:	6020      	str	r0, [r4, #0]
 8015084:	f8c0 9000 	str.w	r9, [r0]
 8015088:	4604      	mov	r4, r0
 801508a:	e7e4      	b.n	8015056 <__pow5mult+0x6a>
 801508c:	4638      	mov	r0, r7
 801508e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015092:	bf00      	nop
 8015094:	0801a0a0 	.word	0x0801a0a0
 8015098:	08019dc0 	.word	0x08019dc0
 801509c:	08019f50 	.word	0x08019f50

080150a0 <__lshift>:
 80150a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150a4:	460c      	mov	r4, r1
 80150a6:	6849      	ldr	r1, [r1, #4]
 80150a8:	6923      	ldr	r3, [r4, #16]
 80150aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80150ae:	68a3      	ldr	r3, [r4, #8]
 80150b0:	4607      	mov	r7, r0
 80150b2:	4691      	mov	r9, r2
 80150b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80150b8:	f108 0601 	add.w	r6, r8, #1
 80150bc:	42b3      	cmp	r3, r6
 80150be:	db0b      	blt.n	80150d8 <__lshift+0x38>
 80150c0:	4638      	mov	r0, r7
 80150c2:	f7ff fddb 	bl	8014c7c <_Balloc>
 80150c6:	4605      	mov	r5, r0
 80150c8:	b948      	cbnz	r0, 80150de <__lshift+0x3e>
 80150ca:	4602      	mov	r2, r0
 80150cc:	4b28      	ldr	r3, [pc, #160]	; (8015170 <__lshift+0xd0>)
 80150ce:	4829      	ldr	r0, [pc, #164]	; (8015174 <__lshift+0xd4>)
 80150d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80150d4:	f7fe fe1a 	bl	8013d0c <__assert_func>
 80150d8:	3101      	adds	r1, #1
 80150da:	005b      	lsls	r3, r3, #1
 80150dc:	e7ee      	b.n	80150bc <__lshift+0x1c>
 80150de:	2300      	movs	r3, #0
 80150e0:	f100 0114 	add.w	r1, r0, #20
 80150e4:	f100 0210 	add.w	r2, r0, #16
 80150e8:	4618      	mov	r0, r3
 80150ea:	4553      	cmp	r3, sl
 80150ec:	db33      	blt.n	8015156 <__lshift+0xb6>
 80150ee:	6920      	ldr	r0, [r4, #16]
 80150f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80150f4:	f104 0314 	add.w	r3, r4, #20
 80150f8:	f019 091f 	ands.w	r9, r9, #31
 80150fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015100:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015104:	d02b      	beq.n	801515e <__lshift+0xbe>
 8015106:	f1c9 0e20 	rsb	lr, r9, #32
 801510a:	468a      	mov	sl, r1
 801510c:	2200      	movs	r2, #0
 801510e:	6818      	ldr	r0, [r3, #0]
 8015110:	fa00 f009 	lsl.w	r0, r0, r9
 8015114:	4302      	orrs	r2, r0
 8015116:	f84a 2b04 	str.w	r2, [sl], #4
 801511a:	f853 2b04 	ldr.w	r2, [r3], #4
 801511e:	459c      	cmp	ip, r3
 8015120:	fa22 f20e 	lsr.w	r2, r2, lr
 8015124:	d8f3      	bhi.n	801510e <__lshift+0x6e>
 8015126:	ebac 0304 	sub.w	r3, ip, r4
 801512a:	3b15      	subs	r3, #21
 801512c:	f023 0303 	bic.w	r3, r3, #3
 8015130:	3304      	adds	r3, #4
 8015132:	f104 0015 	add.w	r0, r4, #21
 8015136:	4584      	cmp	ip, r0
 8015138:	bf38      	it	cc
 801513a:	2304      	movcc	r3, #4
 801513c:	50ca      	str	r2, [r1, r3]
 801513e:	b10a      	cbz	r2, 8015144 <__lshift+0xa4>
 8015140:	f108 0602 	add.w	r6, r8, #2
 8015144:	3e01      	subs	r6, #1
 8015146:	4638      	mov	r0, r7
 8015148:	612e      	str	r6, [r5, #16]
 801514a:	4621      	mov	r1, r4
 801514c:	f7ff fdd6 	bl	8014cfc <_Bfree>
 8015150:	4628      	mov	r0, r5
 8015152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015156:	f842 0f04 	str.w	r0, [r2, #4]!
 801515a:	3301      	adds	r3, #1
 801515c:	e7c5      	b.n	80150ea <__lshift+0x4a>
 801515e:	3904      	subs	r1, #4
 8015160:	f853 2b04 	ldr.w	r2, [r3], #4
 8015164:	f841 2f04 	str.w	r2, [r1, #4]!
 8015168:	459c      	cmp	ip, r3
 801516a:	d8f9      	bhi.n	8015160 <__lshift+0xc0>
 801516c:	e7ea      	b.n	8015144 <__lshift+0xa4>
 801516e:	bf00      	nop
 8015170:	08019ede 	.word	0x08019ede
 8015174:	08019f50 	.word	0x08019f50

08015178 <__mcmp>:
 8015178:	b530      	push	{r4, r5, lr}
 801517a:	6902      	ldr	r2, [r0, #16]
 801517c:	690c      	ldr	r4, [r1, #16]
 801517e:	1b12      	subs	r2, r2, r4
 8015180:	d10e      	bne.n	80151a0 <__mcmp+0x28>
 8015182:	f100 0314 	add.w	r3, r0, #20
 8015186:	3114      	adds	r1, #20
 8015188:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801518c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015190:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015194:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015198:	42a5      	cmp	r5, r4
 801519a:	d003      	beq.n	80151a4 <__mcmp+0x2c>
 801519c:	d305      	bcc.n	80151aa <__mcmp+0x32>
 801519e:	2201      	movs	r2, #1
 80151a0:	4610      	mov	r0, r2
 80151a2:	bd30      	pop	{r4, r5, pc}
 80151a4:	4283      	cmp	r3, r0
 80151a6:	d3f3      	bcc.n	8015190 <__mcmp+0x18>
 80151a8:	e7fa      	b.n	80151a0 <__mcmp+0x28>
 80151aa:	f04f 32ff 	mov.w	r2, #4294967295
 80151ae:	e7f7      	b.n	80151a0 <__mcmp+0x28>

080151b0 <__mdiff>:
 80151b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b4:	460c      	mov	r4, r1
 80151b6:	4606      	mov	r6, r0
 80151b8:	4611      	mov	r1, r2
 80151ba:	4620      	mov	r0, r4
 80151bc:	4617      	mov	r7, r2
 80151be:	f7ff ffdb 	bl	8015178 <__mcmp>
 80151c2:	1e05      	subs	r5, r0, #0
 80151c4:	d110      	bne.n	80151e8 <__mdiff+0x38>
 80151c6:	4629      	mov	r1, r5
 80151c8:	4630      	mov	r0, r6
 80151ca:	f7ff fd57 	bl	8014c7c <_Balloc>
 80151ce:	b930      	cbnz	r0, 80151de <__mdiff+0x2e>
 80151d0:	4b39      	ldr	r3, [pc, #228]	; (80152b8 <__mdiff+0x108>)
 80151d2:	4602      	mov	r2, r0
 80151d4:	f240 2132 	movw	r1, #562	; 0x232
 80151d8:	4838      	ldr	r0, [pc, #224]	; (80152bc <__mdiff+0x10c>)
 80151da:	f7fe fd97 	bl	8013d0c <__assert_func>
 80151de:	2301      	movs	r3, #1
 80151e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80151e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e8:	bfa4      	itt	ge
 80151ea:	463b      	movge	r3, r7
 80151ec:	4627      	movge	r7, r4
 80151ee:	4630      	mov	r0, r6
 80151f0:	6879      	ldr	r1, [r7, #4]
 80151f2:	bfa6      	itte	ge
 80151f4:	461c      	movge	r4, r3
 80151f6:	2500      	movge	r5, #0
 80151f8:	2501      	movlt	r5, #1
 80151fa:	f7ff fd3f 	bl	8014c7c <_Balloc>
 80151fe:	b920      	cbnz	r0, 801520a <__mdiff+0x5a>
 8015200:	4b2d      	ldr	r3, [pc, #180]	; (80152b8 <__mdiff+0x108>)
 8015202:	4602      	mov	r2, r0
 8015204:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015208:	e7e6      	b.n	80151d8 <__mdiff+0x28>
 801520a:	693e      	ldr	r6, [r7, #16]
 801520c:	60c5      	str	r5, [r0, #12]
 801520e:	6925      	ldr	r5, [r4, #16]
 8015210:	f107 0114 	add.w	r1, r7, #20
 8015214:	f104 0914 	add.w	r9, r4, #20
 8015218:	f100 0e14 	add.w	lr, r0, #20
 801521c:	f107 0210 	add.w	r2, r7, #16
 8015220:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015224:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015228:	46f2      	mov	sl, lr
 801522a:	2700      	movs	r7, #0
 801522c:	f859 3b04 	ldr.w	r3, [r9], #4
 8015230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015234:	fa1f f883 	uxth.w	r8, r3
 8015238:	fa17 f78b 	uxtah	r7, r7, fp
 801523c:	0c1b      	lsrs	r3, r3, #16
 801523e:	eba7 0808 	sub.w	r8, r7, r8
 8015242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015246:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801524a:	fa1f f888 	uxth.w	r8, r8
 801524e:	141f      	asrs	r7, r3, #16
 8015250:	454d      	cmp	r5, r9
 8015252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015256:	f84a 3b04 	str.w	r3, [sl], #4
 801525a:	d8e7      	bhi.n	801522c <__mdiff+0x7c>
 801525c:	1b2b      	subs	r3, r5, r4
 801525e:	3b15      	subs	r3, #21
 8015260:	f023 0303 	bic.w	r3, r3, #3
 8015264:	3304      	adds	r3, #4
 8015266:	3415      	adds	r4, #21
 8015268:	42a5      	cmp	r5, r4
 801526a:	bf38      	it	cc
 801526c:	2304      	movcc	r3, #4
 801526e:	4419      	add	r1, r3
 8015270:	4473      	add	r3, lr
 8015272:	469e      	mov	lr, r3
 8015274:	460d      	mov	r5, r1
 8015276:	4565      	cmp	r5, ip
 8015278:	d30e      	bcc.n	8015298 <__mdiff+0xe8>
 801527a:	f10c 0203 	add.w	r2, ip, #3
 801527e:	1a52      	subs	r2, r2, r1
 8015280:	f022 0203 	bic.w	r2, r2, #3
 8015284:	3903      	subs	r1, #3
 8015286:	458c      	cmp	ip, r1
 8015288:	bf38      	it	cc
 801528a:	2200      	movcc	r2, #0
 801528c:	441a      	add	r2, r3
 801528e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015292:	b17b      	cbz	r3, 80152b4 <__mdiff+0x104>
 8015294:	6106      	str	r6, [r0, #16]
 8015296:	e7a5      	b.n	80151e4 <__mdiff+0x34>
 8015298:	f855 8b04 	ldr.w	r8, [r5], #4
 801529c:	fa17 f488 	uxtah	r4, r7, r8
 80152a0:	1422      	asrs	r2, r4, #16
 80152a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80152a6:	b2a4      	uxth	r4, r4
 80152a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80152ac:	f84e 4b04 	str.w	r4, [lr], #4
 80152b0:	1417      	asrs	r7, r2, #16
 80152b2:	e7e0      	b.n	8015276 <__mdiff+0xc6>
 80152b4:	3e01      	subs	r6, #1
 80152b6:	e7ea      	b.n	801528e <__mdiff+0xde>
 80152b8:	08019ede 	.word	0x08019ede
 80152bc:	08019f50 	.word	0x08019f50

080152c0 <__d2b>:
 80152c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80152c4:	4689      	mov	r9, r1
 80152c6:	2101      	movs	r1, #1
 80152c8:	ec57 6b10 	vmov	r6, r7, d0
 80152cc:	4690      	mov	r8, r2
 80152ce:	f7ff fcd5 	bl	8014c7c <_Balloc>
 80152d2:	4604      	mov	r4, r0
 80152d4:	b930      	cbnz	r0, 80152e4 <__d2b+0x24>
 80152d6:	4602      	mov	r2, r0
 80152d8:	4b25      	ldr	r3, [pc, #148]	; (8015370 <__d2b+0xb0>)
 80152da:	4826      	ldr	r0, [pc, #152]	; (8015374 <__d2b+0xb4>)
 80152dc:	f240 310a 	movw	r1, #778	; 0x30a
 80152e0:	f7fe fd14 	bl	8013d0c <__assert_func>
 80152e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80152e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80152ec:	bb35      	cbnz	r5, 801533c <__d2b+0x7c>
 80152ee:	2e00      	cmp	r6, #0
 80152f0:	9301      	str	r3, [sp, #4]
 80152f2:	d028      	beq.n	8015346 <__d2b+0x86>
 80152f4:	4668      	mov	r0, sp
 80152f6:	9600      	str	r6, [sp, #0]
 80152f8:	f7ff fd8c 	bl	8014e14 <__lo0bits>
 80152fc:	9900      	ldr	r1, [sp, #0]
 80152fe:	b300      	cbz	r0, 8015342 <__d2b+0x82>
 8015300:	9a01      	ldr	r2, [sp, #4]
 8015302:	f1c0 0320 	rsb	r3, r0, #32
 8015306:	fa02 f303 	lsl.w	r3, r2, r3
 801530a:	430b      	orrs	r3, r1
 801530c:	40c2      	lsrs	r2, r0
 801530e:	6163      	str	r3, [r4, #20]
 8015310:	9201      	str	r2, [sp, #4]
 8015312:	9b01      	ldr	r3, [sp, #4]
 8015314:	61a3      	str	r3, [r4, #24]
 8015316:	2b00      	cmp	r3, #0
 8015318:	bf14      	ite	ne
 801531a:	2202      	movne	r2, #2
 801531c:	2201      	moveq	r2, #1
 801531e:	6122      	str	r2, [r4, #16]
 8015320:	b1d5      	cbz	r5, 8015358 <__d2b+0x98>
 8015322:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015326:	4405      	add	r5, r0
 8015328:	f8c9 5000 	str.w	r5, [r9]
 801532c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015330:	f8c8 0000 	str.w	r0, [r8]
 8015334:	4620      	mov	r0, r4
 8015336:	b003      	add	sp, #12
 8015338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801533c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015340:	e7d5      	b.n	80152ee <__d2b+0x2e>
 8015342:	6161      	str	r1, [r4, #20]
 8015344:	e7e5      	b.n	8015312 <__d2b+0x52>
 8015346:	a801      	add	r0, sp, #4
 8015348:	f7ff fd64 	bl	8014e14 <__lo0bits>
 801534c:	9b01      	ldr	r3, [sp, #4]
 801534e:	6163      	str	r3, [r4, #20]
 8015350:	2201      	movs	r2, #1
 8015352:	6122      	str	r2, [r4, #16]
 8015354:	3020      	adds	r0, #32
 8015356:	e7e3      	b.n	8015320 <__d2b+0x60>
 8015358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801535c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015360:	f8c9 0000 	str.w	r0, [r9]
 8015364:	6918      	ldr	r0, [r3, #16]
 8015366:	f7ff fd35 	bl	8014dd4 <__hi0bits>
 801536a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801536e:	e7df      	b.n	8015330 <__d2b+0x70>
 8015370:	08019ede 	.word	0x08019ede
 8015374:	08019f50 	.word	0x08019f50

08015378 <_calloc_r>:
 8015378:	b513      	push	{r0, r1, r4, lr}
 801537a:	434a      	muls	r2, r1
 801537c:	4611      	mov	r1, r2
 801537e:	9201      	str	r2, [sp, #4]
 8015380:	f7fd fece 	bl	8013120 <_malloc_r>
 8015384:	4604      	mov	r4, r0
 8015386:	b118      	cbz	r0, 8015390 <_calloc_r+0x18>
 8015388:	9a01      	ldr	r2, [sp, #4]
 801538a:	2100      	movs	r1, #0
 801538c:	f7fd fe70 	bl	8013070 <memset>
 8015390:	4620      	mov	r0, r4
 8015392:	b002      	add	sp, #8
 8015394:	bd10      	pop	{r4, pc}

08015396 <__ssputs_r>:
 8015396:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801539a:	688e      	ldr	r6, [r1, #8]
 801539c:	429e      	cmp	r6, r3
 801539e:	4682      	mov	sl, r0
 80153a0:	460c      	mov	r4, r1
 80153a2:	4690      	mov	r8, r2
 80153a4:	461f      	mov	r7, r3
 80153a6:	d838      	bhi.n	801541a <__ssputs_r+0x84>
 80153a8:	898a      	ldrh	r2, [r1, #12]
 80153aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80153ae:	d032      	beq.n	8015416 <__ssputs_r+0x80>
 80153b0:	6825      	ldr	r5, [r4, #0]
 80153b2:	6909      	ldr	r1, [r1, #16]
 80153b4:	eba5 0901 	sub.w	r9, r5, r1
 80153b8:	6965      	ldr	r5, [r4, #20]
 80153ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80153be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80153c2:	3301      	adds	r3, #1
 80153c4:	444b      	add	r3, r9
 80153c6:	106d      	asrs	r5, r5, #1
 80153c8:	429d      	cmp	r5, r3
 80153ca:	bf38      	it	cc
 80153cc:	461d      	movcc	r5, r3
 80153ce:	0553      	lsls	r3, r2, #21
 80153d0:	d531      	bpl.n	8015436 <__ssputs_r+0xa0>
 80153d2:	4629      	mov	r1, r5
 80153d4:	f7fd fea4 	bl	8013120 <_malloc_r>
 80153d8:	4606      	mov	r6, r0
 80153da:	b950      	cbnz	r0, 80153f2 <__ssputs_r+0x5c>
 80153dc:	230c      	movs	r3, #12
 80153de:	f8ca 3000 	str.w	r3, [sl]
 80153e2:	89a3      	ldrh	r3, [r4, #12]
 80153e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153e8:	81a3      	strh	r3, [r4, #12]
 80153ea:	f04f 30ff 	mov.w	r0, #4294967295
 80153ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153f2:	6921      	ldr	r1, [r4, #16]
 80153f4:	464a      	mov	r2, r9
 80153f6:	f7fd fe13 	bl	8013020 <memcpy>
 80153fa:	89a3      	ldrh	r3, [r4, #12]
 80153fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015404:	81a3      	strh	r3, [r4, #12]
 8015406:	6126      	str	r6, [r4, #16]
 8015408:	6165      	str	r5, [r4, #20]
 801540a:	444e      	add	r6, r9
 801540c:	eba5 0509 	sub.w	r5, r5, r9
 8015410:	6026      	str	r6, [r4, #0]
 8015412:	60a5      	str	r5, [r4, #8]
 8015414:	463e      	mov	r6, r7
 8015416:	42be      	cmp	r6, r7
 8015418:	d900      	bls.n	801541c <__ssputs_r+0x86>
 801541a:	463e      	mov	r6, r7
 801541c:	4632      	mov	r2, r6
 801541e:	6820      	ldr	r0, [r4, #0]
 8015420:	4641      	mov	r1, r8
 8015422:	f7fd fe0b 	bl	801303c <memmove>
 8015426:	68a3      	ldr	r3, [r4, #8]
 8015428:	6822      	ldr	r2, [r4, #0]
 801542a:	1b9b      	subs	r3, r3, r6
 801542c:	4432      	add	r2, r6
 801542e:	60a3      	str	r3, [r4, #8]
 8015430:	6022      	str	r2, [r4, #0]
 8015432:	2000      	movs	r0, #0
 8015434:	e7db      	b.n	80153ee <__ssputs_r+0x58>
 8015436:	462a      	mov	r2, r5
 8015438:	f000 fcda 	bl	8015df0 <_realloc_r>
 801543c:	4606      	mov	r6, r0
 801543e:	2800      	cmp	r0, #0
 8015440:	d1e1      	bne.n	8015406 <__ssputs_r+0x70>
 8015442:	6921      	ldr	r1, [r4, #16]
 8015444:	4650      	mov	r0, sl
 8015446:	f7fd fe1b 	bl	8013080 <_free_r>
 801544a:	e7c7      	b.n	80153dc <__ssputs_r+0x46>

0801544c <_svfiprintf_r>:
 801544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015450:	4698      	mov	r8, r3
 8015452:	898b      	ldrh	r3, [r1, #12]
 8015454:	061b      	lsls	r3, r3, #24
 8015456:	b09d      	sub	sp, #116	; 0x74
 8015458:	4607      	mov	r7, r0
 801545a:	460d      	mov	r5, r1
 801545c:	4614      	mov	r4, r2
 801545e:	d50e      	bpl.n	801547e <_svfiprintf_r+0x32>
 8015460:	690b      	ldr	r3, [r1, #16]
 8015462:	b963      	cbnz	r3, 801547e <_svfiprintf_r+0x32>
 8015464:	2140      	movs	r1, #64	; 0x40
 8015466:	f7fd fe5b 	bl	8013120 <_malloc_r>
 801546a:	6028      	str	r0, [r5, #0]
 801546c:	6128      	str	r0, [r5, #16]
 801546e:	b920      	cbnz	r0, 801547a <_svfiprintf_r+0x2e>
 8015470:	230c      	movs	r3, #12
 8015472:	603b      	str	r3, [r7, #0]
 8015474:	f04f 30ff 	mov.w	r0, #4294967295
 8015478:	e0d1      	b.n	801561e <_svfiprintf_r+0x1d2>
 801547a:	2340      	movs	r3, #64	; 0x40
 801547c:	616b      	str	r3, [r5, #20]
 801547e:	2300      	movs	r3, #0
 8015480:	9309      	str	r3, [sp, #36]	; 0x24
 8015482:	2320      	movs	r3, #32
 8015484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015488:	f8cd 800c 	str.w	r8, [sp, #12]
 801548c:	2330      	movs	r3, #48	; 0x30
 801548e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015638 <_svfiprintf_r+0x1ec>
 8015492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015496:	f04f 0901 	mov.w	r9, #1
 801549a:	4623      	mov	r3, r4
 801549c:	469a      	mov	sl, r3
 801549e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154a2:	b10a      	cbz	r2, 80154a8 <_svfiprintf_r+0x5c>
 80154a4:	2a25      	cmp	r2, #37	; 0x25
 80154a6:	d1f9      	bne.n	801549c <_svfiprintf_r+0x50>
 80154a8:	ebba 0b04 	subs.w	fp, sl, r4
 80154ac:	d00b      	beq.n	80154c6 <_svfiprintf_r+0x7a>
 80154ae:	465b      	mov	r3, fp
 80154b0:	4622      	mov	r2, r4
 80154b2:	4629      	mov	r1, r5
 80154b4:	4638      	mov	r0, r7
 80154b6:	f7ff ff6e 	bl	8015396 <__ssputs_r>
 80154ba:	3001      	adds	r0, #1
 80154bc:	f000 80aa 	beq.w	8015614 <_svfiprintf_r+0x1c8>
 80154c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154c2:	445a      	add	r2, fp
 80154c4:	9209      	str	r2, [sp, #36]	; 0x24
 80154c6:	f89a 3000 	ldrb.w	r3, [sl]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	f000 80a2 	beq.w	8015614 <_svfiprintf_r+0x1c8>
 80154d0:	2300      	movs	r3, #0
 80154d2:	f04f 32ff 	mov.w	r2, #4294967295
 80154d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154da:	f10a 0a01 	add.w	sl, sl, #1
 80154de:	9304      	str	r3, [sp, #16]
 80154e0:	9307      	str	r3, [sp, #28]
 80154e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154e6:	931a      	str	r3, [sp, #104]	; 0x68
 80154e8:	4654      	mov	r4, sl
 80154ea:	2205      	movs	r2, #5
 80154ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154f0:	4851      	ldr	r0, [pc, #324]	; (8015638 <_svfiprintf_r+0x1ec>)
 80154f2:	f7ea fe85 	bl	8000200 <memchr>
 80154f6:	9a04      	ldr	r2, [sp, #16]
 80154f8:	b9d8      	cbnz	r0, 8015532 <_svfiprintf_r+0xe6>
 80154fa:	06d0      	lsls	r0, r2, #27
 80154fc:	bf44      	itt	mi
 80154fe:	2320      	movmi	r3, #32
 8015500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015504:	0711      	lsls	r1, r2, #28
 8015506:	bf44      	itt	mi
 8015508:	232b      	movmi	r3, #43	; 0x2b
 801550a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801550e:	f89a 3000 	ldrb.w	r3, [sl]
 8015512:	2b2a      	cmp	r3, #42	; 0x2a
 8015514:	d015      	beq.n	8015542 <_svfiprintf_r+0xf6>
 8015516:	9a07      	ldr	r2, [sp, #28]
 8015518:	4654      	mov	r4, sl
 801551a:	2000      	movs	r0, #0
 801551c:	f04f 0c0a 	mov.w	ip, #10
 8015520:	4621      	mov	r1, r4
 8015522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015526:	3b30      	subs	r3, #48	; 0x30
 8015528:	2b09      	cmp	r3, #9
 801552a:	d94e      	bls.n	80155ca <_svfiprintf_r+0x17e>
 801552c:	b1b0      	cbz	r0, 801555c <_svfiprintf_r+0x110>
 801552e:	9207      	str	r2, [sp, #28]
 8015530:	e014      	b.n	801555c <_svfiprintf_r+0x110>
 8015532:	eba0 0308 	sub.w	r3, r0, r8
 8015536:	fa09 f303 	lsl.w	r3, r9, r3
 801553a:	4313      	orrs	r3, r2
 801553c:	9304      	str	r3, [sp, #16]
 801553e:	46a2      	mov	sl, r4
 8015540:	e7d2      	b.n	80154e8 <_svfiprintf_r+0x9c>
 8015542:	9b03      	ldr	r3, [sp, #12]
 8015544:	1d19      	adds	r1, r3, #4
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	9103      	str	r1, [sp, #12]
 801554a:	2b00      	cmp	r3, #0
 801554c:	bfbb      	ittet	lt
 801554e:	425b      	neglt	r3, r3
 8015550:	f042 0202 	orrlt.w	r2, r2, #2
 8015554:	9307      	strge	r3, [sp, #28]
 8015556:	9307      	strlt	r3, [sp, #28]
 8015558:	bfb8      	it	lt
 801555a:	9204      	strlt	r2, [sp, #16]
 801555c:	7823      	ldrb	r3, [r4, #0]
 801555e:	2b2e      	cmp	r3, #46	; 0x2e
 8015560:	d10c      	bne.n	801557c <_svfiprintf_r+0x130>
 8015562:	7863      	ldrb	r3, [r4, #1]
 8015564:	2b2a      	cmp	r3, #42	; 0x2a
 8015566:	d135      	bne.n	80155d4 <_svfiprintf_r+0x188>
 8015568:	9b03      	ldr	r3, [sp, #12]
 801556a:	1d1a      	adds	r2, r3, #4
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	9203      	str	r2, [sp, #12]
 8015570:	2b00      	cmp	r3, #0
 8015572:	bfb8      	it	lt
 8015574:	f04f 33ff 	movlt.w	r3, #4294967295
 8015578:	3402      	adds	r4, #2
 801557a:	9305      	str	r3, [sp, #20]
 801557c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015648 <_svfiprintf_r+0x1fc>
 8015580:	7821      	ldrb	r1, [r4, #0]
 8015582:	2203      	movs	r2, #3
 8015584:	4650      	mov	r0, sl
 8015586:	f7ea fe3b 	bl	8000200 <memchr>
 801558a:	b140      	cbz	r0, 801559e <_svfiprintf_r+0x152>
 801558c:	2340      	movs	r3, #64	; 0x40
 801558e:	eba0 000a 	sub.w	r0, r0, sl
 8015592:	fa03 f000 	lsl.w	r0, r3, r0
 8015596:	9b04      	ldr	r3, [sp, #16]
 8015598:	4303      	orrs	r3, r0
 801559a:	3401      	adds	r4, #1
 801559c:	9304      	str	r3, [sp, #16]
 801559e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155a2:	4826      	ldr	r0, [pc, #152]	; (801563c <_svfiprintf_r+0x1f0>)
 80155a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155a8:	2206      	movs	r2, #6
 80155aa:	f7ea fe29 	bl	8000200 <memchr>
 80155ae:	2800      	cmp	r0, #0
 80155b0:	d038      	beq.n	8015624 <_svfiprintf_r+0x1d8>
 80155b2:	4b23      	ldr	r3, [pc, #140]	; (8015640 <_svfiprintf_r+0x1f4>)
 80155b4:	bb1b      	cbnz	r3, 80155fe <_svfiprintf_r+0x1b2>
 80155b6:	9b03      	ldr	r3, [sp, #12]
 80155b8:	3307      	adds	r3, #7
 80155ba:	f023 0307 	bic.w	r3, r3, #7
 80155be:	3308      	adds	r3, #8
 80155c0:	9303      	str	r3, [sp, #12]
 80155c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155c4:	4433      	add	r3, r6
 80155c6:	9309      	str	r3, [sp, #36]	; 0x24
 80155c8:	e767      	b.n	801549a <_svfiprintf_r+0x4e>
 80155ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80155ce:	460c      	mov	r4, r1
 80155d0:	2001      	movs	r0, #1
 80155d2:	e7a5      	b.n	8015520 <_svfiprintf_r+0xd4>
 80155d4:	2300      	movs	r3, #0
 80155d6:	3401      	adds	r4, #1
 80155d8:	9305      	str	r3, [sp, #20]
 80155da:	4619      	mov	r1, r3
 80155dc:	f04f 0c0a 	mov.w	ip, #10
 80155e0:	4620      	mov	r0, r4
 80155e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155e6:	3a30      	subs	r2, #48	; 0x30
 80155e8:	2a09      	cmp	r2, #9
 80155ea:	d903      	bls.n	80155f4 <_svfiprintf_r+0x1a8>
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d0c5      	beq.n	801557c <_svfiprintf_r+0x130>
 80155f0:	9105      	str	r1, [sp, #20]
 80155f2:	e7c3      	b.n	801557c <_svfiprintf_r+0x130>
 80155f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80155f8:	4604      	mov	r4, r0
 80155fa:	2301      	movs	r3, #1
 80155fc:	e7f0      	b.n	80155e0 <_svfiprintf_r+0x194>
 80155fe:	ab03      	add	r3, sp, #12
 8015600:	9300      	str	r3, [sp, #0]
 8015602:	462a      	mov	r2, r5
 8015604:	4b0f      	ldr	r3, [pc, #60]	; (8015644 <_svfiprintf_r+0x1f8>)
 8015606:	a904      	add	r1, sp, #16
 8015608:	4638      	mov	r0, r7
 801560a:	f7fd fe83 	bl	8013314 <_printf_float>
 801560e:	1c42      	adds	r2, r0, #1
 8015610:	4606      	mov	r6, r0
 8015612:	d1d6      	bne.n	80155c2 <_svfiprintf_r+0x176>
 8015614:	89ab      	ldrh	r3, [r5, #12]
 8015616:	065b      	lsls	r3, r3, #25
 8015618:	f53f af2c 	bmi.w	8015474 <_svfiprintf_r+0x28>
 801561c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801561e:	b01d      	add	sp, #116	; 0x74
 8015620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015624:	ab03      	add	r3, sp, #12
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	462a      	mov	r2, r5
 801562a:	4b06      	ldr	r3, [pc, #24]	; (8015644 <_svfiprintf_r+0x1f8>)
 801562c:	a904      	add	r1, sp, #16
 801562e:	4638      	mov	r0, r7
 8015630:	f7fe f914 	bl	801385c <_printf_i>
 8015634:	e7eb      	b.n	801560e <_svfiprintf_r+0x1c2>
 8015636:	bf00      	nop
 8015638:	0801a0ac 	.word	0x0801a0ac
 801563c:	0801a0b6 	.word	0x0801a0b6
 8015640:	08013315 	.word	0x08013315
 8015644:	08015397 	.word	0x08015397
 8015648:	0801a0b2 	.word	0x0801a0b2

0801564c <__sfputc_r>:
 801564c:	6893      	ldr	r3, [r2, #8]
 801564e:	3b01      	subs	r3, #1
 8015650:	2b00      	cmp	r3, #0
 8015652:	b410      	push	{r4}
 8015654:	6093      	str	r3, [r2, #8]
 8015656:	da08      	bge.n	801566a <__sfputc_r+0x1e>
 8015658:	6994      	ldr	r4, [r2, #24]
 801565a:	42a3      	cmp	r3, r4
 801565c:	db01      	blt.n	8015662 <__sfputc_r+0x16>
 801565e:	290a      	cmp	r1, #10
 8015660:	d103      	bne.n	801566a <__sfputc_r+0x1e>
 8015662:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015666:	f000 b98f 	b.w	8015988 <__swbuf_r>
 801566a:	6813      	ldr	r3, [r2, #0]
 801566c:	1c58      	adds	r0, r3, #1
 801566e:	6010      	str	r0, [r2, #0]
 8015670:	7019      	strb	r1, [r3, #0]
 8015672:	4608      	mov	r0, r1
 8015674:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015678:	4770      	bx	lr

0801567a <__sfputs_r>:
 801567a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801567c:	4606      	mov	r6, r0
 801567e:	460f      	mov	r7, r1
 8015680:	4614      	mov	r4, r2
 8015682:	18d5      	adds	r5, r2, r3
 8015684:	42ac      	cmp	r4, r5
 8015686:	d101      	bne.n	801568c <__sfputs_r+0x12>
 8015688:	2000      	movs	r0, #0
 801568a:	e007      	b.n	801569c <__sfputs_r+0x22>
 801568c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015690:	463a      	mov	r2, r7
 8015692:	4630      	mov	r0, r6
 8015694:	f7ff ffda 	bl	801564c <__sfputc_r>
 8015698:	1c43      	adds	r3, r0, #1
 801569a:	d1f3      	bne.n	8015684 <__sfputs_r+0xa>
 801569c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080156a0 <_vfiprintf_r>:
 80156a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156a4:	460d      	mov	r5, r1
 80156a6:	b09d      	sub	sp, #116	; 0x74
 80156a8:	4614      	mov	r4, r2
 80156aa:	4698      	mov	r8, r3
 80156ac:	4606      	mov	r6, r0
 80156ae:	b118      	cbz	r0, 80156b8 <_vfiprintf_r+0x18>
 80156b0:	6983      	ldr	r3, [r0, #24]
 80156b2:	b90b      	cbnz	r3, 80156b8 <_vfiprintf_r+0x18>
 80156b4:	f7ff fa1e 	bl	8014af4 <__sinit>
 80156b8:	4b89      	ldr	r3, [pc, #548]	; (80158e0 <_vfiprintf_r+0x240>)
 80156ba:	429d      	cmp	r5, r3
 80156bc:	d11b      	bne.n	80156f6 <_vfiprintf_r+0x56>
 80156be:	6875      	ldr	r5, [r6, #4]
 80156c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156c2:	07d9      	lsls	r1, r3, #31
 80156c4:	d405      	bmi.n	80156d2 <_vfiprintf_r+0x32>
 80156c6:	89ab      	ldrh	r3, [r5, #12]
 80156c8:	059a      	lsls	r2, r3, #22
 80156ca:	d402      	bmi.n	80156d2 <_vfiprintf_r+0x32>
 80156cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156ce:	f7ff fac6 	bl	8014c5e <__retarget_lock_acquire_recursive>
 80156d2:	89ab      	ldrh	r3, [r5, #12]
 80156d4:	071b      	lsls	r3, r3, #28
 80156d6:	d501      	bpl.n	80156dc <_vfiprintf_r+0x3c>
 80156d8:	692b      	ldr	r3, [r5, #16]
 80156da:	b9eb      	cbnz	r3, 8015718 <_vfiprintf_r+0x78>
 80156dc:	4629      	mov	r1, r5
 80156de:	4630      	mov	r0, r6
 80156e0:	f000 f9b6 	bl	8015a50 <__swsetup_r>
 80156e4:	b1c0      	cbz	r0, 8015718 <_vfiprintf_r+0x78>
 80156e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156e8:	07dc      	lsls	r4, r3, #31
 80156ea:	d50e      	bpl.n	801570a <_vfiprintf_r+0x6a>
 80156ec:	f04f 30ff 	mov.w	r0, #4294967295
 80156f0:	b01d      	add	sp, #116	; 0x74
 80156f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156f6:	4b7b      	ldr	r3, [pc, #492]	; (80158e4 <_vfiprintf_r+0x244>)
 80156f8:	429d      	cmp	r5, r3
 80156fa:	d101      	bne.n	8015700 <_vfiprintf_r+0x60>
 80156fc:	68b5      	ldr	r5, [r6, #8]
 80156fe:	e7df      	b.n	80156c0 <_vfiprintf_r+0x20>
 8015700:	4b79      	ldr	r3, [pc, #484]	; (80158e8 <_vfiprintf_r+0x248>)
 8015702:	429d      	cmp	r5, r3
 8015704:	bf08      	it	eq
 8015706:	68f5      	ldreq	r5, [r6, #12]
 8015708:	e7da      	b.n	80156c0 <_vfiprintf_r+0x20>
 801570a:	89ab      	ldrh	r3, [r5, #12]
 801570c:	0598      	lsls	r0, r3, #22
 801570e:	d4ed      	bmi.n	80156ec <_vfiprintf_r+0x4c>
 8015710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015712:	f7ff faa5 	bl	8014c60 <__retarget_lock_release_recursive>
 8015716:	e7e9      	b.n	80156ec <_vfiprintf_r+0x4c>
 8015718:	2300      	movs	r3, #0
 801571a:	9309      	str	r3, [sp, #36]	; 0x24
 801571c:	2320      	movs	r3, #32
 801571e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015722:	f8cd 800c 	str.w	r8, [sp, #12]
 8015726:	2330      	movs	r3, #48	; 0x30
 8015728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80158ec <_vfiprintf_r+0x24c>
 801572c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015730:	f04f 0901 	mov.w	r9, #1
 8015734:	4623      	mov	r3, r4
 8015736:	469a      	mov	sl, r3
 8015738:	f813 2b01 	ldrb.w	r2, [r3], #1
 801573c:	b10a      	cbz	r2, 8015742 <_vfiprintf_r+0xa2>
 801573e:	2a25      	cmp	r2, #37	; 0x25
 8015740:	d1f9      	bne.n	8015736 <_vfiprintf_r+0x96>
 8015742:	ebba 0b04 	subs.w	fp, sl, r4
 8015746:	d00b      	beq.n	8015760 <_vfiprintf_r+0xc0>
 8015748:	465b      	mov	r3, fp
 801574a:	4622      	mov	r2, r4
 801574c:	4629      	mov	r1, r5
 801574e:	4630      	mov	r0, r6
 8015750:	f7ff ff93 	bl	801567a <__sfputs_r>
 8015754:	3001      	adds	r0, #1
 8015756:	f000 80aa 	beq.w	80158ae <_vfiprintf_r+0x20e>
 801575a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801575c:	445a      	add	r2, fp
 801575e:	9209      	str	r2, [sp, #36]	; 0x24
 8015760:	f89a 3000 	ldrb.w	r3, [sl]
 8015764:	2b00      	cmp	r3, #0
 8015766:	f000 80a2 	beq.w	80158ae <_vfiprintf_r+0x20e>
 801576a:	2300      	movs	r3, #0
 801576c:	f04f 32ff 	mov.w	r2, #4294967295
 8015770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015774:	f10a 0a01 	add.w	sl, sl, #1
 8015778:	9304      	str	r3, [sp, #16]
 801577a:	9307      	str	r3, [sp, #28]
 801577c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015780:	931a      	str	r3, [sp, #104]	; 0x68
 8015782:	4654      	mov	r4, sl
 8015784:	2205      	movs	r2, #5
 8015786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801578a:	4858      	ldr	r0, [pc, #352]	; (80158ec <_vfiprintf_r+0x24c>)
 801578c:	f7ea fd38 	bl	8000200 <memchr>
 8015790:	9a04      	ldr	r2, [sp, #16]
 8015792:	b9d8      	cbnz	r0, 80157cc <_vfiprintf_r+0x12c>
 8015794:	06d1      	lsls	r1, r2, #27
 8015796:	bf44      	itt	mi
 8015798:	2320      	movmi	r3, #32
 801579a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801579e:	0713      	lsls	r3, r2, #28
 80157a0:	bf44      	itt	mi
 80157a2:	232b      	movmi	r3, #43	; 0x2b
 80157a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157a8:	f89a 3000 	ldrb.w	r3, [sl]
 80157ac:	2b2a      	cmp	r3, #42	; 0x2a
 80157ae:	d015      	beq.n	80157dc <_vfiprintf_r+0x13c>
 80157b0:	9a07      	ldr	r2, [sp, #28]
 80157b2:	4654      	mov	r4, sl
 80157b4:	2000      	movs	r0, #0
 80157b6:	f04f 0c0a 	mov.w	ip, #10
 80157ba:	4621      	mov	r1, r4
 80157bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157c0:	3b30      	subs	r3, #48	; 0x30
 80157c2:	2b09      	cmp	r3, #9
 80157c4:	d94e      	bls.n	8015864 <_vfiprintf_r+0x1c4>
 80157c6:	b1b0      	cbz	r0, 80157f6 <_vfiprintf_r+0x156>
 80157c8:	9207      	str	r2, [sp, #28]
 80157ca:	e014      	b.n	80157f6 <_vfiprintf_r+0x156>
 80157cc:	eba0 0308 	sub.w	r3, r0, r8
 80157d0:	fa09 f303 	lsl.w	r3, r9, r3
 80157d4:	4313      	orrs	r3, r2
 80157d6:	9304      	str	r3, [sp, #16]
 80157d8:	46a2      	mov	sl, r4
 80157da:	e7d2      	b.n	8015782 <_vfiprintf_r+0xe2>
 80157dc:	9b03      	ldr	r3, [sp, #12]
 80157de:	1d19      	adds	r1, r3, #4
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	9103      	str	r1, [sp, #12]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	bfbb      	ittet	lt
 80157e8:	425b      	neglt	r3, r3
 80157ea:	f042 0202 	orrlt.w	r2, r2, #2
 80157ee:	9307      	strge	r3, [sp, #28]
 80157f0:	9307      	strlt	r3, [sp, #28]
 80157f2:	bfb8      	it	lt
 80157f4:	9204      	strlt	r2, [sp, #16]
 80157f6:	7823      	ldrb	r3, [r4, #0]
 80157f8:	2b2e      	cmp	r3, #46	; 0x2e
 80157fa:	d10c      	bne.n	8015816 <_vfiprintf_r+0x176>
 80157fc:	7863      	ldrb	r3, [r4, #1]
 80157fe:	2b2a      	cmp	r3, #42	; 0x2a
 8015800:	d135      	bne.n	801586e <_vfiprintf_r+0x1ce>
 8015802:	9b03      	ldr	r3, [sp, #12]
 8015804:	1d1a      	adds	r2, r3, #4
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	9203      	str	r2, [sp, #12]
 801580a:	2b00      	cmp	r3, #0
 801580c:	bfb8      	it	lt
 801580e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015812:	3402      	adds	r4, #2
 8015814:	9305      	str	r3, [sp, #20]
 8015816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80158fc <_vfiprintf_r+0x25c>
 801581a:	7821      	ldrb	r1, [r4, #0]
 801581c:	2203      	movs	r2, #3
 801581e:	4650      	mov	r0, sl
 8015820:	f7ea fcee 	bl	8000200 <memchr>
 8015824:	b140      	cbz	r0, 8015838 <_vfiprintf_r+0x198>
 8015826:	2340      	movs	r3, #64	; 0x40
 8015828:	eba0 000a 	sub.w	r0, r0, sl
 801582c:	fa03 f000 	lsl.w	r0, r3, r0
 8015830:	9b04      	ldr	r3, [sp, #16]
 8015832:	4303      	orrs	r3, r0
 8015834:	3401      	adds	r4, #1
 8015836:	9304      	str	r3, [sp, #16]
 8015838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801583c:	482c      	ldr	r0, [pc, #176]	; (80158f0 <_vfiprintf_r+0x250>)
 801583e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015842:	2206      	movs	r2, #6
 8015844:	f7ea fcdc 	bl	8000200 <memchr>
 8015848:	2800      	cmp	r0, #0
 801584a:	d03f      	beq.n	80158cc <_vfiprintf_r+0x22c>
 801584c:	4b29      	ldr	r3, [pc, #164]	; (80158f4 <_vfiprintf_r+0x254>)
 801584e:	bb1b      	cbnz	r3, 8015898 <_vfiprintf_r+0x1f8>
 8015850:	9b03      	ldr	r3, [sp, #12]
 8015852:	3307      	adds	r3, #7
 8015854:	f023 0307 	bic.w	r3, r3, #7
 8015858:	3308      	adds	r3, #8
 801585a:	9303      	str	r3, [sp, #12]
 801585c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801585e:	443b      	add	r3, r7
 8015860:	9309      	str	r3, [sp, #36]	; 0x24
 8015862:	e767      	b.n	8015734 <_vfiprintf_r+0x94>
 8015864:	fb0c 3202 	mla	r2, ip, r2, r3
 8015868:	460c      	mov	r4, r1
 801586a:	2001      	movs	r0, #1
 801586c:	e7a5      	b.n	80157ba <_vfiprintf_r+0x11a>
 801586e:	2300      	movs	r3, #0
 8015870:	3401      	adds	r4, #1
 8015872:	9305      	str	r3, [sp, #20]
 8015874:	4619      	mov	r1, r3
 8015876:	f04f 0c0a 	mov.w	ip, #10
 801587a:	4620      	mov	r0, r4
 801587c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015880:	3a30      	subs	r2, #48	; 0x30
 8015882:	2a09      	cmp	r2, #9
 8015884:	d903      	bls.n	801588e <_vfiprintf_r+0x1ee>
 8015886:	2b00      	cmp	r3, #0
 8015888:	d0c5      	beq.n	8015816 <_vfiprintf_r+0x176>
 801588a:	9105      	str	r1, [sp, #20]
 801588c:	e7c3      	b.n	8015816 <_vfiprintf_r+0x176>
 801588e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015892:	4604      	mov	r4, r0
 8015894:	2301      	movs	r3, #1
 8015896:	e7f0      	b.n	801587a <_vfiprintf_r+0x1da>
 8015898:	ab03      	add	r3, sp, #12
 801589a:	9300      	str	r3, [sp, #0]
 801589c:	462a      	mov	r2, r5
 801589e:	4b16      	ldr	r3, [pc, #88]	; (80158f8 <_vfiprintf_r+0x258>)
 80158a0:	a904      	add	r1, sp, #16
 80158a2:	4630      	mov	r0, r6
 80158a4:	f7fd fd36 	bl	8013314 <_printf_float>
 80158a8:	4607      	mov	r7, r0
 80158aa:	1c78      	adds	r0, r7, #1
 80158ac:	d1d6      	bne.n	801585c <_vfiprintf_r+0x1bc>
 80158ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80158b0:	07d9      	lsls	r1, r3, #31
 80158b2:	d405      	bmi.n	80158c0 <_vfiprintf_r+0x220>
 80158b4:	89ab      	ldrh	r3, [r5, #12]
 80158b6:	059a      	lsls	r2, r3, #22
 80158b8:	d402      	bmi.n	80158c0 <_vfiprintf_r+0x220>
 80158ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80158bc:	f7ff f9d0 	bl	8014c60 <__retarget_lock_release_recursive>
 80158c0:	89ab      	ldrh	r3, [r5, #12]
 80158c2:	065b      	lsls	r3, r3, #25
 80158c4:	f53f af12 	bmi.w	80156ec <_vfiprintf_r+0x4c>
 80158c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158ca:	e711      	b.n	80156f0 <_vfiprintf_r+0x50>
 80158cc:	ab03      	add	r3, sp, #12
 80158ce:	9300      	str	r3, [sp, #0]
 80158d0:	462a      	mov	r2, r5
 80158d2:	4b09      	ldr	r3, [pc, #36]	; (80158f8 <_vfiprintf_r+0x258>)
 80158d4:	a904      	add	r1, sp, #16
 80158d6:	4630      	mov	r0, r6
 80158d8:	f7fd ffc0 	bl	801385c <_printf_i>
 80158dc:	e7e4      	b.n	80158a8 <_vfiprintf_r+0x208>
 80158de:	bf00      	nop
 80158e0:	08019f10 	.word	0x08019f10
 80158e4:	08019f30 	.word	0x08019f30
 80158e8:	08019ef0 	.word	0x08019ef0
 80158ec:	0801a0ac 	.word	0x0801a0ac
 80158f0:	0801a0b6 	.word	0x0801a0b6
 80158f4:	08013315 	.word	0x08013315
 80158f8:	0801567b 	.word	0x0801567b
 80158fc:	0801a0b2 	.word	0x0801a0b2

08015900 <__sread>:
 8015900:	b510      	push	{r4, lr}
 8015902:	460c      	mov	r4, r1
 8015904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015908:	f000 fa98 	bl	8015e3c <_read_r>
 801590c:	2800      	cmp	r0, #0
 801590e:	bfab      	itete	ge
 8015910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015912:	89a3      	ldrhlt	r3, [r4, #12]
 8015914:	181b      	addge	r3, r3, r0
 8015916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801591a:	bfac      	ite	ge
 801591c:	6563      	strge	r3, [r4, #84]	; 0x54
 801591e:	81a3      	strhlt	r3, [r4, #12]
 8015920:	bd10      	pop	{r4, pc}

08015922 <__swrite>:
 8015922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015926:	461f      	mov	r7, r3
 8015928:	898b      	ldrh	r3, [r1, #12]
 801592a:	05db      	lsls	r3, r3, #23
 801592c:	4605      	mov	r5, r0
 801592e:	460c      	mov	r4, r1
 8015930:	4616      	mov	r6, r2
 8015932:	d505      	bpl.n	8015940 <__swrite+0x1e>
 8015934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015938:	2302      	movs	r3, #2
 801593a:	2200      	movs	r2, #0
 801593c:	f000 f9d0 	bl	8015ce0 <_lseek_r>
 8015940:	89a3      	ldrh	r3, [r4, #12]
 8015942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801594a:	81a3      	strh	r3, [r4, #12]
 801594c:	4632      	mov	r2, r6
 801594e:	463b      	mov	r3, r7
 8015950:	4628      	mov	r0, r5
 8015952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015956:	f000 b869 	b.w	8015a2c <_write_r>

0801595a <__sseek>:
 801595a:	b510      	push	{r4, lr}
 801595c:	460c      	mov	r4, r1
 801595e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015962:	f000 f9bd 	bl	8015ce0 <_lseek_r>
 8015966:	1c43      	adds	r3, r0, #1
 8015968:	89a3      	ldrh	r3, [r4, #12]
 801596a:	bf15      	itete	ne
 801596c:	6560      	strne	r0, [r4, #84]	; 0x54
 801596e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015976:	81a3      	strheq	r3, [r4, #12]
 8015978:	bf18      	it	ne
 801597a:	81a3      	strhne	r3, [r4, #12]
 801597c:	bd10      	pop	{r4, pc}

0801597e <__sclose>:
 801597e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015982:	f000 b8db 	b.w	8015b3c <_close_r>
	...

08015988 <__swbuf_r>:
 8015988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598a:	460e      	mov	r6, r1
 801598c:	4614      	mov	r4, r2
 801598e:	4605      	mov	r5, r0
 8015990:	b118      	cbz	r0, 801599a <__swbuf_r+0x12>
 8015992:	6983      	ldr	r3, [r0, #24]
 8015994:	b90b      	cbnz	r3, 801599a <__swbuf_r+0x12>
 8015996:	f7ff f8ad 	bl	8014af4 <__sinit>
 801599a:	4b21      	ldr	r3, [pc, #132]	; (8015a20 <__swbuf_r+0x98>)
 801599c:	429c      	cmp	r4, r3
 801599e:	d12b      	bne.n	80159f8 <__swbuf_r+0x70>
 80159a0:	686c      	ldr	r4, [r5, #4]
 80159a2:	69a3      	ldr	r3, [r4, #24]
 80159a4:	60a3      	str	r3, [r4, #8]
 80159a6:	89a3      	ldrh	r3, [r4, #12]
 80159a8:	071a      	lsls	r2, r3, #28
 80159aa:	d52f      	bpl.n	8015a0c <__swbuf_r+0x84>
 80159ac:	6923      	ldr	r3, [r4, #16]
 80159ae:	b36b      	cbz	r3, 8015a0c <__swbuf_r+0x84>
 80159b0:	6923      	ldr	r3, [r4, #16]
 80159b2:	6820      	ldr	r0, [r4, #0]
 80159b4:	1ac0      	subs	r0, r0, r3
 80159b6:	6963      	ldr	r3, [r4, #20]
 80159b8:	b2f6      	uxtb	r6, r6
 80159ba:	4283      	cmp	r3, r0
 80159bc:	4637      	mov	r7, r6
 80159be:	dc04      	bgt.n	80159ca <__swbuf_r+0x42>
 80159c0:	4621      	mov	r1, r4
 80159c2:	4628      	mov	r0, r5
 80159c4:	f000 f950 	bl	8015c68 <_fflush_r>
 80159c8:	bb30      	cbnz	r0, 8015a18 <__swbuf_r+0x90>
 80159ca:	68a3      	ldr	r3, [r4, #8]
 80159cc:	3b01      	subs	r3, #1
 80159ce:	60a3      	str	r3, [r4, #8]
 80159d0:	6823      	ldr	r3, [r4, #0]
 80159d2:	1c5a      	adds	r2, r3, #1
 80159d4:	6022      	str	r2, [r4, #0]
 80159d6:	701e      	strb	r6, [r3, #0]
 80159d8:	6963      	ldr	r3, [r4, #20]
 80159da:	3001      	adds	r0, #1
 80159dc:	4283      	cmp	r3, r0
 80159de:	d004      	beq.n	80159ea <__swbuf_r+0x62>
 80159e0:	89a3      	ldrh	r3, [r4, #12]
 80159e2:	07db      	lsls	r3, r3, #31
 80159e4:	d506      	bpl.n	80159f4 <__swbuf_r+0x6c>
 80159e6:	2e0a      	cmp	r6, #10
 80159e8:	d104      	bne.n	80159f4 <__swbuf_r+0x6c>
 80159ea:	4621      	mov	r1, r4
 80159ec:	4628      	mov	r0, r5
 80159ee:	f000 f93b 	bl	8015c68 <_fflush_r>
 80159f2:	b988      	cbnz	r0, 8015a18 <__swbuf_r+0x90>
 80159f4:	4638      	mov	r0, r7
 80159f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159f8:	4b0a      	ldr	r3, [pc, #40]	; (8015a24 <__swbuf_r+0x9c>)
 80159fa:	429c      	cmp	r4, r3
 80159fc:	d101      	bne.n	8015a02 <__swbuf_r+0x7a>
 80159fe:	68ac      	ldr	r4, [r5, #8]
 8015a00:	e7cf      	b.n	80159a2 <__swbuf_r+0x1a>
 8015a02:	4b09      	ldr	r3, [pc, #36]	; (8015a28 <__swbuf_r+0xa0>)
 8015a04:	429c      	cmp	r4, r3
 8015a06:	bf08      	it	eq
 8015a08:	68ec      	ldreq	r4, [r5, #12]
 8015a0a:	e7ca      	b.n	80159a2 <__swbuf_r+0x1a>
 8015a0c:	4621      	mov	r1, r4
 8015a0e:	4628      	mov	r0, r5
 8015a10:	f000 f81e 	bl	8015a50 <__swsetup_r>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d0cb      	beq.n	80159b0 <__swbuf_r+0x28>
 8015a18:	f04f 37ff 	mov.w	r7, #4294967295
 8015a1c:	e7ea      	b.n	80159f4 <__swbuf_r+0x6c>
 8015a1e:	bf00      	nop
 8015a20:	08019f10 	.word	0x08019f10
 8015a24:	08019f30 	.word	0x08019f30
 8015a28:	08019ef0 	.word	0x08019ef0

08015a2c <_write_r>:
 8015a2c:	b538      	push	{r3, r4, r5, lr}
 8015a2e:	4d07      	ldr	r5, [pc, #28]	; (8015a4c <_write_r+0x20>)
 8015a30:	4604      	mov	r4, r0
 8015a32:	4608      	mov	r0, r1
 8015a34:	4611      	mov	r1, r2
 8015a36:	2200      	movs	r2, #0
 8015a38:	602a      	str	r2, [r5, #0]
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	f7ee fb59 	bl	80040f2 <_write>
 8015a40:	1c43      	adds	r3, r0, #1
 8015a42:	d102      	bne.n	8015a4a <_write_r+0x1e>
 8015a44:	682b      	ldr	r3, [r5, #0]
 8015a46:	b103      	cbz	r3, 8015a4a <_write_r+0x1e>
 8015a48:	6023      	str	r3, [r4, #0]
 8015a4a:	bd38      	pop	{r3, r4, r5, pc}
 8015a4c:	20009100 	.word	0x20009100

08015a50 <__swsetup_r>:
 8015a50:	4b32      	ldr	r3, [pc, #200]	; (8015b1c <__swsetup_r+0xcc>)
 8015a52:	b570      	push	{r4, r5, r6, lr}
 8015a54:	681d      	ldr	r5, [r3, #0]
 8015a56:	4606      	mov	r6, r0
 8015a58:	460c      	mov	r4, r1
 8015a5a:	b125      	cbz	r5, 8015a66 <__swsetup_r+0x16>
 8015a5c:	69ab      	ldr	r3, [r5, #24]
 8015a5e:	b913      	cbnz	r3, 8015a66 <__swsetup_r+0x16>
 8015a60:	4628      	mov	r0, r5
 8015a62:	f7ff f847 	bl	8014af4 <__sinit>
 8015a66:	4b2e      	ldr	r3, [pc, #184]	; (8015b20 <__swsetup_r+0xd0>)
 8015a68:	429c      	cmp	r4, r3
 8015a6a:	d10f      	bne.n	8015a8c <__swsetup_r+0x3c>
 8015a6c:	686c      	ldr	r4, [r5, #4]
 8015a6e:	89a3      	ldrh	r3, [r4, #12]
 8015a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a74:	0719      	lsls	r1, r3, #28
 8015a76:	d42c      	bmi.n	8015ad2 <__swsetup_r+0x82>
 8015a78:	06dd      	lsls	r5, r3, #27
 8015a7a:	d411      	bmi.n	8015aa0 <__swsetup_r+0x50>
 8015a7c:	2309      	movs	r3, #9
 8015a7e:	6033      	str	r3, [r6, #0]
 8015a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015a84:	81a3      	strh	r3, [r4, #12]
 8015a86:	f04f 30ff 	mov.w	r0, #4294967295
 8015a8a:	e03e      	b.n	8015b0a <__swsetup_r+0xba>
 8015a8c:	4b25      	ldr	r3, [pc, #148]	; (8015b24 <__swsetup_r+0xd4>)
 8015a8e:	429c      	cmp	r4, r3
 8015a90:	d101      	bne.n	8015a96 <__swsetup_r+0x46>
 8015a92:	68ac      	ldr	r4, [r5, #8]
 8015a94:	e7eb      	b.n	8015a6e <__swsetup_r+0x1e>
 8015a96:	4b24      	ldr	r3, [pc, #144]	; (8015b28 <__swsetup_r+0xd8>)
 8015a98:	429c      	cmp	r4, r3
 8015a9a:	bf08      	it	eq
 8015a9c:	68ec      	ldreq	r4, [r5, #12]
 8015a9e:	e7e6      	b.n	8015a6e <__swsetup_r+0x1e>
 8015aa0:	0758      	lsls	r0, r3, #29
 8015aa2:	d512      	bpl.n	8015aca <__swsetup_r+0x7a>
 8015aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015aa6:	b141      	cbz	r1, 8015aba <__swsetup_r+0x6a>
 8015aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015aac:	4299      	cmp	r1, r3
 8015aae:	d002      	beq.n	8015ab6 <__swsetup_r+0x66>
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f7fd fae5 	bl	8013080 <_free_r>
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8015aba:	89a3      	ldrh	r3, [r4, #12]
 8015abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015ac0:	81a3      	strh	r3, [r4, #12]
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	6063      	str	r3, [r4, #4]
 8015ac6:	6923      	ldr	r3, [r4, #16]
 8015ac8:	6023      	str	r3, [r4, #0]
 8015aca:	89a3      	ldrh	r3, [r4, #12]
 8015acc:	f043 0308 	orr.w	r3, r3, #8
 8015ad0:	81a3      	strh	r3, [r4, #12]
 8015ad2:	6923      	ldr	r3, [r4, #16]
 8015ad4:	b94b      	cbnz	r3, 8015aea <__swsetup_r+0x9a>
 8015ad6:	89a3      	ldrh	r3, [r4, #12]
 8015ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ae0:	d003      	beq.n	8015aea <__swsetup_r+0x9a>
 8015ae2:	4621      	mov	r1, r4
 8015ae4:	4630      	mov	r0, r6
 8015ae6:	f000 f931 	bl	8015d4c <__smakebuf_r>
 8015aea:	89a0      	ldrh	r0, [r4, #12]
 8015aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015af0:	f010 0301 	ands.w	r3, r0, #1
 8015af4:	d00a      	beq.n	8015b0c <__swsetup_r+0xbc>
 8015af6:	2300      	movs	r3, #0
 8015af8:	60a3      	str	r3, [r4, #8]
 8015afa:	6963      	ldr	r3, [r4, #20]
 8015afc:	425b      	negs	r3, r3
 8015afe:	61a3      	str	r3, [r4, #24]
 8015b00:	6923      	ldr	r3, [r4, #16]
 8015b02:	b943      	cbnz	r3, 8015b16 <__swsetup_r+0xc6>
 8015b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015b08:	d1ba      	bne.n	8015a80 <__swsetup_r+0x30>
 8015b0a:	bd70      	pop	{r4, r5, r6, pc}
 8015b0c:	0781      	lsls	r1, r0, #30
 8015b0e:	bf58      	it	pl
 8015b10:	6963      	ldrpl	r3, [r4, #20]
 8015b12:	60a3      	str	r3, [r4, #8]
 8015b14:	e7f4      	b.n	8015b00 <__swsetup_r+0xb0>
 8015b16:	2000      	movs	r0, #0
 8015b18:	e7f7      	b.n	8015b0a <__swsetup_r+0xba>
 8015b1a:	bf00      	nop
 8015b1c:	20000054 	.word	0x20000054
 8015b20:	08019f10 	.word	0x08019f10
 8015b24:	08019f30 	.word	0x08019f30
 8015b28:	08019ef0 	.word	0x08019ef0

08015b2c <abort>:
 8015b2c:	b508      	push	{r3, lr}
 8015b2e:	2006      	movs	r0, #6
 8015b30:	f000 f9be 	bl	8015eb0 <raise>
 8015b34:	2001      	movs	r0, #1
 8015b36:	f7ee fab5 	bl	80040a4 <_exit>
	...

08015b3c <_close_r>:
 8015b3c:	b538      	push	{r3, r4, r5, lr}
 8015b3e:	4d06      	ldr	r5, [pc, #24]	; (8015b58 <_close_r+0x1c>)
 8015b40:	2300      	movs	r3, #0
 8015b42:	4604      	mov	r4, r0
 8015b44:	4608      	mov	r0, r1
 8015b46:	602b      	str	r3, [r5, #0]
 8015b48:	f7ee faef 	bl	800412a <_close>
 8015b4c:	1c43      	adds	r3, r0, #1
 8015b4e:	d102      	bne.n	8015b56 <_close_r+0x1a>
 8015b50:	682b      	ldr	r3, [r5, #0]
 8015b52:	b103      	cbz	r3, 8015b56 <_close_r+0x1a>
 8015b54:	6023      	str	r3, [r4, #0]
 8015b56:	bd38      	pop	{r3, r4, r5, pc}
 8015b58:	20009100 	.word	0x20009100

08015b5c <__sflush_r>:
 8015b5c:	898a      	ldrh	r2, [r1, #12]
 8015b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b62:	4605      	mov	r5, r0
 8015b64:	0710      	lsls	r0, r2, #28
 8015b66:	460c      	mov	r4, r1
 8015b68:	d458      	bmi.n	8015c1c <__sflush_r+0xc0>
 8015b6a:	684b      	ldr	r3, [r1, #4]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	dc05      	bgt.n	8015b7c <__sflush_r+0x20>
 8015b70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	dc02      	bgt.n	8015b7c <__sflush_r+0x20>
 8015b76:	2000      	movs	r0, #0
 8015b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015b7e:	2e00      	cmp	r6, #0
 8015b80:	d0f9      	beq.n	8015b76 <__sflush_r+0x1a>
 8015b82:	2300      	movs	r3, #0
 8015b84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015b88:	682f      	ldr	r7, [r5, #0]
 8015b8a:	602b      	str	r3, [r5, #0]
 8015b8c:	d032      	beq.n	8015bf4 <__sflush_r+0x98>
 8015b8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015b90:	89a3      	ldrh	r3, [r4, #12]
 8015b92:	075a      	lsls	r2, r3, #29
 8015b94:	d505      	bpl.n	8015ba2 <__sflush_r+0x46>
 8015b96:	6863      	ldr	r3, [r4, #4]
 8015b98:	1ac0      	subs	r0, r0, r3
 8015b9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015b9c:	b10b      	cbz	r3, 8015ba2 <__sflush_r+0x46>
 8015b9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ba0:	1ac0      	subs	r0, r0, r3
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ba8:	6a21      	ldr	r1, [r4, #32]
 8015baa:	4628      	mov	r0, r5
 8015bac:	47b0      	blx	r6
 8015bae:	1c43      	adds	r3, r0, #1
 8015bb0:	89a3      	ldrh	r3, [r4, #12]
 8015bb2:	d106      	bne.n	8015bc2 <__sflush_r+0x66>
 8015bb4:	6829      	ldr	r1, [r5, #0]
 8015bb6:	291d      	cmp	r1, #29
 8015bb8:	d82c      	bhi.n	8015c14 <__sflush_r+0xb8>
 8015bba:	4a2a      	ldr	r2, [pc, #168]	; (8015c64 <__sflush_r+0x108>)
 8015bbc:	40ca      	lsrs	r2, r1
 8015bbe:	07d6      	lsls	r6, r2, #31
 8015bc0:	d528      	bpl.n	8015c14 <__sflush_r+0xb8>
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	6062      	str	r2, [r4, #4]
 8015bc6:	04d9      	lsls	r1, r3, #19
 8015bc8:	6922      	ldr	r2, [r4, #16]
 8015bca:	6022      	str	r2, [r4, #0]
 8015bcc:	d504      	bpl.n	8015bd8 <__sflush_r+0x7c>
 8015bce:	1c42      	adds	r2, r0, #1
 8015bd0:	d101      	bne.n	8015bd6 <__sflush_r+0x7a>
 8015bd2:	682b      	ldr	r3, [r5, #0]
 8015bd4:	b903      	cbnz	r3, 8015bd8 <__sflush_r+0x7c>
 8015bd6:	6560      	str	r0, [r4, #84]	; 0x54
 8015bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015bda:	602f      	str	r7, [r5, #0]
 8015bdc:	2900      	cmp	r1, #0
 8015bde:	d0ca      	beq.n	8015b76 <__sflush_r+0x1a>
 8015be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015be4:	4299      	cmp	r1, r3
 8015be6:	d002      	beq.n	8015bee <__sflush_r+0x92>
 8015be8:	4628      	mov	r0, r5
 8015bea:	f7fd fa49 	bl	8013080 <_free_r>
 8015bee:	2000      	movs	r0, #0
 8015bf0:	6360      	str	r0, [r4, #52]	; 0x34
 8015bf2:	e7c1      	b.n	8015b78 <__sflush_r+0x1c>
 8015bf4:	6a21      	ldr	r1, [r4, #32]
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	4628      	mov	r0, r5
 8015bfa:	47b0      	blx	r6
 8015bfc:	1c41      	adds	r1, r0, #1
 8015bfe:	d1c7      	bne.n	8015b90 <__sflush_r+0x34>
 8015c00:	682b      	ldr	r3, [r5, #0]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d0c4      	beq.n	8015b90 <__sflush_r+0x34>
 8015c06:	2b1d      	cmp	r3, #29
 8015c08:	d001      	beq.n	8015c0e <__sflush_r+0xb2>
 8015c0a:	2b16      	cmp	r3, #22
 8015c0c:	d101      	bne.n	8015c12 <__sflush_r+0xb6>
 8015c0e:	602f      	str	r7, [r5, #0]
 8015c10:	e7b1      	b.n	8015b76 <__sflush_r+0x1a>
 8015c12:	89a3      	ldrh	r3, [r4, #12]
 8015c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c18:	81a3      	strh	r3, [r4, #12]
 8015c1a:	e7ad      	b.n	8015b78 <__sflush_r+0x1c>
 8015c1c:	690f      	ldr	r7, [r1, #16]
 8015c1e:	2f00      	cmp	r7, #0
 8015c20:	d0a9      	beq.n	8015b76 <__sflush_r+0x1a>
 8015c22:	0793      	lsls	r3, r2, #30
 8015c24:	680e      	ldr	r6, [r1, #0]
 8015c26:	bf08      	it	eq
 8015c28:	694b      	ldreq	r3, [r1, #20]
 8015c2a:	600f      	str	r7, [r1, #0]
 8015c2c:	bf18      	it	ne
 8015c2e:	2300      	movne	r3, #0
 8015c30:	eba6 0807 	sub.w	r8, r6, r7
 8015c34:	608b      	str	r3, [r1, #8]
 8015c36:	f1b8 0f00 	cmp.w	r8, #0
 8015c3a:	dd9c      	ble.n	8015b76 <__sflush_r+0x1a>
 8015c3c:	6a21      	ldr	r1, [r4, #32]
 8015c3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015c40:	4643      	mov	r3, r8
 8015c42:	463a      	mov	r2, r7
 8015c44:	4628      	mov	r0, r5
 8015c46:	47b0      	blx	r6
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	dc06      	bgt.n	8015c5a <__sflush_r+0xfe>
 8015c4c:	89a3      	ldrh	r3, [r4, #12]
 8015c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c52:	81a3      	strh	r3, [r4, #12]
 8015c54:	f04f 30ff 	mov.w	r0, #4294967295
 8015c58:	e78e      	b.n	8015b78 <__sflush_r+0x1c>
 8015c5a:	4407      	add	r7, r0
 8015c5c:	eba8 0800 	sub.w	r8, r8, r0
 8015c60:	e7e9      	b.n	8015c36 <__sflush_r+0xda>
 8015c62:	bf00      	nop
 8015c64:	20400001 	.word	0x20400001

08015c68 <_fflush_r>:
 8015c68:	b538      	push	{r3, r4, r5, lr}
 8015c6a:	690b      	ldr	r3, [r1, #16]
 8015c6c:	4605      	mov	r5, r0
 8015c6e:	460c      	mov	r4, r1
 8015c70:	b913      	cbnz	r3, 8015c78 <_fflush_r+0x10>
 8015c72:	2500      	movs	r5, #0
 8015c74:	4628      	mov	r0, r5
 8015c76:	bd38      	pop	{r3, r4, r5, pc}
 8015c78:	b118      	cbz	r0, 8015c82 <_fflush_r+0x1a>
 8015c7a:	6983      	ldr	r3, [r0, #24]
 8015c7c:	b90b      	cbnz	r3, 8015c82 <_fflush_r+0x1a>
 8015c7e:	f7fe ff39 	bl	8014af4 <__sinit>
 8015c82:	4b14      	ldr	r3, [pc, #80]	; (8015cd4 <_fflush_r+0x6c>)
 8015c84:	429c      	cmp	r4, r3
 8015c86:	d11b      	bne.n	8015cc0 <_fflush_r+0x58>
 8015c88:	686c      	ldr	r4, [r5, #4]
 8015c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d0ef      	beq.n	8015c72 <_fflush_r+0xa>
 8015c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015c94:	07d0      	lsls	r0, r2, #31
 8015c96:	d404      	bmi.n	8015ca2 <_fflush_r+0x3a>
 8015c98:	0599      	lsls	r1, r3, #22
 8015c9a:	d402      	bmi.n	8015ca2 <_fflush_r+0x3a>
 8015c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c9e:	f7fe ffde 	bl	8014c5e <__retarget_lock_acquire_recursive>
 8015ca2:	4628      	mov	r0, r5
 8015ca4:	4621      	mov	r1, r4
 8015ca6:	f7ff ff59 	bl	8015b5c <__sflush_r>
 8015caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015cac:	07da      	lsls	r2, r3, #31
 8015cae:	4605      	mov	r5, r0
 8015cb0:	d4e0      	bmi.n	8015c74 <_fflush_r+0xc>
 8015cb2:	89a3      	ldrh	r3, [r4, #12]
 8015cb4:	059b      	lsls	r3, r3, #22
 8015cb6:	d4dd      	bmi.n	8015c74 <_fflush_r+0xc>
 8015cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015cba:	f7fe ffd1 	bl	8014c60 <__retarget_lock_release_recursive>
 8015cbe:	e7d9      	b.n	8015c74 <_fflush_r+0xc>
 8015cc0:	4b05      	ldr	r3, [pc, #20]	; (8015cd8 <_fflush_r+0x70>)
 8015cc2:	429c      	cmp	r4, r3
 8015cc4:	d101      	bne.n	8015cca <_fflush_r+0x62>
 8015cc6:	68ac      	ldr	r4, [r5, #8]
 8015cc8:	e7df      	b.n	8015c8a <_fflush_r+0x22>
 8015cca:	4b04      	ldr	r3, [pc, #16]	; (8015cdc <_fflush_r+0x74>)
 8015ccc:	429c      	cmp	r4, r3
 8015cce:	bf08      	it	eq
 8015cd0:	68ec      	ldreq	r4, [r5, #12]
 8015cd2:	e7da      	b.n	8015c8a <_fflush_r+0x22>
 8015cd4:	08019f10 	.word	0x08019f10
 8015cd8:	08019f30 	.word	0x08019f30
 8015cdc:	08019ef0 	.word	0x08019ef0

08015ce0 <_lseek_r>:
 8015ce0:	b538      	push	{r3, r4, r5, lr}
 8015ce2:	4d07      	ldr	r5, [pc, #28]	; (8015d00 <_lseek_r+0x20>)
 8015ce4:	4604      	mov	r4, r0
 8015ce6:	4608      	mov	r0, r1
 8015ce8:	4611      	mov	r1, r2
 8015cea:	2200      	movs	r2, #0
 8015cec:	602a      	str	r2, [r5, #0]
 8015cee:	461a      	mov	r2, r3
 8015cf0:	f7ee fa42 	bl	8004178 <_lseek>
 8015cf4:	1c43      	adds	r3, r0, #1
 8015cf6:	d102      	bne.n	8015cfe <_lseek_r+0x1e>
 8015cf8:	682b      	ldr	r3, [r5, #0]
 8015cfa:	b103      	cbz	r3, 8015cfe <_lseek_r+0x1e>
 8015cfc:	6023      	str	r3, [r4, #0]
 8015cfe:	bd38      	pop	{r3, r4, r5, pc}
 8015d00:	20009100 	.word	0x20009100

08015d04 <__swhatbuf_r>:
 8015d04:	b570      	push	{r4, r5, r6, lr}
 8015d06:	460e      	mov	r6, r1
 8015d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d0c:	2900      	cmp	r1, #0
 8015d0e:	b096      	sub	sp, #88	; 0x58
 8015d10:	4614      	mov	r4, r2
 8015d12:	461d      	mov	r5, r3
 8015d14:	da07      	bge.n	8015d26 <__swhatbuf_r+0x22>
 8015d16:	2300      	movs	r3, #0
 8015d18:	602b      	str	r3, [r5, #0]
 8015d1a:	89b3      	ldrh	r3, [r6, #12]
 8015d1c:	061a      	lsls	r2, r3, #24
 8015d1e:	d410      	bmi.n	8015d42 <__swhatbuf_r+0x3e>
 8015d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d24:	e00e      	b.n	8015d44 <__swhatbuf_r+0x40>
 8015d26:	466a      	mov	r2, sp
 8015d28:	f000 f8ec 	bl	8015f04 <_fstat_r>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	dbf2      	blt.n	8015d16 <__swhatbuf_r+0x12>
 8015d30:	9a01      	ldr	r2, [sp, #4]
 8015d32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d3a:	425a      	negs	r2, r3
 8015d3c:	415a      	adcs	r2, r3
 8015d3e:	602a      	str	r2, [r5, #0]
 8015d40:	e7ee      	b.n	8015d20 <__swhatbuf_r+0x1c>
 8015d42:	2340      	movs	r3, #64	; 0x40
 8015d44:	2000      	movs	r0, #0
 8015d46:	6023      	str	r3, [r4, #0]
 8015d48:	b016      	add	sp, #88	; 0x58
 8015d4a:	bd70      	pop	{r4, r5, r6, pc}

08015d4c <__smakebuf_r>:
 8015d4c:	898b      	ldrh	r3, [r1, #12]
 8015d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d50:	079d      	lsls	r5, r3, #30
 8015d52:	4606      	mov	r6, r0
 8015d54:	460c      	mov	r4, r1
 8015d56:	d507      	bpl.n	8015d68 <__smakebuf_r+0x1c>
 8015d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d5c:	6023      	str	r3, [r4, #0]
 8015d5e:	6123      	str	r3, [r4, #16]
 8015d60:	2301      	movs	r3, #1
 8015d62:	6163      	str	r3, [r4, #20]
 8015d64:	b002      	add	sp, #8
 8015d66:	bd70      	pop	{r4, r5, r6, pc}
 8015d68:	ab01      	add	r3, sp, #4
 8015d6a:	466a      	mov	r2, sp
 8015d6c:	f7ff ffca 	bl	8015d04 <__swhatbuf_r>
 8015d70:	9900      	ldr	r1, [sp, #0]
 8015d72:	4605      	mov	r5, r0
 8015d74:	4630      	mov	r0, r6
 8015d76:	f7fd f9d3 	bl	8013120 <_malloc_r>
 8015d7a:	b948      	cbnz	r0, 8015d90 <__smakebuf_r+0x44>
 8015d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d80:	059a      	lsls	r2, r3, #22
 8015d82:	d4ef      	bmi.n	8015d64 <__smakebuf_r+0x18>
 8015d84:	f023 0303 	bic.w	r3, r3, #3
 8015d88:	f043 0302 	orr.w	r3, r3, #2
 8015d8c:	81a3      	strh	r3, [r4, #12]
 8015d8e:	e7e3      	b.n	8015d58 <__smakebuf_r+0xc>
 8015d90:	4b0d      	ldr	r3, [pc, #52]	; (8015dc8 <__smakebuf_r+0x7c>)
 8015d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8015d94:	89a3      	ldrh	r3, [r4, #12]
 8015d96:	6020      	str	r0, [r4, #0]
 8015d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d9c:	81a3      	strh	r3, [r4, #12]
 8015d9e:	9b00      	ldr	r3, [sp, #0]
 8015da0:	6163      	str	r3, [r4, #20]
 8015da2:	9b01      	ldr	r3, [sp, #4]
 8015da4:	6120      	str	r0, [r4, #16]
 8015da6:	b15b      	cbz	r3, 8015dc0 <__smakebuf_r+0x74>
 8015da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015dac:	4630      	mov	r0, r6
 8015dae:	f000 f8bb 	bl	8015f28 <_isatty_r>
 8015db2:	b128      	cbz	r0, 8015dc0 <__smakebuf_r+0x74>
 8015db4:	89a3      	ldrh	r3, [r4, #12]
 8015db6:	f023 0303 	bic.w	r3, r3, #3
 8015dba:	f043 0301 	orr.w	r3, r3, #1
 8015dbe:	81a3      	strh	r3, [r4, #12]
 8015dc0:	89a0      	ldrh	r0, [r4, #12]
 8015dc2:	4305      	orrs	r5, r0
 8015dc4:	81a5      	strh	r5, [r4, #12]
 8015dc6:	e7cd      	b.n	8015d64 <__smakebuf_r+0x18>
 8015dc8:	08014a8d 	.word	0x08014a8d

08015dcc <__ascii_mbtowc>:
 8015dcc:	b082      	sub	sp, #8
 8015dce:	b901      	cbnz	r1, 8015dd2 <__ascii_mbtowc+0x6>
 8015dd0:	a901      	add	r1, sp, #4
 8015dd2:	b142      	cbz	r2, 8015de6 <__ascii_mbtowc+0x1a>
 8015dd4:	b14b      	cbz	r3, 8015dea <__ascii_mbtowc+0x1e>
 8015dd6:	7813      	ldrb	r3, [r2, #0]
 8015dd8:	600b      	str	r3, [r1, #0]
 8015dda:	7812      	ldrb	r2, [r2, #0]
 8015ddc:	1e10      	subs	r0, r2, #0
 8015dde:	bf18      	it	ne
 8015de0:	2001      	movne	r0, #1
 8015de2:	b002      	add	sp, #8
 8015de4:	4770      	bx	lr
 8015de6:	4610      	mov	r0, r2
 8015de8:	e7fb      	b.n	8015de2 <__ascii_mbtowc+0x16>
 8015dea:	f06f 0001 	mvn.w	r0, #1
 8015dee:	e7f8      	b.n	8015de2 <__ascii_mbtowc+0x16>

08015df0 <_realloc_r>:
 8015df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015df2:	4607      	mov	r7, r0
 8015df4:	4614      	mov	r4, r2
 8015df6:	460e      	mov	r6, r1
 8015df8:	b921      	cbnz	r1, 8015e04 <_realloc_r+0x14>
 8015dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015dfe:	4611      	mov	r1, r2
 8015e00:	f7fd b98e 	b.w	8013120 <_malloc_r>
 8015e04:	b922      	cbnz	r2, 8015e10 <_realloc_r+0x20>
 8015e06:	f7fd f93b 	bl	8013080 <_free_r>
 8015e0a:	4625      	mov	r5, r4
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e10:	f000 f89a 	bl	8015f48 <_malloc_usable_size_r>
 8015e14:	42a0      	cmp	r0, r4
 8015e16:	d20f      	bcs.n	8015e38 <_realloc_r+0x48>
 8015e18:	4621      	mov	r1, r4
 8015e1a:	4638      	mov	r0, r7
 8015e1c:	f7fd f980 	bl	8013120 <_malloc_r>
 8015e20:	4605      	mov	r5, r0
 8015e22:	2800      	cmp	r0, #0
 8015e24:	d0f2      	beq.n	8015e0c <_realloc_r+0x1c>
 8015e26:	4631      	mov	r1, r6
 8015e28:	4622      	mov	r2, r4
 8015e2a:	f7fd f8f9 	bl	8013020 <memcpy>
 8015e2e:	4631      	mov	r1, r6
 8015e30:	4638      	mov	r0, r7
 8015e32:	f7fd f925 	bl	8013080 <_free_r>
 8015e36:	e7e9      	b.n	8015e0c <_realloc_r+0x1c>
 8015e38:	4635      	mov	r5, r6
 8015e3a:	e7e7      	b.n	8015e0c <_realloc_r+0x1c>

08015e3c <_read_r>:
 8015e3c:	b538      	push	{r3, r4, r5, lr}
 8015e3e:	4d07      	ldr	r5, [pc, #28]	; (8015e5c <_read_r+0x20>)
 8015e40:	4604      	mov	r4, r0
 8015e42:	4608      	mov	r0, r1
 8015e44:	4611      	mov	r1, r2
 8015e46:	2200      	movs	r2, #0
 8015e48:	602a      	str	r2, [r5, #0]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	f7ee f934 	bl	80040b8 <_read>
 8015e50:	1c43      	adds	r3, r0, #1
 8015e52:	d102      	bne.n	8015e5a <_read_r+0x1e>
 8015e54:	682b      	ldr	r3, [r5, #0]
 8015e56:	b103      	cbz	r3, 8015e5a <_read_r+0x1e>
 8015e58:	6023      	str	r3, [r4, #0]
 8015e5a:	bd38      	pop	{r3, r4, r5, pc}
 8015e5c:	20009100 	.word	0x20009100

08015e60 <_raise_r>:
 8015e60:	291f      	cmp	r1, #31
 8015e62:	b538      	push	{r3, r4, r5, lr}
 8015e64:	4604      	mov	r4, r0
 8015e66:	460d      	mov	r5, r1
 8015e68:	d904      	bls.n	8015e74 <_raise_r+0x14>
 8015e6a:	2316      	movs	r3, #22
 8015e6c:	6003      	str	r3, [r0, #0]
 8015e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8015e72:	bd38      	pop	{r3, r4, r5, pc}
 8015e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015e76:	b112      	cbz	r2, 8015e7e <_raise_r+0x1e>
 8015e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015e7c:	b94b      	cbnz	r3, 8015e92 <_raise_r+0x32>
 8015e7e:	4620      	mov	r0, r4
 8015e80:	f000 f830 	bl	8015ee4 <_getpid_r>
 8015e84:	462a      	mov	r2, r5
 8015e86:	4601      	mov	r1, r0
 8015e88:	4620      	mov	r0, r4
 8015e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e8e:	f000 b817 	b.w	8015ec0 <_kill_r>
 8015e92:	2b01      	cmp	r3, #1
 8015e94:	d00a      	beq.n	8015eac <_raise_r+0x4c>
 8015e96:	1c59      	adds	r1, r3, #1
 8015e98:	d103      	bne.n	8015ea2 <_raise_r+0x42>
 8015e9a:	2316      	movs	r3, #22
 8015e9c:	6003      	str	r3, [r0, #0]
 8015e9e:	2001      	movs	r0, #1
 8015ea0:	e7e7      	b.n	8015e72 <_raise_r+0x12>
 8015ea2:	2400      	movs	r4, #0
 8015ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	4798      	blx	r3
 8015eac:	2000      	movs	r0, #0
 8015eae:	e7e0      	b.n	8015e72 <_raise_r+0x12>

08015eb0 <raise>:
 8015eb0:	4b02      	ldr	r3, [pc, #8]	; (8015ebc <raise+0xc>)
 8015eb2:	4601      	mov	r1, r0
 8015eb4:	6818      	ldr	r0, [r3, #0]
 8015eb6:	f7ff bfd3 	b.w	8015e60 <_raise_r>
 8015eba:	bf00      	nop
 8015ebc:	20000054 	.word	0x20000054

08015ec0 <_kill_r>:
 8015ec0:	b538      	push	{r3, r4, r5, lr}
 8015ec2:	4d07      	ldr	r5, [pc, #28]	; (8015ee0 <_kill_r+0x20>)
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	4608      	mov	r0, r1
 8015eca:	4611      	mov	r1, r2
 8015ecc:	602b      	str	r3, [r5, #0]
 8015ece:	f7ee f8d7 	bl	8004080 <_kill>
 8015ed2:	1c43      	adds	r3, r0, #1
 8015ed4:	d102      	bne.n	8015edc <_kill_r+0x1c>
 8015ed6:	682b      	ldr	r3, [r5, #0]
 8015ed8:	b103      	cbz	r3, 8015edc <_kill_r+0x1c>
 8015eda:	6023      	str	r3, [r4, #0]
 8015edc:	bd38      	pop	{r3, r4, r5, pc}
 8015ede:	bf00      	nop
 8015ee0:	20009100 	.word	0x20009100

08015ee4 <_getpid_r>:
 8015ee4:	f7ee b8c4 	b.w	8004070 <_getpid>

08015ee8 <__ascii_wctomb>:
 8015ee8:	b149      	cbz	r1, 8015efe <__ascii_wctomb+0x16>
 8015eea:	2aff      	cmp	r2, #255	; 0xff
 8015eec:	bf85      	ittet	hi
 8015eee:	238a      	movhi	r3, #138	; 0x8a
 8015ef0:	6003      	strhi	r3, [r0, #0]
 8015ef2:	700a      	strbls	r2, [r1, #0]
 8015ef4:	f04f 30ff 	movhi.w	r0, #4294967295
 8015ef8:	bf98      	it	ls
 8015efa:	2001      	movls	r0, #1
 8015efc:	4770      	bx	lr
 8015efe:	4608      	mov	r0, r1
 8015f00:	4770      	bx	lr
	...

08015f04 <_fstat_r>:
 8015f04:	b538      	push	{r3, r4, r5, lr}
 8015f06:	4d07      	ldr	r5, [pc, #28]	; (8015f24 <_fstat_r+0x20>)
 8015f08:	2300      	movs	r3, #0
 8015f0a:	4604      	mov	r4, r0
 8015f0c:	4608      	mov	r0, r1
 8015f0e:	4611      	mov	r1, r2
 8015f10:	602b      	str	r3, [r5, #0]
 8015f12:	f7ee f916 	bl	8004142 <_fstat>
 8015f16:	1c43      	adds	r3, r0, #1
 8015f18:	d102      	bne.n	8015f20 <_fstat_r+0x1c>
 8015f1a:	682b      	ldr	r3, [r5, #0]
 8015f1c:	b103      	cbz	r3, 8015f20 <_fstat_r+0x1c>
 8015f1e:	6023      	str	r3, [r4, #0]
 8015f20:	bd38      	pop	{r3, r4, r5, pc}
 8015f22:	bf00      	nop
 8015f24:	20009100 	.word	0x20009100

08015f28 <_isatty_r>:
 8015f28:	b538      	push	{r3, r4, r5, lr}
 8015f2a:	4d06      	ldr	r5, [pc, #24]	; (8015f44 <_isatty_r+0x1c>)
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	4604      	mov	r4, r0
 8015f30:	4608      	mov	r0, r1
 8015f32:	602b      	str	r3, [r5, #0]
 8015f34:	f7ee f915 	bl	8004162 <_isatty>
 8015f38:	1c43      	adds	r3, r0, #1
 8015f3a:	d102      	bne.n	8015f42 <_isatty_r+0x1a>
 8015f3c:	682b      	ldr	r3, [r5, #0]
 8015f3e:	b103      	cbz	r3, 8015f42 <_isatty_r+0x1a>
 8015f40:	6023      	str	r3, [r4, #0]
 8015f42:	bd38      	pop	{r3, r4, r5, pc}
 8015f44:	20009100 	.word	0x20009100

08015f48 <_malloc_usable_size_r>:
 8015f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f4c:	1f18      	subs	r0, r3, #4
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	bfbc      	itt	lt
 8015f52:	580b      	ldrlt	r3, [r1, r0]
 8015f54:	18c0      	addlt	r0, r0, r3
 8015f56:	4770      	bx	lr

08015f58 <pow>:
 8015f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f5c:	ec59 8b10 	vmov	r8, r9, d0
 8015f60:	ec57 6b11 	vmov	r6, r7, d1
 8015f64:	f000 f8a8 	bl	80160b8 <__ieee754_pow>
 8015f68:	4b4e      	ldr	r3, [pc, #312]	; (80160a4 <pow+0x14c>)
 8015f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	ec55 4b10 	vmov	r4, r5, d0
 8015f74:	d015      	beq.n	8015fa2 <pow+0x4a>
 8015f76:	4632      	mov	r2, r6
 8015f78:	463b      	mov	r3, r7
 8015f7a:	4630      	mov	r0, r6
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	f7ea fde5 	bl	8000b4c <__aeabi_dcmpun>
 8015f82:	b970      	cbnz	r0, 8015fa2 <pow+0x4a>
 8015f84:	4642      	mov	r2, r8
 8015f86:	464b      	mov	r3, r9
 8015f88:	4640      	mov	r0, r8
 8015f8a:	4649      	mov	r1, r9
 8015f8c:	f7ea fdde 	bl	8000b4c <__aeabi_dcmpun>
 8015f90:	2200      	movs	r2, #0
 8015f92:	2300      	movs	r3, #0
 8015f94:	b148      	cbz	r0, 8015faa <pow+0x52>
 8015f96:	4630      	mov	r0, r6
 8015f98:	4639      	mov	r1, r7
 8015f9a:	f7ea fda5 	bl	8000ae8 <__aeabi_dcmpeq>
 8015f9e:	2800      	cmp	r0, #0
 8015fa0:	d17d      	bne.n	801609e <pow+0x146>
 8015fa2:	ec45 4b10 	vmov	d0, r4, r5
 8015fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015faa:	4640      	mov	r0, r8
 8015fac:	4649      	mov	r1, r9
 8015fae:	f7ea fd9b 	bl	8000ae8 <__aeabi_dcmpeq>
 8015fb2:	b1e0      	cbz	r0, 8015fee <pow+0x96>
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	4630      	mov	r0, r6
 8015fba:	4639      	mov	r1, r7
 8015fbc:	f7ea fd94 	bl	8000ae8 <__aeabi_dcmpeq>
 8015fc0:	2800      	cmp	r0, #0
 8015fc2:	d16c      	bne.n	801609e <pow+0x146>
 8015fc4:	ec47 6b10 	vmov	d0, r6, r7
 8015fc8:	f000 fe55 	bl	8016c76 <finite>
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	d0e8      	beq.n	8015fa2 <pow+0x4a>
 8015fd0:	2200      	movs	r2, #0
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	4630      	mov	r0, r6
 8015fd6:	4639      	mov	r1, r7
 8015fd8:	f7ea fd90 	bl	8000afc <__aeabi_dcmplt>
 8015fdc:	2800      	cmp	r0, #0
 8015fde:	d0e0      	beq.n	8015fa2 <pow+0x4a>
 8015fe0:	f7fe fd2a 	bl	8014a38 <__errno>
 8015fe4:	2321      	movs	r3, #33	; 0x21
 8015fe6:	6003      	str	r3, [r0, #0]
 8015fe8:	2400      	movs	r4, #0
 8015fea:	4d2f      	ldr	r5, [pc, #188]	; (80160a8 <pow+0x150>)
 8015fec:	e7d9      	b.n	8015fa2 <pow+0x4a>
 8015fee:	ec45 4b10 	vmov	d0, r4, r5
 8015ff2:	f000 fe40 	bl	8016c76 <finite>
 8015ff6:	bbb8      	cbnz	r0, 8016068 <pow+0x110>
 8015ff8:	ec49 8b10 	vmov	d0, r8, r9
 8015ffc:	f000 fe3b 	bl	8016c76 <finite>
 8016000:	b390      	cbz	r0, 8016068 <pow+0x110>
 8016002:	ec47 6b10 	vmov	d0, r6, r7
 8016006:	f000 fe36 	bl	8016c76 <finite>
 801600a:	b368      	cbz	r0, 8016068 <pow+0x110>
 801600c:	4622      	mov	r2, r4
 801600e:	462b      	mov	r3, r5
 8016010:	4620      	mov	r0, r4
 8016012:	4629      	mov	r1, r5
 8016014:	f7ea fd9a 	bl	8000b4c <__aeabi_dcmpun>
 8016018:	b160      	cbz	r0, 8016034 <pow+0xdc>
 801601a:	f7fe fd0d 	bl	8014a38 <__errno>
 801601e:	2321      	movs	r3, #33	; 0x21
 8016020:	6003      	str	r3, [r0, #0]
 8016022:	2200      	movs	r2, #0
 8016024:	2300      	movs	r3, #0
 8016026:	4610      	mov	r0, r2
 8016028:	4619      	mov	r1, r3
 801602a:	f7ea fc1f 	bl	800086c <__aeabi_ddiv>
 801602e:	4604      	mov	r4, r0
 8016030:	460d      	mov	r5, r1
 8016032:	e7b6      	b.n	8015fa2 <pow+0x4a>
 8016034:	f7fe fd00 	bl	8014a38 <__errno>
 8016038:	2322      	movs	r3, #34	; 0x22
 801603a:	6003      	str	r3, [r0, #0]
 801603c:	2200      	movs	r2, #0
 801603e:	2300      	movs	r3, #0
 8016040:	4640      	mov	r0, r8
 8016042:	4649      	mov	r1, r9
 8016044:	f7ea fd5a 	bl	8000afc <__aeabi_dcmplt>
 8016048:	2400      	movs	r4, #0
 801604a:	b158      	cbz	r0, 8016064 <pow+0x10c>
 801604c:	ec47 6b10 	vmov	d0, r6, r7
 8016050:	f000 fe26 	bl	8016ca0 <rint>
 8016054:	4632      	mov	r2, r6
 8016056:	ec51 0b10 	vmov	r0, r1, d0
 801605a:	463b      	mov	r3, r7
 801605c:	f7ea fd44 	bl	8000ae8 <__aeabi_dcmpeq>
 8016060:	2800      	cmp	r0, #0
 8016062:	d0c2      	beq.n	8015fea <pow+0x92>
 8016064:	4d11      	ldr	r5, [pc, #68]	; (80160ac <pow+0x154>)
 8016066:	e79c      	b.n	8015fa2 <pow+0x4a>
 8016068:	2200      	movs	r2, #0
 801606a:	2300      	movs	r3, #0
 801606c:	4620      	mov	r0, r4
 801606e:	4629      	mov	r1, r5
 8016070:	f7ea fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8016074:	2800      	cmp	r0, #0
 8016076:	d094      	beq.n	8015fa2 <pow+0x4a>
 8016078:	ec49 8b10 	vmov	d0, r8, r9
 801607c:	f000 fdfb 	bl	8016c76 <finite>
 8016080:	2800      	cmp	r0, #0
 8016082:	d08e      	beq.n	8015fa2 <pow+0x4a>
 8016084:	ec47 6b10 	vmov	d0, r6, r7
 8016088:	f000 fdf5 	bl	8016c76 <finite>
 801608c:	2800      	cmp	r0, #0
 801608e:	d088      	beq.n	8015fa2 <pow+0x4a>
 8016090:	f7fe fcd2 	bl	8014a38 <__errno>
 8016094:	2322      	movs	r3, #34	; 0x22
 8016096:	6003      	str	r3, [r0, #0]
 8016098:	2400      	movs	r4, #0
 801609a:	2500      	movs	r5, #0
 801609c:	e781      	b.n	8015fa2 <pow+0x4a>
 801609e:	4d04      	ldr	r5, [pc, #16]	; (80160b0 <pow+0x158>)
 80160a0:	2400      	movs	r4, #0
 80160a2:	e77e      	b.n	8015fa2 <pow+0x4a>
 80160a4:	20000224 	.word	0x20000224
 80160a8:	fff00000 	.word	0xfff00000
 80160ac:	7ff00000 	.word	0x7ff00000
 80160b0:	3ff00000 	.word	0x3ff00000
 80160b4:	00000000 	.word	0x00000000

080160b8 <__ieee754_pow>:
 80160b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160bc:	ed2d 8b06 	vpush	{d8-d10}
 80160c0:	b08d      	sub	sp, #52	; 0x34
 80160c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80160c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80160ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80160ce:	ea56 0100 	orrs.w	r1, r6, r0
 80160d2:	ec53 2b10 	vmov	r2, r3, d0
 80160d6:	f000 84d1 	beq.w	8016a7c <__ieee754_pow+0x9c4>
 80160da:	497f      	ldr	r1, [pc, #508]	; (80162d8 <__ieee754_pow+0x220>)
 80160dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80160e0:	428c      	cmp	r4, r1
 80160e2:	ee10 8a10 	vmov	r8, s0
 80160e6:	4699      	mov	r9, r3
 80160e8:	dc09      	bgt.n	80160fe <__ieee754_pow+0x46>
 80160ea:	d103      	bne.n	80160f4 <__ieee754_pow+0x3c>
 80160ec:	b97a      	cbnz	r2, 801610e <__ieee754_pow+0x56>
 80160ee:	42a6      	cmp	r6, r4
 80160f0:	dd02      	ble.n	80160f8 <__ieee754_pow+0x40>
 80160f2:	e00c      	b.n	801610e <__ieee754_pow+0x56>
 80160f4:	428e      	cmp	r6, r1
 80160f6:	dc02      	bgt.n	80160fe <__ieee754_pow+0x46>
 80160f8:	428e      	cmp	r6, r1
 80160fa:	d110      	bne.n	801611e <__ieee754_pow+0x66>
 80160fc:	b178      	cbz	r0, 801611e <__ieee754_pow+0x66>
 80160fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016102:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016106:	ea54 0308 	orrs.w	r3, r4, r8
 801610a:	f000 84b7 	beq.w	8016a7c <__ieee754_pow+0x9c4>
 801610e:	4873      	ldr	r0, [pc, #460]	; (80162dc <__ieee754_pow+0x224>)
 8016110:	b00d      	add	sp, #52	; 0x34
 8016112:	ecbd 8b06 	vpop	{d8-d10}
 8016116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801611a:	f000 bdb9 	b.w	8016c90 <nan>
 801611e:	f1b9 0f00 	cmp.w	r9, #0
 8016122:	da36      	bge.n	8016192 <__ieee754_pow+0xda>
 8016124:	496e      	ldr	r1, [pc, #440]	; (80162e0 <__ieee754_pow+0x228>)
 8016126:	428e      	cmp	r6, r1
 8016128:	dc51      	bgt.n	80161ce <__ieee754_pow+0x116>
 801612a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801612e:	428e      	cmp	r6, r1
 8016130:	f340 84af 	ble.w	8016a92 <__ieee754_pow+0x9da>
 8016134:	1531      	asrs	r1, r6, #20
 8016136:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801613a:	2914      	cmp	r1, #20
 801613c:	dd0f      	ble.n	801615e <__ieee754_pow+0xa6>
 801613e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8016142:	fa20 fc01 	lsr.w	ip, r0, r1
 8016146:	fa0c f101 	lsl.w	r1, ip, r1
 801614a:	4281      	cmp	r1, r0
 801614c:	f040 84a1 	bne.w	8016a92 <__ieee754_pow+0x9da>
 8016150:	f00c 0c01 	and.w	ip, ip, #1
 8016154:	f1cc 0102 	rsb	r1, ip, #2
 8016158:	9100      	str	r1, [sp, #0]
 801615a:	b180      	cbz	r0, 801617e <__ieee754_pow+0xc6>
 801615c:	e059      	b.n	8016212 <__ieee754_pow+0x15a>
 801615e:	2800      	cmp	r0, #0
 8016160:	d155      	bne.n	801620e <__ieee754_pow+0x156>
 8016162:	f1c1 0114 	rsb	r1, r1, #20
 8016166:	fa46 fc01 	asr.w	ip, r6, r1
 801616a:	fa0c f101 	lsl.w	r1, ip, r1
 801616e:	42b1      	cmp	r1, r6
 8016170:	f040 848c 	bne.w	8016a8c <__ieee754_pow+0x9d4>
 8016174:	f00c 0c01 	and.w	ip, ip, #1
 8016178:	f1cc 0102 	rsb	r1, ip, #2
 801617c:	9100      	str	r1, [sp, #0]
 801617e:	4959      	ldr	r1, [pc, #356]	; (80162e4 <__ieee754_pow+0x22c>)
 8016180:	428e      	cmp	r6, r1
 8016182:	d12d      	bne.n	80161e0 <__ieee754_pow+0x128>
 8016184:	2f00      	cmp	r7, #0
 8016186:	da79      	bge.n	801627c <__ieee754_pow+0x1c4>
 8016188:	4956      	ldr	r1, [pc, #344]	; (80162e4 <__ieee754_pow+0x22c>)
 801618a:	2000      	movs	r0, #0
 801618c:	f7ea fb6e 	bl	800086c <__aeabi_ddiv>
 8016190:	e016      	b.n	80161c0 <__ieee754_pow+0x108>
 8016192:	2100      	movs	r1, #0
 8016194:	9100      	str	r1, [sp, #0]
 8016196:	2800      	cmp	r0, #0
 8016198:	d13b      	bne.n	8016212 <__ieee754_pow+0x15a>
 801619a:	494f      	ldr	r1, [pc, #316]	; (80162d8 <__ieee754_pow+0x220>)
 801619c:	428e      	cmp	r6, r1
 801619e:	d1ee      	bne.n	801617e <__ieee754_pow+0xc6>
 80161a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80161a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80161a8:	ea53 0308 	orrs.w	r3, r3, r8
 80161ac:	f000 8466 	beq.w	8016a7c <__ieee754_pow+0x9c4>
 80161b0:	4b4d      	ldr	r3, [pc, #308]	; (80162e8 <__ieee754_pow+0x230>)
 80161b2:	429c      	cmp	r4, r3
 80161b4:	dd0d      	ble.n	80161d2 <__ieee754_pow+0x11a>
 80161b6:	2f00      	cmp	r7, #0
 80161b8:	f280 8464 	bge.w	8016a84 <__ieee754_pow+0x9cc>
 80161bc:	2000      	movs	r0, #0
 80161be:	2100      	movs	r1, #0
 80161c0:	ec41 0b10 	vmov	d0, r0, r1
 80161c4:	b00d      	add	sp, #52	; 0x34
 80161c6:	ecbd 8b06 	vpop	{d8-d10}
 80161ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ce:	2102      	movs	r1, #2
 80161d0:	e7e0      	b.n	8016194 <__ieee754_pow+0xdc>
 80161d2:	2f00      	cmp	r7, #0
 80161d4:	daf2      	bge.n	80161bc <__ieee754_pow+0x104>
 80161d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80161da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80161de:	e7ef      	b.n	80161c0 <__ieee754_pow+0x108>
 80161e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80161e4:	d104      	bne.n	80161f0 <__ieee754_pow+0x138>
 80161e6:	4610      	mov	r0, r2
 80161e8:	4619      	mov	r1, r3
 80161ea:	f7ea fa15 	bl	8000618 <__aeabi_dmul>
 80161ee:	e7e7      	b.n	80161c0 <__ieee754_pow+0x108>
 80161f0:	493e      	ldr	r1, [pc, #248]	; (80162ec <__ieee754_pow+0x234>)
 80161f2:	428f      	cmp	r7, r1
 80161f4:	d10d      	bne.n	8016212 <__ieee754_pow+0x15a>
 80161f6:	f1b9 0f00 	cmp.w	r9, #0
 80161fa:	db0a      	blt.n	8016212 <__ieee754_pow+0x15a>
 80161fc:	ec43 2b10 	vmov	d0, r2, r3
 8016200:	b00d      	add	sp, #52	; 0x34
 8016202:	ecbd 8b06 	vpop	{d8-d10}
 8016206:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801620a:	f000 bc77 	b.w	8016afc <__ieee754_sqrt>
 801620e:	2100      	movs	r1, #0
 8016210:	9100      	str	r1, [sp, #0]
 8016212:	ec43 2b10 	vmov	d0, r2, r3
 8016216:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801621a:	f000 fd23 	bl	8016c64 <fabs>
 801621e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016222:	ec51 0b10 	vmov	r0, r1, d0
 8016226:	f1b8 0f00 	cmp.w	r8, #0
 801622a:	d12a      	bne.n	8016282 <__ieee754_pow+0x1ca>
 801622c:	b12c      	cbz	r4, 801623a <__ieee754_pow+0x182>
 801622e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80162e4 <__ieee754_pow+0x22c>
 8016232:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8016236:	45e6      	cmp	lr, ip
 8016238:	d123      	bne.n	8016282 <__ieee754_pow+0x1ca>
 801623a:	2f00      	cmp	r7, #0
 801623c:	da05      	bge.n	801624a <__ieee754_pow+0x192>
 801623e:	4602      	mov	r2, r0
 8016240:	460b      	mov	r3, r1
 8016242:	2000      	movs	r0, #0
 8016244:	4927      	ldr	r1, [pc, #156]	; (80162e4 <__ieee754_pow+0x22c>)
 8016246:	f7ea fb11 	bl	800086c <__aeabi_ddiv>
 801624a:	f1b9 0f00 	cmp.w	r9, #0
 801624e:	dab7      	bge.n	80161c0 <__ieee754_pow+0x108>
 8016250:	9b00      	ldr	r3, [sp, #0]
 8016252:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016256:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801625a:	4323      	orrs	r3, r4
 801625c:	d108      	bne.n	8016270 <__ieee754_pow+0x1b8>
 801625e:	4602      	mov	r2, r0
 8016260:	460b      	mov	r3, r1
 8016262:	4610      	mov	r0, r2
 8016264:	4619      	mov	r1, r3
 8016266:	f7ea f81f 	bl	80002a8 <__aeabi_dsub>
 801626a:	4602      	mov	r2, r0
 801626c:	460b      	mov	r3, r1
 801626e:	e78d      	b.n	801618c <__ieee754_pow+0xd4>
 8016270:	9b00      	ldr	r3, [sp, #0]
 8016272:	2b01      	cmp	r3, #1
 8016274:	d1a4      	bne.n	80161c0 <__ieee754_pow+0x108>
 8016276:	4602      	mov	r2, r0
 8016278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801627c:	4610      	mov	r0, r2
 801627e:	4619      	mov	r1, r3
 8016280:	e79e      	b.n	80161c0 <__ieee754_pow+0x108>
 8016282:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8016286:	f10c 35ff 	add.w	r5, ip, #4294967295
 801628a:	950a      	str	r5, [sp, #40]	; 0x28
 801628c:	9d00      	ldr	r5, [sp, #0]
 801628e:	46ac      	mov	ip, r5
 8016290:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016292:	ea5c 0505 	orrs.w	r5, ip, r5
 8016296:	d0e4      	beq.n	8016262 <__ieee754_pow+0x1aa>
 8016298:	4b15      	ldr	r3, [pc, #84]	; (80162f0 <__ieee754_pow+0x238>)
 801629a:	429e      	cmp	r6, r3
 801629c:	f340 80fc 	ble.w	8016498 <__ieee754_pow+0x3e0>
 80162a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80162a4:	429e      	cmp	r6, r3
 80162a6:	4b10      	ldr	r3, [pc, #64]	; (80162e8 <__ieee754_pow+0x230>)
 80162a8:	dd07      	ble.n	80162ba <__ieee754_pow+0x202>
 80162aa:	429c      	cmp	r4, r3
 80162ac:	dc0a      	bgt.n	80162c4 <__ieee754_pow+0x20c>
 80162ae:	2f00      	cmp	r7, #0
 80162b0:	da84      	bge.n	80161bc <__ieee754_pow+0x104>
 80162b2:	a307      	add	r3, pc, #28	; (adr r3, 80162d0 <__ieee754_pow+0x218>)
 80162b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162b8:	e795      	b.n	80161e6 <__ieee754_pow+0x12e>
 80162ba:	429c      	cmp	r4, r3
 80162bc:	dbf7      	blt.n	80162ae <__ieee754_pow+0x1f6>
 80162be:	4b09      	ldr	r3, [pc, #36]	; (80162e4 <__ieee754_pow+0x22c>)
 80162c0:	429c      	cmp	r4, r3
 80162c2:	dd17      	ble.n	80162f4 <__ieee754_pow+0x23c>
 80162c4:	2f00      	cmp	r7, #0
 80162c6:	dcf4      	bgt.n	80162b2 <__ieee754_pow+0x1fa>
 80162c8:	e778      	b.n	80161bc <__ieee754_pow+0x104>
 80162ca:	bf00      	nop
 80162cc:	f3af 8000 	nop.w
 80162d0:	8800759c 	.word	0x8800759c
 80162d4:	7e37e43c 	.word	0x7e37e43c
 80162d8:	7ff00000 	.word	0x7ff00000
 80162dc:	08019e71 	.word	0x08019e71
 80162e0:	433fffff 	.word	0x433fffff
 80162e4:	3ff00000 	.word	0x3ff00000
 80162e8:	3fefffff 	.word	0x3fefffff
 80162ec:	3fe00000 	.word	0x3fe00000
 80162f0:	41e00000 	.word	0x41e00000
 80162f4:	4b64      	ldr	r3, [pc, #400]	; (8016488 <__ieee754_pow+0x3d0>)
 80162f6:	2200      	movs	r2, #0
 80162f8:	f7e9 ffd6 	bl	80002a8 <__aeabi_dsub>
 80162fc:	a356      	add	r3, pc, #344	; (adr r3, 8016458 <__ieee754_pow+0x3a0>)
 80162fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016302:	4604      	mov	r4, r0
 8016304:	460d      	mov	r5, r1
 8016306:	f7ea f987 	bl	8000618 <__aeabi_dmul>
 801630a:	a355      	add	r3, pc, #340	; (adr r3, 8016460 <__ieee754_pow+0x3a8>)
 801630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016310:	4606      	mov	r6, r0
 8016312:	460f      	mov	r7, r1
 8016314:	4620      	mov	r0, r4
 8016316:	4629      	mov	r1, r5
 8016318:	f7ea f97e 	bl	8000618 <__aeabi_dmul>
 801631c:	4b5b      	ldr	r3, [pc, #364]	; (801648c <__ieee754_pow+0x3d4>)
 801631e:	4682      	mov	sl, r0
 8016320:	468b      	mov	fp, r1
 8016322:	2200      	movs	r2, #0
 8016324:	4620      	mov	r0, r4
 8016326:	4629      	mov	r1, r5
 8016328:	f7ea f976 	bl	8000618 <__aeabi_dmul>
 801632c:	4602      	mov	r2, r0
 801632e:	460b      	mov	r3, r1
 8016330:	a14d      	add	r1, pc, #308	; (adr r1, 8016468 <__ieee754_pow+0x3b0>)
 8016332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016336:	f7e9 ffb7 	bl	80002a8 <__aeabi_dsub>
 801633a:	4622      	mov	r2, r4
 801633c:	462b      	mov	r3, r5
 801633e:	f7ea f96b 	bl	8000618 <__aeabi_dmul>
 8016342:	4602      	mov	r2, r0
 8016344:	460b      	mov	r3, r1
 8016346:	2000      	movs	r0, #0
 8016348:	4951      	ldr	r1, [pc, #324]	; (8016490 <__ieee754_pow+0x3d8>)
 801634a:	f7e9 ffad 	bl	80002a8 <__aeabi_dsub>
 801634e:	4622      	mov	r2, r4
 8016350:	4680      	mov	r8, r0
 8016352:	4689      	mov	r9, r1
 8016354:	462b      	mov	r3, r5
 8016356:	4620      	mov	r0, r4
 8016358:	4629      	mov	r1, r5
 801635a:	f7ea f95d 	bl	8000618 <__aeabi_dmul>
 801635e:	4602      	mov	r2, r0
 8016360:	460b      	mov	r3, r1
 8016362:	4640      	mov	r0, r8
 8016364:	4649      	mov	r1, r9
 8016366:	f7ea f957 	bl	8000618 <__aeabi_dmul>
 801636a:	a341      	add	r3, pc, #260	; (adr r3, 8016470 <__ieee754_pow+0x3b8>)
 801636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016370:	f7ea f952 	bl	8000618 <__aeabi_dmul>
 8016374:	4602      	mov	r2, r0
 8016376:	460b      	mov	r3, r1
 8016378:	4650      	mov	r0, sl
 801637a:	4659      	mov	r1, fp
 801637c:	f7e9 ff94 	bl	80002a8 <__aeabi_dsub>
 8016380:	4602      	mov	r2, r0
 8016382:	460b      	mov	r3, r1
 8016384:	4680      	mov	r8, r0
 8016386:	4689      	mov	r9, r1
 8016388:	4630      	mov	r0, r6
 801638a:	4639      	mov	r1, r7
 801638c:	f7e9 ff8e 	bl	80002ac <__adddf3>
 8016390:	2400      	movs	r4, #0
 8016392:	4632      	mov	r2, r6
 8016394:	463b      	mov	r3, r7
 8016396:	4620      	mov	r0, r4
 8016398:	460d      	mov	r5, r1
 801639a:	f7e9 ff85 	bl	80002a8 <__aeabi_dsub>
 801639e:	4602      	mov	r2, r0
 80163a0:	460b      	mov	r3, r1
 80163a2:	4640      	mov	r0, r8
 80163a4:	4649      	mov	r1, r9
 80163a6:	f7e9 ff7f 	bl	80002a8 <__aeabi_dsub>
 80163aa:	9b00      	ldr	r3, [sp, #0]
 80163ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163ae:	3b01      	subs	r3, #1
 80163b0:	4313      	orrs	r3, r2
 80163b2:	4682      	mov	sl, r0
 80163b4:	468b      	mov	fp, r1
 80163b6:	f040 81f1 	bne.w	801679c <__ieee754_pow+0x6e4>
 80163ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8016478 <__ieee754_pow+0x3c0>
 80163be:	eeb0 8a47 	vmov.f32	s16, s14
 80163c2:	eef0 8a67 	vmov.f32	s17, s15
 80163c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80163ca:	2600      	movs	r6, #0
 80163cc:	4632      	mov	r2, r6
 80163ce:	463b      	mov	r3, r7
 80163d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163d4:	f7e9 ff68 	bl	80002a8 <__aeabi_dsub>
 80163d8:	4622      	mov	r2, r4
 80163da:	462b      	mov	r3, r5
 80163dc:	f7ea f91c 	bl	8000618 <__aeabi_dmul>
 80163e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80163e4:	4680      	mov	r8, r0
 80163e6:	4689      	mov	r9, r1
 80163e8:	4650      	mov	r0, sl
 80163ea:	4659      	mov	r1, fp
 80163ec:	f7ea f914 	bl	8000618 <__aeabi_dmul>
 80163f0:	4602      	mov	r2, r0
 80163f2:	460b      	mov	r3, r1
 80163f4:	4640      	mov	r0, r8
 80163f6:	4649      	mov	r1, r9
 80163f8:	f7e9 ff58 	bl	80002ac <__adddf3>
 80163fc:	4632      	mov	r2, r6
 80163fe:	463b      	mov	r3, r7
 8016400:	4680      	mov	r8, r0
 8016402:	4689      	mov	r9, r1
 8016404:	4620      	mov	r0, r4
 8016406:	4629      	mov	r1, r5
 8016408:	f7ea f906 	bl	8000618 <__aeabi_dmul>
 801640c:	460b      	mov	r3, r1
 801640e:	4604      	mov	r4, r0
 8016410:	460d      	mov	r5, r1
 8016412:	4602      	mov	r2, r0
 8016414:	4649      	mov	r1, r9
 8016416:	4640      	mov	r0, r8
 8016418:	f7e9 ff48 	bl	80002ac <__adddf3>
 801641c:	4b1d      	ldr	r3, [pc, #116]	; (8016494 <__ieee754_pow+0x3dc>)
 801641e:	4299      	cmp	r1, r3
 8016420:	ec45 4b19 	vmov	d9, r4, r5
 8016424:	4606      	mov	r6, r0
 8016426:	460f      	mov	r7, r1
 8016428:	468b      	mov	fp, r1
 801642a:	f340 82fe 	ble.w	8016a2a <__ieee754_pow+0x972>
 801642e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016432:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016436:	4303      	orrs	r3, r0
 8016438:	f000 81f0 	beq.w	801681c <__ieee754_pow+0x764>
 801643c:	a310      	add	r3, pc, #64	; (adr r3, 8016480 <__ieee754_pow+0x3c8>)
 801643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016442:	ec51 0b18 	vmov	r0, r1, d8
 8016446:	f7ea f8e7 	bl	8000618 <__aeabi_dmul>
 801644a:	a30d      	add	r3, pc, #52	; (adr r3, 8016480 <__ieee754_pow+0x3c8>)
 801644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016450:	e6cb      	b.n	80161ea <__ieee754_pow+0x132>
 8016452:	bf00      	nop
 8016454:	f3af 8000 	nop.w
 8016458:	60000000 	.word	0x60000000
 801645c:	3ff71547 	.word	0x3ff71547
 8016460:	f85ddf44 	.word	0xf85ddf44
 8016464:	3e54ae0b 	.word	0x3e54ae0b
 8016468:	55555555 	.word	0x55555555
 801646c:	3fd55555 	.word	0x3fd55555
 8016470:	652b82fe 	.word	0x652b82fe
 8016474:	3ff71547 	.word	0x3ff71547
 8016478:	00000000 	.word	0x00000000
 801647c:	bff00000 	.word	0xbff00000
 8016480:	8800759c 	.word	0x8800759c
 8016484:	7e37e43c 	.word	0x7e37e43c
 8016488:	3ff00000 	.word	0x3ff00000
 801648c:	3fd00000 	.word	0x3fd00000
 8016490:	3fe00000 	.word	0x3fe00000
 8016494:	408fffff 	.word	0x408fffff
 8016498:	4bd7      	ldr	r3, [pc, #860]	; (80167f8 <__ieee754_pow+0x740>)
 801649a:	ea03 0309 	and.w	r3, r3, r9
 801649e:	2200      	movs	r2, #0
 80164a0:	b92b      	cbnz	r3, 80164ae <__ieee754_pow+0x3f6>
 80164a2:	4bd6      	ldr	r3, [pc, #856]	; (80167fc <__ieee754_pow+0x744>)
 80164a4:	f7ea f8b8 	bl	8000618 <__aeabi_dmul>
 80164a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80164ac:	460c      	mov	r4, r1
 80164ae:	1523      	asrs	r3, r4, #20
 80164b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80164b4:	4413      	add	r3, r2
 80164b6:	9309      	str	r3, [sp, #36]	; 0x24
 80164b8:	4bd1      	ldr	r3, [pc, #836]	; (8016800 <__ieee754_pow+0x748>)
 80164ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80164be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80164c2:	429c      	cmp	r4, r3
 80164c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80164c8:	dd08      	ble.n	80164dc <__ieee754_pow+0x424>
 80164ca:	4bce      	ldr	r3, [pc, #824]	; (8016804 <__ieee754_pow+0x74c>)
 80164cc:	429c      	cmp	r4, r3
 80164ce:	f340 8163 	ble.w	8016798 <__ieee754_pow+0x6e0>
 80164d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164d4:	3301      	adds	r3, #1
 80164d6:	9309      	str	r3, [sp, #36]	; 0x24
 80164d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80164dc:	2400      	movs	r4, #0
 80164de:	00e3      	lsls	r3, r4, #3
 80164e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80164e2:	4bc9      	ldr	r3, [pc, #804]	; (8016808 <__ieee754_pow+0x750>)
 80164e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80164e8:	ed93 7b00 	vldr	d7, [r3]
 80164ec:	4629      	mov	r1, r5
 80164ee:	ec53 2b17 	vmov	r2, r3, d7
 80164f2:	eeb0 8a47 	vmov.f32	s16, s14
 80164f6:	eef0 8a67 	vmov.f32	s17, s15
 80164fa:	4682      	mov	sl, r0
 80164fc:	f7e9 fed4 	bl	80002a8 <__aeabi_dsub>
 8016500:	4652      	mov	r2, sl
 8016502:	4606      	mov	r6, r0
 8016504:	460f      	mov	r7, r1
 8016506:	462b      	mov	r3, r5
 8016508:	ec51 0b18 	vmov	r0, r1, d8
 801650c:	f7e9 fece 	bl	80002ac <__adddf3>
 8016510:	4602      	mov	r2, r0
 8016512:	460b      	mov	r3, r1
 8016514:	2000      	movs	r0, #0
 8016516:	49bd      	ldr	r1, [pc, #756]	; (801680c <__ieee754_pow+0x754>)
 8016518:	f7ea f9a8 	bl	800086c <__aeabi_ddiv>
 801651c:	ec41 0b19 	vmov	d9, r0, r1
 8016520:	4602      	mov	r2, r0
 8016522:	460b      	mov	r3, r1
 8016524:	4630      	mov	r0, r6
 8016526:	4639      	mov	r1, r7
 8016528:	f7ea f876 	bl	8000618 <__aeabi_dmul>
 801652c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016530:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016534:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016538:	2300      	movs	r3, #0
 801653a:	9304      	str	r3, [sp, #16]
 801653c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8016540:	46ab      	mov	fp, r5
 8016542:	106d      	asrs	r5, r5, #1
 8016544:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016548:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801654c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016550:	2200      	movs	r2, #0
 8016552:	4640      	mov	r0, r8
 8016554:	4649      	mov	r1, r9
 8016556:	4614      	mov	r4, r2
 8016558:	461d      	mov	r5, r3
 801655a:	f7ea f85d 	bl	8000618 <__aeabi_dmul>
 801655e:	4602      	mov	r2, r0
 8016560:	460b      	mov	r3, r1
 8016562:	4630      	mov	r0, r6
 8016564:	4639      	mov	r1, r7
 8016566:	f7e9 fe9f 	bl	80002a8 <__aeabi_dsub>
 801656a:	ec53 2b18 	vmov	r2, r3, d8
 801656e:	4606      	mov	r6, r0
 8016570:	460f      	mov	r7, r1
 8016572:	4620      	mov	r0, r4
 8016574:	4629      	mov	r1, r5
 8016576:	f7e9 fe97 	bl	80002a8 <__aeabi_dsub>
 801657a:	4602      	mov	r2, r0
 801657c:	460b      	mov	r3, r1
 801657e:	4650      	mov	r0, sl
 8016580:	4659      	mov	r1, fp
 8016582:	f7e9 fe91 	bl	80002a8 <__aeabi_dsub>
 8016586:	4642      	mov	r2, r8
 8016588:	464b      	mov	r3, r9
 801658a:	f7ea f845 	bl	8000618 <__aeabi_dmul>
 801658e:	4602      	mov	r2, r0
 8016590:	460b      	mov	r3, r1
 8016592:	4630      	mov	r0, r6
 8016594:	4639      	mov	r1, r7
 8016596:	f7e9 fe87 	bl	80002a8 <__aeabi_dsub>
 801659a:	ec53 2b19 	vmov	r2, r3, d9
 801659e:	f7ea f83b 	bl	8000618 <__aeabi_dmul>
 80165a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80165a6:	ec41 0b18 	vmov	d8, r0, r1
 80165aa:	4610      	mov	r0, r2
 80165ac:	4619      	mov	r1, r3
 80165ae:	f7ea f833 	bl	8000618 <__aeabi_dmul>
 80165b2:	a37d      	add	r3, pc, #500	; (adr r3, 80167a8 <__ieee754_pow+0x6f0>)
 80165b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165b8:	4604      	mov	r4, r0
 80165ba:	460d      	mov	r5, r1
 80165bc:	f7ea f82c 	bl	8000618 <__aeabi_dmul>
 80165c0:	a37b      	add	r3, pc, #492	; (adr r3, 80167b0 <__ieee754_pow+0x6f8>)
 80165c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c6:	f7e9 fe71 	bl	80002ac <__adddf3>
 80165ca:	4622      	mov	r2, r4
 80165cc:	462b      	mov	r3, r5
 80165ce:	f7ea f823 	bl	8000618 <__aeabi_dmul>
 80165d2:	a379      	add	r3, pc, #484	; (adr r3, 80167b8 <__ieee754_pow+0x700>)
 80165d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d8:	f7e9 fe68 	bl	80002ac <__adddf3>
 80165dc:	4622      	mov	r2, r4
 80165de:	462b      	mov	r3, r5
 80165e0:	f7ea f81a 	bl	8000618 <__aeabi_dmul>
 80165e4:	a376      	add	r3, pc, #472	; (adr r3, 80167c0 <__ieee754_pow+0x708>)
 80165e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ea:	f7e9 fe5f 	bl	80002ac <__adddf3>
 80165ee:	4622      	mov	r2, r4
 80165f0:	462b      	mov	r3, r5
 80165f2:	f7ea f811 	bl	8000618 <__aeabi_dmul>
 80165f6:	a374      	add	r3, pc, #464	; (adr r3, 80167c8 <__ieee754_pow+0x710>)
 80165f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165fc:	f7e9 fe56 	bl	80002ac <__adddf3>
 8016600:	4622      	mov	r2, r4
 8016602:	462b      	mov	r3, r5
 8016604:	f7ea f808 	bl	8000618 <__aeabi_dmul>
 8016608:	a371      	add	r3, pc, #452	; (adr r3, 80167d0 <__ieee754_pow+0x718>)
 801660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801660e:	f7e9 fe4d 	bl	80002ac <__adddf3>
 8016612:	4622      	mov	r2, r4
 8016614:	4606      	mov	r6, r0
 8016616:	460f      	mov	r7, r1
 8016618:	462b      	mov	r3, r5
 801661a:	4620      	mov	r0, r4
 801661c:	4629      	mov	r1, r5
 801661e:	f7e9 fffb 	bl	8000618 <__aeabi_dmul>
 8016622:	4602      	mov	r2, r0
 8016624:	460b      	mov	r3, r1
 8016626:	4630      	mov	r0, r6
 8016628:	4639      	mov	r1, r7
 801662a:	f7e9 fff5 	bl	8000618 <__aeabi_dmul>
 801662e:	4642      	mov	r2, r8
 8016630:	4604      	mov	r4, r0
 8016632:	460d      	mov	r5, r1
 8016634:	464b      	mov	r3, r9
 8016636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801663a:	f7e9 fe37 	bl	80002ac <__adddf3>
 801663e:	ec53 2b18 	vmov	r2, r3, d8
 8016642:	f7e9 ffe9 	bl	8000618 <__aeabi_dmul>
 8016646:	4622      	mov	r2, r4
 8016648:	462b      	mov	r3, r5
 801664a:	f7e9 fe2f 	bl	80002ac <__adddf3>
 801664e:	4642      	mov	r2, r8
 8016650:	4682      	mov	sl, r0
 8016652:	468b      	mov	fp, r1
 8016654:	464b      	mov	r3, r9
 8016656:	4640      	mov	r0, r8
 8016658:	4649      	mov	r1, r9
 801665a:	f7e9 ffdd 	bl	8000618 <__aeabi_dmul>
 801665e:	4b6c      	ldr	r3, [pc, #432]	; (8016810 <__ieee754_pow+0x758>)
 8016660:	2200      	movs	r2, #0
 8016662:	4606      	mov	r6, r0
 8016664:	460f      	mov	r7, r1
 8016666:	f7e9 fe21 	bl	80002ac <__adddf3>
 801666a:	4652      	mov	r2, sl
 801666c:	465b      	mov	r3, fp
 801666e:	f7e9 fe1d 	bl	80002ac <__adddf3>
 8016672:	9c04      	ldr	r4, [sp, #16]
 8016674:	460d      	mov	r5, r1
 8016676:	4622      	mov	r2, r4
 8016678:	460b      	mov	r3, r1
 801667a:	4640      	mov	r0, r8
 801667c:	4649      	mov	r1, r9
 801667e:	f7e9 ffcb 	bl	8000618 <__aeabi_dmul>
 8016682:	4b63      	ldr	r3, [pc, #396]	; (8016810 <__ieee754_pow+0x758>)
 8016684:	4680      	mov	r8, r0
 8016686:	4689      	mov	r9, r1
 8016688:	2200      	movs	r2, #0
 801668a:	4620      	mov	r0, r4
 801668c:	4629      	mov	r1, r5
 801668e:	f7e9 fe0b 	bl	80002a8 <__aeabi_dsub>
 8016692:	4632      	mov	r2, r6
 8016694:	463b      	mov	r3, r7
 8016696:	f7e9 fe07 	bl	80002a8 <__aeabi_dsub>
 801669a:	4602      	mov	r2, r0
 801669c:	460b      	mov	r3, r1
 801669e:	4650      	mov	r0, sl
 80166a0:	4659      	mov	r1, fp
 80166a2:	f7e9 fe01 	bl	80002a8 <__aeabi_dsub>
 80166a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80166aa:	f7e9 ffb5 	bl	8000618 <__aeabi_dmul>
 80166ae:	4622      	mov	r2, r4
 80166b0:	4606      	mov	r6, r0
 80166b2:	460f      	mov	r7, r1
 80166b4:	462b      	mov	r3, r5
 80166b6:	ec51 0b18 	vmov	r0, r1, d8
 80166ba:	f7e9 ffad 	bl	8000618 <__aeabi_dmul>
 80166be:	4602      	mov	r2, r0
 80166c0:	460b      	mov	r3, r1
 80166c2:	4630      	mov	r0, r6
 80166c4:	4639      	mov	r1, r7
 80166c6:	f7e9 fdf1 	bl	80002ac <__adddf3>
 80166ca:	4606      	mov	r6, r0
 80166cc:	460f      	mov	r7, r1
 80166ce:	4602      	mov	r2, r0
 80166d0:	460b      	mov	r3, r1
 80166d2:	4640      	mov	r0, r8
 80166d4:	4649      	mov	r1, r9
 80166d6:	f7e9 fde9 	bl	80002ac <__adddf3>
 80166da:	9c04      	ldr	r4, [sp, #16]
 80166dc:	a33e      	add	r3, pc, #248	; (adr r3, 80167d8 <__ieee754_pow+0x720>)
 80166de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e2:	4620      	mov	r0, r4
 80166e4:	460d      	mov	r5, r1
 80166e6:	f7e9 ff97 	bl	8000618 <__aeabi_dmul>
 80166ea:	4642      	mov	r2, r8
 80166ec:	ec41 0b18 	vmov	d8, r0, r1
 80166f0:	464b      	mov	r3, r9
 80166f2:	4620      	mov	r0, r4
 80166f4:	4629      	mov	r1, r5
 80166f6:	f7e9 fdd7 	bl	80002a8 <__aeabi_dsub>
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	4630      	mov	r0, r6
 8016700:	4639      	mov	r1, r7
 8016702:	f7e9 fdd1 	bl	80002a8 <__aeabi_dsub>
 8016706:	a336      	add	r3, pc, #216	; (adr r3, 80167e0 <__ieee754_pow+0x728>)
 8016708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801670c:	f7e9 ff84 	bl	8000618 <__aeabi_dmul>
 8016710:	a335      	add	r3, pc, #212	; (adr r3, 80167e8 <__ieee754_pow+0x730>)
 8016712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016716:	4606      	mov	r6, r0
 8016718:	460f      	mov	r7, r1
 801671a:	4620      	mov	r0, r4
 801671c:	4629      	mov	r1, r5
 801671e:	f7e9 ff7b 	bl	8000618 <__aeabi_dmul>
 8016722:	4602      	mov	r2, r0
 8016724:	460b      	mov	r3, r1
 8016726:	4630      	mov	r0, r6
 8016728:	4639      	mov	r1, r7
 801672a:	f7e9 fdbf 	bl	80002ac <__adddf3>
 801672e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016730:	4b38      	ldr	r3, [pc, #224]	; (8016814 <__ieee754_pow+0x75c>)
 8016732:	4413      	add	r3, r2
 8016734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016738:	f7e9 fdb8 	bl	80002ac <__adddf3>
 801673c:	4682      	mov	sl, r0
 801673e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016740:	468b      	mov	fp, r1
 8016742:	f7e9 feff 	bl	8000544 <__aeabi_i2d>
 8016746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016748:	4b33      	ldr	r3, [pc, #204]	; (8016818 <__ieee754_pow+0x760>)
 801674a:	4413      	add	r3, r2
 801674c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016750:	4606      	mov	r6, r0
 8016752:	460f      	mov	r7, r1
 8016754:	4652      	mov	r2, sl
 8016756:	465b      	mov	r3, fp
 8016758:	ec51 0b18 	vmov	r0, r1, d8
 801675c:	f7e9 fda6 	bl	80002ac <__adddf3>
 8016760:	4642      	mov	r2, r8
 8016762:	464b      	mov	r3, r9
 8016764:	f7e9 fda2 	bl	80002ac <__adddf3>
 8016768:	4632      	mov	r2, r6
 801676a:	463b      	mov	r3, r7
 801676c:	f7e9 fd9e 	bl	80002ac <__adddf3>
 8016770:	9c04      	ldr	r4, [sp, #16]
 8016772:	4632      	mov	r2, r6
 8016774:	463b      	mov	r3, r7
 8016776:	4620      	mov	r0, r4
 8016778:	460d      	mov	r5, r1
 801677a:	f7e9 fd95 	bl	80002a8 <__aeabi_dsub>
 801677e:	4642      	mov	r2, r8
 8016780:	464b      	mov	r3, r9
 8016782:	f7e9 fd91 	bl	80002a8 <__aeabi_dsub>
 8016786:	ec53 2b18 	vmov	r2, r3, d8
 801678a:	f7e9 fd8d 	bl	80002a8 <__aeabi_dsub>
 801678e:	4602      	mov	r2, r0
 8016790:	460b      	mov	r3, r1
 8016792:	4650      	mov	r0, sl
 8016794:	4659      	mov	r1, fp
 8016796:	e606      	b.n	80163a6 <__ieee754_pow+0x2ee>
 8016798:	2401      	movs	r4, #1
 801679a:	e6a0      	b.n	80164de <__ieee754_pow+0x426>
 801679c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80167f0 <__ieee754_pow+0x738>
 80167a0:	e60d      	b.n	80163be <__ieee754_pow+0x306>
 80167a2:	bf00      	nop
 80167a4:	f3af 8000 	nop.w
 80167a8:	4a454eef 	.word	0x4a454eef
 80167ac:	3fca7e28 	.word	0x3fca7e28
 80167b0:	93c9db65 	.word	0x93c9db65
 80167b4:	3fcd864a 	.word	0x3fcd864a
 80167b8:	a91d4101 	.word	0xa91d4101
 80167bc:	3fd17460 	.word	0x3fd17460
 80167c0:	518f264d 	.word	0x518f264d
 80167c4:	3fd55555 	.word	0x3fd55555
 80167c8:	db6fabff 	.word	0xdb6fabff
 80167cc:	3fdb6db6 	.word	0x3fdb6db6
 80167d0:	33333303 	.word	0x33333303
 80167d4:	3fe33333 	.word	0x3fe33333
 80167d8:	e0000000 	.word	0xe0000000
 80167dc:	3feec709 	.word	0x3feec709
 80167e0:	dc3a03fd 	.word	0xdc3a03fd
 80167e4:	3feec709 	.word	0x3feec709
 80167e8:	145b01f5 	.word	0x145b01f5
 80167ec:	be3e2fe0 	.word	0xbe3e2fe0
 80167f0:	00000000 	.word	0x00000000
 80167f4:	3ff00000 	.word	0x3ff00000
 80167f8:	7ff00000 	.word	0x7ff00000
 80167fc:	43400000 	.word	0x43400000
 8016800:	0003988e 	.word	0x0003988e
 8016804:	000bb679 	.word	0x000bb679
 8016808:	0801a0c8 	.word	0x0801a0c8
 801680c:	3ff00000 	.word	0x3ff00000
 8016810:	40080000 	.word	0x40080000
 8016814:	0801a0e8 	.word	0x0801a0e8
 8016818:	0801a0d8 	.word	0x0801a0d8
 801681c:	a3b5      	add	r3, pc, #724	; (adr r3, 8016af4 <__ieee754_pow+0xa3c>)
 801681e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016822:	4640      	mov	r0, r8
 8016824:	4649      	mov	r1, r9
 8016826:	f7e9 fd41 	bl	80002ac <__adddf3>
 801682a:	4622      	mov	r2, r4
 801682c:	ec41 0b1a 	vmov	d10, r0, r1
 8016830:	462b      	mov	r3, r5
 8016832:	4630      	mov	r0, r6
 8016834:	4639      	mov	r1, r7
 8016836:	f7e9 fd37 	bl	80002a8 <__aeabi_dsub>
 801683a:	4602      	mov	r2, r0
 801683c:	460b      	mov	r3, r1
 801683e:	ec51 0b1a 	vmov	r0, r1, d10
 8016842:	f7ea f979 	bl	8000b38 <__aeabi_dcmpgt>
 8016846:	2800      	cmp	r0, #0
 8016848:	f47f adf8 	bne.w	801643c <__ieee754_pow+0x384>
 801684c:	4aa4      	ldr	r2, [pc, #656]	; (8016ae0 <__ieee754_pow+0xa28>)
 801684e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016852:	4293      	cmp	r3, r2
 8016854:	f340 810b 	ble.w	8016a6e <__ieee754_pow+0x9b6>
 8016858:	151b      	asrs	r3, r3, #20
 801685a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801685e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8016862:	fa4a f303 	asr.w	r3, sl, r3
 8016866:	445b      	add	r3, fp
 8016868:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801686c:	4e9d      	ldr	r6, [pc, #628]	; (8016ae4 <__ieee754_pow+0xa2c>)
 801686e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8016872:	4116      	asrs	r6, r2
 8016874:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8016878:	2000      	movs	r0, #0
 801687a:	ea23 0106 	bic.w	r1, r3, r6
 801687e:	f1c2 0214 	rsb	r2, r2, #20
 8016882:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8016886:	fa4a fa02 	asr.w	sl, sl, r2
 801688a:	f1bb 0f00 	cmp.w	fp, #0
 801688e:	4602      	mov	r2, r0
 8016890:	460b      	mov	r3, r1
 8016892:	4620      	mov	r0, r4
 8016894:	4629      	mov	r1, r5
 8016896:	bfb8      	it	lt
 8016898:	f1ca 0a00 	rsblt	sl, sl, #0
 801689c:	f7e9 fd04 	bl	80002a8 <__aeabi_dsub>
 80168a0:	ec41 0b19 	vmov	d9, r0, r1
 80168a4:	4642      	mov	r2, r8
 80168a6:	464b      	mov	r3, r9
 80168a8:	ec51 0b19 	vmov	r0, r1, d9
 80168ac:	f7e9 fcfe 	bl	80002ac <__adddf3>
 80168b0:	2400      	movs	r4, #0
 80168b2:	a379      	add	r3, pc, #484	; (adr r3, 8016a98 <__ieee754_pow+0x9e0>)
 80168b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b8:	4620      	mov	r0, r4
 80168ba:	460d      	mov	r5, r1
 80168bc:	f7e9 feac 	bl	8000618 <__aeabi_dmul>
 80168c0:	ec53 2b19 	vmov	r2, r3, d9
 80168c4:	4606      	mov	r6, r0
 80168c6:	460f      	mov	r7, r1
 80168c8:	4620      	mov	r0, r4
 80168ca:	4629      	mov	r1, r5
 80168cc:	f7e9 fcec 	bl	80002a8 <__aeabi_dsub>
 80168d0:	4602      	mov	r2, r0
 80168d2:	460b      	mov	r3, r1
 80168d4:	4640      	mov	r0, r8
 80168d6:	4649      	mov	r1, r9
 80168d8:	f7e9 fce6 	bl	80002a8 <__aeabi_dsub>
 80168dc:	a370      	add	r3, pc, #448	; (adr r3, 8016aa0 <__ieee754_pow+0x9e8>)
 80168de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168e2:	f7e9 fe99 	bl	8000618 <__aeabi_dmul>
 80168e6:	a370      	add	r3, pc, #448	; (adr r3, 8016aa8 <__ieee754_pow+0x9f0>)
 80168e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ec:	4680      	mov	r8, r0
 80168ee:	4689      	mov	r9, r1
 80168f0:	4620      	mov	r0, r4
 80168f2:	4629      	mov	r1, r5
 80168f4:	f7e9 fe90 	bl	8000618 <__aeabi_dmul>
 80168f8:	4602      	mov	r2, r0
 80168fa:	460b      	mov	r3, r1
 80168fc:	4640      	mov	r0, r8
 80168fe:	4649      	mov	r1, r9
 8016900:	f7e9 fcd4 	bl	80002ac <__adddf3>
 8016904:	4604      	mov	r4, r0
 8016906:	460d      	mov	r5, r1
 8016908:	4602      	mov	r2, r0
 801690a:	460b      	mov	r3, r1
 801690c:	4630      	mov	r0, r6
 801690e:	4639      	mov	r1, r7
 8016910:	f7e9 fccc 	bl	80002ac <__adddf3>
 8016914:	4632      	mov	r2, r6
 8016916:	463b      	mov	r3, r7
 8016918:	4680      	mov	r8, r0
 801691a:	4689      	mov	r9, r1
 801691c:	f7e9 fcc4 	bl	80002a8 <__aeabi_dsub>
 8016920:	4602      	mov	r2, r0
 8016922:	460b      	mov	r3, r1
 8016924:	4620      	mov	r0, r4
 8016926:	4629      	mov	r1, r5
 8016928:	f7e9 fcbe 	bl	80002a8 <__aeabi_dsub>
 801692c:	4642      	mov	r2, r8
 801692e:	4606      	mov	r6, r0
 8016930:	460f      	mov	r7, r1
 8016932:	464b      	mov	r3, r9
 8016934:	4640      	mov	r0, r8
 8016936:	4649      	mov	r1, r9
 8016938:	f7e9 fe6e 	bl	8000618 <__aeabi_dmul>
 801693c:	a35c      	add	r3, pc, #368	; (adr r3, 8016ab0 <__ieee754_pow+0x9f8>)
 801693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016942:	4604      	mov	r4, r0
 8016944:	460d      	mov	r5, r1
 8016946:	f7e9 fe67 	bl	8000618 <__aeabi_dmul>
 801694a:	a35b      	add	r3, pc, #364	; (adr r3, 8016ab8 <__ieee754_pow+0xa00>)
 801694c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016950:	f7e9 fcaa 	bl	80002a8 <__aeabi_dsub>
 8016954:	4622      	mov	r2, r4
 8016956:	462b      	mov	r3, r5
 8016958:	f7e9 fe5e 	bl	8000618 <__aeabi_dmul>
 801695c:	a358      	add	r3, pc, #352	; (adr r3, 8016ac0 <__ieee754_pow+0xa08>)
 801695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016962:	f7e9 fca3 	bl	80002ac <__adddf3>
 8016966:	4622      	mov	r2, r4
 8016968:	462b      	mov	r3, r5
 801696a:	f7e9 fe55 	bl	8000618 <__aeabi_dmul>
 801696e:	a356      	add	r3, pc, #344	; (adr r3, 8016ac8 <__ieee754_pow+0xa10>)
 8016970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016974:	f7e9 fc98 	bl	80002a8 <__aeabi_dsub>
 8016978:	4622      	mov	r2, r4
 801697a:	462b      	mov	r3, r5
 801697c:	f7e9 fe4c 	bl	8000618 <__aeabi_dmul>
 8016980:	a353      	add	r3, pc, #332	; (adr r3, 8016ad0 <__ieee754_pow+0xa18>)
 8016982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016986:	f7e9 fc91 	bl	80002ac <__adddf3>
 801698a:	4622      	mov	r2, r4
 801698c:	462b      	mov	r3, r5
 801698e:	f7e9 fe43 	bl	8000618 <__aeabi_dmul>
 8016992:	4602      	mov	r2, r0
 8016994:	460b      	mov	r3, r1
 8016996:	4640      	mov	r0, r8
 8016998:	4649      	mov	r1, r9
 801699a:	f7e9 fc85 	bl	80002a8 <__aeabi_dsub>
 801699e:	4604      	mov	r4, r0
 80169a0:	460d      	mov	r5, r1
 80169a2:	4602      	mov	r2, r0
 80169a4:	460b      	mov	r3, r1
 80169a6:	4640      	mov	r0, r8
 80169a8:	4649      	mov	r1, r9
 80169aa:	f7e9 fe35 	bl	8000618 <__aeabi_dmul>
 80169ae:	2200      	movs	r2, #0
 80169b0:	ec41 0b19 	vmov	d9, r0, r1
 80169b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80169b8:	4620      	mov	r0, r4
 80169ba:	4629      	mov	r1, r5
 80169bc:	f7e9 fc74 	bl	80002a8 <__aeabi_dsub>
 80169c0:	4602      	mov	r2, r0
 80169c2:	460b      	mov	r3, r1
 80169c4:	ec51 0b19 	vmov	r0, r1, d9
 80169c8:	f7e9 ff50 	bl	800086c <__aeabi_ddiv>
 80169cc:	4632      	mov	r2, r6
 80169ce:	4604      	mov	r4, r0
 80169d0:	460d      	mov	r5, r1
 80169d2:	463b      	mov	r3, r7
 80169d4:	4640      	mov	r0, r8
 80169d6:	4649      	mov	r1, r9
 80169d8:	f7e9 fe1e 	bl	8000618 <__aeabi_dmul>
 80169dc:	4632      	mov	r2, r6
 80169de:	463b      	mov	r3, r7
 80169e0:	f7e9 fc64 	bl	80002ac <__adddf3>
 80169e4:	4602      	mov	r2, r0
 80169e6:	460b      	mov	r3, r1
 80169e8:	4620      	mov	r0, r4
 80169ea:	4629      	mov	r1, r5
 80169ec:	f7e9 fc5c 	bl	80002a8 <__aeabi_dsub>
 80169f0:	4642      	mov	r2, r8
 80169f2:	464b      	mov	r3, r9
 80169f4:	f7e9 fc58 	bl	80002a8 <__aeabi_dsub>
 80169f8:	460b      	mov	r3, r1
 80169fa:	4602      	mov	r2, r0
 80169fc:	493a      	ldr	r1, [pc, #232]	; (8016ae8 <__ieee754_pow+0xa30>)
 80169fe:	2000      	movs	r0, #0
 8016a00:	f7e9 fc52 	bl	80002a8 <__aeabi_dsub>
 8016a04:	e9cd 0100 	strd	r0, r1, [sp]
 8016a08:	9b01      	ldr	r3, [sp, #4]
 8016a0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016a12:	da2f      	bge.n	8016a74 <__ieee754_pow+0x9bc>
 8016a14:	4650      	mov	r0, sl
 8016a16:	ed9d 0b00 	vldr	d0, [sp]
 8016a1a:	f000 f9cd 	bl	8016db8 <scalbn>
 8016a1e:	ec51 0b10 	vmov	r0, r1, d0
 8016a22:	ec53 2b18 	vmov	r2, r3, d8
 8016a26:	f7ff bbe0 	b.w	80161ea <__ieee754_pow+0x132>
 8016a2a:	4b30      	ldr	r3, [pc, #192]	; (8016aec <__ieee754_pow+0xa34>)
 8016a2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8016a30:	429e      	cmp	r6, r3
 8016a32:	f77f af0b 	ble.w	801684c <__ieee754_pow+0x794>
 8016a36:	4b2e      	ldr	r3, [pc, #184]	; (8016af0 <__ieee754_pow+0xa38>)
 8016a38:	440b      	add	r3, r1
 8016a3a:	4303      	orrs	r3, r0
 8016a3c:	d00b      	beq.n	8016a56 <__ieee754_pow+0x99e>
 8016a3e:	a326      	add	r3, pc, #152	; (adr r3, 8016ad8 <__ieee754_pow+0xa20>)
 8016a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a44:	ec51 0b18 	vmov	r0, r1, d8
 8016a48:	f7e9 fde6 	bl	8000618 <__aeabi_dmul>
 8016a4c:	a322      	add	r3, pc, #136	; (adr r3, 8016ad8 <__ieee754_pow+0xa20>)
 8016a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a52:	f7ff bbca 	b.w	80161ea <__ieee754_pow+0x132>
 8016a56:	4622      	mov	r2, r4
 8016a58:	462b      	mov	r3, r5
 8016a5a:	f7e9 fc25 	bl	80002a8 <__aeabi_dsub>
 8016a5e:	4642      	mov	r2, r8
 8016a60:	464b      	mov	r3, r9
 8016a62:	f7ea f85f 	bl	8000b24 <__aeabi_dcmpge>
 8016a66:	2800      	cmp	r0, #0
 8016a68:	f43f aef0 	beq.w	801684c <__ieee754_pow+0x794>
 8016a6c:	e7e7      	b.n	8016a3e <__ieee754_pow+0x986>
 8016a6e:	f04f 0a00 	mov.w	sl, #0
 8016a72:	e717      	b.n	80168a4 <__ieee754_pow+0x7ec>
 8016a74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a78:	4619      	mov	r1, r3
 8016a7a:	e7d2      	b.n	8016a22 <__ieee754_pow+0x96a>
 8016a7c:	491a      	ldr	r1, [pc, #104]	; (8016ae8 <__ieee754_pow+0xa30>)
 8016a7e:	2000      	movs	r0, #0
 8016a80:	f7ff bb9e 	b.w	80161c0 <__ieee754_pow+0x108>
 8016a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016a88:	f7ff bb9a 	b.w	80161c0 <__ieee754_pow+0x108>
 8016a8c:	9000      	str	r0, [sp, #0]
 8016a8e:	f7ff bb76 	b.w	801617e <__ieee754_pow+0xc6>
 8016a92:	2100      	movs	r1, #0
 8016a94:	f7ff bb60 	b.w	8016158 <__ieee754_pow+0xa0>
 8016a98:	00000000 	.word	0x00000000
 8016a9c:	3fe62e43 	.word	0x3fe62e43
 8016aa0:	fefa39ef 	.word	0xfefa39ef
 8016aa4:	3fe62e42 	.word	0x3fe62e42
 8016aa8:	0ca86c39 	.word	0x0ca86c39
 8016aac:	be205c61 	.word	0xbe205c61
 8016ab0:	72bea4d0 	.word	0x72bea4d0
 8016ab4:	3e663769 	.word	0x3e663769
 8016ab8:	c5d26bf1 	.word	0xc5d26bf1
 8016abc:	3ebbbd41 	.word	0x3ebbbd41
 8016ac0:	af25de2c 	.word	0xaf25de2c
 8016ac4:	3f11566a 	.word	0x3f11566a
 8016ac8:	16bebd93 	.word	0x16bebd93
 8016acc:	3f66c16c 	.word	0x3f66c16c
 8016ad0:	5555553e 	.word	0x5555553e
 8016ad4:	3fc55555 	.word	0x3fc55555
 8016ad8:	c2f8f359 	.word	0xc2f8f359
 8016adc:	01a56e1f 	.word	0x01a56e1f
 8016ae0:	3fe00000 	.word	0x3fe00000
 8016ae4:	000fffff 	.word	0x000fffff
 8016ae8:	3ff00000 	.word	0x3ff00000
 8016aec:	4090cbff 	.word	0x4090cbff
 8016af0:	3f6f3400 	.word	0x3f6f3400
 8016af4:	652b82fe 	.word	0x652b82fe
 8016af8:	3c971547 	.word	0x3c971547

08016afc <__ieee754_sqrt>:
 8016afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b00:	ec55 4b10 	vmov	r4, r5, d0
 8016b04:	4e56      	ldr	r6, [pc, #344]	; (8016c60 <__ieee754_sqrt+0x164>)
 8016b06:	43ae      	bics	r6, r5
 8016b08:	ee10 0a10 	vmov	r0, s0
 8016b0c:	ee10 3a10 	vmov	r3, s0
 8016b10:	4629      	mov	r1, r5
 8016b12:	462a      	mov	r2, r5
 8016b14:	d110      	bne.n	8016b38 <__ieee754_sqrt+0x3c>
 8016b16:	ee10 2a10 	vmov	r2, s0
 8016b1a:	462b      	mov	r3, r5
 8016b1c:	f7e9 fd7c 	bl	8000618 <__aeabi_dmul>
 8016b20:	4602      	mov	r2, r0
 8016b22:	460b      	mov	r3, r1
 8016b24:	4620      	mov	r0, r4
 8016b26:	4629      	mov	r1, r5
 8016b28:	f7e9 fbc0 	bl	80002ac <__adddf3>
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	460d      	mov	r5, r1
 8016b30:	ec45 4b10 	vmov	d0, r4, r5
 8016b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b38:	2d00      	cmp	r5, #0
 8016b3a:	dc10      	bgt.n	8016b5e <__ieee754_sqrt+0x62>
 8016b3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016b40:	4330      	orrs	r0, r6
 8016b42:	d0f5      	beq.n	8016b30 <__ieee754_sqrt+0x34>
 8016b44:	b15d      	cbz	r5, 8016b5e <__ieee754_sqrt+0x62>
 8016b46:	ee10 2a10 	vmov	r2, s0
 8016b4a:	462b      	mov	r3, r5
 8016b4c:	ee10 0a10 	vmov	r0, s0
 8016b50:	f7e9 fbaa 	bl	80002a8 <__aeabi_dsub>
 8016b54:	4602      	mov	r2, r0
 8016b56:	460b      	mov	r3, r1
 8016b58:	f7e9 fe88 	bl	800086c <__aeabi_ddiv>
 8016b5c:	e7e6      	b.n	8016b2c <__ieee754_sqrt+0x30>
 8016b5e:	1509      	asrs	r1, r1, #20
 8016b60:	d076      	beq.n	8016c50 <__ieee754_sqrt+0x154>
 8016b62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016b66:	07ce      	lsls	r6, r1, #31
 8016b68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8016b6c:	bf5e      	ittt	pl
 8016b6e:	0fda      	lsrpl	r2, r3, #31
 8016b70:	005b      	lslpl	r3, r3, #1
 8016b72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8016b76:	0fda      	lsrs	r2, r3, #31
 8016b78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8016b7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016b80:	2000      	movs	r0, #0
 8016b82:	106d      	asrs	r5, r5, #1
 8016b84:	005b      	lsls	r3, r3, #1
 8016b86:	f04f 0e16 	mov.w	lr, #22
 8016b8a:	4684      	mov	ip, r0
 8016b8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016b90:	eb0c 0401 	add.w	r4, ip, r1
 8016b94:	4294      	cmp	r4, r2
 8016b96:	bfde      	ittt	le
 8016b98:	1b12      	suble	r2, r2, r4
 8016b9a:	eb04 0c01 	addle.w	ip, r4, r1
 8016b9e:	1840      	addle	r0, r0, r1
 8016ba0:	0052      	lsls	r2, r2, #1
 8016ba2:	f1be 0e01 	subs.w	lr, lr, #1
 8016ba6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016baa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016bae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016bb2:	d1ed      	bne.n	8016b90 <__ieee754_sqrt+0x94>
 8016bb4:	4671      	mov	r1, lr
 8016bb6:	2720      	movs	r7, #32
 8016bb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016bbc:	4562      	cmp	r2, ip
 8016bbe:	eb04 060e 	add.w	r6, r4, lr
 8016bc2:	dc02      	bgt.n	8016bca <__ieee754_sqrt+0xce>
 8016bc4:	d113      	bne.n	8016bee <__ieee754_sqrt+0xf2>
 8016bc6:	429e      	cmp	r6, r3
 8016bc8:	d811      	bhi.n	8016bee <__ieee754_sqrt+0xf2>
 8016bca:	2e00      	cmp	r6, #0
 8016bcc:	eb06 0e04 	add.w	lr, r6, r4
 8016bd0:	da43      	bge.n	8016c5a <__ieee754_sqrt+0x15e>
 8016bd2:	f1be 0f00 	cmp.w	lr, #0
 8016bd6:	db40      	blt.n	8016c5a <__ieee754_sqrt+0x15e>
 8016bd8:	f10c 0801 	add.w	r8, ip, #1
 8016bdc:	eba2 020c 	sub.w	r2, r2, ip
 8016be0:	429e      	cmp	r6, r3
 8016be2:	bf88      	it	hi
 8016be4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016be8:	1b9b      	subs	r3, r3, r6
 8016bea:	4421      	add	r1, r4
 8016bec:	46c4      	mov	ip, r8
 8016bee:	0052      	lsls	r2, r2, #1
 8016bf0:	3f01      	subs	r7, #1
 8016bf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016bf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016bfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016bfe:	d1dd      	bne.n	8016bbc <__ieee754_sqrt+0xc0>
 8016c00:	4313      	orrs	r3, r2
 8016c02:	d006      	beq.n	8016c12 <__ieee754_sqrt+0x116>
 8016c04:	1c4c      	adds	r4, r1, #1
 8016c06:	bf13      	iteet	ne
 8016c08:	3101      	addne	r1, #1
 8016c0a:	3001      	addeq	r0, #1
 8016c0c:	4639      	moveq	r1, r7
 8016c0e:	f021 0101 	bicne.w	r1, r1, #1
 8016c12:	1043      	asrs	r3, r0, #1
 8016c14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016c18:	0849      	lsrs	r1, r1, #1
 8016c1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016c1e:	07c2      	lsls	r2, r0, #31
 8016c20:	bf48      	it	mi
 8016c22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8016c26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8016c2a:	460c      	mov	r4, r1
 8016c2c:	463d      	mov	r5, r7
 8016c2e:	e77f      	b.n	8016b30 <__ieee754_sqrt+0x34>
 8016c30:	0ada      	lsrs	r2, r3, #11
 8016c32:	3815      	subs	r0, #21
 8016c34:	055b      	lsls	r3, r3, #21
 8016c36:	2a00      	cmp	r2, #0
 8016c38:	d0fa      	beq.n	8016c30 <__ieee754_sqrt+0x134>
 8016c3a:	02d7      	lsls	r7, r2, #11
 8016c3c:	d50a      	bpl.n	8016c54 <__ieee754_sqrt+0x158>
 8016c3e:	f1c1 0420 	rsb	r4, r1, #32
 8016c42:	fa23 f404 	lsr.w	r4, r3, r4
 8016c46:	1e4d      	subs	r5, r1, #1
 8016c48:	408b      	lsls	r3, r1
 8016c4a:	4322      	orrs	r2, r4
 8016c4c:	1b41      	subs	r1, r0, r5
 8016c4e:	e788      	b.n	8016b62 <__ieee754_sqrt+0x66>
 8016c50:	4608      	mov	r0, r1
 8016c52:	e7f0      	b.n	8016c36 <__ieee754_sqrt+0x13a>
 8016c54:	0052      	lsls	r2, r2, #1
 8016c56:	3101      	adds	r1, #1
 8016c58:	e7ef      	b.n	8016c3a <__ieee754_sqrt+0x13e>
 8016c5a:	46e0      	mov	r8, ip
 8016c5c:	e7be      	b.n	8016bdc <__ieee754_sqrt+0xe0>
 8016c5e:	bf00      	nop
 8016c60:	7ff00000 	.word	0x7ff00000

08016c64 <fabs>:
 8016c64:	ec51 0b10 	vmov	r0, r1, d0
 8016c68:	ee10 2a10 	vmov	r2, s0
 8016c6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016c70:	ec43 2b10 	vmov	d0, r2, r3
 8016c74:	4770      	bx	lr

08016c76 <finite>:
 8016c76:	b082      	sub	sp, #8
 8016c78:	ed8d 0b00 	vstr	d0, [sp]
 8016c7c:	9801      	ldr	r0, [sp, #4]
 8016c7e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016c82:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016c86:	0fc0      	lsrs	r0, r0, #31
 8016c88:	b002      	add	sp, #8
 8016c8a:	4770      	bx	lr
 8016c8c:	0000      	movs	r0, r0
	...

08016c90 <nan>:
 8016c90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016c98 <nan+0x8>
 8016c94:	4770      	bx	lr
 8016c96:	bf00      	nop
 8016c98:	00000000 	.word	0x00000000
 8016c9c:	7ff80000 	.word	0x7ff80000

08016ca0 <rint>:
 8016ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ca2:	ec51 0b10 	vmov	r0, r1, d0
 8016ca6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016caa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016cae:	2e13      	cmp	r6, #19
 8016cb0:	ee10 4a10 	vmov	r4, s0
 8016cb4:	460b      	mov	r3, r1
 8016cb6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016cba:	dc58      	bgt.n	8016d6e <rint+0xce>
 8016cbc:	2e00      	cmp	r6, #0
 8016cbe:	da2b      	bge.n	8016d18 <rint+0x78>
 8016cc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016cc4:	4302      	orrs	r2, r0
 8016cc6:	d023      	beq.n	8016d10 <rint+0x70>
 8016cc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016ccc:	4302      	orrs	r2, r0
 8016cce:	4254      	negs	r4, r2
 8016cd0:	4314      	orrs	r4, r2
 8016cd2:	0c4b      	lsrs	r3, r1, #17
 8016cd4:	0b24      	lsrs	r4, r4, #12
 8016cd6:	045b      	lsls	r3, r3, #17
 8016cd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016cdc:	ea44 0103 	orr.w	r1, r4, r3
 8016ce0:	4b32      	ldr	r3, [pc, #200]	; (8016dac <rint+0x10c>)
 8016ce2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016ce6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016cea:	4602      	mov	r2, r0
 8016cec:	460b      	mov	r3, r1
 8016cee:	4630      	mov	r0, r6
 8016cf0:	4639      	mov	r1, r7
 8016cf2:	f7e9 fadb 	bl	80002ac <__adddf3>
 8016cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8016cfa:	463b      	mov	r3, r7
 8016cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d00:	4632      	mov	r2, r6
 8016d02:	f7e9 fad1 	bl	80002a8 <__aeabi_dsub>
 8016d06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016d0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016d0e:	4639      	mov	r1, r7
 8016d10:	ec41 0b10 	vmov	d0, r0, r1
 8016d14:	b003      	add	sp, #12
 8016d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d18:	4a25      	ldr	r2, [pc, #148]	; (8016db0 <rint+0x110>)
 8016d1a:	4132      	asrs	r2, r6
 8016d1c:	ea01 0702 	and.w	r7, r1, r2
 8016d20:	4307      	orrs	r7, r0
 8016d22:	d0f5      	beq.n	8016d10 <rint+0x70>
 8016d24:	0851      	lsrs	r1, r2, #1
 8016d26:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8016d2a:	4314      	orrs	r4, r2
 8016d2c:	d00c      	beq.n	8016d48 <rint+0xa8>
 8016d2e:	ea23 0201 	bic.w	r2, r3, r1
 8016d32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016d36:	2e13      	cmp	r6, #19
 8016d38:	fa43 f606 	asr.w	r6, r3, r6
 8016d3c:	bf0c      	ite	eq
 8016d3e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016d42:	2400      	movne	r4, #0
 8016d44:	ea42 0306 	orr.w	r3, r2, r6
 8016d48:	4918      	ldr	r1, [pc, #96]	; (8016dac <rint+0x10c>)
 8016d4a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016d4e:	4622      	mov	r2, r4
 8016d50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016d54:	4620      	mov	r0, r4
 8016d56:	4629      	mov	r1, r5
 8016d58:	f7e9 faa8 	bl	80002ac <__adddf3>
 8016d5c:	e9cd 0100 	strd	r0, r1, [sp]
 8016d60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d64:	4622      	mov	r2, r4
 8016d66:	462b      	mov	r3, r5
 8016d68:	f7e9 fa9e 	bl	80002a8 <__aeabi_dsub>
 8016d6c:	e7d0      	b.n	8016d10 <rint+0x70>
 8016d6e:	2e33      	cmp	r6, #51	; 0x33
 8016d70:	dd07      	ble.n	8016d82 <rint+0xe2>
 8016d72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016d76:	d1cb      	bne.n	8016d10 <rint+0x70>
 8016d78:	ee10 2a10 	vmov	r2, s0
 8016d7c:	f7e9 fa96 	bl	80002ac <__adddf3>
 8016d80:	e7c6      	b.n	8016d10 <rint+0x70>
 8016d82:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8016d86:	f04f 36ff 	mov.w	r6, #4294967295
 8016d8a:	40d6      	lsrs	r6, r2
 8016d8c:	4230      	tst	r0, r6
 8016d8e:	d0bf      	beq.n	8016d10 <rint+0x70>
 8016d90:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8016d94:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8016d98:	bf1f      	itttt	ne
 8016d9a:	ea24 0101 	bicne.w	r1, r4, r1
 8016d9e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016da2:	fa44 f202 	asrne.w	r2, r4, r2
 8016da6:	ea41 0402 	orrne.w	r4, r1, r2
 8016daa:	e7cd      	b.n	8016d48 <rint+0xa8>
 8016dac:	0801a0f8 	.word	0x0801a0f8
 8016db0:	000fffff 	.word	0x000fffff
 8016db4:	00000000 	.word	0x00000000

08016db8 <scalbn>:
 8016db8:	b570      	push	{r4, r5, r6, lr}
 8016dba:	ec55 4b10 	vmov	r4, r5, d0
 8016dbe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016dc2:	4606      	mov	r6, r0
 8016dc4:	462b      	mov	r3, r5
 8016dc6:	b99a      	cbnz	r2, 8016df0 <scalbn+0x38>
 8016dc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016dcc:	4323      	orrs	r3, r4
 8016dce:	d036      	beq.n	8016e3e <scalbn+0x86>
 8016dd0:	4b39      	ldr	r3, [pc, #228]	; (8016eb8 <scalbn+0x100>)
 8016dd2:	4629      	mov	r1, r5
 8016dd4:	ee10 0a10 	vmov	r0, s0
 8016dd8:	2200      	movs	r2, #0
 8016dda:	f7e9 fc1d 	bl	8000618 <__aeabi_dmul>
 8016dde:	4b37      	ldr	r3, [pc, #220]	; (8016ebc <scalbn+0x104>)
 8016de0:	429e      	cmp	r6, r3
 8016de2:	4604      	mov	r4, r0
 8016de4:	460d      	mov	r5, r1
 8016de6:	da10      	bge.n	8016e0a <scalbn+0x52>
 8016de8:	a32b      	add	r3, pc, #172	; (adr r3, 8016e98 <scalbn+0xe0>)
 8016dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dee:	e03a      	b.n	8016e66 <scalbn+0xae>
 8016df0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016df4:	428a      	cmp	r2, r1
 8016df6:	d10c      	bne.n	8016e12 <scalbn+0x5a>
 8016df8:	ee10 2a10 	vmov	r2, s0
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	4629      	mov	r1, r5
 8016e00:	f7e9 fa54 	bl	80002ac <__adddf3>
 8016e04:	4604      	mov	r4, r0
 8016e06:	460d      	mov	r5, r1
 8016e08:	e019      	b.n	8016e3e <scalbn+0x86>
 8016e0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016e0e:	460b      	mov	r3, r1
 8016e10:	3a36      	subs	r2, #54	; 0x36
 8016e12:	4432      	add	r2, r6
 8016e14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016e18:	428a      	cmp	r2, r1
 8016e1a:	dd08      	ble.n	8016e2e <scalbn+0x76>
 8016e1c:	2d00      	cmp	r5, #0
 8016e1e:	a120      	add	r1, pc, #128	; (adr r1, 8016ea0 <scalbn+0xe8>)
 8016e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e24:	da1c      	bge.n	8016e60 <scalbn+0xa8>
 8016e26:	a120      	add	r1, pc, #128	; (adr r1, 8016ea8 <scalbn+0xf0>)
 8016e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e2c:	e018      	b.n	8016e60 <scalbn+0xa8>
 8016e2e:	2a00      	cmp	r2, #0
 8016e30:	dd08      	ble.n	8016e44 <scalbn+0x8c>
 8016e32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016e36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016e3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016e3e:	ec45 4b10 	vmov	d0, r4, r5
 8016e42:	bd70      	pop	{r4, r5, r6, pc}
 8016e44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016e48:	da19      	bge.n	8016e7e <scalbn+0xc6>
 8016e4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016e4e:	429e      	cmp	r6, r3
 8016e50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8016e54:	dd0a      	ble.n	8016e6c <scalbn+0xb4>
 8016e56:	a112      	add	r1, pc, #72	; (adr r1, 8016ea0 <scalbn+0xe8>)
 8016e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d1e2      	bne.n	8016e26 <scalbn+0x6e>
 8016e60:	a30f      	add	r3, pc, #60	; (adr r3, 8016ea0 <scalbn+0xe8>)
 8016e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e66:	f7e9 fbd7 	bl	8000618 <__aeabi_dmul>
 8016e6a:	e7cb      	b.n	8016e04 <scalbn+0x4c>
 8016e6c:	a10a      	add	r1, pc, #40	; (adr r1, 8016e98 <scalbn+0xe0>)
 8016e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d0b8      	beq.n	8016de8 <scalbn+0x30>
 8016e76:	a10e      	add	r1, pc, #56	; (adr r1, 8016eb0 <scalbn+0xf8>)
 8016e78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e7c:	e7b4      	b.n	8016de8 <scalbn+0x30>
 8016e7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016e82:	3236      	adds	r2, #54	; 0x36
 8016e84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016e88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	4b0c      	ldr	r3, [pc, #48]	; (8016ec0 <scalbn+0x108>)
 8016e90:	2200      	movs	r2, #0
 8016e92:	e7e8      	b.n	8016e66 <scalbn+0xae>
 8016e94:	f3af 8000 	nop.w
 8016e98:	c2f8f359 	.word	0xc2f8f359
 8016e9c:	01a56e1f 	.word	0x01a56e1f
 8016ea0:	8800759c 	.word	0x8800759c
 8016ea4:	7e37e43c 	.word	0x7e37e43c
 8016ea8:	8800759c 	.word	0x8800759c
 8016eac:	fe37e43c 	.word	0xfe37e43c
 8016eb0:	c2f8f359 	.word	0xc2f8f359
 8016eb4:	81a56e1f 	.word	0x81a56e1f
 8016eb8:	43500000 	.word	0x43500000
 8016ebc:	ffff3cb0 	.word	0xffff3cb0
 8016ec0:	3c900000 	.word	0x3c900000

08016ec4 <_init>:
 8016ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ec6:	bf00      	nop
 8016ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016eca:	bc08      	pop	{r3}
 8016ecc:	469e      	mov	lr, r3
 8016ece:	4770      	bx	lr

08016ed0 <_fini>:
 8016ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ed2:	bf00      	nop
 8016ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ed6:	bc08      	pop	{r3}
 8016ed8:	469e      	mov	lr, r3
 8016eda:	4770      	bx	lr
