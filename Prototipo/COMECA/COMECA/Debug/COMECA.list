
COMECA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c40  0800faf0  0800faf0  0001faf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012730  08012730  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08012730  08012730  00022730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012738  08012738  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012738  08012738  00022738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801273c  0801273c  0002273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08012740  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b48  20000098  080127d8  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008be0  080127d8  00038be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000300bc  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bc6  00000000  00000000  00060184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00065d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  00067318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d557  00000000  00000000  00068838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025274  00000000  00000000  00095d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1dce  00000000  00000000  000bb003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019cdd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006320  00000000  00000000  0019ce24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fad8 	.word	0x0800fad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800fad8 	.word	0x0800fad8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <getCaliperNumberGivenClockPin>:
static GPIO_TypeDef * CAL_DATA_PORT_MAPPING[NUMBER_OF_CALIPERS] = {GPIOE, GPIOB, GPIOA, GPIOE};
static uint16_t CAL_DATA_PIN_MAPPING[NUMBER_OF_CALIPERS] = {GPIO_PIN_11, GPIO_PIN_1, GPIO_PIN_0, GPIO_PIN_4};

static uint16_t CAL_CLK_MAPPING[NUMBER_OF_CALIPERS] = {CAL1_CLK_Pin, CAL2_CLK_Pin, CAL3_CLK_Pin, CAL4_CLK_Pin};

int getCaliperNumberGivenClockPin(uint16_t CLK_Pin){
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	80fb      	strh	r3, [r7, #6]
	int i;
	for(i=0; i<NUMBER_OF_CALIPERS; i++) { if(CAL_CLK_MAPPING[i] == CLK_Pin){ break; } }
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	e009      	b.n	800058c <getCaliperNumberGivenClockPin+0x24>
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <getCaliperNumberGivenClockPin+0x3c>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000580:	88fa      	ldrh	r2, [r7, #6]
 8000582:	429a      	cmp	r2, r3
 8000584:	d006      	beq.n	8000594 <getCaliperNumberGivenClockPin+0x2c>
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b03      	cmp	r3, #3
 8000590:	ddf2      	ble.n	8000578 <getCaliperNumberGivenClockPin+0x10>
 8000592:	e000      	b.n	8000596 <getCaliperNumberGivenClockPin+0x2e>
 8000594:	bf00      	nop
	return i;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	20000018 	.word	0x20000018

080005a8 <getCaliperData>:

bool getCaliperData(caliper_number curr_caliper){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(CAL_DATA_PORT_MAPPING[curr_caliper],CAL_DATA_PIN_MAPPING[curr_caliper]);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <getCaliperData+0x38>)
 80005b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4909      	ldr	r1, [pc, #36]	; (80005e4 <getCaliperData+0x3c>)
 80005be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005c2:	4619      	mov	r1, r3
 80005c4:	4610      	mov	r0, r2
 80005c6:	f002 f9eb 	bl	80029a0 <HAL_GPIO_ReadPin>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000010 	.word	0x20000010

080005e8 <processBit>:

void processBit(caliper_number curr_caliper){
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].bit.index == 0){digimatic[curr_caliper].frame.data = 0;}
 80005f2:	79fa      	ldrb	r2, [r7, #7]
 80005f4:	492a      	ldr	r1, [pc, #168]	; (80006a0 <processBit+0xb8>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	4413      	add	r3, r2
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	440b      	add	r3, r1
 8000600:	330e      	adds	r3, #14
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d109      	bne.n	800061c <processBit+0x34>
 8000608:	79fa      	ldrb	r2, [r7, #7]
 800060a:	4925      	ldr	r1, [pc, #148]	; (80006a0 <processBit+0xb8>)
 800060c:	4613      	mov	r3, r2
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4413      	add	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	440b      	add	r3, r1
 8000616:	3311      	adds	r3, #17
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]

	uint8_t read_bit = getCaliperData(curr_caliper);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffc2 	bl	80005a8 <getCaliperData>
 8000624:	4603      	mov	r3, r0
 8000626:	73fb      	strb	r3, [r7, #15]

	digimatic[curr_caliper].frame.data |= read_bit << digimatic[curr_caliper].bit.index;
 8000628:	79fa      	ldrb	r2, [r7, #7]
 800062a:	491d      	ldr	r1, [pc, #116]	; (80006a0 <processBit+0xb8>)
 800062c:	4613      	mov	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	440b      	add	r3, r1
 8000636:	3311      	adds	r3, #17
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b259      	sxtb	r1, r3
 800063c:	7bf8      	ldrb	r0, [r7, #15]
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	4c17      	ldr	r4, [pc, #92]	; (80006a0 <processBit+0xb8>)
 8000642:	4613      	mov	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4423      	add	r3, r4
 800064c:	330e      	adds	r3, #14
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	fa00 f303 	lsl.w	r3, r0, r3
 8000654:	b25b      	sxtb	r3, r3
 8000656:	430b      	orrs	r3, r1
 8000658:	b25b      	sxtb	r3, r3
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	b2d8      	uxtb	r0, r3
 800065e:	4910      	ldr	r1, [pc, #64]	; (80006a0 <processBit+0xb8>)
 8000660:	4613      	mov	r3, r2
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4413      	add	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	440b      	add	r3, r1
 800066a:	3311      	adds	r3, #17
 800066c:	4602      	mov	r2, r0
 800066e:	701a      	strb	r2, [r3, #0]

	digimatic[curr_caliper].bit.index++;
 8000670:	79fa      	ldrb	r2, [r7, #7]
 8000672:	490b      	ldr	r1, [pc, #44]	; (80006a0 <processBit+0xb8>)
 8000674:	4613      	mov	r3, r2
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	4413      	add	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	440b      	add	r3, r1
 800067e:	330e      	adds	r3, #14
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	b2d8      	uxtb	r0, r3
 8000686:	4906      	ldr	r1, [pc, #24]	; (80006a0 <processBit+0xb8>)
 8000688:	4613      	mov	r3, r2
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	4413      	add	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	440b      	add	r3, r1
 8000692:	330e      	adds	r3, #14
 8000694:	4602      	mov	r2, r0
 8000696:	701a      	strb	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}
 80006a0:	200000b4 	.word	0x200000b4

080006a4 <onRisingEdgeOfReqSignal>:


void onRisingEdgeOfReqSignal(caliper_number curr_caliper){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	digimatic[curr_caliper].caliper_state = START;
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	4906      	ldr	r1, [pc, #24]	; (80006cc <onRisingEdgeOfReqSignal+0x28>)
 80006b2:	4613      	mov	r3, r2
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	4413      	add	r3, r2
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	440b      	add	r3, r1
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	200000b4 	.word	0x200000b4

080006d0 <onRisingEdgeOfClockSignal>:


void onRisingEdgeOfClockSignal(caliper_number curr_caliper){
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].caliper_state != IDLE && digimatic[curr_caliper].caliper_state != FINISHED){
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	4951      	ldr	r1, [pc, #324]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 80006de:	4613      	mov	r3, r2
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	4413      	add	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	440b      	add	r3, r1
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f000 8095 	beq.w	800081a <onRisingEdgeOfClockSignal+0x14a>
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	494c      	ldr	r1, [pc, #304]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 80006f4:	4613      	mov	r3, r2
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	4413      	add	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	440b      	add	r3, r1
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b03      	cmp	r3, #3
 8000702:	f000 808a 	beq.w	800081a <onRisingEdgeOfClockSignal+0x14a>
		digimatic[curr_caliper].caliper_state = GETTING_FRAMES; // this doesn't change unless its last frame (implemented below)
 8000706:	79fa      	ldrb	r2, [r7, #7]
 8000708:	4946      	ldr	r1, [pc, #280]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 800070a:	4613      	mov	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	440b      	add	r3, r1
 8000714:	2202      	movs	r2, #2
 8000716:	701a      	strb	r2, [r3, #0]
		if(digimatic[curr_caliper].frame.index == 0){
 8000718:	79fa      	ldrb	r2, [r7, #7]
 800071a:	4942      	ldr	r1, [pc, #264]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 800071c:	4613      	mov	r3, r2
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	4413      	add	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	440b      	add	r3, r1
 8000726:	3310      	adds	r3, #16
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d10c      	bne.n	8000748 <onRisingEdgeOfClockSignal+0x78>
			memset(&digimatic[curr_caliper].frames, 0, NUMBER_OF_FRAMES*sizeof(digimatic[curr_caliper].frames[0]));
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	4a3a      	ldr	r2, [pc, #232]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 800073a:	4413      	add	r3, r2
 800073c:	3301      	adds	r3, #1
 800073e:	220d      	movs	r2, #13
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f00d ffe8 	bl	800e718 <memset>
		}

		processBit(curr_caliper);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff4c 	bl	80005e8 <processBit>

		if(digimatic[curr_caliper].bit.index == BITS_PER_FRAME){ // tengo un frame guardado en digimatic.frame.data
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	4934      	ldr	r1, [pc, #208]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 8000754:	4613      	mov	r3, r2
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	440b      	add	r3, r1
 800075e:	330e      	adds	r3, #14
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d13b      	bne.n	80007de <onRisingEdgeOfClockSignal+0x10e>
			digimatic[curr_caliper].frames[digimatic[curr_caliper].frame.index] = digimatic[curr_caliper].frame.data; // lo guardo en el array
 8000766:	79f9      	ldrb	r1, [r7, #7]
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	79f8      	ldrb	r0, [r7, #7]
 800076c:	4c2d      	ldr	r4, [pc, #180]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 800076e:	4603      	mov	r3, r0
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	4403      	add	r3, r0
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4423      	add	r3, r4
 8000778:	3310      	adds	r3, #16
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461c      	mov	r4, r3
 800077e:	4829      	ldr	r0, [pc, #164]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 8000780:	460b      	mov	r3, r1
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	440b      	add	r3, r1
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4403      	add	r3, r0
 800078a:	3311      	adds	r3, #17
 800078c:	7818      	ldrb	r0, [r3, #0]
 800078e:	4925      	ldr	r1, [pc, #148]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 8000790:	4613      	mov	r3, r2
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	4413      	add	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	440b      	add	r3, r1
 800079a:	4423      	add	r3, r4
 800079c:	3301      	adds	r3, #1
 800079e:	4602      	mov	r2, r0
 80007a0:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].frame.index++; // avanzo en array
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	491f      	ldr	r1, [pc, #124]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4413      	add	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	440b      	add	r3, r1
 80007b0:	3310      	adds	r3, #16
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2d8      	uxtb	r0, r3
 80007b8:	491a      	ldr	r1, [pc, #104]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 80007ba:	4613      	mov	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	4413      	add	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	440b      	add	r3, r1
 80007c4:	3310      	adds	r3, #16
 80007c6:	4602      	mov	r2, r0
 80007c8:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].bit.index = 0; // reinicio el index de bit
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	4915      	ldr	r1, [pc, #84]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 80007ce:	4613      	mov	r3, r2
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	4413      	add	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	440b      	add	r3, r1
 80007d8:	330e      	adds	r3, #14
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
		}

		if(digimatic[curr_caliper].frame.index == NUMBER_OF_FRAMES){
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	4910      	ldr	r1, [pc, #64]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 80007e2:	4613      	mov	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	4413      	add	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	440b      	add	r3, r1
 80007ec:	3310      	adds	r3, #16
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b0d      	cmp	r3, #13
 80007f2:	d112      	bne.n	800081a <onRisingEdgeOfClockSignal+0x14a>
			digimatic[curr_caliper].frame.index = 0;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	490b      	ldr	r1, [pc, #44]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	4413      	add	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	3310      	adds	r3, #16
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].caliper_state = FINISHED;
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	4906      	ldr	r1, [pc, #24]	; (8000824 <onRisingEdgeOfClockSignal+0x154>)
 800080c:	4613      	mov	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4413      	add	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	440b      	add	r3, r1
 8000816:	2203      	movs	r2, #3
 8000818:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	bf00      	nop
 8000824:	200000b4 	.word	0x200000b4

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f000 fc4e 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f818 	bl	8000864 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 f8f8 	bl	8000a28 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000838:	f000 f8d2 	bl	80009e0 <MX_TIM14_Init>
  MX_LWIP_Init();
 800083c:	f003 fa1e 	bl	8003c7c <MX_LWIP_Init>
  MX_TIM2_Init();
 8000840:	f000 f880 	bl	8000944 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  udpClient_connect();
 8000844:	f000 fb90 	bl	8000f68 <udpClient_connect>
  HAL_TIM_Base_Start_IT(&htim14);
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <main+0x34>)
 800084a:	f002 fde5 	bl	8003418 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <main+0x38>)
 8000850:	f002 fde2 	bl	8003418 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000854:	f003 fb44 	bl	8003ee0 <MX_LWIP_Process>
 8000858:	e7fc      	b.n	8000854 <main+0x2c>
 800085a:	bf00      	nop
 800085c:	200002c4 	.word	0x200002c4
 8000860:	2000027c 	.word	0x2000027c

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2230      	movs	r2, #48	; 0x30
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f00d ff50 	bl	800e718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <SystemClock_Config+0xd8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a2a      	ldr	r2, [pc, #168]	; (800093c <SystemClock_Config+0xd8>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <SystemClock_Config+0xd8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <SystemClock_Config+0xdc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a24      	ldr	r2, [pc, #144]	; (8000940 <SystemClock_Config+0xdc>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <SystemClock_Config+0xdc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008d4:	230c      	movs	r3, #12
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008d8:	2360      	movs	r3, #96	; 0x60
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008dc:	2304      	movs	r3, #4
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0320 	add.w	r3, r7, #32
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 f8bd 	bl	8002a68 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f4:	f000 f99a 	bl	8000c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f002 fb1e 	bl	8002f58 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000922:	f000 f983 	bl	8000c2c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 800092c:	2000      	movs	r0, #0
 800092e:	f002 fbf9 	bl	8003124 <HAL_RCC_MCOConfig>
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM2_Init+0x98>)
 8000962:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000966:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5000-1;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_TIM2_Init+0x98>)
 800096a:	f241 3287 	movw	r2, #4999	; 0x1387
 800096e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_TIM2_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_TIM2_Init+0x98>)
 8000978:	f242 720f 	movw	r2, #9999	; 0x270f
 800097c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_TIM2_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_TIM2_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800098a:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_TIM2_Init+0x98>)
 800098c:	f002 fcf4 	bl	8003378 <HAL_TIM_Base_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000996:	f000 f949 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_TIM2_Init+0x98>)
 80009a8:	f002 feae 	bl	8003708 <HAL_TIM_ConfigClockSource>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009b2:	f000 f93b 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_TIM2_Init+0x98>)
 80009c4:	f003 f8ca 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009ce:	f000 f92d 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000027c 	.word	0x2000027c

080009e0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_TIM14_Init+0x40>)
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <MX_TIM14_Init+0x44>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_TIM14_Init+0x40>)
 80009ec:	f240 321f 	movw	r2, #799	; 0x31f
 80009f0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_TIM14_Init+0x40>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9375 - 1;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_TIM14_Init+0x40>)
 80009fa:	f242 429e 	movw	r2, #9374	; 0x249e
 80009fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_TIM14_Init+0x40>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_TIM14_Init+0x40>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_TIM14_Init+0x40>)
 8000a0e:	f002 fcb3 	bl	8003378 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000a18:	f000 f908 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200002c4 	.word	0x200002c4
 8000a24:	40002000 	.word	0x40002000

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b5b      	ldr	r3, [pc, #364]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a5a      	ldr	r2, [pc, #360]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a48:	f043 0310 	orr.w	r3, r3, #16
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b58      	ldr	r3, [pc, #352]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0310 	and.w	r3, r3, #16
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b54      	ldr	r3, [pc, #336]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a53      	ldr	r2, [pc, #332]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b51      	ldr	r3, [pc, #324]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b4d      	ldr	r3, [pc, #308]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a4c      	ldr	r2, [pc, #304]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4a      	ldr	r3, [pc, #296]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a45      	ldr	r2, [pc, #276]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b43      	ldr	r3, [pc, #268]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a3e      	ldr	r2, [pc, #248]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <MX_GPIO_Init+0x188>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f242 01c1 	movw	r1, #8385	; 0x20c1
 8000ad0:	4838      	ldr	r0, [pc, #224]	; (8000bb4 <MX_GPIO_Init+0x18c>)
 8000ad2:	f001 ff7d 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAL4_CLK_Pin CAL2_CLK_Pin CAL1_CLK_Pin */
  GPIO_InitStruct.Pin = CAL4_CLK_Pin|CAL2_CLK_Pin|CAL1_CLK_Pin;
 8000ad6:	f248 2304 	movw	r3, #33284	; 0x8204
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000adc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4831      	ldr	r0, [pc, #196]	; (8000bb4 <MX_GPIO_Init+0x18c>)
 8000aee:	f001 fdbb 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL4_DATA_Pin CAL1_DATA_Pin */
  GPIO_InitStruct.Pin = CAL4_DATA_Pin|CAL1_DATA_Pin;
 8000af2:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0x18c>)
 8000b08:	f001 fdae 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL3_REQ_Pin CAL2_REQ_Pin CAL1_REQ_Pin CAL4_REQ_Pin */
  GPIO_InitStruct.Pin = CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin;
 8000b0c:	f242 03c1 	movw	r3, #8385	; 0x20c1
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b12:	2311      	movs	r3, #17
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <MX_GPIO_Init+0x18c>)
 8000b26:	f001 fd9f 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_CLK_Pin */
  GPIO_InitStruct.Pin = CAL3_CLK_Pin;
 8000b2a:	2308      	movs	r3, #8
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL3_CLK_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <MX_GPIO_Init+0x190>)
 8000b40:	f001 fd92 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_DATA_Pin */
  GPIO_InitStruct.Pin = CAL3_DATA_Pin;
 8000b44:	2301      	movs	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL3_DATA_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4819      	ldr	r0, [pc, #100]	; (8000bbc <MX_GPIO_Init+0x194>)
 8000b58:	f001 fd86 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL2_DATA_Pin */
  GPIO_InitStruct.Pin = CAL2_DATA_Pin;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0x198>)
 8000b70:	f001 fd7a 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <MX_GPIO_Init+0x194>)
 8000b92:	f001 fd69 	bl	8002668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2028      	movs	r0, #40	; 0x28
 8000b9c:	f000 fc07 	bl	80013ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba0:	2028      	movs	r0, #40	; 0x28
 8000ba2:	f000 fc20 	bl	80013e6 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d102      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
		PseudoHAL_TIM_PeriodElapsedCallback(htim);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 f9bd 	bl	8000f54 <PseudoHAL_TIM_PeriodElapsedCallback>
	}
	if(htim  == &htim14){
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d107      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		// todo: esta funcion va a cambiar cuando hagamos las pruebas finales, porque es solo un ejemplo.
		HAL_GPIO_TogglePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin); // periodicamente tenemos un request, en teoria setteado cada 93.75ms, empieza bajo
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000be8:	f001 ff0b 	bl	8002a02 <HAL_GPIO_TogglePin>
		onRisingEdgeOfReqSignal(CALIPER_1); // prendo el flag de poder empezar a leer los bits
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fd59 	bl	80006a4 <onRisingEdgeOfReqSignal>
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000027c 	.word	0x2000027c
 8000c00:	200002c4 	.word	0x200002c4
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
	onRisingEdgeOfClockSignal(getCaliperNumberGivenClockPin(GPIO_Pin)); // aca se realiza la lectura de los bits y se va guardando en el buffer
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fca7 	bl	8000568 <getCaliperNumberGivenClockPin>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fd56 	bl	80006d0 <onRisingEdgeOfClockSignal>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d116      	bne.n	8000cc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <HAL_TIM_Base_MspInit+0x80>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <HAL_TIM_Base_MspInit+0x80>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_TIM_Base_MspInit+0x80>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f000 fb77 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc0:	201c      	movs	r0, #28
 8000cc2:	f000 fb90 	bl	80013e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000cc6:	e01a      	b.n	8000cfe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM14)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_TIM_Base_MspInit+0x84>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d115      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_TIM_Base_MspInit+0x80>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_TIM_Base_MspInit+0x80>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_TIM_Base_MspInit+0x80>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	202d      	movs	r0, #45	; 0x2d
 8000cf4:	f000 fb5b 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000cf8:	202d      	movs	r0, #45	; 0x2d
 8000cfa:	f000 fb74 	bl	80013e6 <HAL_NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40002000 	.word	0x40002000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 fa08 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM2_IRQHandler+0x10>)
 8000d6a:	f002 fbc5 	bl	80034f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000027c 	.word	0x2000027c

08000d78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000d7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d80:	f001 fe5a 	bl	8002a38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000d8e:	f002 fbb3 	bl	80034f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200002c4 	.word	0x200002c4

08000d9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_kill>:

int _kill(int pid, int sig)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000db6:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <_kill+0x20>)
 8000db8:	2216      	movs	r2, #22
 8000dba:	601a      	str	r2, [r3, #0]
	return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20008bd0 	.word	0x20008bd0

08000dd0 <_exit>:

void _exit (int status)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ffe5 	bl	8000dac <_kill>
	while (1) {}		/* Make sure we hang here */
 8000de2:	e7fe      	b.n	8000de2 <_exit+0x12>

08000de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	e00a      	b.n	8000e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000df6:	f3af 8000 	nop.w
 8000dfa:	4601      	mov	r1, r0
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	b2ca      	uxtb	r2, r1
 8000e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf0      	blt.n	8000df6 <_read+0x12>
	}

return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	e009      	b.n	8000e44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3301      	adds	r3, #1
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbf1      	blt.n	8000e30 <_write+0x12>
	}
	return len;
 8000e4c:	687b      	ldr	r3, [r7, #4]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_close>:

int _close(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_isatty>:

int _isatty(int file)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
	return 1;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d205      	bcs.n	8000efc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <_sbrk+0x6c>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20020000 	.word	0x20020000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	200000fc 	.word	0x200000fc
 8000f28:	20008be0 	.word	0x20008be0
 8000f2c:	20008bd0 	.word	0x20008bd0

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <PseudoHAL_TIM_PeriodElapsedCallback>:

extern TIM_HandleTypeDef htim2;


void PseudoHAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	udpClient_send();
 8000f5c:	f000 f83a 	bl	8000fd4 <udpClient_send>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <udpClient_connect>:
5. Close socket descriptor and exit.
*/


void udpClient_connect(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8000f6e:	f00b f873 	bl	800c058 <udp_new>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <udpClient_connect+0x5c>)
 8000f76:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 0, 111);
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <udpClient_connect+0x60>)
 8000f7a:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <udpClient_connect+0x5c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f107 0108 	add.w	r1, r7, #8
 8000f84:	2208      	movs	r2, #8
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00a ff50 	bl	800be2c <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 0, 25);
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <udpClient_connect+0x64>)
 8000f8e:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <udpClient_connect+0x5c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1d39      	adds	r1, r7, #4
 8000f96:	2207      	movs	r2, #7
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00a ffcf 	bl	800bf3c <udp_connect>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d108      	bne.n	8000fbc <udpClient_connect+0x54>
	{
		/* 2. Send message to server */
		udpClient_send ();
 8000faa:	f000 f813 	bl	8000fd4 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <udpClient_connect+0x5c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4906      	ldr	r1, [pc, #24]	; (8000fd0 <udpClient_connect+0x68>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00b f82e 	bl	800c018 <udp_recv>
	}
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000030c 	.word	0x2000030c
 8000fc8:	6f00a8c0 	.word	0x6f00a8c0
 8000fcc:	1900a8c0 	.word	0x1900a8c0
 8000fd0:	08001039 	.word	0x08001039

08000fd4 <udpClient_send>:

static void udpClient_send(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09c      	sub	sp, #112	; 0x70
 8000fd8:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "sending UDP client message %d", counter);
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <udpClient_send+0x58>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4913      	ldr	r1, [pc, #76]	; (8001030 <udpClient_send+0x5c>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00d fbf8 	bl	800e7d8 <siprintf>
 8000fe8:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2036      	movs	r0, #54	; 0x36
 8000ff6:	f004 fab7 	bl	8005568 <pbuf_alloc>
 8000ffa:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8000ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00f      	beq.n	8001022 <udpClient_send+0x4e>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8001002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001004:	b29a      	uxth	r2, r3
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4619      	mov	r1, r3
 800100a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800100c:	f004 fffc 	bl	8006008 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <udpClient_send+0x60>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001016:	4618      	mov	r0, r3
 8001018:	f00a fd1e 	bl	800ba58 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 800101c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800101e:	f004 fd87 	bl	8005b30 <pbuf_free>
  }
}
 8001022:	bf00      	nop
 8001024:	3770      	adds	r7, #112	; 0x70
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000100 	.word	0x20000100
 8001030:	0800faf0 	.word	0x0800faf0
 8001034:	2000030c 	.word	0x2000030c

08001038 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6859      	ldr	r1, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	895b      	ldrh	r3, [r3, #10]
 800104e:	461a      	mov	r2, r3
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <udp_receive_callback+0x38>)
 8001052:	f00d fbe1 	bl	800e818 <strncpy>

	/*increment message count */
	counter++;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <udp_receive_callback+0x3c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <udp_receive_callback+0x3c>)
 800105e:	6013      	str	r3, [r2, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f004 fd65 	bl	8005b30 <pbuf_free>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000310 	.word	0x20000310
 8001074:	20000100 	.word	0x20000100

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ff45 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f00d fadd 	bl	800e664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fbbd 	bl	8000828 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80010bc:	08012740 	.word	0x08012740
  ldr r2, =_sbss
 80010c0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80010c4:	20008be0 	.word	0x20008be0

080010c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC_IRQHandler>
	...

080010cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <HAL_Init+0x40>)
 80010d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a0a      	ldr	r2, [pc, #40]	; (800110c <HAL_Init+0x40>)
 80010e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x40>)
 80010ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 f94f 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fd9a 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023c00 	.word	0x40023c00

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f967 	bl	8001402 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 f92f 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000020 	.word	0x20000020
 8001168:	20000028 	.word	0x20000028
 800116c:	20000024 	.word	0x20000024

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000028 	.word	0x20000028
 8001194:	20000374 	.word	0x20000374

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000374 	.word	0x20000374

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000028 	.word	0x20000028

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	; (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800142c:	4baa      	ldr	r3, [pc, #680]	; (80016d8 <HAL_ETH_Init+0x2bc>)
 800142e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e183      	b.n	800174a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f002 fd4e 	bl	8003ef8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	4b9e      	ldr	r3, [pc, #632]	; (80016dc <HAL_ETH_Init+0x2c0>)
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	4a9d      	ldr	r2, [pc, #628]	; (80016dc <HAL_ETH_Init+0x2c0>)
 8001466:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146a:	6453      	str	r3, [r2, #68]	; 0x44
 800146c:	4b9b      	ldr	r3, [pc, #620]	; (80016dc <HAL_ETH_Init+0x2c0>)
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001478:	4b99      	ldr	r3, [pc, #612]	; (80016e0 <HAL_ETH_Init+0x2c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a98      	ldr	r2, [pc, #608]	; (80016e0 <HAL_ETH_Init+0x2c4>)
 800147e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001482:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001484:	4b96      	ldr	r3, [pc, #600]	; (80016e0 <HAL_ETH_Init+0x2c4>)
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4994      	ldr	r1, [pc, #592]	; (80016e0 <HAL_ETH_Init+0x2c4>)
 800148e:	4313      	orrs	r3, r2
 8001490:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014aa:	f7ff fe75 	bl	8001198 <HAL_GetTick>
 80014ae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014b0:	e011      	b.n	80014d6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014b2:	f7ff fe71 	bl	8001198 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014c0:	d909      	bls.n	80014d6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e139      	b.n	800174a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1e4      	bne.n	80014b2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f023 031c 	bic.w	r3, r3, #28
 80014f6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014f8:	f001 ff32 	bl	8003360 <HAL_RCC_GetHCLKFreq>
 80014fc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4a78      	ldr	r2, [pc, #480]	; (80016e4 <HAL_ETH_Init+0x2c8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d908      	bls.n	8001518 <HAL_ETH_Init+0xfc>
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4a77      	ldr	r2, [pc, #476]	; (80016e8 <HAL_ETH_Init+0x2cc>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d804      	bhi.n	8001518 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e027      	b.n	8001568 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	4a73      	ldr	r2, [pc, #460]	; (80016e8 <HAL_ETH_Init+0x2cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d908      	bls.n	8001532 <HAL_ETH_Init+0x116>
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_ETH_Init+0x2bc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d204      	bcs.n	8001532 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f043 030c 	orr.w	r3, r3, #12
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	e01a      	b.n	8001568 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4a68      	ldr	r2, [pc, #416]	; (80016d8 <HAL_ETH_Init+0x2bc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d303      	bcc.n	8001542 <HAL_ETH_Init+0x126>
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4a6b      	ldr	r2, [pc, #428]	; (80016ec <HAL_ETH_Init+0x2d0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d911      	bls.n	8001566 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4a69      	ldr	r2, [pc, #420]	; (80016ec <HAL_ETH_Init+0x2d0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d908      	bls.n	800155c <HAL_ETH_Init+0x140>
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4a68      	ldr	r2, [pc, #416]	; (80016f0 <HAL_ETH_Init+0x2d4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d804      	bhi.n	800155c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e005      	b.n	8001568 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	e000      	b.n	8001568 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001566:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69fa      	ldr	r2, [r7, #28]
 800156e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001570:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fb98 	bl	8001cac <HAL_ETH_WritePHYRegister>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001586:	6939      	ldr	r1, [r7, #16]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fd4d 	bl	8002028 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0d7      	b.n	800174a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800159a:	20ff      	movs	r0, #255	; 0xff
 800159c:	f7ff fe08 	bl	80011b0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80a5 	beq.w	80016f4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80015aa:	f7ff fdf5 	bl	8001198 <HAL_GetTick>
 80015ae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	461a      	mov	r2, r3
 80015b6:	2101      	movs	r1, #1
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fb0f 	bl	8001bdc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80015be:	f7ff fdeb 	bl	8001198 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d90f      	bls.n	80015f0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015d4:	6939      	ldr	r1, [r7, #16]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fd26 	bl	8002028 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e0ac      	b.n	800174a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0da      	beq.n	80015b0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fe:	2100      	movs	r1, #0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 fb53 	bl	8001cac <HAL_ETH_WritePHYRegister>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001610:	6939      	ldr	r1, [r7, #16]
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fd08 	bl	8002028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001620:	2301      	movs	r3, #1
 8001622:	e092      	b.n	800174a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001624:	f7ff fdb8 	bl	8001198 <HAL_GetTick>
 8001628:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800162a:	f107 030c 	add.w	r3, r7, #12
 800162e:	461a      	mov	r2, r3
 8001630:	2101      	movs	r1, #1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fad2 	bl	8001bdc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001638:	f7ff fdae 	bl	8001198 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d90f      	bls.n	800166a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800164e:	6939      	ldr	r1, [r7, #16]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fce9 	bl	8002028 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e06f      	b.n	800174a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0da      	beq.n	800162a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	461a      	mov	r2, r3
 800167a:	211f      	movs	r1, #31
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 faad 	bl	8001bdc <HAL_ETH_ReadPHYRegister>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00b      	beq.n	80016a0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800168c:	6939      	ldr	r1, [r7, #16]
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fcca 	bl	8002028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800169c:	2301      	movs	r3, #1
 800169e:	e054      	b.n	800174a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	e002      	b.n	80016ba <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	e035      	b.n	8001738 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	e030      	b.n	8001738 <HAL_ETH_Init+0x31c>
 80016d6:	bf00      	nop
 80016d8:	03938700 	.word	0x03938700
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40013800 	.word	0x40013800
 80016e4:	01312cff 	.word	0x01312cff
 80016e8:	02160ebf 	.word	0x02160ebf
 80016ec:	05f5e0ff 	.word	0x05f5e0ff
 80016f0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	08db      	lsrs	r3, r3, #3
 80016fa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001704:	4313      	orrs	r3, r2
 8001706:	b29b      	uxth	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	2100      	movs	r1, #0
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 facd 	bl	8001cac <HAL_ETH_WritePHYRegister>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800171c:	6939      	ldr	r1, [r7, #16]
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fc82 	bl	8002028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e00c      	b.n	800174a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001730:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001734:	f7ff fd3c 	bl	80011b0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fc74 	bl	8002028 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop

08001754 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_ETH_DMATxDescListInit+0x20>
 8001770:	2302      	movs	r3, #2
 8001772:	e052      	b.n	800181a <HAL_ETH_DMATxDescListInit+0xc6>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	e030      	b.n	80017f2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	015b      	lsls	r3, r3, #5
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	4413      	add	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017a0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d208      	bcs.n	80017e6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	015b      	lsls	r3, r3, #5
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	461a      	mov	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	e002      	b.n	80017ec <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3ca      	bcc.n	8001790 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	3310      	adds	r3, #16
 8001806:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001826:	b480      	push	{r7}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ETH_DMARxDescListInit+0x20>
 8001842:	2302      	movs	r3, #2
 8001844:	e056      	b.n	80018f4 <HAL_ETH_DMARxDescListInit+0xce>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2202      	movs	r2, #2
 8001852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e034      	b.n	80018cc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	015b      	lsls	r3, r3, #5
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	4413      	add	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001872:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800187a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	461a      	mov	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d208      	bcs.n	80018c0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	015b      	lsls	r3, r3, #5
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	4413      	add	r3, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	e002      	b.n	80018c6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d3c6      	bcc.n	8001862 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018de:	330c      	adds	r3, #12
 80018e0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ETH_TransmitFrame+0x24>
 8001920:	2302      	movs	r3, #2
 8001922:	e0cd      	b.n	8001ac0 <HAL_ETH_TransmitFrame+0x1c0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2202      	movs	r2, #2
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800194a:	2301      	movs	r3, #1
 800194c:	e0b8      	b.n	8001ac0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	da09      	bge.n	800196c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2212      	movs	r2, #18
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0a9      	b.n	8001ac0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001972:	4293      	cmp	r3, r2
 8001974:	d915      	bls.n	80019a2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	4a54      	ldr	r2, [pc, #336]	; (8001acc <HAL_ETH_TransmitFrame+0x1cc>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	4b51      	ldr	r3, [pc, #324]	; (8001acc <HAL_ETH_TransmitFrame+0x1cc>)
 8001986:	fba3 1302 	umull	r1, r3, r3, r2
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e001      	b.n	80019a6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80019a2:	2301      	movs	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d11c      	bne.n	80019e6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80019ba:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019c6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019d6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	461a      	mov	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019e4:	e04b      	b.n	8001a7e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	e044      	b.n	8001a76 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019fa:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d107      	bne.n	8001a12 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a10:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a1a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d116      	bne.n	8001a54 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001a34:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001a3a:	fb02 f203 	mul.w	r2, r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a46:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a52:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a62:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	3301      	adds	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3b6      	bcc.n	80019ec <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a86:	3314      	adds	r3, #20
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00d      	beq.n	8001aae <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9a:	3314      	adds	r3, #20
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	ac02b00b 	.word	0xac02b00b
 8001ad0:	fffffa0c 	.word	0xfffffa0c

08001ad4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ETH_GetReceivedFrame+0x1a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e070      	b.n	8001bd0 <HAL_ETH_GetReceivedFrame+0xfc>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db5a      	blt.n	8001bbe <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d030      	beq.n	8001b78 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d103      	bne.n	8001b30 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b44:	3b04      	subs	r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e02b      	b.n	8001bd0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d010      	beq.n	8001ba8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ba6:	e00a      	b.n	8001bbe <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	460b      	mov	r3, r1
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b82      	cmp	r3, #130	; 0x82
 8001bfc:	d101      	bne.n	8001c02 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e050      	b.n	8001ca4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2282      	movs	r2, #130	; 0x82
 8001c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 031c 	and.w	r3, r3, #28
 8001c18:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8a1b      	ldrh	r3, [r3, #16]
 8001c1e:	02db      	lsls	r3, r3, #11
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c28:	897b      	ldrh	r3, [r7, #10]
 8001c2a:	019b      	lsls	r3, r3, #6
 8001c2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f023 0302 	bic.w	r3, r3, #2
 8001c3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4e:	f7ff faa3 	bl	8001198 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c54:	e015      	b.n	8001c82 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c56:	f7ff fa9f 	bl	8001198 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d309      	bcc.n	8001c7a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e014      	b.n	8001ca4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e4      	bne.n	8001c56 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b42      	cmp	r3, #66	; 0x42
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e04e      	b.n	8001d70 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2242      	movs	r2, #66	; 0x42
 8001cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 031c 	and.w	r3, r3, #28
 8001ce8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8a1b      	ldrh	r3, [r3, #16]
 8001cee:	02db      	lsls	r3, r3, #11
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	019b      	lsls	r3, r3, #6
 8001cfc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff fa36 	bl	8001198 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d2e:	e015      	b.n	8001d5c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d30:	f7ff fa32 	bl	8001198 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3e:	d309      	bcc.n	8001d54 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e00d      	b.n	8001d70 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1e4      	bne.n	8001d30 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ETH_Start+0x16>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e01f      	b.n	8001dce <HAL_ETH_Start+0x56>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fb44 	bl	800242c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fb7b 	bl	80024a0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 fc12 	bl	80025d4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 fbaf 	bl	8002514 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fbdc 	bl	8002574 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ETH_Stop+0x16>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e01f      	b.n	8001e2c <HAL_ETH_Stop+0x56>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fba1 	bl	8002544 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fbce 	bl	80025a4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 fb66 	bl	80024da <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fbe0 	bl	80025d4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fb26 	bl	8002466 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ETH_ConfigMAC+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0e4      	b.n	800201a <HAL_ETH_ConfigMAC+0x1e6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80b1 	beq.w	8001fca <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4b6c      	ldr	r3, [pc, #432]	; (8002024 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001e80:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e86:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e8c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e92:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e98:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e9e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ea4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001eaa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001eb0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001eb6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ebc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ec2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff f968 	bl	80011b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ef0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ef6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001efc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f02:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f08:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f0e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f1a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f1c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff f942 	bl	80011b0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f3c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f46:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f64:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f6a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f70:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f76:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f7c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff f90b 	bl	80011b0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff f8f8 	bl	80011b0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	61da      	str	r2, [r3, #28]
 8001fc8:	e01e      	b.n	8002008 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fd8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff f8d8 	bl	80011b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	ff20810f 	.word	0xff20810f

08002028 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0b0      	sub	sp, #192	; 0xc0
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002044:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002056:	2300      	movs	r3, #0
 8002058:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800206e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002072:	663b      	str	r3, [r7, #96]	; 0x60
 8002074:	e001      	b.n	800207a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800207a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002084:	2300      	movs	r3, #0
 8002086:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002094:	2340      	movs	r3, #64	; 0x40
 8002096:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002100:	4bac      	ldr	r3, [pc, #688]	; (80023b4 <ETH_MACDMAConfig+0x38c>)
 8002102:	4013      	ands	r3, r2
 8002104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002108:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800210a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800210c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800210e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002110:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002114:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800211a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800211c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800211e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002122:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002128:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800212a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800212c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800212e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002130:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002134:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002138:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800213a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800213c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800213e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002150:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff f827 	bl	80011b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800216c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800216e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002170:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002174:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800217a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800217c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002180:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002186:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800218c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002190:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002198:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800219a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7ff f802 	bl	80011b0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021dc:	4013      	ands	r3, r2
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80021e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80021ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80021ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80021f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002204:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002206:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002218:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
 8002226:	f7fe ffc3 	bl	80011b0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002232:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002234:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002238:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800224e:	2001      	movs	r0, #1
 8002250:	f7fe ffae 	bl	80011b0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800225c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002266:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800226c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002270:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002282:	2304      	movs	r3, #4
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800228c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b2:	3318      	adds	r3, #24
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022be:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <ETH_MACDMAConfig+0x390>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80022c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80022cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80022ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80022d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80022d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80022d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80022d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80022d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80022da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80022dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80022de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80022e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80022e6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fa:	3318      	adds	r3, #24
 80022fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002300:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230a:	3318      	adds	r3, #24
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002312:	2001      	movs	r0, #1
 8002314:	f7fe ff4c 	bl	80011b0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002320:	3318      	adds	r3, #24
 8002322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002326:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800232c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002330:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002334:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002338:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800233e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002342:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800234c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002350:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002360:	2001      	movs	r0, #1
 8002362:	f7fe ff25 	bl	80011b0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002372:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10f      	bne.n	800239c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	331c      	adds	r3, #28
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002398:	331c      	adds	r3, #28
 800239a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	461a      	mov	r2, r3
 80023a2:	2100      	movs	r1, #0
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f809 	bl	80023bc <ETH_MACAddressConfig>
}
 80023aa:	bf00      	nop
 80023ac:	37c0      	adds	r7, #192	; 0xc0
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	ff20810f 	.word	0xff20810f
 80023b8:	f8de3f23 	.word	0xf8de3f23

080023bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3305      	adds	r3, #5
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	3204      	adds	r2, #4
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <ETH_MACAddressConfig+0x68>)
 80023de:	4413      	add	r3, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3303      	adds	r3, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	061a      	lsls	r2, r3, #24
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3302      	adds	r3, #2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3301      	adds	r3, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <ETH_MACAddressConfig+0x6c>)
 800240e:	4413      	add	r3, r2
 8002410:	461a      	mov	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40028040 	.word	0x40028040
 8002428:	40028044 	.word	0x40028044

0800242c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0208 	orr.w	r2, r2, #8
 8002446:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002450:	2001      	movs	r0, #1
 8002452:	f000 f8e9 	bl	8002628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0208 	bic.w	r2, r2, #8
 8002480:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800248a:	2001      	movs	r0, #1
 800248c:	f000 f8cc 	bl	8002628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0204 	orr.w	r2, r2, #4
 80024ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f000 f8af 	bl	8002628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0204 	bic.w	r2, r2, #4
 80024f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024fe:	2001      	movs	r0, #1
 8002500:	f000 f892 	bl	8002628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002524:	3318      	adds	r3, #24
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002534:	3318      	adds	r3, #24
 8002536:	601a      	str	r2, [r3, #0]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002554:	3318      	adds	r3, #24
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002564:	3318      	adds	r3, #24
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002584:	3318      	adds	r3, #24
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0202 	orr.w	r2, r2, #2
 8002590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002594:	3318      	adds	r3, #24
 8002596:	601a      	str	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	3318      	adds	r3, #24
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0202 	bic.w	r2, r2, #2
 80025c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c4:	3318      	adds	r3, #24
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e8:	3318      	adds	r3, #24
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	3318      	adds	r3, #24
 80025fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002604:	3318      	adds	r3, #24
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800260a:	2001      	movs	r0, #1
 800260c:	f000 f80c 	bl	8002628 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261a:	3318      	adds	r3, #24
 800261c:	601a      	str	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <ETH_Delay+0x38>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <ETH_Delay+0x3c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a5b      	lsrs	r3, r3, #9
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002644:	bf00      	nop
  } 
  while (Delay --);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e5a      	subs	r2, r3, #1
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f9      	bne.n	8002644 <ETH_Delay+0x1c>
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000020 	.word	0x20000020
 8002664:	10624dd3 	.word	0x10624dd3

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	; 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e16b      	b.n	800295c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002684:	2201      	movs	r2, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	429a      	cmp	r2, r3
 800269e:	f040 815a 	bne.w	8002956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d005      	beq.n	80026ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d130      	bne.n	800271c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	f003 0201 	and.w	r2, r3, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b03      	cmp	r3, #3
 8002726:	d017      	beq.n	8002758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d123      	bne.n	80027ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	08da      	lsrs	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3208      	adds	r2, #8
 800276c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	220f      	movs	r2, #15
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	69b9      	ldr	r1, [r7, #24]
 80027a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80b4 	beq.w	8002956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b60      	ldr	r3, [pc, #384]	; (8002974 <HAL_GPIO_Init+0x30c>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a5f      	ldr	r2, [pc, #380]	; (8002974 <HAL_GPIO_Init+0x30c>)
 80027f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_GPIO_Init+0x30c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800280a:	4a5b      	ldr	r2, [pc, #364]	; (8002978 <HAL_GPIO_Init+0x310>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	3302      	adds	r3, #2
 8002812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	220f      	movs	r2, #15
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_GPIO_Init+0x314>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d02b      	beq.n	800288e <HAL_GPIO_Init+0x226>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_GPIO_Init+0x318>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d025      	beq.n	800288a <HAL_GPIO_Init+0x222>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a50      	ldr	r2, [pc, #320]	; (8002984 <HAL_GPIO_Init+0x31c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01f      	beq.n	8002886 <HAL_GPIO_Init+0x21e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <HAL_GPIO_Init+0x320>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d019      	beq.n	8002882 <HAL_GPIO_Init+0x21a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4e      	ldr	r2, [pc, #312]	; (800298c <HAL_GPIO_Init+0x324>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0x216>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4d      	ldr	r2, [pc, #308]	; (8002990 <HAL_GPIO_Init+0x328>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00d      	beq.n	800287a <HAL_GPIO_Init+0x212>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4c      	ldr	r2, [pc, #304]	; (8002994 <HAL_GPIO_Init+0x32c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d007      	beq.n	8002876 <HAL_GPIO_Init+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <HAL_GPIO_Init+0x330>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <HAL_GPIO_Init+0x20a>
 800286e:	2307      	movs	r3, #7
 8002870:	e00e      	b.n	8002890 <HAL_GPIO_Init+0x228>
 8002872:	2308      	movs	r3, #8
 8002874:	e00c      	b.n	8002890 <HAL_GPIO_Init+0x228>
 8002876:	2306      	movs	r3, #6
 8002878:	e00a      	b.n	8002890 <HAL_GPIO_Init+0x228>
 800287a:	2305      	movs	r3, #5
 800287c:	e008      	b.n	8002890 <HAL_GPIO_Init+0x228>
 800287e:	2304      	movs	r3, #4
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x228>
 8002882:	2303      	movs	r3, #3
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x228>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x228>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x228>
 800288e:	2300      	movs	r3, #0
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f002 0203 	and.w	r2, r2, #3
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a0:	4935      	ldr	r1, [pc, #212]	; (8002978 <HAL_GPIO_Init+0x310>)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_GPIO_Init+0x334>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028d2:	4a32      	ldr	r2, [pc, #200]	; (800299c <HAL_GPIO_Init+0x334>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028d8:	4b30      	ldr	r3, [pc, #192]	; (800299c <HAL_GPIO_Init+0x334>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <HAL_GPIO_Init+0x334>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <HAL_GPIO_Init+0x334>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002926:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_GPIO_Init+0x334>)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_GPIO_Init+0x334>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <HAL_GPIO_Init+0x334>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b0f      	cmp	r3, #15
 8002960:	f67f ae90 	bls.w	8002684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002964:	bf00      	nop
 8002966:	bf00      	nop
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	40013800 	.word	0x40013800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020400 	.word	0x40020400
 8002984:	40020800 	.word	0x40020800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40021000 	.word	0x40021000
 8002990:	40021400 	.word	0x40021400
 8002994:	40021800 	.word	0x40021800
 8002998:	40021c00 	.word	0x40021c00
 800299c:	40013c00 	.word	0x40013c00

080029a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
 80029bc:	e001      	b.n	80029c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	041a      	lsls	r2, r3, #16
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	400b      	ands	r3, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a44:	695a      	ldr	r2, [r3, #20]
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe f8d6 	bl	8000c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40013c00 	.word	0x40013c00

08002a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e264      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d075      	beq.n	8002b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a86:	4ba3      	ldr	r3, [pc, #652]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d00c      	beq.n	8002aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a92:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d112      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9e:	4b9d      	ldr	r3, [pc, #628]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b99      	ldr	r3, [pc, #612]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d05b      	beq.n	8002b70 <HAL_RCC_OscConfig+0x108>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d157      	bne.n	8002b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e23f      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x74>
 8002ace:	4b91      	ldr	r3, [pc, #580]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a90      	ldr	r2, [pc, #576]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xb0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x98>
 8002ae6:	4b8b      	ldr	r3, [pc, #556]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a8a      	ldr	r2, [pc, #552]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b88      	ldr	r3, [pc, #544]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a87      	ldr	r2, [pc, #540]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xb0>
 8002b00:	4b84      	ldr	r3, [pc, #528]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a83      	ldr	r2, [pc, #524]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b81      	ldr	r3, [pc, #516]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a80      	ldr	r2, [pc, #512]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fb3a 	bl	8001198 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fb36 	bl	8001198 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	; 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e204      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xc0>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fb26 	bl	8001198 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fb22 	bl	8001198 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	; 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1f0      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	4b6c      	ldr	r3, [pc, #432]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0xe8>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d063      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7e:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8a:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b96:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x152>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1c4      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4952      	ldr	r1, [pc, #328]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	; (8002d18 <HAL_RCC_OscConfig+0x2b0>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe fadb 	bl	8001198 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fad7 	bl	8001198 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1a5      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4940      	ldr	r1, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <HAL_RCC_OscConfig+0x2b0>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe faba 	bl	8001198 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fab6 	bl	8001198 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e184      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d030      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCC_OscConfig+0x2b4>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fa9a 	bl	8001198 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fa96 	bl	8001198 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e164      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x200>
 8002c86:	e015      	b.n	8002cb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_OscConfig+0x2b4>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fa83 	bl	8001198 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c96:	f7fe fa7f 	bl	8001198 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e14d      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1f0      	bne.n	8002c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80a0 	beq.w	8002e02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10f      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_OscConfig+0x2b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d121      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_RCC_OscConfig+0x2b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a07      	ldr	r2, [pc, #28]	; (8002d20 <HAL_RCC_OscConfig+0x2b8>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fa45 	bl	8001198 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d10:	e011      	b.n	8002d36 <HAL_RCC_OscConfig+0x2ce>
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470000 	.word	0x42470000
 8002d1c:	42470e80 	.word	0x42470e80
 8002d20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe fa38 	bl	8001198 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e106      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b85      	ldr	r3, [pc, #532]	; (8002f4c <HAL_RCC_OscConfig+0x4e4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2f0>
 8002d4a:	4b81      	ldr	r3, [pc, #516]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a80      	ldr	r2, [pc, #512]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x32a>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x312>
 8002d60:	4b7b      	ldr	r3, [pc, #492]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a7a      	ldr	r2, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	4b78      	ldr	r3, [pc, #480]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a77      	ldr	r2, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x32a>
 8002d7a:	4b75      	ldr	r3, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	4a74      	ldr	r2, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	; 0x70
 8002d86:	4b72      	ldr	r3, [pc, #456]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a71      	ldr	r2, [pc, #452]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe f9fd 	bl	8001198 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe f9f9 	bl	8001198 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0c5      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x33a>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe f9e7 	bl	8001198 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe f9e3 	bl	8001198 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0af      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b5a      	ldr	r3, [pc, #360]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a55      	ldr	r2, [pc, #340]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 809b 	beq.w	8002f42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e0c:	4b50      	ldr	r3, [pc, #320]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d05c      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d141      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b4c      	ldr	r3, [pc, #304]	; (8002f54 <HAL_RCC_OscConfig+0x4ec>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe f9b7 	bl	8001198 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe f9b3 	bl	8001198 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e081      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	019b      	lsls	r3, r3, #6
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	061b      	lsls	r3, r3, #24
 8002e70:	4937      	ldr	r1, [pc, #220]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_OscConfig+0x4ec>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe f98c 	bl	8001198 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe f988 	bl	8001198 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e056      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x41c>
 8002ea2:	e04e      	b.n	8002f42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_OscConfig+0x4ec>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7fe f975 	bl	8001198 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb2:	f7fe f971 	bl	8001198 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e03f      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec4:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x44a>
 8002ed0:	e037      	b.n	8002f42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e032      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <HAL_RCC_OscConfig+0x4e8>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d028      	beq.n	8002f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d121      	bne.n	8002f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d11a      	bne.n	8002f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f0e:	4013      	ands	r3, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d111      	bne.n	8002f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470060 	.word	0x42470060

08002f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0cc      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b68      	ldr	r3, [pc, #416]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d90c      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b65      	ldr	r3, [pc, #404]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b63      	ldr	r3, [pc, #396]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494d      	ldr	r1, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d044      	beq.n	8003078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d119      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d003      	beq.n	8003016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003012:	2b03      	cmp	r3, #3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003026:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e067      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4934      	ldr	r1, [pc, #208]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003048:	f7fe f8a6 	bl	8001198 <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fe f8a2 	bl	8001198 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e04f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d20c      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b22      	ldr	r3, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e032      	b.n	8003106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030de:	f000 f889 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	490a      	ldr	r1, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x1c0>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe f806 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00
 8003114:	40023800 	.word	0x40023800
 8003118:	080124f0 	.word	0x080124f0
 800311c:	20000020 	.word	0x20000020
 8003120:	20000024 	.word	0x20000024

08003124 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	; 0x30
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d129      	bne.n	800318a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a2a      	ldr	r2, [pc, #168]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315c:	2303      	movs	r3, #3
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003164:	2300      	movs	r3, #0
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003168:	f107 031c 	add.w	r3, r7, #28
 800316c:	4619      	mov	r1, r3
 800316e:	481f      	ldr	r0, [pc, #124]	; (80031ec <HAL_RCC_MCOConfig+0xc8>)
 8003170:	f7ff fa7a 	bl	8002668 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	430b      	orrs	r3, r1
 8003182:	4919      	ldr	r1, [pc, #100]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003188:	e029      	b.n	80031de <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a15      	ldr	r2, [pc, #84]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80031a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80031bc:	f107 031c 	add.w	r3, r7, #28
 80031c0:	4619      	mov	r1, r3
 80031c2:	480b      	ldr	r0, [pc, #44]	; (80031f0 <HAL_RCC_MCOConfig+0xcc>)
 80031c4:	f7ff fa50 	bl	8002668 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	00d9      	lsls	r1, r3, #3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	430b      	orrs	r3, r1
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_MCOConfig+0xc4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
}
 80031de:	bf00      	nop
 80031e0:	3730      	adds	r7, #48	; 0x30
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020800 	.word	0x40020800

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031fa:	2100      	movs	r1, #0
 80031fc:	6079      	str	r1, [r7, #4]
 80031fe:	2100      	movs	r1, #0
 8003200:	60f9      	str	r1, [r7, #12]
 8003202:	2100      	movs	r1, #0
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003206:	2100      	movs	r1, #0
 8003208:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800320a:	4952      	ldr	r1, [pc, #328]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800320c:	6889      	ldr	r1, [r1, #8]
 800320e:	f001 010c 	and.w	r1, r1, #12
 8003212:	2908      	cmp	r1, #8
 8003214:	d00d      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3e>
 8003216:	2908      	cmp	r1, #8
 8003218:	f200 8094 	bhi.w	8003344 <HAL_RCC_GetSysClockFreq+0x150>
 800321c:	2900      	cmp	r1, #0
 800321e:	d002      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x32>
 8003220:	2904      	cmp	r1, #4
 8003222:	d003      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x38>
 8003224:	e08e      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003226:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCC_GetSysClockFreq+0x164>)
 8003228:	60bb      	str	r3, [r7, #8]
       break;
 800322a:	e08e      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800322c:	4b4b      	ldr	r3, [pc, #300]	; (800335c <HAL_RCC_GetSysClockFreq+0x168>)
 800322e:	60bb      	str	r3, [r7, #8]
      break;
 8003230:	e08b      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003232:	4948      	ldr	r1, [pc, #288]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 8003234:	6849      	ldr	r1, [r1, #4]
 8003236:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800323a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800323c:	4945      	ldr	r1, [pc, #276]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800323e:	6849      	ldr	r1, [r1, #4]
 8003240:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003244:	2900      	cmp	r1, #0
 8003246:	d024      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003248:	4942      	ldr	r1, [pc, #264]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800324a:	6849      	ldr	r1, [r1, #4]
 800324c:	0989      	lsrs	r1, r1, #6
 800324e:	4608      	mov	r0, r1
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003258:	f04f 0500 	mov.w	r5, #0
 800325c:	ea00 0204 	and.w	r2, r0, r4
 8003260:	ea01 0305 	and.w	r3, r1, r5
 8003264:	493d      	ldr	r1, [pc, #244]	; (800335c <HAL_RCC_GetSysClockFreq+0x168>)
 8003266:	fb01 f003 	mul.w	r0, r1, r3
 800326a:	2100      	movs	r1, #0
 800326c:	fb01 f102 	mul.w	r1, r1, r2
 8003270:	1844      	adds	r4, r0, r1
 8003272:	493a      	ldr	r1, [pc, #232]	; (800335c <HAL_RCC_GetSysClockFreq+0x168>)
 8003274:	fba2 0101 	umull	r0, r1, r2, r1
 8003278:	1863      	adds	r3, r4, r1
 800327a:	4619      	mov	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	f7fc fff4 	bl	8000270 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e04a      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	ea02 0400 	and.w	r4, r2, r0
 80032aa:	ea03 0501 	and.w	r5, r3, r1
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	014b      	lsls	r3, r1, #5
 80032bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032c0:	0142      	lsls	r2, r0, #5
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	1b00      	subs	r0, r0, r4
 80032c8:	eb61 0105 	sbc.w	r1, r1, r5
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	018b      	lsls	r3, r1, #6
 80032d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032da:	0182      	lsls	r2, r0, #6
 80032dc:	1a12      	subs	r2, r2, r0
 80032de:	eb63 0301 	sbc.w	r3, r3, r1
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	00d9      	lsls	r1, r3, #3
 80032ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032f0:	00d0      	lsls	r0, r2, #3
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	1912      	adds	r2, r2, r4
 80032f8:	eb45 0303 	adc.w	r3, r5, r3
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0299      	lsls	r1, r3, #10
 8003306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800330a:	0290      	lsls	r0, r2, #10
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f7fc ffa8 	bl	8000270 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003328:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_RCC_GetSysClockFreq+0x160>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_RCC_GetSysClockFreq+0x164>)
 8003346:	60bb      	str	r3, [r7, #8]
      break;
 8003348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334a:	68bb      	ldr	r3, [r7, #8]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bdb0      	pop	{r4, r5, r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	017d7840 	.word	0x017d7840

08003360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <HAL_RCC_GetHCLKFreq+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000020 	.word	0x20000020

08003378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e041      	b.n	800340e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fc72 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4610      	mov	r0, r2
 80033b8:	f000 fa96 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	d001      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e04e      	b.n	80034ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_TIM_Base_Start_IT+0xc4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d022      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d01d      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1f      	ldr	r2, [pc, #124]	; (80034e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d018      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d013      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1b      	ldr	r2, [pc, #108]	; (80034ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x80>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d010      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ba:	e007      	b.n	80034cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40010000 	.word	0x40010000
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	40010400 	.word	0x40010400
 80034f0:	40014000 	.word	0x40014000
 80034f4:	40001800 	.word	0x40001800

080034f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b02      	cmp	r3, #2
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0202 	mvn.w	r2, #2
 8003524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9b5 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9a7 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9b8 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0204 	mvn.w	r2, #4
 8003578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2202      	movs	r2, #2
 800357e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f98b 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f97d 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f98e 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d122      	bne.n	80035fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d11b      	bne.n	80035fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0208 	mvn.w	r2, #8
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f961 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f953 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f964 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	2b10      	cmp	r3, #16
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	2b10      	cmp	r3, #16
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0210 	mvn.w	r2, #16
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2208      	movs	r2, #8
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f937 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f929 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f93a 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d10e      	bne.n	800367c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0201 	mvn.w	r2, #1
 8003674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd faa4 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d10e      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	2b80      	cmp	r3, #128	; 0x80
 8003696:	d107      	bne.n	80036a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fae0 	bl	8003c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d10e      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d107      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8ff 	bl	80038d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d10e      	bne.n	8003700 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d107      	bne.n	8003700 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0220 	mvn.w	r2, #32
 80036f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 faaa 	bl	8003c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_TIM_ConfigClockSource+0x1c>
 8003720:	2302      	movs	r3, #2
 8003722:	e0b4      	b.n	800388e <HAL_TIM_ConfigClockSource+0x186>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800374a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375c:	d03e      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0xd4>
 800375e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003762:	f200 8087 	bhi.w	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	f000 8086 	beq.w	800387a <HAL_TIM_ConfigClockSource+0x172>
 800376e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003772:	d87f      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b70      	cmp	r3, #112	; 0x70
 8003776:	d01a      	beq.n	80037ae <HAL_TIM_ConfigClockSource+0xa6>
 8003778:	2b70      	cmp	r3, #112	; 0x70
 800377a:	d87b      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d050      	beq.n	8003822 <HAL_TIM_ConfigClockSource+0x11a>
 8003780:	2b60      	cmp	r3, #96	; 0x60
 8003782:	d877      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b50      	cmp	r3, #80	; 0x50
 8003786:	d03c      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0xfa>
 8003788:	2b50      	cmp	r3, #80	; 0x50
 800378a:	d873      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d058      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0x13a>
 8003790:	2b40      	cmp	r3, #64	; 0x40
 8003792:	d86f      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d064      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 8003798:	2b30      	cmp	r3, #48	; 0x30
 800379a:	d86b      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d060      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d867      	bhi.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d05c      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d05a      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x15a>
 80037ac:	e062      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6899      	ldr	r1, [r3, #8]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f000 f9ad 	bl	8003b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	609a      	str	r2, [r3, #8]
      break;
 80037da:	e04f      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6899      	ldr	r1, [r3, #8]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f000 f996 	bl	8003b1c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037fe:	609a      	str	r2, [r3, #8]
      break;
 8003800:	e03c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	461a      	mov	r2, r3
 8003810:	f000 f90a 	bl	8003a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2150      	movs	r1, #80	; 0x50
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f963 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003820:	e02c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	461a      	mov	r2, r3
 8003830:	f000 f929 	bl	8003a86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2160      	movs	r1, #96	; 0x60
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f953 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003840:	e01c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	461a      	mov	r2, r3
 8003850:	f000 f8ea 	bl	8003a28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2140      	movs	r1, #64	; 0x40
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f943 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003860:	e00c      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f000 f93a 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003872:	e003      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e000      	b.n	800387c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800387a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <TIM_Base_SetConfig+0x114>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d027      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d023      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d017      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <TIM_Base_SetConfig+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <TIM_Base_SetConfig+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_Base_SetConfig+0x134>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <TIM_Base_SetConfig+0x138>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <TIM_Base_SetConfig+0x13c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	40001c00 	.word	0x40001c00
 8003a24:	40002000 	.word	0x40002000

08003a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 030a 	bic.w	r3, r3, #10
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b087      	sub	sp, #28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0210 	bic.w	r2, r3, #16
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f043 0307 	orr.w	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e05a      	b.n	8003c2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a21      	ldr	r2, [pc, #132]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d022      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc0:	d01d      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00e      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d10c      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00
 8003c48:	40010400 	.word	0x40010400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40001800 	.word	0x40001800

08003c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003c82:	4b8d      	ldr	r3, [pc, #564]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003c84:	22c0      	movs	r2, #192	; 0xc0
 8003c86:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003c88:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003c8a:	22a8      	movs	r2, #168	; 0xa8
 8003c8c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003c8e:	4b8a      	ldr	r3, [pc, #552]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8003c94:	4b88      	ldr	r3, [pc, #544]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003c96:	226f      	movs	r2, #111	; 0x6f
 8003c98:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003c9a:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ca0:	4b86      	ldr	r3, [pc, #536]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003ca2:	22ff      	movs	r2, #255	; 0xff
 8003ca4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003ca6:	4b85      	ldr	r3, [pc, #532]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003cac:	4b83      	ldr	r3, [pc, #524]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003cb2:	4b83      	ldr	r3, [pc, #524]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003cb4:	22c0      	movs	r2, #192	; 0xc0
 8003cb6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003cb8:	4b81      	ldr	r3, [pc, #516]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003cba:	22a8      	movs	r2, #168	; 0xa8
 8003cbc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003cbe:	4b80      	ldr	r3, [pc, #512]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003cc4:	4b7e      	ldr	r3, [pc, #504]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003cca:	f000 fcab 	bl	8004624 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003cce:	4b7a      	ldr	r3, [pc, #488]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	061a      	lsls	r2, r3, #24
 8003cd4:	4b78      	ldr	r3, [pc, #480]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003cd6:	785b      	ldrb	r3, [r3, #1]
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003cde:	789b      	ldrb	r3, [r3, #2]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	4a74      	ldr	r2, [pc, #464]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003ce6:	78d2      	ldrb	r2, [r2, #3]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	061a      	lsls	r2, r3, #24
 8003cec:	4b72      	ldr	r3, [pc, #456]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	0619      	lsls	r1, r3, #24
 8003cf2:	4b71      	ldr	r3, [pc, #452]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	4319      	orrs	r1, r3
 8003cfa:	4b6f      	ldr	r3, [pc, #444]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003cfc:	789b      	ldrb	r3, [r3, #2]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	430b      	orrs	r3, r1
 8003d02:	496d      	ldr	r1, [pc, #436]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d04:	78c9      	ldrb	r1, [r1, #3]
 8003d06:	430b      	orrs	r3, r1
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	4b69      	ldr	r3, [pc, #420]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	0619      	lsls	r1, r3, #24
 8003d16:	4b68      	ldr	r3, [pc, #416]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	4319      	orrs	r1, r3
 8003d1e:	4b66      	ldr	r3, [pc, #408]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d20:	789b      	ldrb	r3, [r3, #2]
 8003d22:	021b      	lsls	r3, r3, #8
 8003d24:	430b      	orrs	r3, r1
 8003d26:	4964      	ldr	r1, [pc, #400]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d28:	78c9      	ldrb	r1, [r1, #3]
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d32:	431a      	orrs	r2, r3
 8003d34:	4b60      	ldr	r3, [pc, #384]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	0619      	lsls	r1, r3, #24
 8003d3a:	4b5f      	ldr	r3, [pc, #380]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	4319      	orrs	r1, r3
 8003d42:	4b5d      	ldr	r3, [pc, #372]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d44:	789b      	ldrb	r3, [r3, #2]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	495b      	ldr	r1, [pc, #364]	; (8003eb8 <MX_LWIP_Init+0x23c>)
 8003d4c:	78c9      	ldrb	r1, [r1, #3]
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	0e1b      	lsrs	r3, r3, #24
 8003d52:	4313      	orrs	r3, r2
 8003d54:	4a5b      	ldr	r2, [pc, #364]	; (8003ec4 <MX_LWIP_Init+0x248>)
 8003d56:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003d58:	4b58      	ldr	r3, [pc, #352]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	061a      	lsls	r2, r3, #24
 8003d5e:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	041b      	lsls	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	4b55      	ldr	r3, [pc, #340]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d68:	789b      	ldrb	r3, [r3, #2]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	4a53      	ldr	r2, [pc, #332]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d70:	78d2      	ldrb	r2, [r2, #3]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	061a      	lsls	r2, r3, #24
 8003d76:	4b51      	ldr	r3, [pc, #324]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	0619      	lsls	r1, r3, #24
 8003d7c:	4b4f      	ldr	r3, [pc, #316]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d7e:	785b      	ldrb	r3, [r3, #1]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	4319      	orrs	r1, r3
 8003d84:	4b4d      	ldr	r3, [pc, #308]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d86:	789b      	ldrb	r3, [r3, #2]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	430b      	orrs	r3, r1
 8003d8c:	494b      	ldr	r1, [pc, #300]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d8e:	78c9      	ldrb	r1, [r1, #3]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	0619      	lsls	r1, r3, #24
 8003da0:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	4319      	orrs	r1, r3
 8003da8:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003daa:	789b      	ldrb	r3, [r3, #2]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	430b      	orrs	r3, r1
 8003db0:	4942      	ldr	r1, [pc, #264]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003db2:	78c9      	ldrb	r1, [r1, #3]
 8003db4:	430b      	orrs	r3, r1
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	4b3f      	ldr	r3, [pc, #252]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	0619      	lsls	r1, r3, #24
 8003dc4:	4b3d      	ldr	r3, [pc, #244]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003dc6:	785b      	ldrb	r3, [r3, #1]
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	4319      	orrs	r1, r3
 8003dcc:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003dce:	789b      	ldrb	r3, [r3, #2]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	4939      	ldr	r1, [pc, #228]	; (8003ebc <MX_LWIP_Init+0x240>)
 8003dd6:	78c9      	ldrb	r1, [r1, #3]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	0e1b      	lsrs	r3, r3, #24
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <MX_LWIP_Init+0x24c>)
 8003de0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003de2:	4b37      	ldr	r3, [pc, #220]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	061a      	lsls	r2, r3, #24
 8003de8:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	041b      	lsls	r3, r3, #16
 8003dee:	431a      	orrs	r2, r3
 8003df0:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003df2:	789b      	ldrb	r3, [r3, #2]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	4313      	orrs	r3, r2
 8003df8:	4a31      	ldr	r2, [pc, #196]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003dfa:	78d2      	ldrb	r2, [r2, #3]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	061a      	lsls	r2, r3, #24
 8003e00:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	0619      	lsls	r1, r3, #24
 8003e06:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	4319      	orrs	r1, r3
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e10:	789b      	ldrb	r3, [r3, #2]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	430b      	orrs	r3, r1
 8003e16:	492a      	ldr	r1, [pc, #168]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e18:	78c9      	ldrb	r1, [r1, #3]
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e22:	431a      	orrs	r2, r3
 8003e24:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	0619      	lsls	r1, r3, #24
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	041b      	lsls	r3, r3, #16
 8003e30:	4319      	orrs	r1, r3
 8003e32:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e34:	789b      	ldrb	r3, [r3, #2]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	4921      	ldr	r1, [pc, #132]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e3c:	78c9      	ldrb	r1, [r1, #3]
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	0a1b      	lsrs	r3, r3, #8
 8003e42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e46:	431a      	orrs	r2, r3
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	0619      	lsls	r1, r3, #24
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e50:	785b      	ldrb	r3, [r3, #1]
 8003e52:	041b      	lsls	r3, r3, #16
 8003e54:	4319      	orrs	r1, r3
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e58:	789b      	ldrb	r3, [r3, #2]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	4918      	ldr	r1, [pc, #96]	; (8003ec0 <MX_LWIP_Init+0x244>)
 8003e60:	78c9      	ldrb	r1, [r1, #3]
 8003e62:	430b      	orrs	r3, r1
 8003e64:	0e1b      	lsrs	r3, r3, #24
 8003e66:	4313      	orrs	r3, r2
 8003e68:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <MX_LWIP_Init+0x250>)
 8003e6a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <MX_LWIP_Init+0x254>)
 8003e6e:	9302      	str	r3, [sp, #8]
 8003e70:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <MX_LWIP_Init+0x258>)
 8003e72:	9301      	str	r3, [sp, #4]
 8003e74:	2300      	movs	r3, #0
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <MX_LWIP_Init+0x250>)
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <MX_LWIP_Init+0x24c>)
 8003e7c:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <MX_LWIP_Init+0x248>)
 8003e7e:	4816      	ldr	r0, [pc, #88]	; (8003ed8 <MX_LWIP_Init+0x25c>)
 8003e80:	f001 f876 	bl	8004f70 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003e84:	4814      	ldr	r0, [pc, #80]	; (8003ed8 <MX_LWIP_Init+0x25c>)
 8003e86:	f001 fa25 	bl	80052d4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003e8a:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <MX_LWIP_Init+0x25c>)
 8003e8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e9c:	480e      	ldr	r0, [pc, #56]	; (8003ed8 <MX_LWIP_Init+0x25c>)
 8003e9e:	f001 fa29 	bl	80052f4 <netif_set_up>
 8003ea2:	e002      	b.n	8003eaa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003ea4:	480c      	ldr	r0, [pc, #48]	; (8003ed8 <MX_LWIP_Init+0x25c>)
 8003ea6:	f001 fa91 	bl	80053cc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003eaa:	490c      	ldr	r1, [pc, #48]	; (8003edc <MX_LWIP_Init+0x260>)
 8003eac:	480a      	ldr	r0, [pc, #40]	; (8003ed8 <MX_LWIP_Init+0x25c>)
 8003eae:	f001 fabf 	bl	8005430 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003eb2:	bf00      	nop
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	200003bc 	.word	0x200003bc
 8003ebc:	200003b8 	.word	0x200003b8
 8003ec0:	20000378 	.word	0x20000378
 8003ec4:	200003b4 	.word	0x200003b4
 8003ec8:	200003c0 	.word	0x200003c0
 8003ecc:	200003c4 	.word	0x200003c4
 8003ed0:	0800e4b9 	.word	0x0800e4b9
 8003ed4:	08004451 	.word	0x08004451
 8003ed8:	2000037c 	.word	0x2000037c
 8003edc:	080044bd 	.word	0x080044bd

08003ee0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003ee4:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <MX_LWIP_Process+0x14>)
 8003ee6:	f000 fa93 	bl	8004410 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003eea:	f007 fbb1 	bl	800b650 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000037c 	.word	0x2000037c

08003ef8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08e      	sub	sp, #56	; 0x38
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	60da      	str	r2, [r3, #12]
 8003f0e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_ETH_MspInit+0x138>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	f040 8085 	bne.w	8004026 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	623b      	str	r3, [r7, #32]
 8003f20:	4b44      	ldr	r3, [pc, #272]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4a43      	ldr	r2, [pc, #268]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2c:	4b41      	ldr	r3, [pc, #260]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f46:	6313      	str	r3, [r2, #48]	; 0x30
 8003f48:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
 8003f58:	4b36      	ldr	r3, [pc, #216]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	4a35      	ldr	r2, [pc, #212]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f62:	6313      	str	r3, [r2, #48]	; 0x30
 8003f64:	4b33      	ldr	r3, [pc, #204]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	4a2e      	ldr	r2, [pc, #184]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f7a:	f043 0304 	orr.w	r3, r3, #4
 8003f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f80:	4b2c      	ldr	r3, [pc, #176]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	4b28      	ldr	r3, [pc, #160]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	4a27      	ldr	r2, [pc, #156]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9c:	4b25      	ldr	r3, [pc, #148]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	4a20      	ldr	r2, [pc, #128]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003fb2:	f043 0302 	orr.w	r3, r3, #2
 8003fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb8:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_ETH_MspInit+0x13c>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003fc4:	2332      	movs	r3, #50	; 0x32
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fd4:	230b      	movs	r3, #11
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4816      	ldr	r0, [pc, #88]	; (8004038 <HAL_ETH_MspInit+0x140>)
 8003fe0:	f7fe fb42 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003fe4:	2386      	movs	r3, #134	; 0x86
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ff4:	230b      	movs	r3, #11
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	480f      	ldr	r0, [pc, #60]	; (800403c <HAL_ETH_MspInit+0x144>)
 8004000:	f7fe fb32 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004004:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400a:	2302      	movs	r3, #2
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004016:	230b      	movs	r3, #11
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401e:	4619      	mov	r1, r3
 8004020:	4807      	ldr	r0, [pc, #28]	; (8004040 <HAL_ETH_MspInit+0x148>)
 8004022:	f7fe fb21 	bl	8002668 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004026:	bf00      	nop
 8004028:	3738      	adds	r7, #56	; 0x38
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40028000 	.word	0x40028000
 8004034:	40023800 	.word	0x40023800
 8004038:	40020800 	.word	0x40020800
 800403c:	40020000 	.word	0x40020000
 8004040:	40020400 	.word	0x40020400

08004044 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800404c:	4b41      	ldr	r3, [pc, #260]	; (8004154 <low_level_init+0x110>)
 800404e:	4a42      	ldr	r2, [pc, #264]	; (8004158 <low_level_init+0x114>)
 8004050:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004052:	4b40      	ldr	r3, [pc, #256]	; (8004154 <low_level_init+0x110>)
 8004054:	2201      	movs	r2, #1
 8004056:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004058:	4b3e      	ldr	r3, [pc, #248]	; (8004154 <low_level_init+0x110>)
 800405a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800405e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004060:	4b3c      	ldr	r3, [pc, #240]	; (8004154 <low_level_init+0x110>)
 8004062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004066:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 8004068:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <low_level_init+0x110>)
 800406a:	2200      	movs	r2, #0
 800406c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800406e:	2300      	movs	r3, #0
 8004070:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004076:	23e1      	movs	r3, #225	; 0xe1
 8004078:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800407a:	2300      	movs	r3, #0
 800407c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004086:	4a33      	ldr	r2, [pc, #204]	; (8004154 <low_level_init+0x110>)
 8004088:	f107 0308 	add.w	r3, r7, #8
 800408c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <low_level_init+0x110>)
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004094:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <low_level_init+0x110>)
 8004096:	2200      	movs	r2, #0
 8004098:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800409a:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <low_level_init+0x110>)
 800409c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040a0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80040a2:	482c      	ldr	r0, [pc, #176]	; (8004154 <low_level_init+0x110>)
 80040a4:	f7fd f9ba 	bl	800141c <HAL_ETH_Init>
 80040a8:	4603      	mov	r3, r0
 80040aa:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80040c4:	2304      	movs	r3, #4
 80040c6:	4a25      	ldr	r2, [pc, #148]	; (800415c <low_level_init+0x118>)
 80040c8:	4925      	ldr	r1, [pc, #148]	; (8004160 <low_level_init+0x11c>)
 80040ca:	4822      	ldr	r0, [pc, #136]	; (8004154 <low_level_init+0x110>)
 80040cc:	f7fd fb42 	bl	8001754 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80040d0:	2304      	movs	r3, #4
 80040d2:	4a24      	ldr	r2, [pc, #144]	; (8004164 <low_level_init+0x120>)
 80040d4:	4924      	ldr	r1, [pc, #144]	; (8004168 <low_level_init+0x124>)
 80040d6:	481f      	ldr	r0, [pc, #124]	; (8004154 <low_level_init+0x110>)
 80040d8:	f7fd fba5 	bl	8001826 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2206      	movs	r2, #6
 80040e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <low_level_init+0x110>)
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <low_level_init+0x110>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	785a      	ldrb	r2, [r3, #1]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040fc:	4b15      	ldr	r3, [pc, #84]	; (8004154 <low_level_init+0x110>)
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	789a      	ldrb	r2, [r3, #2]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <low_level_init+0x110>)
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	78da      	ldrb	r2, [r3, #3]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <low_level_init+0x110>)
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	791a      	ldrb	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <low_level_init+0x110>)
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	795a      	ldrb	r2, [r3, #5]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800413a:	f043 030a 	orr.w	r3, r3, #10
 800413e:	b2da      	uxtb	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004146:	4803      	ldr	r0, [pc, #12]	; (8004154 <low_level_init+0x110>)
 8004148:	f7fd fe16 	bl	8001d78 <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20001c98 	.word	0x20001c98
 8004158:	40028000 	.word	0x40028000
 800415c:	20001ce0 	.word	0x20001ce0
 8004160:	200003c8 	.word	0x200003c8
 8004164:	20000448 	.word	0x20000448
 8004168:	20001c18 	.word	0x20001c18

0800416c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	; 0x28
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004176:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <low_level_output+0x138>)
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800418e:	4b45      	ldr	r3, [pc, #276]	; (80042a4 <low_level_output+0x138>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	e05a      	b.n	8004254 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	da03      	bge.n	80041ae <low_level_output+0x42>
      {
        errval = ERR_USE;
 80041a6:	23f8      	movs	r3, #248	; 0xf8
 80041a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80041ac:	e05c      	b.n	8004268 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	895b      	ldrh	r3, [r3, #10]
 80041b2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80041b8:	e02f      	b.n	800421a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	18d0      	adds	r0, r2, r3
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	18d1      	adds	r1, r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80041ce:	3304      	adds	r3, #4
 80041d0:	461a      	mov	r2, r3
 80041d2:	f00a fa79 	bl	800e6c8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	da03      	bge.n	80041ec <low_level_output+0x80>
        {
          errval = ERR_USE;
 80041e4:	23f8      	movs	r3, #248	; 0xf8
 80041e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80041ea:	e03d      	b.n	8004268 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80041fc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004208:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004214:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004224:	4293      	cmp	r3, r2
 8004226:	d8c8      	bhi.n	80041ba <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	18d0      	adds	r0, r2, r3
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4413      	add	r3, r2
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4619      	mov	r1, r3
 800423a:	f00a fa45 	bl	800e6c8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	623b      	str	r3, [r7, #32]
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1a1      	bne.n	800419e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800425a:	6979      	ldr	r1, [r7, #20]
 800425c:	4811      	ldr	r0, [pc, #68]	; (80042a4 <low_level_output+0x138>)
 800425e:	f7fd fb4f 	bl	8001900 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <low_level_output+0x138>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004270:	3314      	adds	r3, #20
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <low_level_output+0x138>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004284:	3314      	adds	r3, #20
 8004286:	2220      	movs	r2, #32
 8004288:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <low_level_output+0x138>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004292:	3304      	adds	r3, #4
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800429c:	4618      	mov	r0, r3
 800429e:	3728      	adds	r7, #40	; 0x28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20001c98 	.word	0x20001c98

080042a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08c      	sub	sp, #48	; 0x30
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80042cc:	484f      	ldr	r0, [pc, #316]	; (800440c <low_level_input+0x164>)
 80042ce:	f7fd fc01 	bl	8001ad4 <HAL_ETH_GetReceivedFrame>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <low_level_input+0x34>

    return NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	e092      	b.n	8004402 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80042dc:	4b4b      	ldr	r3, [pc, #300]	; (800440c <low_level_input+0x164>)
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80042e2:	4b4a      	ldr	r3, [pc, #296]	; (800440c <low_level_input+0x164>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80042f4:	4619      	mov	r1, r3
 80042f6:	2000      	movs	r0, #0
 80042f8:	f001 f936 	bl	8005568 <pbuf_alloc>
 80042fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d04b      	beq.n	800439c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004304:	4b41      	ldr	r3, [pc, #260]	; (800440c <low_level_input+0x164>)
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004308:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
 8004312:	e040      	b.n	8004396 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	895b      	ldrh	r3, [r3, #10]
 8004318:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800431e:	e021      	b.n	8004364 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	18d0      	adds	r0, r2, r3
 8004328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	18d1      	adds	r1, r2, r3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004334:	3304      	adds	r3, #4
 8004336:	461a      	mov	r2, r3
 8004338:	f00a f9c6 	bl	800e6c8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4413      	add	r3, r2
 800434e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004352:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800435e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800436e:	4293      	cmp	r3, r2
 8004370:	d8d6      	bhi.n	8004320 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	18d0      	adds	r0, r2, r3
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	4413      	add	r3, r2
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4619      	mov	r1, r3
 8004384:	f00a f9a0 	bl	800e6c8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4413      	add	r3, r2
 800438e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1bb      	bne.n	8004314 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <low_level_input+0x164>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80043a2:	2300      	movs	r3, #0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	e00b      	b.n	80043c0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3301      	adds	r3, #1
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <low_level_input+0x164>)
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3ee      	bcc.n	80043a8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80043ca:	4b10      	ldr	r3, [pc, #64]	; (800440c <low_level_input+0x164>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80043d0:	4b0e      	ldr	r3, [pc, #56]	; (800440c <low_level_input+0x164>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	3314      	adds	r3, #20
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <low_level_input+0x164>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ec:	3314      	adds	r3, #20
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80043f2:	4b06      	ldr	r3, [pc, #24]	; (800440c <low_level_input+0x164>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fa:	3308      	adds	r3, #8
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004402:	4618      	mov	r0, r3
 8004404:	3730      	adds	r7, #48	; 0x30
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20001c98 	.word	0x20001c98

08004410 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff45 	bl	80042a8 <low_level_input>
 800441e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d010      	beq.n	8004448 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	4798      	blx	r3
 8004430:	4603      	mov	r3, r0
 8004432:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004434:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d006      	beq.n	800444a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f001 fb77 	bl	8005b30 <pbuf_free>
    p = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e000      	b.n	800444a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004448:	bf00      	nop
  }
}
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <ethernetif_init+0x1c>
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <ethernetif_init+0x48>)
 8004460:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8004464:	490d      	ldr	r1, [pc, #52]	; (800449c <ethernetif_init+0x4c>)
 8004466:	480e      	ldr	r0, [pc, #56]	; (80044a0 <ethernetif_init+0x50>)
 8004468:	f00a f95e 	bl	800e728 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2273      	movs	r2, #115	; 0x73
 8004470:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2274      	movs	r2, #116	; 0x74
 8004478:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <ethernetif_init+0x54>)
 8004480:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <ethernetif_init+0x58>)
 8004486:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff fddb 	bl	8004044 <low_level_init>

  return ERR_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	0800fb10 	.word	0x0800fb10
 800449c:	0800fb2c 	.word	0x0800fb2c
 80044a0:	0800fb3c 	.word	0x0800fb3c
 80044a4:	0800c981 	.word	0x0800c981
 80044a8:	0800416d 	.word	0x0800416d

080044ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044b0:	f7fc fe72 	bl	8001198 <HAL_GetTick>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	bd80      	pop	{r7, pc}
	...

080044bc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044d2:	089b      	lsrs	r3, r3, #2
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d05d      	beq.n	800459a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80044de:	4b34      	ldr	r3, [pc, #208]	; (80045b0 <ethernetif_update_config+0xf4>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d03f      	beq.n	8004566 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80044e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044ea:	2100      	movs	r1, #0
 80044ec:	4830      	ldr	r0, [pc, #192]	; (80045b0 <ethernetif_update_config+0xf4>)
 80044ee:	f7fd fbdd 	bl	8001cac <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80044f2:	f7fc fe51 	bl	8001198 <HAL_GetTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	461a      	mov	r2, r3
 8004500:	2101      	movs	r1, #1
 8004502:	482b      	ldr	r0, [pc, #172]	; (80045b0 <ethernetif_update_config+0xf4>)
 8004504:	f7fd fb6a 	bl	8001bdc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004508:	f7fc fe46 	bl	8001198 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004516:	d828      	bhi.n	800456a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0eb      	beq.n	80044fa <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004522:	f107 0308 	add.w	r3, r7, #8
 8004526:	461a      	mov	r2, r3
 8004528:	211f      	movs	r1, #31
 800452a:	4821      	ldr	r0, [pc, #132]	; (80045b0 <ethernetif_update_config+0xf4>)
 800452c:	f7fd fb56 	bl	8001bdc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <ethernetif_update_config+0xf4>)
 800453c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	e002      	b.n	800454a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004544:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <ethernetif_update_config+0xf4>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <ethernetif_update_config+0xf4>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	e016      	b.n	800458a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <ethernetif_update_config+0xf4>)
 800455e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	e011      	b.n	800458a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <ethernetif_update_config+0xb0>
          goto error;
 800456a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800456c:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <ethernetif_update_config+0xf4>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004574:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <ethernetif_update_config+0xf4>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800457c:	4313      	orrs	r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	461a      	mov	r2, r3
 8004582:	2100      	movs	r1, #0
 8004584:	480a      	ldr	r0, [pc, #40]	; (80045b0 <ethernetif_update_config+0xf4>)
 8004586:	f7fd fb91 	bl	8001cac <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800458a:	2100      	movs	r1, #0
 800458c:	4808      	ldr	r0, [pc, #32]	; (80045b0 <ethernetif_update_config+0xf4>)
 800458e:	f7fd fc51 	bl	8001e34 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004592:	4807      	ldr	r0, [pc, #28]	; (80045b0 <ethernetif_update_config+0xf4>)
 8004594:	f7fd fbf0 	bl	8001d78 <HAL_ETH_Start>
 8004598:	e002      	b.n	80045a0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800459a:	4805      	ldr	r0, [pc, #20]	; (80045b0 <ethernetif_update_config+0xf4>)
 800459c:	f7fd fc1b 	bl	8001dd6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f807 	bl	80045b4 <ethernetif_notify_conn_changed>
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20001c98 	.word	0x20001c98

080045b4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	b21a      	sxth	r2, r3
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	b29b      	uxth	r3, r3
 80045de:	b21b      	sxth	r3, r3
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b21b      	sxth	r3, r3
 80045e4:	b29b      	uxth	r3, r3
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	061a      	lsls	r2, r3, #24
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0e1b      	lsrs	r3, r3, #24
 8004616:	4313      	orrs	r3, r2
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800462e:	f000 f8d5 	bl	80047dc <mem_init>
  memp_init();
 8004632:	f000 fbdb 	bl	8004dec <memp_init>
  pbuf_init();
  netif_init();
 8004636:	f000 fc93 	bl	8004f60 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800463a:	f007 f84b 	bl	800b6d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800463e:	f001 fda7 	bl	8006190 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004642:	f006 ffbd 	bl	800b5c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <ptr_to_mem+0x20>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	4413      	add	r3, r2
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000104 	.word	0x20000104

08004674 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <mem_to_ptr+0x20>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	b29b      	uxth	r3, r3
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000104 	.word	0x20000104

08004698 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80046a0:	4b45      	ldr	r3, [pc, #276]	; (80047b8 <plug_holes+0x120>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d206      	bcs.n	80046b8 <plug_holes+0x20>
 80046aa:	4b44      	ldr	r3, [pc, #272]	; (80047bc <plug_holes+0x124>)
 80046ac:	f240 12df 	movw	r2, #479	; 0x1df
 80046b0:	4943      	ldr	r1, [pc, #268]	; (80047c0 <plug_holes+0x128>)
 80046b2:	4844      	ldr	r0, [pc, #272]	; (80047c4 <plug_holes+0x12c>)
 80046b4:	f00a f838 	bl	800e728 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80046b8:	4b43      	ldr	r3, [pc, #268]	; (80047c8 <plug_holes+0x130>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d306      	bcc.n	80046d0 <plug_holes+0x38>
 80046c2:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <plug_holes+0x124>)
 80046c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80046c8:	4940      	ldr	r1, [pc, #256]	; (80047cc <plug_holes+0x134>)
 80046ca:	483e      	ldr	r0, [pc, #248]	; (80047c4 <plug_holes+0x12c>)
 80046cc:	f00a f82c 	bl	800e728 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <plug_holes+0x4e>
 80046d8:	4b38      	ldr	r3, [pc, #224]	; (80047bc <plug_holes+0x124>)
 80046da:	f240 12e1 	movw	r2, #481	; 0x1e1
 80046de:	493c      	ldr	r1, [pc, #240]	; (80047d0 <plug_holes+0x138>)
 80046e0:	4838      	ldr	r0, [pc, #224]	; (80047c4 <plug_holes+0x12c>)
 80046e2:	f00a f821 	bl	800e728 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80046ee:	d906      	bls.n	80046fe <plug_holes+0x66>
 80046f0:	4b32      	ldr	r3, [pc, #200]	; (80047bc <plug_holes+0x124>)
 80046f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80046f6:	4937      	ldr	r1, [pc, #220]	; (80047d4 <plug_holes+0x13c>)
 80046f8:	4832      	ldr	r0, [pc, #200]	; (80047c4 <plug_holes+0x12c>)
 80046fa:	f00a f815 	bl	800e728 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ffa4 	bl	8004650 <ptr_to_mem>
 8004708:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	429a      	cmp	r2, r3
 8004710:	d024      	beq.n	800475c <plug_holes+0xc4>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d120      	bne.n	800475c <plug_holes+0xc4>
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <plug_holes+0x130>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	429a      	cmp	r2, r3
 8004722:	d01b      	beq.n	800475c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004724:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <plug_holes+0x140>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	429a      	cmp	r2, r3
 800472c:	d102      	bne.n	8004734 <plug_holes+0x9c>
      lfree = mem;
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <plug_holes+0x140>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	881a      	ldrh	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004744:	d00a      	beq.n	800475c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff80 	bl	8004650 <ptr_to_mem>
 8004750:	4604      	mov	r4, r0
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ff8e 	bl	8004674 <mem_to_ptr>
 8004758:	4603      	mov	r3, r0
 800475a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	885b      	ldrh	r3, [r3, #2]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ff75 	bl	8004650 <ptr_to_mem>
 8004766:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	429a      	cmp	r2, r3
 800476e:	d01f      	beq.n	80047b0 <plug_holes+0x118>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	791b      	ldrb	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d11b      	bne.n	80047b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004778:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <plug_holes+0x140>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	429a      	cmp	r2, r3
 8004780:	d102      	bne.n	8004788 <plug_holes+0xf0>
      lfree = pmem;
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <plug_holes+0x140>)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004798:	d00a      	beq.n	80047b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff ff56 	bl	8004650 <ptr_to_mem>
 80047a4:	4604      	mov	r4, r0
 80047a6:	68b8      	ldr	r0, [r7, #8]
 80047a8:	f7ff ff64 	bl	8004674 <mem_to_ptr>
 80047ac:	4603      	mov	r3, r0
 80047ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd90      	pop	{r4, r7, pc}
 80047b8:	20000104 	.word	0x20000104
 80047bc:	0800fb64 	.word	0x0800fb64
 80047c0:	0800fb94 	.word	0x0800fb94
 80047c4:	0800fbac 	.word	0x0800fbac
 80047c8:	20000108 	.word	0x20000108
 80047cc:	0800fbd4 	.word	0x0800fbd4
 80047d0:	0800fbf0 	.word	0x0800fbf0
 80047d4:	0800fc0c 	.word	0x0800fc0c
 80047d8:	2000010c 	.word	0x2000010c

080047dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80047e2:	4b18      	ldr	r3, [pc, #96]	; (8004844 <mem_init+0x68>)
 80047e4:	3303      	adds	r3, #3
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <mem_init+0x6c>)
 80047ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80047f0:	4b15      	ldr	r3, [pc, #84]	; (8004848 <mem_init+0x6c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80047fc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800480a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800480e:	f7ff ff1f 	bl	8004650 <ptr_to_mem>
 8004812:	4603      	mov	r3, r0
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <mem_init+0x70>)
 8004816:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <mem_init+0x70>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <mem_init+0x70>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004828:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <mem_init+0x70>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004832:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <mem_init+0x6c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <mem_init+0x74>)
 800483a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200034c8 	.word	0x200034c8
 8004848:	20000104 	.word	0x20000104
 800484c:	20000108 	.word	0x20000108
 8004850:	2000010c 	.word	0x2000010c

08004854 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff ff09 	bl	8004674 <mem_to_ptr>
 8004862:	4603      	mov	r3, r0
 8004864:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fef0 	bl	8004650 <ptr_to_mem>
 8004870:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	885b      	ldrh	r3, [r3, #2]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff feea 	bl	8004650 <ptr_to_mem>
 800487c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004886:	d818      	bhi.n	80048ba <mem_link_valid+0x66>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	885b      	ldrh	r3, [r3, #2]
 800488c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004890:	d813      	bhi.n	80048ba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004896:	8afa      	ldrh	r2, [r7, #22]
 8004898:	429a      	cmp	r2, r3
 800489a:	d004      	beq.n	80048a6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	8afa      	ldrh	r2, [r7, #22]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d109      	bne.n	80048ba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80048a6:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <mem_link_valid+0x74>)
 80048a8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d006      	beq.n	80048be <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	885b      	ldrh	r3, [r3, #2]
 80048b4:	8afa      	ldrh	r2, [r7, #22]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d001      	beq.n	80048be <mem_link_valid+0x6a>
    return 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e000      	b.n	80048c0 <mem_link_valid+0x6c>
  }
  return 1;
 80048be:	2301      	movs	r3, #1
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000108 	.word	0x20000108

080048cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d04c      	beq.n	8004974 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80048e4:	4b25      	ldr	r3, [pc, #148]	; (800497c <mem_free+0xb0>)
 80048e6:	f240 2273 	movw	r2, #627	; 0x273
 80048ea:	4925      	ldr	r1, [pc, #148]	; (8004980 <mem_free+0xb4>)
 80048ec:	4825      	ldr	r0, [pc, #148]	; (8004984 <mem_free+0xb8>)
 80048ee:	f009 ff1b 	bl	800e728 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80048f2:	e040      	b.n	8004976 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b08      	subs	r3, #8
 80048f8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <mem_free+0xbc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	429a      	cmp	r2, r3
 8004902:	d306      	bcc.n	8004912 <mem_free+0x46>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f103 020c 	add.w	r2, r3, #12
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <mem_free+0xc0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d907      	bls.n	8004922 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004912:	4b1a      	ldr	r3, [pc, #104]	; (800497c <mem_free+0xb0>)
 8004914:	f240 227f 	movw	r2, #639	; 0x27f
 8004918:	491d      	ldr	r1, [pc, #116]	; (8004990 <mem_free+0xc4>)
 800491a:	481a      	ldr	r0, [pc, #104]	; (8004984 <mem_free+0xb8>)
 800491c:	f009 ff04 	bl	800e728 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004920:	e029      	b.n	8004976 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	791b      	ldrb	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d107      	bne.n	800493a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800492a:	4b14      	ldr	r3, [pc, #80]	; (800497c <mem_free+0xb0>)
 800492c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004930:	4918      	ldr	r1, [pc, #96]	; (8004994 <mem_free+0xc8>)
 8004932:	4814      	ldr	r0, [pc, #80]	; (8004984 <mem_free+0xb8>)
 8004934:	f009 fef8 	bl	800e728 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004938:	e01d      	b.n	8004976 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff ff8a 	bl	8004854 <mem_link_valid>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004946:	4b0d      	ldr	r3, [pc, #52]	; (800497c <mem_free+0xb0>)
 8004948:	f240 2295 	movw	r2, #661	; 0x295
 800494c:	4912      	ldr	r1, [pc, #72]	; (8004998 <mem_free+0xcc>)
 800494e:	480d      	ldr	r0, [pc, #52]	; (8004984 <mem_free+0xb8>)
 8004950:	f009 feea 	bl	800e728 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004954:	e00f      	b.n	8004976 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <mem_free+0xd0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	429a      	cmp	r2, r3
 8004964:	d202      	bcs.n	800496c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004966:	4a0d      	ldr	r2, [pc, #52]	; (800499c <mem_free+0xd0>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fe93 	bl	8004698 <plug_holes>
 8004972:	e000      	b.n	8004976 <mem_free+0xaa>
    return;
 8004974:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	0800fb64 	.word	0x0800fb64
 8004980:	0800fc38 	.word	0x0800fc38
 8004984:	0800fbac 	.word	0x0800fbac
 8004988:	20000104 	.word	0x20000104
 800498c:	20000108 	.word	0x20000108
 8004990:	0800fc5c 	.word	0x0800fc5c
 8004994:	0800fc78 	.word	0x0800fc78
 8004998:	0800fca0 	.word	0x0800fca0
 800499c:	2000010c 	.word	0x2000010c

080049a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80049ac:	887b      	ldrh	r3, [r7, #2]
 80049ae:	3303      	adds	r3, #3
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f023 0303 	bic.w	r3, r3, #3
 80049b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80049b8:	8bfb      	ldrh	r3, [r7, #30]
 80049ba:	2b0b      	cmp	r3, #11
 80049bc:	d801      	bhi.n	80049c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80049be:	230c      	movs	r3, #12
 80049c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80049c2:	8bfb      	ldrh	r3, [r7, #30]
 80049c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80049c8:	d803      	bhi.n	80049d2 <mem_trim+0x32>
 80049ca:	8bfa      	ldrh	r2, [r7, #30]
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d201      	bcs.n	80049d6 <mem_trim+0x36>
    return NULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e0cc      	b.n	8004b70 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80049d6:	4b68      	ldr	r3, [pc, #416]	; (8004b78 <mem_trim+0x1d8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d304      	bcc.n	80049ea <mem_trim+0x4a>
 80049e0:	4b66      	ldr	r3, [pc, #408]	; (8004b7c <mem_trim+0x1dc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d306      	bcc.n	80049f8 <mem_trim+0x58>
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <mem_trim+0x1e0>)
 80049ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 80049f0:	4964      	ldr	r1, [pc, #400]	; (8004b84 <mem_trim+0x1e4>)
 80049f2:	4865      	ldr	r0, [pc, #404]	; (8004b88 <mem_trim+0x1e8>)
 80049f4:	f009 fe98 	bl	800e728 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80049f8:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <mem_trim+0x1d8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d304      	bcc.n	8004a0c <mem_trim+0x6c>
 8004a02:	4b5e      	ldr	r3, [pc, #376]	; (8004b7c <mem_trim+0x1dc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d301      	bcc.n	8004a10 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	e0af      	b.n	8004b70 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3b08      	subs	r3, #8
 8004a14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004a16:	69b8      	ldr	r0, [r7, #24]
 8004a18:	f7ff fe2c 	bl	8004674 <mem_to_ptr>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	881a      	ldrh	r2, [r3, #0]
 8004a24:	8afb      	ldrh	r3, [r7, #22]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b08      	subs	r3, #8
 8004a2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004a2e:	8bfa      	ldrh	r2, [r7, #30]
 8004a30:	8abb      	ldrh	r3, [r7, #20]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d906      	bls.n	8004a44 <mem_trim+0xa4>
 8004a36:	4b52      	ldr	r3, [pc, #328]	; (8004b80 <mem_trim+0x1e0>)
 8004a38:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004a3c:	4953      	ldr	r1, [pc, #332]	; (8004b8c <mem_trim+0x1ec>)
 8004a3e:	4852      	ldr	r0, [pc, #328]	; (8004b88 <mem_trim+0x1e8>)
 8004a40:	f009 fe72 	bl	800e728 <iprintf>
  if (newsize > size) {
 8004a44:	8bfa      	ldrh	r2, [r7, #30]
 8004a46:	8abb      	ldrh	r3, [r7, #20]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d901      	bls.n	8004a50 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e08f      	b.n	8004b70 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004a50:	8bfa      	ldrh	r2, [r7, #30]
 8004a52:	8abb      	ldrh	r3, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d101      	bne.n	8004a5c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	e089      	b.n	8004b70 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fdf5 	bl	8004650 <ptr_to_mem>
 8004a66:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	791b      	ldrb	r3, [r3, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d13f      	bne.n	8004af0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004a78:	d106      	bne.n	8004a88 <mem_trim+0xe8>
 8004a7a:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <mem_trim+0x1e0>)
 8004a7c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004a80:	4943      	ldr	r1, [pc, #268]	; (8004b90 <mem_trim+0x1f0>)
 8004a82:	4841      	ldr	r0, [pc, #260]	; (8004b88 <mem_trim+0x1e8>)
 8004a84:	f009 fe50 	bl	800e728 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004a8e:	8afa      	ldrh	r2, [r7, #22]
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	4413      	add	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3308      	adds	r3, #8
 8004a98:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004a9a:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <mem_trim+0x1f4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d106      	bne.n	8004ab2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004aa4:	89fb      	ldrh	r3, [r7, #14]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fdd2 	bl	8004650 <ptr_to_mem>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4a39      	ldr	r2, [pc, #228]	; (8004b94 <mem_trim+0x1f4>)
 8004ab0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff fdcb 	bl	8004650 <ptr_to_mem>
 8004aba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	89ba      	ldrh	r2, [r7, #12]
 8004ac6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	8afa      	ldrh	r2, [r7, #22]
 8004acc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	89fa      	ldrh	r2, [r7, #14]
 8004ad2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004adc:	d047      	beq.n	8004b6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fdb4 	bl	8004650 <ptr_to_mem>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	8053      	strh	r3, [r2, #2]
 8004aee:	e03e      	b.n	8004b6e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004af0:	8bfb      	ldrh	r3, [r7, #30]
 8004af2:	f103 0214 	add.w	r2, r3, #20
 8004af6:	8abb      	ldrh	r3, [r7, #20]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d838      	bhi.n	8004b6e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004afc:	8afa      	ldrh	r2, [r7, #22]
 8004afe:	8bfb      	ldrh	r3, [r7, #30]
 8004b00:	4413      	add	r3, r2
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3308      	adds	r3, #8
 8004b06:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b10:	d106      	bne.n	8004b20 <mem_trim+0x180>
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <mem_trim+0x1e0>)
 8004b14:	f240 3216 	movw	r2, #790	; 0x316
 8004b18:	491d      	ldr	r1, [pc, #116]	; (8004b90 <mem_trim+0x1f0>)
 8004b1a:	481b      	ldr	r0, [pc, #108]	; (8004b88 <mem_trim+0x1e8>)
 8004b1c:	f009 fe04 	bl	800e728 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004b20:	89fb      	ldrh	r3, [r7, #14]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fd94 	bl	8004650 <ptr_to_mem>
 8004b28:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004b2a:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <mem_trim+0x1f4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d202      	bcs.n	8004b3a <mem_trim+0x19a>
      lfree = mem2;
 8004b34:	4a17      	ldr	r2, [pc, #92]	; (8004b94 <mem_trim+0x1f4>)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	881a      	ldrh	r2, [r3, #0]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	8afa      	ldrh	r2, [r7, #22]
 8004b4c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	89fa      	ldrh	r2, [r7, #14]
 8004b52:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004b5c:	d007      	beq.n	8004b6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fd74 	bl	8004650 <ptr_to_mem>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	89fb      	ldrh	r3, [r7, #14]
 8004b6c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004b6e:	687b      	ldr	r3, [r7, #4]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3720      	adds	r7, #32
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000104 	.word	0x20000104
 8004b7c:	20000108 	.word	0x20000108
 8004b80:	0800fb64 	.word	0x0800fb64
 8004b84:	0800fcd4 	.word	0x0800fcd4
 8004b88:	0800fbac 	.word	0x0800fbac
 8004b8c:	0800fcec 	.word	0x0800fcec
 8004b90:	0800fd0c 	.word	0x0800fd0c
 8004b94:	2000010c 	.word	0x2000010c

08004b98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <mem_malloc+0x14>
    return NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e0d9      	b.n	8004d60 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	3303      	adds	r3, #3
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004bb8:	8bbb      	ldrh	r3, [r7, #28]
 8004bba:	2b0b      	cmp	r3, #11
 8004bbc:	d801      	bhi.n	8004bc2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004bc2:	8bbb      	ldrh	r3, [r7, #28]
 8004bc4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004bc8:	d803      	bhi.n	8004bd2 <mem_malloc+0x3a>
 8004bca:	8bba      	ldrh	r2, [r7, #28]
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d201      	bcs.n	8004bd6 <mem_malloc+0x3e>
    return NULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e0c4      	b.n	8004d60 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004bd6:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <mem_malloc+0x1d0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fd4a 	bl	8004674 <mem_to_ptr>
 8004be0:	4603      	mov	r3, r0
 8004be2:	83fb      	strh	r3, [r7, #30]
 8004be4:	e0b4      	b.n	8004d50 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004be6:	8bfb      	ldrh	r3, [r7, #30]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fd31 	bl	8004650 <ptr_to_mem>
 8004bee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 80a4 	bne.w	8004d42 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	8bfb      	ldrh	r3, [r7, #30]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f1a3 0208 	sub.w	r2, r3, #8
 8004c08:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	f0c0 8099 	bcc.w	8004d42 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	8bfb      	ldrh	r3, [r7, #30]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f1a3 0208 	sub.w	r2, r3, #8
 8004c1e:	8bbb      	ldrh	r3, [r7, #28]
 8004c20:	3314      	adds	r3, #20
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d333      	bcc.n	8004c8e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004c26:	8bfa      	ldrh	r2, [r7, #30]
 8004c28:	8bbb      	ldrh	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3308      	adds	r3, #8
 8004c30:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004c32:	8a7b      	ldrh	r3, [r7, #18]
 8004c34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004c38:	d106      	bne.n	8004c48 <mem_malloc+0xb0>
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <mem_malloc+0x1d4>)
 8004c3c:	f240 3287 	movw	r2, #903	; 0x387
 8004c40:	494b      	ldr	r1, [pc, #300]	; (8004d70 <mem_malloc+0x1d8>)
 8004c42:	484c      	ldr	r0, [pc, #304]	; (8004d74 <mem_malloc+0x1dc>)
 8004c44:	f009 fd70 	bl	800e728 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004c48:	8a7b      	ldrh	r3, [r7, #18]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fd00 	bl	8004650 <ptr_to_mem>
 8004c50:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8bfa      	ldrh	r2, [r7, #30]
 8004c64:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	8a7a      	ldrh	r2, [r7, #18]
 8004c6a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004c7a:	d00b      	beq.n	8004c94 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fce5 	bl	8004650 <ptr_to_mem>
 8004c86:	4602      	mov	r2, r0
 8004c88:	8a7b      	ldrh	r3, [r7, #18]
 8004c8a:	8053      	strh	r3, [r2, #2]
 8004c8c:	e002      	b.n	8004c94 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2201      	movs	r2, #1
 8004c92:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004c94:	4b34      	ldr	r3, [pc, #208]	; (8004d68 <mem_malloc+0x1d0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d127      	bne.n	8004cee <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004c9e:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <mem_malloc+0x1d0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004ca4:	e005      	b.n	8004cb2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fcd0 	bl	8004650 <ptr_to_mem>
 8004cb0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	791b      	ldrb	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d004      	beq.n	8004cc4 <mem_malloc+0x12c>
 8004cba:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <mem_malloc+0x1e0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1f0      	bne.n	8004ca6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <mem_malloc+0x1d0>)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004cca:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <mem_malloc+0x1d0>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <mem_malloc+0x1e0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d00b      	beq.n	8004cee <mem_malloc+0x156>
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <mem_malloc+0x1d0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	791b      	ldrb	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <mem_malloc+0x156>
 8004ce0:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <mem_malloc+0x1d4>)
 8004ce2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004ce6:	4925      	ldr	r1, [pc, #148]	; (8004d7c <mem_malloc+0x1e4>)
 8004ce8:	4822      	ldr	r0, [pc, #136]	; (8004d74 <mem_malloc+0x1dc>)
 8004cea:	f009 fd1d 	bl	800e728 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004cee:	8bba      	ldrh	r2, [r7, #28]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <mem_malloc+0x1e0>)
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d906      	bls.n	8004d0c <mem_malloc+0x174>
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <mem_malloc+0x1d4>)
 8004d00:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004d04:	491e      	ldr	r1, [pc, #120]	; (8004d80 <mem_malloc+0x1e8>)
 8004d06:	481b      	ldr	r0, [pc, #108]	; (8004d74 <mem_malloc+0x1dc>)
 8004d08:	f009 fd0e 	bl	800e728 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <mem_malloc+0x18c>
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <mem_malloc+0x1d4>)
 8004d18:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004d1c:	4919      	ldr	r1, [pc, #100]	; (8004d84 <mem_malloc+0x1ec>)
 8004d1e:	4815      	ldr	r0, [pc, #84]	; (8004d74 <mem_malloc+0x1dc>)
 8004d20:	f009 fd02 	bl	800e728 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d006      	beq.n	8004d3c <mem_malloc+0x1a4>
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <mem_malloc+0x1d4>)
 8004d30:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004d34:	4914      	ldr	r1, [pc, #80]	; (8004d88 <mem_malloc+0x1f0>)
 8004d36:	480f      	ldr	r0, [pc, #60]	; (8004d74 <mem_malloc+0x1dc>)
 8004d38:	f009 fcf6 	bl	800e728 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3308      	adds	r3, #8
 8004d40:	e00e      	b.n	8004d60 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004d42:	8bfb      	ldrh	r3, [r7, #30]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fc83 	bl	8004650 <ptr_to_mem>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004d50:	8bfa      	ldrh	r2, [r7, #30]
 8004d52:	8bbb      	ldrh	r3, [r7, #28]
 8004d54:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	f4ff af44 	bcc.w	8004be6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	2000010c 	.word	0x2000010c
 8004d6c:	0800fb64 	.word	0x0800fb64
 8004d70:	0800fd0c 	.word	0x0800fd0c
 8004d74:	0800fbac 	.word	0x0800fbac
 8004d78:	20000108 	.word	0x20000108
 8004d7c:	0800fd20 	.word	0x0800fd20
 8004d80:	0800fd3c 	.word	0x0800fd3c
 8004d84:	0800fd6c 	.word	0x0800fd6c
 8004d88:	0800fd9c 	.word	0x0800fd9c

08004d8c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	3303      	adds	r3, #3
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	e011      	b.n	8004dd2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4413      	add	r3, r2
 8004dca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	885b      	ldrh	r3, [r3, #2]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	dbe7      	blt.n	8004dae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004df2:	2300      	movs	r3, #0
 8004df4:	80fb      	strh	r3, [r7, #6]
 8004df6:	e009      	b.n	8004e0c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <memp_init+0x30>)
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ffc3 	bl	8004d8c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	80fb      	strh	r3, [r7, #6]
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d9f2      	bls.n	8004df8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004e12:	bf00      	nop
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	0801256c 	.word	0x0801256c

08004e20 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <do_memp_malloc_pool+0x38>
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <do_memp_malloc_pool+0x48>)
 8004e4c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004e50:	4906      	ldr	r1, [pc, #24]	; (8004e6c <do_memp_malloc_pool+0x4c>)
 8004e52:	4807      	ldr	r0, [pc, #28]	; (8004e70 <do_memp_malloc_pool+0x50>)
 8004e54:	f009 fc68 	bl	800e728 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	e000      	b.n	8004e5e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	0800fdc0 	.word	0x0800fdc0
 8004e6c:	0800fdf0 	.word	0x0800fdf0
 8004e70:	0800fe14 	.word	0x0800fe14

08004e74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d908      	bls.n	8004e96 <memp_malloc+0x22>
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <memp_malloc+0x3c>)
 8004e86:	f240 1257 	movw	r2, #343	; 0x157
 8004e8a:	490a      	ldr	r1, [pc, #40]	; (8004eb4 <memp_malloc+0x40>)
 8004e8c:	480a      	ldr	r0, [pc, #40]	; (8004eb8 <memp_malloc+0x44>)
 8004e8e:	f009 fc4b 	bl	800e728 <iprintf>
 8004e92:	2300      	movs	r3, #0
 8004e94:	e008      	b.n	8004ea8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <memp_malloc+0x48>)
 8004e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff ffbe 	bl	8004e20 <do_memp_malloc_pool>
 8004ea4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	0800fdc0 	.word	0x0800fdc0
 8004eb4:	0800fe50 	.word	0x0800fe50
 8004eb8:	0800fe14 	.word	0x0800fe14
 8004ebc:	0801256c 	.word	0x0801256c

08004ec0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <do_memp_free_pool+0x22>
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <do_memp_free_pool+0x40>)
 8004ed6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004eda:	490a      	ldr	r1, [pc, #40]	; (8004f04 <do_memp_free_pool+0x44>)
 8004edc:	480a      	ldr	r0, [pc, #40]	; (8004f08 <do_memp_free_pool+0x48>)
 8004ede:	f009 fc23 	bl	800e728 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	0800fdc0 	.word	0x0800fdc0
 8004f04:	0800fe70 	.word	0x0800fe70
 8004f08:	0800fe14 	.word	0x0800fe14

08004f0c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	6039      	str	r1, [r7, #0]
 8004f16:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d907      	bls.n	8004f2e <memp_free+0x22>
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <memp_free+0x44>)
 8004f20:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004f24:	490b      	ldr	r1, [pc, #44]	; (8004f54 <memp_free+0x48>)
 8004f26:	480c      	ldr	r0, [pc, #48]	; (8004f58 <memp_free+0x4c>)
 8004f28:	f009 fbfe 	bl	800e728 <iprintf>
 8004f2c:	e00c      	b.n	8004f48 <memp_free+0x3c>

  if (mem == NULL) {
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <memp_free+0x50>)
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ffbe 	bl	8004ec0 <do_memp_free_pool>
 8004f44:	e000      	b.n	8004f48 <memp_free+0x3c>
    return;
 8004f46:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	0800fdc0 	.word	0x0800fdc0
 8004f54:	0800fe90 	.word	0x0800fe90
 8004f58:	0800fe14 	.word	0x0800fe14
 8004f5c:	0801256c 	.word	0x0801256c

08004f60 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d108      	bne.n	8004f96 <netif_add+0x26>
 8004f84:	4b57      	ldr	r3, [pc, #348]	; (80050e4 <netif_add+0x174>)
 8004f86:	f240 1227 	movw	r2, #295	; 0x127
 8004f8a:	4957      	ldr	r1, [pc, #348]	; (80050e8 <netif_add+0x178>)
 8004f8c:	4857      	ldr	r0, [pc, #348]	; (80050ec <netif_add+0x17c>)
 8004f8e:	f009 fbcb 	bl	800e728 <iprintf>
 8004f92:	2300      	movs	r3, #0
 8004f94:	e0a2      	b.n	80050dc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <netif_add+0x3e>
 8004f9c:	4b51      	ldr	r3, [pc, #324]	; (80050e4 <netif_add+0x174>)
 8004f9e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004fa2:	4953      	ldr	r1, [pc, #332]	; (80050f0 <netif_add+0x180>)
 8004fa4:	4851      	ldr	r0, [pc, #324]	; (80050ec <netif_add+0x17c>)
 8004fa6:	f009 fbbf 	bl	800e728 <iprintf>
 8004faa:	2300      	movs	r3, #0
 8004fac:	e096      	b.n	80050dc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004fb4:	4b4f      	ldr	r3, [pc, #316]	; (80050f4 <netif_add+0x184>)
 8004fb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004fbe:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <netif_add+0x184>)
 8004fc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004fc8:	4b4a      	ldr	r3, [pc, #296]	; (80050f4 <netif_add+0x184>)
 8004fca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4a45      	ldr	r2, [pc, #276]	; (80050f8 <netif_add+0x188>)
 8004fe2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8004ffe:	4b3f      	ldr	r3, [pc, #252]	; (80050fc <netif_add+0x18c>)
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800500c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68b9      	ldr	r1, [r7, #8]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f913 	bl	8005240 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	4798      	blx	r3
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <netif_add+0xba>
    return NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	e058      	b.n	80050dc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005030:	2bff      	cmp	r3, #255	; 0xff
 8005032:	d103      	bne.n	800503c <netif_add+0xcc>
        netif->num = 0;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005040:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <netif_add+0x190>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e02b      	b.n	80050a0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	429a      	cmp	r2, r3
 800504e:	d106      	bne.n	800505e <netif_add+0xee>
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <netif_add+0x174>)
 8005052:	f240 128b 	movw	r2, #395	; 0x18b
 8005056:	492b      	ldr	r1, [pc, #172]	; (8005104 <netif_add+0x194>)
 8005058:	4824      	ldr	r0, [pc, #144]	; (80050ec <netif_add+0x17c>)
 800505a:	f009 fb65 	bl	800e728 <iprintf>
        num_netifs++;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3301      	adds	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2bff      	cmp	r3, #255	; 0xff
 8005068:	dd06      	ble.n	8005078 <netif_add+0x108>
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <netif_add+0x174>)
 800506c:	f240 128d 	movw	r2, #397	; 0x18d
 8005070:	4925      	ldr	r1, [pc, #148]	; (8005108 <netif_add+0x198>)
 8005072:	481e      	ldr	r0, [pc, #120]	; (80050ec <netif_add+0x17c>)
 8005074:	f009 fb58 	bl	800e728 <iprintf>
        if (netif2->num == netif->num) {
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005084:	429a      	cmp	r2, r3
 8005086:	d108      	bne.n	800509a <netif_add+0x12a>
          netif->num++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800508e:	3301      	adds	r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8005098:	e005      	b.n	80050a6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1d0      	bne.n	8005048 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1be      	bne.n	800502a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050b2:	2bfe      	cmp	r3, #254	; 0xfe
 80050b4:	d103      	bne.n	80050be <netif_add+0x14e>
    netif_num = 0;
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <netif_add+0x18c>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e006      	b.n	80050cc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80050c4:	3301      	adds	r3, #1
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <netif_add+0x18c>)
 80050ca:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <netif_add+0x190>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80050d4:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <netif_add+0x190>)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	0800feac 	.word	0x0800feac
 80050e8:	0800ff40 	.word	0x0800ff40
 80050ec:	0800fefc 	.word	0x0800fefc
 80050f0:	0800ff5c 	.word	0x0800ff5c
 80050f4:	080125d0 	.word	0x080125d0
 80050f8:	08005453 	.word	0x08005453
 80050fc:	20000134 	.word	0x20000134
 8005100:	20008ba4 	.word	0x20008ba4
 8005104:	0800ff80 	.word	0x0800ff80
 8005108:	0800ff94 	.word	0x0800ff94

0800510c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005116:	6839      	ldr	r1, [r7, #0]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f002 fb81 	bl	8007820 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f006 ffb1 	bl	800c088 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <netif_do_set_ipaddr+0x20>
 8005142:	4b1d      	ldr	r3, [pc, #116]	; (80051b8 <netif_do_set_ipaddr+0x88>)
 8005144:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005148:	491c      	ldr	r1, [pc, #112]	; (80051bc <netif_do_set_ipaddr+0x8c>)
 800514a:	481d      	ldr	r0, [pc, #116]	; (80051c0 <netif_do_set_ipaddr+0x90>)
 800514c:	f009 faec 	bl	800e728 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <netif_do_set_ipaddr+0x34>
 8005156:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <netif_do_set_ipaddr+0x88>)
 8005158:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800515c:	4917      	ldr	r1, [pc, #92]	; (80051bc <netif_do_set_ipaddr+0x8c>)
 800515e:	4818      	ldr	r0, [pc, #96]	; (80051c0 <netif_do_set_ipaddr+0x90>)
 8005160:	f009 fae2 	bl	800e728 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3304      	adds	r3, #4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d01c      	beq.n	80051ac <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3304      	adds	r3, #4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005182:	f107 0314 	add.w	r3, r7, #20
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff ffbf 	bl	800510c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <netif_do_set_ipaddr+0x6a>
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	e000      	b.n	800519c <netif_do_set_ipaddr+0x6c>
 800519a:	2300      	movs	r3, #0
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80051a0:	2101      	movs	r1, #1
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f8d2 	bl	800534c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	0800feac 	.word	0x0800feac
 80051bc:	0800ffc4 	.word	0x0800ffc4
 80051c0:	0800fefc 	.word	0x0800fefc

080051c4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3308      	adds	r3, #8
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d00a      	beq.n	80051f4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <netif_do_set_netmask+0x26>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	e000      	b.n	80051ec <netif_do_set_netmask+0x28>
 80051ea:	2300      	movs	r3, #0
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80051f0:	2301      	movs	r3, #1
 80051f2:	e000      	b.n	80051f6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	330c      	adds	r3, #12
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d00a      	beq.n	8005232 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <netif_do_set_gw+0x26>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	e000      	b.n	800522a <netif_do_set_gw+0x28>
 8005228:	2300      	movs	r3, #0
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800525c:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <netif_set_addr+0x90>)
 800525e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <netif_set_addr+0x90>)
 8005268:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005270:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <netif_set_addr+0x90>)
 8005272:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <netif_set_addr+0x42>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <netif_set_addr+0x46>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <netif_set_addr+0x48>
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
  if (remove) {
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005290:	f107 0310 	add.w	r3, r7, #16
 8005294:	461a      	mov	r2, r3
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff ff49 	bl	8005130 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ff8e 	bl	80051c4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ffa8 	bl	8005202 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80052b8:	f107 0310 	add.w	r3, r7, #16
 80052bc:	461a      	mov	r2, r3
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff ff35 	bl	8005130 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80052c6:	bf00      	nop
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	080125d0 	.word	0x080125d0

080052d4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80052dc:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <netif_set_default+0x1c>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20008ba8 	.word	0x20008ba8

080052f4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <netif_set_up+0x1e>
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <netif_set_up+0x4c>)
 8005304:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005308:	490e      	ldr	r1, [pc, #56]	; (8005344 <netif_set_up+0x50>)
 800530a:	480f      	ldr	r0, [pc, #60]	; (8005348 <netif_set_up+0x54>)
 800530c:	f009 fa0c 	bl	800e728 <iprintf>
 8005310:	e013      	b.n	800533a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10c      	bne.n	800533a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005332:	2103      	movs	r1, #3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f809 	bl	800534c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	0800feac 	.word	0x0800feac
 8005344:	08010034 	.word	0x08010034
 8005348:	0800fefc 	.word	0x0800fefc

0800534c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <netif_issue_reports+0x20>
 800535e:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <netif_issue_reports+0x74>)
 8005360:	f240 326d 	movw	r2, #877	; 0x36d
 8005364:	4917      	ldr	r1, [pc, #92]	; (80053c4 <netif_issue_reports+0x78>)
 8005366:	4818      	ldr	r0, [pc, #96]	; (80053c8 <netif_issue_reports+0x7c>)
 8005368:	f009 f9de 	bl	800e728 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01e      	beq.n	80053b8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005380:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d017      	beq.n	80053b8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d013      	beq.n	80053ba <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00e      	beq.n	80053ba <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f007 fdd3 	bl	800cf5c <etharp_request>
 80053b6:	e000      	b.n	80053ba <netif_issue_reports+0x6e>
    return;
 80053b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	0800feac 	.word	0x0800feac
 80053c4:	08010050 	.word	0x08010050
 80053c8:	0800fefc 	.word	0x0800fefc

080053cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <netif_set_down+0x1e>
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <netif_set_down+0x58>)
 80053dc:	f240 329b 	movw	r2, #923	; 0x39b
 80053e0:	4911      	ldr	r1, [pc, #68]	; (8005428 <netif_set_down+0x5c>)
 80053e2:	4812      	ldr	r0, [pc, #72]	; (800542c <netif_set_down+0x60>)
 80053e4:	f009 f9a0 	bl	800e728 <iprintf>
 80053e8:	e019      	b.n	800541e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f007 f95d 	bl	800c6d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	0800feac 	.word	0x0800feac
 8005428:	08010074 	.word	0x08010074
 800542c:	0800fefc 	.word	0x0800fefc

08005430 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	61da      	str	r2, [r3, #28]
  }
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800545e:	f06f 030b 	mvn.w	r3, #11
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005480:	4b0d      	ldr	r3, [pc, #52]	; (80054b8 <netif_get_by_index+0x48>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e00c      	b.n	80054a2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800548e:	3301      	adds	r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	79fa      	ldrb	r2, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d101      	bne.n	800549c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	e006      	b.n	80054aa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ef      	bne.n	8005488 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20008ba4 	.word	0x20008ba4

080054bc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <pbuf_free_ooseq+0x38>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <pbuf_free_ooseq+0x3c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	e00a      	b.n	80054e6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f002 f9df 	bl	800789c <tcp_free_ooseq>
      return;
 80054de:	e005      	b.n	80054ec <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f1      	bne.n	80054d0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20008bac 	.word	0x20008bac
 80054f8:	20008bb4 	.word	0x20008bb4

080054fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005500:	4b03      	ldr	r3, [pc, #12]	; (8005510 <pbuf_pool_is_empty+0x14>)
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20008bac 	.word	0x20008bac

08005514 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	460b      	mov	r3, r1
 8005524:	80fb      	strh	r3, [r7, #6]
 8005526:	4613      	mov	r3, r2
 8005528:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88ba      	ldrh	r2, [r7, #4]
 8005540:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005542:	8b3b      	ldrh	r3, [r7, #24]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	7f3a      	ldrb	r2, [r7, #28]
 800554e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	73da      	strb	r2, [r3, #15]
}
 800555c:	bf00      	nop
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08c      	sub	sp, #48	; 0x30
 800556c:	af02      	add	r7, sp, #8
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
 8005572:	460b      	mov	r3, r1
 8005574:	80bb      	strh	r3, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800557e:	887b      	ldrh	r3, [r7, #2]
 8005580:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005584:	d07f      	beq.n	8005686 <pbuf_alloc+0x11e>
 8005586:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800558a:	f300 80c8 	bgt.w	800571e <pbuf_alloc+0x1b6>
 800558e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005592:	d010      	beq.n	80055b6 <pbuf_alloc+0x4e>
 8005594:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005598:	f300 80c1 	bgt.w	800571e <pbuf_alloc+0x1b6>
 800559c:	2b01      	cmp	r3, #1
 800559e:	d002      	beq.n	80055a6 <pbuf_alloc+0x3e>
 80055a0:	2b41      	cmp	r3, #65	; 0x41
 80055a2:	f040 80bc 	bne.w	800571e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	88bb      	ldrh	r3, [r7, #4]
 80055aa:	4619      	mov	r1, r3
 80055ac:	2000      	movs	r0, #0
 80055ae:	f000 f8d1 	bl	8005754 <pbuf_alloc_reference>
 80055b2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80055b4:	e0bd      	b.n	8005732 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80055be:	88bb      	ldrh	r3, [r7, #4]
 80055c0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80055c2:	2008      	movs	r0, #8
 80055c4:	f7ff fc56 	bl	8004e74 <memp_malloc>
 80055c8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d109      	bne.n	80055e4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80055d0:	f7ff ff94 	bl	80054fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80055da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055dc:	f000 faa8 	bl	8005b30 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e0a7      	b.n	8005734 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80055e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80055e6:	3303      	adds	r3, #3
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8b7a      	ldrh	r2, [r7, #26]
 80055f8:	4293      	cmp	r3, r2
 80055fa:	bf28      	it	cs
 80055fc:	4613      	movcs	r3, r2
 80055fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005602:	3310      	adds	r3, #16
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	3303      	adds	r3, #3
 800560a:	f023 0303 	bic.w	r3, r3, #3
 800560e:	4618      	mov	r0, r3
 8005610:	89f9      	ldrh	r1, [r7, #14]
 8005612:	8b7a      	ldrh	r2, [r7, #26]
 8005614:	2300      	movs	r3, #0
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	887b      	ldrh	r3, [r7, #2]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	460b      	mov	r3, r1
 800561e:	4601      	mov	r1, r0
 8005620:	6938      	ldr	r0, [r7, #16]
 8005622:	f7ff ff77 	bl	8005514 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <pbuf_alloc+0xd8>
 8005632:	4b42      	ldr	r3, [pc, #264]	; (800573c <pbuf_alloc+0x1d4>)
 8005634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005638:	4941      	ldr	r1, [pc, #260]	; (8005740 <pbuf_alloc+0x1d8>)
 800563a:	4842      	ldr	r0, [pc, #264]	; (8005744 <pbuf_alloc+0x1dc>)
 800563c:	f009 f874 	bl	800e728 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005642:	3303      	adds	r3, #3
 8005644:	f023 0303 	bic.w	r3, r3, #3
 8005648:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800564c:	d106      	bne.n	800565c <pbuf_alloc+0xf4>
 800564e:	4b3b      	ldr	r3, [pc, #236]	; (800573c <pbuf_alloc+0x1d4>)
 8005650:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005654:	493c      	ldr	r1, [pc, #240]	; (8005748 <pbuf_alloc+0x1e0>)
 8005656:	483b      	ldr	r0, [pc, #236]	; (8005744 <pbuf_alloc+0x1dc>)
 8005658:	f009 f866 	bl	800e728 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
 8005666:	e002      	b.n	800566e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005672:	8b7a      	ldrh	r2, [r7, #26]
 8005674:	89fb      	ldrh	r3, [r7, #14]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800567e:	8b7b      	ldrh	r3, [r7, #26]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d19e      	bne.n	80055c2 <pbuf_alloc+0x5a>
      break;
 8005684:	e055      	b.n	8005732 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005688:	3303      	adds	r3, #3
 800568a:	b29b      	uxth	r3, r3
 800568c:	f023 0303 	bic.w	r3, r3, #3
 8005690:	b29a      	uxth	r2, r3
 8005692:	88bb      	ldrh	r3, [r7, #4]
 8005694:	3303      	adds	r3, #3
 8005696:	b29b      	uxth	r3, r3
 8005698:	f023 0303 	bic.w	r3, r3, #3
 800569c:	b29b      	uxth	r3, r3
 800569e:	4413      	add	r3, r2
 80056a0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80056a2:	8b3b      	ldrh	r3, [r7, #24]
 80056a4:	3310      	adds	r3, #16
 80056a6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80056a8:	8b3a      	ldrh	r2, [r7, #24]
 80056aa:	88bb      	ldrh	r3, [r7, #4]
 80056ac:	3303      	adds	r3, #3
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d306      	bcc.n	80056c4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80056b6:	8afa      	ldrh	r2, [r7, #22]
 80056b8:	88bb      	ldrh	r3, [r7, #4]
 80056ba:	3303      	adds	r3, #3
 80056bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d201      	bcs.n	80056c8 <pbuf_alloc+0x160>
        return NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e035      	b.n	8005734 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80056c8:	8afb      	ldrh	r3, [r7, #22]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fa64 	bl	8004b98 <mem_malloc>
 80056d0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <pbuf_alloc+0x174>
        return NULL;
 80056d8:	2300      	movs	r3, #0
 80056da:	e02b      	b.n	8005734 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80056dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056de:	3310      	adds	r3, #16
 80056e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e2:	4413      	add	r3, r2
 80056e4:	3303      	adds	r3, #3
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	4618      	mov	r0, r3
 80056ec:	88b9      	ldrh	r1, [r7, #4]
 80056ee:	88ba      	ldrh	r2, [r7, #4]
 80056f0:	2300      	movs	r3, #0
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	460b      	mov	r3, r1
 80056fa:	4601      	mov	r1, r0
 80056fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056fe:	f7ff ff09 	bl	8005514 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d010      	beq.n	8005730 <pbuf_alloc+0x1c8>
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <pbuf_alloc+0x1d4>)
 8005710:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005714:	490d      	ldr	r1, [pc, #52]	; (800574c <pbuf_alloc+0x1e4>)
 8005716:	480b      	ldr	r0, [pc, #44]	; (8005744 <pbuf_alloc+0x1dc>)
 8005718:	f009 f806 	bl	800e728 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800571c:	e008      	b.n	8005730 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <pbuf_alloc+0x1d4>)
 8005720:	f240 1227 	movw	r2, #295	; 0x127
 8005724:	490a      	ldr	r1, [pc, #40]	; (8005750 <pbuf_alloc+0x1e8>)
 8005726:	4807      	ldr	r0, [pc, #28]	; (8005744 <pbuf_alloc+0x1dc>)
 8005728:	f008 fffe 	bl	800e728 <iprintf>
      return NULL;
 800572c:	2300      	movs	r3, #0
 800572e:	e001      	b.n	8005734 <pbuf_alloc+0x1cc>
      break;
 8005730:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	; 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	080100dc 	.word	0x080100dc
 8005740:	0801010c 	.word	0x0801010c
 8005744:	0801013c 	.word	0x0801013c
 8005748:	08010164 	.word	0x08010164
 800574c:	08010198 	.word	0x08010198
 8005750:	080101c4 	.word	0x080101c4

08005754 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af02      	add	r7, sp, #8
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
 8005760:	4613      	mov	r3, r2
 8005762:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005764:	883b      	ldrh	r3, [r7, #0]
 8005766:	2b41      	cmp	r3, #65	; 0x41
 8005768:	d009      	beq.n	800577e <pbuf_alloc_reference+0x2a>
 800576a:	883b      	ldrh	r3, [r7, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d006      	beq.n	800577e <pbuf_alloc_reference+0x2a>
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <pbuf_alloc_reference+0x5c>)
 8005772:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005776:	490f      	ldr	r1, [pc, #60]	; (80057b4 <pbuf_alloc_reference+0x60>)
 8005778:	480f      	ldr	r0, [pc, #60]	; (80057b8 <pbuf_alloc_reference+0x64>)
 800577a:	f008 ffd5 	bl	800e728 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800577e:	2007      	movs	r0, #7
 8005780:	f7ff fb78 	bl	8004e74 <memp_malloc>
 8005784:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	e00b      	b.n	80057a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005790:	8879      	ldrh	r1, [r7, #2]
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	2300      	movs	r3, #0
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	883b      	ldrh	r3, [r7, #0]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	460b      	mov	r3, r1
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff feb7 	bl	8005514 <pbuf_init_alloced_pbuf>
  return p;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	080100dc 	.word	0x080100dc
 80057b4:	080101e0 	.word	0x080101e0
 80057b8:	0801013c 	.word	0x0801013c

080057bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
 80057c8:	460b      	mov	r3, r1
 80057ca:	81bb      	strh	r3, [r7, #12]
 80057cc:	4613      	mov	r3, r2
 80057ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80057d4:	8a7b      	ldrh	r3, [r7, #18]
 80057d6:	3303      	adds	r3, #3
 80057d8:	f023 0203 	bic.w	r2, r3, #3
 80057dc:	89bb      	ldrh	r3, [r7, #12]
 80057de:	441a      	add	r2, r3
 80057e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d901      	bls.n	80057ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e018      	b.n	800581c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80057f0:	8a7b      	ldrh	r3, [r7, #18]
 80057f2:	3303      	adds	r3, #3
 80057f4:	f023 0303 	bic.w	r3, r3, #3
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	4413      	add	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e001      	b.n	8005804 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	89b9      	ldrh	r1, [r7, #12]
 8005808:	89ba      	ldrh	r2, [r7, #12]
 800580a:	2302      	movs	r3, #2
 800580c:	9301      	str	r3, [sp, #4]
 800580e:	897b      	ldrh	r3, [r7, #10]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	460b      	mov	r3, r1
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	f7ff fe7d 	bl	8005514 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800581a:	687b      	ldr	r3, [r7, #4]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <pbuf_realloc+0x20>
 8005836:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <pbuf_realloc+0xfc>)
 8005838:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800583c:	4939      	ldr	r1, [pc, #228]	; (8005924 <pbuf_realloc+0x100>)
 800583e:	483a      	ldr	r0, [pc, #232]	; (8005928 <pbuf_realloc+0x104>)
 8005840:	f008 ff72 	bl	800e728 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	891b      	ldrh	r3, [r3, #8]
 8005848:	887a      	ldrh	r2, [r7, #2]
 800584a:	429a      	cmp	r2, r3
 800584c:	d263      	bcs.n	8005916 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	891a      	ldrh	r2, [r3, #8]
 8005852:	887b      	ldrh	r3, [r7, #2]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005858:	887b      	ldrh	r3, [r7, #2]
 800585a:	817b      	strh	r3, [r7, #10]
  q = p;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005860:	e018      	b.n	8005894 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	897a      	ldrh	r2, [r7, #10]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	891a      	ldrh	r2, [r3, #8]
 8005870:	893b      	ldrh	r3, [r7, #8]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <pbuf_realloc+0x70>
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <pbuf_realloc+0xfc>)
 8005888:	f240 12af 	movw	r2, #431	; 0x1af
 800588c:	4927      	ldr	r1, [pc, #156]	; (800592c <pbuf_realloc+0x108>)
 800588e:	4826      	ldr	r0, [pc, #152]	; (8005928 <pbuf_realloc+0x104>)
 8005890:	f008 ff4a 	bl	800e728 <iprintf>
  while (rem_len > q->len) {
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	895b      	ldrh	r3, [r3, #10]
 8005898:	897a      	ldrh	r2, [r7, #10]
 800589a:	429a      	cmp	r2, r3
 800589c:	d8e1      	bhi.n	8005862 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	7b1b      	ldrb	r3, [r3, #12]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d121      	bne.n	80058ee <pbuf_realloc+0xca>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	895b      	ldrh	r3, [r3, #10]
 80058ae:	897a      	ldrh	r2, [r7, #10]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d01c      	beq.n	80058ee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	7b5b      	ldrb	r3, [r3, #13]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d116      	bne.n	80058ee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	897b      	ldrh	r3, [r7, #10]
 80058cc:	4413      	add	r3, r2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff f864 	bl	80049a0 <mem_trim>
 80058d8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <pbuf_realloc+0xca>
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <pbuf_realloc+0xfc>)
 80058e2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80058e6:	4912      	ldr	r1, [pc, #72]	; (8005930 <pbuf_realloc+0x10c>)
 80058e8:	480f      	ldr	r0, [pc, #60]	; (8005928 <pbuf_realloc+0x104>)
 80058ea:	f008 ff1d 	bl	800e728 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	897a      	ldrh	r2, [r7, #10]
 80058f2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	895a      	ldrh	r2, [r3, #10]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f000 f911 	bl	8005b30 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	e000      	b.n	8005918 <pbuf_realloc+0xf4>
    return;
 8005916:	bf00      	nop

}
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	080100dc 	.word	0x080100dc
 8005924:	080101f4 	.word	0x080101f4
 8005928:	0801013c 	.word	0x0801013c
 800592c:	0801020c 	.word	0x0801020c
 8005930:	08010224 	.word	0x08010224

08005934 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <pbuf_add_header_impl+0x22>
 8005948:	4b2b      	ldr	r3, [pc, #172]	; (80059f8 <pbuf_add_header_impl+0xc4>)
 800594a:	f240 12df 	movw	r2, #479	; 0x1df
 800594e:	492b      	ldr	r1, [pc, #172]	; (80059fc <pbuf_add_header_impl+0xc8>)
 8005950:	482b      	ldr	r0, [pc, #172]	; (8005a00 <pbuf_add_header_impl+0xcc>)
 8005952:	f008 fee9 	bl	800e728 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <pbuf_add_header_impl+0x30>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005962:	d301      	bcc.n	8005968 <pbuf_add_header_impl+0x34>
    return 1;
 8005964:	2301      	movs	r3, #1
 8005966:	e043      	b.n	80059f0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <pbuf_add_header_impl+0x3e>
    return 0;
 800596e:	2300      	movs	r3, #0
 8005970:	e03e      	b.n	80059f0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	891a      	ldrh	r2, [r3, #8]
 800597a:	8a7b      	ldrh	r3, [r7, #18]
 800597c:	4413      	add	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	8a7a      	ldrh	r2, [r7, #18]
 8005982:	429a      	cmp	r2, r3
 8005984:	d901      	bls.n	800598a <pbuf_add_header_impl+0x56>
    return 1;
 8005986:	2301      	movs	r3, #1
 8005988:	e032      	b.n	80059f0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	7b1b      	ldrb	r3, [r3, #12]
 800598e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005990:	8a3b      	ldrh	r3, [r7, #16]
 8005992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00c      	beq.n	80059b4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	425b      	negs	r3, r3
 80059a2:	4413      	add	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3310      	adds	r3, #16
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d20d      	bcs.n	80059cc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e01d      	b.n	80059f0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d006      	beq.n	80059c8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	425b      	negs	r3, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	e001      	b.n	80059cc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e011      	b.n	80059f0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	895a      	ldrh	r2, [r3, #10]
 80059d6:	8a7b      	ldrh	r3, [r7, #18]
 80059d8:	4413      	add	r3, r2
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	891a      	ldrh	r2, [r3, #8]
 80059e4:	8a7b      	ldrh	r3, [r7, #18]
 80059e6:	4413      	add	r3, r2
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	811a      	strh	r2, [r3, #8]


  return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	080100dc 	.word	0x080100dc
 80059fc:	08010240 	.word	0x08010240
 8005a00:	0801013c 	.word	0x0801013c

08005a04 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005a0e:	2200      	movs	r2, #0
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ff8e 	bl	8005934 <pbuf_add_header_impl>
 8005a18:	4603      	mov	r3, r0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <pbuf_remove_header+0x1e>
 8005a34:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <pbuf_remove_header+0x94>)
 8005a36:	f240 224b 	movw	r2, #587	; 0x24b
 8005a3a:	4920      	ldr	r1, [pc, #128]	; (8005abc <pbuf_remove_header+0x98>)
 8005a3c:	4820      	ldr	r0, [pc, #128]	; (8005ac0 <pbuf_remove_header+0x9c>)
 8005a3e:	f008 fe73 	bl	800e728 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <pbuf_remove_header+0x2c>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a4e:	d301      	bcc.n	8005a54 <pbuf_remove_header+0x30>
    return 1;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e02c      	b.n	8005aae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <pbuf_remove_header+0x3a>
    return 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e027      	b.n	8005aae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	895b      	ldrh	r3, [r3, #10]
 8005a66:	89fa      	ldrh	r2, [r7, #14]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d908      	bls.n	8005a7e <pbuf_remove_header+0x5a>
 8005a6c:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <pbuf_remove_header+0x94>)
 8005a6e:	f240 2255 	movw	r2, #597	; 0x255
 8005a72:	4914      	ldr	r1, [pc, #80]	; (8005ac4 <pbuf_remove_header+0xa0>)
 8005a74:	4812      	ldr	r0, [pc, #72]	; (8005ac0 <pbuf_remove_header+0x9c>)
 8005a76:	f008 fe57 	bl	800e728 <iprintf>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e017      	b.n	8005aae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	895a      	ldrh	r2, [r3, #10]
 8005a94:	89fb      	ldrh	r3, [r7, #14]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	891a      	ldrh	r2, [r3, #8]
 8005aa2:	89fb      	ldrh	r3, [r7, #14]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	080100dc 	.word	0x080100dc
 8005abc:	08010240 	.word	0x08010240
 8005ac0:	0801013c 	.word	0x0801013c
 8005ac4:	0801024c 	.word	0x0801024c

08005ac8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	807b      	strh	r3, [r7, #2]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005ad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da08      	bge.n	8005af2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005ae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ae4:	425b      	negs	r3, r3
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff ff9b 	bl	8005a24 <pbuf_remove_header>
 8005aee:	4603      	mov	r3, r0
 8005af0:	e007      	b.n	8005b02 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005af2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005af6:	787a      	ldrb	r2, [r7, #1]
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ff1a 	bl	8005934 <pbuf_add_header_impl>
 8005b00:	4603      	mov	r3, r0
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005b16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff ffd2 	bl	8005ac8 <pbuf_header_impl>
 8005b24:	4603      	mov	r3, r0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <pbuf_free+0x22>
 8005b44:	4b38      	ldr	r3, [pc, #224]	; (8005c28 <pbuf_free+0xf8>)
 8005b46:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005b4a:	4938      	ldr	r1, [pc, #224]	; (8005c2c <pbuf_free+0xfc>)
 8005b4c:	4838      	ldr	r0, [pc, #224]	; (8005c30 <pbuf_free+0x100>)
 8005b4e:	f008 fdeb 	bl	800e728 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e063      	b.n	8005c1e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005b5a:	e05c      	b.n	8005c16 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	7b9b      	ldrb	r3, [r3, #14]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <pbuf_free+0x42>
 8005b64:	4b30      	ldr	r3, [pc, #192]	; (8005c28 <pbuf_free+0xf8>)
 8005b66:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005b6a:	4932      	ldr	r1, [pc, #200]	; (8005c34 <pbuf_free+0x104>)
 8005b6c:	4830      	ldr	r0, [pc, #192]	; (8005c30 <pbuf_free+0x100>)
 8005b6e:	f008 fddb 	bl	800e728 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	7b9b      	ldrb	r3, [r3, #14]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	739a      	strb	r2, [r3, #14]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7b9b      	ldrb	r3, [r3, #14]
 8005b82:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005b84:	7dbb      	ldrb	r3, [r7, #22]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d143      	bne.n	8005c12 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	7b1b      	ldrb	r3, [r3, #12]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	7b5b      	ldrb	r3, [r3, #13]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d011      	beq.n	8005bca <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <pbuf_free+0x90>
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <pbuf_free+0xf8>)
 8005bb4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005bb8:	491f      	ldr	r1, [pc, #124]	; (8005c38 <pbuf_free+0x108>)
 8005bba:	481d      	ldr	r0, [pc, #116]	; (8005c30 <pbuf_free+0x100>)
 8005bbc:	f008 fdb4 	bl	800e728 <iprintf>
        pc->custom_free_function(p);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
 8005bc8:	e01d      	b.n	8005c06 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d104      	bne.n	8005bda <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	2008      	movs	r0, #8
 8005bd4:	f7ff f99a 	bl	8004f0c <memp_free>
 8005bd8:	e015      	b.n	8005c06 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d104      	bne.n	8005bea <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	2007      	movs	r0, #7
 8005be4:	f7ff f992 	bl	8004f0c <memp_free>
 8005be8:	e00d      	b.n	8005c06 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <pbuf_free+0xc8>
          mem_free(p);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fe fe6b 	bl	80048cc <mem_free>
 8005bf6:	e006      	b.n	8005c06 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <pbuf_free+0xf8>)
 8005bfa:	f240 320f 	movw	r2, #783	; 0x30f
 8005bfe:	490f      	ldr	r1, [pc, #60]	; (8005c3c <pbuf_free+0x10c>)
 8005c00:	480b      	ldr	r0, [pc, #44]	; (8005c30 <pbuf_free+0x100>)
 8005c02:	f008 fd91 	bl	800e728 <iprintf>
        }
      }
      count++;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	e001      	b.n	8005c16 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d19f      	bne.n	8005b5c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	080100dc 	.word	0x080100dc
 8005c2c:	08010240 	.word	0x08010240
 8005c30:	0801013c 	.word	0x0801013c
 8005c34:	0801026c 	.word	0x0801026c
 8005c38:	08010284 	.word	0x08010284
 8005c3c:	080102a8 	.word	0x080102a8

08005c40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005c4c:	e005      	b.n	8005c5a <pbuf_clen+0x1a>
    ++len;
 8005c4e:	89fb      	ldrh	r3, [r7, #14]
 8005c50:	3301      	adds	r3, #1
 8005c52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f6      	bne.n	8005c4e <pbuf_clen+0xe>
  }
  return len;
 8005c60:	89fb      	ldrh	r3, [r7, #14]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d010      	beq.n	8005ca0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7b9b      	ldrb	r3, [r3, #14]
 8005c82:	3301      	adds	r3, #1
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	7b9b      	ldrb	r3, [r3, #14]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <pbuf_ref+0x30>
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <pbuf_ref+0x38>)
 8005c94:	f240 3242 	movw	r2, #834	; 0x342
 8005c98:	4904      	ldr	r1, [pc, #16]	; (8005cac <pbuf_ref+0x3c>)
 8005c9a:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <pbuf_ref+0x40>)
 8005c9c:	f008 fd44 	bl	800e728 <iprintf>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	080100dc 	.word	0x080100dc
 8005cac:	080102bc 	.word	0x080102bc
 8005cb0:	0801013c 	.word	0x0801013c

08005cb4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <pbuf_cat+0x16>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <pbuf_cat+0x26>
 8005cca:	4b20      	ldr	r3, [pc, #128]	; (8005d4c <pbuf_cat+0x98>)
 8005ccc:	f240 3259 	movw	r2, #857	; 0x359
 8005cd0:	491f      	ldr	r1, [pc, #124]	; (8005d50 <pbuf_cat+0x9c>)
 8005cd2:	4820      	ldr	r0, [pc, #128]	; (8005d54 <pbuf_cat+0xa0>)
 8005cd4:	f008 fd28 	bl	800e728 <iprintf>
 8005cd8:	e034      	b.n	8005d44 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e00a      	b.n	8005cf6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	891a      	ldrh	r2, [r3, #8]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	891b      	ldrh	r3, [r3, #8]
 8005ce8:	4413      	add	r3, r2
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	891a      	ldrh	r2, [r3, #8]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	895b      	ldrh	r3, [r3, #10]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d006      	beq.n	8005d18 <pbuf_cat+0x64>
 8005d0a:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <pbuf_cat+0x98>)
 8005d0c:	f240 3262 	movw	r2, #866	; 0x362
 8005d10:	4911      	ldr	r1, [pc, #68]	; (8005d58 <pbuf_cat+0xa4>)
 8005d12:	4810      	ldr	r0, [pc, #64]	; (8005d54 <pbuf_cat+0xa0>)
 8005d14:	f008 fd08 	bl	800e728 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <pbuf_cat+0x7a>
 8005d20:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <pbuf_cat+0x98>)
 8005d22:	f240 3263 	movw	r2, #867	; 0x363
 8005d26:	490d      	ldr	r1, [pc, #52]	; (8005d5c <pbuf_cat+0xa8>)
 8005d28:	480a      	ldr	r0, [pc, #40]	; (8005d54 <pbuf_cat+0xa0>)
 8005d2a:	f008 fcfd 	bl	800e728 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	891a      	ldrh	r2, [r3, #8]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	891b      	ldrh	r3, [r3, #8]
 8005d36:	4413      	add	r3, r2
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	080100dc 	.word	0x080100dc
 8005d50:	080102d0 	.word	0x080102d0
 8005d54:	0801013c 	.word	0x0801013c
 8005d58:	08010308 	.word	0x08010308
 8005d5c:	08010338 	.word	0x08010338

08005d60 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005d6a:	6839      	ldr	r1, [r7, #0]
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ffa1 	bl	8005cb4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005d72:	6838      	ldr	r0, [r7, #0]
 8005d74:	f7ff ff7c 	bl	8005c70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005d78:	bf00      	nop
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <pbuf_copy+0x2a>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <pbuf_copy+0x2a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	891a      	ldrh	r2, [r3, #8]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	891b      	ldrh	r3, [r3, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d209      	bcs.n	8005dbe <pbuf_copy+0x3e>
 8005daa:	4b57      	ldr	r3, [pc, #348]	; (8005f08 <pbuf_copy+0x188>)
 8005dac:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005db0:	4956      	ldr	r1, [pc, #344]	; (8005f0c <pbuf_copy+0x18c>)
 8005db2:	4857      	ldr	r0, [pc, #348]	; (8005f10 <pbuf_copy+0x190>)
 8005db4:	f008 fcb8 	bl	800e728 <iprintf>
 8005db8:	f06f 030f 	mvn.w	r3, #15
 8005dbc:	e09f      	b.n	8005efe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	895b      	ldrh	r3, [r3, #10]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	1ad2      	subs	r2, r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	895b      	ldrh	r3, [r3, #10]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1acb      	subs	r3, r1, r3
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d306      	bcc.n	8005de4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	895b      	ldrh	r3, [r3, #10]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e005      	b.n	8005df0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	895b      	ldrh	r3, [r3, #10]
 8005de8:	461a      	mov	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	18d0      	adds	r0, r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4619      	mov	r1, r3
 8005e04:	f008 fc60 	bl	800e6c8 <memcpy>
    offset_to += len;
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	895b      	ldrh	r3, [r3, #10]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d906      	bls.n	8005e32 <pbuf_copy+0xb2>
 8005e24:	4b38      	ldr	r3, [pc, #224]	; (8005f08 <pbuf_copy+0x188>)
 8005e26:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005e2a:	493a      	ldr	r1, [pc, #232]	; (8005f14 <pbuf_copy+0x194>)
 8005e2c:	4838      	ldr	r0, [pc, #224]	; (8005f10 <pbuf_copy+0x190>)
 8005e2e:	f008 fc7b 	bl	800e728 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	895b      	ldrh	r3, [r3, #10]
 8005e36:	461a      	mov	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d906      	bls.n	8005e4c <pbuf_copy+0xcc>
 8005e3e:	4b32      	ldr	r3, [pc, #200]	; (8005f08 <pbuf_copy+0x188>)
 8005e40:	f240 32da 	movw	r2, #986	; 0x3da
 8005e44:	4934      	ldr	r1, [pc, #208]	; (8005f18 <pbuf_copy+0x198>)
 8005e46:	4832      	ldr	r0, [pc, #200]	; (8005f10 <pbuf_copy+0x190>)
 8005e48:	f008 fc6e 	bl	800e728 <iprintf>
    if (offset_from >= p_from->len) {
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	895b      	ldrh	r3, [r3, #10]
 8005e50:	461a      	mov	r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d304      	bcc.n	8005e62 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	895b      	ldrh	r3, [r3, #10]
 8005e66:	461a      	mov	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d114      	bne.n	8005e98 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <pbuf_copy+0x118>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <pbuf_copy+0x118>
 8005e84:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <pbuf_copy+0x188>)
 8005e86:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005e8a:	4924      	ldr	r1, [pc, #144]	; (8005f1c <pbuf_copy+0x19c>)
 8005e8c:	4820      	ldr	r0, [pc, #128]	; (8005f10 <pbuf_copy+0x190>)
 8005e8e:	f008 fc4b 	bl	800e728 <iprintf>
 8005e92:	f06f 030f 	mvn.w	r3, #15
 8005e96:	e032      	b.n	8005efe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d013      	beq.n	8005ec6 <pbuf_copy+0x146>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	895a      	ldrh	r2, [r3, #10]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	891b      	ldrh	r3, [r3, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d10d      	bne.n	8005ec6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <pbuf_copy+0x146>
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <pbuf_copy+0x188>)
 8005eb4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005eb8:	4919      	ldr	r1, [pc, #100]	; (8005f20 <pbuf_copy+0x1a0>)
 8005eba:	4815      	ldr	r0, [pc, #84]	; (8005f10 <pbuf_copy+0x190>)
 8005ebc:	f008 fc34 	bl	800e728 <iprintf>
 8005ec0:	f06f 0305 	mvn.w	r3, #5
 8005ec4:	e01b      	b.n	8005efe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d013      	beq.n	8005ef4 <pbuf_copy+0x174>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	895a      	ldrh	r2, [r3, #10]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	891b      	ldrh	r3, [r3, #8]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d10d      	bne.n	8005ef4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <pbuf_copy+0x174>
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <pbuf_copy+0x188>)
 8005ee2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005ee6:	490e      	ldr	r1, [pc, #56]	; (8005f20 <pbuf_copy+0x1a0>)
 8005ee8:	4809      	ldr	r0, [pc, #36]	; (8005f10 <pbuf_copy+0x190>)
 8005eea:	f008 fc1d 	bl	800e728 <iprintf>
 8005eee:	f06f 0305 	mvn.w	r3, #5
 8005ef2:	e004      	b.n	8005efe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f47f af61 	bne.w	8005dbe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	080100dc 	.word	0x080100dc
 8005f0c:	08010384 	.word	0x08010384
 8005f10:	0801013c 	.word	0x0801013c
 8005f14:	080103b4 	.word	0x080103b4
 8005f18:	080103cc 	.word	0x080103cc
 8005f1c:	080103e8 	.word	0x080103e8
 8005f20:	080103f8 	.word	0x080103f8

08005f24 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	461a      	mov	r2, r3
 8005f32:	460b      	mov	r3, r1
 8005f34:	80fb      	strh	r3, [r7, #6]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d108      	bne.n	8005f5a <pbuf_copy_partial+0x36>
 8005f48:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <pbuf_copy_partial+0xd4>)
 8005f4a:	f240 420a 	movw	r2, #1034	; 0x40a
 8005f4e:	492b      	ldr	r1, [pc, #172]	; (8005ffc <pbuf_copy_partial+0xd8>)
 8005f50:	482b      	ldr	r0, [pc, #172]	; (8006000 <pbuf_copy_partial+0xdc>)
 8005f52:	f008 fbe9 	bl	800e728 <iprintf>
 8005f56:	2300      	movs	r3, #0
 8005f58:	e04a      	b.n	8005ff0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d108      	bne.n	8005f72 <pbuf_copy_partial+0x4e>
 8005f60:	4b25      	ldr	r3, [pc, #148]	; (8005ff8 <pbuf_copy_partial+0xd4>)
 8005f62:	f240 420b 	movw	r2, #1035	; 0x40b
 8005f66:	4927      	ldr	r1, [pc, #156]	; (8006004 <pbuf_copy_partial+0xe0>)
 8005f68:	4825      	ldr	r0, [pc, #148]	; (8006000 <pbuf_copy_partial+0xdc>)
 8005f6a:	f008 fbdd 	bl	800e728 <iprintf>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e03e      	b.n	8005ff0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e034      	b.n	8005fe2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005f78:	88bb      	ldrh	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <pbuf_copy_partial+0x70>
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	895b      	ldrh	r3, [r3, #10]
 8005f82:	88ba      	ldrh	r2, [r7, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d305      	bcc.n	8005f94 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	895b      	ldrh	r3, [r3, #10]
 8005f8c:	88ba      	ldrh	r2, [r7, #4]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	80bb      	strh	r3, [r7, #4]
 8005f92:	e023      	b.n	8005fdc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	895a      	ldrh	r2, [r3, #10]
 8005f98:	88bb      	ldrh	r3, [r7, #4]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005f9e:	8b3a      	ldrh	r2, [r7, #24]
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d901      	bls.n	8005faa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005faa:	8b7b      	ldrh	r3, [r7, #26]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	18d0      	adds	r0, r2, r3
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	88bb      	ldrh	r3, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	8b3a      	ldrh	r2, [r7, #24]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f008 fb84 	bl	800e6c8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005fc0:	8afa      	ldrh	r2, [r7, #22]
 8005fc2:	8b3b      	ldrh	r3, [r7, #24]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005fc8:	8b7a      	ldrh	r2, [r7, #26]
 8005fca:	8b3b      	ldrh	r3, [r7, #24]
 8005fcc:	4413      	add	r3, r2
 8005fce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	8b3b      	ldrh	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <pbuf_copy_partial+0xca>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1c4      	bne.n	8005f78 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005fee:	8afb      	ldrh	r3, [r7, #22]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	080100dc 	.word	0x080100dc
 8005ffc:	08010424 	.word	0x08010424
 8006000:	0801013c 	.word	0x0801013c
 8006004:	08010444 	.word	0x08010444

08006008 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	4613      	mov	r3, r2
 8006014:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <pbuf_take+0x30>
 8006024:	4b3a      	ldr	r3, [pc, #232]	; (8006110 <pbuf_take+0x108>)
 8006026:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800602a:	493a      	ldr	r1, [pc, #232]	; (8006114 <pbuf_take+0x10c>)
 800602c:	483a      	ldr	r0, [pc, #232]	; (8006118 <pbuf_take+0x110>)
 800602e:	f008 fb7b 	bl	800e728 <iprintf>
 8006032:	f06f 030f 	mvn.w	r3, #15
 8006036:	e067      	b.n	8006108 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <pbuf_take+0x4a>
 800603e:	4b34      	ldr	r3, [pc, #208]	; (8006110 <pbuf_take+0x108>)
 8006040:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006044:	4935      	ldr	r1, [pc, #212]	; (800611c <pbuf_take+0x114>)
 8006046:	4834      	ldr	r0, [pc, #208]	; (8006118 <pbuf_take+0x110>)
 8006048:	f008 fb6e 	bl	800e728 <iprintf>
 800604c:	f06f 030f 	mvn.w	r3, #15
 8006050:	e05a      	b.n	8006108 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	891b      	ldrh	r3, [r3, #8]
 8006056:	88fa      	ldrh	r2, [r7, #6]
 8006058:	429a      	cmp	r2, r3
 800605a:	d909      	bls.n	8006070 <pbuf_take+0x68>
 800605c:	4b2c      	ldr	r3, [pc, #176]	; (8006110 <pbuf_take+0x108>)
 800605e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8006062:	492f      	ldr	r1, [pc, #188]	; (8006120 <pbuf_take+0x118>)
 8006064:	482c      	ldr	r0, [pc, #176]	; (8006118 <pbuf_take+0x110>)
 8006066:	f008 fb5f 	bl	800e728 <iprintf>
 800606a:	f04f 33ff 	mov.w	r3, #4294967295
 800606e:	e04b      	b.n	8006108 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <pbuf_take+0x7e>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <pbuf_take+0x7e>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	891b      	ldrh	r3, [r3, #8]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	429a      	cmp	r2, r3
 8006084:	d902      	bls.n	800608c <pbuf_take+0x84>
    return ERR_ARG;
 8006086:	f06f 030f 	mvn.w	r3, #15
 800608a:	e03d      	b.n	8006108 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e028      	b.n	80060e4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <pbuf_take+0x9e>
 8006098:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <pbuf_take+0x108>)
 800609a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800609e:	4921      	ldr	r1, [pc, #132]	; (8006124 <pbuf_take+0x11c>)
 80060a0:	481d      	ldr	r0, [pc, #116]	; (8006118 <pbuf_take+0x110>)
 80060a2:	f008 fb41 	bl	800e728 <iprintf>
    buf_copy_len = total_copy_len;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	895b      	ldrh	r3, [r3, #10]
 80060ae:	461a      	mov	r2, r3
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d902      	bls.n	80060bc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	895b      	ldrh	r3, [r3, #10]
 80060ba:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	6858      	ldr	r0, [r3, #4]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4619      	mov	r1, r3
 80060ca:	f008 fafd 	bl	800e6c8 <memcpy>
    total_copy_len -= buf_copy_len;
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	4413      	add	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1d3      	bne.n	8006092 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <pbuf_take+0xf0>
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d006      	beq.n	8006106 <pbuf_take+0xfe>
 80060f8:	4b05      	ldr	r3, [pc, #20]	; (8006110 <pbuf_take+0x108>)
 80060fa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80060fe:	490a      	ldr	r1, [pc, #40]	; (8006128 <pbuf_take+0x120>)
 8006100:	4805      	ldr	r0, [pc, #20]	; (8006118 <pbuf_take+0x110>)
 8006102:	f008 fb11 	bl	800e728 <iprintf>
  return ERR_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3720      	adds	r7, #32
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	080100dc 	.word	0x080100dc
 8006114:	080104b4 	.word	0x080104b4
 8006118:	0801013c 	.word	0x0801013c
 800611c:	080104cc 	.word	0x080104cc
 8006120:	080104e8 	.word	0x080104e8
 8006124:	08010508 	.word	0x08010508
 8006128:	08010520 	.word	0x08010520

0800612c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	603a      	str	r2, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
 8006138:	460b      	mov	r3, r1
 800613a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	8919      	ldrh	r1, [r3, #8]
 8006140:	88ba      	ldrh	r2, [r7, #4]
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fa0f 	bl	8005568 <pbuf_alloc>
 800614a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <pbuf_clone+0x2a>
    return NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	e011      	b.n	800617a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7ff fe11 	bl	8005d80 <pbuf_copy>
 800615e:	4603      	mov	r3, r0
 8006160:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006162:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d006      	beq.n	8006178 <pbuf_clone+0x4c>
 800616a:	4b06      	ldr	r3, [pc, #24]	; (8006184 <pbuf_clone+0x58>)
 800616c:	f240 5224 	movw	r2, #1316	; 0x524
 8006170:	4905      	ldr	r1, [pc, #20]	; (8006188 <pbuf_clone+0x5c>)
 8006172:	4806      	ldr	r0, [pc, #24]	; (800618c <pbuf_clone+0x60>)
 8006174:	f008 fad8 	bl	800e728 <iprintf>
  return q;
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	080100dc 	.word	0x080100dc
 8006188:	08010550 	.word	0x08010550
 800618c:	0801013c 	.word	0x0801013c

08006190 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006194:	f008 fae0 	bl	800e758 <rand>
 8006198:	4603      	mov	r3, r0
 800619a:	b29b      	uxth	r3, r3
 800619c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	4b01      	ldr	r3, [pc, #4]	; (80061b0 <tcp_init+0x20>)
 80061aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80061ac:	bf00      	nop
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	2000002a 	.word	0x2000002a

080061b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	7d1b      	ldrb	r3, [r3, #20]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d105      	bne.n	80061d0 <tcp_free+0x1c>
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <tcp_free+0x2c>)
 80061c6:	22d4      	movs	r2, #212	; 0xd4
 80061c8:	4906      	ldr	r1, [pc, #24]	; (80061e4 <tcp_free+0x30>)
 80061ca:	4807      	ldr	r0, [pc, #28]	; (80061e8 <tcp_free+0x34>)
 80061cc:	f008 faac 	bl	800e728 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	2001      	movs	r0, #1
 80061d4:	f7fe fe9a 	bl	8004f0c <memp_free>
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	080105dc 	.word	0x080105dc
 80061e4:	0801060c 	.word	0x0801060c
 80061e8:	08010620 	.word	0x08010620

080061ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	7d1b      	ldrb	r3, [r3, #20]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d105      	bne.n	8006208 <tcp_free_listen+0x1c>
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <tcp_free_listen+0x2c>)
 80061fe:	22df      	movs	r2, #223	; 0xdf
 8006200:	4906      	ldr	r1, [pc, #24]	; (800621c <tcp_free_listen+0x30>)
 8006202:	4807      	ldr	r0, [pc, #28]	; (8006220 <tcp_free_listen+0x34>)
 8006204:	f008 fa90 	bl	800e728 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	2002      	movs	r0, #2
 800620c:	f7fe fe7e 	bl	8004f0c <memp_free>
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	080105dc 	.word	0x080105dc
 800621c:	08010648 	.word	0x08010648
 8006220:	08010620 	.word	0x08010620

08006224 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006228:	f000 fea2 	bl	8006f70 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <tcp_tmr+0x28>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	b2da      	uxtb	r2, r3
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <tcp_tmr+0x28>)
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <tcp_tmr+0x28>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006244:	f000 fb54 	bl	80068f0 <tcp_slowtmr>
  }
}
 8006248:	bf00      	nop
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000135 	.word	0x20000135

08006250 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <tcp_remove_listener+0x1c>
 8006260:	4b0d      	ldr	r3, [pc, #52]	; (8006298 <tcp_remove_listener+0x48>)
 8006262:	22ff      	movs	r2, #255	; 0xff
 8006264:	490d      	ldr	r1, [pc, #52]	; (800629c <tcp_remove_listener+0x4c>)
 8006266:	480e      	ldr	r0, [pc, #56]	; (80062a0 <tcp_remove_listener+0x50>)
 8006268:	f008 fa5e 	bl	800e728 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e00a      	b.n	8006288 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	429a      	cmp	r2, r3
 800627a:	d102      	bne.n	8006282 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f1      	bne.n	8006272 <tcp_remove_listener+0x22>
    }
  }
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	080105dc 	.word	0x080105dc
 800629c:	08010664 	.word	0x08010664
 80062a0:	08010620 	.word	0x08010620

080062a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <tcp_listen_closed+0x1c>
 80062b2:	4b14      	ldr	r3, [pc, #80]	; (8006304 <tcp_listen_closed+0x60>)
 80062b4:	f240 1211 	movw	r2, #273	; 0x111
 80062b8:	4913      	ldr	r1, [pc, #76]	; (8006308 <tcp_listen_closed+0x64>)
 80062ba:	4814      	ldr	r0, [pc, #80]	; (800630c <tcp_listen_closed+0x68>)
 80062bc:	f008 fa34 	bl	800e728 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	7d1b      	ldrb	r3, [r3, #20]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d006      	beq.n	80062d6 <tcp_listen_closed+0x32>
 80062c8:	4b0e      	ldr	r3, [pc, #56]	; (8006304 <tcp_listen_closed+0x60>)
 80062ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 80062ce:	4910      	ldr	r1, [pc, #64]	; (8006310 <tcp_listen_closed+0x6c>)
 80062d0:	480e      	ldr	r0, [pc, #56]	; (800630c <tcp_listen_closed+0x68>)
 80062d2:	f008 fa29 	bl	800e728 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80062d6:	2301      	movs	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e00b      	b.n	80062f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80062dc:	4a0d      	ldr	r2, [pc, #52]	; (8006314 <tcp_listen_closed+0x70>)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff ffb1 	bl	8006250 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d9f0      	bls.n	80062dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80062fa:	bf00      	nop
 80062fc:	bf00      	nop
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	080105dc 	.word	0x080105dc
 8006308:	0801068c 	.word	0x0801068c
 800630c:	08010620 	.word	0x08010620
 8006310:	08010698 	.word	0x08010698
 8006314:	080125a8 	.word	0x080125a8

08006318 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006318:	b5b0      	push	{r4, r5, r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af04      	add	r7, sp, #16
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <tcp_close_shutdown+0x20>
 800632a:	4b63      	ldr	r3, [pc, #396]	; (80064b8 <tcp_close_shutdown+0x1a0>)
 800632c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006330:	4962      	ldr	r1, [pc, #392]	; (80064bc <tcp_close_shutdown+0x1a4>)
 8006332:	4863      	ldr	r0, [pc, #396]	; (80064c0 <tcp_close_shutdown+0x1a8>)
 8006334:	f008 f9f8 	bl	800e728 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d066      	beq.n	800640c <tcp_close_shutdown+0xf4>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	7d1b      	ldrb	r3, [r3, #20]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d003      	beq.n	800634e <tcp_close_shutdown+0x36>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	7d1b      	ldrb	r3, [r3, #20]
 800634a:	2b07      	cmp	r3, #7
 800634c:	d15e      	bne.n	800640c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006352:	2b00      	cmp	r3, #0
 8006354:	d104      	bne.n	8006360 <tcp_close_shutdown+0x48>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800635a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800635e:	d055      	beq.n	800640c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	8b5b      	ldrh	r3, [r3, #26]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <tcp_close_shutdown+0x62>
 800636c:	4b52      	ldr	r3, [pc, #328]	; (80064b8 <tcp_close_shutdown+0x1a0>)
 800636e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006372:	4954      	ldr	r1, [pc, #336]	; (80064c4 <tcp_close_shutdown+0x1ac>)
 8006374:	4852      	ldr	r0, [pc, #328]	; (80064c0 <tcp_close_shutdown+0x1a8>)
 8006376:	f008 f9d7 	bl	800e728 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006382:	687d      	ldr	r5, [r7, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	8ad2      	ldrh	r2, [r2, #22]
 800638c:	6879      	ldr	r1, [r7, #4]
 800638e:	8b09      	ldrh	r1, [r1, #24]
 8006390:	9102      	str	r1, [sp, #8]
 8006392:	9201      	str	r2, [sp, #4]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462b      	mov	r3, r5
 8006398:	4622      	mov	r2, r4
 800639a:	4601      	mov	r1, r0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f004 fe8d 	bl	800b0bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 f8c6 	bl	8007534 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80063a8:	4b47      	ldr	r3, [pc, #284]	; (80064c8 <tcp_close_shutdown+0x1b0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d105      	bne.n	80063be <tcp_close_shutdown+0xa6>
 80063b2:	4b45      	ldr	r3, [pc, #276]	; (80064c8 <tcp_close_shutdown+0x1b0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a43      	ldr	r2, [pc, #268]	; (80064c8 <tcp_close_shutdown+0x1b0>)
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e013      	b.n	80063e6 <tcp_close_shutdown+0xce>
 80063be:	4b42      	ldr	r3, [pc, #264]	; (80064c8 <tcp_close_shutdown+0x1b0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e00c      	b.n	80063e0 <tcp_close_shutdown+0xc8>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d104      	bne.n	80063da <tcp_close_shutdown+0xc2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	60da      	str	r2, [r3, #12]
 80063d8:	e005      	b.n	80063e6 <tcp_close_shutdown+0xce>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1ef      	bne.n	80063c6 <tcp_close_shutdown+0xae>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	60da      	str	r2, [r3, #12]
 80063ec:	4b37      	ldr	r3, [pc, #220]	; (80064cc <tcp_close_shutdown+0x1b4>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80063f2:	4b37      	ldr	r3, [pc, #220]	; (80064d0 <tcp_close_shutdown+0x1b8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d102      	bne.n	8006402 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80063fc:	f003 fd5a 	bl	8009eb4 <tcp_trigger_input_pcb_close>
 8006400:	e002      	b.n	8006408 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff fed6 	bl	80061b4 <tcp_free>
      }
      return ERR_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e050      	b.n	80064ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7d1b      	ldrb	r3, [r3, #20]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d03b      	beq.n	800648c <tcp_close_shutdown+0x174>
 8006414:	2b02      	cmp	r3, #2
 8006416:	dc44      	bgt.n	80064a2 <tcp_close_shutdown+0x18a>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <tcp_close_shutdown+0x10a>
 800641c:	2b01      	cmp	r3, #1
 800641e:	d02a      	beq.n	8006476 <tcp_close_shutdown+0x15e>
 8006420:	e03f      	b.n	80064a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8adb      	ldrh	r3, [r3, #22]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d021      	beq.n	800646e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800642a:	4b2a      	ldr	r3, [pc, #168]	; (80064d4 <tcp_close_shutdown+0x1bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d105      	bne.n	8006440 <tcp_close_shutdown+0x128>
 8006434:	4b27      	ldr	r3, [pc, #156]	; (80064d4 <tcp_close_shutdown+0x1bc>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	4a26      	ldr	r2, [pc, #152]	; (80064d4 <tcp_close_shutdown+0x1bc>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e013      	b.n	8006468 <tcp_close_shutdown+0x150>
 8006440:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <tcp_close_shutdown+0x1bc>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	e00c      	b.n	8006462 <tcp_close_shutdown+0x14a>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d104      	bne.n	800645c <tcp_close_shutdown+0x144>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e005      	b.n	8006468 <tcp_close_shutdown+0x150>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1ef      	bne.n	8006448 <tcp_close_shutdown+0x130>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff fea0 	bl	80061b4 <tcp_free>
      break;
 8006474:	e01a      	b.n	80064ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff ff14 	bl	80062a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4816      	ldr	r0, [pc, #88]	; (80064d8 <tcp_close_shutdown+0x1c0>)
 8006480:	f001 f8a8 	bl	80075d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7ff feb1 	bl	80061ec <tcp_free_listen>
      break;
 800648a:	e00f      	b.n	80064ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800648c:	6879      	ldr	r1, [r7, #4]
 800648e:	480e      	ldr	r0, [pc, #56]	; (80064c8 <tcp_close_shutdown+0x1b0>)
 8006490:	f001 f8a0 	bl	80075d4 <tcp_pcb_remove>
 8006494:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <tcp_close_shutdown+0x1b4>)
 8006496:	2201      	movs	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fe8a 	bl	80061b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80064a0:	e004      	b.n	80064ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f81a 	bl	80064dc <tcp_close_shutdown_fin>
 80064a8:	4603      	mov	r3, r0
 80064aa:	e000      	b.n	80064ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bdb0      	pop	{r4, r5, r7, pc}
 80064b6:	bf00      	nop
 80064b8:	080105dc 	.word	0x080105dc
 80064bc:	080106b0 	.word	0x080106b0
 80064c0:	08010620 	.word	0x08010620
 80064c4:	080106d0 	.word	0x080106d0
 80064c8:	20008bb4 	.word	0x20008bb4
 80064cc:	20008bb0 	.word	0x20008bb0
 80064d0:	20008bc8 	.word	0x20008bc8
 80064d4:	20008bc0 	.word	0x20008bc0
 80064d8:	20008bbc 	.word	0x20008bbc

080064dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <tcp_close_shutdown_fin+0x1c>
 80064ea:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <tcp_close_shutdown_fin+0xc8>)
 80064ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80064f0:	492d      	ldr	r1, [pc, #180]	; (80065a8 <tcp_close_shutdown_fin+0xcc>)
 80064f2:	482e      	ldr	r0, [pc, #184]	; (80065ac <tcp_close_shutdown_fin+0xd0>)
 80064f4:	f008 f918 	bl	800e728 <iprintf>

  switch (pcb->state) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	7d1b      	ldrb	r3, [r3, #20]
 80064fc:	2b07      	cmp	r3, #7
 80064fe:	d020      	beq.n	8006542 <tcp_close_shutdown_fin+0x66>
 8006500:	2b07      	cmp	r3, #7
 8006502:	dc2b      	bgt.n	800655c <tcp_close_shutdown_fin+0x80>
 8006504:	2b03      	cmp	r3, #3
 8006506:	d002      	beq.n	800650e <tcp_close_shutdown_fin+0x32>
 8006508:	2b04      	cmp	r3, #4
 800650a:	d00d      	beq.n	8006528 <tcp_close_shutdown_fin+0x4c>
 800650c:	e026      	b.n	800655c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f003 fee2 	bl	800a2d8 <tcp_send_fin>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d11f      	bne.n	8006560 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2205      	movs	r2, #5
 8006524:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006526:	e01b      	b.n	8006560 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f003 fed5 	bl	800a2d8 <tcp_send_fin>
 800652e:	4603      	mov	r3, r0
 8006530:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d114      	bne.n	8006564 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2205      	movs	r2, #5
 800653e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006540:	e010      	b.n	8006564 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f003 fec8 	bl	800a2d8 <tcp_send_fin>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800654c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2209      	movs	r2, #9
 8006558:	751a      	strb	r2, [r3, #20]
      }
      break;
 800655a:	e005      	b.n	8006568 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e01c      	b.n	800659a <tcp_close_shutdown_fin+0xbe>
      break;
 8006560:	bf00      	nop
 8006562:	e002      	b.n	800656a <tcp_close_shutdown_fin+0x8e>
      break;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <tcp_close_shutdown_fin+0x8e>
      break;
 8006568:	bf00      	nop
  }

  if (err == ERR_OK) {
 800656a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d103      	bne.n	800657a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f003 ffee 	bl	800a554 <tcp_output>
 8006578:	e00d      	b.n	8006596 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800657a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d108      	bne.n	8006596 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8b5b      	ldrh	r3, [r3, #26]
 8006588:	f043 0308 	orr.w	r3, r3, #8
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e001      	b.n	800659a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	080105dc 	.word	0x080105dc
 80065a8:	0801068c 	.word	0x0801068c
 80065ac:	08010620 	.word	0x08010620

080065b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d109      	bne.n	80065d2 <tcp_close+0x22>
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <tcp_close+0x4c>)
 80065c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80065c4:	490e      	ldr	r1, [pc, #56]	; (8006600 <tcp_close+0x50>)
 80065c6:	480f      	ldr	r0, [pc, #60]	; (8006604 <tcp_close+0x54>)
 80065c8:	f008 f8ae 	bl	800e728 <iprintf>
 80065cc:	f06f 030f 	mvn.w	r3, #15
 80065d0:	e00f      	b.n	80065f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	7d1b      	ldrb	r3, [r3, #20]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d006      	beq.n	80065e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	8b5b      	ldrh	r3, [r3, #26]
 80065de:	f043 0310 	orr.w	r3, r3, #16
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80065e8:	2101      	movs	r1, #1
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fe94 	bl	8006318 <tcp_close_shutdown>
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	080105dc 	.word	0x080105dc
 8006600:	080106ec 	.word	0x080106ec
 8006604:	08010620 	.word	0x08010620

08006608 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08e      	sub	sp, #56	; 0x38
 800660c:	af04      	add	r7, sp, #16
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d107      	bne.n	8006628 <tcp_abandon+0x20>
 8006618:	4b52      	ldr	r3, [pc, #328]	; (8006764 <tcp_abandon+0x15c>)
 800661a:	f240 223d 	movw	r2, #573	; 0x23d
 800661e:	4952      	ldr	r1, [pc, #328]	; (8006768 <tcp_abandon+0x160>)
 8006620:	4852      	ldr	r0, [pc, #328]	; (800676c <tcp_abandon+0x164>)
 8006622:	f008 f881 	bl	800e728 <iprintf>
 8006626:	e099      	b.n	800675c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	7d1b      	ldrb	r3, [r3, #20]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d106      	bne.n	800663e <tcp_abandon+0x36>
 8006630:	4b4c      	ldr	r3, [pc, #304]	; (8006764 <tcp_abandon+0x15c>)
 8006632:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006636:	494e      	ldr	r1, [pc, #312]	; (8006770 <tcp_abandon+0x168>)
 8006638:	484c      	ldr	r0, [pc, #304]	; (800676c <tcp_abandon+0x164>)
 800663a:	f008 f875 	bl	800e728 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	7d1b      	ldrb	r3, [r3, #20]
 8006642:	2b0a      	cmp	r3, #10
 8006644:	d107      	bne.n	8006656 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	484a      	ldr	r0, [pc, #296]	; (8006774 <tcp_abandon+0x16c>)
 800664a:	f000 ffc3 	bl	80075d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fdb0 	bl	80061b4 <tcp_free>
 8006654:	e082      	b.n	800675c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006662:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006670:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7d1b      	ldrb	r3, [r3, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d126      	bne.n	80066ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8adb      	ldrh	r3, [r3, #22]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02e      	beq.n	80066e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006688:	4b3b      	ldr	r3, [pc, #236]	; (8006778 <tcp_abandon+0x170>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	d105      	bne.n	800669e <tcp_abandon+0x96>
 8006692:	4b39      	ldr	r3, [pc, #228]	; (8006778 <tcp_abandon+0x170>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4a37      	ldr	r2, [pc, #220]	; (8006778 <tcp_abandon+0x170>)
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e013      	b.n	80066c6 <tcp_abandon+0xbe>
 800669e:	4b36      	ldr	r3, [pc, #216]	; (8006778 <tcp_abandon+0x170>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61fb      	str	r3, [r7, #28]
 80066a4:	e00c      	b.n	80066c0 <tcp_abandon+0xb8>
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d104      	bne.n	80066ba <tcp_abandon+0xb2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	60da      	str	r2, [r3, #12]
 80066b8:	e005      	b.n	80066c6 <tcp_abandon+0xbe>
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1ef      	bne.n	80066a6 <tcp_abandon+0x9e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	60da      	str	r2, [r3, #12]
 80066cc:	e00b      	b.n	80066e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	8adb      	ldrh	r3, [r3, #22]
 80066d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4828      	ldr	r0, [pc, #160]	; (800677c <tcp_abandon+0x174>)
 80066dc:	f000 ff7a 	bl	80075d4 <tcp_pcb_remove>
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <tcp_abandon+0x178>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fd1c 	bl	8007130 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fd13 	bl	8007130 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fd0a 	bl	8007130 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00e      	beq.n	8006740 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	8b12      	ldrh	r2, [r2, #24]
 800672c:	9202      	str	r2, [sp, #8]
 800672e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006730:	9201      	str	r2, [sp, #4]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	460b      	mov	r3, r1
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	69b9      	ldr	r1, [r7, #24]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f004 fcbe 	bl	800b0bc <tcp_rst>
    }
    last_state = pcb->state;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7d1b      	ldrb	r3, [r3, #20]
 8006744:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff fd34 	bl	80061b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d004      	beq.n	800675c <tcp_abandon+0x154>
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f06f 010c 	mvn.w	r1, #12
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	4798      	blx	r3
  }
}
 800675c:	3728      	adds	r7, #40	; 0x28
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	080105dc 	.word	0x080105dc
 8006768:	08010720 	.word	0x08010720
 800676c:	08010620 	.word	0x08010620
 8006770:	0801073c 	.word	0x0801073c
 8006774:	20008bc4 	.word	0x20008bc4
 8006778:	20008bc0 	.word	0x20008bc0
 800677c:	20008bb4 	.word	0x20008bb4
 8006780:	20008bb0 	.word	0x20008bb0

08006784 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800678c:	2101      	movs	r1, #1
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ff3a 	bl	8006608 <tcp_abandon>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <tcp_update_rcv_ann_wnd+0x1c>
 80067aa:	4b25      	ldr	r3, [pc, #148]	; (8006840 <tcp_update_rcv_ann_wnd+0xa4>)
 80067ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 80067b0:	4924      	ldr	r1, [pc, #144]	; (8006844 <tcp_update_rcv_ann_wnd+0xa8>)
 80067b2:	4825      	ldr	r0, [pc, #148]	; (8006848 <tcp_update_rcv_ann_wnd+0xac>)
 80067b4:	f007 ffb8 	bl	800e728 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80067c0:	4413      	add	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80067cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80067d0:	bf28      	it	cs
 80067d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80067d6:	b292      	uxth	r2, r2
 80067d8:	4413      	add	r3, r2
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	db08      	blt.n	80067f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	e020      	b.n	8006836 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	dd03      	ble.n	800680a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006808:	e014      	b.n	8006834 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d306      	bcc.n	800682c <tcp_update_rcv_ann_wnd+0x90>
 800681e:	4b08      	ldr	r3, [pc, #32]	; (8006840 <tcp_update_rcv_ann_wnd+0xa4>)
 8006820:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006824:	4909      	ldr	r1, [pc, #36]	; (800684c <tcp_update_rcv_ann_wnd+0xb0>)
 8006826:	4808      	ldr	r0, [pc, #32]	; (8006848 <tcp_update_rcv_ann_wnd+0xac>)
 8006828:	f007 ff7e 	bl	800e728 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	b29a      	uxth	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006834:	2300      	movs	r3, #0
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	080105dc 	.word	0x080105dc
 8006844:	08010838 	.word	0x08010838
 8006848:	08010620 	.word	0x08010620
 800684c:	0801085c 	.word	0x0801085c

08006850 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d107      	bne.n	8006872 <tcp_recved+0x22>
 8006862:	4b1f      	ldr	r3, [pc, #124]	; (80068e0 <tcp_recved+0x90>)
 8006864:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006868:	491e      	ldr	r1, [pc, #120]	; (80068e4 <tcp_recved+0x94>)
 800686a:	481f      	ldr	r0, [pc, #124]	; (80068e8 <tcp_recved+0x98>)
 800686c:	f007 ff5c 	bl	800e728 <iprintf>
 8006870:	e032      	b.n	80068d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	7d1b      	ldrb	r3, [r3, #20]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d106      	bne.n	8006888 <tcp_recved+0x38>
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <tcp_recved+0x90>)
 800687c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006880:	491a      	ldr	r1, [pc, #104]	; (80068ec <tcp_recved+0x9c>)
 8006882:	4819      	ldr	r0, [pc, #100]	; (80068e8 <tcp_recved+0x98>)
 8006884:	f007 ff50 	bl	800e728 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800688c:	887b      	ldrh	r3, [r7, #2]
 800688e:	4413      	add	r3, r2
 8006890:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006892:	89fb      	ldrh	r3, [r7, #14]
 8006894:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006898:	d804      	bhi.n	80068a4 <tcp_recved+0x54>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689e:	89fa      	ldrh	r2, [r7, #14]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d204      	bcs.n	80068ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80068aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80068ac:	e002      	b.n	80068b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	89fa      	ldrh	r2, [r7, #14]
 80068b2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff ff71 	bl	800679c <tcp_update_rcv_ann_wnd>
 80068ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80068c2:	d309      	bcc.n	80068d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8b5b      	ldrh	r3, [r3, #26]
 80068c8:	f043 0302 	orr.w	r3, r3, #2
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f003 fe3e 	bl	800a554 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	080105dc 	.word	0x080105dc
 80068e4:	08010878 	.word	0x08010878
 80068e8:	08010620 	.word	0x08010620
 80068ec:	08010890 	.word	0x08010890

080068f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80068f0:	b5b0      	push	{r4, r5, r7, lr}
 80068f2:	b090      	sub	sp, #64	; 0x40
 80068f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80068fc:	4b94      	ldr	r3, [pc, #592]	; (8006b50 <tcp_slowtmr+0x260>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	4a93      	ldr	r2, [pc, #588]	; (8006b50 <tcp_slowtmr+0x260>)
 8006904:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006906:	4b93      	ldr	r3, [pc, #588]	; (8006b54 <tcp_slowtmr+0x264>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	3301      	adds	r3, #1
 800690c:	b2da      	uxtb	r2, r3
 800690e:	4b91      	ldr	r3, [pc, #580]	; (8006b54 <tcp_slowtmr+0x264>)
 8006910:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006916:	4b90      	ldr	r3, [pc, #576]	; (8006b58 <tcp_slowtmr+0x268>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800691c:	e29f      	b.n	8006e5e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	7d1b      	ldrb	r3, [r3, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <tcp_slowtmr+0x44>
 8006926:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <tcp_slowtmr+0x26c>)
 8006928:	f240 42be 	movw	r2, #1214	; 0x4be
 800692c:	498c      	ldr	r1, [pc, #560]	; (8006b60 <tcp_slowtmr+0x270>)
 800692e:	488d      	ldr	r0, [pc, #564]	; (8006b64 <tcp_slowtmr+0x274>)
 8006930:	f007 fefa 	bl	800e728 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	7d1b      	ldrb	r3, [r3, #20]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d106      	bne.n	800694a <tcp_slowtmr+0x5a>
 800693c:	4b87      	ldr	r3, [pc, #540]	; (8006b5c <tcp_slowtmr+0x26c>)
 800693e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006942:	4989      	ldr	r1, [pc, #548]	; (8006b68 <tcp_slowtmr+0x278>)
 8006944:	4887      	ldr	r0, [pc, #540]	; (8006b64 <tcp_slowtmr+0x274>)
 8006946:	f007 feef 	bl	800e728 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	7d1b      	ldrb	r3, [r3, #20]
 800694e:	2b0a      	cmp	r3, #10
 8006950:	d106      	bne.n	8006960 <tcp_slowtmr+0x70>
 8006952:	4b82      	ldr	r3, [pc, #520]	; (8006b5c <tcp_slowtmr+0x26c>)
 8006954:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006958:	4984      	ldr	r1, [pc, #528]	; (8006b6c <tcp_slowtmr+0x27c>)
 800695a:	4882      	ldr	r0, [pc, #520]	; (8006b64 <tcp_slowtmr+0x274>)
 800695c:	f007 fee4 	bl	800e728 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	7f9a      	ldrb	r2, [r3, #30]
 8006964:	4b7b      	ldr	r3, [pc, #492]	; (8006b54 <tcp_slowtmr+0x264>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d105      	bne.n	8006978 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006976:	e272      	b.n	8006e5e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006978:	4b76      	ldr	r3, [pc, #472]	; (8006b54 <tcp_slowtmr+0x264>)
 800697a:	781a      	ldrb	r2, [r3, #0]
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	7d1b      	ldrb	r3, [r3, #20]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d10a      	bne.n	80069aa <tcp_slowtmr+0xba>
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800699a:	2b05      	cmp	r3, #5
 800699c:	d905      	bls.n	80069aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800699e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a2:	3301      	adds	r3, #1
 80069a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069a8:	e11e      	b.n	8006be8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069b0:	2b0b      	cmp	r3, #11
 80069b2:	d905      	bls.n	80069c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80069b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069b8:	3301      	adds	r3, #1
 80069ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069be:	e113      	b.n	8006be8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d075      	beq.n	8006ab6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d006      	beq.n	80069e0 <tcp_slowtmr+0xf0>
 80069d2:	4b62      	ldr	r3, [pc, #392]	; (8006b5c <tcp_slowtmr+0x26c>)
 80069d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80069d8:	4965      	ldr	r1, [pc, #404]	; (8006b70 <tcp_slowtmr+0x280>)
 80069da:	4862      	ldr	r0, [pc, #392]	; (8006b64 <tcp_slowtmr+0x274>)
 80069dc:	f007 fea4 	bl	800e728 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d106      	bne.n	80069f6 <tcp_slowtmr+0x106>
 80069e8:	4b5c      	ldr	r3, [pc, #368]	; (8006b5c <tcp_slowtmr+0x26c>)
 80069ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80069ee:	4961      	ldr	r1, [pc, #388]	; (8006b74 <tcp_slowtmr+0x284>)
 80069f0:	485c      	ldr	r0, [pc, #368]	; (8006b64 <tcp_slowtmr+0x274>)
 80069f2:	f007 fe99 	bl	800e728 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80069fc:	2b0b      	cmp	r3, #11
 80069fe:	d905      	bls.n	8006a0c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a04:	3301      	adds	r3, #1
 8006a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a0a:	e0ed      	b.n	8006be8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006a12:	3b01      	subs	r3, #1
 8006a14:	4a58      	ldr	r2, [pc, #352]	; (8006b78 <tcp_slowtmr+0x288>)
 8006a16:	5cd3      	ldrb	r3, [r2, r3]
 8006a18:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a20:	7c7a      	ldrb	r2, [r7, #17]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d907      	bls.n	8006a36 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a3c:	7c7a      	ldrb	r2, [r7, #17]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	f200 80d2 	bhi.w	8006be8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006a44:	2301      	movs	r3, #1
 8006a46:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d108      	bne.n	8006a64 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a54:	f004 fc26 	bl	800b2a4 <tcp_zero_window_probe>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d014      	beq.n	8006a88 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	e011      	b.n	8006a88 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a6e:	f003 faeb 	bl	800a048 <tcp_split_unsent_seg>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006a78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a7a:	f003 fd6b 	bl	800a554 <tcp_output>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006a88:	6a3b      	ldr	r3, [r7, #32]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 80ac 	beq.w	8006be8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	f200 80a2 	bhi.w	8006be8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006aaa:	3301      	adds	r3, #1
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006ab4:	e098      	b.n	8006be8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	db0f      	blt.n	8006ae0 <tcp_slowtmr+0x1f0>
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ac6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d008      	beq.n	8006ae0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	b21a      	sxth	r2, r3
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006aec:	429a      	cmp	r2, r3
 8006aee:	db7b      	blt.n	8006be8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af2:	f004 f821 	bl	800ab38 <tcp_rexmit_rto_prepare>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <tcp_slowtmr+0x21c>
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d171      	bne.n	8006be8 <tcp_slowtmr+0x2f8>
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d06d      	beq.n	8006be8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	7d1b      	ldrb	r3, [r3, #20]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d03a      	beq.n	8006b8a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b1a:	2b0c      	cmp	r3, #12
 8006b1c:	bf28      	it	cs
 8006b1e:	230c      	movcs	r3, #12
 8006b20:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006b28:	10db      	asrs	r3, r3, #3
 8006b2a:	b21b      	sxth	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006b34:	4413      	add	r3, r2
 8006b36:	7efa      	ldrb	r2, [r7, #27]
 8006b38:	4910      	ldr	r1, [pc, #64]	; (8006b7c <tcp_slowtmr+0x28c>)
 8006b3a:	5c8a      	ldrb	r2, [r1, r2]
 8006b3c:	4093      	lsls	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006b46:	4293      	cmp	r3, r2
 8006b48:	dc1a      	bgt.n	8006b80 <tcp_slowtmr+0x290>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	b21a      	sxth	r2, r3
 8006b4e:	e019      	b.n	8006b84 <tcp_slowtmr+0x294>
 8006b50:	20008bb8 	.word	0x20008bb8
 8006b54:	20000136 	.word	0x20000136
 8006b58:	20008bb4 	.word	0x20008bb4
 8006b5c:	080105dc 	.word	0x080105dc
 8006b60:	08010920 	.word	0x08010920
 8006b64:	08010620 	.word	0x08010620
 8006b68:	0801094c 	.word	0x0801094c
 8006b6c:	08010978 	.word	0x08010978
 8006b70:	080109a8 	.word	0x080109a8
 8006b74:	080109dc 	.word	0x080109dc
 8006b78:	080125a0 	.word	0x080125a0
 8006b7c:	08012590 	.word	0x08012590
 8006b80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	bf28      	it	cs
 8006ba0:	4613      	movcs	r3, r2
 8006ba2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006ba4:	8a7b      	ldrh	r3, [r7, #18]
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d206      	bcs.n	8006bd0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006be4:	f004 f818 	bl	800ac18 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	7d1b      	ldrb	r3, [r3, #20]
 8006bec:	2b06      	cmp	r3, #6
 8006bee:	d111      	bne.n	8006c14 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	8b5b      	ldrh	r3, [r3, #26]
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006bfc:	4b9d      	ldr	r3, [pc, #628]	; (8006e74 <tcp_slowtmr+0x584>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b28      	cmp	r3, #40	; 0x28
 8006c08:	d904      	bls.n	8006c14 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c0e:	3301      	adds	r3, #1
 8006c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	7a5b      	ldrb	r3, [r3, #9]
 8006c18:	f003 0308 	and.w	r3, r3, #8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d04c      	beq.n	8006cba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006c24:	2b04      	cmp	r3, #4
 8006c26:	d003      	beq.n	8006c30 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006c2c:	2b07      	cmp	r3, #7
 8006c2e:	d144      	bne.n	8006cba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c30:	4b90      	ldr	r3, [pc, #576]	; (8006e74 <tcp_slowtmr+0x584>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c40:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006c44:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006c48:	498b      	ldr	r1, [pc, #556]	; (8006e78 <tcp_slowtmr+0x588>)
 8006c4a:	fba1 1303 	umull	r1, r3, r1, r3
 8006c4e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d90a      	bls.n	8006c6a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006c5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c62:	3301      	adds	r3, #1
 8006c64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c68:	e027      	b.n	8006cba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c6a:	4b82      	ldr	r3, [pc, #520]	; (8006e74 <tcp_slowtmr+0x584>)
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006c80:	4618      	mov	r0, r3
 8006c82:	4b7e      	ldr	r3, [pc, #504]	; (8006e7c <tcp_slowtmr+0x58c>)
 8006c84:	fb03 f300 	mul.w	r3, r3, r0
 8006c88:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006c8a:	497b      	ldr	r1, [pc, #492]	; (8006e78 <tcp_slowtmr+0x588>)
 8006c8c:	fba1 1303 	umull	r1, r3, r1, r3
 8006c90:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d911      	bls.n	8006cba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c98:	f004 fac4 	bl	800b224 <tcp_keepalive>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006ca2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d107      	bne.n	8006cba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d011      	beq.n	8006ce6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006cc2:	4b6c      	ldr	r3, [pc, #432]	; (8006e74 <tcp_slowtmr+0x584>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	440b      	add	r3, r1
 8006cda:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d302      	bcc.n	8006ce6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ce2:	f000 fddb 	bl	800789c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	7d1b      	ldrb	r3, [r3, #20]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d10b      	bne.n	8006d06 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006cee:	4b61      	ldr	r3, [pc, #388]	; (8006e74 <tcp_slowtmr+0x584>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b28      	cmp	r3, #40	; 0x28
 8006cfa:	d904      	bls.n	8006d06 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d00:	3301      	adds	r3, #1
 8006d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	7d1b      	ldrb	r3, [r3, #20]
 8006d0a:	2b09      	cmp	r3, #9
 8006d0c:	d10b      	bne.n	8006d26 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006d0e:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <tcp_slowtmr+0x584>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2bf0      	cmp	r3, #240	; 0xf0
 8006d1a:	d904      	bls.n	8006d26 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d20:	3301      	adds	r3, #1
 8006d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d060      	beq.n	8006df0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d34:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d38:	f000 fbfc 	bl	8007534 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006d42:	4b4f      	ldr	r3, [pc, #316]	; (8006e80 <tcp_slowtmr+0x590>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d106      	bne.n	8006d5a <tcp_slowtmr+0x46a>
 8006d4c:	4b4d      	ldr	r3, [pc, #308]	; (8006e84 <tcp_slowtmr+0x594>)
 8006d4e:	f240 526d 	movw	r2, #1389	; 0x56d
 8006d52:	494d      	ldr	r1, [pc, #308]	; (8006e88 <tcp_slowtmr+0x598>)
 8006d54:	484d      	ldr	r0, [pc, #308]	; (8006e8c <tcp_slowtmr+0x59c>)
 8006d56:	f007 fce7 	bl	800e728 <iprintf>
        prev->next = pcb->next;
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	e00f      	b.n	8006d84 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006d64:	4b46      	ldr	r3, [pc, #280]	; (8006e80 <tcp_slowtmr+0x590>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d006      	beq.n	8006d7c <tcp_slowtmr+0x48c>
 8006d6e:	4b45      	ldr	r3, [pc, #276]	; (8006e84 <tcp_slowtmr+0x594>)
 8006d70:	f240 5271 	movw	r2, #1393	; 0x571
 8006d74:	4946      	ldr	r1, [pc, #280]	; (8006e90 <tcp_slowtmr+0x5a0>)
 8006d76:	4845      	ldr	r0, [pc, #276]	; (8006e8c <tcp_slowtmr+0x59c>)
 8006d78:	f007 fcd6 	bl	800e728 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	4a3f      	ldr	r2, [pc, #252]	; (8006e80 <tcp_slowtmr+0x590>)
 8006d82:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006d84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d013      	beq.n	8006db4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006d94:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	3304      	adds	r3, #4
 8006d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9c:	8ad2      	ldrh	r2, [r2, #22]
 8006d9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da0:	8b09      	ldrh	r1, [r1, #24]
 8006da2:	9102      	str	r1, [sp, #8]
 8006da4:	9201      	str	r2, [sp, #4]
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	462b      	mov	r3, r5
 8006daa:	4622      	mov	r2, r4
 8006dac:	4601      	mov	r1, r0
 8006dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006db0:	f004 f984 	bl	800b0bc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	7d1b      	ldrb	r3, [r3, #20]
 8006dbe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006dca:	6838      	ldr	r0, [r7, #0]
 8006dcc:	f7ff f9f2 	bl	80061b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006dd0:	4b30      	ldr	r3, [pc, #192]	; (8006e94 <tcp_slowtmr+0x5a4>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <tcp_slowtmr+0x4f6>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f06f 010c 	mvn.w	r1, #12
 8006de2:	68b8      	ldr	r0, [r7, #8]
 8006de4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006de6:	4b2b      	ldr	r3, [pc, #172]	; (8006e94 <tcp_slowtmr+0x5a4>)
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d037      	beq.n	8006e5e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006dee:	e590      	b.n	8006912 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	7f1b      	ldrb	r3, [r3, #28]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	7f1a      	ldrb	r2, [r3, #28]
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0c:	7f5b      	ldrb	r3, [r3, #29]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d325      	bcc.n	8006e5e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006e18:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <tcp_slowtmr+0x5a4>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <tcp_slowtmr+0x550>
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e30:	6912      	ldr	r2, [r2, #16]
 8006e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e34:	4610      	mov	r0, r2
 8006e36:	4798      	blx	r3
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006e3e:	e002      	b.n	8006e46 <tcp_slowtmr+0x556>
 8006e40:	2300      	movs	r3, #0
 8006e42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <tcp_slowtmr+0x5a4>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d000      	beq.n	8006e50 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006e4e:	e560      	b.n	8006912 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006e50:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d102      	bne.n	8006e5e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5a:	f003 fb7b 	bl	800a554 <tcp_output>
  while (pcb != NULL) {
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f47f ad5c 	bne.w	800691e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <tcp_slowtmr+0x5a8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006e70:	e067      	b.n	8006f42 <tcp_slowtmr+0x652>
 8006e72:	bf00      	nop
 8006e74:	20008bb8 	.word	0x20008bb8
 8006e78:	10624dd3 	.word	0x10624dd3
 8006e7c:	000124f8 	.word	0x000124f8
 8006e80:	20008bb4 	.word	0x20008bb4
 8006e84:	080105dc 	.word	0x080105dc
 8006e88:	08010a14 	.word	0x08010a14
 8006e8c:	08010620 	.word	0x08010620
 8006e90:	08010a40 	.word	0x08010a40
 8006e94:	20008bb0 	.word	0x20008bb0
 8006e98:	20008bc4 	.word	0x20008bc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	7d1b      	ldrb	r3, [r3, #20]
 8006ea0:	2b0a      	cmp	r3, #10
 8006ea2:	d006      	beq.n	8006eb2 <tcp_slowtmr+0x5c2>
 8006ea4:	4b2b      	ldr	r3, [pc, #172]	; (8006f54 <tcp_slowtmr+0x664>)
 8006ea6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006eaa:	492b      	ldr	r1, [pc, #172]	; (8006f58 <tcp_slowtmr+0x668>)
 8006eac:	482b      	ldr	r0, [pc, #172]	; (8006f5c <tcp_slowtmr+0x66c>)
 8006eae:	f007 fc3b 	bl	800e728 <iprintf>
    pcb_remove = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006eb8:	4b29      	ldr	r3, [pc, #164]	; (8006f60 <tcp_slowtmr+0x670>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2bf0      	cmp	r3, #240	; 0xf0
 8006ec4:	d904      	bls.n	8006ed0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eca:	3301      	adds	r3, #1
 8006ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d02f      	beq.n	8006f38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eda:	f000 fb2b 	bl	8007534 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d010      	beq.n	8006f06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006ee4:	4b1f      	ldr	r3, [pc, #124]	; (8006f64 <tcp_slowtmr+0x674>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d106      	bne.n	8006efc <tcp_slowtmr+0x60c>
 8006eee:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <tcp_slowtmr+0x664>)
 8006ef0:	f240 52af 	movw	r2, #1455	; 0x5af
 8006ef4:	491c      	ldr	r1, [pc, #112]	; (8006f68 <tcp_slowtmr+0x678>)
 8006ef6:	4819      	ldr	r0, [pc, #100]	; (8006f5c <tcp_slowtmr+0x66c>)
 8006ef8:	f007 fc16 	bl	800e728 <iprintf>
        prev->next = pcb->next;
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	60da      	str	r2, [r3, #12]
 8006f04:	e00f      	b.n	8006f26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006f06:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <tcp_slowtmr+0x674>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d006      	beq.n	8006f1e <tcp_slowtmr+0x62e>
 8006f10:	4b10      	ldr	r3, [pc, #64]	; (8006f54 <tcp_slowtmr+0x664>)
 8006f12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006f16:	4915      	ldr	r1, [pc, #84]	; (8006f6c <tcp_slowtmr+0x67c>)
 8006f18:	4810      	ldr	r0, [pc, #64]	; (8006f5c <tcp_slowtmr+0x66c>)
 8006f1a:	f007 fc05 	bl	800e728 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	4a10      	ldr	r2, [pc, #64]	; (8006f64 <tcp_slowtmr+0x674>)
 8006f24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006f30:	69f8      	ldr	r0, [r7, #28]
 8006f32:	f7ff f93f 	bl	80061b4 <tcp_free>
 8006f36:	e004      	b.n	8006f42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1a9      	bne.n	8006e9c <tcp_slowtmr+0x5ac>
    }
  }
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	3730      	adds	r7, #48	; 0x30
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bdb0      	pop	{r4, r5, r7, pc}
 8006f52:	bf00      	nop
 8006f54:	080105dc 	.word	0x080105dc
 8006f58:	08010a6c 	.word	0x08010a6c
 8006f5c:	08010620 	.word	0x08010620
 8006f60:	20008bb8 	.word	0x20008bb8
 8006f64:	20008bc4 	.word	0x20008bc4
 8006f68:	08010a9c 	.word	0x08010a9c
 8006f6c:	08010ac4 	.word	0x08010ac4

08006f70 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006f76:	4b2d      	ldr	r3, [pc, #180]	; (800702c <tcp_fasttmr+0xbc>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	4b2b      	ldr	r3, [pc, #172]	; (800702c <tcp_fasttmr+0xbc>)
 8006f80:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006f82:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <tcp_fasttmr+0xc0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006f88:	e048      	b.n	800701c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7f9a      	ldrb	r2, [r3, #30]
 8006f8e:	4b27      	ldr	r3, [pc, #156]	; (800702c <tcp_fasttmr+0xbc>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d03f      	beq.n	8007016 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006f96:	4b25      	ldr	r3, [pc, #148]	; (800702c <tcp_fasttmr+0xbc>)
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8b5b      	ldrh	r3, [r3, #26]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d010      	beq.n	8006fcc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8b5b      	ldrh	r3, [r3, #26]
 8006fae:	f043 0302 	orr.w	r3, r3, #2
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f003 facb 	bl	800a554 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	8b5b      	ldrh	r3, [r3, #26]
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8b5b      	ldrh	r3, [r3, #26]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d009      	beq.n	8006fec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	8b5b      	ldrh	r3, [r3, #26]
 8006fdc:	f023 0308 	bic.w	r3, r3, #8
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7ff fa78 	bl	80064dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006ffa:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <tcp_fasttmr+0xc4>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f819 	bl	8007038 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007006:	4b0b      	ldr	r3, [pc, #44]	; (8007034 <tcp_fasttmr+0xc4>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d000      	beq.n	8007010 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800700e:	e7b8      	b.n	8006f82 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	e002      	b.n	800701c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1b3      	bne.n	8006f8a <tcp_fasttmr+0x1a>
    }
  }
}
 8007022:	bf00      	nop
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	20000136 	.word	0x20000136
 8007030:	20008bb4 	.word	0x20008bb4
 8007034:	20008bb0 	.word	0x20008bb0

08007038 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <tcp_process_refused_data+0x22>
 8007046:	4b37      	ldr	r3, [pc, #220]	; (8007124 <tcp_process_refused_data+0xec>)
 8007048:	f240 6209 	movw	r2, #1545	; 0x609
 800704c:	4936      	ldr	r1, [pc, #216]	; (8007128 <tcp_process_refused_data+0xf0>)
 800704e:	4837      	ldr	r0, [pc, #220]	; (800712c <tcp_process_refused_data+0xf4>)
 8007050:	f007 fb6a 	bl	800e728 <iprintf>
 8007054:	f06f 030f 	mvn.w	r3, #15
 8007058:	e060      	b.n	800711c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800705e:	7b5b      	ldrb	r3, [r3, #13]
 8007060:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007066:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <tcp_process_refused_data+0x58>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6918      	ldr	r0, [r3, #16]
 8007082:	2300      	movs	r3, #0
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	47a0      	blx	r4
 800708a:	4603      	mov	r3, r0
 800708c:	73fb      	strb	r3, [r7, #15]
 800708e:	e007      	b.n	80070a0 <tcp_process_refused_data+0x68>
 8007090:	2300      	movs	r3, #0
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	2000      	movs	r0, #0
 8007098:	f000 f8a4 	bl	80071e4 <tcp_recv_null>
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80070a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d12a      	bne.n	80070fe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d033      	beq.n	800711a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80070ba:	d005      	beq.n	80070c8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c0:	3301      	adds	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <tcp_process_refused_data+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6918      	ldr	r0, [r3, #16]
 80070dc:	2300      	movs	r3, #0
 80070de:	2200      	movs	r2, #0
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	47a0      	blx	r4
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
 80070e8:	e001      	b.n	80070ee <tcp_process_refused_data+0xb6>
 80070ea:	2300      	movs	r3, #0
 80070ec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80070ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f2:	f113 0f0d 	cmn.w	r3, #13
 80070f6:	d110      	bne.n	800711a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80070f8:	f06f 030c 	mvn.w	r3, #12
 80070fc:	e00e      	b.n	800711c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80070fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007102:	f113 0f0d 	cmn.w	r3, #13
 8007106:	d102      	bne.n	800710e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007108:	f06f 030c 	mvn.w	r3, #12
 800710c:	e006      	b.n	800711c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007114:	f06f 0304 	mvn.w	r3, #4
 8007118:	e000      	b.n	800711c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	bd90      	pop	{r4, r7, pc}
 8007124:	080105dc 	.word	0x080105dc
 8007128:	08010aec 	.word	0x08010aec
 800712c:	08010620 	.word	0x08010620

08007130 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007138:	e007      	b.n	800714a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f80a 	bl	800715a <tcp_seg_free>
    seg = next;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f4      	bne.n	800713a <tcp_segs_free+0xa>
  }
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00c      	beq.n	8007182 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fcdb 	bl	8005b30 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	2003      	movs	r0, #3
 800717e:	f7fd fec5 	bl	8004f0c <memp_free>
  }
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <tcp_seg_copy+0x1c>
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <tcp_seg_copy+0x4c>)
 800719c:	f240 6282 	movw	r2, #1666	; 0x682
 80071a0:	490e      	ldr	r1, [pc, #56]	; (80071dc <tcp_seg_copy+0x50>)
 80071a2:	480f      	ldr	r0, [pc, #60]	; (80071e0 <tcp_seg_copy+0x54>)
 80071a4:	f007 fac0 	bl	800e728 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80071a8:	2003      	movs	r0, #3
 80071aa:	f7fd fe63 	bl	8004e74 <memp_malloc>
 80071ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <tcp_seg_copy+0x2e>
    return NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	e00a      	b.n	80071d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80071ba:	2210      	movs	r2, #16
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f007 fa82 	bl	800e6c8 <memcpy>
  pbuf_ref(cseg->p);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe fd51 	bl	8005c70 <pbuf_ref>
  return cseg;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	080105dc 	.word	0x080105dc
 80071dc:	08010b30 	.word	0x08010b30
 80071e0:	08010620 	.word	0x08010620

080071e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <tcp_recv_null+0x28>
 80071f8:	4b12      	ldr	r3, [pc, #72]	; (8007244 <tcp_recv_null+0x60>)
 80071fa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80071fe:	4912      	ldr	r1, [pc, #72]	; (8007248 <tcp_recv_null+0x64>)
 8007200:	4812      	ldr	r0, [pc, #72]	; (800724c <tcp_recv_null+0x68>)
 8007202:	f007 fa91 	bl	800e728 <iprintf>
 8007206:	f06f 030f 	mvn.w	r3, #15
 800720a:	e016      	b.n	800723a <tcp_recv_null+0x56>

  if (p != NULL) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	891b      	ldrh	r3, [r3, #8]
 8007216:	4619      	mov	r1, r3
 8007218:	68b8      	ldr	r0, [r7, #8]
 800721a:	f7ff fb19 	bl	8006850 <tcp_recved>
    pbuf_free(p);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fe fc86 	bl	8005b30 <pbuf_free>
 8007224:	e008      	b.n	8007238 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d104      	bne.n	8007238 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800722e:	68b8      	ldr	r0, [r7, #8]
 8007230:	f7ff f9be 	bl	80065b0 <tcp_close>
 8007234:	4603      	mov	r3, r0
 8007236:	e000      	b.n	800723a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	080105dc 	.word	0x080105dc
 8007248:	08010b4c 	.word	0x08010b4c
 800724c:	08010620 	.word	0x08010620

08007250 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800725a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800725e:	2b00      	cmp	r3, #0
 8007260:	db01      	blt.n	8007266 <tcp_kill_prio+0x16>
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	e000      	b.n	8007268 <tcp_kill_prio+0x18>
 8007266:	237f      	movs	r3, #127	; 0x7f
 8007268:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d034      	beq.n	80072da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	3b01      	subs	r3, #1
 8007274:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800727e:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <tcp_kill_prio+0x94>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	e01f      	b.n	80072c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	7d5b      	ldrb	r3, [r3, #21]
 800728a:	7afa      	ldrb	r2, [r7, #11]
 800728c:	429a      	cmp	r2, r3
 800728e:	d80c      	bhi.n	80072aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007294:	7afa      	ldrb	r2, [r7, #11]
 8007296:	429a      	cmp	r2, r3
 8007298:	d112      	bne.n	80072c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <tcp_kill_prio+0x98>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d80a      	bhi.n	80072c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80072aa:	4b0f      	ldr	r3, [pc, #60]	; (80072e8 <tcp_kill_prio+0x98>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	7d5b      	ldrb	r3, [r3, #21]
 80072be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1dc      	bne.n	8007286 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d004      	beq.n	80072dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80072d2:	6938      	ldr	r0, [r7, #16]
 80072d4:	f7ff fa56 	bl	8006784 <tcp_abort>
 80072d8:	e000      	b.n	80072dc <tcp_kill_prio+0x8c>
    return;
 80072da:	bf00      	nop
  }
}
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20008bb4 	.word	0x20008bb4
 80072e8:	20008bb8 	.word	0x20008bb8

080072ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d009      	beq.n	8007310 <tcp_kill_state+0x24>
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	2b09      	cmp	r3, #9
 8007300:	d006      	beq.n	8007310 <tcp_kill_state+0x24>
 8007302:	4b1a      	ldr	r3, [pc, #104]	; (800736c <tcp_kill_state+0x80>)
 8007304:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007308:	4919      	ldr	r1, [pc, #100]	; (8007370 <tcp_kill_state+0x84>)
 800730a:	481a      	ldr	r0, [pc, #104]	; (8007374 <tcp_kill_state+0x88>)
 800730c:	f007 fa0c 	bl	800e728 <iprintf>

  inactivity = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007318:	4b17      	ldr	r3, [pc, #92]	; (8007378 <tcp_kill_state+0x8c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e017      	b.n	8007350 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	7d1b      	ldrb	r3, [r3, #20]
 8007324:	79fa      	ldrb	r2, [r7, #7]
 8007326:	429a      	cmp	r2, r3
 8007328:	d10f      	bne.n	800734a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800732a:	4b14      	ldr	r3, [pc, #80]	; (800737c <tcp_kill_state+0x90>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	429a      	cmp	r2, r3
 8007338:	d807      	bhi.n	800734a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800733a:	4b10      	ldr	r3, [pc, #64]	; (800737c <tcp_kill_state+0x90>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e4      	bne.n	8007320 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800735c:	2100      	movs	r1, #0
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f7ff f952 	bl	8006608 <tcp_abandon>
  }
}
 8007364:	bf00      	nop
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	080105dc 	.word	0x080105dc
 8007370:	08010b68 	.word	0x08010b68
 8007374:	08010620 	.word	0x08010620
 8007378:	20008bb4 	.word	0x20008bb4
 800737c:	20008bb8 	.word	0x20008bb8

08007380 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800738a:	2300      	movs	r3, #0
 800738c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <tcp_kill_timewait+0x58>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	e012      	b.n	80073bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <tcp_kill_timewait+0x5c>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d807      	bhi.n	80073b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80073a6:	4b0d      	ldr	r3, [pc, #52]	; (80073dc <tcp_kill_timewait+0x5c>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e9      	bne.n	8007396 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80073c8:	68b8      	ldr	r0, [r7, #8]
 80073ca:	f7ff f9db 	bl	8006784 <tcp_abort>
  }
}
 80073ce:	bf00      	nop
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20008bc4 	.word	0x20008bc4
 80073dc:	20008bb8 	.word	0x20008bb8

080073e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80073e6:	4b10      	ldr	r3, [pc, #64]	; (8007428 <tcp_handle_closepend+0x48>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80073ec:	e014      	b.n	8007418 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	8b5b      	ldrh	r3, [r3, #26]
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d009      	beq.n	8007414 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8b5b      	ldrh	r3, [r3, #26]
 8007404:	f023 0308 	bic.w	r3, r3, #8
 8007408:	b29a      	uxth	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7ff f864 	bl	80064dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e7      	bne.n	80073ee <tcp_handle_closepend+0xe>
  }
}
 800741e:	bf00      	nop
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20008bb4 	.word	0x20008bb4

0800742c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007436:	2001      	movs	r0, #1
 8007438:	f7fd fd1c 	bl	8004e74 <memp_malloc>
 800743c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d126      	bne.n	8007492 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007444:	f7ff ffcc 	bl	80073e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007448:	f7ff ff9a 	bl	8007380 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800744c:	2001      	movs	r0, #1
 800744e:	f7fd fd11 	bl	8004e74 <memp_malloc>
 8007452:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11b      	bne.n	8007492 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800745a:	2009      	movs	r0, #9
 800745c:	f7ff ff46 	bl	80072ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007460:	2001      	movs	r0, #1
 8007462:	f7fd fd07 	bl	8004e74 <memp_malloc>
 8007466:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d111      	bne.n	8007492 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800746e:	2008      	movs	r0, #8
 8007470:	f7ff ff3c 	bl	80072ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007474:	2001      	movs	r0, #1
 8007476:	f7fd fcfd 	bl	8004e74 <memp_malloc>
 800747a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d107      	bne.n	8007492 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fee3 	bl	8007250 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800748a:	2001      	movs	r0, #1
 800748c:	f7fd fcf2 	bl	8004e74 <memp_malloc>
 8007490:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d03f      	beq.n	8007518 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007498:	229c      	movs	r2, #156	; 0x9c
 800749a:	2100      	movs	r1, #0
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f007 f93b 	bl	800e718 <memset>
    pcb->prio = prio;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	79fa      	ldrb	r2, [r7, #7]
 80074a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80074ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80074b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	22ff      	movs	r2, #255	; 0xff
 80074c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 80074ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2206      	movs	r2, #6
 80074d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2206      	movs	r2, #6
 80074dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <tcp_alloc+0xf8>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80074f6:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <tcp_alloc+0xfc>)
 80074f8:	781a      	ldrb	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007504:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4a08      	ldr	r2, [pc, #32]	; (800752c <tcp_alloc+0x100>)
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4a07      	ldr	r2, [pc, #28]	; (8007530 <tcp_alloc+0x104>)
 8007514:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007518:	68fb      	ldr	r3, [r7, #12]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20008bb8 	.word	0x20008bb8
 8007528:	20000136 	.word	0x20000136
 800752c:	080071e5 	.word	0x080071e5
 8007530:	006ddd00 	.word	0x006ddd00

08007534 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d107      	bne.n	8007552 <tcp_pcb_purge+0x1e>
 8007542:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <tcp_pcb_purge+0x94>)
 8007544:	f640 0251 	movw	r2, #2129	; 0x851
 8007548:	4920      	ldr	r1, [pc, #128]	; (80075cc <tcp_pcb_purge+0x98>)
 800754a:	4821      	ldr	r0, [pc, #132]	; (80075d0 <tcp_pcb_purge+0x9c>)
 800754c:	f007 f8ec 	bl	800e728 <iprintf>
 8007550:	e037      	b.n	80075c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	7d1b      	ldrb	r3, [r3, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d033      	beq.n	80075c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800755e:	2b0a      	cmp	r3, #10
 8007560:	d02f      	beq.n	80075c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007566:	2b01      	cmp	r3, #1
 8007568:	d02b      	beq.n	80075c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fada 	bl	8005b30 <pbuf_free>
      pcb->refused_data = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f986 	bl	800789c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007596:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fdc7 	bl	8007130 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff fdc2 	bl	8007130 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	080105dc 	.word	0x080105dc
 80075cc:	08010c28 	.word	0x08010c28
 80075d0:	08010620 	.word	0x08010620

080075d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <tcp_pcb_remove+0x1e>
 80075e4:	4b3e      	ldr	r3, [pc, #248]	; (80076e0 <tcp_pcb_remove+0x10c>)
 80075e6:	f640 0283 	movw	r2, #2179	; 0x883
 80075ea:	493e      	ldr	r1, [pc, #248]	; (80076e4 <tcp_pcb_remove+0x110>)
 80075ec:	483e      	ldr	r0, [pc, #248]	; (80076e8 <tcp_pcb_remove+0x114>)
 80075ee:	f007 f89b 	bl	800e728 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <tcp_pcb_remove+0x32>
 80075f8:	4b39      	ldr	r3, [pc, #228]	; (80076e0 <tcp_pcb_remove+0x10c>)
 80075fa:	f640 0284 	movw	r2, #2180	; 0x884
 80075fe:	493b      	ldr	r1, [pc, #236]	; (80076ec <tcp_pcb_remove+0x118>)
 8007600:	4839      	ldr	r0, [pc, #228]	; (80076e8 <tcp_pcb_remove+0x114>)
 8007602:	f007 f891 	bl	800e728 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d105      	bne.n	800761c <tcp_pcb_remove+0x48>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e013      	b.n	8007644 <tcp_pcb_remove+0x70>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	e00c      	b.n	800763e <tcp_pcb_remove+0x6a>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d104      	bne.n	8007638 <tcp_pcb_remove+0x64>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	e005      	b.n	8007644 <tcp_pcb_remove+0x70>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ef      	bne.n	8007624 <tcp_pcb_remove+0x50>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2200      	movs	r2, #0
 8007648:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800764a:	6838      	ldr	r0, [r7, #0]
 800764c:	f7ff ff72 	bl	8007534 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	7d1b      	ldrb	r3, [r3, #20]
 8007654:	2b0a      	cmp	r3, #10
 8007656:	d013      	beq.n	8007680 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800765c:	2b01      	cmp	r3, #1
 800765e:	d00f      	beq.n	8007680 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	8b5b      	ldrh	r3, [r3, #26]
 8007664:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007668:	2b00      	cmp	r3, #0
 800766a:	d009      	beq.n	8007680 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	8b5b      	ldrh	r3, [r3, #26]
 8007670:	f043 0302 	orr.w	r3, r3, #2
 8007674:	b29a      	uxth	r2, r3
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800767a:	6838      	ldr	r0, [r7, #0]
 800767c:	f002 ff6a 	bl	800a554 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	7d1b      	ldrb	r3, [r3, #20]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d020      	beq.n	80076ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d006      	beq.n	800769e <tcp_pcb_remove+0xca>
 8007690:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <tcp_pcb_remove+0x10c>)
 8007692:	f640 0293 	movw	r2, #2195	; 0x893
 8007696:	4916      	ldr	r1, [pc, #88]	; (80076f0 <tcp_pcb_remove+0x11c>)
 8007698:	4813      	ldr	r0, [pc, #76]	; (80076e8 <tcp_pcb_remove+0x114>)
 800769a:	f007 f845 	bl	800e728 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d006      	beq.n	80076b4 <tcp_pcb_remove+0xe0>
 80076a6:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <tcp_pcb_remove+0x10c>)
 80076a8:	f640 0294 	movw	r2, #2196	; 0x894
 80076ac:	4911      	ldr	r1, [pc, #68]	; (80076f4 <tcp_pcb_remove+0x120>)
 80076ae:	480e      	ldr	r0, [pc, #56]	; (80076e8 <tcp_pcb_remove+0x114>)
 80076b0:	f007 f83a 	bl	800e728 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d006      	beq.n	80076ca <tcp_pcb_remove+0xf6>
 80076bc:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <tcp_pcb_remove+0x10c>)
 80076be:	f640 0296 	movw	r2, #2198	; 0x896
 80076c2:	490d      	ldr	r1, [pc, #52]	; (80076f8 <tcp_pcb_remove+0x124>)
 80076c4:	4808      	ldr	r0, [pc, #32]	; (80076e8 <tcp_pcb_remove+0x114>)
 80076c6:	f007 f82f 	bl	800e728 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2200      	movs	r2, #0
 80076ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	080105dc 	.word	0x080105dc
 80076e4:	08010c44 	.word	0x08010c44
 80076e8:	08010620 	.word	0x08010620
 80076ec:	08010c60 	.word	0x08010c60
 80076f0:	08010c80 	.word	0x08010c80
 80076f4:	08010c98 	.word	0x08010c98
 80076f8:	08010cb4 	.word	0x08010cb4

080076fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <tcp_next_iss+0x1c>
 800770a:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <tcp_next_iss+0x38>)
 800770c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007710:	4909      	ldr	r1, [pc, #36]	; (8007738 <tcp_next_iss+0x3c>)
 8007712:	480a      	ldr	r0, [pc, #40]	; (800773c <tcp_next_iss+0x40>)
 8007714:	f007 f808 	bl	800e728 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007718:	4b09      	ldr	r3, [pc, #36]	; (8007740 <tcp_next_iss+0x44>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	4b09      	ldr	r3, [pc, #36]	; (8007744 <tcp_next_iss+0x48>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4413      	add	r3, r2
 8007722:	4a07      	ldr	r2, [pc, #28]	; (8007740 <tcp_next_iss+0x44>)
 8007724:	6013      	str	r3, [r2, #0]
  return iss;
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <tcp_next_iss+0x44>)
 8007728:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	080105dc 	.word	0x080105dc
 8007738:	08010ccc 	.word	0x08010ccc
 800773c:	08010620 	.word	0x08010620
 8007740:	2000002c 	.word	0x2000002c
 8007744:	20008bb8 	.word	0x20008bb8

08007748 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	4603      	mov	r3, r0
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <tcp_eff_send_mss_netif+0x22>
 800775c:	4b14      	ldr	r3, [pc, #80]	; (80077b0 <tcp_eff_send_mss_netif+0x68>)
 800775e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007762:	4914      	ldr	r1, [pc, #80]	; (80077b4 <tcp_eff_send_mss_netif+0x6c>)
 8007764:	4814      	ldr	r0, [pc, #80]	; (80077b8 <tcp_eff_send_mss_netif+0x70>)
 8007766:	f006 ffdf 	bl	800e728 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	e019      	b.n	80077a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007778:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800777a:	8afb      	ldrh	r3, [r7, #22]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d012      	beq.n	80077a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007780:	2328      	movs	r3, #40	; 0x28
 8007782:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007784:	8afa      	ldrh	r2, [r7, #22]
 8007786:	8abb      	ldrh	r3, [r7, #20]
 8007788:	429a      	cmp	r2, r3
 800778a:	d904      	bls.n	8007796 <tcp_eff_send_mss_netif+0x4e>
 800778c:	8afa      	ldrh	r2, [r7, #22]
 800778e:	8abb      	ldrh	r3, [r7, #20]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	b29b      	uxth	r3, r3
 8007794:	e000      	b.n	8007798 <tcp_eff_send_mss_netif+0x50>
 8007796:	2300      	movs	r3, #0
 8007798:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800779a:	8a7a      	ldrh	r2, [r7, #18]
 800779c:	89fb      	ldrh	r3, [r7, #14]
 800779e:	4293      	cmp	r3, r2
 80077a0:	bf28      	it	cs
 80077a2:	4613      	movcs	r3, r2
 80077a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80077a6:	89fb      	ldrh	r3, [r7, #14]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	080105dc 	.word	0x080105dc
 80077b4:	08010ce8 	.word	0x08010ce8
 80077b8:	08010620 	.word	0x08010620

080077bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d119      	bne.n	8007804 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80077d0:	4b10      	ldr	r3, [pc, #64]	; (8007814 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80077d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80077d6:	4910      	ldr	r1, [pc, #64]	; (8007818 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80077d8:	4810      	ldr	r0, [pc, #64]	; (800781c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80077da:	f006 ffa5 	bl	800e728 <iprintf>

  while (pcb != NULL) {
 80077de:	e011      	b.n	8007804 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d108      	bne.n	80077fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7fe ffc6 	bl	8006784 <tcp_abort>
      pcb = next;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	e002      	b.n	8007804 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1ea      	bne.n	80077e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	080105dc 	.word	0x080105dc
 8007818:	08010d10 	.word	0x08010d10
 800781c:	08010620 	.word	0x08010620

08007820 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d02a      	beq.n	8007886 <tcp_netif_ip_addr_changed+0x66>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d026      	beq.n	8007886 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <tcp_netif_ip_addr_changed+0x70>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff ffbc 	bl	80077bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007844:	4b13      	ldr	r3, [pc, #76]	; (8007894 <tcp_netif_ip_addr_changed+0x74>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff ffb6 	bl	80077bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d017      	beq.n	8007886 <tcp_netif_ip_addr_changed+0x66>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d013      	beq.n	8007886 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800785e:	4b0e      	ldr	r3, [pc, #56]	; (8007898 <tcp_netif_ip_addr_changed+0x78>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e00c      	b.n	8007880 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d103      	bne.n	800787a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1ef      	bne.n	8007866 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20008bb4 	.word	0x20008bb4
 8007894:	20008bc0 	.word	0x20008bc0
 8007898:	20008bbc 	.word	0x20008bbc

0800789c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d007      	beq.n	80078bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fc3d 	bl	8007130 <tcp_segs_free>
    pcb->ooseq = NULL;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b08d      	sub	sp, #52	; 0x34
 80078c8:	af04      	add	r7, sp, #16
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d105      	bne.n	80078e0 <tcp_input+0x1c>
 80078d4:	4b9b      	ldr	r3, [pc, #620]	; (8007b44 <tcp_input+0x280>)
 80078d6:	2283      	movs	r2, #131	; 0x83
 80078d8:	499b      	ldr	r1, [pc, #620]	; (8007b48 <tcp_input+0x284>)
 80078da:	489c      	ldr	r0, [pc, #624]	; (8007b4c <tcp_input+0x288>)
 80078dc:	f006 ff24 	bl	800e728 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4a9a      	ldr	r2, [pc, #616]	; (8007b50 <tcp_input+0x28c>)
 80078e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	895b      	ldrh	r3, [r3, #10]
 80078ec:	2b13      	cmp	r3, #19
 80078ee:	f240 83c4 	bls.w	800807a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80078f2:	4b98      	ldr	r3, [pc, #608]	; (8007b54 <tcp_input+0x290>)
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	4a97      	ldr	r2, [pc, #604]	; (8007b54 <tcp_input+0x290>)
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	4611      	mov	r1, r2
 80078fc:	4618      	mov	r0, r3
 80078fe:	f005 ff61 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	f040 83ba 	bne.w	800807e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800790a:	4b92      	ldr	r3, [pc, #584]	; (8007b54 <tcp_input+0x290>)
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007912:	2be0      	cmp	r3, #224	; 0xe0
 8007914:	f000 83b3 	beq.w	800807e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007918:	4b8d      	ldr	r3, [pc, #564]	; (8007b50 <tcp_input+0x28c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	899b      	ldrh	r3, [r3, #12]
 800791e:	b29b      	uxth	r3, r3
 8007920:	4618      	mov	r0, r3
 8007922:	f7fc fe51 	bl	80045c8 <lwip_htons>
 8007926:	4603      	mov	r3, r0
 8007928:	0b1b      	lsrs	r3, r3, #12
 800792a:	b29b      	uxth	r3, r3
 800792c:	b2db      	uxtb	r3, r3
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007932:	7cbb      	ldrb	r3, [r7, #18]
 8007934:	2b13      	cmp	r3, #19
 8007936:	f240 83a4 	bls.w	8008082 <tcp_input+0x7be>
 800793a:	7cbb      	ldrb	r3, [r7, #18]
 800793c:	b29a      	uxth	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	891b      	ldrh	r3, [r3, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	f200 839d 	bhi.w	8008082 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007948:	7cbb      	ldrb	r3, [r7, #18]
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b14      	subs	r3, #20
 800794e:	b29a      	uxth	r2, r3
 8007950:	4b81      	ldr	r3, [pc, #516]	; (8007b58 <tcp_input+0x294>)
 8007952:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007954:	4b81      	ldr	r3, [pc, #516]	; (8007b5c <tcp_input+0x298>)
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	895a      	ldrh	r2, [r3, #10]
 800795e:	7cbb      	ldrb	r3, [r7, #18]
 8007960:	b29b      	uxth	r3, r3
 8007962:	429a      	cmp	r2, r3
 8007964:	d309      	bcc.n	800797a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007966:	4b7c      	ldr	r3, [pc, #496]	; (8007b58 <tcp_input+0x294>)
 8007968:	881a      	ldrh	r2, [r3, #0]
 800796a:	4b7d      	ldr	r3, [pc, #500]	; (8007b60 <tcp_input+0x29c>)
 800796c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800796e:	7cbb      	ldrb	r3, [r7, #18]
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fe f856 	bl	8005a24 <pbuf_remove_header>
 8007978:	e04e      	b.n	8007a18 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d105      	bne.n	800798e <tcp_input+0xca>
 8007982:	4b70      	ldr	r3, [pc, #448]	; (8007b44 <tcp_input+0x280>)
 8007984:	22c2      	movs	r2, #194	; 0xc2
 8007986:	4977      	ldr	r1, [pc, #476]	; (8007b64 <tcp_input+0x2a0>)
 8007988:	4870      	ldr	r0, [pc, #448]	; (8007b4c <tcp_input+0x288>)
 800798a:	f006 fecd 	bl	800e728 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800798e:	2114      	movs	r1, #20
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fe f847 	bl	8005a24 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	895a      	ldrh	r2, [r3, #10]
 800799a:	4b71      	ldr	r3, [pc, #452]	; (8007b60 <tcp_input+0x29c>)
 800799c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800799e:	4b6e      	ldr	r3, [pc, #440]	; (8007b58 <tcp_input+0x294>)
 80079a0:	881a      	ldrh	r2, [r3, #0]
 80079a2:	4b6f      	ldr	r3, [pc, #444]	; (8007b60 <tcp_input+0x29c>)
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80079aa:	4b6d      	ldr	r3, [pc, #436]	; (8007b60 <tcp_input+0x29c>)
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7fe f837 	bl	8005a24 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	895b      	ldrh	r3, [r3, #10]
 80079bc:	8a3a      	ldrh	r2, [r7, #16]
 80079be:	429a      	cmp	r2, r3
 80079c0:	f200 8361 	bhi.w	8008086 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	4a64      	ldr	r2, [pc, #400]	; (8007b5c <tcp_input+0x298>)
 80079cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	8a3a      	ldrh	r2, [r7, #16]
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe f824 	bl	8005a24 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	891a      	ldrh	r2, [r3, #8]
 80079e0:	8a3b      	ldrh	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	895b      	ldrh	r3, [r3, #10]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <tcp_input+0x13a>
 80079f2:	4b54      	ldr	r3, [pc, #336]	; (8007b44 <tcp_input+0x280>)
 80079f4:	22df      	movs	r2, #223	; 0xdf
 80079f6:	495c      	ldr	r1, [pc, #368]	; (8007b68 <tcp_input+0x2a4>)
 80079f8:	4854      	ldr	r0, [pc, #336]	; (8007b4c <tcp_input+0x288>)
 80079fa:	f006 fe95 	bl	800e728 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	891a      	ldrh	r2, [r3, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	891b      	ldrh	r3, [r3, #8]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d005      	beq.n	8007a18 <tcp_input+0x154>
 8007a0c:	4b4d      	ldr	r3, [pc, #308]	; (8007b44 <tcp_input+0x280>)
 8007a0e:	22e0      	movs	r2, #224	; 0xe0
 8007a10:	4956      	ldr	r1, [pc, #344]	; (8007b6c <tcp_input+0x2a8>)
 8007a12:	484e      	ldr	r0, [pc, #312]	; (8007b4c <tcp_input+0x288>)
 8007a14:	f006 fe88 	bl	800e728 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007a18:	4b4d      	ldr	r3, [pc, #308]	; (8007b50 <tcp_input+0x28c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	4a4b      	ldr	r2, [pc, #300]	; (8007b50 <tcp_input+0x28c>)
 8007a22:	6814      	ldr	r4, [r2, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fc fdcf 	bl	80045c8 <lwip_htons>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007a2e:	4b48      	ldr	r3, [pc, #288]	; (8007b50 <tcp_input+0x28c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	885b      	ldrh	r3, [r3, #2]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4a46      	ldr	r2, [pc, #280]	; (8007b50 <tcp_input+0x28c>)
 8007a38:	6814      	ldr	r4, [r2, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fc fdc4 	bl	80045c8 <lwip_htons>
 8007a40:	4603      	mov	r3, r0
 8007a42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007a44:	4b42      	ldr	r3, [pc, #264]	; (8007b50 <tcp_input+0x28c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	4a41      	ldr	r2, [pc, #260]	; (8007b50 <tcp_input+0x28c>)
 8007a4c:	6814      	ldr	r4, [r2, #0]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fc fdcf 	bl	80045f2 <lwip_htonl>
 8007a54:	4603      	mov	r3, r0
 8007a56:	6063      	str	r3, [r4, #4]
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	4a45      	ldr	r2, [pc, #276]	; (8007b70 <tcp_input+0x2ac>)
 8007a5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007a5e:	4b3c      	ldr	r3, [pc, #240]	; (8007b50 <tcp_input+0x28c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4a3a      	ldr	r2, [pc, #232]	; (8007b50 <tcp_input+0x28c>)
 8007a66:	6814      	ldr	r4, [r2, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fc fdc2 	bl	80045f2 <lwip_htonl>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	60a3      	str	r3, [r4, #8]
 8007a72:	68a3      	ldr	r3, [r4, #8]
 8007a74:	4a3f      	ldr	r2, [pc, #252]	; (8007b74 <tcp_input+0x2b0>)
 8007a76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007a78:	4b35      	ldr	r3, [pc, #212]	; (8007b50 <tcp_input+0x28c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	89db      	ldrh	r3, [r3, #14]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	4a33      	ldr	r2, [pc, #204]	; (8007b50 <tcp_input+0x28c>)
 8007a82:	6814      	ldr	r4, [r2, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fc fd9f 	bl	80045c8 <lwip_htons>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007a8e:	4b30      	ldr	r3, [pc, #192]	; (8007b50 <tcp_input+0x28c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	899b      	ldrh	r3, [r3, #12]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fc fd96 	bl	80045c8 <lwip_htons>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	4b34      	ldr	r3, [pc, #208]	; (8007b78 <tcp_input+0x2b4>)
 8007aa8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	891a      	ldrh	r2, [r3, #8]
 8007aae:	4b33      	ldr	r3, [pc, #204]	; (8007b7c <tcp_input+0x2b8>)
 8007ab0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007ab2:	4b31      	ldr	r3, [pc, #196]	; (8007b78 <tcp_input+0x2b4>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <tcp_input+0x214>
    tcplen++;
 8007abe:	4b2f      	ldr	r3, [pc, #188]	; (8007b7c <tcp_input+0x2b8>)
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	4b2d      	ldr	r3, [pc, #180]	; (8007b7c <tcp_input+0x2b8>)
 8007ac8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	891a      	ldrh	r2, [r3, #8]
 8007ace:	4b2b      	ldr	r3, [pc, #172]	; (8007b7c <tcp_input+0x2b8>)
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	f200 82d9 	bhi.w	800808a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007adc:	4b28      	ldr	r3, [pc, #160]	; (8007b80 <tcp_input+0x2bc>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	e09d      	b.n	8007c20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	7d1b      	ldrb	r3, [r3, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d105      	bne.n	8007af8 <tcp_input+0x234>
 8007aec:	4b15      	ldr	r3, [pc, #84]	; (8007b44 <tcp_input+0x280>)
 8007aee:	22fb      	movs	r2, #251	; 0xfb
 8007af0:	4924      	ldr	r1, [pc, #144]	; (8007b84 <tcp_input+0x2c0>)
 8007af2:	4816      	ldr	r0, [pc, #88]	; (8007b4c <tcp_input+0x288>)
 8007af4:	f006 fe18 	bl	800e728 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	7d1b      	ldrb	r3, [r3, #20]
 8007afc:	2b0a      	cmp	r3, #10
 8007afe:	d105      	bne.n	8007b0c <tcp_input+0x248>
 8007b00:	4b10      	ldr	r3, [pc, #64]	; (8007b44 <tcp_input+0x280>)
 8007b02:	22fc      	movs	r2, #252	; 0xfc
 8007b04:	4920      	ldr	r1, [pc, #128]	; (8007b88 <tcp_input+0x2c4>)
 8007b06:	4811      	ldr	r0, [pc, #68]	; (8007b4c <tcp_input+0x288>)
 8007b08:	f006 fe0e 	bl	800e728 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	7d1b      	ldrb	r3, [r3, #20]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d105      	bne.n	8007b20 <tcp_input+0x25c>
 8007b14:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <tcp_input+0x280>)
 8007b16:	22fd      	movs	r2, #253	; 0xfd
 8007b18:	491c      	ldr	r1, [pc, #112]	; (8007b8c <tcp_input+0x2c8>)
 8007b1a:	480c      	ldr	r0, [pc, #48]	; (8007b4c <tcp_input+0x288>)
 8007b1c:	f006 fe04 	bl	800e728 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	7a1b      	ldrb	r3, [r3, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d033      	beq.n	8007b90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	7a1a      	ldrb	r2, [r3, #8]
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <tcp_input+0x290>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b34:	3301      	adds	r3, #1
 8007b36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d029      	beq.n	8007b90 <tcp_input+0x2cc>
      prev = pcb;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	61bb      	str	r3, [r7, #24]
      continue;
 8007b40:	e06b      	b.n	8007c1a <tcp_input+0x356>
 8007b42:	bf00      	nop
 8007b44:	08010d44 	.word	0x08010d44
 8007b48:	08010d78 	.word	0x08010d78
 8007b4c:	08010d90 	.word	0x08010d90
 8007b50:	20000148 	.word	0x20000148
 8007b54:	200034b0 	.word	0x200034b0
 8007b58:	2000014c 	.word	0x2000014c
 8007b5c:	20000150 	.word	0x20000150
 8007b60:	2000014e 	.word	0x2000014e
 8007b64:	08010db8 	.word	0x08010db8
 8007b68:	08010dc8 	.word	0x08010dc8
 8007b6c:	08010dd4 	.word	0x08010dd4
 8007b70:	20000158 	.word	0x20000158
 8007b74:	2000015c 	.word	0x2000015c
 8007b78:	20000164 	.word	0x20000164
 8007b7c:	20000162 	.word	0x20000162
 8007b80:	20008bb4 	.word	0x20008bb4
 8007b84:	08010df4 	.word	0x08010df4
 8007b88:	08010e1c 	.word	0x08010e1c
 8007b8c:	08010e48 	.word	0x08010e48
    }

    if (pcb->remote_port == tcphdr->src &&
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	8b1a      	ldrh	r2, [r3, #24]
 8007b94:	4b94      	ldr	r3, [pc, #592]	; (8007de8 <tcp_input+0x524>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d13a      	bne.n	8007c16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	8ada      	ldrh	r2, [r3, #22]
 8007ba4:	4b90      	ldr	r3, [pc, #576]	; (8007de8 <tcp_input+0x524>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d132      	bne.n	8007c16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	4b8d      	ldr	r3, [pc, #564]	; (8007dec <tcp_input+0x528>)
 8007bb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d12c      	bne.n	8007c16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	4b8a      	ldr	r3, [pc, #552]	; (8007dec <tcp_input+0x528>)
 8007bc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d126      	bne.n	8007c16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d106      	bne.n	8007be0 <tcp_input+0x31c>
 8007bd2:	4b87      	ldr	r3, [pc, #540]	; (8007df0 <tcp_input+0x52c>)
 8007bd4:	f240 120d 	movw	r2, #269	; 0x10d
 8007bd8:	4986      	ldr	r1, [pc, #536]	; (8007df4 <tcp_input+0x530>)
 8007bda:	4887      	ldr	r0, [pc, #540]	; (8007df8 <tcp_input+0x534>)
 8007bdc:	f006 fda4 	bl	800e728 <iprintf>
      if (prev != NULL) {
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <tcp_input+0x338>
        prev->next = pcb->next;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007bee:	4b83      	ldr	r3, [pc, #524]	; (8007dfc <tcp_input+0x538>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007bf6:	4a81      	ldr	r2, [pc, #516]	; (8007dfc <tcp_input+0x538>)
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d111      	bne.n	8007c2a <tcp_input+0x366>
 8007c06:	4b7a      	ldr	r3, [pc, #488]	; (8007df0 <tcp_input+0x52c>)
 8007c08:	f240 1215 	movw	r2, #277	; 0x115
 8007c0c:	497c      	ldr	r1, [pc, #496]	; (8007e00 <tcp_input+0x53c>)
 8007c0e:	487a      	ldr	r0, [pc, #488]	; (8007df8 <tcp_input+0x534>)
 8007c10:	f006 fd8a 	bl	800e728 <iprintf>
      break;
 8007c14:	e009      	b.n	8007c2a <tcp_input+0x366>
    }
    prev = pcb;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f47f af5e 	bne.w	8007ae4 <tcp_input+0x220>
 8007c28:	e000      	b.n	8007c2c <tcp_input+0x368>
      break;
 8007c2a:	bf00      	nop
  }

  if (pcb == NULL) {
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f040 8095 	bne.w	8007d5e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c34:	4b73      	ldr	r3, [pc, #460]	; (8007e04 <tcp_input+0x540>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	e03f      	b.n	8007cbc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	7d1b      	ldrb	r3, [r3, #20]
 8007c40:	2b0a      	cmp	r3, #10
 8007c42:	d006      	beq.n	8007c52 <tcp_input+0x38e>
 8007c44:	4b6a      	ldr	r3, [pc, #424]	; (8007df0 <tcp_input+0x52c>)
 8007c46:	f240 121f 	movw	r2, #287	; 0x11f
 8007c4a:	496f      	ldr	r1, [pc, #444]	; (8007e08 <tcp_input+0x544>)
 8007c4c:	486a      	ldr	r0, [pc, #424]	; (8007df8 <tcp_input+0x534>)
 8007c4e:	f006 fd6b 	bl	800e728 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	7a1b      	ldrb	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	7a1a      	ldrb	r2, [r3, #8]
 8007c5e:	4b63      	ldr	r3, [pc, #396]	; (8007dec <tcp_input+0x528>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c66:	3301      	adds	r3, #1
 8007c68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d122      	bne.n	8007cb4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	8b1a      	ldrh	r2, [r3, #24]
 8007c72:	4b5d      	ldr	r3, [pc, #372]	; (8007de8 <tcp_input+0x524>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d11b      	bne.n	8007cb6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	8ada      	ldrh	r2, [r3, #22]
 8007c82:	4b59      	ldr	r3, [pc, #356]	; (8007de8 <tcp_input+0x524>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	885b      	ldrh	r3, [r3, #2]
 8007c88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d113      	bne.n	8007cb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	4b56      	ldr	r3, [pc, #344]	; (8007dec <tcp_input+0x528>)
 8007c94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d10d      	bne.n	8007cb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b53      	ldr	r3, [pc, #332]	; (8007dec <tcp_input+0x528>)
 8007ca0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d107      	bne.n	8007cb6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007ca6:	69f8      	ldr	r0, [r7, #28]
 8007ca8:	f000 fb54 	bl	8008354 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7fd ff3f 	bl	8005b30 <pbuf_free>
        return;
 8007cb2:	e1f0      	b.n	8008096 <tcp_input+0x7d2>
        continue;
 8007cb4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	61fb      	str	r3, [r7, #28]
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1bc      	bne.n	8007c3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007cc6:	4b51      	ldr	r3, [pc, #324]	; (8007e0c <tcp_input+0x548>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	617b      	str	r3, [r7, #20]
 8007ccc:	e02a      	b.n	8007d24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	7a1b      	ldrb	r3, [r3, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00c      	beq.n	8007cf0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	7a1a      	ldrb	r2, [r3, #8]
 8007cda:	4b44      	ldr	r3, [pc, #272]	; (8007dec <tcp_input+0x528>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d002      	beq.n	8007cf0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	61bb      	str	r3, [r7, #24]
        continue;
 8007cee:	e016      	b.n	8007d1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	8ada      	ldrh	r2, [r3, #22]
 8007cf4:	4b3c      	ldr	r3, [pc, #240]	; (8007de8 <tcp_input+0x524>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d10c      	bne.n	8007d1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b39      	ldr	r3, [pc, #228]	; (8007dec <tcp_input+0x528>)
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d00f      	beq.n	8007d2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00d      	beq.n	8007d2e <tcp_input+0x46a>
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d009      	beq.n	8007d2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1d1      	bne.n	8007cce <tcp_input+0x40a>
 8007d2a:	e000      	b.n	8007d2e <tcp_input+0x46a>
            break;
 8007d2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d014      	beq.n	8007d5e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007d42:	4b32      	ldr	r3, [pc, #200]	; (8007e0c <tcp_input+0x548>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007d4a:	4a30      	ldr	r2, [pc, #192]	; (8007e0c <tcp_input+0x548>)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007d50:	6978      	ldr	r0, [r7, #20]
 8007d52:	f000 fa01 	bl	8008158 <tcp_listen_input>
      }
      pbuf_free(p);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fd feea 	bl	8005b30 <pbuf_free>
      return;
 8007d5c:	e19b      	b.n	8008096 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 8160 	beq.w	8008026 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007d66:	4b2a      	ldr	r3, [pc, #168]	; (8007e10 <tcp_input+0x54c>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	891a      	ldrh	r2, [r3, #8]
 8007d70:	4b27      	ldr	r3, [pc, #156]	; (8007e10 <tcp_input+0x54c>)
 8007d72:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007d74:	4a26      	ldr	r2, [pc, #152]	; (8007e10 <tcp_input+0x54c>)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007d7a:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <tcp_input+0x524>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a24      	ldr	r2, [pc, #144]	; (8007e10 <tcp_input+0x54c>)
 8007d80:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007d82:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <tcp_input+0x550>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007d88:	4b23      	ldr	r3, [pc, #140]	; (8007e18 <tcp_input+0x554>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007d8e:	4b23      	ldr	r3, [pc, #140]	; (8007e1c <tcp_input+0x558>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <tcp_input+0x55c>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d006      	beq.n	8007dae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	7b5b      	ldrb	r3, [r3, #13]
 8007da4:	f043 0301 	orr.w	r3, r3, #1
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d038      	beq.n	8007e28 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007db6:	69f8      	ldr	r0, [r7, #28]
 8007db8:	f7ff f93e 	bl	8007038 <tcp_process_refused_data>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f113 0f0d 	cmn.w	r3, #13
 8007dc2:	d007      	beq.n	8007dd4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d02d      	beq.n	8007e28 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007dcc:	4b15      	ldr	r3, [pc, #84]	; (8007e24 <tcp_input+0x560>)
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d029      	beq.n	8007e28 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f040 8104 	bne.w	8007fe6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007dde:	69f8      	ldr	r0, [r7, #28]
 8007de0:	f003 f9be 	bl	800b160 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007de4:	e0ff      	b.n	8007fe6 <tcp_input+0x722>
 8007de6:	bf00      	nop
 8007de8:	20000148 	.word	0x20000148
 8007dec:	200034b0 	.word	0x200034b0
 8007df0:	08010d44 	.word	0x08010d44
 8007df4:	08010e70 	.word	0x08010e70
 8007df8:	08010d90 	.word	0x08010d90
 8007dfc:	20008bb4 	.word	0x20008bb4
 8007e00:	08010e9c 	.word	0x08010e9c
 8007e04:	20008bc4 	.word	0x20008bc4
 8007e08:	08010ec8 	.word	0x08010ec8
 8007e0c:	20008bbc 	.word	0x20008bbc
 8007e10:	20000138 	.word	0x20000138
 8007e14:	20000168 	.word	0x20000168
 8007e18:	20000165 	.word	0x20000165
 8007e1c:	20000160 	.word	0x20000160
 8007e20:	20000164 	.word	0x20000164
 8007e24:	20000162 	.word	0x20000162
      }
    }
    tcp_input_pcb = pcb;
 8007e28:	4a9c      	ldr	r2, [pc, #624]	; (800809c <tcp_input+0x7d8>)
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007e2e:	69f8      	ldr	r0, [r7, #28]
 8007e30:	f000 fb0a 	bl	8008448 <tcp_process>
 8007e34:	4603      	mov	r3, r0
 8007e36:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007e38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e3c:	f113 0f0d 	cmn.w	r3, #13
 8007e40:	f000 80d3 	beq.w	8007fea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007e44:	4b96      	ldr	r3, [pc, #600]	; (80080a0 <tcp_input+0x7dc>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d015      	beq.n	8007e7c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d008      	beq.n	8007e6c <tcp_input+0x5a8>
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	6912      	ldr	r2, [r2, #16]
 8007e64:	f06f 010d 	mvn.w	r1, #13
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007e6c:	69f9      	ldr	r1, [r7, #28]
 8007e6e:	488d      	ldr	r0, [pc, #564]	; (80080a4 <tcp_input+0x7e0>)
 8007e70:	f7ff fbb0 	bl	80075d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8007e74:	69f8      	ldr	r0, [r7, #28]
 8007e76:	f7fe f99d 	bl	80061b4 <tcp_free>
 8007e7a:	e0c1      	b.n	8008000 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007e80:	4b89      	ldr	r3, [pc, #548]	; (80080a8 <tcp_input+0x7e4>)
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01d      	beq.n	8007ec4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007e88:	4b87      	ldr	r3, [pc, #540]	; (80080a8 <tcp_input+0x7e4>)
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <tcp_input+0x5ea>
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	6910      	ldr	r0, [r2, #16]
 8007ea2:	89fa      	ldrh	r2, [r7, #14]
 8007ea4:	69f9      	ldr	r1, [r7, #28]
 8007ea6:	4798      	blx	r3
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	74fb      	strb	r3, [r7, #19]
 8007eac:	e001      	b.n	8007eb2 <tcp_input+0x5ee>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007eb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007eb6:	f113 0f0d 	cmn.w	r3, #13
 8007eba:	f000 8098 	beq.w	8007fee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007ebe:	4b7a      	ldr	r3, [pc, #488]	; (80080a8 <tcp_input+0x7e4>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007ec4:	69f8      	ldr	r0, [r7, #28]
 8007ec6:	f000 f907 	bl	80080d8 <tcp_input_delayed_close>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f040 8090 	bne.w	8007ff2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007ed2:	4b76      	ldr	r3, [pc, #472]	; (80080ac <tcp_input+0x7e8>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d041      	beq.n	8007f5e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d006      	beq.n	8007ef0 <tcp_input+0x62c>
 8007ee2:	4b73      	ldr	r3, [pc, #460]	; (80080b0 <tcp_input+0x7ec>)
 8007ee4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007ee8:	4972      	ldr	r1, [pc, #456]	; (80080b4 <tcp_input+0x7f0>)
 8007eea:	4873      	ldr	r0, [pc, #460]	; (80080b8 <tcp_input+0x7f4>)
 8007eec:	f006 fc1c 	bl	800e728 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	8b5b      	ldrh	r3, [r3, #26]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d008      	beq.n	8007f0e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007efc:	4b6b      	ldr	r3, [pc, #428]	; (80080ac <tcp_input+0x7e8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd fe15 	bl	8005b30 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007f06:	69f8      	ldr	r0, [r7, #28]
 8007f08:	f7fe fc3c 	bl	8006784 <tcp_abort>
            goto aborted;
 8007f0c:	e078      	b.n	8008000 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00c      	beq.n	8007f32 <tcp_input+0x66e>
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	6918      	ldr	r0, [r3, #16]
 8007f22:	4b62      	ldr	r3, [pc, #392]	; (80080ac <tcp_input+0x7e8>)
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	2300      	movs	r3, #0
 8007f28:	69f9      	ldr	r1, [r7, #28]
 8007f2a:	47a0      	blx	r4
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	74fb      	strb	r3, [r7, #19]
 8007f30:	e008      	b.n	8007f44 <tcp_input+0x680>
 8007f32:	4b5e      	ldr	r3, [pc, #376]	; (80080ac <tcp_input+0x7e8>)
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	2300      	movs	r3, #0
 8007f38:	69f9      	ldr	r1, [r7, #28]
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	f7ff f952 	bl	80071e4 <tcp_recv_null>
 8007f40:	4603      	mov	r3, r0
 8007f42:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007f44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f48:	f113 0f0d 	cmn.w	r3, #13
 8007f4c:	d053      	beq.n	8007ff6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007f4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007f56:	4b55      	ldr	r3, [pc, #340]	; (80080ac <tcp_input+0x7e8>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007f5e:	4b50      	ldr	r3, [pc, #320]	; (80080a0 <tcp_input+0x7dc>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d030      	beq.n	8007fcc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f76:	7b5a      	ldrb	r2, [r3, #13]
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f7c:	f042 0220 	orr.w	r2, r2, #32
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	735a      	strb	r2, [r3, #13]
 8007f84:	e022      	b.n	8007fcc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f8e:	d005      	beq.n	8007f9c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f94:	3301      	adds	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <tcp_input+0x6fa>
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	6918      	ldr	r0, [r3, #16]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	69f9      	ldr	r1, [r7, #28]
 8007fb6:	47a0      	blx	r4
 8007fb8:	4603      	mov	r3, r0
 8007fba:	74fb      	strb	r3, [r7, #19]
 8007fbc:	e001      	b.n	8007fc2 <tcp_input+0x6fe>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007fc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fc6:	f113 0f0d 	cmn.w	r3, #13
 8007fca:	d016      	beq.n	8007ffa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007fcc:	4b33      	ldr	r3, [pc, #204]	; (800809c <tcp_input+0x7d8>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007fd2:	69f8      	ldr	r0, [r7, #28]
 8007fd4:	f000 f880 	bl	80080d8 <tcp_input_delayed_close>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10f      	bne.n	8007ffe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007fde:	69f8      	ldr	r0, [r7, #28]
 8007fe0:	f002 fab8 	bl	800a554 <tcp_output>
 8007fe4:	e00c      	b.n	8008000 <tcp_input+0x73c>
        goto aborted;
 8007fe6:	bf00      	nop
 8007fe8:	e00a      	b.n	8008000 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007fea:	bf00      	nop
 8007fec:	e008      	b.n	8008000 <tcp_input+0x73c>
              goto aborted;
 8007fee:	bf00      	nop
 8007ff0:	e006      	b.n	8008000 <tcp_input+0x73c>
          goto aborted;
 8007ff2:	bf00      	nop
 8007ff4:	e004      	b.n	8008000 <tcp_input+0x73c>
            goto aborted;
 8007ff6:	bf00      	nop
 8007ff8:	e002      	b.n	8008000 <tcp_input+0x73c>
              goto aborted;
 8007ffa:	bf00      	nop
 8007ffc:	e000      	b.n	8008000 <tcp_input+0x73c>
          goto aborted;
 8007ffe:	bf00      	nop
    tcp_input_pcb = NULL;
 8008000:	4b26      	ldr	r3, [pc, #152]	; (800809c <tcp_input+0x7d8>)
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008006:	4b29      	ldr	r3, [pc, #164]	; (80080ac <tcp_input+0x7e8>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800800c:	4b2b      	ldr	r3, [pc, #172]	; (80080bc <tcp_input+0x7f8>)
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d03f      	beq.n	8008094 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8008014:	4b29      	ldr	r3, [pc, #164]	; (80080bc <tcp_input+0x7f8>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd fd89 	bl	8005b30 <pbuf_free>
      inseg.p = NULL;
 800801e:	4b27      	ldr	r3, [pc, #156]	; (80080bc <tcp_input+0x7f8>)
 8008020:	2200      	movs	r2, #0
 8008022:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008024:	e036      	b.n	8008094 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008026:	4b26      	ldr	r3, [pc, #152]	; (80080c0 <tcp_input+0x7fc>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	899b      	ldrh	r3, [r3, #12]
 800802c:	b29b      	uxth	r3, r3
 800802e:	4618      	mov	r0, r3
 8008030:	f7fc faca 	bl	80045c8 <lwip_htons>
 8008034:	4603      	mov	r3, r0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d118      	bne.n	8008072 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008040:	4b20      	ldr	r3, [pc, #128]	; (80080c4 <tcp_input+0x800>)
 8008042:	6819      	ldr	r1, [r3, #0]
 8008044:	4b20      	ldr	r3, [pc, #128]	; (80080c8 <tcp_input+0x804>)
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	4b20      	ldr	r3, [pc, #128]	; (80080cc <tcp_input+0x808>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008050:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <tcp_input+0x7fc>)
 8008052:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008054:	885b      	ldrh	r3, [r3, #2]
 8008056:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008058:	4a19      	ldr	r2, [pc, #100]	; (80080c0 <tcp_input+0x7fc>)
 800805a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800805c:	8812      	ldrh	r2, [r2, #0]
 800805e:	b292      	uxth	r2, r2
 8008060:	9202      	str	r2, [sp, #8]
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <tcp_input+0x80c>)
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	4b1a      	ldr	r3, [pc, #104]	; (80080d4 <tcp_input+0x810>)
 800806a:	4602      	mov	r2, r0
 800806c:	2000      	movs	r0, #0
 800806e:	f003 f825 	bl	800b0bc <tcp_rst>
    pbuf_free(p);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fd fd5c 	bl	8005b30 <pbuf_free>
  return;
 8008078:	e00c      	b.n	8008094 <tcp_input+0x7d0>
    goto dropped;
 800807a:	bf00      	nop
 800807c:	e006      	b.n	800808c <tcp_input+0x7c8>
    goto dropped;
 800807e:	bf00      	nop
 8008080:	e004      	b.n	800808c <tcp_input+0x7c8>
    goto dropped;
 8008082:	bf00      	nop
 8008084:	e002      	b.n	800808c <tcp_input+0x7c8>
      goto dropped;
 8008086:	bf00      	nop
 8008088:	e000      	b.n	800808c <tcp_input+0x7c8>
      goto dropped;
 800808a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7fd fd4f 	bl	8005b30 <pbuf_free>
 8008092:	e000      	b.n	8008096 <tcp_input+0x7d2>
  return;
 8008094:	bf00      	nop
}
 8008096:	3724      	adds	r7, #36	; 0x24
 8008098:	46bd      	mov	sp, r7
 800809a:	bd90      	pop	{r4, r7, pc}
 800809c:	20008bc8 	.word	0x20008bc8
 80080a0:	20000165 	.word	0x20000165
 80080a4:	20008bb4 	.word	0x20008bb4
 80080a8:	20000160 	.word	0x20000160
 80080ac:	20000168 	.word	0x20000168
 80080b0:	08010d44 	.word	0x08010d44
 80080b4:	08010ef8 	.word	0x08010ef8
 80080b8:	08010d90 	.word	0x08010d90
 80080bc:	20000138 	.word	0x20000138
 80080c0:	20000148 	.word	0x20000148
 80080c4:	2000015c 	.word	0x2000015c
 80080c8:	20000162 	.word	0x20000162
 80080cc:	20000158 	.word	0x20000158
 80080d0:	200034c0 	.word	0x200034c0
 80080d4:	200034c4 	.word	0x200034c4

080080d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <tcp_input_delayed_close+0x1c>
 80080e6:	4b17      	ldr	r3, [pc, #92]	; (8008144 <tcp_input_delayed_close+0x6c>)
 80080e8:	f240 225a 	movw	r2, #602	; 0x25a
 80080ec:	4916      	ldr	r1, [pc, #88]	; (8008148 <tcp_input_delayed_close+0x70>)
 80080ee:	4817      	ldr	r0, [pc, #92]	; (800814c <tcp_input_delayed_close+0x74>)
 80080f0:	f006 fb1a 	bl	800e728 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80080f4:	4b16      	ldr	r3, [pc, #88]	; (8008150 <tcp_input_delayed_close+0x78>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 0310 	and.w	r3, r3, #16
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01c      	beq.n	800813a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	8b5b      	ldrh	r3, [r3, #26]
 8008104:	f003 0310 	and.w	r3, r3, #16
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10d      	bne.n	8008128 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <tcp_input_delayed_close+0x50>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6912      	ldr	r2, [r2, #16]
 8008120:	f06f 010e 	mvn.w	r1, #14
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	480a      	ldr	r0, [pc, #40]	; (8008154 <tcp_input_delayed_close+0x7c>)
 800812c:	f7ff fa52 	bl	80075d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7fe f83f 	bl	80061b4 <tcp_free>
    return 1;
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	08010d44 	.word	0x08010d44
 8008148:	08010f14 	.word	0x08010f14
 800814c:	08010d90 	.word	0x08010d90
 8008150:	20000165 	.word	0x20000165
 8008154:	20008bb4 	.word	0x20008bb4

08008158 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008158:	b590      	push	{r4, r7, lr}
 800815a:	b08b      	sub	sp, #44	; 0x2c
 800815c:	af04      	add	r7, sp, #16
 800815e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008160:	4b6f      	ldr	r3, [pc, #444]	; (8008320 <tcp_listen_input+0x1c8>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	f040 80d2 	bne.w	8008312 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <tcp_listen_input+0x2a>
 8008174:	4b6b      	ldr	r3, [pc, #428]	; (8008324 <tcp_listen_input+0x1cc>)
 8008176:	f240 2281 	movw	r2, #641	; 0x281
 800817a:	496b      	ldr	r1, [pc, #428]	; (8008328 <tcp_listen_input+0x1d0>)
 800817c:	486b      	ldr	r0, [pc, #428]	; (800832c <tcp_listen_input+0x1d4>)
 800817e:	f006 fad3 	bl	800e728 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008182:	4b67      	ldr	r3, [pc, #412]	; (8008320 <tcp_listen_input+0x1c8>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 0310 	and.w	r3, r3, #16
 800818a:	2b00      	cmp	r3, #0
 800818c:	d019      	beq.n	80081c2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800818e:	4b68      	ldr	r3, [pc, #416]	; (8008330 <tcp_listen_input+0x1d8>)
 8008190:	6819      	ldr	r1, [r3, #0]
 8008192:	4b68      	ldr	r3, [pc, #416]	; (8008334 <tcp_listen_input+0x1dc>)
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	4b67      	ldr	r3, [pc, #412]	; (8008338 <tcp_listen_input+0x1e0>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800819e:	4b67      	ldr	r3, [pc, #412]	; (800833c <tcp_listen_input+0x1e4>)
 80081a0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081a6:	4a65      	ldr	r2, [pc, #404]	; (800833c <tcp_listen_input+0x1e4>)
 80081a8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081aa:	8812      	ldrh	r2, [r2, #0]
 80081ac:	b292      	uxth	r2, r2
 80081ae:	9202      	str	r2, [sp, #8]
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	4b63      	ldr	r3, [pc, #396]	; (8008340 <tcp_listen_input+0x1e8>)
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	4b63      	ldr	r3, [pc, #396]	; (8008344 <tcp_listen_input+0x1ec>)
 80081b8:	4602      	mov	r2, r0
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f002 ff7e 	bl	800b0bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80081c0:	e0a9      	b.n	8008316 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80081c2:	4b57      	ldr	r3, [pc, #348]	; (8008320 <tcp_listen_input+0x1c8>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80a3 	beq.w	8008316 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7d5b      	ldrb	r3, [r3, #21]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff f929 	bl	800742c <tcp_alloc>
 80081da:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d111      	bne.n	8008206 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <tcp_listen_input+0xa8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6910      	ldr	r0, [r2, #16]
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	2100      	movs	r1, #0
 80081f8:	4798      	blx	r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	73bb      	strb	r3, [r7, #14]
      return;
 80081fe:	e08b      	b.n	8008318 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008200:	23f0      	movs	r3, #240	; 0xf0
 8008202:	73bb      	strb	r3, [r7, #14]
      return;
 8008204:	e088      	b.n	8008318 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008206:	4b50      	ldr	r3, [pc, #320]	; (8008348 <tcp_listen_input+0x1f0>)
 8008208:	695a      	ldr	r2, [r3, #20]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800820e:	4b4e      	ldr	r3, [pc, #312]	; (8008348 <tcp_listen_input+0x1f0>)
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	8ada      	ldrh	r2, [r3, #22]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800821e:	4b47      	ldr	r3, [pc, #284]	; (800833c <tcp_listen_input+0x1e4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	b29a      	uxth	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2203      	movs	r2, #3
 800822e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008230:	4b41      	ldr	r3, [pc, #260]	; (8008338 <tcp_listen_input+0x1e0>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008242:	6978      	ldr	r0, [r7, #20]
 8008244:	f7ff fa5a 	bl	80076fc <tcp_next_iss>
 8008248:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008262:	4b35      	ldr	r3, [pc, #212]	; (8008338 <tcp_listen_input+0x1e0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	1e5a      	subs	r2, r3, #1
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7a5b      	ldrb	r3, [r3, #9]
 800827e:	f003 030c 	and.w	r3, r3, #12
 8008282:	b2da      	uxtb	r2, r3
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	7a1a      	ldrb	r2, [r3, #8]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008290:	4b2e      	ldr	r3, [pc, #184]	; (800834c <tcp_listen_input+0x1f4>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	60da      	str	r2, [r3, #12]
 8008298:	4a2c      	ldr	r2, [pc, #176]	; (800834c <tcp_listen_input+0x1f4>)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6013      	str	r3, [r2, #0]
 800829e:	f003 f8cf 	bl	800b440 <tcp_timer_needed>
 80082a2:	4b2b      	ldr	r3, [pc, #172]	; (8008350 <tcp_listen_input+0x1f8>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80082a8:	6978      	ldr	r0, [r7, #20]
 80082aa:	f001 fd8d 	bl	8009dc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80082ae:	4b23      	ldr	r3, [pc, #140]	; (800833c <tcp_listen_input+0x1e4>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	89db      	ldrh	r3, [r3, #14]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4618      	mov	r0, r3
 80082d2:	f004 ffe1 	bl	800d298 <ip4_route>
 80082d6:	4601      	mov	r1, r0
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3304      	adds	r3, #4
 80082dc:	461a      	mov	r2, r3
 80082de:	4620      	mov	r0, r4
 80082e0:	f7ff fa32 	bl	8007748 <tcp_eff_send_mss_netif>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80082ec:	2112      	movs	r1, #18
 80082ee:	6978      	ldr	r0, [r7, #20]
 80082f0:	f002 f842 	bl	800a378 <tcp_enqueue_flags>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80082f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008300:	2100      	movs	r1, #0
 8008302:	6978      	ldr	r0, [r7, #20]
 8008304:	f7fe f980 	bl	8006608 <tcp_abandon>
      return;
 8008308:	e006      	b.n	8008318 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	f002 f922 	bl	800a554 <tcp_output>
  return;
 8008310:	e001      	b.n	8008316 <tcp_listen_input+0x1be>
    return;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <tcp_listen_input+0x1c0>
  return;
 8008316:	bf00      	nop
}
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	bf00      	nop
 8008320:	20000164 	.word	0x20000164
 8008324:	08010d44 	.word	0x08010d44
 8008328:	08010f3c 	.word	0x08010f3c
 800832c:	08010d90 	.word	0x08010d90
 8008330:	2000015c 	.word	0x2000015c
 8008334:	20000162 	.word	0x20000162
 8008338:	20000158 	.word	0x20000158
 800833c:	20000148 	.word	0x20000148
 8008340:	200034c0 	.word	0x200034c0
 8008344:	200034c4 	.word	0x200034c4
 8008348:	200034b0 	.word	0x200034b0
 800834c:	20008bb4 	.word	0x20008bb4
 8008350:	20008bb0 	.word	0x20008bb0

08008354 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af04      	add	r7, sp, #16
 800835a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800835c:	4b2f      	ldr	r3, [pc, #188]	; (800841c <tcp_timewait_input+0xc8>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d153      	bne.n	8008410 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d106      	bne.n	800837c <tcp_timewait_input+0x28>
 800836e:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <tcp_timewait_input+0xcc>)
 8008370:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008374:	492b      	ldr	r1, [pc, #172]	; (8008424 <tcp_timewait_input+0xd0>)
 8008376:	482c      	ldr	r0, [pc, #176]	; (8008428 <tcp_timewait_input+0xd4>)
 8008378:	f006 f9d6 	bl	800e728 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800837c:	4b27      	ldr	r3, [pc, #156]	; (800841c <tcp_timewait_input+0xc8>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	f003 0302 	and.w	r3, r3, #2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d02a      	beq.n	80083de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008388:	4b28      	ldr	r3, [pc, #160]	; (800842c <tcp_timewait_input+0xd8>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b00      	cmp	r3, #0
 8008394:	db2d      	blt.n	80083f2 <tcp_timewait_input+0x9e>
 8008396:	4b25      	ldr	r3, [pc, #148]	; (800842c <tcp_timewait_input+0xd8>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80083a2:	440b      	add	r3, r1
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dc23      	bgt.n	80083f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083aa:	4b21      	ldr	r3, [pc, #132]	; (8008430 <tcp_timewait_input+0xdc>)
 80083ac:	6819      	ldr	r1, [r3, #0]
 80083ae:	4b21      	ldr	r3, [pc, #132]	; (8008434 <tcp_timewait_input+0xe0>)
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	4b1d      	ldr	r3, [pc, #116]	; (800842c <tcp_timewait_input+0xd8>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083ba:	4b1f      	ldr	r3, [pc, #124]	; (8008438 <tcp_timewait_input+0xe4>)
 80083bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083c2:	4a1d      	ldr	r2, [pc, #116]	; (8008438 <tcp_timewait_input+0xe4>)
 80083c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083c6:	8812      	ldrh	r2, [r2, #0]
 80083c8:	b292      	uxth	r2, r2
 80083ca:	9202      	str	r2, [sp, #8]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	4b1b      	ldr	r3, [pc, #108]	; (800843c <tcp_timewait_input+0xe8>)
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <tcp_timewait_input+0xec>)
 80083d4:	4602      	mov	r2, r0
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f002 fe70 	bl	800b0bc <tcp_rst>
      return;
 80083dc:	e01b      	b.n	8008416 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80083de:	4b0f      	ldr	r3, [pc, #60]	; (800841c <tcp_timewait_input+0xc8>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d003      	beq.n	80083f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80083ea:	4b16      	ldr	r3, [pc, #88]	; (8008444 <tcp_timewait_input+0xf0>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80083f2:	4b10      	ldr	r3, [pc, #64]	; (8008434 <tcp_timewait_input+0xe0>)
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00c      	beq.n	8008414 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	8b5b      	ldrh	r3, [r3, #26]
 80083fe:	f043 0302 	orr.w	r3, r3, #2
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f002 f8a3 	bl	800a554 <tcp_output>
  }
  return;
 800840e:	e001      	b.n	8008414 <tcp_timewait_input+0xc0>
    return;
 8008410:	bf00      	nop
 8008412:	e000      	b.n	8008416 <tcp_timewait_input+0xc2>
  return;
 8008414:	bf00      	nop
}
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000164 	.word	0x20000164
 8008420:	08010d44 	.word	0x08010d44
 8008424:	08010f5c 	.word	0x08010f5c
 8008428:	08010d90 	.word	0x08010d90
 800842c:	20000158 	.word	0x20000158
 8008430:	2000015c 	.word	0x2000015c
 8008434:	20000162 	.word	0x20000162
 8008438:	20000148 	.word	0x20000148
 800843c:	200034c0 	.word	0x200034c0
 8008440:	200034c4 	.word	0x200034c4
 8008444:	20008bb8 	.word	0x20008bb8

08008448 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008448:	b590      	push	{r4, r7, lr}
 800844a:	b08d      	sub	sp, #52	; 0x34
 800844c:	af04      	add	r7, sp, #16
 800844e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <tcp_process+0x24>
 800845e:	4ba5      	ldr	r3, [pc, #660]	; (80086f4 <tcp_process+0x2ac>)
 8008460:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008464:	49a4      	ldr	r1, [pc, #656]	; (80086f8 <tcp_process+0x2b0>)
 8008466:	48a5      	ldr	r0, [pc, #660]	; (80086fc <tcp_process+0x2b4>)
 8008468:	f006 f95e 	bl	800e728 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800846c:	4ba4      	ldr	r3, [pc, #656]	; (8008700 <tcp_process+0x2b8>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d04e      	beq.n	8008516 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7d1b      	ldrb	r3, [r3, #20]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d108      	bne.n	8008492 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008484:	4b9f      	ldr	r3, [pc, #636]	; (8008704 <tcp_process+0x2bc>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d123      	bne.n	80084d4 <tcp_process+0x8c>
        acceptable = 1;
 800848c:	2301      	movs	r3, #1
 800848e:	76fb      	strb	r3, [r7, #27]
 8008490:	e020      	b.n	80084d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008496:	4b9c      	ldr	r3, [pc, #624]	; (8008708 <tcp_process+0x2c0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d102      	bne.n	80084a4 <tcp_process+0x5c>
        acceptable = 1;
 800849e:	2301      	movs	r3, #1
 80084a0:	76fb      	strb	r3, [r7, #27]
 80084a2:	e017      	b.n	80084d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80084a4:	4b98      	ldr	r3, [pc, #608]	; (8008708 <tcp_process+0x2c0>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	db10      	blt.n	80084d4 <tcp_process+0x8c>
 80084b2:	4b95      	ldr	r3, [pc, #596]	; (8008708 <tcp_process+0x2c0>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80084be:	440b      	add	r3, r1
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dc06      	bgt.n	80084d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	8b5b      	ldrh	r3, [r3, #26]
 80084ca:	f043 0302 	orr.w	r3, r3, #2
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80084d4:	7efb      	ldrb	r3, [r7, #27]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01b      	beq.n	8008512 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7d1b      	ldrb	r3, [r3, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d106      	bne.n	80084f0 <tcp_process+0xa8>
 80084e2:	4b84      	ldr	r3, [pc, #528]	; (80086f4 <tcp_process+0x2ac>)
 80084e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80084e8:	4988      	ldr	r1, [pc, #544]	; (800870c <tcp_process+0x2c4>)
 80084ea:	4884      	ldr	r0, [pc, #528]	; (80086fc <tcp_process+0x2b4>)
 80084ec:	f006 f91c 	bl	800e728 <iprintf>
      recv_flags |= TF_RESET;
 80084f0:	4b87      	ldr	r3, [pc, #540]	; (8008710 <tcp_process+0x2c8>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f043 0308 	orr.w	r3, r3, #8
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	4b85      	ldr	r3, [pc, #532]	; (8008710 <tcp_process+0x2c8>)
 80084fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8b5b      	ldrh	r3, [r3, #26]
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800850c:	f06f 030d 	mvn.w	r3, #13
 8008510:	e37a      	b.n	8008c08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	e378      	b.n	8008c08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008516:	4b7a      	ldr	r3, [pc, #488]	; (8008700 <tcp_process+0x2b8>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d010      	beq.n	8008544 <tcp_process+0xfc>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7d1b      	ldrb	r3, [r3, #20]
 8008526:	2b02      	cmp	r3, #2
 8008528:	d00c      	beq.n	8008544 <tcp_process+0xfc>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	7d1b      	ldrb	r3, [r3, #20]
 800852e:	2b03      	cmp	r3, #3
 8008530:	d008      	beq.n	8008544 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8b5b      	ldrh	r3, [r3, #26]
 8008536:	f043 0302 	orr.w	r3, r3, #2
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	e361      	b.n	8008c08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8b5b      	ldrh	r3, [r3, #26]
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b00      	cmp	r3, #0
 800854e:	d103      	bne.n	8008558 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008550:	4b70      	ldr	r3, [pc, #448]	; (8008714 <tcp_process+0x2cc>)
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 fc2d 	bl	8009dc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	7d1b      	ldrb	r3, [r3, #20]
 8008572:	3b02      	subs	r3, #2
 8008574:	2b07      	cmp	r3, #7
 8008576:	f200 8337 	bhi.w	8008be8 <tcp_process+0x7a0>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <tcp_process+0x138>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085a1 	.word	0x080085a1
 8008584:	080087d1 	.word	0x080087d1
 8008588:	08008949 	.word	0x08008949
 800858c:	08008973 	.word	0x08008973
 8008590:	08008a97 	.word	0x08008a97
 8008594:	08008949 	.word	0x08008949
 8008598:	08008b23 	.word	0x08008b23
 800859c:	08008bb3 	.word	0x08008bb3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80085a0:	4b57      	ldr	r3, [pc, #348]	; (8008700 <tcp_process+0x2b8>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f000 80e4 	beq.w	8008776 <tcp_process+0x32e>
 80085ae:	4b54      	ldr	r3, [pc, #336]	; (8008700 <tcp_process+0x2b8>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 80dd 	beq.w	8008776 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c0:	1c5a      	adds	r2, r3, #1
 80085c2:	4b50      	ldr	r3, [pc, #320]	; (8008704 <tcp_process+0x2bc>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	f040 80d5 	bne.w	8008776 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80085cc:	4b4e      	ldr	r3, [pc, #312]	; (8008708 <tcp_process+0x2c0>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80085de:	4b49      	ldr	r3, [pc, #292]	; (8008704 <tcp_process+0x2bc>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80085e6:	4b4c      	ldr	r3, [pc, #304]	; (8008718 <tcp_process+0x2d0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	89db      	ldrh	r3, [r3, #14]
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008600:	4b41      	ldr	r3, [pc, #260]	; (8008708 <tcp_process+0x2c0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1e5a      	subs	r2, r3, #1
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2204      	movs	r2, #4
 800860e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f004 fe3d 	bl	800d298 <ip4_route>
 800861e:	4601      	mov	r1, r0
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	461a      	mov	r2, r3
 8008626:	4620      	mov	r0, r4
 8008628:	f7ff f88e 	bl	8007748 <tcp_eff_send_mss_netif>
 800862c:	4603      	mov	r3, r0
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008638:	009a      	lsls	r2, r3, #2
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	f241 111c 	movw	r1, #4380	; 0x111c
 8008644:	428b      	cmp	r3, r1
 8008646:	bf38      	it	cc
 8008648:	460b      	movcc	r3, r1
 800864a:	429a      	cmp	r2, r3
 800864c:	d204      	bcs.n	8008658 <tcp_process+0x210>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	b29b      	uxth	r3, r3
 8008656:	e00d      	b.n	8008674 <tcp_process+0x22c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800865c:	005b      	lsls	r3, r3, #1
 800865e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008662:	4293      	cmp	r3, r2
 8008664:	d904      	bls.n	8008670 <tcp_process+0x228>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	e001      	b.n	8008674 <tcp_process+0x22c>
 8008670:	f241 131c 	movw	r3, #4380	; 0x111c
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <tcp_process+0x24a>
 8008684:	4b1b      	ldr	r3, [pc, #108]	; (80086f4 <tcp_process+0x2ac>)
 8008686:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800868a:	4924      	ldr	r1, [pc, #144]	; (800871c <tcp_process+0x2d4>)
 800868c:	481b      	ldr	r0, [pc, #108]	; (80086fc <tcp_process+0x2b4>)
 800868e:	f006 f84b 	bl	800e728 <iprintf>
        --pcb->snd_queuelen;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d111      	bne.n	80086d2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <tcp_process+0x280>
 80086ba:	4b0e      	ldr	r3, [pc, #56]	; (80086f4 <tcp_process+0x2ac>)
 80086bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80086c0:	4917      	ldr	r1, [pc, #92]	; (8008720 <tcp_process+0x2d8>)
 80086c2:	480e      	ldr	r0, [pc, #56]	; (80086fc <tcp_process+0x2b4>)
 80086c4:	f006 f830 	bl	800e728 <iprintf>
          pcb->unsent = rseg->next;
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80086d0:	e003      	b.n	80086da <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80086da:	69f8      	ldr	r0, [r7, #28]
 80086dc:	f7fe fd3d 	bl	800715a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d11d      	bne.n	8008724 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ee:	861a      	strh	r2, [r3, #48]	; 0x30
 80086f0:	e01f      	b.n	8008732 <tcp_process+0x2ea>
 80086f2:	bf00      	nop
 80086f4:	08010d44 	.word	0x08010d44
 80086f8:	08010f7c 	.word	0x08010f7c
 80086fc:	08010d90 	.word	0x08010d90
 8008700:	20000164 	.word	0x20000164
 8008704:	2000015c 	.word	0x2000015c
 8008708:	20000158 	.word	0x20000158
 800870c:	08010f98 	.word	0x08010f98
 8008710:	20000165 	.word	0x20000165
 8008714:	20008bb8 	.word	0x20008bb8
 8008718:	20000148 	.word	0x20000148
 800871c:	08010fb8 	.word	0x08010fb8
 8008720:	08010fd0 	.word	0x08010fd0
        } else {
          pcb->rtime = 0;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <tcp_process+0x30a>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6910      	ldr	r0, [r2, #16]
 8008746:	2200      	movs	r2, #0
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4798      	blx	r3
 800874c:	4603      	mov	r3, r0
 800874e:	76bb      	strb	r3, [r7, #26]
 8008750:	e001      	b.n	8008756 <tcp_process+0x30e>
 8008752:	2300      	movs	r3, #0
 8008754:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008756:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800875a:	f113 0f0d 	cmn.w	r3, #13
 800875e:	d102      	bne.n	8008766 <tcp_process+0x31e>
          return ERR_ABRT;
 8008760:	f06f 030c 	mvn.w	r3, #12
 8008764:	e250      	b.n	8008c08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8b5b      	ldrh	r3, [r3, #26]
 800876a:	f043 0302 	orr.w	r3, r3, #2
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008774:	e23a      	b.n	8008bec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008776:	4b9d      	ldr	r3, [pc, #628]	; (80089ec <tcp_process+0x5a4>)
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	f003 0310 	and.w	r3, r3, #16
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 8234 	beq.w	8008bec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008784:	4b9a      	ldr	r3, [pc, #616]	; (80089f0 <tcp_process+0x5a8>)
 8008786:	6819      	ldr	r1, [r3, #0]
 8008788:	4b9a      	ldr	r3, [pc, #616]	; (80089f4 <tcp_process+0x5ac>)
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	4b9a      	ldr	r3, [pc, #616]	; (80089f8 <tcp_process+0x5b0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008794:	4b99      	ldr	r3, [pc, #612]	; (80089fc <tcp_process+0x5b4>)
 8008796:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008798:	885b      	ldrh	r3, [r3, #2]
 800879a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800879c:	4a97      	ldr	r2, [pc, #604]	; (80089fc <tcp_process+0x5b4>)
 800879e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087a0:	8812      	ldrh	r2, [r2, #0]
 80087a2:	b292      	uxth	r2, r2
 80087a4:	9202      	str	r2, [sp, #8]
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	4b95      	ldr	r3, [pc, #596]	; (8008a00 <tcp_process+0x5b8>)
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	4b95      	ldr	r3, [pc, #596]	; (8008a04 <tcp_process+0x5bc>)
 80087ae:	4602      	mov	r2, r0
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f002 fc83 	bl	800b0bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087bc:	2b05      	cmp	r3, #5
 80087be:	f200 8215 	bhi.w	8008bec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f002 fa4d 	bl	800ac68 <tcp_rexmit_rto>
      break;
 80087ce:	e20d      	b.n	8008bec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80087d0:	4b86      	ldr	r3, [pc, #536]	; (80089ec <tcp_process+0x5a4>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 80a1 	beq.w	8008920 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80087de:	4b84      	ldr	r3, [pc, #528]	; (80089f0 <tcp_process+0x5a8>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	db7e      	blt.n	80088ec <tcp_process+0x4a4>
 80087ee:	4b80      	ldr	r3, [pc, #512]	; (80089f0 <tcp_process+0x5a8>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	dc77      	bgt.n	80088ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2204      	movs	r2, #4
 8008800:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800880a:	23fa      	movs	r3, #250	; 0xfa
 800880c:	76bb      	strb	r3, [r7, #26]
 800880e:	e01d      	b.n	800884c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008814:	699b      	ldr	r3, [r3, #24]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <tcp_process+0x3e0>
 800881a:	4b7b      	ldr	r3, [pc, #492]	; (8008a08 <tcp_process+0x5c0>)
 800881c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008820:	497a      	ldr	r1, [pc, #488]	; (8008a0c <tcp_process+0x5c4>)
 8008822:	487b      	ldr	r0, [pc, #492]	; (8008a10 <tcp_process+0x5c8>)
 8008824:	f005 ff80 	bl	800e728 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <tcp_process+0x400>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6910      	ldr	r0, [r2, #16]
 800883c:	2200      	movs	r2, #0
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4798      	blx	r3
 8008842:	4603      	mov	r3, r0
 8008844:	76bb      	strb	r3, [r7, #26]
 8008846:	e001      	b.n	800884c <tcp_process+0x404>
 8008848:	23f0      	movs	r3, #240	; 0xf0
 800884a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800884c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008854:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008858:	f113 0f0d 	cmn.w	r3, #13
 800885c:	d002      	beq.n	8008864 <tcp_process+0x41c>
              tcp_abort(pcb);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fd ff90 	bl	8006784 <tcp_abort>
            }
            return ERR_ABRT;
 8008864:	f06f 030c 	mvn.w	r3, #12
 8008868:	e1ce      	b.n	8008c08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fae0 	bl	8008e30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008870:	4b68      	ldr	r3, [pc, #416]	; (8008a14 <tcp_process+0x5cc>)
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d005      	beq.n	8008884 <tcp_process+0x43c>
            recv_acked--;
 8008878:	4b66      	ldr	r3, [pc, #408]	; (8008a14 <tcp_process+0x5cc>)
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	3b01      	subs	r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	4b64      	ldr	r3, [pc, #400]	; (8008a14 <tcp_process+0x5cc>)
 8008882:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008888:	009a      	lsls	r2, r3, #2
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800888e:	005b      	lsls	r3, r3, #1
 8008890:	f241 111c 	movw	r1, #4380	; 0x111c
 8008894:	428b      	cmp	r3, r1
 8008896:	bf38      	it	cc
 8008898:	460b      	movcc	r3, r1
 800889a:	429a      	cmp	r2, r3
 800889c:	d204      	bcs.n	80088a8 <tcp_process+0x460>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	e00d      	b.n	80088c4 <tcp_process+0x47c>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d904      	bls.n	80088c0 <tcp_process+0x478>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	b29b      	uxth	r3, r3
 80088be:	e001      	b.n	80088c4 <tcp_process+0x47c>
 80088c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80088ca:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <tcp_process+0x5d0>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d037      	beq.n	8008946 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	8b5b      	ldrh	r3, [r3, #26]
 80088da:	f043 0302 	orr.w	r3, r3, #2
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2207      	movs	r2, #7
 80088e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80088ea:	e02c      	b.n	8008946 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088ec:	4b40      	ldr	r3, [pc, #256]	; (80089f0 <tcp_process+0x5a8>)
 80088ee:	6819      	ldr	r1, [r3, #0]
 80088f0:	4b40      	ldr	r3, [pc, #256]	; (80089f4 <tcp_process+0x5ac>)
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	4b40      	ldr	r3, [pc, #256]	; (80089f8 <tcp_process+0x5b0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088fc:	4b3f      	ldr	r3, [pc, #252]	; (80089fc <tcp_process+0x5b4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008900:	885b      	ldrh	r3, [r3, #2]
 8008902:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008904:	4a3d      	ldr	r2, [pc, #244]	; (80089fc <tcp_process+0x5b4>)
 8008906:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008908:	8812      	ldrh	r2, [r2, #0]
 800890a:	b292      	uxth	r2, r2
 800890c:	9202      	str	r2, [sp, #8]
 800890e:	9301      	str	r3, [sp, #4]
 8008910:	4b3b      	ldr	r3, [pc, #236]	; (8008a00 <tcp_process+0x5b8>)
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	4b3b      	ldr	r3, [pc, #236]	; (8008a04 <tcp_process+0x5bc>)
 8008916:	4602      	mov	r2, r0
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f002 fbcf 	bl	800b0bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800891e:	e167      	b.n	8008bf0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008920:	4b32      	ldr	r3, [pc, #200]	; (80089ec <tcp_process+0x5a4>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8161 	beq.w	8008bf0 <tcp_process+0x7a8>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	4b30      	ldr	r3, [pc, #192]	; (80089f8 <tcp_process+0x5b0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	f040 8159 	bne.w	8008bf0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f002 f9b4 	bl	800acac <tcp_rexmit>
      break;
 8008944:	e154      	b.n	8008bf0 <tcp_process+0x7a8>
 8008946:	e153      	b.n	8008bf0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fa71 	bl	8008e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800894e:	4b32      	ldr	r3, [pc, #200]	; (8008a18 <tcp_process+0x5d0>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 0320 	and.w	r3, r3, #32
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 814c 	beq.w	8008bf4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	8b5b      	ldrh	r3, [r3, #26]
 8008960:	f043 0302 	orr.w	r3, r3, #2
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2207      	movs	r2, #7
 800896e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008970:	e140      	b.n	8008bf4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa5c 	bl	8008e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008978:	4b27      	ldr	r3, [pc, #156]	; (8008a18 <tcp_process+0x5d0>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	f003 0320 	and.w	r3, r3, #32
 8008980:	2b00      	cmp	r3, #0
 8008982:	d071      	beq.n	8008a68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008984:	4b19      	ldr	r3, [pc, #100]	; (80089ec <tcp_process+0x5a4>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	d060      	beq.n	8008a52 <tcp_process+0x60a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008994:	4b16      	ldr	r3, [pc, #88]	; (80089f0 <tcp_process+0x5a8>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d15a      	bne.n	8008a52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d156      	bne.n	8008a52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8b5b      	ldrh	r3, [r3, #26]
 80089a8:	f043 0302 	orr.w	r3, r3, #2
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7fe fdbe 	bl	8007534 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80089b8:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <tcp_process+0x5d4>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d105      	bne.n	80089ce <tcp_process+0x586>
 80089c2:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <tcp_process+0x5d4>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	4a14      	ldr	r2, [pc, #80]	; (8008a1c <tcp_process+0x5d4>)
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	e02e      	b.n	8008a2c <tcp_process+0x5e4>
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <tcp_process+0x5d4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e027      	b.n	8008a26 <tcp_process+0x5de>
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d11f      	bne.n	8008a20 <tcp_process+0x5d8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	60da      	str	r2, [r3, #12]
 80089e8:	e020      	b.n	8008a2c <tcp_process+0x5e4>
 80089ea:	bf00      	nop
 80089ec:	20000164 	.word	0x20000164
 80089f0:	2000015c 	.word	0x2000015c
 80089f4:	20000162 	.word	0x20000162
 80089f8:	20000158 	.word	0x20000158
 80089fc:	20000148 	.word	0x20000148
 8008a00:	200034c0 	.word	0x200034c0
 8008a04:	200034c4 	.word	0x200034c4
 8008a08:	08010d44 	.word	0x08010d44
 8008a0c:	08010fe4 	.word	0x08010fe4
 8008a10:	08010d90 	.word	0x08010d90
 8008a14:	20000160 	.word	0x20000160
 8008a18:	20000165 	.word	0x20000165
 8008a1c:	20008bb4 	.word	0x20008bb4
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	617b      	str	r3, [r7, #20]
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1d4      	bne.n	80089d6 <tcp_process+0x58e>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	60da      	str	r2, [r3, #12]
 8008a32:	4b77      	ldr	r3, [pc, #476]	; (8008c10 <tcp_process+0x7c8>)
 8008a34:	2201      	movs	r2, #1
 8008a36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	220a      	movs	r2, #10
 8008a3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008a3e:	4b75      	ldr	r3, [pc, #468]	; (8008c14 <tcp_process+0x7cc>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	4a73      	ldr	r2, [pc, #460]	; (8008c14 <tcp_process+0x7cc>)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	f002 fcf8 	bl	800b440 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008a50:	e0d2      	b.n	8008bf8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8b5b      	ldrh	r3, [r3, #26]
 8008a56:	f043 0302 	orr.w	r3, r3, #2
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2208      	movs	r2, #8
 8008a64:	751a      	strb	r2, [r3, #20]
      break;
 8008a66:	e0c7      	b.n	8008bf8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008a68:	4b6b      	ldr	r3, [pc, #428]	; (8008c18 <tcp_process+0x7d0>)
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	f003 0310 	and.w	r3, r3, #16
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80c1 	beq.w	8008bf8 <tcp_process+0x7b0>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a7a:	4b68      	ldr	r3, [pc, #416]	; (8008c1c <tcp_process+0x7d4>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	f040 80ba 	bne.w	8008bf8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 80b5 	bne.w	8008bf8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2206      	movs	r2, #6
 8008a92:	751a      	strb	r2, [r3, #20]
      break;
 8008a94:	e0b0      	b.n	8008bf8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9ca 	bl	8008e30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008a9c:	4b60      	ldr	r3, [pc, #384]	; (8008c20 <tcp_process+0x7d8>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 80a9 	beq.w	8008bfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	8b5b      	ldrh	r3, [r3, #26]
 8008aae:	f043 0302 	orr.w	r3, r3, #2
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7fe fd3b 	bl	8007534 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008abe:	4b59      	ldr	r3, [pc, #356]	; (8008c24 <tcp_process+0x7dc>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d105      	bne.n	8008ad4 <tcp_process+0x68c>
 8008ac8:	4b56      	ldr	r3, [pc, #344]	; (8008c24 <tcp_process+0x7dc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	4a55      	ldr	r2, [pc, #340]	; (8008c24 <tcp_process+0x7dc>)
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	e013      	b.n	8008afc <tcp_process+0x6b4>
 8008ad4:	4b53      	ldr	r3, [pc, #332]	; (8008c24 <tcp_process+0x7dc>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	e00c      	b.n	8008af6 <tcp_process+0x6ae>
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d104      	bne.n	8008af0 <tcp_process+0x6a8>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	60da      	str	r2, [r3, #12]
 8008aee:	e005      	b.n	8008afc <tcp_process+0x6b4>
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1ef      	bne.n	8008adc <tcp_process+0x694>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	60da      	str	r2, [r3, #12]
 8008b02:	4b43      	ldr	r3, [pc, #268]	; (8008c10 <tcp_process+0x7c8>)
 8008b04:	2201      	movs	r2, #1
 8008b06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	220a      	movs	r2, #10
 8008b0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008b0e:	4b41      	ldr	r3, [pc, #260]	; (8008c14 <tcp_process+0x7cc>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]
 8008b16:	4a3f      	ldr	r2, [pc, #252]	; (8008c14 <tcp_process+0x7cc>)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	f002 fc90 	bl	800b440 <tcp_timer_needed>
      }
      break;
 8008b20:	e06c      	b.n	8008bfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f984 	bl	8008e30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008b28:	4b3b      	ldr	r3, [pc, #236]	; (8008c18 <tcp_process+0x7d0>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d065      	beq.n	8008c00 <tcp_process+0x7b8>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b38:	4b38      	ldr	r3, [pc, #224]	; (8008c1c <tcp_process+0x7d4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d15f      	bne.n	8008c00 <tcp_process+0x7b8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d15b      	bne.n	8008c00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7fe fcf3 	bl	8007534 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008b4e:	4b35      	ldr	r3, [pc, #212]	; (8008c24 <tcp_process+0x7dc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d105      	bne.n	8008b64 <tcp_process+0x71c>
 8008b58:	4b32      	ldr	r3, [pc, #200]	; (8008c24 <tcp_process+0x7dc>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	4a31      	ldr	r2, [pc, #196]	; (8008c24 <tcp_process+0x7dc>)
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	e013      	b.n	8008b8c <tcp_process+0x744>
 8008b64:	4b2f      	ldr	r3, [pc, #188]	; (8008c24 <tcp_process+0x7dc>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]
 8008b6a:	e00c      	b.n	8008b86 <tcp_process+0x73e>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d104      	bne.n	8008b80 <tcp_process+0x738>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	60da      	str	r2, [r3, #12]
 8008b7e:	e005      	b.n	8008b8c <tcp_process+0x744>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1ef      	bne.n	8008b6c <tcp_process+0x724>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	60da      	str	r2, [r3, #12]
 8008b92:	4b1f      	ldr	r3, [pc, #124]	; (8008c10 <tcp_process+0x7c8>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	220a      	movs	r2, #10
 8008b9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008b9e:	4b1d      	ldr	r3, [pc, #116]	; (8008c14 <tcp_process+0x7cc>)
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	4a1b      	ldr	r2, [pc, #108]	; (8008c14 <tcp_process+0x7cc>)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	f002 fc48 	bl	800b440 <tcp_timer_needed>
      }
      break;
 8008bb0:	e026      	b.n	8008c00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f93c 	bl	8008e30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008bb8:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <tcp_process+0x7d0>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	f003 0310 	and.w	r3, r3, #16
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01f      	beq.n	8008c04 <tcp_process+0x7bc>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <tcp_process+0x7d4>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d119      	bne.n	8008c04 <tcp_process+0x7bc>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d115      	bne.n	8008c04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008bd8:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <tcp_process+0x7d8>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f043 0310 	orr.w	r3, r3, #16
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	4b0f      	ldr	r3, [pc, #60]	; (8008c20 <tcp_process+0x7d8>)
 8008be4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008be6:	e00d      	b.n	8008c04 <tcp_process+0x7bc>
    default:
      break;
 8008be8:	bf00      	nop
 8008bea:	e00c      	b.n	8008c06 <tcp_process+0x7be>
      break;
 8008bec:	bf00      	nop
 8008bee:	e00a      	b.n	8008c06 <tcp_process+0x7be>
      break;
 8008bf0:	bf00      	nop
 8008bf2:	e008      	b.n	8008c06 <tcp_process+0x7be>
      break;
 8008bf4:	bf00      	nop
 8008bf6:	e006      	b.n	8008c06 <tcp_process+0x7be>
      break;
 8008bf8:	bf00      	nop
 8008bfa:	e004      	b.n	8008c06 <tcp_process+0x7be>
      break;
 8008bfc:	bf00      	nop
 8008bfe:	e002      	b.n	8008c06 <tcp_process+0x7be>
      break;
 8008c00:	bf00      	nop
 8008c02:	e000      	b.n	8008c06 <tcp_process+0x7be>
      break;
 8008c04:	bf00      	nop
  }
  return ERR_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3724      	adds	r7, #36	; 0x24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd90      	pop	{r4, r7, pc}
 8008c10:	20008bb0 	.word	0x20008bb0
 8008c14:	20008bc4 	.word	0x20008bc4
 8008c18:	20000164 	.word	0x20000164
 8008c1c:	2000015c 	.word	0x2000015c
 8008c20:	20000165 	.word	0x20000165
 8008c24:	20008bb4 	.word	0x20008bb4

08008c28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008c28:	b590      	push	{r4, r7, lr}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <tcp_oos_insert_segment+0x1e>
 8008c38:	4b3b      	ldr	r3, [pc, #236]	; (8008d28 <tcp_oos_insert_segment+0x100>)
 8008c3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8008c3e:	493b      	ldr	r1, [pc, #236]	; (8008d2c <tcp_oos_insert_segment+0x104>)
 8008c40:	483b      	ldr	r0, [pc, #236]	; (8008d30 <tcp_oos_insert_segment+0x108>)
 8008c42:	f005 fd71 	bl	800e728 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	899b      	ldrh	r3, [r3, #12]
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fb fcba 	bl	80045c8 <lwip_htons>
 8008c54:	4603      	mov	r3, r0
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 0301 	and.w	r3, r3, #1
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d028      	beq.n	8008cb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008c60:	6838      	ldr	r0, [r7, #0]
 8008c62:	f7fe fa65 	bl	8007130 <tcp_segs_free>
    next = NULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	603b      	str	r3, [r7, #0]
 8008c6a:	e056      	b.n	8008d1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	899b      	ldrh	r3, [r3, #12]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fb fca7 	bl	80045c8 <lwip_htons>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00d      	beq.n	8008ca2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	899b      	ldrh	r3, [r3, #12]
 8008c8c:	b29c      	uxth	r4, r3
 8008c8e:	2001      	movs	r0, #1
 8008c90:	f7fb fc9a 	bl	80045c8 <lwip_htons>
 8008c94:	4603      	mov	r3, r0
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4322      	orrs	r2, r4
 8008c9e:	b292      	uxth	r2, r2
 8008ca0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7fe fa54 	bl	800715a <tcp_seg_free>
    while (next &&
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00e      	beq.n	8008cd6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	4b1d      	ldr	r3, [pc, #116]	; (8008d34 <tcp_oos_insert_segment+0x10c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	441a      	add	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	8909      	ldrh	r1, [r1, #8]
 8008cce:	440b      	add	r3, r1
 8008cd0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	daca      	bge.n	8008c6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01e      	beq.n	8008d1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	891b      	ldrh	r3, [r3, #8]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <tcp_oos_insert_segment+0x10c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	441a      	add	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	dd12      	ble.n	8008d1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <tcp_oos_insert_segment+0x10c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	891b      	ldrh	r3, [r3, #8]
 8008d12:	4619      	mov	r1, r3
 8008d14:	4610      	mov	r0, r2
 8008d16:	f7fc fd85 	bl	8005824 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	601a      	str	r2, [r3, #0]
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd90      	pop	{r4, r7, pc}
 8008d28:	08010d44 	.word	0x08010d44
 8008d2c:	08011004 	.word	0x08011004
 8008d30:	08010d90 	.word	0x08010d90
 8008d34:	20000158 	.word	0x20000158

08008d38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008d38:	b5b0      	push	{r4, r5, r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008d46:	e03e      	b.n	8008dc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7fc ff72 	bl	8005c40 <pbuf_clen>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d66:	8a7a      	ldrh	r2, [r7, #18]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d906      	bls.n	8008d7a <tcp_free_acked_segments+0x42>
 8008d6c:	4b2a      	ldr	r3, [pc, #168]	; (8008e18 <tcp_free_acked_segments+0xe0>)
 8008d6e:	f240 4257 	movw	r2, #1111	; 0x457
 8008d72:	492a      	ldr	r1, [pc, #168]	; (8008e1c <tcp_free_acked_segments+0xe4>)
 8008d74:	482a      	ldr	r0, [pc, #168]	; (8008e20 <tcp_free_acked_segments+0xe8>)
 8008d76:	f005 fcd7 	bl	800e728 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008d80:	8a7b      	ldrh	r3, [r7, #18]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	891a      	ldrh	r2, [r3, #8]
 8008d90:	4b24      	ldr	r3, [pc, #144]	; (8008e24 <tcp_free_acked_segments+0xec>)
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	4413      	add	r3, r2
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <tcp_free_acked_segments+0xec>)
 8008d9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008d9c:	6978      	ldr	r0, [r7, #20]
 8008d9e:	f7fe f9dc 	bl	800715a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00c      	beq.n	8008dc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d109      	bne.n	8008dc6 <tcp_free_acked_segments+0x8e>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <tcp_free_acked_segments+0x8e>
 8008db8:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <tcp_free_acked_segments+0xe0>)
 8008dba:	f240 4261 	movw	r2, #1121	; 0x461
 8008dbe:	491a      	ldr	r1, [pc, #104]	; (8008e28 <tcp_free_acked_segments+0xf0>)
 8008dc0:	4817      	ldr	r0, [pc, #92]	; (8008e20 <tcp_free_acked_segments+0xe8>)
 8008dc2:	f005 fcb1 	bl	800e728 <iprintf>
  while (seg_list != NULL &&
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d020      	beq.n	8008e0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fb fc0d 	bl	80045f2 <lwip_htonl>
 8008dd8:	4604      	mov	r4, r0
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	891b      	ldrh	r3, [r3, #8]
 8008dde:	461d      	mov	r5, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	899b      	ldrh	r3, [r3, #12]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fb fbed 	bl	80045c8 <lwip_htons>
 8008dee:	4603      	mov	r3, r0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <tcp_free_acked_segments+0xc6>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e000      	b.n	8008e00 <tcp_free_acked_segments+0xc8>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	442b      	add	r3, r5
 8008e02:	18e2      	adds	r2, r4, r3
 8008e04:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <tcp_free_acked_segments+0xf4>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dd9c      	ble.n	8008d48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bdb0      	pop	{r4, r5, r7, pc}
 8008e18:	08010d44 	.word	0x08010d44
 8008e1c:	0801102c 	.word	0x0801102c
 8008e20:	08010d90 	.word	0x08010d90
 8008e24:	20000160 	.word	0x20000160
 8008e28:	08011054 	.word	0x08011054
 8008e2c:	2000015c 	.word	0x2000015c

08008e30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008e30:	b5b0      	push	{r4, r5, r7, lr}
 8008e32:	b094      	sub	sp, #80	; 0x50
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <tcp_receive+0x20>
 8008e42:	4ba6      	ldr	r3, [pc, #664]	; (80090dc <tcp_receive+0x2ac>)
 8008e44:	f240 427b 	movw	r2, #1147	; 0x47b
 8008e48:	49a5      	ldr	r1, [pc, #660]	; (80090e0 <tcp_receive+0x2b0>)
 8008e4a:	48a6      	ldr	r0, [pc, #664]	; (80090e4 <tcp_receive+0x2b4>)
 8008e4c:	f005 fc6c 	bl	800e728 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7d1b      	ldrb	r3, [r3, #20]
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d806      	bhi.n	8008e66 <tcp_receive+0x36>
 8008e58:	4ba0      	ldr	r3, [pc, #640]	; (80090dc <tcp_receive+0x2ac>)
 8008e5a:	f240 427c 	movw	r2, #1148	; 0x47c
 8008e5e:	49a2      	ldr	r1, [pc, #648]	; (80090e8 <tcp_receive+0x2b8>)
 8008e60:	48a0      	ldr	r0, [pc, #640]	; (80090e4 <tcp_receive+0x2b4>)
 8008e62:	f005 fc61 	bl	800e728 <iprintf>

  if (flags & TCP_ACK) {
 8008e66:	4ba1      	ldr	r3, [pc, #644]	; (80090ec <tcp_receive+0x2bc>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	f003 0310 	and.w	r3, r3, #16
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 8263 	beq.w	800933a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e80:	4413      	add	r3, r2
 8008e82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e88:	4b99      	ldr	r3, [pc, #612]	; (80090f0 <tcp_receive+0x2c0>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	db1b      	blt.n	8008eca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e96:	4b96      	ldr	r3, [pc, #600]	; (80090f0 <tcp_receive+0x2c0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d106      	bne.n	8008eac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ea2:	4b94      	ldr	r3, [pc, #592]	; (80090f4 <tcp_receive+0x2c4>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	db0e      	blt.n	8008eca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008eb0:	4b90      	ldr	r3, [pc, #576]	; (80090f4 <tcp_receive+0x2c4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d125      	bne.n	8008f04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008eb8:	4b8f      	ldr	r3, [pc, #572]	; (80090f8 <tcp_receive+0x2c8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	89db      	ldrh	r3, [r3, #14]
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d91c      	bls.n	8008f04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008eca:	4b8b      	ldr	r3, [pc, #556]	; (80090f8 <tcp_receive+0x2c8>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	89db      	ldrh	r3, [r3, #14]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d205      	bcs.n	8008ef4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008ef4:	4b7e      	ldr	r3, [pc, #504]	; (80090f0 <tcp_receive+0x2c0>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008efc:	4b7d      	ldr	r3, [pc, #500]	; (80090f4 <tcp_receive+0x2c4>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008f04:	4b7b      	ldr	r3, [pc, #492]	; (80090f4 <tcp_receive+0x2c4>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	dc58      	bgt.n	8008fc4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008f12:	4b7a      	ldr	r3, [pc, #488]	; (80090fc <tcp_receive+0x2cc>)
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d14b      	bne.n	8008fb2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008f24:	4413      	add	r3, r2
 8008f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d142      	bne.n	8008fb2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	db3d      	blt.n	8008fb2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f3a:	4b6e      	ldr	r3, [pc, #440]	; (80090f4 <tcp_receive+0x2c4>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d137      	bne.n	8008fb2 <tcp_receive+0x182>
              found_dupack = 1;
 8008f42:	2301      	movs	r3, #1
 8008f44:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f4c:	2bff      	cmp	r3, #255	; 0xff
 8008f4e:	d007      	beq.n	8008f60 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f56:	3301      	adds	r3, #1
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d91b      	bls.n	8008fa2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f74:	4413      	add	r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d30a      	bcc.n	8008f98 <tcp_receive+0x168>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f8c:	4413      	add	r3, r2
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008f96:	e004      	b.n	8008fa2 <tcp_receive+0x172>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d902      	bls.n	8008fb2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 fee9 	bl	800ad84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f040 8160 	bne.w	800927a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fc2:	e15a      	b.n	800927a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008fc4:	4b4b      	ldr	r3, [pc, #300]	; (80090f4 <tcp_receive+0x2c4>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f2c0 814d 	blt.w	8009270 <tcp_receive+0x440>
 8008fd6:	4b47      	ldr	r3, [pc, #284]	; (80090f4 <tcp_receive+0x2c4>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f300 8145 	bgt.w	8009270 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	8b5b      	ldrh	r3, [r3, #26]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d010      	beq.n	8009014 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	8b5b      	ldrh	r3, [r3, #26]
 8008ff6:	f023 0304 	bic.w	r3, r3, #4
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009022:	10db      	asrs	r3, r3, #3
 8009024:	b21b      	sxth	r3, r3
 8009026:	b29a      	uxth	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800902e:	b29b      	uxth	r3, r3
 8009030:	4413      	add	r3, r2
 8009032:	b29b      	uxth	r3, r3
 8009034:	b21a      	sxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800903c:	4b2d      	ldr	r3, [pc, #180]	; (80090f4 <tcp_receive+0x2c4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	b29a      	uxth	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009046:	b29b      	uxth	r3, r3
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009054:	4b27      	ldr	r3, [pc, #156]	; (80090f4 <tcp_receive+0x2c4>)
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	7d1b      	ldrb	r3, [r3, #20]
 8009060:	2b03      	cmp	r3, #3
 8009062:	f240 8096 	bls.w	8009192 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009072:	429a      	cmp	r2, r3
 8009074:	d244      	bcs.n	8009100 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	8b5b      	ldrh	r3, [r3, #26]
 800907a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <tcp_receive+0x256>
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <tcp_receive+0x258>
 8009086:	2302      	movs	r3, #2
 8009088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800908c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009090:	b29a      	uxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009096:	fb12 f303 	smulbb	r3, r2, r3
 800909a:	b29b      	uxth	r3, r3
 800909c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800909e:	4293      	cmp	r3, r2
 80090a0:	bf28      	it	cs
 80090a2:	4613      	movcs	r3, r2
 80090a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80090ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090ae:	4413      	add	r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d309      	bcc.n	80090d0 <tcp_receive+0x2a0>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80090c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80090c4:	4413      	add	r3, r2
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80090ce:	e060      	b.n	8009192 <tcp_receive+0x362>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80090da:	e05a      	b.n	8009192 <tcp_receive+0x362>
 80090dc:	08010d44 	.word	0x08010d44
 80090e0:	08011074 	.word	0x08011074
 80090e4:	08010d90 	.word	0x08010d90
 80090e8:	08011090 	.word	0x08011090
 80090ec:	20000164 	.word	0x20000164
 80090f0:	20000158 	.word	0x20000158
 80090f4:	2000015c 	.word	0x2000015c
 80090f8:	20000148 	.word	0x20000148
 80090fc:	20000162 	.word	0x20000162
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009108:	4413      	add	r3, r2
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009112:	429a      	cmp	r2, r3
 8009114:	d309      	bcc.n	800912a <tcp_receive+0x2fa>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800911c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800911e:	4413      	add	r3, r2
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009128:	e004      	b.n	8009134 <tcp_receive+0x304>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009140:	429a      	cmp	r2, r3
 8009142:	d326      	bcc.n	8009192 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	b29a      	uxth	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009164:	4413      	add	r3, r2
 8009166:	b29a      	uxth	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800916e:	429a      	cmp	r2, r3
 8009170:	d30a      	bcc.n	8009188 <tcp_receive+0x358>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800917c:	4413      	add	r3, r2
 800917e:	b29a      	uxth	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009186:	e004      	b.n	8009192 <tcp_receive+0x362>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800918e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800919a:	4a98      	ldr	r2, [pc, #608]	; (80093fc <tcp_receive+0x5cc>)
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff fdcb 	bl	8008d38 <tcp_free_acked_segments>
 80091a2:	4602      	mov	r2, r0
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b0:	4a93      	ldr	r2, [pc, #588]	; (8009400 <tcp_receive+0x5d0>)
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7ff fdc0 	bl	8008d38 <tcp_free_acked_segments>
 80091b8:	4602      	mov	r2, r0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80091ce:	e002      	b.n	80091d6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d103      	bne.n	80091ec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80091f2:	4b84      	ldr	r3, [pc, #528]	; (8009404 <tcp_receive+0x5d4>)
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	4413      	add	r3, r2
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	8b5b      	ldrh	r3, [r3, #26]
 8009204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009208:	2b00      	cmp	r3, #0
 800920a:	d035      	beq.n	8009278 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009210:	2b00      	cmp	r3, #0
 8009212:	d118      	bne.n	8009246 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4618      	mov	r0, r3
 800922a:	f7fb f9e2 	bl	80045f2 <lwip_htonl>
 800922e:	4603      	mov	r3, r0
 8009230:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009232:	2b00      	cmp	r3, #0
 8009234:	dc20      	bgt.n	8009278 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8b5b      	ldrh	r3, [r3, #26]
 800923a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009244:	e018      	b.n	8009278 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4618      	mov	r0, r3
 8009254:	f7fb f9cd 	bl	80045f2 <lwip_htonl>
 8009258:	4603      	mov	r3, r0
 800925a:	1ae3      	subs	r3, r4, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	dc0b      	bgt.n	8009278 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	8b5b      	ldrh	r3, [r3, #26]
 8009264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009268:	b29a      	uxth	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800926e:	e003      	b.n	8009278 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f001 ff75 	bl	800b160 <tcp_send_empty_ack>
 8009276:	e000      	b.n	800927a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009278:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927e:	2b00      	cmp	r3, #0
 8009280:	d05b      	beq.n	800933a <tcp_receive+0x50a>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009286:	4b60      	ldr	r3, [pc, #384]	; (8009408 <tcp_receive+0x5d8>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	da54      	bge.n	800933a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009290:	4b5e      	ldr	r3, [pc, #376]	; (800940c <tcp_receive+0x5dc>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	b29a      	uxth	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929a:	b29b      	uxth	r3, r3
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80092a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80092ae:	10db      	asrs	r3, r3, #3
 80092b0:	b21b      	sxth	r3, r3
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80092c8:	4413      	add	r3, r2
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	b21a      	sxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80092d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	da05      	bge.n	80092e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80092da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80092de:	425b      	negs	r3, r3
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80092e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80092f0:	109b      	asrs	r3, r3, #2
 80092f2:	b21b      	sxth	r3, r3
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009304:	b29a      	uxth	r2, r3
 8009306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800930a:	4413      	add	r3, r2
 800930c:	b29b      	uxth	r3, r3
 800930e:	b21a      	sxth	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800931a:	10db      	asrs	r3, r3, #3
 800931c:	b21b      	sxth	r3, r3
 800931e:	b29a      	uxth	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009326:	b29b      	uxth	r3, r3
 8009328:	4413      	add	r3, r2
 800932a:	b29b      	uxth	r3, r3
 800932c:	b21a      	sxth	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800933a:	4b35      	ldr	r3, [pc, #212]	; (8009410 <tcp_receive+0x5e0>)
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 84e1 	beq.w	8009d06 <tcp_receive+0xed6>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7d1b      	ldrb	r3, [r3, #20]
 8009348:	2b06      	cmp	r3, #6
 800934a:	f200 84dc 	bhi.w	8009d06 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009352:	4b30      	ldr	r3, [pc, #192]	; (8009414 <tcp_receive+0x5e4>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	f2c0 808e 	blt.w	800947c <tcp_receive+0x64c>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009364:	4b2a      	ldr	r3, [pc, #168]	; (8009410 <tcp_receive+0x5e0>)
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	4619      	mov	r1, r3
 800936a:	4b2a      	ldr	r3, [pc, #168]	; (8009414 <tcp_receive+0x5e4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	440b      	add	r3, r1
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	3301      	adds	r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	f300 8081 	bgt.w	800947c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800937a:	4b27      	ldr	r3, [pc, #156]	; (8009418 <tcp_receive+0x5e8>)
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009384:	4b23      	ldr	r3, [pc, #140]	; (8009414 <tcp_receive+0x5e4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800938c:	4b22      	ldr	r3, [pc, #136]	; (8009418 <tcp_receive+0x5e8>)
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d106      	bne.n	80093a2 <tcp_receive+0x572>
 8009394:	4b21      	ldr	r3, [pc, #132]	; (800941c <tcp_receive+0x5ec>)
 8009396:	f240 5294 	movw	r2, #1428	; 0x594
 800939a:	4921      	ldr	r1, [pc, #132]	; (8009420 <tcp_receive+0x5f0>)
 800939c:	4821      	ldr	r0, [pc, #132]	; (8009424 <tcp_receive+0x5f4>)
 800939e:	f005 f9c3 	bl	800e728 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d906      	bls.n	80093ba <tcp_receive+0x58a>
 80093ac:	4b1b      	ldr	r3, [pc, #108]	; (800941c <tcp_receive+0x5ec>)
 80093ae:	f240 5295 	movw	r2, #1429	; 0x595
 80093b2:	491d      	ldr	r1, [pc, #116]	; (8009428 <tcp_receive+0x5f8>)
 80093b4:	481b      	ldr	r0, [pc, #108]	; (8009424 <tcp_receive+0x5f4>)
 80093b6:	f005 f9b7 	bl	800e728 <iprintf>
      off = (u16_t)off32;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80093c0:	4b15      	ldr	r3, [pc, #84]	; (8009418 <tcp_receive+0x5e8>)
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	891b      	ldrh	r3, [r3, #8]
 80093c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d906      	bls.n	80093dc <tcp_receive+0x5ac>
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <tcp_receive+0x5ec>)
 80093d0:	f240 5297 	movw	r2, #1431	; 0x597
 80093d4:	4915      	ldr	r1, [pc, #84]	; (800942c <tcp_receive+0x5fc>)
 80093d6:	4813      	ldr	r0, [pc, #76]	; (8009424 <tcp_receive+0x5f4>)
 80093d8:	f005 f9a6 	bl	800e728 <iprintf>
      inseg.len -= off;
 80093dc:	4b0e      	ldr	r3, [pc, #56]	; (8009418 <tcp_receive+0x5e8>)
 80093de:	891a      	ldrh	r2, [r3, #8]
 80093e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <tcp_receive+0x5e8>)
 80093ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80093ec:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <tcp_receive+0x5e8>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	891a      	ldrh	r2, [r3, #8]
 80093f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80093fa:	e029      	b.n	8009450 <tcp_receive+0x620>
 80093fc:	080110ac 	.word	0x080110ac
 8009400:	080110b4 	.word	0x080110b4
 8009404:	20000160 	.word	0x20000160
 8009408:	2000015c 	.word	0x2000015c
 800940c:	20008bb8 	.word	0x20008bb8
 8009410:	20000162 	.word	0x20000162
 8009414:	20000158 	.word	0x20000158
 8009418:	20000138 	.word	0x20000138
 800941c:	08010d44 	.word	0x08010d44
 8009420:	080110bc 	.word	0x080110bc
 8009424:	08010d90 	.word	0x08010d90
 8009428:	080110cc 	.word	0x080110cc
 800942c:	080110dc 	.word	0x080110dc
        off -= p->len;
 8009430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009432:	895b      	ldrh	r3, [r3, #10]
 8009434:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800943e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009440:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009442:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009446:	2200      	movs	r2, #0
 8009448:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800944a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009452:	895b      	ldrh	r3, [r3, #10]
 8009454:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009458:	429a      	cmp	r2, r3
 800945a:	d8e9      	bhi.n	8009430 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800945c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009460:	4619      	mov	r1, r3
 8009462:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009464:	f7fc fade 	bl	8005a24 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	4a91      	ldr	r2, [pc, #580]	; (80096b4 <tcp_receive+0x884>)
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	4b91      	ldr	r3, [pc, #580]	; (80096b8 <tcp_receive+0x888>)
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	4a8f      	ldr	r2, [pc, #572]	; (80096b4 <tcp_receive+0x884>)
 8009476:	6812      	ldr	r2, [r2, #0]
 8009478:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800947a:	e00d      	b.n	8009498 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800947c:	4b8d      	ldr	r3, [pc, #564]	; (80096b4 <tcp_receive+0x884>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	da06      	bge.n	8009498 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	8b5b      	ldrh	r3, [r3, #26]
 800948e:	f043 0302 	orr.w	r3, r3, #2
 8009492:	b29a      	uxth	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009498:	4b86      	ldr	r3, [pc, #536]	; (80096b4 <tcp_receive+0x884>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f2c0 842a 	blt.w	8009cfc <tcp_receive+0xecc>
 80094a8:	4b82      	ldr	r3, [pc, #520]	; (80096b4 <tcp_receive+0x884>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094b4:	440b      	add	r3, r1
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	3301      	adds	r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f300 841e 	bgt.w	8009cfc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094c4:	4b7b      	ldr	r3, [pc, #492]	; (80096b4 <tcp_receive+0x884>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	f040 829a 	bne.w	8009a02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80094ce:	4b7a      	ldr	r3, [pc, #488]	; (80096b8 <tcp_receive+0x888>)
 80094d0:	891c      	ldrh	r4, [r3, #8]
 80094d2:	4b79      	ldr	r3, [pc, #484]	; (80096b8 <tcp_receive+0x888>)
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	899b      	ldrh	r3, [r3, #12]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fb f874 	bl	80045c8 <lwip_htons>
 80094e0:	4603      	mov	r3, r0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 0303 	and.w	r3, r3, #3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <tcp_receive+0x6c0>
 80094ec:	2301      	movs	r3, #1
 80094ee:	e000      	b.n	80094f2 <tcp_receive+0x6c2>
 80094f0:	2300      	movs	r3, #0
 80094f2:	4423      	add	r3, r4
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	4b71      	ldr	r3, [pc, #452]	; (80096bc <tcp_receive+0x88c>)
 80094f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80094fe:	4b6f      	ldr	r3, [pc, #444]	; (80096bc <tcp_receive+0x88c>)
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d275      	bcs.n	80095f2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009506:	4b6c      	ldr	r3, [pc, #432]	; (80096b8 <tcp_receive+0x888>)
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	899b      	ldrh	r3, [r3, #12]
 800950c:	b29b      	uxth	r3, r3
 800950e:	4618      	mov	r0, r3
 8009510:	f7fb f85a 	bl	80045c8 <lwip_htons>
 8009514:	4603      	mov	r3, r0
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01f      	beq.n	8009560 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009520:	4b65      	ldr	r3, [pc, #404]	; (80096b8 <tcp_receive+0x888>)
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	899b      	ldrh	r3, [r3, #12]
 8009526:	b29b      	uxth	r3, r3
 8009528:	b21b      	sxth	r3, r3
 800952a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800952e:	b21c      	sxth	r4, r3
 8009530:	4b61      	ldr	r3, [pc, #388]	; (80096b8 <tcp_receive+0x888>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	899b      	ldrh	r3, [r3, #12]
 8009536:	b29b      	uxth	r3, r3
 8009538:	4618      	mov	r0, r3
 800953a:	f7fb f845 	bl	80045c8 <lwip_htons>
 800953e:	4603      	mov	r3, r0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	b29b      	uxth	r3, r3
 8009544:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009548:	b29b      	uxth	r3, r3
 800954a:	4618      	mov	r0, r3
 800954c:	f7fb f83c 	bl	80045c8 <lwip_htons>
 8009550:	4603      	mov	r3, r0
 8009552:	b21b      	sxth	r3, r3
 8009554:	4323      	orrs	r3, r4
 8009556:	b21a      	sxth	r2, r3
 8009558:	4b57      	ldr	r3, [pc, #348]	; (80096b8 <tcp_receive+0x888>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	b292      	uxth	r2, r2
 800955e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009564:	4b54      	ldr	r3, [pc, #336]	; (80096b8 <tcp_receive+0x888>)
 8009566:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009568:	4b53      	ldr	r3, [pc, #332]	; (80096b8 <tcp_receive+0x888>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	899b      	ldrh	r3, [r3, #12]
 800956e:	b29b      	uxth	r3, r3
 8009570:	4618      	mov	r0, r3
 8009572:	f7fb f829 	bl	80045c8 <lwip_htons>
 8009576:	4603      	mov	r3, r0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <tcp_receive+0x75e>
            inseg.len -= 1;
 8009582:	4b4d      	ldr	r3, [pc, #308]	; (80096b8 <tcp_receive+0x888>)
 8009584:	891b      	ldrh	r3, [r3, #8]
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	4b4b      	ldr	r3, [pc, #300]	; (80096b8 <tcp_receive+0x888>)
 800958c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800958e:	4b4a      	ldr	r3, [pc, #296]	; (80096b8 <tcp_receive+0x888>)
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	4a49      	ldr	r2, [pc, #292]	; (80096b8 <tcp_receive+0x888>)
 8009594:	8912      	ldrh	r2, [r2, #8]
 8009596:	4611      	mov	r1, r2
 8009598:	4618      	mov	r0, r3
 800959a:	f7fc f943 	bl	8005824 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800959e:	4b46      	ldr	r3, [pc, #280]	; (80096b8 <tcp_receive+0x888>)
 80095a0:	891c      	ldrh	r4, [r3, #8]
 80095a2:	4b45      	ldr	r3, [pc, #276]	; (80096b8 <tcp_receive+0x888>)
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	899b      	ldrh	r3, [r3, #12]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fb f80c 	bl	80045c8 <lwip_htons>
 80095b0:	4603      	mov	r3, r0
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	f003 0303 	and.w	r3, r3, #3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <tcp_receive+0x790>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <tcp_receive+0x792>
 80095c0:	2300      	movs	r3, #0
 80095c2:	4423      	add	r3, r4
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	4b3d      	ldr	r3, [pc, #244]	; (80096bc <tcp_receive+0x88c>)
 80095c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80095ca:	4b3c      	ldr	r3, [pc, #240]	; (80096bc <tcp_receive+0x88c>)
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	4b38      	ldr	r3, [pc, #224]	; (80096b4 <tcp_receive+0x884>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	441a      	add	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095de:	440b      	add	r3, r1
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d006      	beq.n	80095f2 <tcp_receive+0x7c2>
 80095e4:	4b36      	ldr	r3, [pc, #216]	; (80096c0 <tcp_receive+0x890>)
 80095e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80095ea:	4936      	ldr	r1, [pc, #216]	; (80096c4 <tcp_receive+0x894>)
 80095ec:	4836      	ldr	r0, [pc, #216]	; (80096c8 <tcp_receive+0x898>)
 80095ee:	f005 f89b 	bl	800e728 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 80e7 	beq.w	80097ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80095fc:	4b2e      	ldr	r3, [pc, #184]	; (80096b8 <tcp_receive+0x888>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	899b      	ldrh	r3, [r3, #12]
 8009602:	b29b      	uxth	r3, r3
 8009604:	4618      	mov	r0, r3
 8009606:	f7fa ffdf 	bl	80045c8 <lwip_htons>
 800960a:	4603      	mov	r3, r0
 800960c:	b2db      	uxtb	r3, r3
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d010      	beq.n	8009638 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009616:	e00a      	b.n	800962e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800961c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f7fd fd96 	bl	800715a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1f0      	bne.n	8009618 <tcp_receive+0x7e8>
 8009636:	e0c8      	b.n	80097ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800963e:	e052      	b.n	80096e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	899b      	ldrh	r3, [r3, #12]
 8009646:	b29b      	uxth	r3, r3
 8009648:	4618      	mov	r0, r3
 800964a:	f7fa ffbd 	bl	80045c8 <lwip_htons>
 800964e:	4603      	mov	r3, r0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d03d      	beq.n	80096d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800965a:	4b17      	ldr	r3, [pc, #92]	; (80096b8 <tcp_receive+0x888>)
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	899b      	ldrh	r3, [r3, #12]
 8009660:	b29b      	uxth	r3, r3
 8009662:	4618      	mov	r0, r3
 8009664:	f7fa ffb0 	bl	80045c8 <lwip_htons>
 8009668:	4603      	mov	r3, r0
 800966a:	b2db      	uxtb	r3, r3
 800966c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009670:	2b00      	cmp	r3, #0
 8009672:	d130      	bne.n	80096d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009674:	4b10      	ldr	r3, [pc, #64]	; (80096b8 <tcp_receive+0x888>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	899b      	ldrh	r3, [r3, #12]
 800967a:	b29c      	uxth	r4, r3
 800967c:	2001      	movs	r0, #1
 800967e:	f7fa ffa3 	bl	80045c8 <lwip_htons>
 8009682:	4603      	mov	r3, r0
 8009684:	461a      	mov	r2, r3
 8009686:	4b0c      	ldr	r3, [pc, #48]	; (80096b8 <tcp_receive+0x888>)
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	4322      	orrs	r2, r4
 800968c:	b292      	uxth	r2, r2
 800968e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009690:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <tcp_receive+0x888>)
 8009692:	891c      	ldrh	r4, [r3, #8]
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <tcp_receive+0x888>)
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	899b      	ldrh	r3, [r3, #12]
 800969a:	b29b      	uxth	r3, r3
 800969c:	4618      	mov	r0, r3
 800969e:	f7fa ff93 	bl	80045c8 <lwip_htons>
 80096a2:	4603      	mov	r3, r0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00e      	beq.n	80096cc <tcp_receive+0x89c>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e00d      	b.n	80096ce <tcp_receive+0x89e>
 80096b2:	bf00      	nop
 80096b4:	20000158 	.word	0x20000158
 80096b8:	20000138 	.word	0x20000138
 80096bc:	20000162 	.word	0x20000162
 80096c0:	08010d44 	.word	0x08010d44
 80096c4:	080110ec 	.word	0x080110ec
 80096c8:	08010d90 	.word	0x08010d90
 80096cc:	2300      	movs	r3, #0
 80096ce:	4423      	add	r3, r4
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	4b98      	ldr	r3, [pc, #608]	; (8009934 <tcp_receive+0xb04>)
 80096d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80096d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80096da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80096e0:	6938      	ldr	r0, [r7, #16]
 80096e2:	f7fd fd3a 	bl	800715a <tcp_seg_free>
            while (next &&
 80096e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00e      	beq.n	800970a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80096ec:	4b91      	ldr	r3, [pc, #580]	; (8009934 <tcp_receive+0xb04>)
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	4b91      	ldr	r3, [pc, #580]	; (8009938 <tcp_receive+0xb08>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	441a      	add	r2, r3
 80096f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009700:	8909      	ldrh	r1, [r1, #8]
 8009702:	440b      	add	r3, r1
 8009704:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009706:	2b00      	cmp	r3, #0
 8009708:	da9a      	bge.n	8009640 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800970a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d059      	beq.n	80097c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009710:	4b88      	ldr	r3, [pc, #544]	; (8009934 <tcp_receive+0xb04>)
 8009712:	881b      	ldrh	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	4b88      	ldr	r3, [pc, #544]	; (8009938 <tcp_receive+0xb08>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	441a      	add	r2, r3
 800971c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd4d      	ble.n	80097c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	b29a      	uxth	r2, r3
 8009730:	4b81      	ldr	r3, [pc, #516]	; (8009938 <tcp_receive+0xb08>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	b29a      	uxth	r2, r3
 800973a:	4b80      	ldr	r3, [pc, #512]	; (800993c <tcp_receive+0xb0c>)
 800973c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800973e:	4b7f      	ldr	r3, [pc, #508]	; (800993c <tcp_receive+0xb0c>)
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	899b      	ldrh	r3, [r3, #12]
 8009744:	b29b      	uxth	r3, r3
 8009746:	4618      	mov	r0, r3
 8009748:	f7fa ff3e 	bl	80045c8 <lwip_htons>
 800974c:	4603      	mov	r3, r0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <tcp_receive+0x934>
                inseg.len -= 1;
 8009758:	4b78      	ldr	r3, [pc, #480]	; (800993c <tcp_receive+0xb0c>)
 800975a:	891b      	ldrh	r3, [r3, #8]
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	4b76      	ldr	r3, [pc, #472]	; (800993c <tcp_receive+0xb0c>)
 8009762:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009764:	4b75      	ldr	r3, [pc, #468]	; (800993c <tcp_receive+0xb0c>)
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	4a74      	ldr	r2, [pc, #464]	; (800993c <tcp_receive+0xb0c>)
 800976a:	8912      	ldrh	r2, [r2, #8]
 800976c:	4611      	mov	r1, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7fc f858 	bl	8005824 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009774:	4b71      	ldr	r3, [pc, #452]	; (800993c <tcp_receive+0xb0c>)
 8009776:	891c      	ldrh	r4, [r3, #8]
 8009778:	4b70      	ldr	r3, [pc, #448]	; (800993c <tcp_receive+0xb0c>)
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	899b      	ldrh	r3, [r3, #12]
 800977e:	b29b      	uxth	r3, r3
 8009780:	4618      	mov	r0, r3
 8009782:	f7fa ff21 	bl	80045c8 <lwip_htons>
 8009786:	4603      	mov	r3, r0
 8009788:	b2db      	uxtb	r3, r3
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <tcp_receive+0x966>
 8009792:	2301      	movs	r3, #1
 8009794:	e000      	b.n	8009798 <tcp_receive+0x968>
 8009796:	2300      	movs	r3, #0
 8009798:	4423      	add	r3, r4
 800979a:	b29a      	uxth	r2, r3
 800979c:	4b65      	ldr	r3, [pc, #404]	; (8009934 <tcp_receive+0xb04>)
 800979e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80097a0:	4b64      	ldr	r3, [pc, #400]	; (8009934 <tcp_receive+0xb04>)
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	461a      	mov	r2, r3
 80097a6:	4b64      	ldr	r3, [pc, #400]	; (8009938 <tcp_receive+0xb08>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	441a      	add	r2, r3
 80097ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d006      	beq.n	80097c4 <tcp_receive+0x994>
 80097b6:	4b62      	ldr	r3, [pc, #392]	; (8009940 <tcp_receive+0xb10>)
 80097b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80097bc:	4961      	ldr	r1, [pc, #388]	; (8009944 <tcp_receive+0xb14>)
 80097be:	4862      	ldr	r0, [pc, #392]	; (8009948 <tcp_receive+0xb18>)
 80097c0:	f004 ffb2 	bl	800e728 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80097c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80097ca:	4b5a      	ldr	r3, [pc, #360]	; (8009934 <tcp_receive+0xb04>)
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	4b59      	ldr	r3, [pc, #356]	; (8009938 <tcp_receive+0xb08>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	441a      	add	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80097de:	4b55      	ldr	r3, [pc, #340]	; (8009934 <tcp_receive+0xb04>)
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d206      	bcs.n	80097f4 <tcp_receive+0x9c4>
 80097e6:	4b56      	ldr	r3, [pc, #344]	; (8009940 <tcp_receive+0xb10>)
 80097e8:	f240 6207 	movw	r2, #1543	; 0x607
 80097ec:	4957      	ldr	r1, [pc, #348]	; (800994c <tcp_receive+0xb1c>)
 80097ee:	4856      	ldr	r0, [pc, #344]	; (8009948 <tcp_receive+0xb18>)
 80097f0:	f004 ff9a 	bl	800e728 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80097f8:	4b4e      	ldr	r3, [pc, #312]	; (8009934 <tcp_receive+0xb04>)
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	b29a      	uxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7fc ffc9 	bl	800679c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800980a:	4b4c      	ldr	r3, [pc, #304]	; (800993c <tcp_receive+0xb0c>)
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	891b      	ldrh	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d006      	beq.n	8009822 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009814:	4b49      	ldr	r3, [pc, #292]	; (800993c <tcp_receive+0xb0c>)
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	4a4d      	ldr	r2, [pc, #308]	; (8009950 <tcp_receive+0xb20>)
 800981a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800981c:	4b47      	ldr	r3, [pc, #284]	; (800993c <tcp_receive+0xb0c>)
 800981e:	2200      	movs	r2, #0
 8009820:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009822:	4b46      	ldr	r3, [pc, #280]	; (800993c <tcp_receive+0xb0c>)
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	899b      	ldrh	r3, [r3, #12]
 8009828:	b29b      	uxth	r3, r3
 800982a:	4618      	mov	r0, r3
 800982c:	f7fa fecc 	bl	80045c8 <lwip_htons>
 8009830:	4603      	mov	r3, r0
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80b8 	beq.w	80099ae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800983e:	4b45      	ldr	r3, [pc, #276]	; (8009954 <tcp_receive+0xb24>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	f043 0320 	orr.w	r3, r3, #32
 8009846:	b2da      	uxtb	r2, r3
 8009848:	4b42      	ldr	r3, [pc, #264]	; (8009954 <tcp_receive+0xb24>)
 800984a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800984c:	e0af      	b.n	80099ae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009852:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	4a36      	ldr	r2, [pc, #216]	; (8009938 <tcp_receive+0xb08>)
 800985e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	891b      	ldrh	r3, [r3, #8]
 8009864:	461c      	mov	r4, r3
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	899b      	ldrh	r3, [r3, #12]
 800986c:	b29b      	uxth	r3, r3
 800986e:	4618      	mov	r0, r3
 8009870:	f7fa feaa 	bl	80045c8 <lwip_htons>
 8009874:	4603      	mov	r3, r0
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 0303 	and.w	r3, r3, #3
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <tcp_receive+0xa54>
 8009880:	2301      	movs	r3, #1
 8009882:	e000      	b.n	8009886 <tcp_receive+0xa56>
 8009884:	2300      	movs	r3, #0
 8009886:	191a      	adds	r2, r3, r4
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	441a      	add	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009896:	461c      	mov	r4, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	891b      	ldrh	r3, [r3, #8]
 800989c:	461d      	mov	r5, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	899b      	ldrh	r3, [r3, #12]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa fe8e 	bl	80045c8 <lwip_htons>
 80098ac:	4603      	mov	r3, r0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <tcp_receive+0xa8c>
 80098b8:	2301      	movs	r3, #1
 80098ba:	e000      	b.n	80098be <tcp_receive+0xa8e>
 80098bc:	2300      	movs	r3, #0
 80098be:	442b      	add	r3, r5
 80098c0:	429c      	cmp	r4, r3
 80098c2:	d206      	bcs.n	80098d2 <tcp_receive+0xaa2>
 80098c4:	4b1e      	ldr	r3, [pc, #120]	; (8009940 <tcp_receive+0xb10>)
 80098c6:	f240 622b 	movw	r2, #1579	; 0x62b
 80098ca:	4923      	ldr	r1, [pc, #140]	; (8009958 <tcp_receive+0xb28>)
 80098cc:	481e      	ldr	r0, [pc, #120]	; (8009948 <tcp_receive+0xb18>)
 80098ce:	f004 ff2b 	bl	800e728 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	891b      	ldrh	r3, [r3, #8]
 80098d6:	461c      	mov	r4, r3
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	899b      	ldrh	r3, [r3, #12]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fa fe71 	bl	80045c8 <lwip_htons>
 80098e6:	4603      	mov	r3, r0
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <tcp_receive+0xac6>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e000      	b.n	80098f8 <tcp_receive+0xac8>
 80098f6:	2300      	movs	r3, #0
 80098f8:	1919      	adds	r1, r3, r4
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80098fe:	b28b      	uxth	r3, r1
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	b29a      	uxth	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7fc ff47 	bl	800679c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	891b      	ldrh	r3, [r3, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d028      	beq.n	800996a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009918:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <tcp_receive+0xb20>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01d      	beq.n	800995c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009920:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <tcp_receive+0xb20>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4619      	mov	r1, r3
 800992a:	4610      	mov	r0, r2
 800992c:	f7fc f9c2 	bl	8005cb4 <pbuf_cat>
 8009930:	e018      	b.n	8009964 <tcp_receive+0xb34>
 8009932:	bf00      	nop
 8009934:	20000162 	.word	0x20000162
 8009938:	20000158 	.word	0x20000158
 800993c:	20000138 	.word	0x20000138
 8009940:	08010d44 	.word	0x08010d44
 8009944:	08011124 	.word	0x08011124
 8009948:	08010d90 	.word	0x08010d90
 800994c:	08011160 	.word	0x08011160
 8009950:	20000168 	.word	0x20000168
 8009954:	20000165 	.word	0x20000165
 8009958:	08011180 	.word	0x08011180
            } else {
              recv_data = cseg->p;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	4a70      	ldr	r2, [pc, #448]	; (8009b24 <tcp_receive+0xcf4>)
 8009962:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	2200      	movs	r2, #0
 8009968:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	899b      	ldrh	r3, [r3, #12]
 8009970:	b29b      	uxth	r3, r3
 8009972:	4618      	mov	r0, r3
 8009974:	f7fa fe28 	bl	80045c8 <lwip_htons>
 8009978:	4603      	mov	r3, r0
 800997a:	b2db      	uxtb	r3, r3
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00d      	beq.n	80099a0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009984:	4b68      	ldr	r3, [pc, #416]	; (8009b28 <tcp_receive+0xcf8>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f043 0320 	orr.w	r3, r3, #32
 800998c:	b2da      	uxtb	r2, r3
 800998e:	4b66      	ldr	r3, [pc, #408]	; (8009b28 <tcp_receive+0xcf8>)
 8009990:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	7d1b      	ldrb	r3, [r3, #20]
 8009996:	2b04      	cmp	r3, #4
 8009998:	d102      	bne.n	80099a0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2207      	movs	r2, #7
 800999e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80099a8:	68b8      	ldr	r0, [r7, #8]
 80099aa:	f7fd fbd6 	bl	800715a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d008      	beq.n	80099c8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80099c2:	429a      	cmp	r2, r3
 80099c4:	f43f af43 	beq.w	800984e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	8b5b      	ldrh	r3, [r3, #26]
 80099cc:	f003 0301 	and.w	r3, r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00e      	beq.n	80099f2 <tcp_receive+0xbc2>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	8b5b      	ldrh	r3, [r3, #26]
 80099d8:	f023 0301 	bic.w	r3, r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	835a      	strh	r2, [r3, #26]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	8b5b      	ldrh	r3, [r3, #26]
 80099e6:	f043 0302 	orr.w	r3, r3, #2
 80099ea:	b29a      	uxth	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80099f0:	e188      	b.n	8009d04 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	8b5b      	ldrh	r3, [r3, #26]
 80099f6:	f043 0301 	orr.w	r3, r3, #1
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009a00:	e180      	b.n	8009d04 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d106      	bne.n	8009a18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009a0a:	4848      	ldr	r0, [pc, #288]	; (8009b2c <tcp_receive+0xcfc>)
 8009a0c:	f7fd fbbe 	bl	800718c <tcp_seg_copy>
 8009a10:	4602      	mov	r2, r0
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	675a      	str	r2, [r3, #116]	; 0x74
 8009a16:	e16d      	b.n	8009cf4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a22:	e157      	b.n	8009cd4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	4b41      	ldr	r3, [pc, #260]	; (8009b30 <tcp_receive+0xd00>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d11d      	bne.n	8009a6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009a32:	4b3e      	ldr	r3, [pc, #248]	; (8009b2c <tcp_receive+0xcfc>)
 8009a34:	891a      	ldrh	r2, [r3, #8]
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	891b      	ldrh	r3, [r3, #8]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	f240 814f 	bls.w	8009cde <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009a40:	483a      	ldr	r0, [pc, #232]	; (8009b2c <tcp_receive+0xcfc>)
 8009a42:	f7fd fba3 	bl	800718c <tcp_seg_copy>
 8009a46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 8149 	beq.w	8009ce2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	e002      	b.n	8009a64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009a64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a66:	6978      	ldr	r0, [r7, #20]
 8009a68:	f7ff f8de 	bl	8008c28 <tcp_oos_insert_segment>
                }
                break;
 8009a6c:	e139      	b.n	8009ce2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d117      	bne.n	8009aa4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009a74:	4b2e      	ldr	r3, [pc, #184]	; (8009b30 <tcp_receive+0xd00>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	da57      	bge.n	8009b34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009a84:	4829      	ldr	r0, [pc, #164]	; (8009b2c <tcp_receive+0xcfc>)
 8009a86:	f7fd fb81 	bl	800718c <tcp_seg_copy>
 8009a8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 8129 	beq.w	8009ce6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a9c:	69b8      	ldr	r0, [r7, #24]
 8009a9e:	f7ff f8c3 	bl	8008c28 <tcp_oos_insert_segment>
                  }
                  break;
 8009aa2:	e120      	b.n	8009ce6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009aa4:	4b22      	ldr	r3, [pc, #136]	; (8009b30 <tcp_receive+0xd00>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	db3e      	blt.n	8009b34 <tcp_receive+0xd04>
 8009ab6:	4b1e      	ldr	r3, [pc, #120]	; (8009b30 <tcp_receive+0xd00>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	1ad3      	subs	r3, r2, r3
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dc35      	bgt.n	8009b34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ac8:	4818      	ldr	r0, [pc, #96]	; (8009b2c <tcp_receive+0xcfc>)
 8009aca:	f7fd fb5f 	bl	800718c <tcp_seg_copy>
 8009ace:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8109 	beq.w	8009cea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae0:	8912      	ldrh	r2, [r2, #8]
 8009ae2:	441a      	add	r2, r3
 8009ae4:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <tcp_receive+0xd00>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dd12      	ble.n	8009b14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009aee:	4b10      	ldr	r3, [pc, #64]	; (8009b30 <tcp_receive+0xd00>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0a:	891b      	ldrh	r3, [r3, #8]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	f7fb fe88 	bl	8005824 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b1c:	69f8      	ldr	r0, [r7, #28]
 8009b1e:	f7ff f883 	bl	8008c28 <tcp_oos_insert_segment>
                  }
                  break;
 8009b22:	e0e2      	b.n	8009cea <tcp_receive+0xeba>
 8009b24:	20000168 	.word	0x20000168
 8009b28:	20000165 	.word	0x20000165
 8009b2c:	20000138 	.word	0x20000138
 8009b30:	20000158 	.word	0x20000158
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f040 80c6 	bne.w	8009cce <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009b42:	4b80      	ldr	r3, [pc, #512]	; (8009d44 <tcp_receive+0xf14>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f340 80bd 	ble.w	8009cce <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	899b      	ldrh	r3, [r3, #12]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fa fd33 	bl	80045c8 <lwip_htons>
 8009b62:	4603      	mov	r3, r0
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f040 80bf 	bne.w	8009cee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009b70:	4875      	ldr	r0, [pc, #468]	; (8009d48 <tcp_receive+0xf18>)
 8009b72:	f7fd fb0b 	bl	800718c <tcp_seg_copy>
 8009b76:	4602      	mov	r2, r0
 8009b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	f000 80b6 	beq.w	8009cf2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b8e:	8912      	ldrh	r2, [r2, #8]
 8009b90:	441a      	add	r2, r3
 8009b92:	4b6c      	ldr	r3, [pc, #432]	; (8009d44 <tcp_receive+0xf14>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	dd12      	ble.n	8009bc2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009b9c:	4b69      	ldr	r3, [pc, #420]	; (8009d44 <tcp_receive+0xf14>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb8:	891b      	ldrh	r3, [r3, #8]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f7fb fe31 	bl	8005824 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009bc2:	4b62      	ldr	r3, [pc, #392]	; (8009d4c <tcp_receive+0xf1c>)
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4b5e      	ldr	r3, [pc, #376]	; (8009d44 <tcp_receive+0xf14>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	441a      	add	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bd6:	440b      	add	r3, r1
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f340 8089 	ble.w	8009cf2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	899b      	ldrh	r3, [r3, #12]
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fa fcec 	bl	80045c8 <lwip_htons>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 0301 	and.w	r3, r3, #1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d022      	beq.n	8009c42 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	899b      	ldrh	r3, [r3, #12]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	b21b      	sxth	r3, r3
 8009c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c0c:	b21c      	sxth	r4, r3
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	899b      	ldrh	r3, [r3, #12]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fa fcd5 	bl	80045c8 <lwip_htons>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fa fccc 	bl	80045c8 <lwip_htons>
 8009c30:	4603      	mov	r3, r0
 8009c32:	b21b      	sxth	r3, r3
 8009c34:	4323      	orrs	r3, r4
 8009c36:	b21a      	sxth	r2, r3
 8009c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	b292      	uxth	r2, r2
 8009c40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c4c:	4413      	add	r3, r2
 8009c4e:	b299      	uxth	r1, r3
 8009c50:	4b3c      	ldr	r3, [pc, #240]	; (8009d44 <tcp_receive+0xf14>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	1a8a      	subs	r2, r1, r2
 8009c5c:	b292      	uxth	r2, r2
 8009c5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	891b      	ldrh	r3, [r3, #8]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f7fb fdd8 	bl	8005824 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	891c      	ldrh	r4, [r3, #8]
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	899b      	ldrh	r3, [r3, #12]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fa fc9f 	bl	80045c8 <lwip_htons>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <tcp_receive+0xe6a>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e000      	b.n	8009c9c <tcp_receive+0xe6c>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	4423      	add	r3, r4
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	4b2a      	ldr	r3, [pc, #168]	; (8009d4c <tcp_receive+0xf1c>)
 8009ca2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009ca4:	4b29      	ldr	r3, [pc, #164]	; (8009d4c <tcp_receive+0xf1c>)
 8009ca6:	881b      	ldrh	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	4b26      	ldr	r3, [pc, #152]	; (8009d44 <tcp_receive+0xf14>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	441a      	add	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cb8:	440b      	add	r3, r1
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d019      	beq.n	8009cf2 <tcp_receive+0xec2>
 8009cbe:	4b24      	ldr	r3, [pc, #144]	; (8009d50 <tcp_receive+0xf20>)
 8009cc0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009cc4:	4923      	ldr	r1, [pc, #140]	; (8009d54 <tcp_receive+0xf24>)
 8009cc6:	4824      	ldr	r0, [pc, #144]	; (8009d58 <tcp_receive+0xf28>)
 8009cc8:	f004 fd2e 	bl	800e728 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009ccc:	e011      	b.n	8009cf2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f47f aea4 	bne.w	8009a24 <tcp_receive+0xbf4>
 8009cdc:	e00a      	b.n	8009cf4 <tcp_receive+0xec4>
                break;
 8009cde:	bf00      	nop
 8009ce0:	e008      	b.n	8009cf4 <tcp_receive+0xec4>
                break;
 8009ce2:	bf00      	nop
 8009ce4:	e006      	b.n	8009cf4 <tcp_receive+0xec4>
                  break;
 8009ce6:	bf00      	nop
 8009ce8:	e004      	b.n	8009cf4 <tcp_receive+0xec4>
                  break;
 8009cea:	bf00      	nop
 8009cec:	e002      	b.n	8009cf4 <tcp_receive+0xec4>
                  break;
 8009cee:	bf00      	nop
 8009cf0:	e000      	b.n	8009cf4 <tcp_receive+0xec4>
                break;
 8009cf2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f001 fa33 	bl	800b160 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009cfa:	e003      	b.n	8009d04 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 fa2f 	bl	800b160 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009d02:	e01a      	b.n	8009d3a <tcp_receive+0xf0a>
 8009d04:	e019      	b.n	8009d3a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009d06:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <tcp_receive+0xf14>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	db0a      	blt.n	8009d2a <tcp_receive+0xefa>
 8009d14:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <tcp_receive+0xf14>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d20:	440b      	add	r3, r1
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	3301      	adds	r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dd07      	ble.n	8009d3a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	8b5b      	ldrh	r3, [r3, #26]
 8009d2e:	f043 0302 	orr.w	r3, r3, #2
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009d38:	e7ff      	b.n	8009d3a <tcp_receive+0xf0a>
 8009d3a:	bf00      	nop
 8009d3c:	3750      	adds	r7, #80	; 0x50
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bdb0      	pop	{r4, r5, r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000158 	.word	0x20000158
 8009d48:	20000138 	.word	0x20000138
 8009d4c:	20000162 	.word	0x20000162
 8009d50:	08010d44 	.word	0x08010d44
 8009d54:	080110ec 	.word	0x080110ec
 8009d58:	08010d90 	.word	0x08010d90

08009d5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009d62:	4b15      	ldr	r3, [pc, #84]	; (8009db8 <tcp_get_next_optbyte+0x5c>)
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	b291      	uxth	r1, r2
 8009d6a:	4a13      	ldr	r2, [pc, #76]	; (8009db8 <tcp_get_next_optbyte+0x5c>)
 8009d6c:	8011      	strh	r1, [r2, #0]
 8009d6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009d70:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <tcp_get_next_optbyte+0x60>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d004      	beq.n	8009d82 <tcp_get_next_optbyte+0x26>
 8009d78:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <tcp_get_next_optbyte+0x64>)
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	88fa      	ldrh	r2, [r7, #6]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d208      	bcs.n	8009d94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009d82:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <tcp_get_next_optbyte+0x68>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3314      	adds	r3, #20
 8009d88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009d8a:	88fb      	ldrh	r3, [r7, #6]
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	4413      	add	r3, r2
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	e00b      	b.n	8009dac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <tcp_get_next_optbyte+0x64>)
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009da2:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <tcp_get_next_optbyte+0x60>)
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	797b      	ldrb	r3, [r7, #5]
 8009da8:	4413      	add	r3, r2
 8009daa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	20000154 	.word	0x20000154
 8009dbc:	20000150 	.word	0x20000150
 8009dc0:	2000014e 	.word	0x2000014e
 8009dc4:	20000148 	.word	0x20000148

08009dc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d106      	bne.n	8009de4 <tcp_parseopt+0x1c>
 8009dd6:	4b32      	ldr	r3, [pc, #200]	; (8009ea0 <tcp_parseopt+0xd8>)
 8009dd8:	f240 727d 	movw	r2, #1917	; 0x77d
 8009ddc:	4931      	ldr	r1, [pc, #196]	; (8009ea4 <tcp_parseopt+0xdc>)
 8009dde:	4832      	ldr	r0, [pc, #200]	; (8009ea8 <tcp_parseopt+0xe0>)
 8009de0:	f004 fca2 	bl	800e728 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009de4:	4b31      	ldr	r3, [pc, #196]	; (8009eac <tcp_parseopt+0xe4>)
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d055      	beq.n	8009e98 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009dec:	4b30      	ldr	r3, [pc, #192]	; (8009eb0 <tcp_parseopt+0xe8>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	e045      	b.n	8009e80 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009df4:	f7ff ffb2 	bl	8009d5c <tcp_get_next_optbyte>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d006      	beq.n	8009e10 <tcp_parseopt+0x48>
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	dc2b      	bgt.n	8009e5e <tcp_parseopt+0x96>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d041      	beq.n	8009e8e <tcp_parseopt+0xc6>
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d127      	bne.n	8009e5e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009e0e:	e037      	b.n	8009e80 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009e10:	f7ff ffa4 	bl	8009d5c <tcp_get_next_optbyte>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d13b      	bne.n	8009e92 <tcp_parseopt+0xca>
 8009e1a:	4b25      	ldr	r3, [pc, #148]	; (8009eb0 <tcp_parseopt+0xe8>)
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	4a22      	ldr	r2, [pc, #136]	; (8009eac <tcp_parseopt+0xe4>)
 8009e22:	8812      	ldrh	r2, [r2, #0]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	da34      	bge.n	8009e92 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009e28:	f7ff ff98 	bl	8009d5c <tcp_get_next_optbyte>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	021b      	lsls	r3, r3, #8
 8009e32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009e34:	f7ff ff92 	bl	8009d5c <tcp_get_next_optbyte>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	89bb      	ldrh	r3, [r7, #12]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009e42:	89bb      	ldrh	r3, [r7, #12]
 8009e44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009e48:	d804      	bhi.n	8009e54 <tcp_parseopt+0x8c>
 8009e4a:	89bb      	ldrh	r3, [r7, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <tcp_parseopt+0x8c>
 8009e50:	89ba      	ldrh	r2, [r7, #12]
 8009e52:	e001      	b.n	8009e58 <tcp_parseopt+0x90>
 8009e54:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009e5c:	e010      	b.n	8009e80 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009e5e:	f7ff ff7d 	bl	8009d5c <tcp_get_next_optbyte>
 8009e62:	4603      	mov	r3, r0
 8009e64:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d914      	bls.n	8009e96 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <tcp_parseopt+0xe8>)
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	4413      	add	r3, r2
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	3b02      	subs	r3, #2
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	4b0c      	ldr	r3, [pc, #48]	; (8009eb0 <tcp_parseopt+0xe8>)
 8009e7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009e80:	4b0b      	ldr	r3, [pc, #44]	; (8009eb0 <tcp_parseopt+0xe8>)
 8009e82:	881a      	ldrh	r2, [r3, #0]
 8009e84:	4b09      	ldr	r3, [pc, #36]	; (8009eac <tcp_parseopt+0xe4>)
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d3b3      	bcc.n	8009df4 <tcp_parseopt+0x2c>
 8009e8c:	e004      	b.n	8009e98 <tcp_parseopt+0xd0>
          return;
 8009e8e:	bf00      	nop
 8009e90:	e002      	b.n	8009e98 <tcp_parseopt+0xd0>
            return;
 8009e92:	bf00      	nop
 8009e94:	e000      	b.n	8009e98 <tcp_parseopt+0xd0>
            return;
 8009e96:	bf00      	nop
      }
    }
  }
}
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	08010d44 	.word	0x08010d44
 8009ea4:	080111a8 	.word	0x080111a8
 8009ea8:	08010d90 	.word	0x08010d90
 8009eac:	2000014c 	.word	0x2000014c
 8009eb0:	20000154 	.word	0x20000154

08009eb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <tcp_trigger_input_pcb_close+0x1c>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	f043 0310 	orr.w	r3, r3, #16
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	4b03      	ldr	r3, [pc, #12]	; (8009ed0 <tcp_trigger_input_pcb_close+0x1c>)
 8009ec4:	701a      	strb	r2, [r3, #0]
}
 8009ec6:	bf00      	nop
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	20000165 	.word	0x20000165

08009ed4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00a      	beq.n	8009efc <tcp_route+0x28>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	7a1b      	ldrb	r3, [r3, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	7a1b      	ldrb	r3, [r3, #8]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fb fabc 	bl	8005470 <netif_get_by_index>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	e003      	b.n	8009f04 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f003 f9cb 	bl	800d298 <ip4_route>
 8009f02:	4603      	mov	r3, r0
  }
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009f0c:	b590      	push	{r4, r7, lr}
 8009f0e:	b087      	sub	sp, #28
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	603b      	str	r3, [r7, #0]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d105      	bne.n	8009f2e <tcp_create_segment+0x22>
 8009f22:	4b44      	ldr	r3, [pc, #272]	; (800a034 <tcp_create_segment+0x128>)
 8009f24:	22a3      	movs	r2, #163	; 0xa3
 8009f26:	4944      	ldr	r1, [pc, #272]	; (800a038 <tcp_create_segment+0x12c>)
 8009f28:	4844      	ldr	r0, [pc, #272]	; (800a03c <tcp_create_segment+0x130>)
 8009f2a:	f004 fbfd 	bl	800e728 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d105      	bne.n	8009f40 <tcp_create_segment+0x34>
 8009f34:	4b3f      	ldr	r3, [pc, #252]	; (800a034 <tcp_create_segment+0x128>)
 8009f36:	22a4      	movs	r2, #164	; 0xa4
 8009f38:	4941      	ldr	r1, [pc, #260]	; (800a040 <tcp_create_segment+0x134>)
 8009f3a:	4840      	ldr	r0, [pc, #256]	; (800a03c <tcp_create_segment+0x130>)
 8009f3c:	f004 fbf4 	bl	800e728 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009f40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f4e:	2003      	movs	r0, #3
 8009f50:	f7fa ff90 	bl	8004e74 <memp_malloc>
 8009f54:	6138      	str	r0, [r7, #16]
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009f5c:	68b8      	ldr	r0, [r7, #8]
 8009f5e:	f7fb fde7 	bl	8005b30 <pbuf_free>
    return NULL;
 8009f62:	2300      	movs	r3, #0
 8009f64:	e061      	b.n	800a02a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009f6c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	891a      	ldrh	r2, [r3, #8]
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d205      	bcs.n	8009f92 <tcp_create_segment+0x86>
 8009f86:	4b2b      	ldr	r3, [pc, #172]	; (800a034 <tcp_create_segment+0x128>)
 8009f88:	22b0      	movs	r2, #176	; 0xb0
 8009f8a:	492e      	ldr	r1, [pc, #184]	; (800a044 <tcp_create_segment+0x138>)
 8009f8c:	482b      	ldr	r0, [pc, #172]	; (800a03c <tcp_create_segment+0x130>)
 8009f8e:	f004 fbcb 	bl	800e728 <iprintf>
  seg->len = p->tot_len - optlen;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	891a      	ldrh	r2, [r3, #8]
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009fa2:	2114      	movs	r1, #20
 8009fa4:	68b8      	ldr	r0, [r7, #8]
 8009fa6:	f7fb fd2d 	bl	8005a04 <pbuf_add_header>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d004      	beq.n	8009fba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009fb0:	6938      	ldr	r0, [r7, #16]
 8009fb2:	f7fd f8d2 	bl	800715a <tcp_seg_free>
    return NULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e037      	b.n	800a02a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	8ada      	ldrh	r2, [r3, #22]
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	68dc      	ldr	r4, [r3, #12]
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f7fa fafb 	bl	80045c8 <lwip_htons>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	8b1a      	ldrh	r2, [r3, #24]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	68dc      	ldr	r4, [r3, #12]
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7fa faf2 	bl	80045c8 <lwip_htons>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	68dc      	ldr	r4, [r3, #12]
 8009fec:	6838      	ldr	r0, [r7, #0]
 8009fee:	f7fa fb00 	bl	80045f2 <lwip_htonl>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
 8009ff8:	089b      	lsrs	r3, r3, #2
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	3305      	adds	r3, #5
 800a000:	b29b      	uxth	r3, r3
 800a002:	031b      	lsls	r3, r3, #12
 800a004:	b29a      	uxth	r2, r3
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4313      	orrs	r3, r2
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	68dc      	ldr	r4, [r3, #12]
 800a012:	4610      	mov	r0, r2
 800a014:	f7fa fad8 	bl	80045c8 <lwip_htons>
 800a018:	4603      	mov	r3, r0
 800a01a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	749a      	strb	r2, [r3, #18]
 800a024:	2200      	movs	r2, #0
 800a026:	74da      	strb	r2, [r3, #19]
  return seg;
 800a028:	693b      	ldr	r3, [r7, #16]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd90      	pop	{r4, r7, pc}
 800a032:	bf00      	nop
 800a034:	080111c4 	.word	0x080111c4
 800a038:	080111f8 	.word	0x080111f8
 800a03c:	08011218 	.word	0x08011218
 800a040:	08011240 	.word	0x08011240
 800a044:	08011264 	.word	0x08011264

0800a048 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a048:	b590      	push	{r4, r7, lr}
 800a04a:	b08b      	sub	sp, #44	; 0x2c
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a054:	2300      	movs	r3, #0
 800a056:	61fb      	str	r3, [r7, #28]
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <tcp_split_unsent_seg+0x2c>
 800a066:	4b95      	ldr	r3, [pc, #596]	; (800a2bc <tcp_split_unsent_seg+0x274>)
 800a068:	f240 324b 	movw	r2, #843	; 0x34b
 800a06c:	4994      	ldr	r1, [pc, #592]	; (800a2c0 <tcp_split_unsent_seg+0x278>)
 800a06e:	4895      	ldr	r0, [pc, #596]	; (800a2c4 <tcp_split_unsent_seg+0x27c>)
 800a070:	f004 fb5a 	bl	800e728 <iprintf>

  useg = pcb->unsent;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a078:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d102      	bne.n	800a086 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a080:	f04f 33ff 	mov.w	r3, #4294967295
 800a084:	e116      	b.n	800a2b4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a086:	887b      	ldrh	r3, [r7, #2]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a08c:	4b8b      	ldr	r3, [pc, #556]	; (800a2bc <tcp_split_unsent_seg+0x274>)
 800a08e:	f240 3253 	movw	r2, #851	; 0x353
 800a092:	498d      	ldr	r1, [pc, #564]	; (800a2c8 <tcp_split_unsent_seg+0x280>)
 800a094:	488b      	ldr	r0, [pc, #556]	; (800a2c4 <tcp_split_unsent_seg+0x27c>)
 800a096:	f004 fb47 	bl	800e728 <iprintf>
    return ERR_VAL;
 800a09a:	f06f 0305 	mvn.w	r3, #5
 800a09e:	e109      	b.n	800a2b4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	891b      	ldrh	r3, [r3, #8]
 800a0a4:	887a      	ldrh	r2, [r7, #2]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d301      	bcc.n	800a0ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	e102      	b.n	800a2b4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0b2:	887a      	ldrh	r2, [r7, #2]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d906      	bls.n	800a0c6 <tcp_split_unsent_seg+0x7e>
 800a0b8:	4b80      	ldr	r3, [pc, #512]	; (800a2bc <tcp_split_unsent_seg+0x274>)
 800a0ba:	f240 325b 	movw	r2, #859	; 0x35b
 800a0be:	4983      	ldr	r1, [pc, #524]	; (800a2cc <tcp_split_unsent_seg+0x284>)
 800a0c0:	4880      	ldr	r0, [pc, #512]	; (800a2c4 <tcp_split_unsent_seg+0x27c>)
 800a0c2:	f004 fb31 	bl	800e728 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	891b      	ldrh	r3, [r3, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d106      	bne.n	800a0dc <tcp_split_unsent_seg+0x94>
 800a0ce:	4b7b      	ldr	r3, [pc, #492]	; (800a2bc <tcp_split_unsent_seg+0x274>)
 800a0d0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a0d4:	497e      	ldr	r1, [pc, #504]	; (800a2d0 <tcp_split_unsent_seg+0x288>)
 800a0d6:	487b      	ldr	r0, [pc, #492]	; (800a2c4 <tcp_split_unsent_seg+0x27c>)
 800a0d8:	f004 fb26 	bl	800e728 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	7a9b      	ldrb	r3, [r3, #10]
 800a0e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a0e2:	7bfb      	ldrb	r3, [r7, #15]
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	891a      	ldrh	r2, [r3, #8]
 800a0f2:	887b      	ldrh	r3, [r7, #2]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	89bb      	ldrh	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	b29b      	uxth	r3, r3
 800a102:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a106:	4619      	mov	r1, r3
 800a108:	2036      	movs	r0, #54	; 0x36
 800a10a:	f7fb fa2d 	bl	8005568 <pbuf_alloc>
 800a10e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80b7 	beq.w	800a286 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	891a      	ldrh	r2, [r3, #8]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	891b      	ldrh	r3, [r3, #8]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	b29a      	uxth	r2, r3
 800a126:	887b      	ldrh	r3, [r7, #2]
 800a128:	4413      	add	r3, r2
 800a12a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	6858      	ldr	r0, [r3, #4]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	7bbb      	ldrb	r3, [r7, #14]
 800a136:	18d1      	adds	r1, r2, r3
 800a138:	897b      	ldrh	r3, [r7, #10]
 800a13a:	89ba      	ldrh	r2, [r7, #12]
 800a13c:	f7fb fef2 	bl	8005f24 <pbuf_copy_partial>
 800a140:	4603      	mov	r3, r0
 800a142:	461a      	mov	r2, r3
 800a144:	89bb      	ldrh	r3, [r7, #12]
 800a146:	4293      	cmp	r3, r2
 800a148:	f040 809f 	bne.w	800a28a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	899b      	ldrh	r3, [r3, #12]
 800a152:	b29b      	uxth	r3, r3
 800a154:	4618      	mov	r0, r3
 800a156:	f7fa fa37 	bl	80045c8 <lwip_htons>
 800a15a:	4603      	mov	r3, r0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a162:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a164:	2300      	movs	r3, #0
 800a166:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a168:	7efb      	ldrb	r3, [r7, #27]
 800a16a:	f003 0308 	and.w	r3, r3, #8
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d007      	beq.n	800a182 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a172:	7efb      	ldrb	r3, [r7, #27]
 800a174:	f023 0308 	bic.w	r3, r3, #8
 800a178:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a17a:	7ebb      	ldrb	r3, [r7, #26]
 800a17c:	f043 0308 	orr.w	r3, r3, #8
 800a180:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a182:	7efb      	ldrb	r3, [r7, #27]
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a18c:	7efb      	ldrb	r3, [r7, #27]
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a194:	7ebb      	ldrb	r3, [r7, #26]
 800a196:	f043 0301 	orr.w	r3, r3, #1
 800a19a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fa fa25 	bl	80045f2 <lwip_htonl>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	887b      	ldrh	r3, [r7, #2]
 800a1ac:	18d1      	adds	r1, r2, r3
 800a1ae:	7eba      	ldrb	r2, [r7, #26]
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	6939      	ldr	r1, [r7, #16]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff fea7 	bl	8009f0c <tcp_create_segment>
 800a1be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d063      	beq.n	800a28e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fb fd38 	bl	8005c40 <pbuf_clen>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1da:	1a9b      	subs	r3, r3, r2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	6858      	ldr	r0, [r3, #4]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	891a      	ldrh	r2, [r3, #8]
 800a1ee:	89bb      	ldrh	r3, [r7, #12]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	f7fb fb15 	bl	8005824 <pbuf_realloc>
  useg->len -= remainder;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	891a      	ldrh	r2, [r3, #8]
 800a1fe:	89bb      	ldrh	r3, [r7, #12]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	b29a      	uxth	r2, r3
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	899b      	ldrh	r3, [r3, #12]
 800a20e:	b29c      	uxth	r4, r3
 800a210:	7efb      	ldrb	r3, [r7, #27]
 800a212:	b29b      	uxth	r3, r3
 800a214:	4618      	mov	r0, r3
 800a216:	f7fa f9d7 	bl	80045c8 <lwip_htons>
 800a21a:	4603      	mov	r3, r0
 800a21c:	461a      	mov	r2, r3
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	4322      	orrs	r2, r4
 800a224:	b292      	uxth	r2, r2
 800a226:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	4618      	mov	r0, r3
 800a22e:	f7fb fd07 	bl	8005c40 <pbuf_clen>
 800a232:	4603      	mov	r3, r0
 800a234:	461a      	mov	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a23c:	4413      	add	r3, r2
 800a23e:	b29a      	uxth	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fb fcf8 	bl	8005c40 <pbuf_clen>
 800a250:	4603      	mov	r3, r0
 800a252:	461a      	mov	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a25a:	4413      	add	r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d103      	bne.n	800a282 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	e016      	b.n	800a2b4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a286:	bf00      	nop
 800a288:	e002      	b.n	800a290 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a28a:	bf00      	nop
 800a28c:	e000      	b.n	800a290 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a28e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d006      	beq.n	800a2a4 <tcp_split_unsent_seg+0x25c>
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <tcp_split_unsent_seg+0x274>)
 800a298:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a29c:	490d      	ldr	r1, [pc, #52]	; (800a2d4 <tcp_split_unsent_seg+0x28c>)
 800a29e:	4809      	ldr	r0, [pc, #36]	; (800a2c4 <tcp_split_unsent_seg+0x27c>)
 800a2a0:	f004 fa42 	bl	800e728 <iprintf>
  if (p != NULL) {
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a2aa:	6938      	ldr	r0, [r7, #16]
 800a2ac:	f7fb fc40 	bl	8005b30 <pbuf_free>
  }

  return ERR_MEM;
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3724      	adds	r7, #36	; 0x24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd90      	pop	{r4, r7, pc}
 800a2bc:	080111c4 	.word	0x080111c4
 800a2c0:	08011558 	.word	0x08011558
 800a2c4:	08011218 	.word	0x08011218
 800a2c8:	0801157c 	.word	0x0801157c
 800a2cc:	080115a0 	.word	0x080115a0
 800a2d0:	080115b0 	.word	0x080115b0
 800a2d4:	080115c0 	.word	0x080115c0

0800a2d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a2d8:	b590      	push	{r4, r7, lr}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d106      	bne.n	800a2f4 <tcp_send_fin+0x1c>
 800a2e6:	4b21      	ldr	r3, [pc, #132]	; (800a36c <tcp_send_fin+0x94>)
 800a2e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a2ec:	4920      	ldr	r1, [pc, #128]	; (800a370 <tcp_send_fin+0x98>)
 800a2ee:	4821      	ldr	r0, [pc, #132]	; (800a374 <tcp_send_fin+0x9c>)
 800a2f0:	f004 fa1a 	bl	800e728 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d02e      	beq.n	800a35a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	e002      	b.n	800a30a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d1f8      	bne.n	800a304 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	899b      	ldrh	r3, [r3, #12]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fa f954 	bl	80045c8 <lwip_htons>
 800a320:	4603      	mov	r3, r0
 800a322:	b2db      	uxtb	r3, r3
 800a324:	f003 0307 	and.w	r3, r3, #7
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d116      	bne.n	800a35a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	899b      	ldrh	r3, [r3, #12]
 800a332:	b29c      	uxth	r4, r3
 800a334:	2001      	movs	r0, #1
 800a336:	f7fa f947 	bl	80045c8 <lwip_htons>
 800a33a:	4603      	mov	r3, r0
 800a33c:	461a      	mov	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	4322      	orrs	r2, r4
 800a344:	b292      	uxth	r2, r2
 800a346:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	8b5b      	ldrh	r3, [r3, #26]
 800a34c:	f043 0320 	orr.w	r3, r3, #32
 800a350:	b29a      	uxth	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	e004      	b.n	800a364 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a35a:	2101      	movs	r1, #1
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f80b 	bl	800a378 <tcp_enqueue_flags>
 800a362:	4603      	mov	r3, r0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd90      	pop	{r4, r7, pc}
 800a36c:	080111c4 	.word	0x080111c4
 800a370:	080115cc 	.word	0x080115cc
 800a374:	08011218 	.word	0x08011218

0800a378 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b08a      	sub	sp, #40	; 0x28
 800a37c:	af02      	add	r7, sp, #8
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	f003 0303 	and.w	r3, r3, #3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d106      	bne.n	800a3a4 <tcp_enqueue_flags+0x2c>
 800a396:	4b67      	ldr	r3, [pc, #412]	; (800a534 <tcp_enqueue_flags+0x1bc>)
 800a398:	f240 4211 	movw	r2, #1041	; 0x411
 800a39c:	4966      	ldr	r1, [pc, #408]	; (800a538 <tcp_enqueue_flags+0x1c0>)
 800a39e:	4867      	ldr	r0, [pc, #412]	; (800a53c <tcp_enqueue_flags+0x1c4>)
 800a3a0:	f004 f9c2 	bl	800e728 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <tcp_enqueue_flags+0x40>
 800a3aa:	4b62      	ldr	r3, [pc, #392]	; (800a534 <tcp_enqueue_flags+0x1bc>)
 800a3ac:	f240 4213 	movw	r2, #1043	; 0x413
 800a3b0:	4963      	ldr	r1, [pc, #396]	; (800a540 <tcp_enqueue_flags+0x1c8>)
 800a3b2:	4862      	ldr	r0, [pc, #392]	; (800a53c <tcp_enqueue_flags+0x1c4>)
 800a3b4:	f004 f9b8 	bl	800e728 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a3c6:	7ffb      	ldrb	r3, [r7, #31]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a3d2:	7dfb      	ldrb	r3, [r7, #23]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a3da:	4619      	mov	r1, r3
 800a3dc:	2036      	movs	r0, #54	; 0x36
 800a3de:	f7fb f8c3 	bl	8005568 <pbuf_alloc>
 800a3e2:	6138      	str	r0, [r7, #16]
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d109      	bne.n	800a3fe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	8b5b      	ldrh	r3, [r3, #26]
 800a3ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fc:	e095      	b.n	800a52a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	895a      	ldrh	r2, [r3, #10]
 800a402:	7dfb      	ldrb	r3, [r7, #23]
 800a404:	b29b      	uxth	r3, r3
 800a406:	429a      	cmp	r2, r3
 800a408:	d206      	bcs.n	800a418 <tcp_enqueue_flags+0xa0>
 800a40a:	4b4a      	ldr	r3, [pc, #296]	; (800a534 <tcp_enqueue_flags+0x1bc>)
 800a40c:	f240 4239 	movw	r2, #1081	; 0x439
 800a410:	494c      	ldr	r1, [pc, #304]	; (800a544 <tcp_enqueue_flags+0x1cc>)
 800a412:	484a      	ldr	r0, [pc, #296]	; (800a53c <tcp_enqueue_flags+0x1c4>)
 800a414:	f004 f988 	bl	800e728 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a41c:	78fa      	ldrb	r2, [r7, #3]
 800a41e:	7ffb      	ldrb	r3, [r7, #31]
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	460b      	mov	r3, r1
 800a424:	6939      	ldr	r1, [r7, #16]
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f7ff fd70 	bl	8009f0c <tcp_create_segment>
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d109      	bne.n	800a448 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	8b5b      	ldrh	r3, [r3, #26]
 800a438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	e070      	b.n	800a52a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	2b00      	cmp	r3, #0
 800a452:	d006      	beq.n	800a462 <tcp_enqueue_flags+0xea>
 800a454:	4b37      	ldr	r3, [pc, #220]	; (800a534 <tcp_enqueue_flags+0x1bc>)
 800a456:	f240 4242 	movw	r2, #1090	; 0x442
 800a45a:	493b      	ldr	r1, [pc, #236]	; (800a548 <tcp_enqueue_flags+0x1d0>)
 800a45c:	4837      	ldr	r0, [pc, #220]	; (800a53c <tcp_enqueue_flags+0x1c4>)
 800a45e:	f004 f963 	bl	800e728 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	891b      	ldrh	r3, [r3, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <tcp_enqueue_flags+0x100>
 800a46a:	4b32      	ldr	r3, [pc, #200]	; (800a534 <tcp_enqueue_flags+0x1bc>)
 800a46c:	f240 4243 	movw	r2, #1091	; 0x443
 800a470:	4936      	ldr	r1, [pc, #216]	; (800a54c <tcp_enqueue_flags+0x1d4>)
 800a472:	4832      	ldr	r0, [pc, #200]	; (800a53c <tcp_enqueue_flags+0x1c4>)
 800a474:	f004 f958 	bl	800e728 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d103      	bne.n	800a488 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	66da      	str	r2, [r3, #108]	; 0x6c
 800a486:	e00d      	b.n	800a4a4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	e002      	b.n	800a496 <tcp_enqueue_flags+0x11e>
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	61bb      	str	r3, [r7, #24]
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f8      	bne.n	800a490 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	f003 0302 	and.w	r3, r3, #2
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d104      	bne.n	800a4c0 <tcp_enqueue_flags+0x148>
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d004      	beq.n	800a4ca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a4ca:	78fb      	ldrb	r3, [r7, #3]
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d006      	beq.n	800a4e2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8b5b      	ldrh	r3, [r3, #26]
 800a4d8:	f043 0320 	orr.w	r3, r3, #32
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fb fbaa 	bl	8005c40 <pbuf_clen>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a4f6:	4413      	add	r3, r2
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00e      	beq.n	800a528 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <tcp_enqueue_flags+0x1b0>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a516:	2b00      	cmp	r3, #0
 800a518:	d106      	bne.n	800a528 <tcp_enqueue_flags+0x1b0>
 800a51a:	4b06      	ldr	r3, [pc, #24]	; (800a534 <tcp_enqueue_flags+0x1bc>)
 800a51c:	f240 4265 	movw	r2, #1125	; 0x465
 800a520:	490b      	ldr	r1, [pc, #44]	; (800a550 <tcp_enqueue_flags+0x1d8>)
 800a522:	4806      	ldr	r0, [pc, #24]	; (800a53c <tcp_enqueue_flags+0x1c4>)
 800a524:	f004 f900 	bl	800e728 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3720      	adds	r7, #32
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	080111c4 	.word	0x080111c4
 800a538:	080115e8 	.word	0x080115e8
 800a53c:	08011218 	.word	0x08011218
 800a540:	08011640 	.word	0x08011640
 800a544:	08011660 	.word	0x08011660
 800a548:	0801169c 	.word	0x0801169c
 800a54c:	080116b4 	.word	0x080116b4
 800a550:	080116e0 	.word	0x080116e0

0800a554 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a554:	b5b0      	push	{r4, r5, r7, lr}
 800a556:	b08a      	sub	sp, #40	; 0x28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d106      	bne.n	800a570 <tcp_output+0x1c>
 800a562:	4b9e      	ldr	r3, [pc, #632]	; (800a7dc <tcp_output+0x288>)
 800a564:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a568:	499d      	ldr	r1, [pc, #628]	; (800a7e0 <tcp_output+0x28c>)
 800a56a:	489e      	ldr	r0, [pc, #632]	; (800a7e4 <tcp_output+0x290>)
 800a56c:	f004 f8dc 	bl	800e728 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	7d1b      	ldrb	r3, [r3, #20]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d106      	bne.n	800a586 <tcp_output+0x32>
 800a578:	4b98      	ldr	r3, [pc, #608]	; (800a7dc <tcp_output+0x288>)
 800a57a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a57e:	499a      	ldr	r1, [pc, #616]	; (800a7e8 <tcp_output+0x294>)
 800a580:	4898      	ldr	r0, [pc, #608]	; (800a7e4 <tcp_output+0x290>)
 800a582:	f004 f8d1 	bl	800e728 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a586:	4b99      	ldr	r3, [pc, #612]	; (800a7ec <tcp_output+0x298>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d101      	bne.n	800a594 <tcp_output+0x40>
    return ERR_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	e1ce      	b.n	800a932 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	bf28      	it	cs
 800a5a4:	4613      	movcs	r3, r2
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10b      	bne.n	800a5ce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	8b5b      	ldrh	r3, [r3, #26]
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f000 81aa 	beq.w	800a918 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fdcb 	bl	800b160 <tcp_send_empty_ack>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	e1b1      	b.n	800a932 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff fc7c 	bl	8009ed4 <tcp_route>
 800a5dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d102      	bne.n	800a5ea <tcp_output+0x96>
    return ERR_RTE;
 800a5e4:	f06f 0303 	mvn.w	r3, #3
 800a5e8:	e1a3      	b.n	800a932 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <tcp_output+0xa4>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d111      	bne.n	800a61c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <tcp_output+0xb0>
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	3304      	adds	r3, #4
 800a602:	e000      	b.n	800a606 <tcp_output+0xb2>
 800a604:	2300      	movs	r3, #0
 800a606:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d102      	bne.n	800a614 <tcp_output+0xc0>
      return ERR_RTE;
 800a60e:	f06f 0303 	mvn.w	r3, #3
 800a612:	e18e      	b.n	800a932 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	4618      	mov	r0, r3
 800a624:	f7f9 ffe5 	bl	80045f2 <lwip_htonl>
 800a628:	4602      	mov	r2, r0
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a632:	8912      	ldrh	r2, [r2, #8]
 800a634:	4413      	add	r3, r2
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d227      	bcs.n	800a68c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a642:	461a      	mov	r2, r3
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	4293      	cmp	r3, r2
 800a648:	d114      	bne.n	800a674 <tcp_output+0x120>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d110      	bne.n	800a674 <tcp_output+0x120>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10b      	bne.n	800a674 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	8b5b      	ldrh	r3, [r3, #26]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 814d 	beq.w	800a91c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fd6c 	bl	800b160 <tcp_send_empty_ack>
 800a688:	4603      	mov	r3, r0
 800a68a:	e152      	b.n	800a932 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a698:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f000 811c 	beq.w	800a8da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a6a2:	e002      	b.n	800a6aa <tcp_output+0x156>
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	623b      	str	r3, [r7, #32]
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1f8      	bne.n	800a6a4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a6b2:	e112      	b.n	800a8da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	899b      	ldrh	r3, [r3, #12]
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7f9 ff83 	bl	80045c8 <lwip_htons>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0304 	and.w	r3, r3, #4
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d006      	beq.n	800a6dc <tcp_output+0x188>
 800a6ce:	4b43      	ldr	r3, [pc, #268]	; (800a7dc <tcp_output+0x288>)
 800a6d0:	f240 5236 	movw	r2, #1334	; 0x536
 800a6d4:	4946      	ldr	r1, [pc, #280]	; (800a7f0 <tcp_output+0x29c>)
 800a6d6:	4843      	ldr	r0, [pc, #268]	; (800a7e4 <tcp_output+0x290>)
 800a6d8:	f004 f826 	bl	800e728 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01f      	beq.n	800a724 <tcp_output+0x1d0>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	8b5b      	ldrh	r3, [r3, #26]
 800a6e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d119      	bne.n	800a724 <tcp_output+0x1d0>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <tcp_output+0x1bc>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d110      	bne.n	800a724 <tcp_output+0x1d0>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a706:	891a      	ldrh	r2, [r3, #8]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d209      	bcs.n	800a724 <tcp_output+0x1d0>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <tcp_output+0x1d0>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a720:	2b08      	cmp	r3, #8
 800a722:	d901      	bls.n	800a728 <tcp_output+0x1d4>
 800a724:	2301      	movs	r3, #1
 800a726:	e000      	b.n	800a72a <tcp_output+0x1d6>
 800a728:	2300      	movs	r3, #0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	8b5b      	ldrh	r3, [r3, #26]
 800a732:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a736:	2b00      	cmp	r3, #0
 800a738:	f000 80e4 	beq.w	800a904 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	7d1b      	ldrb	r3, [r3, #20]
 800a740:	2b02      	cmp	r3, #2
 800a742:	d00d      	beq.n	800a760 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	899b      	ldrh	r3, [r3, #12]
 800a74a:	b29c      	uxth	r4, r3
 800a74c:	2010      	movs	r0, #16
 800a74e:	f7f9 ff3b 	bl	80045c8 <lwip_htons>
 800a752:	4603      	mov	r3, r0
 800a754:	461a      	mov	r2, r3
 800a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	4322      	orrs	r2, r4
 800a75c:	b292      	uxth	r2, r2
 800a75e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a766:	f000 f909 	bl	800a97c <tcp_output_segment>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a76e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8b5b      	ldrh	r3, [r3, #26]
 800a77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	835a      	strh	r2, [r3, #26]
      return err;
 800a784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a788:	e0d3      	b.n	800a932 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	7d1b      	ldrb	r3, [r3, #20]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d006      	beq.n	800a7a8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	8b5b      	ldrh	r3, [r3, #26]
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7f9 ff1f 	bl	80045f2 <lwip_htonl>
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	891b      	ldrh	r3, [r3, #8]
 800a7ba:	461d      	mov	r5, r3
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	899b      	ldrh	r3, [r3, #12]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7f9 feff 	bl	80045c8 <lwip_htons>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00e      	beq.n	800a7f4 <tcp_output+0x2a0>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e00d      	b.n	800a7f6 <tcp_output+0x2a2>
 800a7da:	bf00      	nop
 800a7dc:	080111c4 	.word	0x080111c4
 800a7e0:	08011708 	.word	0x08011708
 800a7e4:	08011218 	.word	0x08011218
 800a7e8:	08011720 	.word	0x08011720
 800a7ec:	20008bc8 	.word	0x20008bc8
 800a7f0:	08011748 	.word	0x08011748
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	442b      	add	r3, r5
 800a7f8:	4423      	add	r3, r4
 800a7fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	da02      	bge.n	800a80e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	891b      	ldrh	r3, [r3, #8]
 800a812:	461c      	mov	r4, r3
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	899b      	ldrh	r3, [r3, #12]
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7f9 fed3 	bl	80045c8 <lwip_htons>
 800a822:	4603      	mov	r3, r0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <tcp_output+0x2de>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <tcp_output+0x2e0>
 800a832:	2300      	movs	r3, #0
 800a834:	4423      	add	r3, r4
 800a836:	2b00      	cmp	r3, #0
 800a838:	d049      	beq.n	800a8ce <tcp_output+0x37a>
      seg->next = NULL;
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a844:	2b00      	cmp	r3, #0
 800a846:	d105      	bne.n	800a854 <tcp_output+0x300>
        pcb->unacked = seg;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	623b      	str	r3, [r7, #32]
 800a852:	e03f      	b.n	800a8d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7f9 fec9 	bl	80045f2 <lwip_htonl>
 800a860:	4604      	mov	r4, r0
 800a862:	6a3b      	ldr	r3, [r7, #32]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f9 fec2 	bl	80045f2 <lwip_htonl>
 800a86e:	4603      	mov	r3, r0
 800a870:	1ae3      	subs	r3, r4, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	da24      	bge.n	800a8c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3370      	adds	r3, #112	; 0x70
 800a87a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a87c:	e002      	b.n	800a884 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d011      	beq.n	800a8b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	4618      	mov	r0, r3
 800a896:	f7f9 feac 	bl	80045f2 <lwip_htonl>
 800a89a:	4604      	mov	r4, r0
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7f9 fea5 	bl	80045f2 <lwip_htonl>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dbe6      	blt.n	800a87e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	e009      	b.n	800a8d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	623b      	str	r3, [r7, #32]
 800a8cc:	e002      	b.n	800a8d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a8ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8d0:	f7fc fc43 	bl	800715a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d012      	beq.n	800a906 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7f9 fe83 	bl	80045f2 <lwip_htonl>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f6:	8912      	ldrh	r2, [r2, #8]
 800a8f8:	4413      	add	r3, r2
  while (seg != NULL &&
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	f4bf aed9 	bcs.w	800a6b4 <tcp_output+0x160>
 800a902:	e000      	b.n	800a906 <tcp_output+0x3b2>
      break;
 800a904:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d108      	bne.n	800a920 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a916:	e004      	b.n	800a922 <tcp_output+0x3ce>
    goto output_done;
 800a918:	bf00      	nop
 800a91a:	e002      	b.n	800a922 <tcp_output+0x3ce>
    goto output_done;
 800a91c:	bf00      	nop
 800a91e:	e000      	b.n	800a922 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a920:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	8b5b      	ldrh	r3, [r3, #26]
 800a926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3728      	adds	r7, #40	; 0x28
 800a936:	46bd      	mov	sp, r7
 800a938:	bdb0      	pop	{r4, r5, r7, pc}
 800a93a:	bf00      	nop

0800a93c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <tcp_output_segment_busy+0x1c>
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <tcp_output_segment_busy+0x34>)
 800a94c:	f240 529a 	movw	r2, #1434	; 0x59a
 800a950:	4908      	ldr	r1, [pc, #32]	; (800a974 <tcp_output_segment_busy+0x38>)
 800a952:	4809      	ldr	r0, [pc, #36]	; (800a978 <tcp_output_segment_busy+0x3c>)
 800a954:	f003 fee8 	bl	800e728 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	7b9b      	ldrb	r3, [r3, #14]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d001      	beq.n	800a966 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	080111c4 	.word	0x080111c4
 800a974:	08011760 	.word	0x08011760
 800a978:	08011218 	.word	0x08011218

0800a97c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a97c:	b5b0      	push	{r4, r5, r7, lr}
 800a97e:	b08c      	sub	sp, #48	; 0x30
 800a980:	af04      	add	r7, sp, #16
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <tcp_output_segment+0x20>
 800a98e:	4b63      	ldr	r3, [pc, #396]	; (800ab1c <tcp_output_segment+0x1a0>)
 800a990:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a994:	4962      	ldr	r1, [pc, #392]	; (800ab20 <tcp_output_segment+0x1a4>)
 800a996:	4863      	ldr	r0, [pc, #396]	; (800ab24 <tcp_output_segment+0x1a8>)
 800a998:	f003 fec6 	bl	800e728 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <tcp_output_segment+0x34>
 800a9a2:	4b5e      	ldr	r3, [pc, #376]	; (800ab1c <tcp_output_segment+0x1a0>)
 800a9a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a9a8:	495f      	ldr	r1, [pc, #380]	; (800ab28 <tcp_output_segment+0x1ac>)
 800a9aa:	485e      	ldr	r0, [pc, #376]	; (800ab24 <tcp_output_segment+0x1a8>)
 800a9ac:	f003 febc 	bl	800e728 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <tcp_output_segment+0x48>
 800a9b6:	4b59      	ldr	r3, [pc, #356]	; (800ab1c <tcp_output_segment+0x1a0>)
 800a9b8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a9bc:	495b      	ldr	r1, [pc, #364]	; (800ab2c <tcp_output_segment+0x1b0>)
 800a9be:	4859      	ldr	r0, [pc, #356]	; (800ab24 <tcp_output_segment+0x1a8>)
 800a9c0:	f003 feb2 	bl	800e728 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7ff ffb9 	bl	800a93c <tcp_output_segment_busy>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d001      	beq.n	800a9d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e09f      	b.n	800ab14 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	68dc      	ldr	r4, [r3, #12]
 800a9dc:	4610      	mov	r0, r2
 800a9de:	f7f9 fe08 	bl	80045f2 <lwip_htonl>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	68dc      	ldr	r4, [r3, #12]
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f7f9 fdea 	bl	80045c8 <lwip_htons>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aa00:	441a      	add	r2, r3
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	3314      	adds	r3, #20
 800aa0c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	7a9b      	ldrb	r3, [r3, #10]
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d015      	beq.n	800aa46 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	461a      	mov	r2, r3
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	f44f 7006 	mov.w	r0, #536	; 0x218
 800aa26:	f7fc fe8f 	bl	8007748 <tcp_eff_send_mss_netif>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800aa2e:	8b7b      	ldrh	r3, [r7, #26]
 800aa30:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7f9 fddc 	bl	80045f2 <lwip_htonl>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	3304      	adds	r3, #4
 800aa44:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	da02      	bge.n	800aa56 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	2200      	movs	r2, #0
 800aa54:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10c      	bne.n	800aa78 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800aa5e:	4b34      	ldr	r3, [pc, #208]	; (800ab30 <tcp_output_segment+0x1b4>)
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7f9 fdc0 	bl	80045f2 <lwip_htonl>
 800aa72:	4602      	mov	r2, r0
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68da      	ldr	r2, [r3, #12]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	8959      	ldrh	r1, [r3, #10]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	8b3a      	ldrh	r2, [r7, #24]
 800aa92:	1a8a      	subs	r2, r1, r2
 800aa94:	b292      	uxth	r2, r2
 800aa96:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	8919      	ldrh	r1, [r3, #8]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	8b3a      	ldrh	r2, [r7, #24]
 800aaa4:	1a8a      	subs	r2, r1, r2
 800aaa6:	b292      	uxth	r2, r2
 800aaa8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	68d2      	ldr	r2, [r2, #12]
 800aab2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	741a      	strb	r2, [r3, #16]
 800aabc:	2200      	movs	r2, #0
 800aabe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	f103 0214 	add.w	r2, r3, #20
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	7a9b      	ldrb	r3, [r3, #10]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	f003 0304 	and.w	r3, r3, #4
 800aad2:	4413      	add	r3, r2
 800aad4:	69fa      	ldr	r2, [r7, #28]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d006      	beq.n	800aae8 <tcp_output_segment+0x16c>
 800aada:	4b10      	ldr	r3, [pc, #64]	; (800ab1c <tcp_output_segment+0x1a0>)
 800aadc:	f240 621c 	movw	r2, #1564	; 0x61c
 800aae0:	4914      	ldr	r1, [pc, #80]	; (800ab34 <tcp_output_segment+0x1b8>)
 800aae2:	4810      	ldr	r0, [pc, #64]	; (800ab24 <tcp_output_segment+0x1a8>)
 800aae4:	f003 fe20 	bl	800e728 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6858      	ldr	r0, [r3, #4]
 800aaec:	68b9      	ldr	r1, [r7, #8]
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	1d1c      	adds	r4, r3, #4
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	7add      	ldrb	r5, [r3, #11]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	7a9b      	ldrb	r3, [r3, #10]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	9202      	str	r2, [sp, #8]
 800aafe:	2206      	movs	r2, #6
 800ab00:	9201      	str	r2, [sp, #4]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	462b      	mov	r3, r5
 800ab06:	4622      	mov	r2, r4
 800ab08:	f002 fd84 	bl	800d614 <ip4_output_if>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ab10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3720      	adds	r7, #32
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab1c:	080111c4 	.word	0x080111c4
 800ab20:	08011788 	.word	0x08011788
 800ab24:	08011218 	.word	0x08011218
 800ab28:	080117a8 	.word	0x080117a8
 800ab2c:	080117c8 	.word	0x080117c8
 800ab30:	20008bb8 	.word	0x20008bb8
 800ab34:	080117ec 	.word	0x080117ec

0800ab38 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ab38:	b5b0      	push	{r4, r5, r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d106      	bne.n	800ab54 <tcp_rexmit_rto_prepare+0x1c>
 800ab46:	4b31      	ldr	r3, [pc, #196]	; (800ac0c <tcp_rexmit_rto_prepare+0xd4>)
 800ab48:	f240 6263 	movw	r2, #1635	; 0x663
 800ab4c:	4930      	ldr	r1, [pc, #192]	; (800ac10 <tcp_rexmit_rto_prepare+0xd8>)
 800ab4e:	4831      	ldr	r0, [pc, #196]	; (800ac14 <tcp_rexmit_rto_prepare+0xdc>)
 800ab50:	f003 fdea 	bl	800e728 <iprintf>

  if (pcb->unacked == NULL) {
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d102      	bne.n	800ab62 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ab5c:	f06f 0305 	mvn.w	r3, #5
 800ab60:	e050      	b.n	800ac04 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab66:	60fb      	str	r3, [r7, #12]
 800ab68:	e00b      	b.n	800ab82 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fee6 	bl	800a93c <tcp_output_segment_busy>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ab76:	f06f 0305 	mvn.w	r3, #5
 800ab7a:	e043      	b.n	800ac04 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	60fb      	str	r3, [r7, #12]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1ef      	bne.n	800ab6a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff fed6 	bl	800a93c <tcp_output_segment_busy>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ab96:	f06f 0305 	mvn.w	r3, #5
 800ab9a:	e033      	b.n	800ac04 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	8b5b      	ldrh	r3, [r3, #26]
 800abb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abba:	b29a      	uxth	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7f9 fd13 	bl	80045f2 <lwip_htonl>
 800abcc:	4604      	mov	r4, r0
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	891b      	ldrh	r3, [r3, #8]
 800abd2:	461d      	mov	r5, r3
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	899b      	ldrh	r3, [r3, #12]
 800abda:	b29b      	uxth	r3, r3
 800abdc:	4618      	mov	r0, r3
 800abde:	f7f9 fcf3 	bl	80045c8 <lwip_htons>
 800abe2:	4603      	mov	r3, r0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 0303 	and.w	r3, r3, #3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <tcp_rexmit_rto_prepare+0xba>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <tcp_rexmit_rto_prepare+0xbc>
 800abf2:	2300      	movs	r3, #0
 800abf4:	442b      	add	r3, r5
 800abf6:	18e2      	adds	r2, r4, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac0c:	080111c4 	.word	0x080111c4
 800ac10:	08011800 	.word	0x08011800
 800ac14:	08011218 	.word	0x08011218

0800ac18 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d106      	bne.n	800ac34 <tcp_rexmit_rto_commit+0x1c>
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <tcp_rexmit_rto_commit+0x44>)
 800ac28:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ac2c:	490c      	ldr	r1, [pc, #48]	; (800ac60 <tcp_rexmit_rto_commit+0x48>)
 800ac2e:	480d      	ldr	r0, [pc, #52]	; (800ac64 <tcp_rexmit_rto_commit+0x4c>)
 800ac30:	f003 fd7a 	bl	800e728 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac3a:	2bff      	cmp	r3, #255	; 0xff
 800ac3c:	d007      	beq.n	800ac4e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac44:	3301      	adds	r3, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff fc80 	bl	800a554 <tcp_output>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	080111c4 	.word	0x080111c4
 800ac60:	08011824 	.word	0x08011824
 800ac64:	08011218 	.word	0x08011218

0800ac68 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d106      	bne.n	800ac84 <tcp_rexmit_rto+0x1c>
 800ac76:	4b0a      	ldr	r3, [pc, #40]	; (800aca0 <tcp_rexmit_rto+0x38>)
 800ac78:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ac7c:	4909      	ldr	r1, [pc, #36]	; (800aca4 <tcp_rexmit_rto+0x3c>)
 800ac7e:	480a      	ldr	r0, [pc, #40]	; (800aca8 <tcp_rexmit_rto+0x40>)
 800ac80:	f003 fd52 	bl	800e728 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ff57 	bl	800ab38 <tcp_rexmit_rto_prepare>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d102      	bne.n	800ac96 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff ffc1 	bl	800ac18 <tcp_rexmit_rto_commit>
  }
}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	080111c4 	.word	0x080111c4
 800aca4:	08011848 	.word	0x08011848
 800aca8:	08011218 	.word	0x08011218

0800acac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <tcp_rexmit+0x1c>
 800acba:	4b2f      	ldr	r3, [pc, #188]	; (800ad78 <tcp_rexmit+0xcc>)
 800acbc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800acc0:	492e      	ldr	r1, [pc, #184]	; (800ad7c <tcp_rexmit+0xd0>)
 800acc2:	482f      	ldr	r0, [pc, #188]	; (800ad80 <tcp_rexmit+0xd4>)
 800acc4:	f003 fd30 	bl	800e728 <iprintf>

  if (pcb->unacked == NULL) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800acd0:	f06f 0305 	mvn.w	r3, #5
 800acd4:	e04c      	b.n	800ad70 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acda:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800acdc:	68b8      	ldr	r0, [r7, #8]
 800acde:	f7ff fe2d 	bl	800a93c <tcp_output_segment_busy>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ace8:	f06f 0305 	mvn.w	r3, #5
 800acec:	e040      	b.n	800ad70 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	336c      	adds	r3, #108	; 0x6c
 800acfa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800acfc:	e002      	b.n	800ad04 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d011      	beq.n	800ad30 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7f9 fc6c 	bl	80045f2 <lwip_htonl>
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f9 fc65 	bl	80045f2 <lwip_htonl>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dbe6      	blt.n	800acfe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d103      	bne.n	800ad4e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad54:	2bff      	cmp	r3, #255	; 0xff
 800ad56:	d007      	beq.n	800ad68 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad5e:	3301      	adds	r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd90      	pop	{r4, r7, pc}
 800ad78:	080111c4 	.word	0x080111c4
 800ad7c:	08011864 	.word	0x08011864
 800ad80:	08011218 	.word	0x08011218

0800ad84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <tcp_rexmit_fast+0x1c>
 800ad92:	4b2a      	ldr	r3, [pc, #168]	; (800ae3c <tcp_rexmit_fast+0xb8>)
 800ad94:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ad98:	4929      	ldr	r1, [pc, #164]	; (800ae40 <tcp_rexmit_fast+0xbc>)
 800ad9a:	482a      	ldr	r0, [pc, #168]	; (800ae44 <tcp_rexmit_fast+0xc0>)
 800ad9c:	f003 fcc4 	bl	800e728 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d044      	beq.n	800ae32 <tcp_rexmit_fast+0xae>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	8b5b      	ldrh	r3, [r3, #26]
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d13e      	bne.n	800ae32 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ff79 	bl	800acac <tcp_rexmit>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d138      	bne.n	800ae32 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800adcc:	4293      	cmp	r3, r2
 800adce:	bf28      	it	cs
 800add0:	4613      	movcs	r3, r2
 800add2:	b29b      	uxth	r3, r3
 800add4:	0fda      	lsrs	r2, r3, #31
 800add6:	4413      	add	r3, r2
 800add8:	105b      	asrs	r3, r3, #1
 800adda:	b29a      	uxth	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ade8:	461a      	mov	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d206      	bcs.n	800ae02 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	0049      	lsls	r1, r1, #1
 800ae10:	440b      	add	r3, r1
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	4413      	add	r3, r2
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	8b5b      	ldrh	r3, [r3, #26]
 800ae22:	f043 0304 	orr.w	r3, r3, #4
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	080111c4 	.word	0x080111c4
 800ae40:	0801187c 	.word	0x0801187c
 800ae44:	08011218 	.word	0x08011218

0800ae48 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	607b      	str	r3, [r7, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	817b      	strh	r3, [r7, #10]
 800ae56:	4613      	mov	r3, r2
 800ae58:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae5a:	897a      	ldrh	r2, [r7, #10]
 800ae5c:	893b      	ldrh	r3, [r7, #8]
 800ae5e:	4413      	add	r3, r2
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	3314      	adds	r3, #20
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	2022      	movs	r0, #34	; 0x22
 800ae6e:	f7fa fb7b 	bl	8005568 <pbuf_alloc>
 800ae72:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d04d      	beq.n	800af16 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae7a:	897b      	ldrh	r3, [r7, #10]
 800ae7c:	3313      	adds	r3, #19
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	8952      	ldrh	r2, [r2, #10]
 800ae82:	4293      	cmp	r3, r2
 800ae84:	db06      	blt.n	800ae94 <tcp_output_alloc_header_common+0x4c>
 800ae86:	4b26      	ldr	r3, [pc, #152]	; (800af20 <tcp_output_alloc_header_common+0xd8>)
 800ae88:	f240 7223 	movw	r2, #1827	; 0x723
 800ae8c:	4925      	ldr	r1, [pc, #148]	; (800af24 <tcp_output_alloc_header_common+0xdc>)
 800ae8e:	4826      	ldr	r0, [pc, #152]	; (800af28 <tcp_output_alloc_header_common+0xe0>)
 800ae90:	f003 fc4a 	bl	800e728 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ae9a:	8c3b      	ldrh	r3, [r7, #32]
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7f9 fb93 	bl	80045c8 <lwip_htons>
 800aea2:	4603      	mov	r3, r0
 800aea4:	461a      	mov	r2, r3
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800aeaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f9 fb8b 	bl	80045c8 <lwip_htons>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f7f9 fb96 	bl	80045f2 <lwip_htonl>
 800aec6:	4602      	mov	r2, r0
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800aecc:	897b      	ldrh	r3, [r7, #10]
 800aece:	089b      	lsrs	r3, r3, #2
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	3305      	adds	r3, #5
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	031b      	lsls	r3, r3, #12
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aede:	b29b      	uxth	r3, r3
 800aee0:	4313      	orrs	r3, r2
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7f9 fb6f 	bl	80045c8 <lwip_htons>
 800aeea:	4603      	mov	r3, r0
 800aeec:	461a      	mov	r2, r3
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800aef2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7f9 fb67 	bl	80045c8 <lwip_htons>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461a      	mov	r2, r3
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2200      	movs	r2, #0
 800af06:	741a      	strb	r2, [r3, #16]
 800af08:	2200      	movs	r2, #0
 800af0a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	2200      	movs	r2, #0
 800af10:	749a      	strb	r2, [r3, #18]
 800af12:	2200      	movs	r2, #0
 800af14:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800af16:	697b      	ldr	r3, [r7, #20]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	080111c4 	.word	0x080111c4
 800af24:	0801189c 	.word	0x0801189c
 800af28:	08011218 	.word	0x08011218

0800af2c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800af2c:	b5b0      	push	{r4, r5, r7, lr}
 800af2e:	b08a      	sub	sp, #40	; 0x28
 800af30:	af04      	add	r7, sp, #16
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	607b      	str	r3, [r7, #4]
 800af36:	460b      	mov	r3, r1
 800af38:	817b      	strh	r3, [r7, #10]
 800af3a:	4613      	mov	r3, r2
 800af3c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d106      	bne.n	800af52 <tcp_output_alloc_header+0x26>
 800af44:	4b15      	ldr	r3, [pc, #84]	; (800af9c <tcp_output_alloc_header+0x70>)
 800af46:	f240 7242 	movw	r2, #1858	; 0x742
 800af4a:	4915      	ldr	r1, [pc, #84]	; (800afa0 <tcp_output_alloc_header+0x74>)
 800af4c:	4815      	ldr	r0, [pc, #84]	; (800afa4 <tcp_output_alloc_header+0x78>)
 800af4e:	f003 fbeb 	bl	800e728 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	8adb      	ldrh	r3, [r3, #22]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	8b12      	ldrh	r2, [r2, #24]
 800af5e:	68f9      	ldr	r1, [r7, #12]
 800af60:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800af62:	893d      	ldrh	r5, [r7, #8]
 800af64:	897c      	ldrh	r4, [r7, #10]
 800af66:	9103      	str	r1, [sp, #12]
 800af68:	2110      	movs	r1, #16
 800af6a:	9102      	str	r1, [sp, #8]
 800af6c:	9201      	str	r2, [sp, #4]
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	462a      	mov	r2, r5
 800af74:	4621      	mov	r1, r4
 800af76:	f7ff ff67 	bl	800ae48 <tcp_output_alloc_header_common>
 800af7a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d006      	beq.n	800af90 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800af8a:	441a      	add	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800af90:	697b      	ldr	r3, [r7, #20]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bdb0      	pop	{r4, r5, r7, pc}
 800af9a:	bf00      	nop
 800af9c:	080111c4 	.word	0x080111c4
 800afa0:	080118cc 	.word	0x080118cc
 800afa4:	08011218 	.word	0x08011218

0800afa8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	4611      	mov	r1, r2
 800afb4:	461a      	mov	r2, r3
 800afb6:	460b      	mov	r3, r1
 800afb8:	71fb      	strb	r3, [r7, #7]
 800afba:	4613      	mov	r3, r2
 800afbc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d106      	bne.n	800afd6 <tcp_output_fill_options+0x2e>
 800afc8:	4b13      	ldr	r3, [pc, #76]	; (800b018 <tcp_output_fill_options+0x70>)
 800afca:	f240 7256 	movw	r2, #1878	; 0x756
 800afce:	4913      	ldr	r1, [pc, #76]	; (800b01c <tcp_output_fill_options+0x74>)
 800afd0:	4813      	ldr	r0, [pc, #76]	; (800b020 <tcp_output_fill_options+0x78>)
 800afd2:	f003 fba9 	bl	800e728 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	3314      	adds	r3, #20
 800afe0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	f103 0214 	add.w	r2, r3, #20
 800afe8:	8bfb      	ldrh	r3, [r7, #30]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4619      	mov	r1, r3
 800afee:	79fb      	ldrb	r3, [r7, #7]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	f003 0304 	and.w	r3, r3, #4
 800aff6:	440b      	add	r3, r1
 800aff8:	4413      	add	r3, r2
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	429a      	cmp	r2, r3
 800affe:	d006      	beq.n	800b00e <tcp_output_fill_options+0x66>
 800b000:	4b05      	ldr	r3, [pc, #20]	; (800b018 <tcp_output_fill_options+0x70>)
 800b002:	f240 7275 	movw	r2, #1909	; 0x775
 800b006:	4907      	ldr	r1, [pc, #28]	; (800b024 <tcp_output_fill_options+0x7c>)
 800b008:	4805      	ldr	r0, [pc, #20]	; (800b020 <tcp_output_fill_options+0x78>)
 800b00a:	f003 fb8d 	bl	800e728 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b00e:	bf00      	nop
 800b010:	3720      	adds	r7, #32
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	080111c4 	.word	0x080111c4
 800b01c:	080118f4 	.word	0x080118f4
 800b020:	08011218 	.word	0x08011218
 800b024:	080117ec 	.word	0x080117ec

0800b028 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	; 0x28
 800b02c:	af04      	add	r7, sp, #16
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d106      	bne.n	800b04a <tcp_output_control_segment+0x22>
 800b03c:	4b1c      	ldr	r3, [pc, #112]	; (800b0b0 <tcp_output_control_segment+0x88>)
 800b03e:	f240 7287 	movw	r2, #1927	; 0x787
 800b042:	491c      	ldr	r1, [pc, #112]	; (800b0b4 <tcp_output_control_segment+0x8c>)
 800b044:	481c      	ldr	r0, [pc, #112]	; (800b0b8 <tcp_output_control_segment+0x90>)
 800b046:	f003 fb6f 	bl	800e728 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7fe ff40 	bl	8009ed4 <tcp_route>
 800b054:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d102      	bne.n	800b062 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b05c:	23fc      	movs	r3, #252	; 0xfc
 800b05e:	75fb      	strb	r3, [r7, #23]
 800b060:	e01c      	b.n	800b09c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	7adb      	ldrb	r3, [r3, #11]
 800b06c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	7a9b      	ldrb	r3, [r3, #10]
 800b072:	757b      	strb	r3, [r7, #21]
 800b074:	e003      	b.n	800b07e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b076:	23ff      	movs	r3, #255	; 0xff
 800b078:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b07e:	7dba      	ldrb	r2, [r7, #22]
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	9302      	str	r3, [sp, #8]
 800b084:	2306      	movs	r3, #6
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	7d7b      	ldrb	r3, [r7, #21]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4613      	mov	r3, r2
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	68b8      	ldr	r0, [r7, #8]
 800b094:	f002 fabe 	bl	800d614 <ip4_output_if>
 800b098:	4603      	mov	r3, r0
 800b09a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b09c:	68b8      	ldr	r0, [r7, #8]
 800b09e:	f7fa fd47 	bl	8005b30 <pbuf_free>
  return err;
 800b0a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	080111c4 	.word	0x080111c4
 800b0b4:	0801191c 	.word	0x0801191c
 800b0b8:	08011218 	.word	0x08011218

0800b0bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b08b      	sub	sp, #44	; 0x2c
 800b0c0:	af04      	add	r7, sp, #16
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d106      	bne.n	800b0de <tcp_rst+0x22>
 800b0d0:	4b1f      	ldr	r3, [pc, #124]	; (800b150 <tcp_rst+0x94>)
 800b0d2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b0d6:	491f      	ldr	r1, [pc, #124]	; (800b154 <tcp_rst+0x98>)
 800b0d8:	481f      	ldr	r0, [pc, #124]	; (800b158 <tcp_rst+0x9c>)
 800b0da:	f003 fb25 	bl	800e728 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d106      	bne.n	800b0f2 <tcp_rst+0x36>
 800b0e4:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <tcp_rst+0x94>)
 800b0e6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b0ea:	491c      	ldr	r1, [pc, #112]	; (800b15c <tcp_rst+0xa0>)
 800b0ec:	481a      	ldr	r0, [pc, #104]	; (800b158 <tcp_rst+0x9c>)
 800b0ee:	f003 fb1b 	bl	800e728 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b0f6:	f246 0308 	movw	r3, #24584	; 0x6008
 800b0fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	b29c      	uxth	r4, r3
 800b100:	68b8      	ldr	r0, [r7, #8]
 800b102:	f7f9 fa76 	bl	80045f2 <lwip_htonl>
 800b106:	4602      	mov	r2, r0
 800b108:	8abb      	ldrh	r3, [r7, #20]
 800b10a:	9303      	str	r3, [sp, #12]
 800b10c:	2314      	movs	r3, #20
 800b10e:	9302      	str	r3, [sp, #8]
 800b110:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	4613      	mov	r3, r2
 800b11a:	2200      	movs	r2, #0
 800b11c:	4621      	mov	r1, r4
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fe92 	bl	800ae48 <tcp_output_alloc_header_common>
 800b124:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00c      	beq.n	800b146 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b12c:	7dfb      	ldrb	r3, [r7, #23]
 800b12e:	2200      	movs	r2, #0
 800b130:	6939      	ldr	r1, [r7, #16]
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f7ff ff38 	bl	800afa8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	6939      	ldr	r1, [r7, #16]
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f7ff ff72 	bl	800b028 <tcp_output_control_segment>
 800b144:	e000      	b.n	800b148 <tcp_rst+0x8c>
    return;
 800b146:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd90      	pop	{r4, r7, pc}
 800b14e:	bf00      	nop
 800b150:	080111c4 	.word	0x080111c4
 800b154:	08011948 	.word	0x08011948
 800b158:	08011218 	.word	0x08011218
 800b15c:	08011964 	.word	0x08011964

0800b160 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b160:	b590      	push	{r4, r7, lr}
 800b162:	b087      	sub	sp, #28
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <tcp_send_empty_ack+0x24>
 800b176:	4b28      	ldr	r3, [pc, #160]	; (800b218 <tcp_send_empty_ack+0xb8>)
 800b178:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b17c:	4927      	ldr	r1, [pc, #156]	; (800b21c <tcp_send_empty_ack+0xbc>)
 800b17e:	4828      	ldr	r0, [pc, #160]	; (800b220 <tcp_send_empty_ack+0xc0>)
 800b180:	f003 fad2 	bl	800e728 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b184:	7dfb      	ldrb	r3, [r7, #23]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b190:	7d7b      	ldrb	r3, [r7, #21]
 800b192:	b29c      	uxth	r4, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b198:	4618      	mov	r0, r3
 800b19a:	f7f9 fa2a 	bl	80045f2 <lwip_htonl>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	4621      	mov	r1, r4
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7ff fec1 	bl	800af2c <tcp_output_alloc_header>
 800b1aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d109      	bne.n	800b1c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	8b5b      	ldrh	r3, [r3, #26]
 800b1b6:	f043 0303 	orr.w	r3, r3, #3
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b1c0:	f06f 0301 	mvn.w	r3, #1
 800b1c4:	e023      	b.n	800b20e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b1c6:	7dbb      	ldrb	r3, [r7, #22]
 800b1c8:	7dfa      	ldrb	r2, [r7, #23]
 800b1ca:	6939      	ldr	r1, [r7, #16]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff feeb 	bl	800afa8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	6939      	ldr	r1, [r7, #16]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7ff ff24 	bl	800b028 <tcp_output_control_segment>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b1e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d007      	beq.n	800b1fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	8b5b      	ldrh	r3, [r3, #26]
 800b1f0:	f043 0303 	orr.w	r3, r3, #3
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	835a      	strh	r2, [r3, #26]
 800b1fa:	e006      	b.n	800b20a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	8b5b      	ldrh	r3, [r3, #26]
 800b200:	f023 0303 	bic.w	r3, r3, #3
 800b204:	b29a      	uxth	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b20a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	371c      	adds	r7, #28
 800b212:	46bd      	mov	sp, r7
 800b214:	bd90      	pop	{r4, r7, pc}
 800b216:	bf00      	nop
 800b218:	080111c4 	.word	0x080111c4
 800b21c:	08011980 	.word	0x08011980
 800b220:	08011218 	.word	0x08011218

0800b224 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b224:	b590      	push	{r4, r7, lr}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b22c:	2300      	movs	r3, #0
 800b22e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d106      	bne.n	800b244 <tcp_keepalive+0x20>
 800b236:	4b18      	ldr	r3, [pc, #96]	; (800b298 <tcp_keepalive+0x74>)
 800b238:	f640 0224 	movw	r2, #2084	; 0x824
 800b23c:	4917      	ldr	r1, [pc, #92]	; (800b29c <tcp_keepalive+0x78>)
 800b23e:	4818      	ldr	r0, [pc, #96]	; (800b2a0 <tcp_keepalive+0x7c>)
 800b240:	f003 fa72 	bl	800e728 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	b29c      	uxth	r4, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b24c:	3b01      	subs	r3, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f7f9 f9cf 	bl	80045f2 <lwip_htonl>
 800b254:	4603      	mov	r3, r0
 800b256:	2200      	movs	r2, #0
 800b258:	4621      	mov	r1, r4
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff fe66 	bl	800af2c <tcp_output_alloc_header>
 800b260:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d102      	bne.n	800b26e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b268:	f04f 33ff 	mov.w	r3, #4294967295
 800b26c:	e010      	b.n	800b290 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2200      	movs	r2, #0
 800b272:	6939      	ldr	r1, [r7, #16]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7ff fe97 	bl	800afa8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3304      	adds	r3, #4
 800b280:	6939      	ldr	r1, [r7, #16]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff fed0 	bl	800b028 <tcp_output_control_segment>
 800b288:	4603      	mov	r3, r0
 800b28a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b28c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b290:	4618      	mov	r0, r3
 800b292:	371c      	adds	r7, #28
 800b294:	46bd      	mov	sp, r7
 800b296:	bd90      	pop	{r4, r7, pc}
 800b298:	080111c4 	.word	0x080111c4
 800b29c:	080119a0 	.word	0x080119a0
 800b2a0:	08011218 	.word	0x08011218

0800b2a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b2a4:	b590      	push	{r4, r7, lr}
 800b2a6:	b08b      	sub	sp, #44	; 0x2c
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d106      	bne.n	800b2c6 <tcp_zero_window_probe+0x22>
 800b2b8:	4b4c      	ldr	r3, [pc, #304]	; (800b3ec <tcp_zero_window_probe+0x148>)
 800b2ba:	f640 024f 	movw	r2, #2127	; 0x84f
 800b2be:	494c      	ldr	r1, [pc, #304]	; (800b3f0 <tcp_zero_window_probe+0x14c>)
 800b2c0:	484c      	ldr	r0, [pc, #304]	; (800b3f4 <tcp_zero_window_probe+0x150>)
 800b2c2:	f003 fa31 	bl	800e728 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e086      	b.n	800b3e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b2dc:	2bff      	cmp	r3, #255	; 0xff
 800b2de:	d007      	beq.n	800b2f0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b2f0:	6a3b      	ldr	r3, [r7, #32]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	899b      	ldrh	r3, [r3, #12]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7f9 f965 	bl	80045c8 <lwip_htons>
 800b2fe:	4603      	mov	r3, r0
 800b300:	b2db      	uxtb	r3, r3
 800b302:	f003 0301 	and.w	r3, r3, #1
 800b306:	2b00      	cmp	r3, #0
 800b308:	d005      	beq.n	800b316 <tcp_zero_window_probe+0x72>
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	891b      	ldrh	r3, [r3, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <tcp_zero_window_probe+0x72>
 800b312:	2301      	movs	r3, #1
 800b314:	e000      	b.n	800b318 <tcp_zero_window_probe+0x74>
 800b316:	2300      	movs	r3, #0
 800b318:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b31a:	7ffb      	ldrb	r3, [r7, #31]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bf0c      	ite	eq
 800b320:	2301      	moveq	r3, #1
 800b322:	2300      	movne	r3, #0
 800b324:	b2db      	uxtb	r3, r3
 800b326:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b32c:	b299      	uxth	r1, r3
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	8bba      	ldrh	r2, [r7, #28]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff fdf8 	bl	800af2c <tcp_output_alloc_header>
 800b33c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d102      	bne.n	800b34a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b344:	f04f 33ff 	mov.w	r3, #4294967295
 800b348:	e04c      	b.n	800b3e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b350:	7ffb      	ldrb	r3, [r7, #31]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d011      	beq.n	800b37a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	899b      	ldrh	r3, [r3, #12]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	b21b      	sxth	r3, r3
 800b35e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b362:	b21c      	sxth	r4, r3
 800b364:	2011      	movs	r0, #17
 800b366:	f7f9 f92f 	bl	80045c8 <lwip_htons>
 800b36a:	4603      	mov	r3, r0
 800b36c:	b21b      	sxth	r3, r3
 800b36e:	4323      	orrs	r3, r4
 800b370:	b21b      	sxth	r3, r3
 800b372:	b29a      	uxth	r2, r3
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	819a      	strh	r2, [r3, #12]
 800b378:	e010      	b.n	800b39c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	3314      	adds	r3, #20
 800b380:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b382:	6a3b      	ldr	r3, [r7, #32]
 800b384:	6858      	ldr	r0, [r3, #4]
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	891a      	ldrh	r2, [r3, #8]
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	891b      	ldrh	r3, [r3, #8]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	b29b      	uxth	r3, r3
 800b394:	2201      	movs	r2, #1
 800b396:	6939      	ldr	r1, [r7, #16]
 800b398:	f7fa fdc4 	bl	8005f24 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7f9 f925 	bl	80045f2 <lwip_htonl>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da02      	bge.n	800b3c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	69b9      	ldr	r1, [r7, #24]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff fded 	bl	800afa8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	69b9      	ldr	r1, [r7, #24]
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff fe26 	bl	800b028 <tcp_output_control_segment>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b3e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	372c      	adds	r7, #44	; 0x2c
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd90      	pop	{r4, r7, pc}
 800b3ec:	080111c4 	.word	0x080111c4
 800b3f0:	080119bc 	.word	0x080119bc
 800b3f4:	08011218 	.word	0x08011218

0800b3f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b400:	f7fa ff10 	bl	8006224 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b404:	4b0a      	ldr	r3, [pc, #40]	; (800b430 <tcpip_tcp_timer+0x38>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d103      	bne.n	800b414 <tcpip_tcp_timer+0x1c>
 800b40c:	4b09      	ldr	r3, [pc, #36]	; (800b434 <tcpip_tcp_timer+0x3c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b414:	2200      	movs	r2, #0
 800b416:	4908      	ldr	r1, [pc, #32]	; (800b438 <tcpip_tcp_timer+0x40>)
 800b418:	20fa      	movs	r0, #250	; 0xfa
 800b41a:	f000 f8f3 	bl	800b604 <sys_timeout>
 800b41e:	e003      	b.n	800b428 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b420:	4b06      	ldr	r3, [pc, #24]	; (800b43c <tcpip_tcp_timer+0x44>)
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
  }
}
 800b426:	bf00      	nop
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20008bb4 	.word	0x20008bb4
 800b434:	20008bc4 	.word	0x20008bc4
 800b438:	0800b3f9 	.word	0x0800b3f9
 800b43c:	20000174 	.word	0x20000174

0800b440 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b444:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <tcp_timer_needed+0x30>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10f      	bne.n	800b46c <tcp_timer_needed+0x2c>
 800b44c:	4b09      	ldr	r3, [pc, #36]	; (800b474 <tcp_timer_needed+0x34>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d103      	bne.n	800b45c <tcp_timer_needed+0x1c>
 800b454:	4b08      	ldr	r3, [pc, #32]	; (800b478 <tcp_timer_needed+0x38>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d007      	beq.n	800b46c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b45c:	4b04      	ldr	r3, [pc, #16]	; (800b470 <tcp_timer_needed+0x30>)
 800b45e:	2201      	movs	r2, #1
 800b460:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b462:	2200      	movs	r2, #0
 800b464:	4905      	ldr	r1, [pc, #20]	; (800b47c <tcp_timer_needed+0x3c>)
 800b466:	20fa      	movs	r0, #250	; 0xfa
 800b468:	f000 f8cc 	bl	800b604 <sys_timeout>
  }
}
 800b46c:	bf00      	nop
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20000174 	.word	0x20000174
 800b474:	20008bb4 	.word	0x20008bb4
 800b478:	20008bc4 	.word	0x20008bc4
 800b47c:	0800b3f9 	.word	0x0800b3f9

0800b480 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b48c:	2006      	movs	r0, #6
 800b48e:	f7f9 fcf1 	bl	8004e74 <memp_malloc>
 800b492:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d151      	bne.n	800b544 <sys_timeout_abs+0xc4>
 800b4a0:	4b2a      	ldr	r3, [pc, #168]	; (800b54c <sys_timeout_abs+0xcc>)
 800b4a2:	22be      	movs	r2, #190	; 0xbe
 800b4a4:	492a      	ldr	r1, [pc, #168]	; (800b550 <sys_timeout_abs+0xd0>)
 800b4a6:	482b      	ldr	r0, [pc, #172]	; (800b554 <sys_timeout_abs+0xd4>)
 800b4a8:	f003 f93e 	bl	800e728 <iprintf>
    return;
 800b4ac:	e04a      	b.n	800b544 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b4c6:	4b24      	ldr	r3, [pc, #144]	; (800b558 <sys_timeout_abs+0xd8>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d103      	bne.n	800b4d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b4ce:	4a22      	ldr	r2, [pc, #136]	; (800b558 <sys_timeout_abs+0xd8>)
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	6013      	str	r3, [r2, #0]
    return;
 800b4d4:	e037      	b.n	800b546 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	4b1f      	ldr	r3, [pc, #124]	; (800b558 <sys_timeout_abs+0xd8>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	0fdb      	lsrs	r3, r3, #31
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d007      	beq.n	800b4fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <sys_timeout_abs+0xd8>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b4f6:	4a18      	ldr	r2, [pc, #96]	; (800b558 <sys_timeout_abs+0xd8>)
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	6013      	str	r3, [r2, #0]
 800b4fc:	e023      	b.n	800b546 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b4fe:	4b16      	ldr	r3, [pc, #88]	; (800b558 <sys_timeout_abs+0xd8>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	617b      	str	r3, [r7, #20]
 800b504:	e01a      	b.n	800b53c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00b      	beq.n	800b526 <sys_timeout_abs+0xa6>
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	0fdb      	lsrs	r3, r3, #31
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d007      	beq.n	800b536 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	601a      	str	r2, [r3, #0]
        break;
 800b534:	e007      	b.n	800b546 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1e1      	bne.n	800b506 <sys_timeout_abs+0x86>
 800b542:	e000      	b.n	800b546 <sys_timeout_abs+0xc6>
    return;
 800b544:	bf00      	nop
      }
    }
  }
}
 800b546:	3718      	adds	r7, #24
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	080119e0 	.word	0x080119e0
 800b550:	08011a14 	.word	0x08011a14
 800b554:	08011a54 	.word	0x08011a54
 800b558:	2000016c 	.word	0x2000016c

0800b55c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	4798      	blx	r3

  now = sys_now();
 800b56e:	f7f8 ff9d 	bl	80044ac <sys_now>
 800b572:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	4b0f      	ldr	r3, [pc, #60]	; (800b5b8 <lwip_cyclic_timer+0x5c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4413      	add	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	0fdb      	lsrs	r3, r3, #31
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d009      	beq.n	800b5a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	4413      	add	r3, r2
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	4907      	ldr	r1, [pc, #28]	; (800b5bc <lwip_cyclic_timer+0x60>)
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff ff6e 	bl	800b480 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b5a4:	e004      	b.n	800b5b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	4904      	ldr	r1, [pc, #16]	; (800b5bc <lwip_cyclic_timer+0x60>)
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f7ff ff68 	bl	800b480 <sys_timeout_abs>
}
 800b5b0:	bf00      	nop
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20000170 	.word	0x20000170
 800b5bc:	0800b55d 	.word	0x0800b55d

0800b5c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	607b      	str	r3, [r7, #4]
 800b5ca:	e00e      	b.n	800b5ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b5cc:	4a0b      	ldr	r2, [pc, #44]	; (800b5fc <sys_timeouts_init+0x3c>)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	00db      	lsls	r3, r3, #3
 800b5d8:	4a08      	ldr	r2, [pc, #32]	; (800b5fc <sys_timeouts_init+0x3c>)
 800b5da:	4413      	add	r3, r2
 800b5dc:	461a      	mov	r2, r3
 800b5de:	4908      	ldr	r1, [pc, #32]	; (800b600 <sys_timeouts_init+0x40>)
 800b5e0:	f000 f810 	bl	800b604 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	607b      	str	r3, [r7, #4]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d9ed      	bls.n	800b5cc <sys_timeouts_init+0xc>
  }
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	080125b8 	.word	0x080125b8
 800b600:	0800b55d 	.word	0x0800b55d

0800b604 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b616:	d306      	bcc.n	800b626 <sys_timeout+0x22>
 800b618:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <sys_timeout+0x40>)
 800b61a:	f240 1229 	movw	r2, #297	; 0x129
 800b61e:	490a      	ldr	r1, [pc, #40]	; (800b648 <sys_timeout+0x44>)
 800b620:	480a      	ldr	r0, [pc, #40]	; (800b64c <sys_timeout+0x48>)
 800b622:	f003 f881 	bl	800e728 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b626:	f7f8 ff41 	bl	80044ac <sys_now>
 800b62a:	4602      	mov	r2, r0
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	4413      	add	r3, r2
 800b630:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	68b9      	ldr	r1, [r7, #8]
 800b636:	6978      	ldr	r0, [r7, #20]
 800b638:	f7ff ff22 	bl	800b480 <sys_timeout_abs>
#endif
}
 800b63c:	bf00      	nop
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	080119e0 	.word	0x080119e0
 800b648:	08011a7c 	.word	0x08011a7c
 800b64c:	08011a54 	.word	0x08011a54

0800b650 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b656:	f7f8 ff29 	bl	80044ac <sys_now>
 800b65a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b65c:	4b1a      	ldr	r3, [pc, #104]	; (800b6c8 <sys_check_timeouts+0x78>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <sys_check_timeouts+0x1a>
 800b666:	f7f9 ff29 	bl	80054bc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b66a:	4b18      	ldr	r3, [pc, #96]	; (800b6cc <sys_check_timeouts+0x7c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d022      	beq.n	800b6bc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	0fdb      	lsrs	r3, r3, #31
 800b680:	f003 0301 	and.w	r3, r3, #1
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d11a      	bne.n	800b6c0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a0f      	ldr	r2, [pc, #60]	; (800b6cc <sys_check_timeouts+0x7c>)
 800b690:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4a0b      	ldr	r2, [pc, #44]	; (800b6d0 <sys_check_timeouts+0x80>)
 800b6a4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b6a6:	68b9      	ldr	r1, [r7, #8]
 800b6a8:	2006      	movs	r0, #6
 800b6aa:	f7f9 fc2f 	bl	8004f0c <memp_free>
    if (handler != NULL) {
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0d3      	beq.n	800b65c <sys_check_timeouts+0xc>
      handler(arg);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6838      	ldr	r0, [r7, #0]
 800b6b8:	4798      	blx	r3
  do {
 800b6ba:	e7cf      	b.n	800b65c <sys_check_timeouts+0xc>
      return;
 800b6bc:	bf00      	nop
 800b6be:	e000      	b.n	800b6c2 <sys_check_timeouts+0x72>
      return;
 800b6c0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	20008bac 	.word	0x20008bac
 800b6cc:	2000016c 	.word	0x2000016c
 800b6d0:	20000170 	.word	0x20000170

0800b6d4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b6d8:	f003 f83e 	bl	800e758 <rand>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	4b01      	ldr	r3, [pc, #4]	; (800b6f4 <udp_init+0x20>)
 800b6ee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b6f0:	bf00      	nop
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	20000030 	.word	0x20000030

0800b6f8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b702:	4b17      	ldr	r3, [pc, #92]	; (800b760 <udp_new_port+0x68>)
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	b291      	uxth	r1, r2
 800b70a:	4a15      	ldr	r2, [pc, #84]	; (800b760 <udp_new_port+0x68>)
 800b70c:	8011      	strh	r1, [r2, #0]
 800b70e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b712:	4293      	cmp	r3, r2
 800b714:	d103      	bne.n	800b71e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b716:	4b12      	ldr	r3, [pc, #72]	; (800b760 <udp_new_port+0x68>)
 800b718:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b71c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b71e:	4b11      	ldr	r3, [pc, #68]	; (800b764 <udp_new_port+0x6c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	e011      	b.n	800b74a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	8a5a      	ldrh	r2, [r3, #18]
 800b72a:	4b0d      	ldr	r3, [pc, #52]	; (800b760 <udp_new_port+0x68>)
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d108      	bne.n	800b744 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b732:	88fb      	ldrh	r3, [r7, #6]
 800b734:	3301      	adds	r3, #1
 800b736:	80fb      	strh	r3, [r7, #6]
 800b738:	88fb      	ldrh	r3, [r7, #6]
 800b73a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b73e:	d3e0      	bcc.n	800b702 <udp_new_port+0xa>
        return 0;
 800b740:	2300      	movs	r3, #0
 800b742:	e007      	b.n	800b754 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	603b      	str	r3, [r7, #0]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1ea      	bne.n	800b726 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b750:	4b03      	ldr	r3, [pc, #12]	; (800b760 <udp_new_port+0x68>)
 800b752:	881b      	ldrh	r3, [r3, #0]
}
 800b754:	4618      	mov	r0, r3
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr
 800b760:	20000030 	.word	0x20000030
 800b764:	20008bcc 	.word	0x20008bcc

0800b768 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	4613      	mov	r3, r2
 800b774:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d105      	bne.n	800b788 <udp_input_local_match+0x20>
 800b77c:	4b27      	ldr	r3, [pc, #156]	; (800b81c <udp_input_local_match+0xb4>)
 800b77e:	2287      	movs	r2, #135	; 0x87
 800b780:	4927      	ldr	r1, [pc, #156]	; (800b820 <udp_input_local_match+0xb8>)
 800b782:	4828      	ldr	r0, [pc, #160]	; (800b824 <udp_input_local_match+0xbc>)
 800b784:	f002 ffd0 	bl	800e728 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d105      	bne.n	800b79a <udp_input_local_match+0x32>
 800b78e:	4b23      	ldr	r3, [pc, #140]	; (800b81c <udp_input_local_match+0xb4>)
 800b790:	2288      	movs	r2, #136	; 0x88
 800b792:	4925      	ldr	r1, [pc, #148]	; (800b828 <udp_input_local_match+0xc0>)
 800b794:	4823      	ldr	r0, [pc, #140]	; (800b824 <udp_input_local_match+0xbc>)
 800b796:	f002 ffc7 	bl	800e728 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	7a1b      	ldrb	r3, [r3, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	7a1a      	ldrb	r2, [r3, #8]
 800b7a6:	4b21      	ldr	r3, [pc, #132]	; (800b82c <udp_input_local_match+0xc4>)
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d001      	beq.n	800b7ba <udp_input_local_match+0x52>
    return 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e02b      	b.n	800b812 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d018      	beq.n	800b7f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d013      	beq.n	800b7ee <udp_input_local_match+0x86>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00f      	beq.n	800b7ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b7ce:	4b17      	ldr	r3, [pc, #92]	; (800b82c <udp_input_local_match+0xc4>)
 800b7d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d00a      	beq.n	800b7ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	4b13      	ldr	r3, [pc, #76]	; (800b82c <udp_input_local_match+0xc4>)
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	405a      	eors	r2, r3
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d110      	bne.n	800b810 <udp_input_local_match+0xa8>
          return 1;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e00f      	b.n	800b812 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <udp_input_local_match+0xa4>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <udp_input_local_match+0xa4>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	4b09      	ldr	r3, [pc, #36]	; (800b82c <udp_input_local_match+0xc4>)
 800b806:	695b      	ldr	r3, [r3, #20]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d101      	bne.n	800b810 <udp_input_local_match+0xa8>
        return 1;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e000      	b.n	800b812 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	08011ac8 	.word	0x08011ac8
 800b820:	08011af8 	.word	0x08011af8
 800b824:	08011b1c 	.word	0x08011b1c
 800b828:	08011b44 	.word	0x08011b44
 800b82c:	200034b0 	.word	0x200034b0

0800b830 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b08d      	sub	sp, #52	; 0x34
 800b834:	af02      	add	r7, sp, #8
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <udp_input+0x20>
 800b844:	4b7c      	ldr	r3, [pc, #496]	; (800ba38 <udp_input+0x208>)
 800b846:	22cf      	movs	r2, #207	; 0xcf
 800b848:	497c      	ldr	r1, [pc, #496]	; (800ba3c <udp_input+0x20c>)
 800b84a:	487d      	ldr	r0, [pc, #500]	; (800ba40 <udp_input+0x210>)
 800b84c:	f002 ff6c 	bl	800e728 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d105      	bne.n	800b862 <udp_input+0x32>
 800b856:	4b78      	ldr	r3, [pc, #480]	; (800ba38 <udp_input+0x208>)
 800b858:	22d0      	movs	r2, #208	; 0xd0
 800b85a:	497a      	ldr	r1, [pc, #488]	; (800ba44 <udp_input+0x214>)
 800b85c:	4878      	ldr	r0, [pc, #480]	; (800ba40 <udp_input+0x210>)
 800b85e:	f002 ff63 	bl	800e728 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	895b      	ldrh	r3, [r3, #10]
 800b866:	2b07      	cmp	r3, #7
 800b868:	d803      	bhi.n	800b872 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7fa f960 	bl	8005b30 <pbuf_free>
    goto end;
 800b870:	e0de      	b.n	800ba30 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b878:	4b73      	ldr	r3, [pc, #460]	; (800ba48 <udp_input+0x218>)
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	4a72      	ldr	r2, [pc, #456]	; (800ba48 <udp_input+0x218>)
 800b87e:	6812      	ldr	r2, [r2, #0]
 800b880:	4611      	mov	r1, r2
 800b882:	4618      	mov	r0, r3
 800b884:	f001 ff9e 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800b888:	4603      	mov	r3, r0
 800b88a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	b29b      	uxth	r3, r3
 800b892:	4618      	mov	r0, r3
 800b894:	f7f8 fe98 	bl	80045c8 <lwip_htons>
 800b898:	4603      	mov	r3, r0
 800b89a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	885b      	ldrh	r3, [r3, #2]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7f8 fe90 	bl	80045c8 <lwip_htons>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8b8:	4b64      	ldr	r3, [pc, #400]	; (800ba4c <udp_input+0x21c>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b8be:	e054      	b.n	800b96a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	8a5b      	ldrh	r3, [r3, #18]
 800b8c4:	89fa      	ldrh	r2, [r7, #14]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d14a      	bne.n	800b960 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b8ca:	7cfb      	ldrb	r3, [r7, #19]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8d2:	f7ff ff49 	bl	800b768 <udp_input_local_match>
 800b8d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d041      	beq.n	800b960 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	7c1b      	ldrb	r3, [r3, #16]
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d11d      	bne.n	800b924 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d102      	bne.n	800b8f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	61fb      	str	r3, [r7, #28]
 800b8f2:	e017      	b.n	800b924 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b8f4:	7cfb      	ldrb	r3, [r7, #19]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d014      	beq.n	800b924 <udp_input+0xf4>
 800b8fa:	4b53      	ldr	r3, [pc, #332]	; (800ba48 <udp_input+0x218>)
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b902:	d10f      	bne.n	800b924 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	3304      	adds	r3, #4
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d008      	beq.n	800b924 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	3304      	adds	r3, #4
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d101      	bne.n	800b924 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	8a9b      	ldrh	r3, [r3, #20]
 800b928:	8a3a      	ldrh	r2, [r7, #16]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d118      	bne.n	800b960 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b932:	2b00      	cmp	r3, #0
 800b934:	d005      	beq.n	800b942 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	685a      	ldr	r2, [r3, #4]
 800b93a:	4b43      	ldr	r3, [pc, #268]	; (800ba48 <udp_input+0x218>)
 800b93c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b93e:	429a      	cmp	r2, r3
 800b940:	d10e      	bne.n	800b960 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d014      	beq.n	800b972 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	68da      	ldr	r2, [r3, #12]
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b950:	4b3e      	ldr	r3, [pc, #248]	; (800ba4c <udp_input+0x21c>)
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b958:	4a3c      	ldr	r2, [pc, #240]	; (800ba4c <udp_input+0x21c>)
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b95e:	e008      	b.n	800b972 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	627b      	str	r3, [r7, #36]	; 0x24
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1a7      	bne.n	800b8c0 <udp_input+0x90>
 800b970:	e000      	b.n	800b974 <udp_input+0x144>
        break;
 800b972:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <udp_input+0x14e>
    pcb = uncon_pcb;
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b980:	2b00      	cmp	r3, #0
 800b982:	d002      	beq.n	800b98a <udp_input+0x15a>
    for_us = 1;
 800b984:	2301      	movs	r3, #1
 800b986:	76fb      	strb	r3, [r7, #27]
 800b988:	e00a      	b.n	800b9a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	3304      	adds	r3, #4
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	4b2d      	ldr	r3, [pc, #180]	; (800ba48 <udp_input+0x218>)
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	429a      	cmp	r2, r3
 800b996:	bf0c      	ite	eq
 800b998:	2301      	moveq	r3, #1
 800b99a:	2300      	movne	r3, #0
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b9a0:	7efb      	ldrb	r3, [r7, #27]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d041      	beq.n	800ba2a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b9a6:	2108      	movs	r1, #8
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7fa f83b 	bl	8005a24 <pbuf_remove_header>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00a      	beq.n	800b9ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b9b4:	4b20      	ldr	r3, [pc, #128]	; (800ba38 <udp_input+0x208>)
 800b9b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b9ba:	4925      	ldr	r1, [pc, #148]	; (800ba50 <udp_input+0x220>)
 800b9bc:	4820      	ldr	r0, [pc, #128]	; (800ba40 <udp_input+0x210>)
 800b9be:	f002 feb3 	bl	800e728 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7fa f8b4 	bl	8005b30 <pbuf_free>
      goto end;
 800b9c8:	e032      	b.n	800ba30 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d012      	beq.n	800b9f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00a      	beq.n	800b9ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	699c      	ldr	r4, [r3, #24]
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9de:	69d8      	ldr	r0, [r3, #28]
 800b9e0:	8a3b      	ldrh	r3, [r7, #16]
 800b9e2:	9300      	str	r3, [sp, #0]
 800b9e4:	4b1b      	ldr	r3, [pc, #108]	; (800ba54 <udp_input+0x224>)
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b9ec:	e021      	b.n	800ba32 <udp_input+0x202>
        pbuf_free(p);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7fa f89e 	bl	8005b30 <pbuf_free>
        goto end;
 800b9f4:	e01c      	b.n	800ba30 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b9f6:	7cfb      	ldrb	r3, [r7, #19]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d112      	bne.n	800ba22 <udp_input+0x1f2>
 800b9fc:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <udp_input+0x218>)
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba04:	2be0      	cmp	r3, #224	; 0xe0
 800ba06:	d00c      	beq.n	800ba22 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ba08:	4b0f      	ldr	r3, [pc, #60]	; (800ba48 <udp_input+0x218>)
 800ba0a:	899b      	ldrh	r3, [r3, #12]
 800ba0c:	3308      	adds	r3, #8
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	b21b      	sxth	r3, r3
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7fa f878 	bl	8005b0a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ba1a:	2103      	movs	r1, #3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 fbb1 	bl	800d184 <icmp_dest_unreach>
      pbuf_free(p);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7fa f884 	bl	8005b30 <pbuf_free>
  return;
 800ba28:	e003      	b.n	800ba32 <udp_input+0x202>
    pbuf_free(p);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7fa f880 	bl	8005b30 <pbuf_free>
  return;
 800ba30:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ba32:	372c      	adds	r7, #44	; 0x2c
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd90      	pop	{r4, r7, pc}
 800ba38:	08011ac8 	.word	0x08011ac8
 800ba3c:	08011b6c 	.word	0x08011b6c
 800ba40:	08011b1c 	.word	0x08011b1c
 800ba44:	08011b84 	.word	0x08011b84
 800ba48:	200034b0 	.word	0x200034b0
 800ba4c:	20008bcc 	.word	0x20008bcc
 800ba50:	08011ba0 	.word	0x08011ba0
 800ba54:	200034c0 	.word	0x200034c0

0800ba58 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d109      	bne.n	800ba7c <udp_send+0x24>
 800ba68:	4b11      	ldr	r3, [pc, #68]	; (800bab0 <udp_send+0x58>)
 800ba6a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ba6e:	4911      	ldr	r1, [pc, #68]	; (800bab4 <udp_send+0x5c>)
 800ba70:	4811      	ldr	r0, [pc, #68]	; (800bab8 <udp_send+0x60>)
 800ba72:	f002 fe59 	bl	800e728 <iprintf>
 800ba76:	f06f 030f 	mvn.w	r3, #15
 800ba7a:	e015      	b.n	800baa8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d109      	bne.n	800ba96 <udp_send+0x3e>
 800ba82:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <udp_send+0x58>)
 800ba84:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800ba88:	490c      	ldr	r1, [pc, #48]	; (800babc <udp_send+0x64>)
 800ba8a:	480b      	ldr	r0, [pc, #44]	; (800bab8 <udp_send+0x60>)
 800ba8c:	f002 fe4c 	bl	800e728 <iprintf>
 800ba90:	f06f 030f 	mvn.w	r3, #15
 800ba94:	e008      	b.n	800baa8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	1d1a      	adds	r2, r3, #4
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	8a9b      	ldrh	r3, [r3, #20]
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f80d 	bl	800bac0 <udp_sendto>
 800baa6:	4603      	mov	r3, r0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	08011ac8 	.word	0x08011ac8
 800bab4:	08011bbc 	.word	0x08011bbc
 800bab8:	08011b1c 	.word	0x08011b1c
 800babc:	08011bd4 	.word	0x08011bd4

0800bac0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af02      	add	r7, sp, #8
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d109      	bne.n	800bae8 <udp_sendto+0x28>
 800bad4:	4b23      	ldr	r3, [pc, #140]	; (800bb64 <udp_sendto+0xa4>)
 800bad6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bada:	4923      	ldr	r1, [pc, #140]	; (800bb68 <udp_sendto+0xa8>)
 800badc:	4823      	ldr	r0, [pc, #140]	; (800bb6c <udp_sendto+0xac>)
 800bade:	f002 fe23 	bl	800e728 <iprintf>
 800bae2:	f06f 030f 	mvn.w	r3, #15
 800bae6:	e038      	b.n	800bb5a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d109      	bne.n	800bb02 <udp_sendto+0x42>
 800baee:	4b1d      	ldr	r3, [pc, #116]	; (800bb64 <udp_sendto+0xa4>)
 800baf0:	f240 2219 	movw	r2, #537	; 0x219
 800baf4:	491e      	ldr	r1, [pc, #120]	; (800bb70 <udp_sendto+0xb0>)
 800baf6:	481d      	ldr	r0, [pc, #116]	; (800bb6c <udp_sendto+0xac>)
 800baf8:	f002 fe16 	bl	800e728 <iprintf>
 800bafc:	f06f 030f 	mvn.w	r3, #15
 800bb00:	e02b      	b.n	800bb5a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d109      	bne.n	800bb1c <udp_sendto+0x5c>
 800bb08:	4b16      	ldr	r3, [pc, #88]	; (800bb64 <udp_sendto+0xa4>)
 800bb0a:	f240 221a 	movw	r2, #538	; 0x21a
 800bb0e:	4919      	ldr	r1, [pc, #100]	; (800bb74 <udp_sendto+0xb4>)
 800bb10:	4816      	ldr	r0, [pc, #88]	; (800bb6c <udp_sendto+0xac>)
 800bb12:	f002 fe09 	bl	800e728 <iprintf>
 800bb16:	f06f 030f 	mvn.w	r3, #15
 800bb1a:	e01e      	b.n	800bb5a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	7a1b      	ldrb	r3, [r3, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d006      	beq.n	800bb32 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	7a1b      	ldrb	r3, [r3, #8]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f9 fca1 	bl	8005470 <netif_get_by_index>
 800bb2e:	6178      	str	r0, [r7, #20]
 800bb30:	e003      	b.n	800bb3a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f001 fbb0 	bl	800d298 <ip4_route>
 800bb38:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d102      	bne.n	800bb46 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800bb40:	f06f 0303 	mvn.w	r3, #3
 800bb44:	e009      	b.n	800bb5a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800bb46:	887a      	ldrh	r2, [r7, #2]
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 f810 	bl	800bb78 <udp_sendto_if>
 800bb58:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	08011ac8 	.word	0x08011ac8
 800bb68:	08011bec 	.word	0x08011bec
 800bb6c:	08011b1c 	.word	0x08011b1c
 800bb70:	08011c04 	.word	0x08011c04
 800bb74:	08011c20 	.word	0x08011c20

0800bb78 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b088      	sub	sp, #32
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
 800bb84:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d109      	bne.n	800bba0 <udp_sendto_if+0x28>
 800bb8c:	4b2e      	ldr	r3, [pc, #184]	; (800bc48 <udp_sendto_if+0xd0>)
 800bb8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bb92:	492e      	ldr	r1, [pc, #184]	; (800bc4c <udp_sendto_if+0xd4>)
 800bb94:	482e      	ldr	r0, [pc, #184]	; (800bc50 <udp_sendto_if+0xd8>)
 800bb96:	f002 fdc7 	bl	800e728 <iprintf>
 800bb9a:	f06f 030f 	mvn.w	r3, #15
 800bb9e:	e04f      	b.n	800bc40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d109      	bne.n	800bbba <udp_sendto_if+0x42>
 800bba6:	4b28      	ldr	r3, [pc, #160]	; (800bc48 <udp_sendto_if+0xd0>)
 800bba8:	f240 2281 	movw	r2, #641	; 0x281
 800bbac:	4929      	ldr	r1, [pc, #164]	; (800bc54 <udp_sendto_if+0xdc>)
 800bbae:	4828      	ldr	r0, [pc, #160]	; (800bc50 <udp_sendto_if+0xd8>)
 800bbb0:	f002 fdba 	bl	800e728 <iprintf>
 800bbb4:	f06f 030f 	mvn.w	r3, #15
 800bbb8:	e042      	b.n	800bc40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d109      	bne.n	800bbd4 <udp_sendto_if+0x5c>
 800bbc0:	4b21      	ldr	r3, [pc, #132]	; (800bc48 <udp_sendto_if+0xd0>)
 800bbc2:	f240 2282 	movw	r2, #642	; 0x282
 800bbc6:	4924      	ldr	r1, [pc, #144]	; (800bc58 <udp_sendto_if+0xe0>)
 800bbc8:	4821      	ldr	r0, [pc, #132]	; (800bc50 <udp_sendto_if+0xd8>)
 800bbca:	f002 fdad 	bl	800e728 <iprintf>
 800bbce:	f06f 030f 	mvn.w	r3, #15
 800bbd2:	e035      	b.n	800bc40 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bbd4:	6a3b      	ldr	r3, [r7, #32]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d109      	bne.n	800bbee <udp_sendto_if+0x76>
 800bbda:	4b1b      	ldr	r3, [pc, #108]	; (800bc48 <udp_sendto_if+0xd0>)
 800bbdc:	f240 2283 	movw	r2, #643	; 0x283
 800bbe0:	491e      	ldr	r1, [pc, #120]	; (800bc5c <udp_sendto_if+0xe4>)
 800bbe2:	481b      	ldr	r0, [pc, #108]	; (800bc50 <udp_sendto_if+0xd8>)
 800bbe4:	f002 fda0 	bl	800e728 <iprintf>
 800bbe8:	f06f 030f 	mvn.w	r3, #15
 800bbec:	e028      	b.n	800bc40 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d009      	beq.n	800bc08 <udp_sendto_if+0x90>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bc04:	2be0      	cmp	r3, #224	; 0xe0
 800bc06:	d103      	bne.n	800bc10 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800bc08:	6a3b      	ldr	r3, [r7, #32]
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	617b      	str	r3, [r7, #20]
 800bc0e:	e00b      	b.n	800bc28 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	6a3b      	ldr	r3, [r7, #32]
 800bc16:	3304      	adds	r3, #4
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d002      	beq.n	800bc24 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800bc1e:	f06f 0303 	mvn.w	r3, #3
 800bc22:	e00d      	b.n	800bc40 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800bc28:	887a      	ldrh	r2, [r7, #2]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	9301      	str	r3, [sp, #4]
 800bc2e:	6a3b      	ldr	r3, [r7, #32]
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	4613      	mov	r3, r2
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f000 f811 	bl	800bc60 <udp_sendto_if_src>
 800bc3e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	08011ac8 	.word	0x08011ac8
 800bc4c:	08011c3c 	.word	0x08011c3c
 800bc50:	08011b1c 	.word	0x08011b1c
 800bc54:	08011c58 	.word	0x08011c58
 800bc58:	08011c74 	.word	0x08011c74
 800bc5c:	08011c94 	.word	0x08011c94

0800bc60 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08c      	sub	sp, #48	; 0x30
 800bc64:	af04      	add	r7, sp, #16
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
 800bc6c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d109      	bne.n	800bc88 <udp_sendto_if_src+0x28>
 800bc74:	4b65      	ldr	r3, [pc, #404]	; (800be0c <udp_sendto_if_src+0x1ac>)
 800bc76:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bc7a:	4965      	ldr	r1, [pc, #404]	; (800be10 <udp_sendto_if_src+0x1b0>)
 800bc7c:	4865      	ldr	r0, [pc, #404]	; (800be14 <udp_sendto_if_src+0x1b4>)
 800bc7e:	f002 fd53 	bl	800e728 <iprintf>
 800bc82:	f06f 030f 	mvn.w	r3, #15
 800bc86:	e0bc      	b.n	800be02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d109      	bne.n	800bca2 <udp_sendto_if_src+0x42>
 800bc8e:	4b5f      	ldr	r3, [pc, #380]	; (800be0c <udp_sendto_if_src+0x1ac>)
 800bc90:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bc94:	4960      	ldr	r1, [pc, #384]	; (800be18 <udp_sendto_if_src+0x1b8>)
 800bc96:	485f      	ldr	r0, [pc, #380]	; (800be14 <udp_sendto_if_src+0x1b4>)
 800bc98:	f002 fd46 	bl	800e728 <iprintf>
 800bc9c:	f06f 030f 	mvn.w	r3, #15
 800bca0:	e0af      	b.n	800be02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d109      	bne.n	800bcbc <udp_sendto_if_src+0x5c>
 800bca8:	4b58      	ldr	r3, [pc, #352]	; (800be0c <udp_sendto_if_src+0x1ac>)
 800bcaa:	f240 22d3 	movw	r2, #723	; 0x2d3
 800bcae:	495b      	ldr	r1, [pc, #364]	; (800be1c <udp_sendto_if_src+0x1bc>)
 800bcb0:	4858      	ldr	r0, [pc, #352]	; (800be14 <udp_sendto_if_src+0x1b4>)
 800bcb2:	f002 fd39 	bl	800e728 <iprintf>
 800bcb6:	f06f 030f 	mvn.w	r3, #15
 800bcba:	e0a2      	b.n	800be02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d109      	bne.n	800bcd6 <udp_sendto_if_src+0x76>
 800bcc2:	4b52      	ldr	r3, [pc, #328]	; (800be0c <udp_sendto_if_src+0x1ac>)
 800bcc4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800bcc8:	4955      	ldr	r1, [pc, #340]	; (800be20 <udp_sendto_if_src+0x1c0>)
 800bcca:	4852      	ldr	r0, [pc, #328]	; (800be14 <udp_sendto_if_src+0x1b4>)
 800bccc:	f002 fd2c 	bl	800e728 <iprintf>
 800bcd0:	f06f 030f 	mvn.w	r3, #15
 800bcd4:	e095      	b.n	800be02 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d109      	bne.n	800bcf0 <udp_sendto_if_src+0x90>
 800bcdc:	4b4b      	ldr	r3, [pc, #300]	; (800be0c <udp_sendto_if_src+0x1ac>)
 800bcde:	f240 22d5 	movw	r2, #725	; 0x2d5
 800bce2:	4950      	ldr	r1, [pc, #320]	; (800be24 <udp_sendto_if_src+0x1c4>)
 800bce4:	484b      	ldr	r0, [pc, #300]	; (800be14 <udp_sendto_if_src+0x1b4>)
 800bce6:	f002 fd1f 	bl	800e728 <iprintf>
 800bcea:	f06f 030f 	mvn.w	r3, #15
 800bcee:	e088      	b.n	800be02 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	8a5b      	ldrh	r3, [r3, #18]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10f      	bne.n	800bd18 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	8a5b      	ldrh	r3, [r3, #18]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 f893 	bl	800be2c <udp_bind>
 800bd06:	4603      	mov	r3, r0
 800bd08:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800bd0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d002      	beq.n	800bd18 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800bd12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bd16:	e074      	b.n	800be02 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	891b      	ldrh	r3, [r3, #8]
 800bd1c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d902      	bls.n	800bd2a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800bd24:	f04f 33ff 	mov.w	r3, #4294967295
 800bd28:	e06b      	b.n	800be02 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800bd2a:	2108      	movs	r1, #8
 800bd2c:	68b8      	ldr	r0, [r7, #8]
 800bd2e:	f7f9 fe69 	bl	8005a04 <pbuf_add_header>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d015      	beq.n	800bd64 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800bd38:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd3c:	2108      	movs	r1, #8
 800bd3e:	2022      	movs	r0, #34	; 0x22
 800bd40:	f7f9 fc12 	bl	8005568 <pbuf_alloc>
 800bd44:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd50:	e057      	b.n	800be02 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	891b      	ldrh	r3, [r3, #8]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d006      	beq.n	800bd68 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	69f8      	ldr	r0, [r7, #28]
 800bd5e:	f7f9 ffff 	bl	8005d60 <pbuf_chain>
 800bd62:	e001      	b.n	800bd68 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	895b      	ldrh	r3, [r3, #10]
 800bd6c:	2b07      	cmp	r3, #7
 800bd6e:	d806      	bhi.n	800bd7e <udp_sendto_if_src+0x11e>
 800bd70:	4b26      	ldr	r3, [pc, #152]	; (800be0c <udp_sendto_if_src+0x1ac>)
 800bd72:	f240 320d 	movw	r2, #781	; 0x30d
 800bd76:	492c      	ldr	r1, [pc, #176]	; (800be28 <udp_sendto_if_src+0x1c8>)
 800bd78:	4826      	ldr	r0, [pc, #152]	; (800be14 <udp_sendto_if_src+0x1b4>)
 800bd7a:	f002 fcd5 	bl	800e728 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8a5b      	ldrh	r3, [r3, #18]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7f8 fc1d 	bl	80045c8 <lwip_htons>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	461a      	mov	r2, r3
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bd96:	887b      	ldrh	r3, [r7, #2]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7f8 fc15 	bl	80045c8 <lwip_htons>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	461a      	mov	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	719a      	strb	r2, [r3, #6]
 800bdac:	2200      	movs	r2, #0
 800bdae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	891b      	ldrh	r3, [r3, #8]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f8 fc07 	bl	80045c8 <lwip_htons>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bdc2:	2311      	movs	r3, #17
 800bdc4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	7adb      	ldrb	r3, [r3, #11]
 800bdca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	7a9b      	ldrb	r3, [r3, #10]
 800bdd0:	7cb9      	ldrb	r1, [r7, #18]
 800bdd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdd4:	9202      	str	r2, [sp, #8]
 800bdd6:	7cfa      	ldrb	r2, [r7, #19]
 800bdd8:	9201      	str	r2, [sp, #4]
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	460b      	mov	r3, r1
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bde2:	69f8      	ldr	r0, [r7, #28]
 800bde4:	f001 fc40 	bl	800d668 <ip4_output_if_src>
 800bde8:	4603      	mov	r3, r0
 800bdea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bdec:	69fa      	ldr	r2, [r7, #28]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d004      	beq.n	800bdfe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bdf4:	69f8      	ldr	r0, [r7, #28]
 800bdf6:	f7f9 fe9b 	bl	8005b30 <pbuf_free>
    q = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bdfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3720      	adds	r7, #32
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	08011ac8 	.word	0x08011ac8
 800be10:	08011cb4 	.word	0x08011cb4
 800be14:	08011b1c 	.word	0x08011b1c
 800be18:	08011cd4 	.word	0x08011cd4
 800be1c:	08011cf4 	.word	0x08011cf4
 800be20:	08011d18 	.word	0x08011d18
 800be24:	08011d3c 	.word	0x08011d3c
 800be28:	08011d60 	.word	0x08011d60

0800be2c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	4613      	mov	r3, r2
 800be38:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800be40:	4b39      	ldr	r3, [pc, #228]	; (800bf28 <udp_bind+0xfc>)
 800be42:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d109      	bne.n	800be5e <udp_bind+0x32>
 800be4a:	4b38      	ldr	r3, [pc, #224]	; (800bf2c <udp_bind+0x100>)
 800be4c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800be50:	4937      	ldr	r1, [pc, #220]	; (800bf30 <udp_bind+0x104>)
 800be52:	4838      	ldr	r0, [pc, #224]	; (800bf34 <udp_bind+0x108>)
 800be54:	f002 fc68 	bl	800e728 <iprintf>
 800be58:	f06f 030f 	mvn.w	r3, #15
 800be5c:	e060      	b.n	800bf20 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be62:	4b35      	ldr	r3, [pc, #212]	; (800bf38 <udp_bind+0x10c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	e009      	b.n	800be7e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d102      	bne.n	800be78 <udp_bind+0x4c>
      rebind = 1;
 800be72:	2301      	movs	r3, #1
 800be74:	74fb      	strb	r3, [r7, #19]
      break;
 800be76:	e005      	b.n	800be84 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	617b      	str	r3, [r7, #20]
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1f2      	bne.n	800be6a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800be84:	88fb      	ldrh	r3, [r7, #6]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <udp_bind+0x72>
    port = udp_new_port();
 800be8a:	f7ff fc35 	bl	800b6f8 <udp_new_port>
 800be8e:	4603      	mov	r3, r0
 800be90:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800be92:	88fb      	ldrh	r3, [r7, #6]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d12c      	bne.n	800bef2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800be98:	f06f 0307 	mvn.w	r3, #7
 800be9c:	e040      	b.n	800bf20 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800be9e:	4b26      	ldr	r3, [pc, #152]	; (800bf38 <udp_bind+0x10c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	617b      	str	r3, [r7, #20]
 800bea4:	e022      	b.n	800beec <udp_bind+0xc0>
      if (pcb != ipcb) {
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d01b      	beq.n	800bee6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	8a5b      	ldrh	r3, [r3, #18]
 800beb2:	88fa      	ldrh	r2, [r7, #6]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d116      	bne.n	800bee6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d00d      	beq.n	800bee0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00a      	beq.n	800bee0 <udp_bind+0xb4>
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d006      	beq.n	800bee0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bed2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800bee0:	f06f 0307 	mvn.w	r3, #7
 800bee4:	e01c      	b.n	800bf20 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1d9      	bne.n	800bea6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <udp_bind+0xd2>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	e000      	b.n	800bf00 <udp_bind+0xd4>
 800befe:	2300      	movs	r3, #0
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	88fa      	ldrh	r2, [r7, #6]
 800bf08:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bf0a:	7cfb      	ldrb	r3, [r7, #19]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d106      	bne.n	800bf1e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bf10:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <udp_bind+0x10c>)
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bf18:	4a07      	ldr	r2, [pc, #28]	; (800bf38 <udp_bind+0x10c>)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	080125d0 	.word	0x080125d0
 800bf2c:	08011ac8 	.word	0x08011ac8
 800bf30:	08011d90 	.word	0x08011d90
 800bf34:	08011b1c 	.word	0x08011b1c
 800bf38:	20008bcc 	.word	0x20008bcc

0800bf3c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	4613      	mov	r3, r2
 800bf48:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <udp_connect+0x28>
 800bf50:	4b2c      	ldr	r3, [pc, #176]	; (800c004 <udp_connect+0xc8>)
 800bf52:	f240 4235 	movw	r2, #1077	; 0x435
 800bf56:	492c      	ldr	r1, [pc, #176]	; (800c008 <udp_connect+0xcc>)
 800bf58:	482c      	ldr	r0, [pc, #176]	; (800c00c <udp_connect+0xd0>)
 800bf5a:	f002 fbe5 	bl	800e728 <iprintf>
 800bf5e:	f06f 030f 	mvn.w	r3, #15
 800bf62:	e04b      	b.n	800bffc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <udp_connect+0x42>
 800bf6a:	4b26      	ldr	r3, [pc, #152]	; (800c004 <udp_connect+0xc8>)
 800bf6c:	f240 4236 	movw	r2, #1078	; 0x436
 800bf70:	4927      	ldr	r1, [pc, #156]	; (800c010 <udp_connect+0xd4>)
 800bf72:	4826      	ldr	r0, [pc, #152]	; (800c00c <udp_connect+0xd0>)
 800bf74:	f002 fbd8 	bl	800e728 <iprintf>
 800bf78:	f06f 030f 	mvn.w	r3, #15
 800bf7c:	e03e      	b.n	800bffc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	8a5b      	ldrh	r3, [r3, #18]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10f      	bne.n	800bfa6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bf86:	68f9      	ldr	r1, [r7, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	8a5b      	ldrh	r3, [r3, #18]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f7ff ff4c 	bl	800be2c <udp_bind>
 800bf94:	4603      	mov	r3, r0
 800bf96:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bf98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <udp_connect+0x6a>
      return err;
 800bfa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfa4:	e02a      	b.n	800bffc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <udp_connect+0x76>
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	e000      	b.n	800bfb4 <udp_connect+0x78>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	88fa      	ldrh	r2, [r7, #6]
 800bfbc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	7c1b      	ldrb	r3, [r3, #16]
 800bfc2:	f043 0304 	orr.w	r3, r3, #4
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfcc:	4b11      	ldr	r3, [pc, #68]	; (800c014 <udp_connect+0xd8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	617b      	str	r3, [r7, #20]
 800bfd2:	e008      	b.n	800bfe6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d101      	bne.n	800bfe0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	e00d      	b.n	800bffc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	617b      	str	r3, [r7, #20]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1f3      	bne.n	800bfd4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bfec:	4b09      	ldr	r3, [pc, #36]	; (800c014 <udp_connect+0xd8>)
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bff4:	4a07      	ldr	r2, [pc, #28]	; (800c014 <udp_connect+0xd8>)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3718      	adds	r7, #24
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	08011ac8 	.word	0x08011ac8
 800c008:	08011da8 	.word	0x08011da8
 800c00c:	08011b1c 	.word	0x08011b1c
 800c010:	08011dc4 	.word	0x08011dc4
 800c014:	20008bcc 	.word	0x20008bcc

0800c018 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d107      	bne.n	800c03a <udp_recv+0x22>
 800c02a:	4b08      	ldr	r3, [pc, #32]	; (800c04c <udp_recv+0x34>)
 800c02c:	f240 428a 	movw	r2, #1162	; 0x48a
 800c030:	4907      	ldr	r1, [pc, #28]	; (800c050 <udp_recv+0x38>)
 800c032:	4808      	ldr	r0, [pc, #32]	; (800c054 <udp_recv+0x3c>)
 800c034:	f002 fb78 	bl	800e728 <iprintf>
 800c038:	e005      	b.n	800c046 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	61da      	str	r2, [r3, #28]
}
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}
 800c04c:	08011ac8 	.word	0x08011ac8
 800c050:	08011dfc 	.word	0x08011dfc
 800c054:	08011b1c 	.word	0x08011b1c

0800c058 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c05e:	2000      	movs	r0, #0
 800c060:	f7f8 ff08 	bl	8004e74 <memp_malloc>
 800c064:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d007      	beq.n	800c07c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c06c:	2220      	movs	r2, #32
 800c06e:	2100      	movs	r1, #0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f002 fb51 	bl	800e718 <memset>
    pcb->ttl = UDP_TTL;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	22ff      	movs	r2, #255	; 0xff
 800c07a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c07c:	687b      	ldr	r3, [r7, #4]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
	...

0800c088 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01e      	beq.n	800c0d6 <udp_netif_ip_addr_changed+0x4e>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d01a      	beq.n	800c0d6 <udp_netif_ip_addr_changed+0x4e>
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d017      	beq.n	800c0d6 <udp_netif_ip_addr_changed+0x4e>
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d013      	beq.n	800c0d6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c0ae:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <udp_netif_ip_addr_changed+0x5c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	60fb      	str	r3, [r7, #12]
 800c0b4:	e00c      	b.n	800c0d0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d103      	bne.n	800c0ca <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1ef      	bne.n	800c0b6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c0d6:	bf00      	nop
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20008bcc 	.word	0x20008bcc

0800c0e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c0f0:	4915      	ldr	r1, [pc, #84]	; (800c148 <etharp_free_entry+0x60>)
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	4413      	add	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	440b      	add	r3, r1
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d013      	beq.n	800c12c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c104:	4910      	ldr	r1, [pc, #64]	; (800c148 <etharp_free_entry+0x60>)
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	4613      	mov	r3, r2
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	4413      	add	r3, r2
 800c10e:	00db      	lsls	r3, r3, #3
 800c110:	440b      	add	r3, r1
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4618      	mov	r0, r3
 800c116:	f7f9 fd0b 	bl	8005b30 <pbuf_free>
    arp_table[i].q = NULL;
 800c11a:	490b      	ldr	r1, [pc, #44]	; (800c148 <etharp_free_entry+0x60>)
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	4613      	mov	r3, r2
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	4413      	add	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	440b      	add	r3, r1
 800c128:	2200      	movs	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c12c:	4906      	ldr	r1, [pc, #24]	; (800c148 <etharp_free_entry+0x60>)
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	4613      	mov	r3, r2
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	4413      	add	r3, r2
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	440b      	add	r3, r1
 800c13a:	3314      	adds	r3, #20
 800c13c:	2200      	movs	r2, #0
 800c13e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20000178 	.word	0x20000178

0800c14c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c152:	2300      	movs	r3, #0
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	e096      	b.n	800c286 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c158:	494f      	ldr	r1, [pc, #316]	; (800c298 <etharp_tmr+0x14c>)
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	4613      	mov	r3, r2
 800c15e:	005b      	lsls	r3, r3, #1
 800c160:	4413      	add	r3, r2
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	440b      	add	r3, r1
 800c166:	3314      	adds	r3, #20
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c16c:	78fb      	ldrb	r3, [r7, #3]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 8086 	beq.w	800c280 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c174:	4948      	ldr	r1, [pc, #288]	; (800c298 <etharp_tmr+0x14c>)
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	4613      	mov	r3, r2
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	4413      	add	r3, r2
 800c17e:	00db      	lsls	r3, r3, #3
 800c180:	440b      	add	r3, r1
 800c182:	3312      	adds	r3, #18
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	3301      	adds	r3, #1
 800c188:	b298      	uxth	r0, r3
 800c18a:	4943      	ldr	r1, [pc, #268]	; (800c298 <etharp_tmr+0x14c>)
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	4613      	mov	r3, r2
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	4413      	add	r3, r2
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	440b      	add	r3, r1
 800c198:	3312      	adds	r3, #18
 800c19a:	4602      	mov	r2, r0
 800c19c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c19e:	493e      	ldr	r1, [pc, #248]	; (800c298 <etharp_tmr+0x14c>)
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	4413      	add	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	440b      	add	r3, r1
 800c1ac:	3312      	adds	r3, #18
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c1b4:	d215      	bcs.n	800c1e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c1b6:	4938      	ldr	r1, [pc, #224]	; (800c298 <etharp_tmr+0x14c>)
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	4413      	add	r3, r2
 800c1c0:	00db      	lsls	r3, r3, #3
 800c1c2:	440b      	add	r3, r1
 800c1c4:	3314      	adds	r3, #20
 800c1c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d10e      	bne.n	800c1ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c1cc:	4932      	ldr	r1, [pc, #200]	; (800c298 <etharp_tmr+0x14c>)
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	440b      	add	r3, r1
 800c1da:	3312      	adds	r3, #18
 800c1dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d903      	bls.n	800c1ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff ff80 	bl	800c0e8 <etharp_free_entry>
 800c1e8:	e04a      	b.n	800c280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c1ea:	492b      	ldr	r1, [pc, #172]	; (800c298 <etharp_tmr+0x14c>)
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	4413      	add	r3, r2
 800c1f4:	00db      	lsls	r3, r3, #3
 800c1f6:	440b      	add	r3, r1
 800c1f8:	3314      	adds	r3, #20
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d10a      	bne.n	800c216 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c200:	4925      	ldr	r1, [pc, #148]	; (800c298 <etharp_tmr+0x14c>)
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	4613      	mov	r3, r2
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	4413      	add	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	440b      	add	r3, r1
 800c20e:	3314      	adds	r3, #20
 800c210:	2204      	movs	r2, #4
 800c212:	701a      	strb	r2, [r3, #0]
 800c214:	e034      	b.n	800c280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c216:	4920      	ldr	r1, [pc, #128]	; (800c298 <etharp_tmr+0x14c>)
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	4613      	mov	r3, r2
 800c21c:	005b      	lsls	r3, r3, #1
 800c21e:	4413      	add	r3, r2
 800c220:	00db      	lsls	r3, r3, #3
 800c222:	440b      	add	r3, r1
 800c224:	3314      	adds	r3, #20
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b04      	cmp	r3, #4
 800c22a:	d10a      	bne.n	800c242 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c22c:	491a      	ldr	r1, [pc, #104]	; (800c298 <etharp_tmr+0x14c>)
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	4613      	mov	r3, r2
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	4413      	add	r3, r2
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	440b      	add	r3, r1
 800c23a:	3314      	adds	r3, #20
 800c23c:	2202      	movs	r2, #2
 800c23e:	701a      	strb	r2, [r3, #0]
 800c240:	e01e      	b.n	800c280 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c242:	4915      	ldr	r1, [pc, #84]	; (800c298 <etharp_tmr+0x14c>)
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4613      	mov	r3, r2
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	4413      	add	r3, r2
 800c24c:	00db      	lsls	r3, r3, #3
 800c24e:	440b      	add	r3, r1
 800c250:	3314      	adds	r3, #20
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d113      	bne.n	800c280 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c258:	490f      	ldr	r1, [pc, #60]	; (800c298 <etharp_tmr+0x14c>)
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	4613      	mov	r3, r2
 800c25e:	005b      	lsls	r3, r3, #1
 800c260:	4413      	add	r3, r2
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	440b      	add	r3, r1
 800c266:	3308      	adds	r3, #8
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	4613      	mov	r3, r2
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	4413      	add	r3, r2
 800c272:	00db      	lsls	r3, r3, #3
 800c274:	4a08      	ldr	r2, [pc, #32]	; (800c298 <etharp_tmr+0x14c>)
 800c276:	4413      	add	r3, r2
 800c278:	3304      	adds	r3, #4
 800c27a:	4619      	mov	r1, r3
 800c27c:	f000 fe6e 	bl	800cf5c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	3301      	adds	r3, #1
 800c284:	607b      	str	r3, [r7, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b09      	cmp	r3, #9
 800c28a:	f77f af65 	ble.w	800c158 <etharp_tmr+0xc>
      }
    }
  }
}
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	20000178 	.word	0x20000178

0800c29c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08a      	sub	sp, #40	; 0x28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c2aa:	230a      	movs	r3, #10
 800c2ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c2ae:	230a      	movs	r3, #10
 800c2b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c2b2:	230a      	movs	r3, #10
 800c2b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c2ba:	230a      	movs	r3, #10
 800c2bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	83bb      	strh	r3, [r7, #28]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	837b      	strh	r3, [r7, #26]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	843b      	strh	r3, [r7, #32]
 800c2ce:	e0ae      	b.n	800c42e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c2d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2d4:	49a6      	ldr	r1, [pc, #664]	; (800c570 <etharp_find_entry+0x2d4>)
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	4413      	add	r3, r2
 800c2dc:	00db      	lsls	r3, r3, #3
 800c2de:	440b      	add	r3, r1
 800c2e0:	3314      	adds	r3, #20
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c2e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c2ea:	2b0a      	cmp	r3, #10
 800c2ec:	d105      	bne.n	800c2fa <etharp_find_entry+0x5e>
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d102      	bne.n	800c2fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c2f4:	8c3b      	ldrh	r3, [r7, #32]
 800c2f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800c2f8:	e095      	b.n	800c426 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c2fa:	7dfb      	ldrb	r3, [r7, #23]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f000 8092 	beq.w	800c426 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c302:	7dfb      	ldrb	r3, [r7, #23]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d009      	beq.n	800c31c <etharp_find_entry+0x80>
 800c308:	7dfb      	ldrb	r3, [r7, #23]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d806      	bhi.n	800c31c <etharp_find_entry+0x80>
 800c30e:	4b99      	ldr	r3, [pc, #612]	; (800c574 <etharp_find_entry+0x2d8>)
 800c310:	f240 1223 	movw	r2, #291	; 0x123
 800c314:	4998      	ldr	r1, [pc, #608]	; (800c578 <etharp_find_entry+0x2dc>)
 800c316:	4899      	ldr	r0, [pc, #612]	; (800c57c <etharp_find_entry+0x2e0>)
 800c318:	f002 fa06 	bl	800e728 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d020      	beq.n	800c364 <etharp_find_entry+0xc8>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6819      	ldr	r1, [r3, #0]
 800c326:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c32a:	4891      	ldr	r0, [pc, #580]	; (800c570 <etharp_find_entry+0x2d4>)
 800c32c:	4613      	mov	r3, r2
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	4413      	add	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	4403      	add	r3, r0
 800c336:	3304      	adds	r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4299      	cmp	r1, r3
 800c33c:	d112      	bne.n	800c364 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00c      	beq.n	800c35e <etharp_find_entry+0xc2>
 800c344:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c348:	4989      	ldr	r1, [pc, #548]	; (800c570 <etharp_find_entry+0x2d4>)
 800c34a:	4613      	mov	r3, r2
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	4413      	add	r3, r2
 800c350:	00db      	lsls	r3, r3, #3
 800c352:	440b      	add	r3, r1
 800c354:	3308      	adds	r3, #8
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d102      	bne.n	800c364 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c35e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c362:	e100      	b.n	800c566 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d140      	bne.n	800c3ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c36a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c36e:	4980      	ldr	r1, [pc, #512]	; (800c570 <etharp_find_entry+0x2d4>)
 800c370:	4613      	mov	r3, r2
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	4413      	add	r3, r2
 800c376:	00db      	lsls	r3, r3, #3
 800c378:	440b      	add	r3, r1
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01a      	beq.n	800c3b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c380:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c384:	497a      	ldr	r1, [pc, #488]	; (800c570 <etharp_find_entry+0x2d4>)
 800c386:	4613      	mov	r3, r2
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	4413      	add	r3, r2
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	440b      	add	r3, r1
 800c390:	3312      	adds	r3, #18
 800c392:	881b      	ldrh	r3, [r3, #0]
 800c394:	8bba      	ldrh	r2, [r7, #28]
 800c396:	429a      	cmp	r2, r3
 800c398:	d845      	bhi.n	800c426 <etharp_find_entry+0x18a>
            old_queue = i;
 800c39a:	8c3b      	ldrh	r3, [r7, #32]
 800c39c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c39e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3a2:	4973      	ldr	r1, [pc, #460]	; (800c570 <etharp_find_entry+0x2d4>)
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	440b      	add	r3, r1
 800c3ae:	3312      	adds	r3, #18
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	83bb      	strh	r3, [r7, #28]
 800c3b4:	e037      	b.n	800c426 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c3b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3ba:	496d      	ldr	r1, [pc, #436]	; (800c570 <etharp_find_entry+0x2d4>)
 800c3bc:	4613      	mov	r3, r2
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	4413      	add	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	440b      	add	r3, r1
 800c3c6:	3312      	adds	r3, #18
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	8b7a      	ldrh	r2, [r7, #26]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d82a      	bhi.n	800c426 <etharp_find_entry+0x18a>
            old_pending = i;
 800c3d0:	8c3b      	ldrh	r3, [r7, #32]
 800c3d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c3d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3d8:	4965      	ldr	r1, [pc, #404]	; (800c570 <etharp_find_entry+0x2d4>)
 800c3da:	4613      	mov	r3, r2
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	4413      	add	r3, r2
 800c3e0:	00db      	lsls	r3, r3, #3
 800c3e2:	440b      	add	r3, r1
 800c3e4:	3312      	adds	r3, #18
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	837b      	strh	r3, [r7, #26]
 800c3ea:	e01c      	b.n	800c426 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d919      	bls.n	800c426 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c3f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3f6:	495e      	ldr	r1, [pc, #376]	; (800c570 <etharp_find_entry+0x2d4>)
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	4413      	add	r3, r2
 800c3fe:	00db      	lsls	r3, r3, #3
 800c400:	440b      	add	r3, r1
 800c402:	3312      	adds	r3, #18
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	8b3a      	ldrh	r2, [r7, #24]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d80c      	bhi.n	800c426 <etharp_find_entry+0x18a>
            old_stable = i;
 800c40c:	8c3b      	ldrh	r3, [r7, #32]
 800c40e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c410:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c414:	4956      	ldr	r1, [pc, #344]	; (800c570 <etharp_find_entry+0x2d4>)
 800c416:	4613      	mov	r3, r2
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	4413      	add	r3, r2
 800c41c:	00db      	lsls	r3, r3, #3
 800c41e:	440b      	add	r3, r1
 800c420:	3312      	adds	r3, #18
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c426:	8c3b      	ldrh	r3, [r7, #32]
 800c428:	3301      	adds	r3, #1
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	843b      	strh	r3, [r7, #32]
 800c42e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c432:	2b09      	cmp	r3, #9
 800c434:	f77f af4c 	ble.w	800c2d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c438:	7afb      	ldrb	r3, [r7, #11]
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d108      	bne.n	800c454 <etharp_find_entry+0x1b8>
 800c442:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c446:	2b0a      	cmp	r3, #10
 800c448:	d107      	bne.n	800c45a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c44a:	7afb      	ldrb	r3, [r7, #11]
 800c44c:	f003 0301 	and.w	r3, r3, #1
 800c450:	2b00      	cmp	r3, #0
 800c452:	d102      	bne.n	800c45a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c454:	f04f 33ff 	mov.w	r3, #4294967295
 800c458:	e085      	b.n	800c566 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c45a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c45e:	2b09      	cmp	r3, #9
 800c460:	dc02      	bgt.n	800c468 <etharp_find_entry+0x1cc>
    i = empty;
 800c462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c464:	843b      	strh	r3, [r7, #32]
 800c466:	e039      	b.n	800c4dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c468:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c46c:	2b09      	cmp	r3, #9
 800c46e:	dc14      	bgt.n	800c49a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c472:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c478:	493d      	ldr	r1, [pc, #244]	; (800c570 <etharp_find_entry+0x2d4>)
 800c47a:	4613      	mov	r3, r2
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	4413      	add	r3, r2
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	440b      	add	r3, r1
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d018      	beq.n	800c4bc <etharp_find_entry+0x220>
 800c48a:	4b3a      	ldr	r3, [pc, #232]	; (800c574 <etharp_find_entry+0x2d8>)
 800c48c:	f240 126d 	movw	r2, #365	; 0x16d
 800c490:	493b      	ldr	r1, [pc, #236]	; (800c580 <etharp_find_entry+0x2e4>)
 800c492:	483a      	ldr	r0, [pc, #232]	; (800c57c <etharp_find_entry+0x2e0>)
 800c494:	f002 f948 	bl	800e728 <iprintf>
 800c498:	e010      	b.n	800c4bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c49a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c49e:	2b09      	cmp	r3, #9
 800c4a0:	dc02      	bgt.n	800c4a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c4a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4a4:	843b      	strh	r3, [r7, #32]
 800c4a6:	e009      	b.n	800c4bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c4a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c4ac:	2b09      	cmp	r3, #9
 800c4ae:	dc02      	bgt.n	800c4b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c4b0:	8bfb      	ldrh	r3, [r7, #30]
 800c4b2:	843b      	strh	r3, [r7, #32]
 800c4b4:	e002      	b.n	800c4bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ba:	e054      	b.n	800c566 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c4bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4c0:	2b09      	cmp	r3, #9
 800c4c2:	dd06      	ble.n	800c4d2 <etharp_find_entry+0x236>
 800c4c4:	4b2b      	ldr	r3, [pc, #172]	; (800c574 <etharp_find_entry+0x2d8>)
 800c4c6:	f240 127f 	movw	r2, #383	; 0x17f
 800c4ca:	492e      	ldr	r1, [pc, #184]	; (800c584 <etharp_find_entry+0x2e8>)
 800c4cc:	482b      	ldr	r0, [pc, #172]	; (800c57c <etharp_find_entry+0x2e0>)
 800c4ce:	f002 f92b 	bl	800e728 <iprintf>
    etharp_free_entry(i);
 800c4d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff fe06 	bl	800c0e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c4dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c4e0:	2b09      	cmp	r3, #9
 800c4e2:	dd06      	ble.n	800c4f2 <etharp_find_entry+0x256>
 800c4e4:	4b23      	ldr	r3, [pc, #140]	; (800c574 <etharp_find_entry+0x2d8>)
 800c4e6:	f240 1283 	movw	r2, #387	; 0x183
 800c4ea:	4926      	ldr	r1, [pc, #152]	; (800c584 <etharp_find_entry+0x2e8>)
 800c4ec:	4823      	ldr	r0, [pc, #140]	; (800c57c <etharp_find_entry+0x2e0>)
 800c4ee:	f002 f91b 	bl	800e728 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c4f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4f6:	491e      	ldr	r1, [pc, #120]	; (800c570 <etharp_find_entry+0x2d4>)
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	4413      	add	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	440b      	add	r3, r1
 800c502:	3314      	adds	r3, #20
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d006      	beq.n	800c518 <etharp_find_entry+0x27c>
 800c50a:	4b1a      	ldr	r3, [pc, #104]	; (800c574 <etharp_find_entry+0x2d8>)
 800c50c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c510:	491d      	ldr	r1, [pc, #116]	; (800c588 <etharp_find_entry+0x2ec>)
 800c512:	481a      	ldr	r0, [pc, #104]	; (800c57c <etharp_find_entry+0x2e0>)
 800c514:	f002 f908 	bl	800e728 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00b      	beq.n	800c536 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c51e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6819      	ldr	r1, [r3, #0]
 800c526:	4812      	ldr	r0, [pc, #72]	; (800c570 <etharp_find_entry+0x2d4>)
 800c528:	4613      	mov	r3, r2
 800c52a:	005b      	lsls	r3, r3, #1
 800c52c:	4413      	add	r3, r2
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	4403      	add	r3, r0
 800c532:	3304      	adds	r3, #4
 800c534:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c53a:	490d      	ldr	r1, [pc, #52]	; (800c570 <etharp_find_entry+0x2d4>)
 800c53c:	4613      	mov	r3, r2
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	4413      	add	r3, r2
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	440b      	add	r3, r1
 800c546:	3312      	adds	r3, #18
 800c548:	2200      	movs	r2, #0
 800c54a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c54c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c550:	4907      	ldr	r1, [pc, #28]	; (800c570 <etharp_find_entry+0x2d4>)
 800c552:	4613      	mov	r3, r2
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	4413      	add	r3, r2
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	440b      	add	r3, r1
 800c55c:	3308      	adds	r3, #8
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c562:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3728      	adds	r7, #40	; 0x28
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20000178 	.word	0x20000178
 800c574:	08011e2c 	.word	0x08011e2c
 800c578:	08011e64 	.word	0x08011e64
 800c57c:	08011ea4 	.word	0x08011ea4
 800c580:	08011ecc 	.word	0x08011ecc
 800c584:	08011ee4 	.word	0x08011ee4
 800c588:	08011ef8 	.word	0x08011ef8

0800c58c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b088      	sub	sp, #32
 800c590:	af02      	add	r7, sp, #8
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5a0:	2b06      	cmp	r3, #6
 800c5a2:	d006      	beq.n	800c5b2 <etharp_update_arp_entry+0x26>
 800c5a4:	4b48      	ldr	r3, [pc, #288]	; (800c6c8 <etharp_update_arp_entry+0x13c>)
 800c5a6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c5aa:	4948      	ldr	r1, [pc, #288]	; (800c6cc <etharp_update_arp_entry+0x140>)
 800c5ac:	4848      	ldr	r0, [pc, #288]	; (800c6d0 <etharp_update_arp_entry+0x144>)
 800c5ae:	f002 f8bb 	bl	800e728 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d012      	beq.n	800c5de <etharp_update_arp_entry+0x52>
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00e      	beq.n	800c5de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68f9      	ldr	r1, [r7, #12]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f001 f8fc 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800c5cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d105      	bne.n	800c5de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c5da:	2be0      	cmp	r3, #224	; 0xe0
 800c5dc:	d102      	bne.n	800c5e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c5de:	f06f 030f 	mvn.w	r3, #15
 800c5e2:	e06c      	b.n	800c6be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	68b8      	ldr	r0, [r7, #8]
 800c5ec:	f7ff fe56 	bl	800c29c <etharp_find_entry>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c5f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	da02      	bge.n	800c602 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c5fc:	8afb      	ldrh	r3, [r7, #22]
 800c5fe:	b25b      	sxtb	r3, r3
 800c600:	e05d      	b.n	800c6be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c606:	4933      	ldr	r1, [pc, #204]	; (800c6d4 <etharp_update_arp_entry+0x148>)
 800c608:	4613      	mov	r3, r2
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	4413      	add	r3, r2
 800c60e:	00db      	lsls	r3, r3, #3
 800c610:	440b      	add	r3, r1
 800c612:	3314      	adds	r3, #20
 800c614:	2202      	movs	r2, #2
 800c616:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c61c:	492d      	ldr	r1, [pc, #180]	; (800c6d4 <etharp_update_arp_entry+0x148>)
 800c61e:	4613      	mov	r3, r2
 800c620:	005b      	lsls	r3, r3, #1
 800c622:	4413      	add	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	440b      	add	r3, r1
 800c628:	3308      	adds	r3, #8
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c62e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c632:	4613      	mov	r3, r2
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	4413      	add	r3, r2
 800c638:	00db      	lsls	r3, r3, #3
 800c63a:	3308      	adds	r3, #8
 800c63c:	4a25      	ldr	r2, [pc, #148]	; (800c6d4 <etharp_update_arp_entry+0x148>)
 800c63e:	4413      	add	r3, r2
 800c640:	3304      	adds	r3, #4
 800c642:	2206      	movs	r2, #6
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	4618      	mov	r0, r3
 800c648:	f002 f83e 	bl	800e6c8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c64c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c650:	4920      	ldr	r1, [pc, #128]	; (800c6d4 <etharp_update_arp_entry+0x148>)
 800c652:	4613      	mov	r3, r2
 800c654:	005b      	lsls	r3, r3, #1
 800c656:	4413      	add	r3, r2
 800c658:	00db      	lsls	r3, r3, #3
 800c65a:	440b      	add	r3, r1
 800c65c:	3312      	adds	r3, #18
 800c65e:	2200      	movs	r2, #0
 800c660:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c662:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c666:	491b      	ldr	r1, [pc, #108]	; (800c6d4 <etharp_update_arp_entry+0x148>)
 800c668:	4613      	mov	r3, r2
 800c66a:	005b      	lsls	r3, r3, #1
 800c66c:	4413      	add	r3, r2
 800c66e:	00db      	lsls	r3, r3, #3
 800c670:	440b      	add	r3, r1
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d021      	beq.n	800c6bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c678:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c67c:	4915      	ldr	r1, [pc, #84]	; (800c6d4 <etharp_update_arp_entry+0x148>)
 800c67e:	4613      	mov	r3, r2
 800c680:	005b      	lsls	r3, r3, #1
 800c682:	4413      	add	r3, r2
 800c684:	00db      	lsls	r3, r3, #3
 800c686:	440b      	add	r3, r1
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c68c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c690:	4910      	ldr	r1, [pc, #64]	; (800c6d4 <etharp_update_arp_entry+0x148>)
 800c692:	4613      	mov	r3, r2
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	4413      	add	r3, r2
 800c698:	00db      	lsls	r3, r3, #3
 800c69a:	440b      	add	r3, r1
 800c69c:	2200      	movs	r2, #0
 800c69e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800c6a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6939      	ldr	r1, [r7, #16]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f001 ff8f 	bl	800e5d4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c6b6:	6938      	ldr	r0, [r7, #16]
 800c6b8:	f7f9 fa3a 	bl	8005b30 <pbuf_free>
  }
  return ERR_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	08011e2c 	.word	0x08011e2c
 800c6cc:	08011f24 	.word	0x08011f24
 800c6d0:	08011ea4 	.word	0x08011ea4
 800c6d4:	20000178 	.word	0x20000178

0800c6d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	e01e      	b.n	800c724 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c6e6:	4913      	ldr	r1, [pc, #76]	; (800c734 <etharp_cleanup_netif+0x5c>)
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	005b      	lsls	r3, r3, #1
 800c6ee:	4413      	add	r3, r2
 800c6f0:	00db      	lsls	r3, r3, #3
 800c6f2:	440b      	add	r3, r1
 800c6f4:	3314      	adds	r3, #20
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c6fa:	7afb      	ldrb	r3, [r7, #11]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00e      	beq.n	800c71e <etharp_cleanup_netif+0x46>
 800c700:	490c      	ldr	r1, [pc, #48]	; (800c734 <etharp_cleanup_netif+0x5c>)
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4613      	mov	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4413      	add	r3, r2
 800c70a:	00db      	lsls	r3, r3, #3
 800c70c:	440b      	add	r3, r1
 800c70e:	3308      	adds	r3, #8
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	429a      	cmp	r2, r3
 800c716:	d102      	bne.n	800c71e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f7ff fce5 	bl	800c0e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3301      	adds	r3, #1
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b09      	cmp	r3, #9
 800c728:	dddd      	ble.n	800c6e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	20000178 	.word	0x20000178

0800c738 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c738:	b5b0      	push	{r4, r5, r7, lr}
 800c73a:	b08a      	sub	sp, #40	; 0x28
 800c73c:	af04      	add	r7, sp, #16
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d107      	bne.n	800c758 <etharp_input+0x20>
 800c748:	4b3d      	ldr	r3, [pc, #244]	; (800c840 <etharp_input+0x108>)
 800c74a:	f240 228a 	movw	r2, #650	; 0x28a
 800c74e:	493d      	ldr	r1, [pc, #244]	; (800c844 <etharp_input+0x10c>)
 800c750:	483d      	ldr	r0, [pc, #244]	; (800c848 <etharp_input+0x110>)
 800c752:	f001 ffe9 	bl	800e728 <iprintf>
 800c756:	e06f      	b.n	800c838 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	b29b      	uxth	r3, r3
 800c764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c768:	d10c      	bne.n	800c784 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c76e:	2b06      	cmp	r3, #6
 800c770:	d108      	bne.n	800c784 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c776:	2b04      	cmp	r3, #4
 800c778:	d104      	bne.n	800c784 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	885b      	ldrh	r3, [r3, #2]
 800c77e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c780:	2b08      	cmp	r3, #8
 800c782:	d003      	beq.n	800c78c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7f9 f9d3 	bl	8005b30 <pbuf_free>
    return;
 800c78a:	e055      	b.n	800c838 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	330e      	adds	r3, #14
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	3318      	adds	r3, #24
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	3304      	adds	r3, #4
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d102      	bne.n	800c7ac <etharp_input+0x74>
    for_us = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	75fb      	strb	r3, [r7, #23]
 800c7aa:	e009      	b.n	800c7c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	bf0c      	ite	eq
 800c7b8:	2301      	moveq	r3, #1
 800c7ba:	2300      	movne	r3, #0
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f103 0208 	add.w	r2, r3, #8
 800c7c6:	7dfb      	ldrb	r3, [r7, #23]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <etharp_input+0x98>
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	e000      	b.n	800c7d2 <etharp_input+0x9a>
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	f107 010c 	add.w	r1, r7, #12
 800c7d6:	6838      	ldr	r0, [r7, #0]
 800c7d8:	f7ff fed8 	bl	800c58c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	88db      	ldrh	r3, [r3, #6]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7e6:	d003      	beq.n	800c7f0 <etharp_input+0xb8>
 800c7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7ec:	d01e      	beq.n	800c82c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c7ee:	e020      	b.n	800c832 <etharp_input+0xfa>
      if (for_us) {
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d01c      	beq.n	800c830 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c810:	2102      	movs	r1, #2
 800c812:	9103      	str	r1, [sp, #12]
 800c814:	f107 010c 	add.w	r1, r7, #12
 800c818:	9102      	str	r1, [sp, #8]
 800c81a:	9201      	str	r2, [sp, #4]
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	462b      	mov	r3, r5
 800c820:	4622      	mov	r2, r4
 800c822:	4601      	mov	r1, r0
 800c824:	6838      	ldr	r0, [r7, #0]
 800c826:	f000 faeb 	bl	800ce00 <etharp_raw>
      break;
 800c82a:	e001      	b.n	800c830 <etharp_input+0xf8>
      break;
 800c82c:	bf00      	nop
 800c82e:	e000      	b.n	800c832 <etharp_input+0xfa>
      break;
 800c830:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7f9 f97c 	bl	8005b30 <pbuf_free>
}
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bdb0      	pop	{r4, r5, r7, pc}
 800c83e:	bf00      	nop
 800c840:	08011e2c 	.word	0x08011e2c
 800c844:	08011f7c 	.word	0x08011f7c
 800c848:	08011ea4 	.word	0x08011ea4

0800c84c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af02      	add	r7, sp, #8
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c85a:	79fa      	ldrb	r2, [r7, #7]
 800c85c:	4944      	ldr	r1, [pc, #272]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c85e:	4613      	mov	r3, r2
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	4413      	add	r3, r2
 800c864:	00db      	lsls	r3, r3, #3
 800c866:	440b      	add	r3, r1
 800c868:	3314      	adds	r3, #20
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d806      	bhi.n	800c87e <etharp_output_to_arp_index+0x32>
 800c870:	4b40      	ldr	r3, [pc, #256]	; (800c974 <etharp_output_to_arp_index+0x128>)
 800c872:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c876:	4940      	ldr	r1, [pc, #256]	; (800c978 <etharp_output_to_arp_index+0x12c>)
 800c878:	4840      	ldr	r0, [pc, #256]	; (800c97c <etharp_output_to_arp_index+0x130>)
 800c87a:	f001 ff55 	bl	800e728 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c87e:	79fa      	ldrb	r2, [r7, #7]
 800c880:	493b      	ldr	r1, [pc, #236]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c882:	4613      	mov	r3, r2
 800c884:	005b      	lsls	r3, r3, #1
 800c886:	4413      	add	r3, r2
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	440b      	add	r3, r1
 800c88c:	3314      	adds	r3, #20
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	2b02      	cmp	r3, #2
 800c892:	d153      	bne.n	800c93c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c894:	79fa      	ldrb	r2, [r7, #7]
 800c896:	4936      	ldr	r1, [pc, #216]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c898:	4613      	mov	r3, r2
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	4413      	add	r3, r2
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	440b      	add	r3, r1
 800c8a2:	3312      	adds	r3, #18
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c8aa:	d919      	bls.n	800c8e0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c8ac:	79fa      	ldrb	r2, [r7, #7]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	005b      	lsls	r3, r3, #1
 800c8b2:	4413      	add	r3, r2
 800c8b4:	00db      	lsls	r3, r3, #3
 800c8b6:	4a2e      	ldr	r2, [pc, #184]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c8b8:	4413      	add	r3, r2
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	4619      	mov	r1, r3
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f000 fb4c 	bl	800cf5c <etharp_request>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d138      	bne.n	800c93c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c8ca:	79fa      	ldrb	r2, [r7, #7]
 800c8cc:	4928      	ldr	r1, [pc, #160]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	4413      	add	r3, r2
 800c8d4:	00db      	lsls	r3, r3, #3
 800c8d6:	440b      	add	r3, r1
 800c8d8:	3314      	adds	r3, #20
 800c8da:	2203      	movs	r2, #3
 800c8dc:	701a      	strb	r2, [r3, #0]
 800c8de:	e02d      	b.n	800c93c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c8e0:	79fa      	ldrb	r2, [r7, #7]
 800c8e2:	4923      	ldr	r1, [pc, #140]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	4413      	add	r3, r2
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	440b      	add	r3, r1
 800c8ee:	3312      	adds	r3, #18
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c8f6:	d321      	bcc.n	800c93c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c8f8:	79fa      	ldrb	r2, [r7, #7]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	4413      	add	r3, r2
 800c900:	00db      	lsls	r3, r3, #3
 800c902:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c904:	4413      	add	r3, r2
 800c906:	1d19      	adds	r1, r3, #4
 800c908:	79fa      	ldrb	r2, [r7, #7]
 800c90a:	4613      	mov	r3, r2
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	4413      	add	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	3308      	adds	r3, #8
 800c914:	4a16      	ldr	r2, [pc, #88]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c916:	4413      	add	r3, r2
 800c918:	3304      	adds	r3, #4
 800c91a:	461a      	mov	r2, r3
 800c91c:	68f8      	ldr	r0, [r7, #12]
 800c91e:	f000 fafb 	bl	800cf18 <etharp_request_dst>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d109      	bne.n	800c93c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c928:	79fa      	ldrb	r2, [r7, #7]
 800c92a:	4911      	ldr	r1, [pc, #68]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c92c:	4613      	mov	r3, r2
 800c92e:	005b      	lsls	r3, r3, #1
 800c930:	4413      	add	r3, r2
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	440b      	add	r3, r1
 800c936:	3314      	adds	r3, #20
 800c938:	2203      	movs	r2, #3
 800c93a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800c942:	79fa      	ldrb	r2, [r7, #7]
 800c944:	4613      	mov	r3, r2
 800c946:	005b      	lsls	r3, r3, #1
 800c948:	4413      	add	r3, r2
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	3308      	adds	r3, #8
 800c94e:	4a08      	ldr	r2, [pc, #32]	; (800c970 <etharp_output_to_arp_index+0x124>)
 800c950:	4413      	add	r3, r2
 800c952:	3304      	adds	r3, #4
 800c954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c958:	9200      	str	r2, [sp, #0]
 800c95a:	460a      	mov	r2, r1
 800c95c:	68b9      	ldr	r1, [r7, #8]
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f001 fe38 	bl	800e5d4 <ethernet_output>
 800c964:	4603      	mov	r3, r0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20000178 	.word	0x20000178
 800c974:	08011e2c 	.word	0x08011e2c
 800c978:	08011f9c 	.word	0x08011f9c
 800c97c:	08011ea4 	.word	0x08011ea4

0800c980 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08a      	sub	sp, #40	; 0x28
 800c984:	af02      	add	r7, sp, #8
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d106      	bne.n	800c9a4 <etharp_output+0x24>
 800c996:	4b73      	ldr	r3, [pc, #460]	; (800cb64 <etharp_output+0x1e4>)
 800c998:	f240 321e 	movw	r2, #798	; 0x31e
 800c99c:	4972      	ldr	r1, [pc, #456]	; (800cb68 <etharp_output+0x1e8>)
 800c99e:	4873      	ldr	r0, [pc, #460]	; (800cb6c <etharp_output+0x1ec>)
 800c9a0:	f001 fec2 	bl	800e728 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d106      	bne.n	800c9b8 <etharp_output+0x38>
 800c9aa:	4b6e      	ldr	r3, [pc, #440]	; (800cb64 <etharp_output+0x1e4>)
 800c9ac:	f240 321f 	movw	r2, #799	; 0x31f
 800c9b0:	496f      	ldr	r1, [pc, #444]	; (800cb70 <etharp_output+0x1f0>)
 800c9b2:	486e      	ldr	r0, [pc, #440]	; (800cb6c <etharp_output+0x1ec>)
 800c9b4:	f001 feb8 	bl	800e728 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d106      	bne.n	800c9cc <etharp_output+0x4c>
 800c9be:	4b69      	ldr	r3, [pc, #420]	; (800cb64 <etharp_output+0x1e4>)
 800c9c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c9c4:	496b      	ldr	r1, [pc, #428]	; (800cb74 <etharp_output+0x1f4>)
 800c9c6:	4869      	ldr	r0, [pc, #420]	; (800cb6c <etharp_output+0x1ec>)
 800c9c8:	f001 feae 	bl	800e728 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68f9      	ldr	r1, [r7, #12]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fef6 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c9de:	4b66      	ldr	r3, [pc, #408]	; (800cb78 <etharp_output+0x1f8>)
 800c9e0:	61fb      	str	r3, [r7, #28]
 800c9e2:	e0af      	b.n	800cb44 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9ec:	2be0      	cmp	r3, #224	; 0xe0
 800c9ee:	d118      	bne.n	800ca22 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c9f8:	235e      	movs	r3, #94	; 0x5e
 800c9fa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	3301      	adds	r3, #1
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3302      	adds	r3, #2
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	3303      	adds	r3, #3
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ca1a:	f107 0310 	add.w	r3, r7, #16
 800ca1e:	61fb      	str	r3, [r7, #28]
 800ca20:	e090      	b.n	800cb44 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	405a      	eors	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	3308      	adds	r3, #8
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4013      	ands	r3, r2
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d012      	beq.n	800ca60 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ca40:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d00b      	beq.n	800ca60 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	330c      	adds	r3, #12
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d003      	beq.n	800ca5a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	330c      	adds	r3, #12
 800ca56:	61bb      	str	r3, [r7, #24]
 800ca58:	e002      	b.n	800ca60 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ca5a:	f06f 0303 	mvn.w	r3, #3
 800ca5e:	e07d      	b.n	800cb5c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ca60:	4b46      	ldr	r3, [pc, #280]	; (800cb7c <etharp_output+0x1fc>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	4619      	mov	r1, r3
 800ca66:	4a46      	ldr	r2, [pc, #280]	; (800cb80 <etharp_output+0x200>)
 800ca68:	460b      	mov	r3, r1
 800ca6a:	005b      	lsls	r3, r3, #1
 800ca6c:	440b      	add	r3, r1
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	4413      	add	r3, r2
 800ca72:	3314      	adds	r3, #20
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	d925      	bls.n	800cac6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ca7a:	4b40      	ldr	r3, [pc, #256]	; (800cb7c <etharp_output+0x1fc>)
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	4a3f      	ldr	r2, [pc, #252]	; (800cb80 <etharp_output+0x200>)
 800ca82:	460b      	mov	r3, r1
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	440b      	add	r3, r1
 800ca88:	00db      	lsls	r3, r3, #3
 800ca8a:	4413      	add	r3, r2
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d117      	bne.n	800cac6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	4b38      	ldr	r3, [pc, #224]	; (800cb7c <etharp_output+0x1fc>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	4937      	ldr	r1, [pc, #220]	; (800cb80 <etharp_output+0x200>)
 800caa2:	4603      	mov	r3, r0
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	4403      	add	r3, r0
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	440b      	add	r3, r1
 800caac:	3304      	adds	r3, #4
 800caae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d108      	bne.n	800cac6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cab4:	4b31      	ldr	r3, [pc, #196]	; (800cb7c <etharp_output+0x1fc>)
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	461a      	mov	r2, r3
 800caba:	68b9      	ldr	r1, [r7, #8]
 800cabc:	68f8      	ldr	r0, [r7, #12]
 800cabe:	f7ff fec5 	bl	800c84c <etharp_output_to_arp_index>
 800cac2:	4603      	mov	r3, r0
 800cac4:	e04a      	b.n	800cb5c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cac6:	2300      	movs	r3, #0
 800cac8:	75fb      	strb	r3, [r7, #23]
 800caca:	e031      	b.n	800cb30 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cacc:	7dfa      	ldrb	r2, [r7, #23]
 800cace:	492c      	ldr	r1, [pc, #176]	; (800cb80 <etharp_output+0x200>)
 800cad0:	4613      	mov	r3, r2
 800cad2:	005b      	lsls	r3, r3, #1
 800cad4:	4413      	add	r3, r2
 800cad6:	00db      	lsls	r3, r3, #3
 800cad8:	440b      	add	r3, r1
 800cada:	3314      	adds	r3, #20
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d923      	bls.n	800cb2a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cae2:	7dfa      	ldrb	r2, [r7, #23]
 800cae4:	4926      	ldr	r1, [pc, #152]	; (800cb80 <etharp_output+0x200>)
 800cae6:	4613      	mov	r3, r2
 800cae8:	005b      	lsls	r3, r3, #1
 800caea:	4413      	add	r3, r2
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	440b      	add	r3, r1
 800caf0:	3308      	adds	r3, #8
 800caf2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d117      	bne.n	800cb2a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	6819      	ldr	r1, [r3, #0]
 800cafe:	7dfa      	ldrb	r2, [r7, #23]
 800cb00:	481f      	ldr	r0, [pc, #124]	; (800cb80 <etharp_output+0x200>)
 800cb02:	4613      	mov	r3, r2
 800cb04:	005b      	lsls	r3, r3, #1
 800cb06:	4413      	add	r3, r2
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	4403      	add	r3, r0
 800cb0c:	3304      	adds	r3, #4
 800cb0e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cb10:	4299      	cmp	r1, r3
 800cb12:	d10a      	bne.n	800cb2a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cb14:	4a19      	ldr	r2, [pc, #100]	; (800cb7c <etharp_output+0x1fc>)
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
 800cb18:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	68b9      	ldr	r1, [r7, #8]
 800cb20:	68f8      	ldr	r0, [r7, #12]
 800cb22:	f7ff fe93 	bl	800c84c <etharp_output_to_arp_index>
 800cb26:	4603      	mov	r3, r0
 800cb28:	e018      	b.n	800cb5c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cb2a:	7dfb      	ldrb	r3, [r7, #23]
 800cb2c:	3301      	adds	r3, #1
 800cb2e:	75fb      	strb	r3, [r7, #23]
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	2b09      	cmp	r3, #9
 800cb34:	d9ca      	bls.n	800cacc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	69b9      	ldr	r1, [r7, #24]
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f000 f822 	bl	800cb84 <etharp_query>
 800cb40:	4603      	mov	r3, r0
 800cb42:	e00b      	b.n	800cb5c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800cb4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f001 fd3d 	bl	800e5d4 <ethernet_output>
 800cb5a:	4603      	mov	r3, r0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	08011e2c 	.word	0x08011e2c
 800cb68:	08011f7c 	.word	0x08011f7c
 800cb6c:	08011ea4 	.word	0x08011ea4
 800cb70:	08011fcc 	.word	0x08011fcc
 800cb74:	08011f6c 	.word	0x08011f6c
 800cb78:	080125d4 	.word	0x080125d4
 800cb7c:	20000268 	.word	0x20000268
 800cb80:	20000178 	.word	0x20000178

0800cb84 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08c      	sub	sp, #48	; 0x30
 800cb88:	af02      	add	r7, sp, #8
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	332a      	adds	r3, #42	; 0x2a
 800cb94:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cb96:	23ff      	movs	r3, #255	; 0xff
 800cb98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	68f9      	ldr	r1, [r7, #12]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 fe0c 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10c      	bne.n	800cbcc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cbba:	2be0      	cmp	r3, #224	; 0xe0
 800cbbc:	d006      	beq.n	800cbcc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cbcc:	f06f 030f 	mvn.w	r3, #15
 800cbd0:	e101      	b.n	800cdd6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	68b8      	ldr	r0, [r7, #8]
 800cbd8:	f7ff fb60 	bl	800c29c <etharp_find_entry>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cbe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	da02      	bge.n	800cbee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cbe8:	8a7b      	ldrh	r3, [r7, #18]
 800cbea:	b25b      	sxtb	r3, r3
 800cbec:	e0f3      	b.n	800cdd6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cbee:	8a7b      	ldrh	r3, [r7, #18]
 800cbf0:	2b7e      	cmp	r3, #126	; 0x7e
 800cbf2:	d906      	bls.n	800cc02 <etharp_query+0x7e>
 800cbf4:	4b7a      	ldr	r3, [pc, #488]	; (800cde0 <etharp_query+0x25c>)
 800cbf6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cbfa:	497a      	ldr	r1, [pc, #488]	; (800cde4 <etharp_query+0x260>)
 800cbfc:	487a      	ldr	r0, [pc, #488]	; (800cde8 <etharp_query+0x264>)
 800cbfe:	f001 fd93 	bl	800e728 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cc02:	8a7b      	ldrh	r3, [r7, #18]
 800cc04:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cc06:	7c7a      	ldrb	r2, [r7, #17]
 800cc08:	4978      	ldr	r1, [pc, #480]	; (800cdec <etharp_query+0x268>)
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	3314      	adds	r3, #20
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d115      	bne.n	800cc48 <etharp_query+0xc4>
    is_new_entry = 1;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cc20:	7c7a      	ldrb	r2, [r7, #17]
 800cc22:	4972      	ldr	r1, [pc, #456]	; (800cdec <etharp_query+0x268>)
 800cc24:	4613      	mov	r3, r2
 800cc26:	005b      	lsls	r3, r3, #1
 800cc28:	4413      	add	r3, r2
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	440b      	add	r3, r1
 800cc2e:	3314      	adds	r3, #20
 800cc30:	2201      	movs	r2, #1
 800cc32:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cc34:	7c7a      	ldrb	r2, [r7, #17]
 800cc36:	496d      	ldr	r1, [pc, #436]	; (800cdec <etharp_query+0x268>)
 800cc38:	4613      	mov	r3, r2
 800cc3a:	005b      	lsls	r3, r3, #1
 800cc3c:	4413      	add	r3, r2
 800cc3e:	00db      	lsls	r3, r3, #3
 800cc40:	440b      	add	r3, r1
 800cc42:	3308      	adds	r3, #8
 800cc44:	68fa      	ldr	r2, [r7, #12]
 800cc46:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cc48:	7c7a      	ldrb	r2, [r7, #17]
 800cc4a:	4968      	ldr	r1, [pc, #416]	; (800cdec <etharp_query+0x268>)
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	4413      	add	r3, r2
 800cc52:	00db      	lsls	r3, r3, #3
 800cc54:	440b      	add	r3, r1
 800cc56:	3314      	adds	r3, #20
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d011      	beq.n	800cc82 <etharp_query+0xfe>
 800cc5e:	7c7a      	ldrb	r2, [r7, #17]
 800cc60:	4962      	ldr	r1, [pc, #392]	; (800cdec <etharp_query+0x268>)
 800cc62:	4613      	mov	r3, r2
 800cc64:	005b      	lsls	r3, r3, #1
 800cc66:	4413      	add	r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	440b      	add	r3, r1
 800cc6c:	3314      	adds	r3, #20
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d806      	bhi.n	800cc82 <etharp_query+0xfe>
 800cc74:	4b5a      	ldr	r3, [pc, #360]	; (800cde0 <etharp_query+0x25c>)
 800cc76:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cc7a:	495d      	ldr	r1, [pc, #372]	; (800cdf0 <etharp_query+0x26c>)
 800cc7c:	485a      	ldr	r0, [pc, #360]	; (800cde8 <etharp_query+0x264>)
 800cc7e:	f001 fd53 	bl	800e728 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d102      	bne.n	800cc8e <etharp_query+0x10a>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10c      	bne.n	800cca8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f000 f963 	bl	800cf5c <etharp_request>
 800cc96:	4603      	mov	r3, r0
 800cc98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d102      	bne.n	800cca8 <etharp_query+0x124>
      return result;
 800cca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cca6:	e096      	b.n	800cdd6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d106      	bne.n	800ccbc <etharp_query+0x138>
 800ccae:	4b4c      	ldr	r3, [pc, #304]	; (800cde0 <etharp_query+0x25c>)
 800ccb0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ccb4:	494f      	ldr	r1, [pc, #316]	; (800cdf4 <etharp_query+0x270>)
 800ccb6:	484c      	ldr	r0, [pc, #304]	; (800cde8 <etharp_query+0x264>)
 800ccb8:	f001 fd36 	bl	800e728 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ccbc:	7c7a      	ldrb	r2, [r7, #17]
 800ccbe:	494b      	ldr	r1, [pc, #300]	; (800cdec <etharp_query+0x268>)
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	4413      	add	r3, r2
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	440b      	add	r3, r1
 800ccca:	3314      	adds	r3, #20
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d917      	bls.n	800cd02 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ccd2:	4a49      	ldr	r2, [pc, #292]	; (800cdf8 <etharp_query+0x274>)
 800ccd4:	7c7b      	ldrb	r3, [r7, #17]
 800ccd6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ccd8:	7c7a      	ldrb	r2, [r7, #17]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	005b      	lsls	r3, r3, #1
 800ccde:	4413      	add	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	3308      	adds	r3, #8
 800cce4:	4a41      	ldr	r2, [pc, #260]	; (800cdec <etharp_query+0x268>)
 800cce6:	4413      	add	r3, r2
 800cce8:	3304      	adds	r3, #4
 800ccea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccee:	9200      	str	r2, [sp, #0]
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f001 fc6d 	bl	800e5d4 <ethernet_output>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd00:	e067      	b.n	800cdd2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cd02:	7c7a      	ldrb	r2, [r7, #17]
 800cd04:	4939      	ldr	r1, [pc, #228]	; (800cdec <etharp_query+0x268>)
 800cd06:	4613      	mov	r3, r2
 800cd08:	005b      	lsls	r3, r3, #1
 800cd0a:	4413      	add	r3, r2
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	440b      	add	r3, r1
 800cd10:	3314      	adds	r3, #20
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d15c      	bne.n	800cdd2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cd20:	e01c      	b.n	800cd5c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	895a      	ldrh	r2, [r3, #10]
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	891b      	ldrh	r3, [r3, #8]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d10a      	bne.n	800cd44 <etharp_query+0x1c0>
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d006      	beq.n	800cd44 <etharp_query+0x1c0>
 800cd36:	4b2a      	ldr	r3, [pc, #168]	; (800cde0 <etharp_query+0x25c>)
 800cd38:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cd3c:	492f      	ldr	r1, [pc, #188]	; (800cdfc <etharp_query+0x278>)
 800cd3e:	482a      	ldr	r0, [pc, #168]	; (800cde8 <etharp_query+0x264>)
 800cd40:	f001 fcf2 	bl	800e728 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	7b1b      	ldrb	r3, [r3, #12]
 800cd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <etharp_query+0x1d2>
        copy_needed = 1;
 800cd50:	2301      	movs	r3, #1
 800cd52:	61bb      	str	r3, [r7, #24]
        break;
 800cd54:	e005      	b.n	800cd62 <etharp_query+0x1de>
      }
      p = p->next;
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d1df      	bne.n	800cd22 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d007      	beq.n	800cd78 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cd6e:	200e      	movs	r0, #14
 800cd70:	f7f9 f9dc 	bl	800612c <pbuf_clone>
 800cd74:	61f8      	str	r0, [r7, #28]
 800cd76:	e004      	b.n	800cd82 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cd7c:	69f8      	ldr	r0, [r7, #28]
 800cd7e:	f7f8 ff77 	bl	8005c70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d021      	beq.n	800cdcc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cd88:	7c7a      	ldrb	r2, [r7, #17]
 800cd8a:	4918      	ldr	r1, [pc, #96]	; (800cdec <etharp_query+0x268>)
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	440b      	add	r3, r1
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00a      	beq.n	800cdb2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cd9c:	7c7a      	ldrb	r2, [r7, #17]
 800cd9e:	4913      	ldr	r1, [pc, #76]	; (800cdec <etharp_query+0x268>)
 800cda0:	4613      	mov	r3, r2
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	4413      	add	r3, r2
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	440b      	add	r3, r1
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7f8 febf 	bl	8005b30 <pbuf_free>
      }
      arp_table[i].q = p;
 800cdb2:	7c7a      	ldrb	r2, [r7, #17]
 800cdb4:	490d      	ldr	r1, [pc, #52]	; (800cdec <etharp_query+0x268>)
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	4413      	add	r3, r2
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	440b      	add	r3, r1
 800cdc0:	69fa      	ldr	r2, [r7, #28]
 800cdc2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdca:	e002      	b.n	800cdd2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cdcc:	23ff      	movs	r3, #255	; 0xff
 800cdce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cdd2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3728      	adds	r7, #40	; 0x28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	08011e2c 	.word	0x08011e2c
 800cde4:	08011fd8 	.word	0x08011fd8
 800cde8:	08011ea4 	.word	0x08011ea4
 800cdec:	20000178 	.word	0x20000178
 800cdf0:	08011fe8 	.word	0x08011fe8
 800cdf4:	08011fcc 	.word	0x08011fcc
 800cdf8:	20000268 	.word	0x20000268
 800cdfc:	08012010 	.word	0x08012010

0800ce00 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b08a      	sub	sp, #40	; 0x28
 800ce04:	af02      	add	r7, sp, #8
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <etharp_raw+0x26>
 800ce18:	4b3a      	ldr	r3, [pc, #232]	; (800cf04 <etharp_raw+0x104>)
 800ce1a:	f240 4257 	movw	r2, #1111	; 0x457
 800ce1e:	493a      	ldr	r1, [pc, #232]	; (800cf08 <etharp_raw+0x108>)
 800ce20:	483a      	ldr	r0, [pc, #232]	; (800cf0c <etharp_raw+0x10c>)
 800ce22:	f001 fc81 	bl	800e728 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ce26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ce2a:	211c      	movs	r1, #28
 800ce2c:	200e      	movs	r0, #14
 800ce2e:	f7f8 fb9b 	bl	8005568 <pbuf_alloc>
 800ce32:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d102      	bne.n	800ce40 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ce3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3e:	e05d      	b.n	800cefc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	895b      	ldrh	r3, [r3, #10]
 800ce44:	2b1b      	cmp	r3, #27
 800ce46:	d806      	bhi.n	800ce56 <etharp_raw+0x56>
 800ce48:	4b2e      	ldr	r3, [pc, #184]	; (800cf04 <etharp_raw+0x104>)
 800ce4a:	f240 4262 	movw	r2, #1122	; 0x462
 800ce4e:	4930      	ldr	r1, [pc, #192]	; (800cf10 <etharp_raw+0x110>)
 800ce50:	482e      	ldr	r0, [pc, #184]	; (800cf0c <etharp_raw+0x10c>)
 800ce52:	f001 fc69 	bl	800e728 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ce5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f7 fbb2 	bl	80045c8 <lwip_htons>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce72:	2b06      	cmp	r3, #6
 800ce74:	d006      	beq.n	800ce84 <etharp_raw+0x84>
 800ce76:	4b23      	ldr	r3, [pc, #140]	; (800cf04 <etharp_raw+0x104>)
 800ce78:	f240 4269 	movw	r2, #1129	; 0x469
 800ce7c:	4925      	ldr	r1, [pc, #148]	; (800cf14 <etharp_raw+0x114>)
 800ce7e:	4823      	ldr	r0, [pc, #140]	; (800cf0c <etharp_raw+0x10c>)
 800ce80:	f001 fc52 	bl	800e728 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	3308      	adds	r3, #8
 800ce88:	2206      	movs	r2, #6
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f001 fc1b 	bl	800e6c8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	3312      	adds	r3, #18
 800ce96:	2206      	movs	r2, #6
 800ce98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f001 fc14 	bl	800e6c8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	330e      	adds	r3, #14
 800cea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cea6:	6812      	ldr	r2, [r2, #0]
 800cea8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	3318      	adds	r3, #24
 800ceae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb0:	6812      	ldr	r2, [r2, #0]
 800ceb2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	701a      	strb	r2, [r3, #0]
 800ceba:	2200      	movs	r2, #0
 800cebc:	f042 0201 	orr.w	r2, r2, #1
 800cec0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f042 0208 	orr.w	r2, r2, #8
 800ceca:	709a      	strb	r2, [r3, #2]
 800cecc:	2200      	movs	r2, #0
 800cece:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2206      	movs	r2, #6
 800ced4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2204      	movs	r2, #4
 800ceda:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cedc:	f640 0306 	movw	r3, #2054	; 0x806
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	69b9      	ldr	r1, [r7, #24]
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f001 fb73 	bl	800e5d4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ceee:	69b8      	ldr	r0, [r7, #24]
 800cef0:	f7f8 fe1e 	bl	8005b30 <pbuf_free>
  p = NULL;
 800cef4:	2300      	movs	r3, #0
 800cef6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cef8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3720      	adds	r7, #32
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	08011e2c 	.word	0x08011e2c
 800cf08:	08011f7c 	.word	0x08011f7c
 800cf0c:	08011ea4 	.word	0x08011ea4
 800cf10:	0801202c 	.word	0x0801202c
 800cf14:	08012060 	.word	0x08012060

0800cf18 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b088      	sub	sp, #32
 800cf1c:	af04      	add	r7, sp, #16
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	60b9      	str	r1, [r7, #8]
 800cf22:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cf34:	2201      	movs	r2, #1
 800cf36:	9203      	str	r2, [sp, #12]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	9202      	str	r2, [sp, #8]
 800cf3c:	4a06      	ldr	r2, [pc, #24]	; (800cf58 <etharp_request_dst+0x40>)
 800cf3e:	9201      	str	r2, [sp, #4]
 800cf40:	9300      	str	r3, [sp, #0]
 800cf42:	4603      	mov	r3, r0
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f7ff ff5a 	bl	800ce00 <etharp_raw>
 800cf4c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	080125dc 	.word	0x080125dc

0800cf5c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cf66:	4a05      	ldr	r2, [pc, #20]	; (800cf7c <etharp_request+0x20>)
 800cf68:	6839      	ldr	r1, [r7, #0]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff ffd4 	bl	800cf18 <etharp_request_dst>
 800cf70:	4603      	mov	r3, r0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	080125d4 	.word	0x080125d4

0800cf80 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08e      	sub	sp, #56	; 0x38
 800cf84:	af04      	add	r7, sp, #16
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cf8a:	4b78      	ldr	r3, [pc, #480]	; (800d16c <icmp_input+0x1ec>)
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	f003 030f 	and.w	r3, r3, #15
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800cfa0:	8bfb      	ldrh	r3, [r7, #30]
 800cfa2:	2b13      	cmp	r3, #19
 800cfa4:	f240 80cf 	bls.w	800d146 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	895b      	ldrh	r3, [r3, #10]
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	f240 80cc 	bls.w	800d14a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cfba:	7f7b      	ldrb	r3, [r7, #29]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	f000 80bb 	beq.w	800d138 <icmp_input+0x1b8>
 800cfc2:	2b08      	cmp	r3, #8
 800cfc4:	f040 80bb 	bne.w	800d13e <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cfc8:	4b69      	ldr	r3, [pc, #420]	; (800d170 <icmp_input+0x1f0>)
 800cfca:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cfcc:	4b67      	ldr	r3, [pc, #412]	; (800d16c <icmp_input+0x1ec>)
 800cfce:	695b      	ldr	r3, [r3, #20]
 800cfd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfd4:	2be0      	cmp	r3, #224	; 0xe0
 800cfd6:	d102      	bne.n	800cfde <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	3304      	adds	r3, #4
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cfde:	4b63      	ldr	r3, [pc, #396]	; (800d16c <icmp_input+0x1ec>)
 800cfe0:	695b      	ldr	r3, [r3, #20]
 800cfe2:	4a62      	ldr	r2, [pc, #392]	; (800d16c <icmp_input+0x1ec>)
 800cfe4:	6812      	ldr	r2, [r2, #0]
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 fbeb 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	3304      	adds	r3, #4
 800cff8:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	891b      	ldrh	r3, [r3, #8]
 800cffe:	2b07      	cmp	r3, #7
 800d000:	f240 80a5 	bls.w	800d14e <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d004:	8bfb      	ldrh	r3, [r7, #30]
 800d006:	330e      	adds	r3, #14
 800d008:	4619      	mov	r1, r3
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7f8 fcfa 	bl	8005a04 <pbuf_add_header>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d04b      	beq.n	800d0ae <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	891a      	ldrh	r2, [r3, #8]
 800d01a:	8bfb      	ldrh	r3, [r7, #30]
 800d01c:	4413      	add	r3, r2
 800d01e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	891b      	ldrh	r3, [r3, #8]
 800d024:	8b7a      	ldrh	r2, [r7, #26]
 800d026:	429a      	cmp	r2, r3
 800d028:	f0c0 8096 	bcc.w	800d158 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d02c:	8b7b      	ldrh	r3, [r7, #26]
 800d02e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d032:	4619      	mov	r1, r3
 800d034:	200e      	movs	r0, #14
 800d036:	f7f8 fa97 	bl	8005568 <pbuf_alloc>
 800d03a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f000 808c 	beq.w	800d15c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	895b      	ldrh	r3, [r3, #10]
 800d048:	461a      	mov	r2, r3
 800d04a:	8bfb      	ldrh	r3, [r7, #30]
 800d04c:	3308      	adds	r3, #8
 800d04e:	429a      	cmp	r2, r3
 800d050:	d203      	bcs.n	800d05a <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d052:	6978      	ldr	r0, [r7, #20]
 800d054:	f7f8 fd6c 	bl	8005b30 <pbuf_free>
          goto icmperr;
 800d058:	e081      	b.n	800d15e <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	8bfa      	ldrh	r2, [r7, #30]
 800d060:	6a39      	ldr	r1, [r7, #32]
 800d062:	4618      	mov	r0, r3
 800d064:	f001 fb30 	bl	800e6c8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d068:	8bfb      	ldrh	r3, [r7, #30]
 800d06a:	4619      	mov	r1, r3
 800d06c:	6978      	ldr	r0, [r7, #20]
 800d06e:	f7f8 fcd9 	bl	8005a24 <pbuf_remove_header>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d009      	beq.n	800d08c <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d078:	4b3e      	ldr	r3, [pc, #248]	; (800d174 <icmp_input+0x1f4>)
 800d07a:	22b6      	movs	r2, #182	; 0xb6
 800d07c:	493e      	ldr	r1, [pc, #248]	; (800d178 <icmp_input+0x1f8>)
 800d07e:	483f      	ldr	r0, [pc, #252]	; (800d17c <icmp_input+0x1fc>)
 800d080:	f001 fb52 	bl	800e728 <iprintf>
          pbuf_free(r);
 800d084:	6978      	ldr	r0, [r7, #20]
 800d086:	f7f8 fd53 	bl	8005b30 <pbuf_free>
          goto icmperr;
 800d08a:	e068      	b.n	800d15e <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	6978      	ldr	r0, [r7, #20]
 800d090:	f7f8 fe76 	bl	8005d80 <pbuf_copy>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d003      	beq.n	800d0a2 <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d09a:	6978      	ldr	r0, [r7, #20]
 800d09c:	f7f8 fd48 	bl	8005b30 <pbuf_free>
          goto icmperr;
 800d0a0:	e05d      	b.n	800d15e <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7f8 fd44 	bl	8005b30 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	607b      	str	r3, [r7, #4]
 800d0ac:	e00f      	b.n	800d0ce <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d0ae:	8bfb      	ldrh	r3, [r7, #30]
 800d0b0:	330e      	adds	r3, #14
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f7f8 fcb5 	bl	8005a24 <pbuf_remove_header>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d006      	beq.n	800d0ce <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d0c0:	4b2c      	ldr	r3, [pc, #176]	; (800d174 <icmp_input+0x1f4>)
 800d0c2:	22c7      	movs	r2, #199	; 0xc7
 800d0c4:	492e      	ldr	r1, [pc, #184]	; (800d180 <icmp_input+0x200>)
 800d0c6:	482d      	ldr	r0, [pc, #180]	; (800d17c <icmp_input+0x1fc>)
 800d0c8:	f001 fb2e 	bl	800e728 <iprintf>
          goto icmperr;
 800d0cc:	e047      	b.n	800d15e <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d0d4:	8bfb      	ldrh	r3, [r7, #30]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7f8 fc93 	bl	8005a04 <pbuf_add_header>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d12b      	bne.n	800d13c <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d0f2:	4b1e      	ldr	r3, [pc, #120]	; (800d16c <icmp_input+0x1ec>)
 800d0f4:	691a      	ldr	r2, [r3, #16]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	2200      	movs	r2, #0
 800d104:	709a      	strb	r2, [r3, #2]
 800d106:	2200      	movs	r2, #0
 800d108:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	22ff      	movs	r2, #255	; 0xff
 800d10e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	729a      	strb	r2, [r3, #10]
 800d116:	2200      	movs	r2, #0
 800d118:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	9302      	str	r3, [sp, #8]
 800d11e:	2301      	movs	r3, #1
 800d120:	9301      	str	r3, [sp, #4]
 800d122:	2300      	movs	r3, #0
 800d124:	9300      	str	r3, [sp, #0]
 800d126:	23ff      	movs	r3, #255	; 0xff
 800d128:	2200      	movs	r2, #0
 800d12a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fa71 	bl	800d614 <ip4_output_if>
 800d132:	4603      	mov	r3, r0
 800d134:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d136:	e001      	b.n	800d13c <icmp_input+0x1bc>
      break;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <icmp_input+0x1be>
      break;
 800d13c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7f8 fcf6 	bl	8005b30 <pbuf_free>
  return;
 800d144:	e00f      	b.n	800d166 <icmp_input+0x1e6>
    goto lenerr;
 800d146:	bf00      	nop
 800d148:	e002      	b.n	800d150 <icmp_input+0x1d0>
    goto lenerr;
 800d14a:	bf00      	nop
 800d14c:	e000      	b.n	800d150 <icmp_input+0x1d0>
        goto lenerr;
 800d14e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7f8 fced 	bl	8005b30 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d156:	e006      	b.n	800d166 <icmp_input+0x1e6>
          goto icmperr;
 800d158:	bf00      	nop
 800d15a:	e000      	b.n	800d15e <icmp_input+0x1de>
          goto icmperr;
 800d15c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f7f8 fce6 	bl	8005b30 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d164:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d166:	3728      	adds	r7, #40	; 0x28
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	200034b0 	.word	0x200034b0
 800d170:	200034c4 	.word	0x200034c4
 800d174:	080120a4 	.word	0x080120a4
 800d178:	080120dc 	.word	0x080120dc
 800d17c:	08012114 	.word	0x08012114
 800d180:	0801213c 	.word	0x0801213c

0800d184 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d190:	78fb      	ldrb	r3, [r7, #3]
 800d192:	461a      	mov	r2, r3
 800d194:	2103      	movs	r1, #3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 f814 	bl	800d1c4 <icmp_send_response>
}
 800d19c:	bf00      	nop
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	210b      	movs	r1, #11
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f804 	bl	800d1c4 <icmp_send_response>
}
 800d1bc:	bf00      	nop
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b08c      	sub	sp, #48	; 0x30
 800d1c8:	af04      	add	r7, sp, #16
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d1d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1d8:	2124      	movs	r1, #36	; 0x24
 800d1da:	2022      	movs	r0, #34	; 0x22
 800d1dc:	f7f8 f9c4 	bl	8005568 <pbuf_alloc>
 800d1e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d1e2:	69fb      	ldr	r3, [r7, #28]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d04c      	beq.n	800d282 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	895b      	ldrh	r3, [r3, #10]
 800d1ec:	2b23      	cmp	r3, #35	; 0x23
 800d1ee:	d806      	bhi.n	800d1fe <icmp_send_response+0x3a>
 800d1f0:	4b26      	ldr	r3, [pc, #152]	; (800d28c <icmp_send_response+0xc8>)
 800d1f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d1f6:	4926      	ldr	r1, [pc, #152]	; (800d290 <icmp_send_response+0xcc>)
 800d1f8:	4826      	ldr	r0, [pc, #152]	; (800d294 <icmp_send_response+0xd0>)
 800d1fa:	f001 fa95 	bl	800e728 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	78fa      	ldrb	r2, [r7, #3]
 800d20e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	78ba      	ldrb	r2, [r7, #2]
 800d214:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	2200      	movs	r2, #0
 800d21a:	711a      	strb	r2, [r3, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2200      	movs	r2, #0
 800d224:	719a      	strb	r2, [r3, #6]
 800d226:	2200      	movs	r2, #0
 800d228:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	f103 0008 	add.w	r0, r3, #8
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	221c      	movs	r2, #28
 800d238:	4619      	mov	r1, r3
 800d23a:	f001 fa45 	bl	800e6c8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d244:	f107 030c 	add.w	r3, r7, #12
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f825 	bl	800d298 <ip4_route>
 800d24e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d011      	beq.n	800d27a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	2200      	movs	r2, #0
 800d25a:	709a      	strb	r2, [r3, #2]
 800d25c:	2200      	movs	r2, #0
 800d25e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d260:	f107 020c 	add.w	r2, r7, #12
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	9302      	str	r3, [sp, #8]
 800d268:	2301      	movs	r3, #1
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	2300      	movs	r3, #0
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	23ff      	movs	r3, #255	; 0xff
 800d272:	2100      	movs	r1, #0
 800d274:	69f8      	ldr	r0, [r7, #28]
 800d276:	f000 f9cd 	bl	800d614 <ip4_output_if>
  }
  pbuf_free(q);
 800d27a:	69f8      	ldr	r0, [r7, #28]
 800d27c:	f7f8 fc58 	bl	8005b30 <pbuf_free>
 800d280:	e000      	b.n	800d284 <icmp_send_response+0xc0>
    return;
 800d282:	bf00      	nop
}
 800d284:	3720      	adds	r7, #32
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	080120a4 	.word	0x080120a4
 800d290:	08012170 	.word	0x08012170
 800d294:	08012114 	.word	0x08012114

0800d298 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d298:	b480      	push	{r7}
 800d29a:	b085      	sub	sp, #20
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d2a0:	4b33      	ldr	r3, [pc, #204]	; (800d370 <ip4_route+0xd8>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	60fb      	str	r3, [r7, #12]
 800d2a6:	e036      	b.n	800d316 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2ae:	f003 0301 	and.w	r3, r3, #1
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d02b      	beq.n	800d310 <ip4_route+0x78>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2be:	089b      	lsrs	r3, r3, #2
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d022      	beq.n	800d310 <ip4_route+0x78>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d01d      	beq.n	800d310 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	405a      	eors	r2, r3
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3308      	adds	r3, #8
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d101      	bne.n	800d2f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	e038      	b.n	800d362 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2f6:	f003 0302 	and.w	r3, r3, #2
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d108      	bne.n	800d310 <ip4_route+0x78>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	330c      	adds	r3, #12
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d101      	bne.n	800d310 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	e028      	b.n	800d362 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1c5      	bne.n	800d2a8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d31c:	4b15      	ldr	r3, [pc, #84]	; (800d374 <ip4_route+0xdc>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01a      	beq.n	800d35a <ip4_route+0xc2>
 800d324:	4b13      	ldr	r3, [pc, #76]	; (800d374 <ip4_route+0xdc>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d32c:	f003 0301 	and.w	r3, r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	d012      	beq.n	800d35a <ip4_route+0xc2>
 800d334:	4b0f      	ldr	r3, [pc, #60]	; (800d374 <ip4_route+0xdc>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d33c:	f003 0304 	and.w	r3, r3, #4
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00a      	beq.n	800d35a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d344:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <ip4_route+0xdc>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3304      	adds	r3, #4
 800d34a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d004      	beq.n	800d35a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b7f      	cmp	r3, #127	; 0x7f
 800d358:	d101      	bne.n	800d35e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e001      	b.n	800d362 <ip4_route+0xca>
  }

  return netif_default;
 800d35e:	4b05      	ldr	r3, [pc, #20]	; (800d374 <ip4_route+0xdc>)
 800d360:	681b      	ldr	r3, [r3, #0]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3714      	adds	r7, #20
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
 800d36e:	bf00      	nop
 800d370:	20008ba4 	.word	0x20008ba4
 800d374:	20008ba8 	.word	0x20008ba8

0800d378 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d016      	beq.n	800d3be <ip4_input_accept+0x46>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3304      	adds	r3, #4
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d011      	beq.n	800d3be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d39a:	4b0b      	ldr	r3, [pc, #44]	; (800d3c8 <ip4_input_accept+0x50>)
 800d39c:	695a      	ldr	r2, [r3, #20]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d008      	beq.n	800d3ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d3a8:	4b07      	ldr	r3, [pc, #28]	; (800d3c8 <ip4_input_accept+0x50>)
 800d3aa:	695b      	ldr	r3, [r3, #20]
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 fa08 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800d3b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e000      	b.n	800d3c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	200034b0 	.word	0x200034b0

0800d3cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	091b      	lsrs	r3, r3, #4
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	2b04      	cmp	r3, #4
 800d3e6:	d004      	beq.n	800d3f2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7f8 fba1 	bl	8005b30 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e107      	b.n	800d602 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	f003 030f 	and.w	r3, r3, #15
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	885b      	ldrh	r3, [r3, #2]
 800d406:	b29b      	uxth	r3, r3
 800d408:	4618      	mov	r0, r3
 800d40a:	f7f7 f8dd 	bl	80045c8 <lwip_htons>
 800d40e:	4603      	mov	r3, r0
 800d410:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	891b      	ldrh	r3, [r3, #8]
 800d416:	89ba      	ldrh	r2, [r7, #12]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d204      	bcs.n	800d426 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d41c:	89bb      	ldrh	r3, [r7, #12]
 800d41e:	4619      	mov	r1, r3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f7f8 f9ff 	bl	8005824 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	895b      	ldrh	r3, [r3, #10]
 800d42a:	89fa      	ldrh	r2, [r7, #14]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d807      	bhi.n	800d440 <ip4_input+0x74>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	891b      	ldrh	r3, [r3, #8]
 800d434:	89ba      	ldrh	r2, [r7, #12]
 800d436:	429a      	cmp	r2, r3
 800d438:	d802      	bhi.n	800d440 <ip4_input+0x74>
 800d43a:	89fb      	ldrh	r3, [r7, #14]
 800d43c:	2b13      	cmp	r3, #19
 800d43e:	d804      	bhi.n	800d44a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7f8 fb75 	bl	8005b30 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	e0db      	b.n	800d602 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	4a6f      	ldr	r2, [pc, #444]	; (800d60c <ip4_input+0x240>)
 800d450:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	4a6d      	ldr	r2, [pc, #436]	; (800d60c <ip4_input+0x240>)
 800d458:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d45a:	4b6c      	ldr	r3, [pc, #432]	; (800d60c <ip4_input+0x240>)
 800d45c:	695b      	ldr	r3, [r3, #20]
 800d45e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d462:	2be0      	cmp	r3, #224	; 0xe0
 800d464:	d112      	bne.n	800d48c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	b2db      	uxtb	r3, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d007      	beq.n	800d486 <ip4_input+0xba>
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	3304      	adds	r3, #4
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d002      	beq.n	800d486 <ip4_input+0xba>
      netif = inp;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	613b      	str	r3, [r7, #16]
 800d484:	e02a      	b.n	800d4dc <ip4_input+0x110>
    } else {
      netif = NULL;
 800d486:	2300      	movs	r3, #0
 800d488:	613b      	str	r3, [r7, #16]
 800d48a:	e027      	b.n	800d4dc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d48c:	6838      	ldr	r0, [r7, #0]
 800d48e:	f7ff ff73 	bl	800d378 <ip4_input_accept>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <ip4_input+0xd2>
      netif = inp;
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	613b      	str	r3, [r7, #16]
 800d49c:	e01e      	b.n	800d4dc <ip4_input+0x110>
    } else {
      netif = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d4a2:	4b5a      	ldr	r3, [pc, #360]	; (800d60c <ip4_input+0x240>)
 800d4a4:	695b      	ldr	r3, [r3, #20]
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d4aa:	d017      	beq.n	800d4dc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d4ac:	4b58      	ldr	r3, [pc, #352]	; (800d610 <ip4_input+0x244>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	613b      	str	r3, [r7, #16]
 800d4b2:	e00e      	b.n	800d4d2 <ip4_input+0x106>
          if (netif == inp) {
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d006      	beq.n	800d4ca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d4bc:	6938      	ldr	r0, [r7, #16]
 800d4be:	f7ff ff5b 	bl	800d378 <ip4_input_accept>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d108      	bne.n	800d4da <ip4_input+0x10e>
 800d4c8:	e000      	b.n	800d4cc <ip4_input+0x100>
            continue;
 800d4ca:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	613b      	str	r3, [r7, #16]
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1ed      	bne.n	800d4b4 <ip4_input+0xe8>
 800d4d8:	e000      	b.n	800d4dc <ip4_input+0x110>
            break;
 800d4da:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d4dc:	4b4b      	ldr	r3, [pc, #300]	; (800d60c <ip4_input+0x240>)
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	6839      	ldr	r1, [r7, #0]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 f96e 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d105      	bne.n	800d4fa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d4ee:	4b47      	ldr	r3, [pc, #284]	; (800d60c <ip4_input+0x240>)
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d4f6:	2be0      	cmp	r3, #224	; 0xe0
 800d4f8:	d104      	bne.n	800d504 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7f8 fb18 	bl	8005b30 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d500:	2300      	movs	r3, #0
 800d502:	e07e      	b.n	800d602 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d104      	bne.n	800d514 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7f8 fb10 	bl	8005b30 <pbuf_free>
    return ERR_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	e076      	b.n	800d602 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	88db      	ldrh	r3, [r3, #6]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	461a      	mov	r2, r3
 800d51c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d520:	4013      	ands	r3, r2
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00b      	beq.n	800d53e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fc92 	bl	800de50 <ip4_reass>
 800d52c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <ip4_input+0x16c>
      return ERR_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	e064      	b.n	800d602 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d53e:	4a33      	ldr	r2, [pc, #204]	; (800d60c <ip4_input+0x240>)
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d544:	4a31      	ldr	r2, [pc, #196]	; (800d60c <ip4_input+0x240>)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d54a:	4a30      	ldr	r2, [pc, #192]	; (800d60c <ip4_input+0x240>)
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	f003 030f 	and.w	r3, r3, #15
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	b29a      	uxth	r2, r3
 800d560:	4b2a      	ldr	r3, [pc, #168]	; (800d60c <ip4_input+0x240>)
 800d562:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d564:	89fb      	ldrh	r3, [r7, #14]
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f8 fa5b 	bl	8005a24 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	7a5b      	ldrb	r3, [r3, #9]
 800d572:	2b11      	cmp	r3, #17
 800d574:	d006      	beq.n	800d584 <ip4_input+0x1b8>
 800d576:	2b11      	cmp	r3, #17
 800d578:	dc13      	bgt.n	800d5a2 <ip4_input+0x1d6>
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d00c      	beq.n	800d598 <ip4_input+0x1cc>
 800d57e:	2b06      	cmp	r3, #6
 800d580:	d005      	beq.n	800d58e <ip4_input+0x1c2>
 800d582:	e00e      	b.n	800d5a2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d584:	6839      	ldr	r1, [r7, #0]
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7fe f952 	bl	800b830 <udp_input>
        break;
 800d58c:	e026      	b.n	800d5dc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d58e:	6839      	ldr	r1, [r7, #0]
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7fa f997 	bl	80078c4 <tcp_input>
        break;
 800d596:	e021      	b.n	800d5dc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff fcf0 	bl	800cf80 <icmp_input>
        break;
 800d5a0:	e01c      	b.n	800d5dc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d5a2:	4b1a      	ldr	r3, [pc, #104]	; (800d60c <ip4_input+0x240>)
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	6939      	ldr	r1, [r7, #16]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 f90b 	bl	800d7c4 <ip4_addr_isbroadcast_u32>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10f      	bne.n	800d5d4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d5b4:	4b15      	ldr	r3, [pc, #84]	; (800d60c <ip4_input+0x240>)
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d5bc:	2be0      	cmp	r3, #224	; 0xe0
 800d5be:	d009      	beq.n	800d5d4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d5c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f7f8 fa9f 	bl	8005b0a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d5cc:	2102      	movs	r1, #2
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f7ff fdd8 	bl	800d184 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7f8 faab 	bl	8005b30 <pbuf_free>
        break;
 800d5da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d5dc:	4b0b      	ldr	r3, [pc, #44]	; (800d60c <ip4_input+0x240>)
 800d5de:	2200      	movs	r2, #0
 800d5e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d5e2:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <ip4_input+0x240>)
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d5e8:	4b08      	ldr	r3, [pc, #32]	; (800d60c <ip4_input+0x240>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d5ee:	4b07      	ldr	r3, [pc, #28]	; (800d60c <ip4_input+0x240>)
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d5f4:	4b05      	ldr	r3, [pc, #20]	; (800d60c <ip4_input+0x240>)
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d5fa:	4b04      	ldr	r3, [pc, #16]	; (800d60c <ip4_input+0x240>)
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3718      	adds	r7, #24
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	200034b0 	.word	0x200034b0
 800d610:	20008ba4 	.word	0x20008ba4

0800d614 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b08a      	sub	sp, #40	; 0x28
 800d618:	af04      	add	r7, sp, #16
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d009      	beq.n	800d640 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d003      	beq.n	800d63a <ip4_output_if+0x26>
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d102      	bne.n	800d640 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63c:	3304      	adds	r3, #4
 800d63e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d640:	78fa      	ldrb	r2, [r7, #3]
 800d642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d644:	9302      	str	r3, [sp, #8]
 800d646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d64a:	9301      	str	r3, [sp, #4]
 800d64c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	4613      	mov	r3, r2
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	6979      	ldr	r1, [r7, #20]
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 f805 	bl	800d668 <ip4_output_if_src>
 800d65e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d660:	4618      	mov	r0, r3
 800d662:	3718      	adds	r7, #24
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b088      	sub	sp, #32
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	607a      	str	r2, [r7, #4]
 800d674:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	7b9b      	ldrb	r3, [r3, #14]
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d006      	beq.n	800d68c <ip4_output_if_src+0x24>
 800d67e:	4b4b      	ldr	r3, [pc, #300]	; (800d7ac <ip4_output_if_src+0x144>)
 800d680:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d684:	494a      	ldr	r1, [pc, #296]	; (800d7b0 <ip4_output_if_src+0x148>)
 800d686:	484b      	ldr	r0, [pc, #300]	; (800d7b4 <ip4_output_if_src+0x14c>)
 800d688:	f001 f84e 	bl	800e728 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d060      	beq.n	800d754 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d692:	2314      	movs	r3, #20
 800d694:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d696:	2114      	movs	r1, #20
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f7f8 f9b3 	bl	8005a04 <pbuf_add_header>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d002      	beq.n	800d6aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d6a4:	f06f 0301 	mvn.w	r3, #1
 800d6a8:	e07c      	b.n	800d7a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	895b      	ldrh	r3, [r3, #10]
 800d6b4:	2b13      	cmp	r3, #19
 800d6b6:	d806      	bhi.n	800d6c6 <ip4_output_if_src+0x5e>
 800d6b8:	4b3c      	ldr	r3, [pc, #240]	; (800d7ac <ip4_output_if_src+0x144>)
 800d6ba:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d6be:	493e      	ldr	r1, [pc, #248]	; (800d7b8 <ip4_output_if_src+0x150>)
 800d6c0:	483c      	ldr	r0, [pc, #240]	; (800d7b4 <ip4_output_if_src+0x14c>)
 800d6c2:	f001 f831 	bl	800e728 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	78fa      	ldrb	r2, [r7, #3]
 800d6ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d6d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d6dc:	8b7b      	ldrh	r3, [r7, #26]
 800d6de:	089b      	lsrs	r3, r3, #2
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d6f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	891b      	ldrh	r3, [r3, #8]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7f6 ff64 	bl	80045c8 <lwip_htons>
 800d700:	4603      	mov	r3, r0
 800d702:	461a      	mov	r2, r3
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	2200      	movs	r2, #0
 800d70c:	719a      	strb	r2, [r3, #6]
 800d70e:	2200      	movs	r2, #0
 800d710:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d712:	4b2a      	ldr	r3, [pc, #168]	; (800d7bc <ip4_output_if_src+0x154>)
 800d714:	881b      	ldrh	r3, [r3, #0]
 800d716:	4618      	mov	r0, r3
 800d718:	f7f6 ff56 	bl	80045c8 <lwip_htons>
 800d71c:	4603      	mov	r3, r0
 800d71e:	461a      	mov	r2, r3
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d724:	4b25      	ldr	r3, [pc, #148]	; (800d7bc <ip4_output_if_src+0x154>)
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	3301      	adds	r3, #1
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	4b23      	ldr	r3, [pc, #140]	; (800d7bc <ip4_output_if_src+0x154>)
 800d72e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d104      	bne.n	800d740 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d736:	4b22      	ldr	r3, [pc, #136]	; (800d7c0 <ip4_output_if_src+0x158>)
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	60da      	str	r2, [r3, #12]
 800d73e:	e003      	b.n	800d748 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	2200      	movs	r2, #0
 800d74c:	729a      	strb	r2, [r3, #10]
 800d74e:	2200      	movs	r2, #0
 800d750:	72da      	strb	r2, [r3, #11]
 800d752:	e00f      	b.n	800d774 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	895b      	ldrh	r3, [r3, #10]
 800d758:	2b13      	cmp	r3, #19
 800d75a:	d802      	bhi.n	800d762 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d75c:	f06f 0301 	mvn.w	r3, #1
 800d760:	e020      	b.n	800d7a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d76e:	f107 0314 	add.w	r3, r7, #20
 800d772:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00c      	beq.n	800d796 <ip4_output_if_src+0x12e>
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	891a      	ldrh	r2, [r3, #8]
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d784:	429a      	cmp	r2, r3
 800d786:	d906      	bls.n	800d796 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f000 fd4d 	bl	800e22c <ip4_frag>
 800d792:	4603      	mov	r3, r0
 800d794:	e006      	b.n	800d7a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	68f9      	ldr	r1, [r7, #12]
 800d79e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7a0:	4798      	blx	r3
 800d7a2:	4603      	mov	r3, r0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3720      	adds	r7, #32
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	0801219c 	.word	0x0801219c
 800d7b0:	080121d0 	.word	0x080121d0
 800d7b4:	080121dc 	.word	0x080121dc
 800d7b8:	08012204 	.word	0x08012204
 800d7bc:	2000026a 	.word	0x2000026a
 800d7c0:	080125d0 	.word	0x080125d0

0800d7c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d8:	d002      	beq.n	800d7e0 <ip4_addr_isbroadcast_u32+0x1c>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e02a      	b.n	800d83a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d7ea:	f003 0302 	and.w	r3, r3, #2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d101      	bne.n	800d7f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e021      	b.n	800d83a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d101      	bne.n	800d806 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d802:	2300      	movs	r3, #0
 800d804:	e019      	b.n	800d83a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	3304      	adds	r3, #4
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	405a      	eors	r2, r3
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	3308      	adds	r3, #8
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4013      	ands	r3, r2
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d10d      	bne.n	800d838 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	3308      	adds	r3, #8
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	43da      	mvns	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	3308      	adds	r3, #8
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d830:	429a      	cmp	r2, r3
 800d832:	d101      	bne.n	800d838 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d834:	2301      	movs	r3, #1
 800d836:	e000      	b.n	800d83a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d838:	2300      	movs	r3, #0
  }
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3714      	adds	r7, #20
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr
	...

0800d848 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d84e:	2300      	movs	r3, #0
 800d850:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d852:	4b12      	ldr	r3, [pc, #72]	; (800d89c <ip_reass_tmr+0x54>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d858:	e018      	b.n	800d88c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	7fdb      	ldrb	r3, [r3, #31]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00b      	beq.n	800d87a <ip_reass_tmr+0x32>
      r->timer--;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	7fdb      	ldrb	r3, [r3, #31]
 800d866:	3b01      	subs	r3, #1
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	60fb      	str	r3, [r7, #12]
 800d878:	e008      	b.n	800d88c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d884:	68b9      	ldr	r1, [r7, #8]
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f80a 	bl	800d8a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e3      	bne.n	800d85a <ip_reass_tmr+0x12>
    }
  }
}
 800d892:	bf00      	nop
 800d894:	bf00      	nop
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	2000026c 	.word	0x2000026c

0800d8a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b088      	sub	sp, #32
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d105      	bne.n	800d8c2 <ip_reass_free_complete_datagram+0x22>
 800d8b6:	4b45      	ldr	r3, [pc, #276]	; (800d9cc <ip_reass_free_complete_datagram+0x12c>)
 800d8b8:	22ab      	movs	r2, #171	; 0xab
 800d8ba:	4945      	ldr	r1, [pc, #276]	; (800d9d0 <ip_reass_free_complete_datagram+0x130>)
 800d8bc:	4845      	ldr	r0, [pc, #276]	; (800d9d4 <ip_reass_free_complete_datagram+0x134>)
 800d8be:	f000 ff33 	bl	800e728 <iprintf>
  if (prev != NULL) {
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00a      	beq.n	800d8de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d005      	beq.n	800d8de <ip_reass_free_complete_datagram+0x3e>
 800d8d2:	4b3e      	ldr	r3, [pc, #248]	; (800d9cc <ip_reass_free_complete_datagram+0x12c>)
 800d8d4:	22ad      	movs	r2, #173	; 0xad
 800d8d6:	4940      	ldr	r1, [pc, #256]	; (800d9d8 <ip_reass_free_complete_datagram+0x138>)
 800d8d8:	483e      	ldr	r0, [pc, #248]	; (800d9d4 <ip_reass_free_complete_datagram+0x134>)
 800d8da:	f000 ff25 	bl	800e728 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	889b      	ldrh	r3, [r3, #4]
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d12a      	bne.n	800d946 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	685b      	ldr	r3, [r3, #4]
 800d8f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	6858      	ldr	r0, [r3, #4]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	3308      	adds	r3, #8
 800d906:	2214      	movs	r2, #20
 800d908:	4619      	mov	r1, r3
 800d90a:	f000 fedd 	bl	800e6c8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d90e:	2101      	movs	r1, #1
 800d910:	69b8      	ldr	r0, [r7, #24]
 800d912:	f7ff fc47 	bl	800d1a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d916:	69b8      	ldr	r0, [r7, #24]
 800d918:	f7f8 f992 	bl	8005c40 <pbuf_clen>
 800d91c:	4603      	mov	r3, r0
 800d91e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d920:	8bfa      	ldrh	r2, [r7, #30]
 800d922:	8a7b      	ldrh	r3, [r7, #18]
 800d924:	4413      	add	r3, r2
 800d926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d92a:	db05      	blt.n	800d938 <ip_reass_free_complete_datagram+0x98>
 800d92c:	4b27      	ldr	r3, [pc, #156]	; (800d9cc <ip_reass_free_complete_datagram+0x12c>)
 800d92e:	22bc      	movs	r2, #188	; 0xbc
 800d930:	492a      	ldr	r1, [pc, #168]	; (800d9dc <ip_reass_free_complete_datagram+0x13c>)
 800d932:	4828      	ldr	r0, [pc, #160]	; (800d9d4 <ip_reass_free_complete_datagram+0x134>)
 800d934:	f000 fef8 	bl	800e728 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d938:	8bfa      	ldrh	r2, [r7, #30]
 800d93a:	8a7b      	ldrh	r3, [r7, #18]
 800d93c:	4413      	add	r3, r2
 800d93e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d940:	69b8      	ldr	r0, [r7, #24]
 800d942:	f7f8 f8f5 	bl	8005b30 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d94c:	e01f      	b.n	800d98e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7f8 f96e 	bl	8005c40 <pbuf_clen>
 800d964:	4603      	mov	r3, r0
 800d966:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d968:	8bfa      	ldrh	r2, [r7, #30]
 800d96a:	8a7b      	ldrh	r3, [r7, #18]
 800d96c:	4413      	add	r3, r2
 800d96e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d972:	db05      	blt.n	800d980 <ip_reass_free_complete_datagram+0xe0>
 800d974:	4b15      	ldr	r3, [pc, #84]	; (800d9cc <ip_reass_free_complete_datagram+0x12c>)
 800d976:	22cc      	movs	r2, #204	; 0xcc
 800d978:	4918      	ldr	r1, [pc, #96]	; (800d9dc <ip_reass_free_complete_datagram+0x13c>)
 800d97a:	4816      	ldr	r0, [pc, #88]	; (800d9d4 <ip_reass_free_complete_datagram+0x134>)
 800d97c:	f000 fed4 	bl	800e728 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d980:	8bfa      	ldrh	r2, [r7, #30]
 800d982:	8a7b      	ldrh	r3, [r7, #18]
 800d984:	4413      	add	r3, r2
 800d986:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f7f8 f8d1 	bl	8005b30 <pbuf_free>
  while (p != NULL) {
 800d98e:	69bb      	ldr	r3, [r7, #24]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1dc      	bne.n	800d94e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d994:	6839      	ldr	r1, [r7, #0]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 f8c2 	bl	800db20 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d99c:	4b10      	ldr	r3, [pc, #64]	; (800d9e0 <ip_reass_free_complete_datagram+0x140>)
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	8bfa      	ldrh	r2, [r7, #30]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d905      	bls.n	800d9b2 <ip_reass_free_complete_datagram+0x112>
 800d9a6:	4b09      	ldr	r3, [pc, #36]	; (800d9cc <ip_reass_free_complete_datagram+0x12c>)
 800d9a8:	22d2      	movs	r2, #210	; 0xd2
 800d9aa:	490e      	ldr	r1, [pc, #56]	; (800d9e4 <ip_reass_free_complete_datagram+0x144>)
 800d9ac:	4809      	ldr	r0, [pc, #36]	; (800d9d4 <ip_reass_free_complete_datagram+0x134>)
 800d9ae:	f000 febb 	bl	800e728 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d9b2:	4b0b      	ldr	r3, [pc, #44]	; (800d9e0 <ip_reass_free_complete_datagram+0x140>)
 800d9b4:	881a      	ldrh	r2, [r3, #0]
 800d9b6:	8bfb      	ldrh	r3, [r7, #30]
 800d9b8:	1ad3      	subs	r3, r2, r3
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	4b08      	ldr	r3, [pc, #32]	; (800d9e0 <ip_reass_free_complete_datagram+0x140>)
 800d9be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d9c0:	8bfb      	ldrh	r3, [r7, #30]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3720      	adds	r7, #32
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	08012234 	.word	0x08012234
 800d9d0:	08012270 	.word	0x08012270
 800d9d4:	0801227c 	.word	0x0801227c
 800d9d8:	080122a4 	.word	0x080122a4
 800d9dc:	080122b8 	.word	0x080122b8
 800d9e0:	20000270 	.word	0x20000270
 800d9e4:	080122d8 	.word	0x080122d8

0800d9e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	; 0x28
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800da02:	2300      	movs	r3, #0
 800da04:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800da06:	4b28      	ldr	r3, [pc, #160]	; (800daa8 <ip_reass_remove_oldest_datagram+0xc0>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800da0c:	e030      	b.n	800da70 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800da0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da10:	695a      	ldr	r2, [r3, #20]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	429a      	cmp	r2, r3
 800da18:	d10c      	bne.n	800da34 <ip_reass_remove_oldest_datagram+0x4c>
 800da1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1c:	699a      	ldr	r2, [r3, #24]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	429a      	cmp	r2, r3
 800da24:	d106      	bne.n	800da34 <ip_reass_remove_oldest_datagram+0x4c>
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	899a      	ldrh	r2, [r3, #12]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	889b      	ldrh	r3, [r3, #4]
 800da2e:	b29b      	uxth	r3, r3
 800da30:	429a      	cmp	r2, r3
 800da32:	d014      	beq.n	800da5e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	3301      	adds	r3, #1
 800da38:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d104      	bne.n	800da4a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	61bb      	str	r3, [r7, #24]
 800da48:	e009      	b.n	800da5e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4c:	7fda      	ldrb	r2, [r3, #31]
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	7fdb      	ldrb	r3, [r3, #31]
 800da52:	429a      	cmp	r2, r3
 800da54:	d803      	bhi.n	800da5e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800da56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da58:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800da66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da68:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800da70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1cb      	bne.n	800da0e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d008      	beq.n	800da8e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800da7c:	69b9      	ldr	r1, [r7, #24]
 800da7e:	6a38      	ldr	r0, [r7, #32]
 800da80:	f7ff ff0e 	bl	800d8a0 <ip_reass_free_complete_datagram>
 800da84:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800da86:	697a      	ldr	r2, [r7, #20]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	4413      	add	r3, r2
 800da8c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	429a      	cmp	r2, r3
 800da94:	da02      	bge.n	800da9c <ip_reass_remove_oldest_datagram+0xb4>
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	dcac      	bgt.n	800d9f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800da9c:	697b      	ldr	r3, [r7, #20]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3728      	adds	r7, #40	; 0x28
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	2000026c 	.word	0x2000026c

0800daac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dab6:	2004      	movs	r0, #4
 800dab8:	f7f7 f9dc 	bl	8004e74 <memp_malloc>
 800dabc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d110      	bne.n	800dae6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dac4:	6839      	ldr	r1, [r7, #0]
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7ff ff8e 	bl	800d9e8 <ip_reass_remove_oldest_datagram>
 800dacc:	4602      	mov	r2, r0
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	4293      	cmp	r3, r2
 800dad2:	dc03      	bgt.n	800dadc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dad4:	2004      	movs	r0, #4
 800dad6:	f7f7 f9cd 	bl	8004e74 <memp_malloc>
 800dada:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d101      	bne.n	800dae6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dae2:	2300      	movs	r3, #0
 800dae4:	e016      	b.n	800db14 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dae6:	2220      	movs	r2, #32
 800dae8:	2100      	movs	r1, #0
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f000 fe14 	bl	800e718 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	220f      	movs	r2, #15
 800daf4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800daf6:	4b09      	ldr	r3, [pc, #36]	; (800db1c <ip_reass_enqueue_new_datagram+0x70>)
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dafe:	4a07      	ldr	r2, [pc, #28]	; (800db1c <ip_reass_enqueue_new_datagram+0x70>)
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3308      	adds	r3, #8
 800db08:	2214      	movs	r2, #20
 800db0a:	6879      	ldr	r1, [r7, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f000 fddb 	bl	800e6c8 <memcpy>
  return ipr;
 800db12:	68fb      	ldr	r3, [r7, #12]
}
 800db14:	4618      	mov	r0, r3
 800db16:	3710      	adds	r7, #16
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	2000026c 	.word	0x2000026c

0800db20 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800db2a:	4b10      	ldr	r3, [pc, #64]	; (800db6c <ip_reass_dequeue_datagram+0x4c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	429a      	cmp	r2, r3
 800db32:	d104      	bne.n	800db3e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a0c      	ldr	r2, [pc, #48]	; (800db6c <ip_reass_dequeue_datagram+0x4c>)
 800db3a:	6013      	str	r3, [r2, #0]
 800db3c:	e00d      	b.n	800db5a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d106      	bne.n	800db52 <ip_reass_dequeue_datagram+0x32>
 800db44:	4b0a      	ldr	r3, [pc, #40]	; (800db70 <ip_reass_dequeue_datagram+0x50>)
 800db46:	f240 1245 	movw	r2, #325	; 0x145
 800db4a:	490a      	ldr	r1, [pc, #40]	; (800db74 <ip_reass_dequeue_datagram+0x54>)
 800db4c:	480a      	ldr	r0, [pc, #40]	; (800db78 <ip_reass_dequeue_datagram+0x58>)
 800db4e:	f000 fdeb 	bl	800e728 <iprintf>
    prev->next = ipr->next;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	2004      	movs	r0, #4
 800db5e:	f7f7 f9d5 	bl	8004f0c <memp_free>
}
 800db62:	bf00      	nop
 800db64:	3708      	adds	r7, #8
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	2000026c 	.word	0x2000026c
 800db70:	08012234 	.word	0x08012234
 800db74:	080122fc 	.word	0x080122fc
 800db78:	0801227c 	.word	0x0801227c

0800db7c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b08c      	sub	sp, #48	; 0x30
 800db80:	af00      	add	r7, sp, #0
 800db82:	60f8      	str	r0, [r7, #12]
 800db84:	60b9      	str	r1, [r7, #8]
 800db86:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800db88:	2300      	movs	r3, #0
 800db8a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800db8c:	2301      	movs	r3, #1
 800db8e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	885b      	ldrh	r3, [r3, #2]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7f6 fd13 	bl	80045c8 <lwip_htons>
 800dba2:	4603      	mov	r3, r0
 800dba4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	f003 030f 	and.w	r3, r3, #15
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800dbb4:	7e7b      	ldrb	r3, [r7, #25]
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	8b7a      	ldrh	r2, [r7, #26]
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d202      	bcs.n	800dbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc2:	e135      	b.n	800de30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800dbc4:	7e7b      	ldrb	r3, [r7, #25]
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	8b7a      	ldrh	r2, [r7, #26]
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	88db      	ldrh	r3, [r3, #6]
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7f6 fcf7 	bl	80045c8 <lwip_htons>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	00db      	lsls	r3, r3, #3
 800dbe4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbee:	2200      	movs	r2, #0
 800dbf0:	701a      	strb	r2, [r3, #0]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	705a      	strb	r2, [r3, #1]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	709a      	strb	r2, [r3, #2]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc00:	8afa      	ldrh	r2, [r7, #22]
 800dc02:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800dc04:	8afa      	ldrh	r2, [r7, #22]
 800dc06:	8b7b      	ldrh	r3, [r7, #26]
 800dc08:	4413      	add	r3, r2
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800dc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc12:	88db      	ldrh	r3, [r3, #6]
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	8afa      	ldrh	r2, [r7, #22]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d902      	bls.n	800dc22 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc20:	e106      	b.n	800de30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	627b      	str	r3, [r7, #36]	; 0x24
 800dc28:	e068      	b.n	800dcfc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc32:	889b      	ldrh	r3, [r3, #4]
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	889b      	ldrh	r3, [r3, #4]
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d235      	bcs.n	800dcac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800dc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc44:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800dc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d020      	beq.n	800dc8e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800dc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4e:	889b      	ldrh	r3, [r3, #4]
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	88db      	ldrh	r3, [r3, #6]
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d307      	bcc.n	800dc6c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5e:	88db      	ldrh	r3, [r3, #6]
 800dc60:	b29a      	uxth	r2, r3
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	889b      	ldrh	r3, [r3, #4]
 800dc66:	b29b      	uxth	r3, r3
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d902      	bls.n	800dc72 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc70:	e0de      	b.n	800de30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	88db      	ldrh	r3, [r3, #6]
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc80:	889b      	ldrh	r3, [r3, #4]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d03d      	beq.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dc8c:	e03a      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800dc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc90:	88db      	ldrh	r3, [r3, #6]
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	889b      	ldrh	r3, [r3, #4]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d902      	bls.n	800dca4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dca2:	e0c5      	b.n	800de30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	68ba      	ldr	r2, [r7, #8]
 800dca8:	605a      	str	r2, [r3, #4]
      break;
 800dcaa:	e02b      	b.n	800dd04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800dcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcae:	889b      	ldrh	r3, [r3, #4]
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	889b      	ldrh	r3, [r3, #4]
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d102      	bne.n	800dcc2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dcbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc0:	e0b6      	b.n	800de30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800dcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc4:	889b      	ldrh	r3, [r3, #4]
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	88db      	ldrh	r3, [r3, #6]
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d202      	bcs.n	800dcd8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd6:	e0ab      	b.n	800de30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d009      	beq.n	800dcf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce0:	88db      	ldrh	r3, [r3, #6]
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	889b      	ldrh	r3, [r3, #4]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d001      	beq.n	800dcf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d193      	bne.n	800dc2a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dd02:	e000      	b.n	800dd06 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dd04:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d12d      	bne.n	800dd68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d01c      	beq.n	800dd4c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd14:	88db      	ldrh	r3, [r3, #6]
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	889b      	ldrh	r3, [r3, #4]
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d906      	bls.n	800dd30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800dd22:	4b45      	ldr	r3, [pc, #276]	; (800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dd24:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dd28:	4944      	ldr	r1, [pc, #272]	; (800de3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dd2a:	4845      	ldr	r0, [pc, #276]	; (800de40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dd2c:	f000 fcfc 	bl	800e728 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd32:	68ba      	ldr	r2, [r7, #8]
 800dd34:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd38:	88db      	ldrh	r3, [r3, #6]
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	889b      	ldrh	r3, [r3, #4]
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d010      	beq.n	800dd68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dd46:	2300      	movs	r3, #0
 800dd48:	623b      	str	r3, [r7, #32]
 800dd4a:	e00d      	b.n	800dd68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d006      	beq.n	800dd62 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dd54:	4b38      	ldr	r3, [pc, #224]	; (800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dd56:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dd5a:	493a      	ldr	r1, [pc, #232]	; (800de44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dd5c:	4838      	ldr	r0, [pc, #224]	; (800de40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dd5e:	f000 fce3 	bl	800e728 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	68ba      	ldr	r2, [r7, #8]
 800dd66:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d105      	bne.n	800dd7a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	7f9b      	ldrb	r3, [r3, #30]
 800dd72:	f003 0301 	and.w	r3, r3, #1
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d059      	beq.n	800de2e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dd7a:	6a3b      	ldr	r3, [r7, #32]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d04f      	beq.n	800de20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d006      	beq.n	800dd96 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	889b      	ldrh	r3, [r3, #4]
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	623b      	str	r3, [r7, #32]
 800dd9a:	e041      	b.n	800de20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dda6:	e012      	b.n	800ddce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	88db      	ldrh	r3, [r3, #6]
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb6:	889b      	ldrh	r3, [r3, #4]
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d002      	beq.n	800ddc4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	623b      	str	r3, [r7, #32]
            break;
 800ddc2:	e007      	b.n	800ddd4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ddc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ddce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1e9      	bne.n	800dda8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d022      	beq.n	800de20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d106      	bne.n	800ddf0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dde2:	4b15      	ldr	r3, [pc, #84]	; (800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dde4:	f240 12df 	movw	r2, #479	; 0x1df
 800dde8:	4917      	ldr	r1, [pc, #92]	; (800de48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ddea:	4815      	ldr	r0, [pc, #84]	; (800de40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ddec:	f000 fc9c 	bl	800e728 <iprintf>
          LWIP_ASSERT("sanity check",
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d106      	bne.n	800de0a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ddfc:	4b0e      	ldr	r3, [pc, #56]	; (800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ddfe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800de02:	4911      	ldr	r1, [pc, #68]	; (800de48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800de04:	480e      	ldr	r0, [pc, #56]	; (800de40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de06:	f000 fc8f 	bl	800e728 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d006      	beq.n	800de20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800de12:	4b09      	ldr	r3, [pc, #36]	; (800de38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800de14:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800de18:	490c      	ldr	r1, [pc, #48]	; (800de4c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800de1a:	4809      	ldr	r0, [pc, #36]	; (800de40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800de1c:	f000 fc84 	bl	800e728 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	2b00      	cmp	r3, #0
 800de24:	bf14      	ite	ne
 800de26:	2301      	movne	r3, #1
 800de28:	2300      	moveq	r3, #0
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	e000      	b.n	800de30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3730      	adds	r7, #48	; 0x30
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	08012234 	.word	0x08012234
 800de3c:	08012318 	.word	0x08012318
 800de40:	0801227c 	.word	0x0801227c
 800de44:	08012338 	.word	0x08012338
 800de48:	08012370 	.word	0x08012370
 800de4c:	08012380 	.word	0x08012380

0800de50 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b08e      	sub	sp, #56	; 0x38
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	f003 030f 	and.w	r3, r3, #15
 800de66:	b2db      	uxtb	r3, r3
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	2b14      	cmp	r3, #20
 800de6e:	f040 8167 	bne.w	800e140 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	88db      	ldrh	r3, [r3, #6]
 800de76:	b29b      	uxth	r3, r3
 800de78:	4618      	mov	r0, r3
 800de7a:	f7f6 fba5 	bl	80045c8 <lwip_htons>
 800de7e:	4603      	mov	r3, r0
 800de80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de84:	b29b      	uxth	r3, r3
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8c:	885b      	ldrh	r3, [r3, #2]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	4618      	mov	r0, r3
 800de92:	f7f6 fb99 	bl	80045c8 <lwip_htons>
 800de96:	4603      	mov	r3, r0
 800de98:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800de9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	f003 030f 	and.w	r3, r3, #15
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800deaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800deae:	b29b      	uxth	r3, r3
 800deb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800deb2:	429a      	cmp	r2, r3
 800deb4:	f0c0 8146 	bcc.w	800e144 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800deb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800debc:	b29b      	uxth	r3, r3
 800debe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7f7 febb 	bl	8005c40 <pbuf_clen>
 800deca:	4603      	mov	r3, r0
 800decc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dece:	4b9f      	ldr	r3, [pc, #636]	; (800e14c <ip4_reass+0x2fc>)
 800ded0:	881b      	ldrh	r3, [r3, #0]
 800ded2:	461a      	mov	r2, r3
 800ded4:	8c3b      	ldrh	r3, [r7, #32]
 800ded6:	4413      	add	r3, r2
 800ded8:	2b0a      	cmp	r3, #10
 800deda:	dd10      	ble.n	800defe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dedc:	8c3b      	ldrh	r3, [r7, #32]
 800dede:	4619      	mov	r1, r3
 800dee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dee2:	f7ff fd81 	bl	800d9e8 <ip_reass_remove_oldest_datagram>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 812d 	beq.w	800e148 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800deee:	4b97      	ldr	r3, [pc, #604]	; (800e14c <ip4_reass+0x2fc>)
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	8c3b      	ldrh	r3, [r7, #32]
 800def6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800def8:	2b0a      	cmp	r3, #10
 800defa:	f300 8125 	bgt.w	800e148 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800defe:	4b94      	ldr	r3, [pc, #592]	; (800e150 <ip4_reass+0x300>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	633b      	str	r3, [r7, #48]	; 0x30
 800df04:	e015      	b.n	800df32 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800df06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df08:	695a      	ldr	r2, [r3, #20]
 800df0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d10c      	bne.n	800df2c <ip4_reass+0xdc>
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	699a      	ldr	r2, [r3, #24]
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d106      	bne.n	800df2c <ip4_reass+0xdc>
 800df1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df20:	899a      	ldrh	r2, [r3, #12]
 800df22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df24:	889b      	ldrh	r3, [r3, #4]
 800df26:	b29b      	uxth	r3, r3
 800df28:	429a      	cmp	r2, r3
 800df2a:	d006      	beq.n	800df3a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800df2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	633b      	str	r3, [r7, #48]	; 0x30
 800df32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df34:	2b00      	cmp	r3, #0
 800df36:	d1e6      	bne.n	800df06 <ip4_reass+0xb6>
 800df38:	e000      	b.n	800df3c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800df3a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800df3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d109      	bne.n	800df56 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800df42:	8c3b      	ldrh	r3, [r7, #32]
 800df44:	4619      	mov	r1, r3
 800df46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df48:	f7ff fdb0 	bl	800daac <ip_reass_enqueue_new_datagram>
 800df4c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800df4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df50:	2b00      	cmp	r3, #0
 800df52:	d11c      	bne.n	800df8e <ip4_reass+0x13e>
      goto nullreturn;
 800df54:	e109      	b.n	800e16a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800df56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df58:	88db      	ldrh	r3, [r3, #6]
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7f6 fb33 	bl	80045c8 <lwip_htons>
 800df62:	4603      	mov	r3, r0
 800df64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d110      	bne.n	800df8e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	89db      	ldrh	r3, [r3, #14]
 800df70:	4618      	mov	r0, r3
 800df72:	f7f6 fb29 	bl	80045c8 <lwip_htons>
 800df76:	4603      	mov	r3, r0
 800df78:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d006      	beq.n	800df8e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	3308      	adds	r3, #8
 800df84:	2214      	movs	r2, #20
 800df86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df88:	4618      	mov	r0, r3
 800df8a:	f000 fb9d 	bl	800e6c8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800df8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df90:	88db      	ldrh	r3, [r3, #6]
 800df92:	b29b      	uxth	r3, r3
 800df94:	f003 0320 	and.w	r3, r3, #32
 800df98:	2b00      	cmp	r3, #0
 800df9a:	bf0c      	ite	eq
 800df9c:	2301      	moveq	r3, #1
 800df9e:	2300      	movne	r3, #0
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00e      	beq.n	800dfc8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dfaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dfac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfae:	4413      	add	r3, r2
 800dfb0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dfb2:	8b7a      	ldrh	r2, [r7, #26]
 800dfb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	f0c0 80a0 	bcc.w	800e0fc <ip4_reass+0x2ac>
 800dfbc:	8b7b      	ldrh	r3, [r7, #26]
 800dfbe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	f200 809a 	bhi.w	800e0fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dfc8:	69fa      	ldr	r2, [r7, #28]
 800dfca:	6879      	ldr	r1, [r7, #4]
 800dfcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfce:	f7ff fdd5 	bl	800db7c <ip_reass_chain_frag_into_datagram_and_validate>
 800dfd2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfda:	f000 8091 	beq.w	800e100 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dfde:	4b5b      	ldr	r3, [pc, #364]	; (800e14c <ip4_reass+0x2fc>)
 800dfe0:	881a      	ldrh	r2, [r3, #0]
 800dfe2:	8c3b      	ldrh	r3, [r7, #32]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	4b58      	ldr	r3, [pc, #352]	; (800e14c <ip4_reass+0x2fc>)
 800dfea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00d      	beq.n	800e00e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dff2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dff6:	4413      	add	r3, r2
 800dff8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffc:	8a7a      	ldrh	r2, [r7, #18]
 800dffe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	7f9b      	ldrb	r3, [r3, #30]
 800e004:	f043 0301 	orr.w	r3, r3, #1
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d171      	bne.n	800e0f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	8b9b      	ldrh	r3, [r3, #28]
 800e018:	3314      	adds	r3, #20
 800e01a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e030:	3308      	adds	r3, #8
 800e032:	2214      	movs	r2, #20
 800e034:	4619      	mov	r1, r3
 800e036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e038:	f000 fb46 	bl	800e6c8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e03c:	8a3b      	ldrh	r3, [r7, #16]
 800e03e:	4618      	mov	r0, r3
 800e040:	f7f6 fac2 	bl	80045c8 <lwip_htons>
 800e044:	4603      	mov	r3, r0
 800e046:	461a      	mov	r2, r3
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04e:	2200      	movs	r2, #0
 800e050:	719a      	strb	r2, [r3, #6]
 800e052:	2200      	movs	r2, #0
 800e054:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e058:	2200      	movs	r2, #0
 800e05a:	729a      	strb	r2, [r3, #10]
 800e05c:	2200      	movs	r2, #0
 800e05e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e066:	e00d      	b.n	800e084 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e06e:	2114      	movs	r1, #20
 800e070:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e072:	f7f7 fcd7 	bl	8005a24 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7f7 fe1b 	bl	8005cb4 <pbuf_cat>
      r = iprh->next_pbuf;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1ee      	bne.n	800e068 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e08a:	4b31      	ldr	r3, [pc, #196]	; (800e150 <ip4_reass+0x300>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e090:	429a      	cmp	r2, r3
 800e092:	d102      	bne.n	800e09a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e094:	2300      	movs	r3, #0
 800e096:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e098:	e010      	b.n	800e0bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e09a:	4b2d      	ldr	r3, [pc, #180]	; (800e150 <ip4_reass+0x300>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0a0:	e007      	b.n	800e0b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d006      	beq.n	800e0ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1f4      	bne.n	800e0a2 <ip4_reass+0x252>
 800e0b8:	e000      	b.n	800e0bc <ip4_reass+0x26c>
          break;
 800e0ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e0bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0c0:	f7ff fd2e 	bl	800db20 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7f7 fdbb 	bl	8005c40 <pbuf_clen>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e0ce:	4b1f      	ldr	r3, [pc, #124]	; (800e14c <ip4_reass+0x2fc>)
 800e0d0:	881b      	ldrh	r3, [r3, #0]
 800e0d2:	8c3a      	ldrh	r2, [r7, #32]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d906      	bls.n	800e0e6 <ip4_reass+0x296>
 800e0d8:	4b1e      	ldr	r3, [pc, #120]	; (800e154 <ip4_reass+0x304>)
 800e0da:	f240 229b 	movw	r2, #667	; 0x29b
 800e0de:	491e      	ldr	r1, [pc, #120]	; (800e158 <ip4_reass+0x308>)
 800e0e0:	481e      	ldr	r0, [pc, #120]	; (800e15c <ip4_reass+0x30c>)
 800e0e2:	f000 fb21 	bl	800e728 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e0e6:	4b19      	ldr	r3, [pc, #100]	; (800e14c <ip4_reass+0x2fc>)
 800e0e8:	881a      	ldrh	r2, [r3, #0]
 800e0ea:	8c3b      	ldrh	r3, [r7, #32]
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	4b16      	ldr	r3, [pc, #88]	; (800e14c <ip4_reass+0x2fc>)
 800e0f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	e03c      	b.n	800e172 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	e03a      	b.n	800e172 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800e0fc:	bf00      	nop
 800e0fe:	e000      	b.n	800e102 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e100:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	2b00      	cmp	r3, #0
 800e106:	d106      	bne.n	800e116 <ip4_reass+0x2c6>
 800e108:	4b12      	ldr	r3, [pc, #72]	; (800e154 <ip4_reass+0x304>)
 800e10a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e10e:	4914      	ldr	r1, [pc, #80]	; (800e160 <ip4_reass+0x310>)
 800e110:	4812      	ldr	r0, [pc, #72]	; (800e15c <ip4_reass+0x30c>)
 800e112:	f000 fb09 	bl	800e728 <iprintf>
  if (ipr->p == NULL) {
 800e116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d124      	bne.n	800e168 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e11e:	4b0c      	ldr	r3, [pc, #48]	; (800e150 <ip4_reass+0x300>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e124:	429a      	cmp	r2, r3
 800e126:	d006      	beq.n	800e136 <ip4_reass+0x2e6>
 800e128:	4b0a      	ldr	r3, [pc, #40]	; (800e154 <ip4_reass+0x304>)
 800e12a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e12e:	490d      	ldr	r1, [pc, #52]	; (800e164 <ip4_reass+0x314>)
 800e130:	480a      	ldr	r0, [pc, #40]	; (800e15c <ip4_reass+0x30c>)
 800e132:	f000 faf9 	bl	800e728 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e136:	2100      	movs	r1, #0
 800e138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e13a:	f7ff fcf1 	bl	800db20 <ip_reass_dequeue_datagram>
 800e13e:	e014      	b.n	800e16a <ip4_reass+0x31a>
    goto nullreturn;
 800e140:	bf00      	nop
 800e142:	e012      	b.n	800e16a <ip4_reass+0x31a>
    goto nullreturn;
 800e144:	bf00      	nop
 800e146:	e010      	b.n	800e16a <ip4_reass+0x31a>
      goto nullreturn;
 800e148:	bf00      	nop
 800e14a:	e00e      	b.n	800e16a <ip4_reass+0x31a>
 800e14c:	20000270 	.word	0x20000270
 800e150:	2000026c 	.word	0x2000026c
 800e154:	08012234 	.word	0x08012234
 800e158:	080123a4 	.word	0x080123a4
 800e15c:	0801227c 	.word	0x0801227c
 800e160:	080123c0 	.word	0x080123c0
 800e164:	080123cc 	.word	0x080123cc
  }

nullreturn:
 800e168:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7f7 fce0 	bl	8005b30 <pbuf_free>
  return NULL;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3738      	adds	r7, #56	; 0x38
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop

0800e17c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e180:	2005      	movs	r0, #5
 800e182:	f7f6 fe77 	bl	8004e74 <memp_malloc>
 800e186:	4603      	mov	r3, r0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d106      	bne.n	800e1a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e19a:	4b07      	ldr	r3, [pc, #28]	; (800e1b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e19c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e1a0:	4906      	ldr	r1, [pc, #24]	; (800e1bc <ip_frag_free_pbuf_custom_ref+0x30>)
 800e1a2:	4807      	ldr	r0, [pc, #28]	; (800e1c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e1a4:	f000 fac0 	bl	800e728 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e1a8:	6879      	ldr	r1, [r7, #4]
 800e1aa:	2005      	movs	r0, #5
 800e1ac:	f7f6 feae 	bl	8004f0c <memp_free>
}
 800e1b0:	bf00      	nop
 800e1b2:	3708      	adds	r7, #8
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	08012234 	.word	0x08012234
 800e1bc:	080123ec 	.word	0x080123ec
 800e1c0:	0801227c 	.word	0x0801227c

0800e1c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <ipfrag_free_pbuf_custom+0x20>
 800e1d6:	4b11      	ldr	r3, [pc, #68]	; (800e21c <ipfrag_free_pbuf_custom+0x58>)
 800e1d8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e1dc:	4910      	ldr	r1, [pc, #64]	; (800e220 <ipfrag_free_pbuf_custom+0x5c>)
 800e1de:	4811      	ldr	r0, [pc, #68]	; (800e224 <ipfrag_free_pbuf_custom+0x60>)
 800e1e0:	f000 faa2 	bl	800e728 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d006      	beq.n	800e1fa <ipfrag_free_pbuf_custom+0x36>
 800e1ec:	4b0b      	ldr	r3, [pc, #44]	; (800e21c <ipfrag_free_pbuf_custom+0x58>)
 800e1ee:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e1f2:	490d      	ldr	r1, [pc, #52]	; (800e228 <ipfrag_free_pbuf_custom+0x64>)
 800e1f4:	480b      	ldr	r0, [pc, #44]	; (800e224 <ipfrag_free_pbuf_custom+0x60>)
 800e1f6:	f000 fa97 	bl	800e728 <iprintf>
  if (pcr->original != NULL) {
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	695b      	ldr	r3, [r3, #20]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d004      	beq.n	800e20c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	695b      	ldr	r3, [r3, #20]
 800e206:	4618      	mov	r0, r3
 800e208:	f7f7 fc92 	bl	8005b30 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f7ff ffbd 	bl	800e18c <ip_frag_free_pbuf_custom_ref>
}
 800e212:	bf00      	nop
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	08012234 	.word	0x08012234
 800e220:	080123f8 	.word	0x080123f8
 800e224:	0801227c 	.word	0x0801227c
 800e228:	08012404 	.word	0x08012404

0800e22c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b094      	sub	sp, #80	; 0x50
 800e230:	af02      	add	r7, sp, #8
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e242:	3b14      	subs	r3, #20
 800e244:	2b00      	cmp	r3, #0
 800e246:	da00      	bge.n	800e24a <ip4_frag+0x1e>
 800e248:	3307      	adds	r3, #7
 800e24a:	10db      	asrs	r3, r3, #3
 800e24c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e24e:	2314      	movs	r3, #20
 800e250:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e25a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	f003 030f 	and.w	r3, r3, #15
 800e264:	b2db      	uxtb	r3, r3
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b14      	cmp	r3, #20
 800e26c:	d002      	beq.n	800e274 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e26e:	f06f 0305 	mvn.w	r3, #5
 800e272:	e110      	b.n	800e496 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	895b      	ldrh	r3, [r3, #10]
 800e278:	2b13      	cmp	r3, #19
 800e27a:	d809      	bhi.n	800e290 <ip4_frag+0x64>
 800e27c:	4b88      	ldr	r3, [pc, #544]	; (800e4a0 <ip4_frag+0x274>)
 800e27e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e282:	4988      	ldr	r1, [pc, #544]	; (800e4a4 <ip4_frag+0x278>)
 800e284:	4888      	ldr	r0, [pc, #544]	; (800e4a8 <ip4_frag+0x27c>)
 800e286:	f000 fa4f 	bl	800e728 <iprintf>
 800e28a:	f06f 0305 	mvn.w	r3, #5
 800e28e:	e102      	b.n	800e496 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e292:	88db      	ldrh	r3, [r3, #6]
 800e294:	b29b      	uxth	r3, r3
 800e296:	4618      	mov	r0, r3
 800e298:	f7f6 f996 	bl	80045c8 <lwip_htons>
 800e29c:	4603      	mov	r3, r0
 800e29e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e2a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e2a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e2aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e2ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	891b      	ldrh	r3, [r3, #8]
 800e2b6:	3b14      	subs	r3, #20
 800e2b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e2bc:	e0e1      	b.n	800e482 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e2be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	bf28      	it	cs
 800e2cc:	4613      	movcs	r3, r2
 800e2ce:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e2d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e2d4:	2114      	movs	r1, #20
 800e2d6:	200e      	movs	r0, #14
 800e2d8:	f7f7 f946 	bl	8005568 <pbuf_alloc>
 800e2dc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 80d5 	beq.w	800e490 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	895b      	ldrh	r3, [r3, #10]
 800e2ea:	2b13      	cmp	r3, #19
 800e2ec:	d806      	bhi.n	800e2fc <ip4_frag+0xd0>
 800e2ee:	4b6c      	ldr	r3, [pc, #432]	; (800e4a0 <ip4_frag+0x274>)
 800e2f0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e2f4:	496d      	ldr	r1, [pc, #436]	; (800e4ac <ip4_frag+0x280>)
 800e2f6:	486c      	ldr	r0, [pc, #432]	; (800e4a8 <ip4_frag+0x27c>)
 800e2f8:	f000 fa16 	bl	800e728 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	2214      	movs	r2, #20
 800e302:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e304:	4618      	mov	r0, r3
 800e306:	f000 f9df 	bl	800e6c8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e310:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e312:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e316:	e064      	b.n	800e3e2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	895a      	ldrh	r2, [r3, #10]
 800e31c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	895b      	ldrh	r3, [r3, #10]
 800e326:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e328:	429a      	cmp	r2, r3
 800e32a:	d906      	bls.n	800e33a <ip4_frag+0x10e>
 800e32c:	4b5c      	ldr	r3, [pc, #368]	; (800e4a0 <ip4_frag+0x274>)
 800e32e:	f240 322d 	movw	r2, #813	; 0x32d
 800e332:	495f      	ldr	r1, [pc, #380]	; (800e4b0 <ip4_frag+0x284>)
 800e334:	485c      	ldr	r0, [pc, #368]	; (800e4a8 <ip4_frag+0x27c>)
 800e336:	f000 f9f7 	bl	800e728 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e33a:	8bfa      	ldrh	r2, [r7, #30]
 800e33c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e340:	4293      	cmp	r3, r2
 800e342:	bf28      	it	cs
 800e344:	4613      	movcs	r3, r2
 800e346:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e34a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d105      	bne.n	800e35e <ip4_frag+0x132>
        poff = 0;
 800e352:	2300      	movs	r3, #0
 800e354:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	60fb      	str	r3, [r7, #12]
        continue;
 800e35c:	e041      	b.n	800e3e2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e35e:	f7ff ff0d 	bl	800e17c <ip_frag_alloc_pbuf_custom_ref>
 800e362:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d103      	bne.n	800e372 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e36a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e36c:	f7f7 fbe0 	bl	8005b30 <pbuf_free>
        goto memerr;
 800e370:	e08f      	b.n	800e492 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e372:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e378:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e37a:	4413      	add	r3, r2
 800e37c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e380:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e384:	9201      	str	r2, [sp, #4]
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	4603      	mov	r3, r0
 800e38a:	2241      	movs	r2, #65	; 0x41
 800e38c:	2000      	movs	r0, #0
 800e38e:	f7f7 fa15 	bl	80057bc <pbuf_alloced_custom>
 800e392:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d106      	bne.n	800e3a8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e39a:	69b8      	ldr	r0, [r7, #24]
 800e39c:	f7ff fef6 	bl	800e18c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e3a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3a2:	f7f7 fbc5 	bl	8005b30 <pbuf_free>
        goto memerr;
 800e3a6:	e074      	b.n	800e492 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f7f7 fc61 	bl	8005c70 <pbuf_ref>
      pcr->original = p;
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	4a3f      	ldr	r2, [pc, #252]	; (800e4b4 <ip4_frag+0x288>)
 800e3b8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e3ba:	6979      	ldr	r1, [r7, #20]
 800e3bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3be:	f7f7 fc79 	bl	8005cb4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e3c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e3c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3ca:	1ad3      	subs	r3, r2, r3
 800e3cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e3d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d004      	beq.n	800e3e2 <ip4_frag+0x1b6>
        poff = 0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e3e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d196      	bne.n	800e318 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e3ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e3ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e3f0:	4413      	add	r3, r2
 800e3f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3f8:	f1a3 0213 	sub.w	r2, r3, #19
 800e3fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e400:	429a      	cmp	r2, r3
 800e402:	bfcc      	ite	gt
 800e404:	2301      	movgt	r3, #1
 800e406:	2300      	movle	r3, #0
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e40c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e414:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e416:	6a3b      	ldr	r3, [r7, #32]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d002      	beq.n	800e422 <ip4_frag+0x1f6>
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e424:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e428:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e42a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7f6 f8cb 	bl	80045c8 <lwip_htons>
 800e432:	4603      	mov	r3, r0
 800e434:	461a      	mov	r2, r3
 800e436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e438:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e43a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e43c:	3314      	adds	r3, #20
 800e43e:	b29b      	uxth	r3, r3
 800e440:	4618      	mov	r0, r3
 800e442:	f7f6 f8c1 	bl	80045c8 <lwip_htons>
 800e446:	4603      	mov	r3, r0
 800e448:	461a      	mov	r2, r3
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e450:	2200      	movs	r2, #0
 800e452:	729a      	strb	r2, [r3, #10]
 800e454:	2200      	movs	r2, #0
 800e456:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e460:	68b8      	ldr	r0, [r7, #8]
 800e462:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e466:	f7f7 fb63 	bl	8005b30 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e46a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e46e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e476:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e47a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e47c:	4413      	add	r3, r2
 800e47e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e486:	2b00      	cmp	r3, #0
 800e488:	f47f af19 	bne.w	800e2be <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	e002      	b.n	800e496 <ip4_frag+0x26a>
      goto memerr;
 800e490:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e492:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e496:	4618      	mov	r0, r3
 800e498:	3748      	adds	r7, #72	; 0x48
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	08012234 	.word	0x08012234
 800e4a4:	08012410 	.word	0x08012410
 800e4a8:	0801227c 	.word	0x0801227c
 800e4ac:	0801242c 	.word	0x0801242c
 800e4b0:	0801244c 	.word	0x0801244c
 800e4b4:	0800e1c5 	.word	0x0800e1c5

0800e4b8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b086      	sub	sp, #24
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
 800e4c0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e4c2:	230e      	movs	r3, #14
 800e4c4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	895b      	ldrh	r3, [r3, #10]
 800e4ca:	2b0e      	cmp	r3, #14
 800e4cc:	d96e      	bls.n	800e5ac <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	7bdb      	ldrb	r3, [r3, #15]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4dc:	3301      	adds	r3, #1
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	7b1a      	ldrb	r2, [r3, #12]
 800e4ee:	7b5b      	ldrb	r3, [r3, #13]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	f003 0301 	and.w	r3, r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d023      	beq.n	800e54a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d10f      	bne.n	800e52a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	785b      	ldrb	r3, [r3, #1]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d11b      	bne.n	800e54a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e516:	2b5e      	cmp	r3, #94	; 0x5e
 800e518:	d117      	bne.n	800e54a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7b5b      	ldrb	r3, [r3, #13]
 800e51e:	f043 0310 	orr.w	r3, r3, #16
 800e522:	b2da      	uxtb	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	735a      	strb	r2, [r3, #13]
 800e528:	e00f      	b.n	800e54a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	2206      	movs	r2, #6
 800e52e:	4928      	ldr	r1, [pc, #160]	; (800e5d0 <ethernet_input+0x118>)
 800e530:	4618      	mov	r0, r3
 800e532:	f000 f8bb 	bl	800e6ac <memcmp>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d106      	bne.n	800e54a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	7b5b      	ldrb	r3, [r3, #13]
 800e540:	f043 0308 	orr.w	r3, r3, #8
 800e544:	b2da      	uxtb	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e54a:	89fb      	ldrh	r3, [r7, #14]
 800e54c:	2b08      	cmp	r3, #8
 800e54e:	d003      	beq.n	800e558 <ethernet_input+0xa0>
 800e550:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e554:	d014      	beq.n	800e580 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e556:	e032      	b.n	800e5be <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e55e:	f003 0308 	and.w	r3, r3, #8
 800e562:	2b00      	cmp	r3, #0
 800e564:	d024      	beq.n	800e5b0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e566:	8afb      	ldrh	r3, [r7, #22]
 800e568:	4619      	mov	r1, r3
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7f7 fa5a 	bl	8005a24 <pbuf_remove_header>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d11e      	bne.n	800e5b4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7fe ff27 	bl	800d3cc <ip4_input>
      break;
 800e57e:	e013      	b.n	800e5a8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e586:	f003 0308 	and.w	r3, r3, #8
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d014      	beq.n	800e5b8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e58e:	8afb      	ldrh	r3, [r7, #22]
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7f7 fa46 	bl	8005a24 <pbuf_remove_header>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10e      	bne.n	800e5bc <ethernet_input+0x104>
        etharp_input(p, netif);
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7fe f8c9 	bl	800c738 <etharp_input>
      break;
 800e5a6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	e00c      	b.n	800e5c6 <ethernet_input+0x10e>
    goto free_and_return;
 800e5ac:	bf00      	nop
 800e5ae:	e006      	b.n	800e5be <ethernet_input+0x106>
        goto free_and_return;
 800e5b0:	bf00      	nop
 800e5b2:	e004      	b.n	800e5be <ethernet_input+0x106>
        goto free_and_return;
 800e5b4:	bf00      	nop
 800e5b6:	e002      	b.n	800e5be <ethernet_input+0x106>
        goto free_and_return;
 800e5b8:	bf00      	nop
 800e5ba:	e000      	b.n	800e5be <ethernet_input+0x106>
        goto free_and_return;
 800e5bc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7f7 fab6 	bl	8005b30 <pbuf_free>
  return ERR_OK;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3718      	adds	r7, #24
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	080125d4 	.word	0x080125d4

0800e5d4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b086      	sub	sp, #24
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
 800e5e0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e5e2:	8c3b      	ldrh	r3, [r7, #32]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7f5 ffef 	bl	80045c8 <lwip_htons>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e5ee:	210e      	movs	r1, #14
 800e5f0:	68b8      	ldr	r0, [r7, #8]
 800e5f2:	f7f7 fa07 	bl	8005a04 <pbuf_add_header>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d125      	bne.n	800e648 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	8afa      	ldrh	r2, [r7, #22]
 800e606:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	2206      	movs	r2, #6
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	4618      	mov	r0, r3
 800e610:	f000 f85a 	bl	800e6c8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	3306      	adds	r3, #6
 800e618:	2206      	movs	r2, #6
 800e61a:	6879      	ldr	r1, [r7, #4]
 800e61c:	4618      	mov	r0, r3
 800e61e:	f000 f853 	bl	800e6c8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e628:	2b06      	cmp	r3, #6
 800e62a:	d006      	beq.n	800e63a <ethernet_output+0x66>
 800e62c:	4b0a      	ldr	r3, [pc, #40]	; (800e658 <ethernet_output+0x84>)
 800e62e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e632:	490a      	ldr	r1, [pc, #40]	; (800e65c <ethernet_output+0x88>)
 800e634:	480a      	ldr	r0, [pc, #40]	; (800e660 <ethernet_output+0x8c>)
 800e636:	f000 f877 	bl	800e728 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	699b      	ldr	r3, [r3, #24]
 800e63e:	68b9      	ldr	r1, [r7, #8]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	4798      	blx	r3
 800e644:	4603      	mov	r3, r0
 800e646:	e002      	b.n	800e64e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e648:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e64a:	f06f 0301 	mvn.w	r3, #1
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	0801245c 	.word	0x0801245c
 800e65c:	08012494 	.word	0x08012494
 800e660:	080124c8 	.word	0x080124c8

0800e664 <__libc_init_array>:
 800e664:	b570      	push	{r4, r5, r6, lr}
 800e666:	4d0d      	ldr	r5, [pc, #52]	; (800e69c <__libc_init_array+0x38>)
 800e668:	4c0d      	ldr	r4, [pc, #52]	; (800e6a0 <__libc_init_array+0x3c>)
 800e66a:	1b64      	subs	r4, r4, r5
 800e66c:	10a4      	asrs	r4, r4, #2
 800e66e:	2600      	movs	r6, #0
 800e670:	42a6      	cmp	r6, r4
 800e672:	d109      	bne.n	800e688 <__libc_init_array+0x24>
 800e674:	4d0b      	ldr	r5, [pc, #44]	; (800e6a4 <__libc_init_array+0x40>)
 800e676:	4c0c      	ldr	r4, [pc, #48]	; (800e6a8 <__libc_init_array+0x44>)
 800e678:	f001 fa2e 	bl	800fad8 <_init>
 800e67c:	1b64      	subs	r4, r4, r5
 800e67e:	10a4      	asrs	r4, r4, #2
 800e680:	2600      	movs	r6, #0
 800e682:	42a6      	cmp	r6, r4
 800e684:	d105      	bne.n	800e692 <__libc_init_array+0x2e>
 800e686:	bd70      	pop	{r4, r5, r6, pc}
 800e688:	f855 3b04 	ldr.w	r3, [r5], #4
 800e68c:	4798      	blx	r3
 800e68e:	3601      	adds	r6, #1
 800e690:	e7ee      	b.n	800e670 <__libc_init_array+0xc>
 800e692:	f855 3b04 	ldr.w	r3, [r5], #4
 800e696:	4798      	blx	r3
 800e698:	3601      	adds	r6, #1
 800e69a:	e7f2      	b.n	800e682 <__libc_init_array+0x1e>
 800e69c:	08012738 	.word	0x08012738
 800e6a0:	08012738 	.word	0x08012738
 800e6a4:	08012738 	.word	0x08012738
 800e6a8:	0801273c 	.word	0x0801273c

0800e6ac <memcmp>:
 800e6ac:	b530      	push	{r4, r5, lr}
 800e6ae:	3901      	subs	r1, #1
 800e6b0:	2400      	movs	r4, #0
 800e6b2:	42a2      	cmp	r2, r4
 800e6b4:	d101      	bne.n	800e6ba <memcmp+0xe>
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	e005      	b.n	800e6c6 <memcmp+0x1a>
 800e6ba:	5d03      	ldrb	r3, [r0, r4]
 800e6bc:	3401      	adds	r4, #1
 800e6be:	5d0d      	ldrb	r5, [r1, r4]
 800e6c0:	42ab      	cmp	r3, r5
 800e6c2:	d0f6      	beq.n	800e6b2 <memcmp+0x6>
 800e6c4:	1b58      	subs	r0, r3, r5
 800e6c6:	bd30      	pop	{r4, r5, pc}

0800e6c8 <memcpy>:
 800e6c8:	440a      	add	r2, r1
 800e6ca:	4291      	cmp	r1, r2
 800e6cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6d0:	d100      	bne.n	800e6d4 <memcpy+0xc>
 800e6d2:	4770      	bx	lr
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6de:	4291      	cmp	r1, r2
 800e6e0:	d1f9      	bne.n	800e6d6 <memcpy+0xe>
 800e6e2:	bd10      	pop	{r4, pc}

0800e6e4 <memmove>:
 800e6e4:	4288      	cmp	r0, r1
 800e6e6:	b510      	push	{r4, lr}
 800e6e8:	eb01 0402 	add.w	r4, r1, r2
 800e6ec:	d902      	bls.n	800e6f4 <memmove+0x10>
 800e6ee:	4284      	cmp	r4, r0
 800e6f0:	4623      	mov	r3, r4
 800e6f2:	d807      	bhi.n	800e704 <memmove+0x20>
 800e6f4:	1e43      	subs	r3, r0, #1
 800e6f6:	42a1      	cmp	r1, r4
 800e6f8:	d008      	beq.n	800e70c <memmove+0x28>
 800e6fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e702:	e7f8      	b.n	800e6f6 <memmove+0x12>
 800e704:	4402      	add	r2, r0
 800e706:	4601      	mov	r1, r0
 800e708:	428a      	cmp	r2, r1
 800e70a:	d100      	bne.n	800e70e <memmove+0x2a>
 800e70c:	bd10      	pop	{r4, pc}
 800e70e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e712:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e716:	e7f7      	b.n	800e708 <memmove+0x24>

0800e718 <memset>:
 800e718:	4402      	add	r2, r0
 800e71a:	4603      	mov	r3, r0
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d100      	bne.n	800e722 <memset+0xa>
 800e720:	4770      	bx	lr
 800e722:	f803 1b01 	strb.w	r1, [r3], #1
 800e726:	e7f9      	b.n	800e71c <memset+0x4>

0800e728 <iprintf>:
 800e728:	b40f      	push	{r0, r1, r2, r3}
 800e72a:	4b0a      	ldr	r3, [pc, #40]	; (800e754 <iprintf+0x2c>)
 800e72c:	b513      	push	{r0, r1, r4, lr}
 800e72e:	681c      	ldr	r4, [r3, #0]
 800e730:	b124      	cbz	r4, 800e73c <iprintf+0x14>
 800e732:	69a3      	ldr	r3, [r4, #24]
 800e734:	b913      	cbnz	r3, 800e73c <iprintf+0x14>
 800e736:	4620      	mov	r0, r4
 800e738:	f000 f8f8 	bl	800e92c <__sinit>
 800e73c:	ab05      	add	r3, sp, #20
 800e73e:	9a04      	ldr	r2, [sp, #16]
 800e740:	68a1      	ldr	r1, [r4, #8]
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	4620      	mov	r0, r4
 800e746:	f000 fbdb 	bl	800ef00 <_vfiprintf_r>
 800e74a:	b002      	add	sp, #8
 800e74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e750:	b004      	add	sp, #16
 800e752:	4770      	bx	lr
 800e754:	20000034 	.word	0x20000034

0800e758 <rand>:
 800e758:	4b17      	ldr	r3, [pc, #92]	; (800e7b8 <rand+0x60>)
 800e75a:	b510      	push	{r4, lr}
 800e75c:	681c      	ldr	r4, [r3, #0]
 800e75e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e760:	b9b3      	cbnz	r3, 800e790 <rand+0x38>
 800e762:	2018      	movs	r0, #24
 800e764:	f000 f994 	bl	800ea90 <malloc>
 800e768:	63a0      	str	r0, [r4, #56]	; 0x38
 800e76a:	b928      	cbnz	r0, 800e778 <rand+0x20>
 800e76c:	4602      	mov	r2, r0
 800e76e:	4b13      	ldr	r3, [pc, #76]	; (800e7bc <rand+0x64>)
 800e770:	4813      	ldr	r0, [pc, #76]	; (800e7c0 <rand+0x68>)
 800e772:	214e      	movs	r1, #78	; 0x4e
 800e774:	f000 f864 	bl	800e840 <__assert_func>
 800e778:	4a12      	ldr	r2, [pc, #72]	; (800e7c4 <rand+0x6c>)
 800e77a:	4b13      	ldr	r3, [pc, #76]	; (800e7c8 <rand+0x70>)
 800e77c:	e9c0 2300 	strd	r2, r3, [r0]
 800e780:	4b12      	ldr	r3, [pc, #72]	; (800e7cc <rand+0x74>)
 800e782:	6083      	str	r3, [r0, #8]
 800e784:	230b      	movs	r3, #11
 800e786:	8183      	strh	r3, [r0, #12]
 800e788:	2201      	movs	r2, #1
 800e78a:	2300      	movs	r3, #0
 800e78c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e790:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e792:	480f      	ldr	r0, [pc, #60]	; (800e7d0 <rand+0x78>)
 800e794:	690a      	ldr	r2, [r1, #16]
 800e796:	694b      	ldr	r3, [r1, #20]
 800e798:	4c0e      	ldr	r4, [pc, #56]	; (800e7d4 <rand+0x7c>)
 800e79a:	4350      	muls	r0, r2
 800e79c:	fb04 0003 	mla	r0, r4, r3, r0
 800e7a0:	fba2 3404 	umull	r3, r4, r2, r4
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	4404      	add	r4, r0
 800e7a8:	f144 0000 	adc.w	r0, r4, #0
 800e7ac:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e7b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e7b4:	bd10      	pop	{r4, pc}
 800e7b6:	bf00      	nop
 800e7b8:	20000034 	.word	0x20000034
 800e7bc:	080125e8 	.word	0x080125e8
 800e7c0:	080125ff 	.word	0x080125ff
 800e7c4:	abcd330e 	.word	0xabcd330e
 800e7c8:	e66d1234 	.word	0xe66d1234
 800e7cc:	0005deec 	.word	0x0005deec
 800e7d0:	5851f42d 	.word	0x5851f42d
 800e7d4:	4c957f2d 	.word	0x4c957f2d

0800e7d8 <siprintf>:
 800e7d8:	b40e      	push	{r1, r2, r3}
 800e7da:	b500      	push	{lr}
 800e7dc:	b09c      	sub	sp, #112	; 0x70
 800e7de:	ab1d      	add	r3, sp, #116	; 0x74
 800e7e0:	9002      	str	r0, [sp, #8]
 800e7e2:	9006      	str	r0, [sp, #24]
 800e7e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e7e8:	4809      	ldr	r0, [pc, #36]	; (800e810 <siprintf+0x38>)
 800e7ea:	9107      	str	r1, [sp, #28]
 800e7ec:	9104      	str	r1, [sp, #16]
 800e7ee:	4909      	ldr	r1, [pc, #36]	; (800e814 <siprintf+0x3c>)
 800e7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7f4:	9105      	str	r1, [sp, #20]
 800e7f6:	6800      	ldr	r0, [r0, #0]
 800e7f8:	9301      	str	r3, [sp, #4]
 800e7fa:	a902      	add	r1, sp, #8
 800e7fc:	f000 fa56 	bl	800ecac <_svfiprintf_r>
 800e800:	9b02      	ldr	r3, [sp, #8]
 800e802:	2200      	movs	r2, #0
 800e804:	701a      	strb	r2, [r3, #0]
 800e806:	b01c      	add	sp, #112	; 0x70
 800e808:	f85d eb04 	ldr.w	lr, [sp], #4
 800e80c:	b003      	add	sp, #12
 800e80e:	4770      	bx	lr
 800e810:	20000034 	.word	0x20000034
 800e814:	ffff0208 	.word	0xffff0208

0800e818 <strncpy>:
 800e818:	b510      	push	{r4, lr}
 800e81a:	3901      	subs	r1, #1
 800e81c:	4603      	mov	r3, r0
 800e81e:	b132      	cbz	r2, 800e82e <strncpy+0x16>
 800e820:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e824:	f803 4b01 	strb.w	r4, [r3], #1
 800e828:	3a01      	subs	r2, #1
 800e82a:	2c00      	cmp	r4, #0
 800e82c:	d1f7      	bne.n	800e81e <strncpy+0x6>
 800e82e:	441a      	add	r2, r3
 800e830:	2100      	movs	r1, #0
 800e832:	4293      	cmp	r3, r2
 800e834:	d100      	bne.n	800e838 <strncpy+0x20>
 800e836:	bd10      	pop	{r4, pc}
 800e838:	f803 1b01 	strb.w	r1, [r3], #1
 800e83c:	e7f9      	b.n	800e832 <strncpy+0x1a>
	...

0800e840 <__assert_func>:
 800e840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e842:	4614      	mov	r4, r2
 800e844:	461a      	mov	r2, r3
 800e846:	4b09      	ldr	r3, [pc, #36]	; (800e86c <__assert_func+0x2c>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4605      	mov	r5, r0
 800e84c:	68d8      	ldr	r0, [r3, #12]
 800e84e:	b14c      	cbz	r4, 800e864 <__assert_func+0x24>
 800e850:	4b07      	ldr	r3, [pc, #28]	; (800e870 <__assert_func+0x30>)
 800e852:	9100      	str	r1, [sp, #0]
 800e854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e858:	4906      	ldr	r1, [pc, #24]	; (800e874 <__assert_func+0x34>)
 800e85a:	462b      	mov	r3, r5
 800e85c:	f000 f8e4 	bl	800ea28 <fiprintf>
 800e860:	f000 ff38 	bl	800f6d4 <abort>
 800e864:	4b04      	ldr	r3, [pc, #16]	; (800e878 <__assert_func+0x38>)
 800e866:	461c      	mov	r4, r3
 800e868:	e7f3      	b.n	800e852 <__assert_func+0x12>
 800e86a:	bf00      	nop
 800e86c:	20000034 	.word	0x20000034
 800e870:	0801265e 	.word	0x0801265e
 800e874:	0801266b 	.word	0x0801266b
 800e878:	08012699 	.word	0x08012699

0800e87c <std>:
 800e87c:	2300      	movs	r3, #0
 800e87e:	b510      	push	{r4, lr}
 800e880:	4604      	mov	r4, r0
 800e882:	e9c0 3300 	strd	r3, r3, [r0]
 800e886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e88a:	6083      	str	r3, [r0, #8]
 800e88c:	8181      	strh	r1, [r0, #12]
 800e88e:	6643      	str	r3, [r0, #100]	; 0x64
 800e890:	81c2      	strh	r2, [r0, #14]
 800e892:	6183      	str	r3, [r0, #24]
 800e894:	4619      	mov	r1, r3
 800e896:	2208      	movs	r2, #8
 800e898:	305c      	adds	r0, #92	; 0x5c
 800e89a:	f7ff ff3d 	bl	800e718 <memset>
 800e89e:	4b05      	ldr	r3, [pc, #20]	; (800e8b4 <std+0x38>)
 800e8a0:	6263      	str	r3, [r4, #36]	; 0x24
 800e8a2:	4b05      	ldr	r3, [pc, #20]	; (800e8b8 <std+0x3c>)
 800e8a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e8a6:	4b05      	ldr	r3, [pc, #20]	; (800e8bc <std+0x40>)
 800e8a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8aa:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <std+0x44>)
 800e8ac:	6224      	str	r4, [r4, #32]
 800e8ae:	6323      	str	r3, [r4, #48]	; 0x30
 800e8b0:	bd10      	pop	{r4, pc}
 800e8b2:	bf00      	nop
 800e8b4:	0800f4a9 	.word	0x0800f4a9
 800e8b8:	0800f4cb 	.word	0x0800f4cb
 800e8bc:	0800f503 	.word	0x0800f503
 800e8c0:	0800f527 	.word	0x0800f527

0800e8c4 <_cleanup_r>:
 800e8c4:	4901      	ldr	r1, [pc, #4]	; (800e8cc <_cleanup_r+0x8>)
 800e8c6:	f000 b8c1 	b.w	800ea4c <_fwalk_reent>
 800e8ca:	bf00      	nop
 800e8cc:	0800f811 	.word	0x0800f811

0800e8d0 <__sfmoreglue>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	1e4a      	subs	r2, r1, #1
 800e8d4:	2568      	movs	r5, #104	; 0x68
 800e8d6:	4355      	muls	r5, r2
 800e8d8:	460e      	mov	r6, r1
 800e8da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8de:	f000 f92f 	bl	800eb40 <_malloc_r>
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	b140      	cbz	r0, 800e8f8 <__sfmoreglue+0x28>
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	e9c0 1600 	strd	r1, r6, [r0]
 800e8ec:	300c      	adds	r0, #12
 800e8ee:	60a0      	str	r0, [r4, #8]
 800e8f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8f4:	f7ff ff10 	bl	800e718 <memset>
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	bd70      	pop	{r4, r5, r6, pc}

0800e8fc <__sfp_lock_acquire>:
 800e8fc:	4801      	ldr	r0, [pc, #4]	; (800e904 <__sfp_lock_acquire+0x8>)
 800e8fe:	f000 b8c5 	b.w	800ea8c <__retarget_lock_acquire_recursive>
 800e902:	bf00      	nop
 800e904:	20008bdc 	.word	0x20008bdc

0800e908 <__sfp_lock_release>:
 800e908:	4801      	ldr	r0, [pc, #4]	; (800e910 <__sfp_lock_release+0x8>)
 800e90a:	f000 b8c0 	b.w	800ea8e <__retarget_lock_release_recursive>
 800e90e:	bf00      	nop
 800e910:	20008bdc 	.word	0x20008bdc

0800e914 <__sinit_lock_acquire>:
 800e914:	4801      	ldr	r0, [pc, #4]	; (800e91c <__sinit_lock_acquire+0x8>)
 800e916:	f000 b8b9 	b.w	800ea8c <__retarget_lock_acquire_recursive>
 800e91a:	bf00      	nop
 800e91c:	20008bd7 	.word	0x20008bd7

0800e920 <__sinit_lock_release>:
 800e920:	4801      	ldr	r0, [pc, #4]	; (800e928 <__sinit_lock_release+0x8>)
 800e922:	f000 b8b4 	b.w	800ea8e <__retarget_lock_release_recursive>
 800e926:	bf00      	nop
 800e928:	20008bd7 	.word	0x20008bd7

0800e92c <__sinit>:
 800e92c:	b510      	push	{r4, lr}
 800e92e:	4604      	mov	r4, r0
 800e930:	f7ff fff0 	bl	800e914 <__sinit_lock_acquire>
 800e934:	69a3      	ldr	r3, [r4, #24]
 800e936:	b11b      	cbz	r3, 800e940 <__sinit+0x14>
 800e938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e93c:	f7ff bff0 	b.w	800e920 <__sinit_lock_release>
 800e940:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e944:	6523      	str	r3, [r4, #80]	; 0x50
 800e946:	4b13      	ldr	r3, [pc, #76]	; (800e994 <__sinit+0x68>)
 800e948:	4a13      	ldr	r2, [pc, #76]	; (800e998 <__sinit+0x6c>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e94e:	42a3      	cmp	r3, r4
 800e950:	bf04      	itt	eq
 800e952:	2301      	moveq	r3, #1
 800e954:	61a3      	streq	r3, [r4, #24]
 800e956:	4620      	mov	r0, r4
 800e958:	f000 f820 	bl	800e99c <__sfp>
 800e95c:	6060      	str	r0, [r4, #4]
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 f81c 	bl	800e99c <__sfp>
 800e964:	60a0      	str	r0, [r4, #8]
 800e966:	4620      	mov	r0, r4
 800e968:	f000 f818 	bl	800e99c <__sfp>
 800e96c:	2200      	movs	r2, #0
 800e96e:	60e0      	str	r0, [r4, #12]
 800e970:	2104      	movs	r1, #4
 800e972:	6860      	ldr	r0, [r4, #4]
 800e974:	f7ff ff82 	bl	800e87c <std>
 800e978:	68a0      	ldr	r0, [r4, #8]
 800e97a:	2201      	movs	r2, #1
 800e97c:	2109      	movs	r1, #9
 800e97e:	f7ff ff7d 	bl	800e87c <std>
 800e982:	68e0      	ldr	r0, [r4, #12]
 800e984:	2202      	movs	r2, #2
 800e986:	2112      	movs	r1, #18
 800e988:	f7ff ff78 	bl	800e87c <std>
 800e98c:	2301      	movs	r3, #1
 800e98e:	61a3      	str	r3, [r4, #24]
 800e990:	e7d2      	b.n	800e938 <__sinit+0xc>
 800e992:	bf00      	nop
 800e994:	080125e4 	.word	0x080125e4
 800e998:	0800e8c5 	.word	0x0800e8c5

0800e99c <__sfp>:
 800e99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e99e:	4607      	mov	r7, r0
 800e9a0:	f7ff ffac 	bl	800e8fc <__sfp_lock_acquire>
 800e9a4:	4b1e      	ldr	r3, [pc, #120]	; (800ea20 <__sfp+0x84>)
 800e9a6:	681e      	ldr	r6, [r3, #0]
 800e9a8:	69b3      	ldr	r3, [r6, #24]
 800e9aa:	b913      	cbnz	r3, 800e9b2 <__sfp+0x16>
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f7ff ffbd 	bl	800e92c <__sinit>
 800e9b2:	3648      	adds	r6, #72	; 0x48
 800e9b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9b8:	3b01      	subs	r3, #1
 800e9ba:	d503      	bpl.n	800e9c4 <__sfp+0x28>
 800e9bc:	6833      	ldr	r3, [r6, #0]
 800e9be:	b30b      	cbz	r3, 800ea04 <__sfp+0x68>
 800e9c0:	6836      	ldr	r6, [r6, #0]
 800e9c2:	e7f7      	b.n	800e9b4 <__sfp+0x18>
 800e9c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9c8:	b9d5      	cbnz	r5, 800ea00 <__sfp+0x64>
 800e9ca:	4b16      	ldr	r3, [pc, #88]	; (800ea24 <__sfp+0x88>)
 800e9cc:	60e3      	str	r3, [r4, #12]
 800e9ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9d2:	6665      	str	r5, [r4, #100]	; 0x64
 800e9d4:	f000 f859 	bl	800ea8a <__retarget_lock_init_recursive>
 800e9d8:	f7ff ff96 	bl	800e908 <__sfp_lock_release>
 800e9dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9e4:	6025      	str	r5, [r4, #0]
 800e9e6:	61a5      	str	r5, [r4, #24]
 800e9e8:	2208      	movs	r2, #8
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9f0:	f7ff fe92 	bl	800e718 <memset>
 800e9f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea00:	3468      	adds	r4, #104	; 0x68
 800ea02:	e7d9      	b.n	800e9b8 <__sfp+0x1c>
 800ea04:	2104      	movs	r1, #4
 800ea06:	4638      	mov	r0, r7
 800ea08:	f7ff ff62 	bl	800e8d0 <__sfmoreglue>
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	6030      	str	r0, [r6, #0]
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d1d5      	bne.n	800e9c0 <__sfp+0x24>
 800ea14:	f7ff ff78 	bl	800e908 <__sfp_lock_release>
 800ea18:	230c      	movs	r3, #12
 800ea1a:	603b      	str	r3, [r7, #0]
 800ea1c:	e7ee      	b.n	800e9fc <__sfp+0x60>
 800ea1e:	bf00      	nop
 800ea20:	080125e4 	.word	0x080125e4
 800ea24:	ffff0001 	.word	0xffff0001

0800ea28 <fiprintf>:
 800ea28:	b40e      	push	{r1, r2, r3}
 800ea2a:	b503      	push	{r0, r1, lr}
 800ea2c:	4601      	mov	r1, r0
 800ea2e:	ab03      	add	r3, sp, #12
 800ea30:	4805      	ldr	r0, [pc, #20]	; (800ea48 <fiprintf+0x20>)
 800ea32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea36:	6800      	ldr	r0, [r0, #0]
 800ea38:	9301      	str	r3, [sp, #4]
 800ea3a:	f000 fa61 	bl	800ef00 <_vfiprintf_r>
 800ea3e:	b002      	add	sp, #8
 800ea40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea44:	b003      	add	sp, #12
 800ea46:	4770      	bx	lr
 800ea48:	20000034 	.word	0x20000034

0800ea4c <_fwalk_reent>:
 800ea4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea50:	4606      	mov	r6, r0
 800ea52:	4688      	mov	r8, r1
 800ea54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea58:	2700      	movs	r7, #0
 800ea5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea5e:	f1b9 0901 	subs.w	r9, r9, #1
 800ea62:	d505      	bpl.n	800ea70 <_fwalk_reent+0x24>
 800ea64:	6824      	ldr	r4, [r4, #0]
 800ea66:	2c00      	cmp	r4, #0
 800ea68:	d1f7      	bne.n	800ea5a <_fwalk_reent+0xe>
 800ea6a:	4638      	mov	r0, r7
 800ea6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea70:	89ab      	ldrh	r3, [r5, #12]
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d907      	bls.n	800ea86 <_fwalk_reent+0x3a>
 800ea76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	d003      	beq.n	800ea86 <_fwalk_reent+0x3a>
 800ea7e:	4629      	mov	r1, r5
 800ea80:	4630      	mov	r0, r6
 800ea82:	47c0      	blx	r8
 800ea84:	4307      	orrs	r7, r0
 800ea86:	3568      	adds	r5, #104	; 0x68
 800ea88:	e7e9      	b.n	800ea5e <_fwalk_reent+0x12>

0800ea8a <__retarget_lock_init_recursive>:
 800ea8a:	4770      	bx	lr

0800ea8c <__retarget_lock_acquire_recursive>:
 800ea8c:	4770      	bx	lr

0800ea8e <__retarget_lock_release_recursive>:
 800ea8e:	4770      	bx	lr

0800ea90 <malloc>:
 800ea90:	4b02      	ldr	r3, [pc, #8]	; (800ea9c <malloc+0xc>)
 800ea92:	4601      	mov	r1, r0
 800ea94:	6818      	ldr	r0, [r3, #0]
 800ea96:	f000 b853 	b.w	800eb40 <_malloc_r>
 800ea9a:	bf00      	nop
 800ea9c:	20000034 	.word	0x20000034

0800eaa0 <_free_r>:
 800eaa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eaa2:	2900      	cmp	r1, #0
 800eaa4:	d048      	beq.n	800eb38 <_free_r+0x98>
 800eaa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaaa:	9001      	str	r0, [sp, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f1a1 0404 	sub.w	r4, r1, #4
 800eab2:	bfb8      	it	lt
 800eab4:	18e4      	addlt	r4, r4, r3
 800eab6:	f000 ff5d 	bl	800f974 <__malloc_lock>
 800eaba:	4a20      	ldr	r2, [pc, #128]	; (800eb3c <_free_r+0x9c>)
 800eabc:	9801      	ldr	r0, [sp, #4]
 800eabe:	6813      	ldr	r3, [r2, #0]
 800eac0:	4615      	mov	r5, r2
 800eac2:	b933      	cbnz	r3, 800ead2 <_free_r+0x32>
 800eac4:	6063      	str	r3, [r4, #4]
 800eac6:	6014      	str	r4, [r2, #0]
 800eac8:	b003      	add	sp, #12
 800eaca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eace:	f000 bf57 	b.w	800f980 <__malloc_unlock>
 800ead2:	42a3      	cmp	r3, r4
 800ead4:	d90b      	bls.n	800eaee <_free_r+0x4e>
 800ead6:	6821      	ldr	r1, [r4, #0]
 800ead8:	1862      	adds	r2, r4, r1
 800eada:	4293      	cmp	r3, r2
 800eadc:	bf04      	itt	eq
 800eade:	681a      	ldreq	r2, [r3, #0]
 800eae0:	685b      	ldreq	r3, [r3, #4]
 800eae2:	6063      	str	r3, [r4, #4]
 800eae4:	bf04      	itt	eq
 800eae6:	1852      	addeq	r2, r2, r1
 800eae8:	6022      	streq	r2, [r4, #0]
 800eaea:	602c      	str	r4, [r5, #0]
 800eaec:	e7ec      	b.n	800eac8 <_free_r+0x28>
 800eaee:	461a      	mov	r2, r3
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	b10b      	cbz	r3, 800eaf8 <_free_r+0x58>
 800eaf4:	42a3      	cmp	r3, r4
 800eaf6:	d9fa      	bls.n	800eaee <_free_r+0x4e>
 800eaf8:	6811      	ldr	r1, [r2, #0]
 800eafa:	1855      	adds	r5, r2, r1
 800eafc:	42a5      	cmp	r5, r4
 800eafe:	d10b      	bne.n	800eb18 <_free_r+0x78>
 800eb00:	6824      	ldr	r4, [r4, #0]
 800eb02:	4421      	add	r1, r4
 800eb04:	1854      	adds	r4, r2, r1
 800eb06:	42a3      	cmp	r3, r4
 800eb08:	6011      	str	r1, [r2, #0]
 800eb0a:	d1dd      	bne.n	800eac8 <_free_r+0x28>
 800eb0c:	681c      	ldr	r4, [r3, #0]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	6053      	str	r3, [r2, #4]
 800eb12:	4421      	add	r1, r4
 800eb14:	6011      	str	r1, [r2, #0]
 800eb16:	e7d7      	b.n	800eac8 <_free_r+0x28>
 800eb18:	d902      	bls.n	800eb20 <_free_r+0x80>
 800eb1a:	230c      	movs	r3, #12
 800eb1c:	6003      	str	r3, [r0, #0]
 800eb1e:	e7d3      	b.n	800eac8 <_free_r+0x28>
 800eb20:	6825      	ldr	r5, [r4, #0]
 800eb22:	1961      	adds	r1, r4, r5
 800eb24:	428b      	cmp	r3, r1
 800eb26:	bf04      	itt	eq
 800eb28:	6819      	ldreq	r1, [r3, #0]
 800eb2a:	685b      	ldreq	r3, [r3, #4]
 800eb2c:	6063      	str	r3, [r4, #4]
 800eb2e:	bf04      	itt	eq
 800eb30:	1949      	addeq	r1, r1, r5
 800eb32:	6021      	streq	r1, [r4, #0]
 800eb34:	6054      	str	r4, [r2, #4]
 800eb36:	e7c7      	b.n	800eac8 <_free_r+0x28>
 800eb38:	b003      	add	sp, #12
 800eb3a:	bd30      	pop	{r4, r5, pc}
 800eb3c:	20000274 	.word	0x20000274

0800eb40 <_malloc_r>:
 800eb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb42:	1ccd      	adds	r5, r1, #3
 800eb44:	f025 0503 	bic.w	r5, r5, #3
 800eb48:	3508      	adds	r5, #8
 800eb4a:	2d0c      	cmp	r5, #12
 800eb4c:	bf38      	it	cc
 800eb4e:	250c      	movcc	r5, #12
 800eb50:	2d00      	cmp	r5, #0
 800eb52:	4606      	mov	r6, r0
 800eb54:	db01      	blt.n	800eb5a <_malloc_r+0x1a>
 800eb56:	42a9      	cmp	r1, r5
 800eb58:	d903      	bls.n	800eb62 <_malloc_r+0x22>
 800eb5a:	230c      	movs	r3, #12
 800eb5c:	6033      	str	r3, [r6, #0]
 800eb5e:	2000      	movs	r0, #0
 800eb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb62:	f000 ff07 	bl	800f974 <__malloc_lock>
 800eb66:	4921      	ldr	r1, [pc, #132]	; (800ebec <_malloc_r+0xac>)
 800eb68:	680a      	ldr	r2, [r1, #0]
 800eb6a:	4614      	mov	r4, r2
 800eb6c:	b99c      	cbnz	r4, 800eb96 <_malloc_r+0x56>
 800eb6e:	4f20      	ldr	r7, [pc, #128]	; (800ebf0 <_malloc_r+0xb0>)
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	b923      	cbnz	r3, 800eb7e <_malloc_r+0x3e>
 800eb74:	4621      	mov	r1, r4
 800eb76:	4630      	mov	r0, r6
 800eb78:	f000 fc86 	bl	800f488 <_sbrk_r>
 800eb7c:	6038      	str	r0, [r7, #0]
 800eb7e:	4629      	mov	r1, r5
 800eb80:	4630      	mov	r0, r6
 800eb82:	f000 fc81 	bl	800f488 <_sbrk_r>
 800eb86:	1c43      	adds	r3, r0, #1
 800eb88:	d123      	bne.n	800ebd2 <_malloc_r+0x92>
 800eb8a:	230c      	movs	r3, #12
 800eb8c:	6033      	str	r3, [r6, #0]
 800eb8e:	4630      	mov	r0, r6
 800eb90:	f000 fef6 	bl	800f980 <__malloc_unlock>
 800eb94:	e7e3      	b.n	800eb5e <_malloc_r+0x1e>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	1b5b      	subs	r3, r3, r5
 800eb9a:	d417      	bmi.n	800ebcc <_malloc_r+0x8c>
 800eb9c:	2b0b      	cmp	r3, #11
 800eb9e:	d903      	bls.n	800eba8 <_malloc_r+0x68>
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	441c      	add	r4, r3
 800eba4:	6025      	str	r5, [r4, #0]
 800eba6:	e004      	b.n	800ebb2 <_malloc_r+0x72>
 800eba8:	6863      	ldr	r3, [r4, #4]
 800ebaa:	42a2      	cmp	r2, r4
 800ebac:	bf0c      	ite	eq
 800ebae:	600b      	streq	r3, [r1, #0]
 800ebb0:	6053      	strne	r3, [r2, #4]
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f000 fee4 	bl	800f980 <__malloc_unlock>
 800ebb8:	f104 000b 	add.w	r0, r4, #11
 800ebbc:	1d23      	adds	r3, r4, #4
 800ebbe:	f020 0007 	bic.w	r0, r0, #7
 800ebc2:	1ac2      	subs	r2, r0, r3
 800ebc4:	d0cc      	beq.n	800eb60 <_malloc_r+0x20>
 800ebc6:	1a1b      	subs	r3, r3, r0
 800ebc8:	50a3      	str	r3, [r4, r2]
 800ebca:	e7c9      	b.n	800eb60 <_malloc_r+0x20>
 800ebcc:	4622      	mov	r2, r4
 800ebce:	6864      	ldr	r4, [r4, #4]
 800ebd0:	e7cc      	b.n	800eb6c <_malloc_r+0x2c>
 800ebd2:	1cc4      	adds	r4, r0, #3
 800ebd4:	f024 0403 	bic.w	r4, r4, #3
 800ebd8:	42a0      	cmp	r0, r4
 800ebda:	d0e3      	beq.n	800eba4 <_malloc_r+0x64>
 800ebdc:	1a21      	subs	r1, r4, r0
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f000 fc52 	bl	800f488 <_sbrk_r>
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	d1dd      	bne.n	800eba4 <_malloc_r+0x64>
 800ebe8:	e7cf      	b.n	800eb8a <_malloc_r+0x4a>
 800ebea:	bf00      	nop
 800ebec:	20000274 	.word	0x20000274
 800ebf0:	20000278 	.word	0x20000278

0800ebf4 <__ssputs_r>:
 800ebf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf8:	688e      	ldr	r6, [r1, #8]
 800ebfa:	429e      	cmp	r6, r3
 800ebfc:	4682      	mov	sl, r0
 800ebfe:	460c      	mov	r4, r1
 800ec00:	4690      	mov	r8, r2
 800ec02:	461f      	mov	r7, r3
 800ec04:	d838      	bhi.n	800ec78 <__ssputs_r+0x84>
 800ec06:	898a      	ldrh	r2, [r1, #12]
 800ec08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec0c:	d032      	beq.n	800ec74 <__ssputs_r+0x80>
 800ec0e:	6825      	ldr	r5, [r4, #0]
 800ec10:	6909      	ldr	r1, [r1, #16]
 800ec12:	eba5 0901 	sub.w	r9, r5, r1
 800ec16:	6965      	ldr	r5, [r4, #20]
 800ec18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec20:	3301      	adds	r3, #1
 800ec22:	444b      	add	r3, r9
 800ec24:	106d      	asrs	r5, r5, #1
 800ec26:	429d      	cmp	r5, r3
 800ec28:	bf38      	it	cc
 800ec2a:	461d      	movcc	r5, r3
 800ec2c:	0553      	lsls	r3, r2, #21
 800ec2e:	d531      	bpl.n	800ec94 <__ssputs_r+0xa0>
 800ec30:	4629      	mov	r1, r5
 800ec32:	f7ff ff85 	bl	800eb40 <_malloc_r>
 800ec36:	4606      	mov	r6, r0
 800ec38:	b950      	cbnz	r0, 800ec50 <__ssputs_r+0x5c>
 800ec3a:	230c      	movs	r3, #12
 800ec3c:	f8ca 3000 	str.w	r3, [sl]
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec46:	81a3      	strh	r3, [r4, #12]
 800ec48:	f04f 30ff 	mov.w	r0, #4294967295
 800ec4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec50:	6921      	ldr	r1, [r4, #16]
 800ec52:	464a      	mov	r2, r9
 800ec54:	f7ff fd38 	bl	800e6c8 <memcpy>
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec62:	81a3      	strh	r3, [r4, #12]
 800ec64:	6126      	str	r6, [r4, #16]
 800ec66:	6165      	str	r5, [r4, #20]
 800ec68:	444e      	add	r6, r9
 800ec6a:	eba5 0509 	sub.w	r5, r5, r9
 800ec6e:	6026      	str	r6, [r4, #0]
 800ec70:	60a5      	str	r5, [r4, #8]
 800ec72:	463e      	mov	r6, r7
 800ec74:	42be      	cmp	r6, r7
 800ec76:	d900      	bls.n	800ec7a <__ssputs_r+0x86>
 800ec78:	463e      	mov	r6, r7
 800ec7a:	4632      	mov	r2, r6
 800ec7c:	6820      	ldr	r0, [r4, #0]
 800ec7e:	4641      	mov	r1, r8
 800ec80:	f7ff fd30 	bl	800e6e4 <memmove>
 800ec84:	68a3      	ldr	r3, [r4, #8]
 800ec86:	6822      	ldr	r2, [r4, #0]
 800ec88:	1b9b      	subs	r3, r3, r6
 800ec8a:	4432      	add	r2, r6
 800ec8c:	60a3      	str	r3, [r4, #8]
 800ec8e:	6022      	str	r2, [r4, #0]
 800ec90:	2000      	movs	r0, #0
 800ec92:	e7db      	b.n	800ec4c <__ssputs_r+0x58>
 800ec94:	462a      	mov	r2, r5
 800ec96:	f000 fe79 	bl	800f98c <_realloc_r>
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d1e1      	bne.n	800ec64 <__ssputs_r+0x70>
 800eca0:	6921      	ldr	r1, [r4, #16]
 800eca2:	4650      	mov	r0, sl
 800eca4:	f7ff fefc 	bl	800eaa0 <_free_r>
 800eca8:	e7c7      	b.n	800ec3a <__ssputs_r+0x46>
	...

0800ecac <_svfiprintf_r>:
 800ecac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb0:	4698      	mov	r8, r3
 800ecb2:	898b      	ldrh	r3, [r1, #12]
 800ecb4:	061b      	lsls	r3, r3, #24
 800ecb6:	b09d      	sub	sp, #116	; 0x74
 800ecb8:	4607      	mov	r7, r0
 800ecba:	460d      	mov	r5, r1
 800ecbc:	4614      	mov	r4, r2
 800ecbe:	d50e      	bpl.n	800ecde <_svfiprintf_r+0x32>
 800ecc0:	690b      	ldr	r3, [r1, #16]
 800ecc2:	b963      	cbnz	r3, 800ecde <_svfiprintf_r+0x32>
 800ecc4:	2140      	movs	r1, #64	; 0x40
 800ecc6:	f7ff ff3b 	bl	800eb40 <_malloc_r>
 800ecca:	6028      	str	r0, [r5, #0]
 800eccc:	6128      	str	r0, [r5, #16]
 800ecce:	b920      	cbnz	r0, 800ecda <_svfiprintf_r+0x2e>
 800ecd0:	230c      	movs	r3, #12
 800ecd2:	603b      	str	r3, [r7, #0]
 800ecd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd8:	e0d1      	b.n	800ee7e <_svfiprintf_r+0x1d2>
 800ecda:	2340      	movs	r3, #64	; 0x40
 800ecdc:	616b      	str	r3, [r5, #20]
 800ecde:	2300      	movs	r3, #0
 800ece0:	9309      	str	r3, [sp, #36]	; 0x24
 800ece2:	2320      	movs	r3, #32
 800ece4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ece8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecec:	2330      	movs	r3, #48	; 0x30
 800ecee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ee98 <_svfiprintf_r+0x1ec>
 800ecf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ecf6:	f04f 0901 	mov.w	r9, #1
 800ecfa:	4623      	mov	r3, r4
 800ecfc:	469a      	mov	sl, r3
 800ecfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed02:	b10a      	cbz	r2, 800ed08 <_svfiprintf_r+0x5c>
 800ed04:	2a25      	cmp	r2, #37	; 0x25
 800ed06:	d1f9      	bne.n	800ecfc <_svfiprintf_r+0x50>
 800ed08:	ebba 0b04 	subs.w	fp, sl, r4
 800ed0c:	d00b      	beq.n	800ed26 <_svfiprintf_r+0x7a>
 800ed0e:	465b      	mov	r3, fp
 800ed10:	4622      	mov	r2, r4
 800ed12:	4629      	mov	r1, r5
 800ed14:	4638      	mov	r0, r7
 800ed16:	f7ff ff6d 	bl	800ebf4 <__ssputs_r>
 800ed1a:	3001      	adds	r0, #1
 800ed1c:	f000 80aa 	beq.w	800ee74 <_svfiprintf_r+0x1c8>
 800ed20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed22:	445a      	add	r2, fp
 800ed24:	9209      	str	r2, [sp, #36]	; 0x24
 800ed26:	f89a 3000 	ldrb.w	r3, [sl]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f000 80a2 	beq.w	800ee74 <_svfiprintf_r+0x1c8>
 800ed30:	2300      	movs	r3, #0
 800ed32:	f04f 32ff 	mov.w	r2, #4294967295
 800ed36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed3a:	f10a 0a01 	add.w	sl, sl, #1
 800ed3e:	9304      	str	r3, [sp, #16]
 800ed40:	9307      	str	r3, [sp, #28]
 800ed42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed46:	931a      	str	r3, [sp, #104]	; 0x68
 800ed48:	4654      	mov	r4, sl
 800ed4a:	2205      	movs	r2, #5
 800ed4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed50:	4851      	ldr	r0, [pc, #324]	; (800ee98 <_svfiprintf_r+0x1ec>)
 800ed52:	f7f1 fa3d 	bl	80001d0 <memchr>
 800ed56:	9a04      	ldr	r2, [sp, #16]
 800ed58:	b9d8      	cbnz	r0, 800ed92 <_svfiprintf_r+0xe6>
 800ed5a:	06d0      	lsls	r0, r2, #27
 800ed5c:	bf44      	itt	mi
 800ed5e:	2320      	movmi	r3, #32
 800ed60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed64:	0711      	lsls	r1, r2, #28
 800ed66:	bf44      	itt	mi
 800ed68:	232b      	movmi	r3, #43	; 0x2b
 800ed6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed72:	2b2a      	cmp	r3, #42	; 0x2a
 800ed74:	d015      	beq.n	800eda2 <_svfiprintf_r+0xf6>
 800ed76:	9a07      	ldr	r2, [sp, #28]
 800ed78:	4654      	mov	r4, sl
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	f04f 0c0a 	mov.w	ip, #10
 800ed80:	4621      	mov	r1, r4
 800ed82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed86:	3b30      	subs	r3, #48	; 0x30
 800ed88:	2b09      	cmp	r3, #9
 800ed8a:	d94e      	bls.n	800ee2a <_svfiprintf_r+0x17e>
 800ed8c:	b1b0      	cbz	r0, 800edbc <_svfiprintf_r+0x110>
 800ed8e:	9207      	str	r2, [sp, #28]
 800ed90:	e014      	b.n	800edbc <_svfiprintf_r+0x110>
 800ed92:	eba0 0308 	sub.w	r3, r0, r8
 800ed96:	fa09 f303 	lsl.w	r3, r9, r3
 800ed9a:	4313      	orrs	r3, r2
 800ed9c:	9304      	str	r3, [sp, #16]
 800ed9e:	46a2      	mov	sl, r4
 800eda0:	e7d2      	b.n	800ed48 <_svfiprintf_r+0x9c>
 800eda2:	9b03      	ldr	r3, [sp, #12]
 800eda4:	1d19      	adds	r1, r3, #4
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	9103      	str	r1, [sp, #12]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	bfbb      	ittet	lt
 800edae:	425b      	neglt	r3, r3
 800edb0:	f042 0202 	orrlt.w	r2, r2, #2
 800edb4:	9307      	strge	r3, [sp, #28]
 800edb6:	9307      	strlt	r3, [sp, #28]
 800edb8:	bfb8      	it	lt
 800edba:	9204      	strlt	r2, [sp, #16]
 800edbc:	7823      	ldrb	r3, [r4, #0]
 800edbe:	2b2e      	cmp	r3, #46	; 0x2e
 800edc0:	d10c      	bne.n	800eddc <_svfiprintf_r+0x130>
 800edc2:	7863      	ldrb	r3, [r4, #1]
 800edc4:	2b2a      	cmp	r3, #42	; 0x2a
 800edc6:	d135      	bne.n	800ee34 <_svfiprintf_r+0x188>
 800edc8:	9b03      	ldr	r3, [sp, #12]
 800edca:	1d1a      	adds	r2, r3, #4
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	9203      	str	r2, [sp, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	bfb8      	it	lt
 800edd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800edd8:	3402      	adds	r4, #2
 800edda:	9305      	str	r3, [sp, #20]
 800eddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eea8 <_svfiprintf_r+0x1fc>
 800ede0:	7821      	ldrb	r1, [r4, #0]
 800ede2:	2203      	movs	r2, #3
 800ede4:	4650      	mov	r0, sl
 800ede6:	f7f1 f9f3 	bl	80001d0 <memchr>
 800edea:	b140      	cbz	r0, 800edfe <_svfiprintf_r+0x152>
 800edec:	2340      	movs	r3, #64	; 0x40
 800edee:	eba0 000a 	sub.w	r0, r0, sl
 800edf2:	fa03 f000 	lsl.w	r0, r3, r0
 800edf6:	9b04      	ldr	r3, [sp, #16]
 800edf8:	4303      	orrs	r3, r0
 800edfa:	3401      	adds	r4, #1
 800edfc:	9304      	str	r3, [sp, #16]
 800edfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee02:	4826      	ldr	r0, [pc, #152]	; (800ee9c <_svfiprintf_r+0x1f0>)
 800ee04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee08:	2206      	movs	r2, #6
 800ee0a:	f7f1 f9e1 	bl	80001d0 <memchr>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d038      	beq.n	800ee84 <_svfiprintf_r+0x1d8>
 800ee12:	4b23      	ldr	r3, [pc, #140]	; (800eea0 <_svfiprintf_r+0x1f4>)
 800ee14:	bb1b      	cbnz	r3, 800ee5e <_svfiprintf_r+0x1b2>
 800ee16:	9b03      	ldr	r3, [sp, #12]
 800ee18:	3307      	adds	r3, #7
 800ee1a:	f023 0307 	bic.w	r3, r3, #7
 800ee1e:	3308      	adds	r3, #8
 800ee20:	9303      	str	r3, [sp, #12]
 800ee22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee24:	4433      	add	r3, r6
 800ee26:	9309      	str	r3, [sp, #36]	; 0x24
 800ee28:	e767      	b.n	800ecfa <_svfiprintf_r+0x4e>
 800ee2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee2e:	460c      	mov	r4, r1
 800ee30:	2001      	movs	r0, #1
 800ee32:	e7a5      	b.n	800ed80 <_svfiprintf_r+0xd4>
 800ee34:	2300      	movs	r3, #0
 800ee36:	3401      	adds	r4, #1
 800ee38:	9305      	str	r3, [sp, #20]
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	f04f 0c0a 	mov.w	ip, #10
 800ee40:	4620      	mov	r0, r4
 800ee42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee46:	3a30      	subs	r2, #48	; 0x30
 800ee48:	2a09      	cmp	r2, #9
 800ee4a:	d903      	bls.n	800ee54 <_svfiprintf_r+0x1a8>
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d0c5      	beq.n	800eddc <_svfiprintf_r+0x130>
 800ee50:	9105      	str	r1, [sp, #20]
 800ee52:	e7c3      	b.n	800eddc <_svfiprintf_r+0x130>
 800ee54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee58:	4604      	mov	r4, r0
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e7f0      	b.n	800ee40 <_svfiprintf_r+0x194>
 800ee5e:	ab03      	add	r3, sp, #12
 800ee60:	9300      	str	r3, [sp, #0]
 800ee62:	462a      	mov	r2, r5
 800ee64:	4b0f      	ldr	r3, [pc, #60]	; (800eea4 <_svfiprintf_r+0x1f8>)
 800ee66:	a904      	add	r1, sp, #16
 800ee68:	4638      	mov	r0, r7
 800ee6a:	f3af 8000 	nop.w
 800ee6e:	1c42      	adds	r2, r0, #1
 800ee70:	4606      	mov	r6, r0
 800ee72:	d1d6      	bne.n	800ee22 <_svfiprintf_r+0x176>
 800ee74:	89ab      	ldrh	r3, [r5, #12]
 800ee76:	065b      	lsls	r3, r3, #25
 800ee78:	f53f af2c 	bmi.w	800ecd4 <_svfiprintf_r+0x28>
 800ee7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee7e:	b01d      	add	sp, #116	; 0x74
 800ee80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee84:	ab03      	add	r3, sp, #12
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	462a      	mov	r2, r5
 800ee8a:	4b06      	ldr	r3, [pc, #24]	; (800eea4 <_svfiprintf_r+0x1f8>)
 800ee8c:	a904      	add	r1, sp, #16
 800ee8e:	4638      	mov	r0, r7
 800ee90:	f000 f9d4 	bl	800f23c <_printf_i>
 800ee94:	e7eb      	b.n	800ee6e <_svfiprintf_r+0x1c2>
 800ee96:	bf00      	nop
 800ee98:	080126fc 	.word	0x080126fc
 800ee9c:	08012706 	.word	0x08012706
 800eea0:	00000000 	.word	0x00000000
 800eea4:	0800ebf5 	.word	0x0800ebf5
 800eea8:	08012702 	.word	0x08012702

0800eeac <__sfputc_r>:
 800eeac:	6893      	ldr	r3, [r2, #8]
 800eeae:	3b01      	subs	r3, #1
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	b410      	push	{r4}
 800eeb4:	6093      	str	r3, [r2, #8]
 800eeb6:	da08      	bge.n	800eeca <__sfputc_r+0x1e>
 800eeb8:	6994      	ldr	r4, [r2, #24]
 800eeba:	42a3      	cmp	r3, r4
 800eebc:	db01      	blt.n	800eec2 <__sfputc_r+0x16>
 800eebe:	290a      	cmp	r1, #10
 800eec0:	d103      	bne.n	800eeca <__sfputc_r+0x1e>
 800eec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eec6:	f000 bb33 	b.w	800f530 <__swbuf_r>
 800eeca:	6813      	ldr	r3, [r2, #0]
 800eecc:	1c58      	adds	r0, r3, #1
 800eece:	6010      	str	r0, [r2, #0]
 800eed0:	7019      	strb	r1, [r3, #0]
 800eed2:	4608      	mov	r0, r1
 800eed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eed8:	4770      	bx	lr

0800eeda <__sfputs_r>:
 800eeda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eedc:	4606      	mov	r6, r0
 800eede:	460f      	mov	r7, r1
 800eee0:	4614      	mov	r4, r2
 800eee2:	18d5      	adds	r5, r2, r3
 800eee4:	42ac      	cmp	r4, r5
 800eee6:	d101      	bne.n	800eeec <__sfputs_r+0x12>
 800eee8:	2000      	movs	r0, #0
 800eeea:	e007      	b.n	800eefc <__sfputs_r+0x22>
 800eeec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef0:	463a      	mov	r2, r7
 800eef2:	4630      	mov	r0, r6
 800eef4:	f7ff ffda 	bl	800eeac <__sfputc_r>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d1f3      	bne.n	800eee4 <__sfputs_r+0xa>
 800eefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef00 <_vfiprintf_r>:
 800ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	460d      	mov	r5, r1
 800ef06:	b09d      	sub	sp, #116	; 0x74
 800ef08:	4614      	mov	r4, r2
 800ef0a:	4698      	mov	r8, r3
 800ef0c:	4606      	mov	r6, r0
 800ef0e:	b118      	cbz	r0, 800ef18 <_vfiprintf_r+0x18>
 800ef10:	6983      	ldr	r3, [r0, #24]
 800ef12:	b90b      	cbnz	r3, 800ef18 <_vfiprintf_r+0x18>
 800ef14:	f7ff fd0a 	bl	800e92c <__sinit>
 800ef18:	4b89      	ldr	r3, [pc, #548]	; (800f140 <_vfiprintf_r+0x240>)
 800ef1a:	429d      	cmp	r5, r3
 800ef1c:	d11b      	bne.n	800ef56 <_vfiprintf_r+0x56>
 800ef1e:	6875      	ldr	r5, [r6, #4]
 800ef20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef22:	07d9      	lsls	r1, r3, #31
 800ef24:	d405      	bmi.n	800ef32 <_vfiprintf_r+0x32>
 800ef26:	89ab      	ldrh	r3, [r5, #12]
 800ef28:	059a      	lsls	r2, r3, #22
 800ef2a:	d402      	bmi.n	800ef32 <_vfiprintf_r+0x32>
 800ef2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef2e:	f7ff fdad 	bl	800ea8c <__retarget_lock_acquire_recursive>
 800ef32:	89ab      	ldrh	r3, [r5, #12]
 800ef34:	071b      	lsls	r3, r3, #28
 800ef36:	d501      	bpl.n	800ef3c <_vfiprintf_r+0x3c>
 800ef38:	692b      	ldr	r3, [r5, #16]
 800ef3a:	b9eb      	cbnz	r3, 800ef78 <_vfiprintf_r+0x78>
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4630      	mov	r0, r6
 800ef40:	f000 fb5a 	bl	800f5f8 <__swsetup_r>
 800ef44:	b1c0      	cbz	r0, 800ef78 <_vfiprintf_r+0x78>
 800ef46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef48:	07dc      	lsls	r4, r3, #31
 800ef4a:	d50e      	bpl.n	800ef6a <_vfiprintf_r+0x6a>
 800ef4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef50:	b01d      	add	sp, #116	; 0x74
 800ef52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef56:	4b7b      	ldr	r3, [pc, #492]	; (800f144 <_vfiprintf_r+0x244>)
 800ef58:	429d      	cmp	r5, r3
 800ef5a:	d101      	bne.n	800ef60 <_vfiprintf_r+0x60>
 800ef5c:	68b5      	ldr	r5, [r6, #8]
 800ef5e:	e7df      	b.n	800ef20 <_vfiprintf_r+0x20>
 800ef60:	4b79      	ldr	r3, [pc, #484]	; (800f148 <_vfiprintf_r+0x248>)
 800ef62:	429d      	cmp	r5, r3
 800ef64:	bf08      	it	eq
 800ef66:	68f5      	ldreq	r5, [r6, #12]
 800ef68:	e7da      	b.n	800ef20 <_vfiprintf_r+0x20>
 800ef6a:	89ab      	ldrh	r3, [r5, #12]
 800ef6c:	0598      	lsls	r0, r3, #22
 800ef6e:	d4ed      	bmi.n	800ef4c <_vfiprintf_r+0x4c>
 800ef70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef72:	f7ff fd8c 	bl	800ea8e <__retarget_lock_release_recursive>
 800ef76:	e7e9      	b.n	800ef4c <_vfiprintf_r+0x4c>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef7c:	2320      	movs	r3, #32
 800ef7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef86:	2330      	movs	r3, #48	; 0x30
 800ef88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f14c <_vfiprintf_r+0x24c>
 800ef8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef90:	f04f 0901 	mov.w	r9, #1
 800ef94:	4623      	mov	r3, r4
 800ef96:	469a      	mov	sl, r3
 800ef98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef9c:	b10a      	cbz	r2, 800efa2 <_vfiprintf_r+0xa2>
 800ef9e:	2a25      	cmp	r2, #37	; 0x25
 800efa0:	d1f9      	bne.n	800ef96 <_vfiprintf_r+0x96>
 800efa2:	ebba 0b04 	subs.w	fp, sl, r4
 800efa6:	d00b      	beq.n	800efc0 <_vfiprintf_r+0xc0>
 800efa8:	465b      	mov	r3, fp
 800efaa:	4622      	mov	r2, r4
 800efac:	4629      	mov	r1, r5
 800efae:	4630      	mov	r0, r6
 800efb0:	f7ff ff93 	bl	800eeda <__sfputs_r>
 800efb4:	3001      	adds	r0, #1
 800efb6:	f000 80aa 	beq.w	800f10e <_vfiprintf_r+0x20e>
 800efba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efbc:	445a      	add	r2, fp
 800efbe:	9209      	str	r2, [sp, #36]	; 0x24
 800efc0:	f89a 3000 	ldrb.w	r3, [sl]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f000 80a2 	beq.w	800f10e <_vfiprintf_r+0x20e>
 800efca:	2300      	movs	r3, #0
 800efcc:	f04f 32ff 	mov.w	r2, #4294967295
 800efd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efd4:	f10a 0a01 	add.w	sl, sl, #1
 800efd8:	9304      	str	r3, [sp, #16]
 800efda:	9307      	str	r3, [sp, #28]
 800efdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efe0:	931a      	str	r3, [sp, #104]	; 0x68
 800efe2:	4654      	mov	r4, sl
 800efe4:	2205      	movs	r2, #5
 800efe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efea:	4858      	ldr	r0, [pc, #352]	; (800f14c <_vfiprintf_r+0x24c>)
 800efec:	f7f1 f8f0 	bl	80001d0 <memchr>
 800eff0:	9a04      	ldr	r2, [sp, #16]
 800eff2:	b9d8      	cbnz	r0, 800f02c <_vfiprintf_r+0x12c>
 800eff4:	06d1      	lsls	r1, r2, #27
 800eff6:	bf44      	itt	mi
 800eff8:	2320      	movmi	r3, #32
 800effa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800effe:	0713      	lsls	r3, r2, #28
 800f000:	bf44      	itt	mi
 800f002:	232b      	movmi	r3, #43	; 0x2b
 800f004:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f008:	f89a 3000 	ldrb.w	r3, [sl]
 800f00c:	2b2a      	cmp	r3, #42	; 0x2a
 800f00e:	d015      	beq.n	800f03c <_vfiprintf_r+0x13c>
 800f010:	9a07      	ldr	r2, [sp, #28]
 800f012:	4654      	mov	r4, sl
 800f014:	2000      	movs	r0, #0
 800f016:	f04f 0c0a 	mov.w	ip, #10
 800f01a:	4621      	mov	r1, r4
 800f01c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f020:	3b30      	subs	r3, #48	; 0x30
 800f022:	2b09      	cmp	r3, #9
 800f024:	d94e      	bls.n	800f0c4 <_vfiprintf_r+0x1c4>
 800f026:	b1b0      	cbz	r0, 800f056 <_vfiprintf_r+0x156>
 800f028:	9207      	str	r2, [sp, #28]
 800f02a:	e014      	b.n	800f056 <_vfiprintf_r+0x156>
 800f02c:	eba0 0308 	sub.w	r3, r0, r8
 800f030:	fa09 f303 	lsl.w	r3, r9, r3
 800f034:	4313      	orrs	r3, r2
 800f036:	9304      	str	r3, [sp, #16]
 800f038:	46a2      	mov	sl, r4
 800f03a:	e7d2      	b.n	800efe2 <_vfiprintf_r+0xe2>
 800f03c:	9b03      	ldr	r3, [sp, #12]
 800f03e:	1d19      	adds	r1, r3, #4
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	9103      	str	r1, [sp, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	bfbb      	ittet	lt
 800f048:	425b      	neglt	r3, r3
 800f04a:	f042 0202 	orrlt.w	r2, r2, #2
 800f04e:	9307      	strge	r3, [sp, #28]
 800f050:	9307      	strlt	r3, [sp, #28]
 800f052:	bfb8      	it	lt
 800f054:	9204      	strlt	r2, [sp, #16]
 800f056:	7823      	ldrb	r3, [r4, #0]
 800f058:	2b2e      	cmp	r3, #46	; 0x2e
 800f05a:	d10c      	bne.n	800f076 <_vfiprintf_r+0x176>
 800f05c:	7863      	ldrb	r3, [r4, #1]
 800f05e:	2b2a      	cmp	r3, #42	; 0x2a
 800f060:	d135      	bne.n	800f0ce <_vfiprintf_r+0x1ce>
 800f062:	9b03      	ldr	r3, [sp, #12]
 800f064:	1d1a      	adds	r2, r3, #4
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	9203      	str	r2, [sp, #12]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	bfb8      	it	lt
 800f06e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f072:	3402      	adds	r4, #2
 800f074:	9305      	str	r3, [sp, #20]
 800f076:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f15c <_vfiprintf_r+0x25c>
 800f07a:	7821      	ldrb	r1, [r4, #0]
 800f07c:	2203      	movs	r2, #3
 800f07e:	4650      	mov	r0, sl
 800f080:	f7f1 f8a6 	bl	80001d0 <memchr>
 800f084:	b140      	cbz	r0, 800f098 <_vfiprintf_r+0x198>
 800f086:	2340      	movs	r3, #64	; 0x40
 800f088:	eba0 000a 	sub.w	r0, r0, sl
 800f08c:	fa03 f000 	lsl.w	r0, r3, r0
 800f090:	9b04      	ldr	r3, [sp, #16]
 800f092:	4303      	orrs	r3, r0
 800f094:	3401      	adds	r4, #1
 800f096:	9304      	str	r3, [sp, #16]
 800f098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09c:	482c      	ldr	r0, [pc, #176]	; (800f150 <_vfiprintf_r+0x250>)
 800f09e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0a2:	2206      	movs	r2, #6
 800f0a4:	f7f1 f894 	bl	80001d0 <memchr>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d03f      	beq.n	800f12c <_vfiprintf_r+0x22c>
 800f0ac:	4b29      	ldr	r3, [pc, #164]	; (800f154 <_vfiprintf_r+0x254>)
 800f0ae:	bb1b      	cbnz	r3, 800f0f8 <_vfiprintf_r+0x1f8>
 800f0b0:	9b03      	ldr	r3, [sp, #12]
 800f0b2:	3307      	adds	r3, #7
 800f0b4:	f023 0307 	bic.w	r3, r3, #7
 800f0b8:	3308      	adds	r3, #8
 800f0ba:	9303      	str	r3, [sp, #12]
 800f0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0be:	443b      	add	r3, r7
 800f0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0c2:	e767      	b.n	800ef94 <_vfiprintf_r+0x94>
 800f0c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0c8:	460c      	mov	r4, r1
 800f0ca:	2001      	movs	r0, #1
 800f0cc:	e7a5      	b.n	800f01a <_vfiprintf_r+0x11a>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	3401      	adds	r4, #1
 800f0d2:	9305      	str	r3, [sp, #20]
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	f04f 0c0a 	mov.w	ip, #10
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0e0:	3a30      	subs	r2, #48	; 0x30
 800f0e2:	2a09      	cmp	r2, #9
 800f0e4:	d903      	bls.n	800f0ee <_vfiprintf_r+0x1ee>
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d0c5      	beq.n	800f076 <_vfiprintf_r+0x176>
 800f0ea:	9105      	str	r1, [sp, #20]
 800f0ec:	e7c3      	b.n	800f076 <_vfiprintf_r+0x176>
 800f0ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e7f0      	b.n	800f0da <_vfiprintf_r+0x1da>
 800f0f8:	ab03      	add	r3, sp, #12
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	462a      	mov	r2, r5
 800f0fe:	4b16      	ldr	r3, [pc, #88]	; (800f158 <_vfiprintf_r+0x258>)
 800f100:	a904      	add	r1, sp, #16
 800f102:	4630      	mov	r0, r6
 800f104:	f3af 8000 	nop.w
 800f108:	4607      	mov	r7, r0
 800f10a:	1c78      	adds	r0, r7, #1
 800f10c:	d1d6      	bne.n	800f0bc <_vfiprintf_r+0x1bc>
 800f10e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f110:	07d9      	lsls	r1, r3, #31
 800f112:	d405      	bmi.n	800f120 <_vfiprintf_r+0x220>
 800f114:	89ab      	ldrh	r3, [r5, #12]
 800f116:	059a      	lsls	r2, r3, #22
 800f118:	d402      	bmi.n	800f120 <_vfiprintf_r+0x220>
 800f11a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f11c:	f7ff fcb7 	bl	800ea8e <__retarget_lock_release_recursive>
 800f120:	89ab      	ldrh	r3, [r5, #12]
 800f122:	065b      	lsls	r3, r3, #25
 800f124:	f53f af12 	bmi.w	800ef4c <_vfiprintf_r+0x4c>
 800f128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f12a:	e711      	b.n	800ef50 <_vfiprintf_r+0x50>
 800f12c:	ab03      	add	r3, sp, #12
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	462a      	mov	r2, r5
 800f132:	4b09      	ldr	r3, [pc, #36]	; (800f158 <_vfiprintf_r+0x258>)
 800f134:	a904      	add	r1, sp, #16
 800f136:	4630      	mov	r0, r6
 800f138:	f000 f880 	bl	800f23c <_printf_i>
 800f13c:	e7e4      	b.n	800f108 <_vfiprintf_r+0x208>
 800f13e:	bf00      	nop
 800f140:	080126bc 	.word	0x080126bc
 800f144:	080126dc 	.word	0x080126dc
 800f148:	0801269c 	.word	0x0801269c
 800f14c:	080126fc 	.word	0x080126fc
 800f150:	08012706 	.word	0x08012706
 800f154:	00000000 	.word	0x00000000
 800f158:	0800eedb 	.word	0x0800eedb
 800f15c:	08012702 	.word	0x08012702

0800f160 <_printf_common>:
 800f160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f164:	4616      	mov	r6, r2
 800f166:	4699      	mov	r9, r3
 800f168:	688a      	ldr	r2, [r1, #8]
 800f16a:	690b      	ldr	r3, [r1, #16]
 800f16c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f170:	4293      	cmp	r3, r2
 800f172:	bfb8      	it	lt
 800f174:	4613      	movlt	r3, r2
 800f176:	6033      	str	r3, [r6, #0]
 800f178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f17c:	4607      	mov	r7, r0
 800f17e:	460c      	mov	r4, r1
 800f180:	b10a      	cbz	r2, 800f186 <_printf_common+0x26>
 800f182:	3301      	adds	r3, #1
 800f184:	6033      	str	r3, [r6, #0]
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	0699      	lsls	r1, r3, #26
 800f18a:	bf42      	ittt	mi
 800f18c:	6833      	ldrmi	r3, [r6, #0]
 800f18e:	3302      	addmi	r3, #2
 800f190:	6033      	strmi	r3, [r6, #0]
 800f192:	6825      	ldr	r5, [r4, #0]
 800f194:	f015 0506 	ands.w	r5, r5, #6
 800f198:	d106      	bne.n	800f1a8 <_printf_common+0x48>
 800f19a:	f104 0a19 	add.w	sl, r4, #25
 800f19e:	68e3      	ldr	r3, [r4, #12]
 800f1a0:	6832      	ldr	r2, [r6, #0]
 800f1a2:	1a9b      	subs	r3, r3, r2
 800f1a4:	42ab      	cmp	r3, r5
 800f1a6:	dc26      	bgt.n	800f1f6 <_printf_common+0x96>
 800f1a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1ac:	1e13      	subs	r3, r2, #0
 800f1ae:	6822      	ldr	r2, [r4, #0]
 800f1b0:	bf18      	it	ne
 800f1b2:	2301      	movne	r3, #1
 800f1b4:	0692      	lsls	r2, r2, #26
 800f1b6:	d42b      	bmi.n	800f210 <_printf_common+0xb0>
 800f1b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1bc:	4649      	mov	r1, r9
 800f1be:	4638      	mov	r0, r7
 800f1c0:	47c0      	blx	r8
 800f1c2:	3001      	adds	r0, #1
 800f1c4:	d01e      	beq.n	800f204 <_printf_common+0xa4>
 800f1c6:	6823      	ldr	r3, [r4, #0]
 800f1c8:	68e5      	ldr	r5, [r4, #12]
 800f1ca:	6832      	ldr	r2, [r6, #0]
 800f1cc:	f003 0306 	and.w	r3, r3, #6
 800f1d0:	2b04      	cmp	r3, #4
 800f1d2:	bf08      	it	eq
 800f1d4:	1aad      	subeq	r5, r5, r2
 800f1d6:	68a3      	ldr	r3, [r4, #8]
 800f1d8:	6922      	ldr	r2, [r4, #16]
 800f1da:	bf0c      	ite	eq
 800f1dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1e0:	2500      	movne	r5, #0
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	bfc4      	itt	gt
 800f1e6:	1a9b      	subgt	r3, r3, r2
 800f1e8:	18ed      	addgt	r5, r5, r3
 800f1ea:	2600      	movs	r6, #0
 800f1ec:	341a      	adds	r4, #26
 800f1ee:	42b5      	cmp	r5, r6
 800f1f0:	d11a      	bne.n	800f228 <_printf_common+0xc8>
 800f1f2:	2000      	movs	r0, #0
 800f1f4:	e008      	b.n	800f208 <_printf_common+0xa8>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	4652      	mov	r2, sl
 800f1fa:	4649      	mov	r1, r9
 800f1fc:	4638      	mov	r0, r7
 800f1fe:	47c0      	blx	r8
 800f200:	3001      	adds	r0, #1
 800f202:	d103      	bne.n	800f20c <_printf_common+0xac>
 800f204:	f04f 30ff 	mov.w	r0, #4294967295
 800f208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f20c:	3501      	adds	r5, #1
 800f20e:	e7c6      	b.n	800f19e <_printf_common+0x3e>
 800f210:	18e1      	adds	r1, r4, r3
 800f212:	1c5a      	adds	r2, r3, #1
 800f214:	2030      	movs	r0, #48	; 0x30
 800f216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f21a:	4422      	add	r2, r4
 800f21c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f224:	3302      	adds	r3, #2
 800f226:	e7c7      	b.n	800f1b8 <_printf_common+0x58>
 800f228:	2301      	movs	r3, #1
 800f22a:	4622      	mov	r2, r4
 800f22c:	4649      	mov	r1, r9
 800f22e:	4638      	mov	r0, r7
 800f230:	47c0      	blx	r8
 800f232:	3001      	adds	r0, #1
 800f234:	d0e6      	beq.n	800f204 <_printf_common+0xa4>
 800f236:	3601      	adds	r6, #1
 800f238:	e7d9      	b.n	800f1ee <_printf_common+0x8e>
	...

0800f23c <_printf_i>:
 800f23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f240:	460c      	mov	r4, r1
 800f242:	4691      	mov	r9, r2
 800f244:	7e27      	ldrb	r7, [r4, #24]
 800f246:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f248:	2f78      	cmp	r7, #120	; 0x78
 800f24a:	4680      	mov	r8, r0
 800f24c:	469a      	mov	sl, r3
 800f24e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f252:	d807      	bhi.n	800f264 <_printf_i+0x28>
 800f254:	2f62      	cmp	r7, #98	; 0x62
 800f256:	d80a      	bhi.n	800f26e <_printf_i+0x32>
 800f258:	2f00      	cmp	r7, #0
 800f25a:	f000 80d8 	beq.w	800f40e <_printf_i+0x1d2>
 800f25e:	2f58      	cmp	r7, #88	; 0x58
 800f260:	f000 80a3 	beq.w	800f3aa <_printf_i+0x16e>
 800f264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f26c:	e03a      	b.n	800f2e4 <_printf_i+0xa8>
 800f26e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f272:	2b15      	cmp	r3, #21
 800f274:	d8f6      	bhi.n	800f264 <_printf_i+0x28>
 800f276:	a001      	add	r0, pc, #4	; (adr r0, 800f27c <_printf_i+0x40>)
 800f278:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f27c:	0800f2d5 	.word	0x0800f2d5
 800f280:	0800f2e9 	.word	0x0800f2e9
 800f284:	0800f265 	.word	0x0800f265
 800f288:	0800f265 	.word	0x0800f265
 800f28c:	0800f265 	.word	0x0800f265
 800f290:	0800f265 	.word	0x0800f265
 800f294:	0800f2e9 	.word	0x0800f2e9
 800f298:	0800f265 	.word	0x0800f265
 800f29c:	0800f265 	.word	0x0800f265
 800f2a0:	0800f265 	.word	0x0800f265
 800f2a4:	0800f265 	.word	0x0800f265
 800f2a8:	0800f3f5 	.word	0x0800f3f5
 800f2ac:	0800f319 	.word	0x0800f319
 800f2b0:	0800f3d7 	.word	0x0800f3d7
 800f2b4:	0800f265 	.word	0x0800f265
 800f2b8:	0800f265 	.word	0x0800f265
 800f2bc:	0800f417 	.word	0x0800f417
 800f2c0:	0800f265 	.word	0x0800f265
 800f2c4:	0800f319 	.word	0x0800f319
 800f2c8:	0800f265 	.word	0x0800f265
 800f2cc:	0800f265 	.word	0x0800f265
 800f2d0:	0800f3df 	.word	0x0800f3df
 800f2d4:	680b      	ldr	r3, [r1, #0]
 800f2d6:	1d1a      	adds	r2, r3, #4
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	600a      	str	r2, [r1, #0]
 800f2dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f2e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e0a3      	b.n	800f430 <_printf_i+0x1f4>
 800f2e8:	6825      	ldr	r5, [r4, #0]
 800f2ea:	6808      	ldr	r0, [r1, #0]
 800f2ec:	062e      	lsls	r6, r5, #24
 800f2ee:	f100 0304 	add.w	r3, r0, #4
 800f2f2:	d50a      	bpl.n	800f30a <_printf_i+0xce>
 800f2f4:	6805      	ldr	r5, [r0, #0]
 800f2f6:	600b      	str	r3, [r1, #0]
 800f2f8:	2d00      	cmp	r5, #0
 800f2fa:	da03      	bge.n	800f304 <_printf_i+0xc8>
 800f2fc:	232d      	movs	r3, #45	; 0x2d
 800f2fe:	426d      	negs	r5, r5
 800f300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f304:	485e      	ldr	r0, [pc, #376]	; (800f480 <_printf_i+0x244>)
 800f306:	230a      	movs	r3, #10
 800f308:	e019      	b.n	800f33e <_printf_i+0x102>
 800f30a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f30e:	6805      	ldr	r5, [r0, #0]
 800f310:	600b      	str	r3, [r1, #0]
 800f312:	bf18      	it	ne
 800f314:	b22d      	sxthne	r5, r5
 800f316:	e7ef      	b.n	800f2f8 <_printf_i+0xbc>
 800f318:	680b      	ldr	r3, [r1, #0]
 800f31a:	6825      	ldr	r5, [r4, #0]
 800f31c:	1d18      	adds	r0, r3, #4
 800f31e:	6008      	str	r0, [r1, #0]
 800f320:	0628      	lsls	r0, r5, #24
 800f322:	d501      	bpl.n	800f328 <_printf_i+0xec>
 800f324:	681d      	ldr	r5, [r3, #0]
 800f326:	e002      	b.n	800f32e <_printf_i+0xf2>
 800f328:	0669      	lsls	r1, r5, #25
 800f32a:	d5fb      	bpl.n	800f324 <_printf_i+0xe8>
 800f32c:	881d      	ldrh	r5, [r3, #0]
 800f32e:	4854      	ldr	r0, [pc, #336]	; (800f480 <_printf_i+0x244>)
 800f330:	2f6f      	cmp	r7, #111	; 0x6f
 800f332:	bf0c      	ite	eq
 800f334:	2308      	moveq	r3, #8
 800f336:	230a      	movne	r3, #10
 800f338:	2100      	movs	r1, #0
 800f33a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f33e:	6866      	ldr	r6, [r4, #4]
 800f340:	60a6      	str	r6, [r4, #8]
 800f342:	2e00      	cmp	r6, #0
 800f344:	bfa2      	ittt	ge
 800f346:	6821      	ldrge	r1, [r4, #0]
 800f348:	f021 0104 	bicge.w	r1, r1, #4
 800f34c:	6021      	strge	r1, [r4, #0]
 800f34e:	b90d      	cbnz	r5, 800f354 <_printf_i+0x118>
 800f350:	2e00      	cmp	r6, #0
 800f352:	d04d      	beq.n	800f3f0 <_printf_i+0x1b4>
 800f354:	4616      	mov	r6, r2
 800f356:	fbb5 f1f3 	udiv	r1, r5, r3
 800f35a:	fb03 5711 	mls	r7, r3, r1, r5
 800f35e:	5dc7      	ldrb	r7, [r0, r7]
 800f360:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f364:	462f      	mov	r7, r5
 800f366:	42bb      	cmp	r3, r7
 800f368:	460d      	mov	r5, r1
 800f36a:	d9f4      	bls.n	800f356 <_printf_i+0x11a>
 800f36c:	2b08      	cmp	r3, #8
 800f36e:	d10b      	bne.n	800f388 <_printf_i+0x14c>
 800f370:	6823      	ldr	r3, [r4, #0]
 800f372:	07df      	lsls	r7, r3, #31
 800f374:	d508      	bpl.n	800f388 <_printf_i+0x14c>
 800f376:	6923      	ldr	r3, [r4, #16]
 800f378:	6861      	ldr	r1, [r4, #4]
 800f37a:	4299      	cmp	r1, r3
 800f37c:	bfde      	ittt	le
 800f37e:	2330      	movle	r3, #48	; 0x30
 800f380:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f384:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f388:	1b92      	subs	r2, r2, r6
 800f38a:	6122      	str	r2, [r4, #16]
 800f38c:	f8cd a000 	str.w	sl, [sp]
 800f390:	464b      	mov	r3, r9
 800f392:	aa03      	add	r2, sp, #12
 800f394:	4621      	mov	r1, r4
 800f396:	4640      	mov	r0, r8
 800f398:	f7ff fee2 	bl	800f160 <_printf_common>
 800f39c:	3001      	adds	r0, #1
 800f39e:	d14c      	bne.n	800f43a <_printf_i+0x1fe>
 800f3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a4:	b004      	add	sp, #16
 800f3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3aa:	4835      	ldr	r0, [pc, #212]	; (800f480 <_printf_i+0x244>)
 800f3ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f3b0:	6823      	ldr	r3, [r4, #0]
 800f3b2:	680e      	ldr	r6, [r1, #0]
 800f3b4:	061f      	lsls	r7, r3, #24
 800f3b6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f3ba:	600e      	str	r6, [r1, #0]
 800f3bc:	d514      	bpl.n	800f3e8 <_printf_i+0x1ac>
 800f3be:	07d9      	lsls	r1, r3, #31
 800f3c0:	bf44      	itt	mi
 800f3c2:	f043 0320 	orrmi.w	r3, r3, #32
 800f3c6:	6023      	strmi	r3, [r4, #0]
 800f3c8:	b91d      	cbnz	r5, 800f3d2 <_printf_i+0x196>
 800f3ca:	6823      	ldr	r3, [r4, #0]
 800f3cc:	f023 0320 	bic.w	r3, r3, #32
 800f3d0:	6023      	str	r3, [r4, #0]
 800f3d2:	2310      	movs	r3, #16
 800f3d4:	e7b0      	b.n	800f338 <_printf_i+0xfc>
 800f3d6:	6823      	ldr	r3, [r4, #0]
 800f3d8:	f043 0320 	orr.w	r3, r3, #32
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	2378      	movs	r3, #120	; 0x78
 800f3e0:	4828      	ldr	r0, [pc, #160]	; (800f484 <_printf_i+0x248>)
 800f3e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3e6:	e7e3      	b.n	800f3b0 <_printf_i+0x174>
 800f3e8:	065e      	lsls	r6, r3, #25
 800f3ea:	bf48      	it	mi
 800f3ec:	b2ad      	uxthmi	r5, r5
 800f3ee:	e7e6      	b.n	800f3be <_printf_i+0x182>
 800f3f0:	4616      	mov	r6, r2
 800f3f2:	e7bb      	b.n	800f36c <_printf_i+0x130>
 800f3f4:	680b      	ldr	r3, [r1, #0]
 800f3f6:	6826      	ldr	r6, [r4, #0]
 800f3f8:	6960      	ldr	r0, [r4, #20]
 800f3fa:	1d1d      	adds	r5, r3, #4
 800f3fc:	600d      	str	r5, [r1, #0]
 800f3fe:	0635      	lsls	r5, r6, #24
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	d501      	bpl.n	800f408 <_printf_i+0x1cc>
 800f404:	6018      	str	r0, [r3, #0]
 800f406:	e002      	b.n	800f40e <_printf_i+0x1d2>
 800f408:	0671      	lsls	r1, r6, #25
 800f40a:	d5fb      	bpl.n	800f404 <_printf_i+0x1c8>
 800f40c:	8018      	strh	r0, [r3, #0]
 800f40e:	2300      	movs	r3, #0
 800f410:	6123      	str	r3, [r4, #16]
 800f412:	4616      	mov	r6, r2
 800f414:	e7ba      	b.n	800f38c <_printf_i+0x150>
 800f416:	680b      	ldr	r3, [r1, #0]
 800f418:	1d1a      	adds	r2, r3, #4
 800f41a:	600a      	str	r2, [r1, #0]
 800f41c:	681e      	ldr	r6, [r3, #0]
 800f41e:	6862      	ldr	r2, [r4, #4]
 800f420:	2100      	movs	r1, #0
 800f422:	4630      	mov	r0, r6
 800f424:	f7f0 fed4 	bl	80001d0 <memchr>
 800f428:	b108      	cbz	r0, 800f42e <_printf_i+0x1f2>
 800f42a:	1b80      	subs	r0, r0, r6
 800f42c:	6060      	str	r0, [r4, #4]
 800f42e:	6863      	ldr	r3, [r4, #4]
 800f430:	6123      	str	r3, [r4, #16]
 800f432:	2300      	movs	r3, #0
 800f434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f438:	e7a8      	b.n	800f38c <_printf_i+0x150>
 800f43a:	6923      	ldr	r3, [r4, #16]
 800f43c:	4632      	mov	r2, r6
 800f43e:	4649      	mov	r1, r9
 800f440:	4640      	mov	r0, r8
 800f442:	47d0      	blx	sl
 800f444:	3001      	adds	r0, #1
 800f446:	d0ab      	beq.n	800f3a0 <_printf_i+0x164>
 800f448:	6823      	ldr	r3, [r4, #0]
 800f44a:	079b      	lsls	r3, r3, #30
 800f44c:	d413      	bmi.n	800f476 <_printf_i+0x23a>
 800f44e:	68e0      	ldr	r0, [r4, #12]
 800f450:	9b03      	ldr	r3, [sp, #12]
 800f452:	4298      	cmp	r0, r3
 800f454:	bfb8      	it	lt
 800f456:	4618      	movlt	r0, r3
 800f458:	e7a4      	b.n	800f3a4 <_printf_i+0x168>
 800f45a:	2301      	movs	r3, #1
 800f45c:	4632      	mov	r2, r6
 800f45e:	4649      	mov	r1, r9
 800f460:	4640      	mov	r0, r8
 800f462:	47d0      	blx	sl
 800f464:	3001      	adds	r0, #1
 800f466:	d09b      	beq.n	800f3a0 <_printf_i+0x164>
 800f468:	3501      	adds	r5, #1
 800f46a:	68e3      	ldr	r3, [r4, #12]
 800f46c:	9903      	ldr	r1, [sp, #12]
 800f46e:	1a5b      	subs	r3, r3, r1
 800f470:	42ab      	cmp	r3, r5
 800f472:	dcf2      	bgt.n	800f45a <_printf_i+0x21e>
 800f474:	e7eb      	b.n	800f44e <_printf_i+0x212>
 800f476:	2500      	movs	r5, #0
 800f478:	f104 0619 	add.w	r6, r4, #25
 800f47c:	e7f5      	b.n	800f46a <_printf_i+0x22e>
 800f47e:	bf00      	nop
 800f480:	0801270d 	.word	0x0801270d
 800f484:	0801271e 	.word	0x0801271e

0800f488 <_sbrk_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	4d06      	ldr	r5, [pc, #24]	; (800f4a4 <_sbrk_r+0x1c>)
 800f48c:	2300      	movs	r3, #0
 800f48e:	4604      	mov	r4, r0
 800f490:	4608      	mov	r0, r1
 800f492:	602b      	str	r3, [r5, #0]
 800f494:	f7f1 fd14 	bl	8000ec0 <_sbrk>
 800f498:	1c43      	adds	r3, r0, #1
 800f49a:	d102      	bne.n	800f4a2 <_sbrk_r+0x1a>
 800f49c:	682b      	ldr	r3, [r5, #0]
 800f49e:	b103      	cbz	r3, 800f4a2 <_sbrk_r+0x1a>
 800f4a0:	6023      	str	r3, [r4, #0]
 800f4a2:	bd38      	pop	{r3, r4, r5, pc}
 800f4a4:	20008bd0 	.word	0x20008bd0

0800f4a8 <__sread>:
 800f4a8:	b510      	push	{r4, lr}
 800f4aa:	460c      	mov	r4, r1
 800f4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4b0:	f000 fa92 	bl	800f9d8 <_read_r>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	bfab      	itete	ge
 800f4b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4ba:	89a3      	ldrhlt	r3, [r4, #12]
 800f4bc:	181b      	addge	r3, r3, r0
 800f4be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f4c2:	bfac      	ite	ge
 800f4c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f4c6:	81a3      	strhlt	r3, [r4, #12]
 800f4c8:	bd10      	pop	{r4, pc}

0800f4ca <__swrite>:
 800f4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ce:	461f      	mov	r7, r3
 800f4d0:	898b      	ldrh	r3, [r1, #12]
 800f4d2:	05db      	lsls	r3, r3, #23
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	460c      	mov	r4, r1
 800f4d8:	4616      	mov	r6, r2
 800f4da:	d505      	bpl.n	800f4e8 <__swrite+0x1e>
 800f4dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e0:	2302      	movs	r3, #2
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f000 f9d0 	bl	800f888 <_lseek_r>
 800f4e8:	89a3      	ldrh	r3, [r4, #12]
 800f4ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4f2:	81a3      	strh	r3, [r4, #12]
 800f4f4:	4632      	mov	r2, r6
 800f4f6:	463b      	mov	r3, r7
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4fe:	f000 b869 	b.w	800f5d4 <_write_r>

0800f502 <__sseek>:
 800f502:	b510      	push	{r4, lr}
 800f504:	460c      	mov	r4, r1
 800f506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f50a:	f000 f9bd 	bl	800f888 <_lseek_r>
 800f50e:	1c43      	adds	r3, r0, #1
 800f510:	89a3      	ldrh	r3, [r4, #12]
 800f512:	bf15      	itete	ne
 800f514:	6560      	strne	r0, [r4, #84]	; 0x54
 800f516:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f51a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f51e:	81a3      	strheq	r3, [r4, #12]
 800f520:	bf18      	it	ne
 800f522:	81a3      	strhne	r3, [r4, #12]
 800f524:	bd10      	pop	{r4, pc}

0800f526 <__sclose>:
 800f526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f52a:	f000 b8db 	b.w	800f6e4 <_close_r>
	...

0800f530 <__swbuf_r>:
 800f530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f532:	460e      	mov	r6, r1
 800f534:	4614      	mov	r4, r2
 800f536:	4605      	mov	r5, r0
 800f538:	b118      	cbz	r0, 800f542 <__swbuf_r+0x12>
 800f53a:	6983      	ldr	r3, [r0, #24]
 800f53c:	b90b      	cbnz	r3, 800f542 <__swbuf_r+0x12>
 800f53e:	f7ff f9f5 	bl	800e92c <__sinit>
 800f542:	4b21      	ldr	r3, [pc, #132]	; (800f5c8 <__swbuf_r+0x98>)
 800f544:	429c      	cmp	r4, r3
 800f546:	d12b      	bne.n	800f5a0 <__swbuf_r+0x70>
 800f548:	686c      	ldr	r4, [r5, #4]
 800f54a:	69a3      	ldr	r3, [r4, #24]
 800f54c:	60a3      	str	r3, [r4, #8]
 800f54e:	89a3      	ldrh	r3, [r4, #12]
 800f550:	071a      	lsls	r2, r3, #28
 800f552:	d52f      	bpl.n	800f5b4 <__swbuf_r+0x84>
 800f554:	6923      	ldr	r3, [r4, #16]
 800f556:	b36b      	cbz	r3, 800f5b4 <__swbuf_r+0x84>
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	6820      	ldr	r0, [r4, #0]
 800f55c:	1ac0      	subs	r0, r0, r3
 800f55e:	6963      	ldr	r3, [r4, #20]
 800f560:	b2f6      	uxtb	r6, r6
 800f562:	4283      	cmp	r3, r0
 800f564:	4637      	mov	r7, r6
 800f566:	dc04      	bgt.n	800f572 <__swbuf_r+0x42>
 800f568:	4621      	mov	r1, r4
 800f56a:	4628      	mov	r0, r5
 800f56c:	f000 f950 	bl	800f810 <_fflush_r>
 800f570:	bb30      	cbnz	r0, 800f5c0 <__swbuf_r+0x90>
 800f572:	68a3      	ldr	r3, [r4, #8]
 800f574:	3b01      	subs	r3, #1
 800f576:	60a3      	str	r3, [r4, #8]
 800f578:	6823      	ldr	r3, [r4, #0]
 800f57a:	1c5a      	adds	r2, r3, #1
 800f57c:	6022      	str	r2, [r4, #0]
 800f57e:	701e      	strb	r6, [r3, #0]
 800f580:	6963      	ldr	r3, [r4, #20]
 800f582:	3001      	adds	r0, #1
 800f584:	4283      	cmp	r3, r0
 800f586:	d004      	beq.n	800f592 <__swbuf_r+0x62>
 800f588:	89a3      	ldrh	r3, [r4, #12]
 800f58a:	07db      	lsls	r3, r3, #31
 800f58c:	d506      	bpl.n	800f59c <__swbuf_r+0x6c>
 800f58e:	2e0a      	cmp	r6, #10
 800f590:	d104      	bne.n	800f59c <__swbuf_r+0x6c>
 800f592:	4621      	mov	r1, r4
 800f594:	4628      	mov	r0, r5
 800f596:	f000 f93b 	bl	800f810 <_fflush_r>
 800f59a:	b988      	cbnz	r0, 800f5c0 <__swbuf_r+0x90>
 800f59c:	4638      	mov	r0, r7
 800f59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5a0:	4b0a      	ldr	r3, [pc, #40]	; (800f5cc <__swbuf_r+0x9c>)
 800f5a2:	429c      	cmp	r4, r3
 800f5a4:	d101      	bne.n	800f5aa <__swbuf_r+0x7a>
 800f5a6:	68ac      	ldr	r4, [r5, #8]
 800f5a8:	e7cf      	b.n	800f54a <__swbuf_r+0x1a>
 800f5aa:	4b09      	ldr	r3, [pc, #36]	; (800f5d0 <__swbuf_r+0xa0>)
 800f5ac:	429c      	cmp	r4, r3
 800f5ae:	bf08      	it	eq
 800f5b0:	68ec      	ldreq	r4, [r5, #12]
 800f5b2:	e7ca      	b.n	800f54a <__swbuf_r+0x1a>
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	4628      	mov	r0, r5
 800f5b8:	f000 f81e 	bl	800f5f8 <__swsetup_r>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d0cb      	beq.n	800f558 <__swbuf_r+0x28>
 800f5c0:	f04f 37ff 	mov.w	r7, #4294967295
 800f5c4:	e7ea      	b.n	800f59c <__swbuf_r+0x6c>
 800f5c6:	bf00      	nop
 800f5c8:	080126bc 	.word	0x080126bc
 800f5cc:	080126dc 	.word	0x080126dc
 800f5d0:	0801269c 	.word	0x0801269c

0800f5d4 <_write_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d07      	ldr	r5, [pc, #28]	; (800f5f4 <_write_r+0x20>)
 800f5d8:	4604      	mov	r4, r0
 800f5da:	4608      	mov	r0, r1
 800f5dc:	4611      	mov	r1, r2
 800f5de:	2200      	movs	r2, #0
 800f5e0:	602a      	str	r2, [r5, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	f7f1 fc1b 	bl	8000e1e <_write>
 800f5e8:	1c43      	adds	r3, r0, #1
 800f5ea:	d102      	bne.n	800f5f2 <_write_r+0x1e>
 800f5ec:	682b      	ldr	r3, [r5, #0]
 800f5ee:	b103      	cbz	r3, 800f5f2 <_write_r+0x1e>
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}
 800f5f4:	20008bd0 	.word	0x20008bd0

0800f5f8 <__swsetup_r>:
 800f5f8:	4b32      	ldr	r3, [pc, #200]	; (800f6c4 <__swsetup_r+0xcc>)
 800f5fa:	b570      	push	{r4, r5, r6, lr}
 800f5fc:	681d      	ldr	r5, [r3, #0]
 800f5fe:	4606      	mov	r6, r0
 800f600:	460c      	mov	r4, r1
 800f602:	b125      	cbz	r5, 800f60e <__swsetup_r+0x16>
 800f604:	69ab      	ldr	r3, [r5, #24]
 800f606:	b913      	cbnz	r3, 800f60e <__swsetup_r+0x16>
 800f608:	4628      	mov	r0, r5
 800f60a:	f7ff f98f 	bl	800e92c <__sinit>
 800f60e:	4b2e      	ldr	r3, [pc, #184]	; (800f6c8 <__swsetup_r+0xd0>)
 800f610:	429c      	cmp	r4, r3
 800f612:	d10f      	bne.n	800f634 <__swsetup_r+0x3c>
 800f614:	686c      	ldr	r4, [r5, #4]
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f61c:	0719      	lsls	r1, r3, #28
 800f61e:	d42c      	bmi.n	800f67a <__swsetup_r+0x82>
 800f620:	06dd      	lsls	r5, r3, #27
 800f622:	d411      	bmi.n	800f648 <__swsetup_r+0x50>
 800f624:	2309      	movs	r3, #9
 800f626:	6033      	str	r3, [r6, #0]
 800f628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f62c:	81a3      	strh	r3, [r4, #12]
 800f62e:	f04f 30ff 	mov.w	r0, #4294967295
 800f632:	e03e      	b.n	800f6b2 <__swsetup_r+0xba>
 800f634:	4b25      	ldr	r3, [pc, #148]	; (800f6cc <__swsetup_r+0xd4>)
 800f636:	429c      	cmp	r4, r3
 800f638:	d101      	bne.n	800f63e <__swsetup_r+0x46>
 800f63a:	68ac      	ldr	r4, [r5, #8]
 800f63c:	e7eb      	b.n	800f616 <__swsetup_r+0x1e>
 800f63e:	4b24      	ldr	r3, [pc, #144]	; (800f6d0 <__swsetup_r+0xd8>)
 800f640:	429c      	cmp	r4, r3
 800f642:	bf08      	it	eq
 800f644:	68ec      	ldreq	r4, [r5, #12]
 800f646:	e7e6      	b.n	800f616 <__swsetup_r+0x1e>
 800f648:	0758      	lsls	r0, r3, #29
 800f64a:	d512      	bpl.n	800f672 <__swsetup_r+0x7a>
 800f64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f64e:	b141      	cbz	r1, 800f662 <__swsetup_r+0x6a>
 800f650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f654:	4299      	cmp	r1, r3
 800f656:	d002      	beq.n	800f65e <__swsetup_r+0x66>
 800f658:	4630      	mov	r0, r6
 800f65a:	f7ff fa21 	bl	800eaa0 <_free_r>
 800f65e:	2300      	movs	r3, #0
 800f660:	6363      	str	r3, [r4, #52]	; 0x34
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f668:	81a3      	strh	r3, [r4, #12]
 800f66a:	2300      	movs	r3, #0
 800f66c:	6063      	str	r3, [r4, #4]
 800f66e:	6923      	ldr	r3, [r4, #16]
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	f043 0308 	orr.w	r3, r3, #8
 800f678:	81a3      	strh	r3, [r4, #12]
 800f67a:	6923      	ldr	r3, [r4, #16]
 800f67c:	b94b      	cbnz	r3, 800f692 <__swsetup_r+0x9a>
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f688:	d003      	beq.n	800f692 <__swsetup_r+0x9a>
 800f68a:	4621      	mov	r1, r4
 800f68c:	4630      	mov	r0, r6
 800f68e:	f000 f931 	bl	800f8f4 <__smakebuf_r>
 800f692:	89a0      	ldrh	r0, [r4, #12]
 800f694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f698:	f010 0301 	ands.w	r3, r0, #1
 800f69c:	d00a      	beq.n	800f6b4 <__swsetup_r+0xbc>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	60a3      	str	r3, [r4, #8]
 800f6a2:	6963      	ldr	r3, [r4, #20]
 800f6a4:	425b      	negs	r3, r3
 800f6a6:	61a3      	str	r3, [r4, #24]
 800f6a8:	6923      	ldr	r3, [r4, #16]
 800f6aa:	b943      	cbnz	r3, 800f6be <__swsetup_r+0xc6>
 800f6ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6b0:	d1ba      	bne.n	800f628 <__swsetup_r+0x30>
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	0781      	lsls	r1, r0, #30
 800f6b6:	bf58      	it	pl
 800f6b8:	6963      	ldrpl	r3, [r4, #20]
 800f6ba:	60a3      	str	r3, [r4, #8]
 800f6bc:	e7f4      	b.n	800f6a8 <__swsetup_r+0xb0>
 800f6be:	2000      	movs	r0, #0
 800f6c0:	e7f7      	b.n	800f6b2 <__swsetup_r+0xba>
 800f6c2:	bf00      	nop
 800f6c4:	20000034 	.word	0x20000034
 800f6c8:	080126bc 	.word	0x080126bc
 800f6cc:	080126dc 	.word	0x080126dc
 800f6d0:	0801269c 	.word	0x0801269c

0800f6d4 <abort>:
 800f6d4:	b508      	push	{r3, lr}
 800f6d6:	2006      	movs	r0, #6
 800f6d8:	f000 f9b8 	bl	800fa4c <raise>
 800f6dc:	2001      	movs	r0, #1
 800f6de:	f7f1 fb77 	bl	8000dd0 <_exit>
	...

0800f6e4 <_close_r>:
 800f6e4:	b538      	push	{r3, r4, r5, lr}
 800f6e6:	4d06      	ldr	r5, [pc, #24]	; (800f700 <_close_r+0x1c>)
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4604      	mov	r4, r0
 800f6ec:	4608      	mov	r0, r1
 800f6ee:	602b      	str	r3, [r5, #0]
 800f6f0:	f7f1 fbb1 	bl	8000e56 <_close>
 800f6f4:	1c43      	adds	r3, r0, #1
 800f6f6:	d102      	bne.n	800f6fe <_close_r+0x1a>
 800f6f8:	682b      	ldr	r3, [r5, #0]
 800f6fa:	b103      	cbz	r3, 800f6fe <_close_r+0x1a>
 800f6fc:	6023      	str	r3, [r4, #0]
 800f6fe:	bd38      	pop	{r3, r4, r5, pc}
 800f700:	20008bd0 	.word	0x20008bd0

0800f704 <__sflush_r>:
 800f704:	898a      	ldrh	r2, [r1, #12]
 800f706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f70a:	4605      	mov	r5, r0
 800f70c:	0710      	lsls	r0, r2, #28
 800f70e:	460c      	mov	r4, r1
 800f710:	d458      	bmi.n	800f7c4 <__sflush_r+0xc0>
 800f712:	684b      	ldr	r3, [r1, #4]
 800f714:	2b00      	cmp	r3, #0
 800f716:	dc05      	bgt.n	800f724 <__sflush_r+0x20>
 800f718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	dc02      	bgt.n	800f724 <__sflush_r+0x20>
 800f71e:	2000      	movs	r0, #0
 800f720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f726:	2e00      	cmp	r6, #0
 800f728:	d0f9      	beq.n	800f71e <__sflush_r+0x1a>
 800f72a:	2300      	movs	r3, #0
 800f72c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f730:	682f      	ldr	r7, [r5, #0]
 800f732:	602b      	str	r3, [r5, #0]
 800f734:	d032      	beq.n	800f79c <__sflush_r+0x98>
 800f736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	075a      	lsls	r2, r3, #29
 800f73c:	d505      	bpl.n	800f74a <__sflush_r+0x46>
 800f73e:	6863      	ldr	r3, [r4, #4]
 800f740:	1ac0      	subs	r0, r0, r3
 800f742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f744:	b10b      	cbz	r3, 800f74a <__sflush_r+0x46>
 800f746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f748:	1ac0      	subs	r0, r0, r3
 800f74a:	2300      	movs	r3, #0
 800f74c:	4602      	mov	r2, r0
 800f74e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f750:	6a21      	ldr	r1, [r4, #32]
 800f752:	4628      	mov	r0, r5
 800f754:	47b0      	blx	r6
 800f756:	1c43      	adds	r3, r0, #1
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	d106      	bne.n	800f76a <__sflush_r+0x66>
 800f75c:	6829      	ldr	r1, [r5, #0]
 800f75e:	291d      	cmp	r1, #29
 800f760:	d82c      	bhi.n	800f7bc <__sflush_r+0xb8>
 800f762:	4a2a      	ldr	r2, [pc, #168]	; (800f80c <__sflush_r+0x108>)
 800f764:	40ca      	lsrs	r2, r1
 800f766:	07d6      	lsls	r6, r2, #31
 800f768:	d528      	bpl.n	800f7bc <__sflush_r+0xb8>
 800f76a:	2200      	movs	r2, #0
 800f76c:	6062      	str	r2, [r4, #4]
 800f76e:	04d9      	lsls	r1, r3, #19
 800f770:	6922      	ldr	r2, [r4, #16]
 800f772:	6022      	str	r2, [r4, #0]
 800f774:	d504      	bpl.n	800f780 <__sflush_r+0x7c>
 800f776:	1c42      	adds	r2, r0, #1
 800f778:	d101      	bne.n	800f77e <__sflush_r+0x7a>
 800f77a:	682b      	ldr	r3, [r5, #0]
 800f77c:	b903      	cbnz	r3, 800f780 <__sflush_r+0x7c>
 800f77e:	6560      	str	r0, [r4, #84]	; 0x54
 800f780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f782:	602f      	str	r7, [r5, #0]
 800f784:	2900      	cmp	r1, #0
 800f786:	d0ca      	beq.n	800f71e <__sflush_r+0x1a>
 800f788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f78c:	4299      	cmp	r1, r3
 800f78e:	d002      	beq.n	800f796 <__sflush_r+0x92>
 800f790:	4628      	mov	r0, r5
 800f792:	f7ff f985 	bl	800eaa0 <_free_r>
 800f796:	2000      	movs	r0, #0
 800f798:	6360      	str	r0, [r4, #52]	; 0x34
 800f79a:	e7c1      	b.n	800f720 <__sflush_r+0x1c>
 800f79c:	6a21      	ldr	r1, [r4, #32]
 800f79e:	2301      	movs	r3, #1
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	47b0      	blx	r6
 800f7a4:	1c41      	adds	r1, r0, #1
 800f7a6:	d1c7      	bne.n	800f738 <__sflush_r+0x34>
 800f7a8:	682b      	ldr	r3, [r5, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d0c4      	beq.n	800f738 <__sflush_r+0x34>
 800f7ae:	2b1d      	cmp	r3, #29
 800f7b0:	d001      	beq.n	800f7b6 <__sflush_r+0xb2>
 800f7b2:	2b16      	cmp	r3, #22
 800f7b4:	d101      	bne.n	800f7ba <__sflush_r+0xb6>
 800f7b6:	602f      	str	r7, [r5, #0]
 800f7b8:	e7b1      	b.n	800f71e <__sflush_r+0x1a>
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7c0:	81a3      	strh	r3, [r4, #12]
 800f7c2:	e7ad      	b.n	800f720 <__sflush_r+0x1c>
 800f7c4:	690f      	ldr	r7, [r1, #16]
 800f7c6:	2f00      	cmp	r7, #0
 800f7c8:	d0a9      	beq.n	800f71e <__sflush_r+0x1a>
 800f7ca:	0793      	lsls	r3, r2, #30
 800f7cc:	680e      	ldr	r6, [r1, #0]
 800f7ce:	bf08      	it	eq
 800f7d0:	694b      	ldreq	r3, [r1, #20]
 800f7d2:	600f      	str	r7, [r1, #0]
 800f7d4:	bf18      	it	ne
 800f7d6:	2300      	movne	r3, #0
 800f7d8:	eba6 0807 	sub.w	r8, r6, r7
 800f7dc:	608b      	str	r3, [r1, #8]
 800f7de:	f1b8 0f00 	cmp.w	r8, #0
 800f7e2:	dd9c      	ble.n	800f71e <__sflush_r+0x1a>
 800f7e4:	6a21      	ldr	r1, [r4, #32]
 800f7e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f7e8:	4643      	mov	r3, r8
 800f7ea:	463a      	mov	r2, r7
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	47b0      	blx	r6
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	dc06      	bgt.n	800f802 <__sflush_r+0xfe>
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7fa:	81a3      	strh	r3, [r4, #12]
 800f7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f800:	e78e      	b.n	800f720 <__sflush_r+0x1c>
 800f802:	4407      	add	r7, r0
 800f804:	eba8 0800 	sub.w	r8, r8, r0
 800f808:	e7e9      	b.n	800f7de <__sflush_r+0xda>
 800f80a:	bf00      	nop
 800f80c:	20400001 	.word	0x20400001

0800f810 <_fflush_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	690b      	ldr	r3, [r1, #16]
 800f814:	4605      	mov	r5, r0
 800f816:	460c      	mov	r4, r1
 800f818:	b913      	cbnz	r3, 800f820 <_fflush_r+0x10>
 800f81a:	2500      	movs	r5, #0
 800f81c:	4628      	mov	r0, r5
 800f81e:	bd38      	pop	{r3, r4, r5, pc}
 800f820:	b118      	cbz	r0, 800f82a <_fflush_r+0x1a>
 800f822:	6983      	ldr	r3, [r0, #24]
 800f824:	b90b      	cbnz	r3, 800f82a <_fflush_r+0x1a>
 800f826:	f7ff f881 	bl	800e92c <__sinit>
 800f82a:	4b14      	ldr	r3, [pc, #80]	; (800f87c <_fflush_r+0x6c>)
 800f82c:	429c      	cmp	r4, r3
 800f82e:	d11b      	bne.n	800f868 <_fflush_r+0x58>
 800f830:	686c      	ldr	r4, [r5, #4]
 800f832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d0ef      	beq.n	800f81a <_fflush_r+0xa>
 800f83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f83c:	07d0      	lsls	r0, r2, #31
 800f83e:	d404      	bmi.n	800f84a <_fflush_r+0x3a>
 800f840:	0599      	lsls	r1, r3, #22
 800f842:	d402      	bmi.n	800f84a <_fflush_r+0x3a>
 800f844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f846:	f7ff f921 	bl	800ea8c <__retarget_lock_acquire_recursive>
 800f84a:	4628      	mov	r0, r5
 800f84c:	4621      	mov	r1, r4
 800f84e:	f7ff ff59 	bl	800f704 <__sflush_r>
 800f852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f854:	07da      	lsls	r2, r3, #31
 800f856:	4605      	mov	r5, r0
 800f858:	d4e0      	bmi.n	800f81c <_fflush_r+0xc>
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	059b      	lsls	r3, r3, #22
 800f85e:	d4dd      	bmi.n	800f81c <_fflush_r+0xc>
 800f860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f862:	f7ff f914 	bl	800ea8e <__retarget_lock_release_recursive>
 800f866:	e7d9      	b.n	800f81c <_fflush_r+0xc>
 800f868:	4b05      	ldr	r3, [pc, #20]	; (800f880 <_fflush_r+0x70>)
 800f86a:	429c      	cmp	r4, r3
 800f86c:	d101      	bne.n	800f872 <_fflush_r+0x62>
 800f86e:	68ac      	ldr	r4, [r5, #8]
 800f870:	e7df      	b.n	800f832 <_fflush_r+0x22>
 800f872:	4b04      	ldr	r3, [pc, #16]	; (800f884 <_fflush_r+0x74>)
 800f874:	429c      	cmp	r4, r3
 800f876:	bf08      	it	eq
 800f878:	68ec      	ldreq	r4, [r5, #12]
 800f87a:	e7da      	b.n	800f832 <_fflush_r+0x22>
 800f87c:	080126bc 	.word	0x080126bc
 800f880:	080126dc 	.word	0x080126dc
 800f884:	0801269c 	.word	0x0801269c

0800f888 <_lseek_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4d07      	ldr	r5, [pc, #28]	; (800f8a8 <_lseek_r+0x20>)
 800f88c:	4604      	mov	r4, r0
 800f88e:	4608      	mov	r0, r1
 800f890:	4611      	mov	r1, r2
 800f892:	2200      	movs	r2, #0
 800f894:	602a      	str	r2, [r5, #0]
 800f896:	461a      	mov	r2, r3
 800f898:	f7f1 fb04 	bl	8000ea4 <_lseek>
 800f89c:	1c43      	adds	r3, r0, #1
 800f89e:	d102      	bne.n	800f8a6 <_lseek_r+0x1e>
 800f8a0:	682b      	ldr	r3, [r5, #0]
 800f8a2:	b103      	cbz	r3, 800f8a6 <_lseek_r+0x1e>
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	bd38      	pop	{r3, r4, r5, pc}
 800f8a8:	20008bd0 	.word	0x20008bd0

0800f8ac <__swhatbuf_r>:
 800f8ac:	b570      	push	{r4, r5, r6, lr}
 800f8ae:	460e      	mov	r6, r1
 800f8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8b4:	2900      	cmp	r1, #0
 800f8b6:	b096      	sub	sp, #88	; 0x58
 800f8b8:	4614      	mov	r4, r2
 800f8ba:	461d      	mov	r5, r3
 800f8bc:	da07      	bge.n	800f8ce <__swhatbuf_r+0x22>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	602b      	str	r3, [r5, #0]
 800f8c2:	89b3      	ldrh	r3, [r6, #12]
 800f8c4:	061a      	lsls	r2, r3, #24
 800f8c6:	d410      	bmi.n	800f8ea <__swhatbuf_r+0x3e>
 800f8c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8cc:	e00e      	b.n	800f8ec <__swhatbuf_r+0x40>
 800f8ce:	466a      	mov	r2, sp
 800f8d0:	f000 f8d8 	bl	800fa84 <_fstat_r>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	dbf2      	blt.n	800f8be <__swhatbuf_r+0x12>
 800f8d8:	9a01      	ldr	r2, [sp, #4]
 800f8da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f8de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f8e2:	425a      	negs	r2, r3
 800f8e4:	415a      	adcs	r2, r3
 800f8e6:	602a      	str	r2, [r5, #0]
 800f8e8:	e7ee      	b.n	800f8c8 <__swhatbuf_r+0x1c>
 800f8ea:	2340      	movs	r3, #64	; 0x40
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	6023      	str	r3, [r4, #0]
 800f8f0:	b016      	add	sp, #88	; 0x58
 800f8f2:	bd70      	pop	{r4, r5, r6, pc}

0800f8f4 <__smakebuf_r>:
 800f8f4:	898b      	ldrh	r3, [r1, #12]
 800f8f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f8f8:	079d      	lsls	r5, r3, #30
 800f8fa:	4606      	mov	r6, r0
 800f8fc:	460c      	mov	r4, r1
 800f8fe:	d507      	bpl.n	800f910 <__smakebuf_r+0x1c>
 800f900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f904:	6023      	str	r3, [r4, #0]
 800f906:	6123      	str	r3, [r4, #16]
 800f908:	2301      	movs	r3, #1
 800f90a:	6163      	str	r3, [r4, #20]
 800f90c:	b002      	add	sp, #8
 800f90e:	bd70      	pop	{r4, r5, r6, pc}
 800f910:	ab01      	add	r3, sp, #4
 800f912:	466a      	mov	r2, sp
 800f914:	f7ff ffca 	bl	800f8ac <__swhatbuf_r>
 800f918:	9900      	ldr	r1, [sp, #0]
 800f91a:	4605      	mov	r5, r0
 800f91c:	4630      	mov	r0, r6
 800f91e:	f7ff f90f 	bl	800eb40 <_malloc_r>
 800f922:	b948      	cbnz	r0, 800f938 <__smakebuf_r+0x44>
 800f924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f928:	059a      	lsls	r2, r3, #22
 800f92a:	d4ef      	bmi.n	800f90c <__smakebuf_r+0x18>
 800f92c:	f023 0303 	bic.w	r3, r3, #3
 800f930:	f043 0302 	orr.w	r3, r3, #2
 800f934:	81a3      	strh	r3, [r4, #12]
 800f936:	e7e3      	b.n	800f900 <__smakebuf_r+0xc>
 800f938:	4b0d      	ldr	r3, [pc, #52]	; (800f970 <__smakebuf_r+0x7c>)
 800f93a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f93c:	89a3      	ldrh	r3, [r4, #12]
 800f93e:	6020      	str	r0, [r4, #0]
 800f940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f944:	81a3      	strh	r3, [r4, #12]
 800f946:	9b00      	ldr	r3, [sp, #0]
 800f948:	6163      	str	r3, [r4, #20]
 800f94a:	9b01      	ldr	r3, [sp, #4]
 800f94c:	6120      	str	r0, [r4, #16]
 800f94e:	b15b      	cbz	r3, 800f968 <__smakebuf_r+0x74>
 800f950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f954:	4630      	mov	r0, r6
 800f956:	f000 f8a7 	bl	800faa8 <_isatty_r>
 800f95a:	b128      	cbz	r0, 800f968 <__smakebuf_r+0x74>
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	f023 0303 	bic.w	r3, r3, #3
 800f962:	f043 0301 	orr.w	r3, r3, #1
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	89a0      	ldrh	r0, [r4, #12]
 800f96a:	4305      	orrs	r5, r0
 800f96c:	81a5      	strh	r5, [r4, #12]
 800f96e:	e7cd      	b.n	800f90c <__smakebuf_r+0x18>
 800f970:	0800e8c5 	.word	0x0800e8c5

0800f974 <__malloc_lock>:
 800f974:	4801      	ldr	r0, [pc, #4]	; (800f97c <__malloc_lock+0x8>)
 800f976:	f7ff b889 	b.w	800ea8c <__retarget_lock_acquire_recursive>
 800f97a:	bf00      	nop
 800f97c:	20008bd8 	.word	0x20008bd8

0800f980 <__malloc_unlock>:
 800f980:	4801      	ldr	r0, [pc, #4]	; (800f988 <__malloc_unlock+0x8>)
 800f982:	f7ff b884 	b.w	800ea8e <__retarget_lock_release_recursive>
 800f986:	bf00      	nop
 800f988:	20008bd8 	.word	0x20008bd8

0800f98c <_realloc_r>:
 800f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98e:	4607      	mov	r7, r0
 800f990:	4614      	mov	r4, r2
 800f992:	460e      	mov	r6, r1
 800f994:	b921      	cbnz	r1, 800f9a0 <_realloc_r+0x14>
 800f996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f99a:	4611      	mov	r1, r2
 800f99c:	f7ff b8d0 	b.w	800eb40 <_malloc_r>
 800f9a0:	b922      	cbnz	r2, 800f9ac <_realloc_r+0x20>
 800f9a2:	f7ff f87d 	bl	800eaa0 <_free_r>
 800f9a6:	4625      	mov	r5, r4
 800f9a8:	4628      	mov	r0, r5
 800f9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9ac:	f000 f88c 	bl	800fac8 <_malloc_usable_size_r>
 800f9b0:	42a0      	cmp	r0, r4
 800f9b2:	d20f      	bcs.n	800f9d4 <_realloc_r+0x48>
 800f9b4:	4621      	mov	r1, r4
 800f9b6:	4638      	mov	r0, r7
 800f9b8:	f7ff f8c2 	bl	800eb40 <_malloc_r>
 800f9bc:	4605      	mov	r5, r0
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d0f2      	beq.n	800f9a8 <_realloc_r+0x1c>
 800f9c2:	4631      	mov	r1, r6
 800f9c4:	4622      	mov	r2, r4
 800f9c6:	f7fe fe7f 	bl	800e6c8 <memcpy>
 800f9ca:	4631      	mov	r1, r6
 800f9cc:	4638      	mov	r0, r7
 800f9ce:	f7ff f867 	bl	800eaa0 <_free_r>
 800f9d2:	e7e9      	b.n	800f9a8 <_realloc_r+0x1c>
 800f9d4:	4635      	mov	r5, r6
 800f9d6:	e7e7      	b.n	800f9a8 <_realloc_r+0x1c>

0800f9d8 <_read_r>:
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4d07      	ldr	r5, [pc, #28]	; (800f9f8 <_read_r+0x20>)
 800f9dc:	4604      	mov	r4, r0
 800f9de:	4608      	mov	r0, r1
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	602a      	str	r2, [r5, #0]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f7f1 f9fc 	bl	8000de4 <_read>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_read_r+0x1e>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_read_r+0x1e>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	20008bd0 	.word	0x20008bd0

0800f9fc <_raise_r>:
 800f9fc:	291f      	cmp	r1, #31
 800f9fe:	b538      	push	{r3, r4, r5, lr}
 800fa00:	4604      	mov	r4, r0
 800fa02:	460d      	mov	r5, r1
 800fa04:	d904      	bls.n	800fa10 <_raise_r+0x14>
 800fa06:	2316      	movs	r3, #22
 800fa08:	6003      	str	r3, [r0, #0]
 800fa0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0e:	bd38      	pop	{r3, r4, r5, pc}
 800fa10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa12:	b112      	cbz	r2, 800fa1a <_raise_r+0x1e>
 800fa14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa18:	b94b      	cbnz	r3, 800fa2e <_raise_r+0x32>
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f000 f830 	bl	800fa80 <_getpid_r>
 800fa20:	462a      	mov	r2, r5
 800fa22:	4601      	mov	r1, r0
 800fa24:	4620      	mov	r0, r4
 800fa26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa2a:	f000 b817 	b.w	800fa5c <_kill_r>
 800fa2e:	2b01      	cmp	r3, #1
 800fa30:	d00a      	beq.n	800fa48 <_raise_r+0x4c>
 800fa32:	1c59      	adds	r1, r3, #1
 800fa34:	d103      	bne.n	800fa3e <_raise_r+0x42>
 800fa36:	2316      	movs	r3, #22
 800fa38:	6003      	str	r3, [r0, #0]
 800fa3a:	2001      	movs	r0, #1
 800fa3c:	e7e7      	b.n	800fa0e <_raise_r+0x12>
 800fa3e:	2400      	movs	r4, #0
 800fa40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa44:	4628      	mov	r0, r5
 800fa46:	4798      	blx	r3
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e7e0      	b.n	800fa0e <_raise_r+0x12>

0800fa4c <raise>:
 800fa4c:	4b02      	ldr	r3, [pc, #8]	; (800fa58 <raise+0xc>)
 800fa4e:	4601      	mov	r1, r0
 800fa50:	6818      	ldr	r0, [r3, #0]
 800fa52:	f7ff bfd3 	b.w	800f9fc <_raise_r>
 800fa56:	bf00      	nop
 800fa58:	20000034 	.word	0x20000034

0800fa5c <_kill_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4d07      	ldr	r5, [pc, #28]	; (800fa7c <_kill_r+0x20>)
 800fa60:	2300      	movs	r3, #0
 800fa62:	4604      	mov	r4, r0
 800fa64:	4608      	mov	r0, r1
 800fa66:	4611      	mov	r1, r2
 800fa68:	602b      	str	r3, [r5, #0]
 800fa6a:	f7f1 f99f 	bl	8000dac <_kill>
 800fa6e:	1c43      	adds	r3, r0, #1
 800fa70:	d102      	bne.n	800fa78 <_kill_r+0x1c>
 800fa72:	682b      	ldr	r3, [r5, #0]
 800fa74:	b103      	cbz	r3, 800fa78 <_kill_r+0x1c>
 800fa76:	6023      	str	r3, [r4, #0]
 800fa78:	bd38      	pop	{r3, r4, r5, pc}
 800fa7a:	bf00      	nop
 800fa7c:	20008bd0 	.word	0x20008bd0

0800fa80 <_getpid_r>:
 800fa80:	f7f1 b98c 	b.w	8000d9c <_getpid>

0800fa84 <_fstat_r>:
 800fa84:	b538      	push	{r3, r4, r5, lr}
 800fa86:	4d07      	ldr	r5, [pc, #28]	; (800faa4 <_fstat_r+0x20>)
 800fa88:	2300      	movs	r3, #0
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	4608      	mov	r0, r1
 800fa8e:	4611      	mov	r1, r2
 800fa90:	602b      	str	r3, [r5, #0]
 800fa92:	f7f1 f9ec 	bl	8000e6e <_fstat>
 800fa96:	1c43      	adds	r3, r0, #1
 800fa98:	d102      	bne.n	800faa0 <_fstat_r+0x1c>
 800fa9a:	682b      	ldr	r3, [r5, #0]
 800fa9c:	b103      	cbz	r3, 800faa0 <_fstat_r+0x1c>
 800fa9e:	6023      	str	r3, [r4, #0]
 800faa0:	bd38      	pop	{r3, r4, r5, pc}
 800faa2:	bf00      	nop
 800faa4:	20008bd0 	.word	0x20008bd0

0800faa8 <_isatty_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4d06      	ldr	r5, [pc, #24]	; (800fac4 <_isatty_r+0x1c>)
 800faac:	2300      	movs	r3, #0
 800faae:	4604      	mov	r4, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	602b      	str	r3, [r5, #0]
 800fab4:	f7f1 f9eb 	bl	8000e8e <_isatty>
 800fab8:	1c43      	adds	r3, r0, #1
 800faba:	d102      	bne.n	800fac2 <_isatty_r+0x1a>
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	b103      	cbz	r3, 800fac2 <_isatty_r+0x1a>
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	20008bd0 	.word	0x20008bd0

0800fac8 <_malloc_usable_size_r>:
 800fac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800facc:	1f18      	subs	r0, r3, #4
 800face:	2b00      	cmp	r3, #0
 800fad0:	bfbc      	itt	lt
 800fad2:	580b      	ldrlt	r3, [r1, r0]
 800fad4:	18c0      	addlt	r0, r0, r3
 800fad6:	4770      	bx	lr

0800fad8 <_init>:
 800fad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fada:	bf00      	nop
 800fadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fade:	bc08      	pop	{r3}
 800fae0:	469e      	mov	lr, r3
 800fae2:	4770      	bx	lr

0800fae4 <_fini>:
 800fae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fae6:	bf00      	nop
 800fae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faea:	bc08      	pop	{r3}
 800faec:	469e      	mov	lr, r3
 800faee:	4770      	bx	lr
