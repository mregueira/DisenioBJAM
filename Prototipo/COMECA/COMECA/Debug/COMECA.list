
COMECA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fd4  08010d10  08010d10  00020d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013ce4  08013ce4  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08013ce4  08013ce4  00023ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013cec  08013cec  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013cec  08013cec  00023cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013cf0  08013cf0  00023cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08013cf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006924  2000007c  08013d70  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200069a0  08013d70  000369a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000311d0  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ae0  00000000  00000000  0006127c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  00066d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  00068410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d338  00000000  00000000  00069a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025b73  00000000  00000000  00096d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e279d  00000000  00000000  000bc8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019f058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006600  00000000  00000000  0019f0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010cf8 	.word	0x08010cf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08010cf8 	.word	0x08010cf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ethernetif_notify_conn_changed>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	else
	{
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
	}
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fc76 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f814 	bl	80005b0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8a0 	bl	80006cc <MX_GPIO_Init>
  MX_TIM14_Init();
 800058c:	f000 f87a 	bl	8000684 <MX_TIM14_Init>
  MX_LWIP_Init();
 8000590:	f003 f886 	bl	80036a0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <main+0x2c>)
 8000596:	f002 fe2f 	bl	80031f8 <HAL_TIM_Base_Start_IT>

  ethernetif_notify_conn_changed(&gnetif);
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <main+0x30>)
 800059c:	f7ff ffe4 	bl	8000568 <ethernetif_notify_conn_changed>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 80005a0:	f003 f8c4 	bl	800372c <MX_LWIP_Process>
 80005a4:	e7fc      	b.n	80005a0 <main+0x24>
 80005a6:	bf00      	nop
 80005a8:	20000270 	.word	0x20000270
 80005ac:	200002bc 	.word	0x200002bc

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00f fb78 	bl	800fcb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	; (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	; (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000624:	23a8      	movs	r3, #168	; 0xa8
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f002 f96f 	bl	8002918 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 fa6a 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000650:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2105      	movs	r1, #5
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fbd0 	bl	8002e08 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800066e:	f000 fa53 	bl	8000b18 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_TIM14_Init+0x40>)
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <MX_TIM14_Init+0x44>)
 800068c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_TIM14_Init+0x40>)
 8000690:	f240 321f 	movw	r2, #799	; 0x31f
 8000694:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_TIM14_Init+0x40>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9375 - 1;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_TIM14_Init+0x40>)
 800069e:	f242 429e 	movw	r2, #9374	; 0x249e
 80006a2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_TIM14_Init+0x40>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_TIM14_Init+0x40>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_TIM14_Init+0x40>)
 80006b2:	f002 fd51 	bl	8003158 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80006bc:	f000 fa2c 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000270 	.word	0x20000270
 80006c8:	40002000 	.word	0x40002000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <MX_GPIO_Init+0xfc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a37      	ldr	r2, [pc, #220]	; (80007c8 <MX_GPIO_Init+0xfc>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <MX_GPIO_Init+0xfc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a30      	ldr	r2, [pc, #192]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <MX_GPIO_Init+0xfc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0310 	and.w	r3, r3, #16
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_GPIO_Init+0xfc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_GPIO_Init+0xfc>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <MX_GPIO_Init+0x100>)
 800075a:	f002 f891 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAL1_DATA_Pin */
  GPIO_InitStruct.Pin = CAL1_DATA_Pin;
 800075e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL1_DATA_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <MX_GPIO_Init+0x100>)
 8000774:	f001 fed0 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL1_REQ_Pin */
  GPIO_InitStruct.Pin = CAL1_REQ_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800077e:	2311      	movs	r3, #17
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAL1_REQ_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	480e      	ldr	r0, [pc, #56]	; (80007cc <MX_GPIO_Init+0x100>)
 8000792:	f001 fec1 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL1_CLK_Pin */
  GPIO_InitStruct.Pin = CAL1_CLK_Pin;
 8000796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_GPIO_Init+0x104>)
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL1_CLK_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <MX_GPIO_Init+0x100>)
 80007ac:	f001 feb4 	bl	8002518 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	2028      	movs	r0, #40	; 0x28
 80007b6:	f000 fccc 	bl	8001152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ba:	2028      	movs	r0, #40	; 0x28
 80007bc:	f000 fce5 	bl	800118a <HAL_NVIC_EnableIRQ>

}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40021000 	.word	0x40021000
 80007d0:	10110000 	.word	0x10110000

080007d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(htim  == &htim14){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a07      	ldr	r2, [pc, #28]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d107      	bne.n	80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin);
 80007e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80007ea:	f002 f862 	bl	80028b2 <HAL_GPIO_TogglePin>
		onRisingEdgeOfReqSignal(CALIPER_1);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 f8c4 	bl	800097c <onRisingEdgeOfReqSignal>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000270 	.word	0x20000270
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000814:	d103      	bne.n	800081e <HAL_GPIO_EXTI_Callback+0x1a>
	case CAL1_CLK_Pin:
		onRisingEdgeOfClockSignal(CALIPER_1);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f8c6 	bl	80009a8 <onRisingEdgeOfClockSignal>
		break;
 800081c:	e000      	b.n	8000820 <HAL_GPIO_EXTI_Callback+0x1c>
	default:
		break;
 800081e:	bf00      	nop
	}
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <getCaliperData>:

bool getCaliperData(caliper_number curr_caliper){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	switch(curr_caliper){
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b03      	cmp	r3, #3
 8000836:	d838      	bhi.n	80008aa <getCaliperData+0x82>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <getCaliperData+0x18>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000851 	.word	0x08000851
 8000844:	08000869 	.word	0x08000869
 8000848:	0800087f 	.word	0x0800087f
 800084c:	08000895 	.word	0x08000895
	case CALIPER_1:
		return HAL_GPIO_ReadPin(CAL_1_DATA);
 8000850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000854:	4817      	ldr	r0, [pc, #92]	; (80008b4 <getCaliperData+0x8c>)
 8000856:	f001 fffb 	bl	8002850 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf14      	ite	ne
 8000860:	2301      	movne	r3, #1
 8000862:	2300      	moveq	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	e021      	b.n	80008ac <getCaliperData+0x84>
		break;
	case CALIPER_2:
		return HAL_GPIO_ReadPin(CAL_2_DATA);
 8000868:	2102      	movs	r1, #2
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <getCaliperData+0x90>)
 800086c:	f001 fff0 	bl	8002850 <HAL_GPIO_ReadPin>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	e016      	b.n	80008ac <getCaliperData+0x84>
		break;
	case CALIPER_3:
		return HAL_GPIO_ReadPin(CAL_3_DATA);
 800087e:	2101      	movs	r1, #1
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <getCaliperData+0x94>)
 8000882:	f001 ffe5 	bl	8002850 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	e00b      	b.n	80008ac <getCaliperData+0x84>
		break;
	case CALIPER_4:
		return HAL_GPIO_ReadPin(CAL_4_DATA);
 8000894:	2110      	movs	r1, #16
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <getCaliperData+0x8c>)
 8000898:	f001 ffda 	bl	8002850 <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf14      	ite	ne
 80008a2:	2301      	movne	r3, #1
 80008a4:	2300      	moveq	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	e000      	b.n	80008ac <getCaliperData+0x84>
		break;
	default:
		return 0;
 80008aa:	2300      	movs	r3, #0
		break;
	}
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020000 	.word	0x40020000

080008c0 <processBit>:


void processBit(caliper_number curr_caliper){
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].bit.index == 0){digimatic[curr_caliper].frame.data = 0;}
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	492a      	ldr	r1, [pc, #168]	; (8000978 <processBit+0xb8>)
 80008ce:	4613      	mov	r3, r2
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	4413      	add	r3, r2
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	440b      	add	r3, r1
 80008d8:	330e      	adds	r3, #14
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d109      	bne.n	80008f4 <processBit+0x34>
 80008e0:	79fa      	ldrb	r2, [r7, #7]
 80008e2:	4925      	ldr	r1, [pc, #148]	; (8000978 <processBit+0xb8>)
 80008e4:	4613      	mov	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4413      	add	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	440b      	add	r3, r1
 80008ee:	3311      	adds	r3, #17
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]

	uint8_t read_bit = getCaliperData(curr_caliper);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff96 	bl	8000828 <getCaliperData>
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]

	digimatic[curr_caliper].frame.data |= read_bit << digimatic[curr_caliper].bit.index;
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	491d      	ldr	r1, [pc, #116]	; (8000978 <processBit+0xb8>)
 8000904:	4613      	mov	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	4413      	add	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	440b      	add	r3, r1
 800090e:	3311      	adds	r3, #17
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b259      	sxtb	r1, r3
 8000914:	7bf8      	ldrb	r0, [r7, #15]
 8000916:	79fa      	ldrb	r2, [r7, #7]
 8000918:	4c17      	ldr	r4, [pc, #92]	; (8000978 <processBit+0xb8>)
 800091a:	4613      	mov	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	4413      	add	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4423      	add	r3, r4
 8000924:	330e      	adds	r3, #14
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	fa00 f303 	lsl.w	r3, r0, r3
 800092c:	b25b      	sxtb	r3, r3
 800092e:	430b      	orrs	r3, r1
 8000930:	b25b      	sxtb	r3, r3
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	b2d8      	uxtb	r0, r3
 8000936:	4910      	ldr	r1, [pc, #64]	; (8000978 <processBit+0xb8>)
 8000938:	4613      	mov	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	3311      	adds	r3, #17
 8000944:	4602      	mov	r2, r0
 8000946:	701a      	strb	r2, [r3, #0]

	digimatic[curr_caliper].bit.index++;
 8000948:	79fa      	ldrb	r2, [r7, #7]
 800094a:	490b      	ldr	r1, [pc, #44]	; (8000978 <processBit+0xb8>)
 800094c:	4613      	mov	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	4413      	add	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	440b      	add	r3, r1
 8000956:	330e      	adds	r3, #14
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	4906      	ldr	r1, [pc, #24]	; (8000978 <processBit+0xb8>)
 8000960:	4613      	mov	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	4413      	add	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	330e      	adds	r3, #14
 800096c:	4602      	mov	r2, r0
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	20000228 	.word	0x20000228

0800097c <onRisingEdgeOfReqSignal>:


void onRisingEdgeOfReqSignal(caliper_number curr_caliper){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	// esta funcion tiene sentido cuando probamos el calibre con analog
	digimatic[curr_caliper].caliper_state = START;
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	4906      	ldr	r1, [pc, #24]	; (80009a4 <onRisingEdgeOfReqSignal+0x28>)
 800098a:	4613      	mov	r3, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	4413      	add	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	440b      	add	r3, r1
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	20000228 	.word	0x20000228

080009a8 <onRisingEdgeOfClockSignal>:


void onRisingEdgeOfClockSignal(caliper_number curr_caliper){
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	static int test_it= 0;
	if(digimatic[curr_caliper].caliper_state != IDLE && digimatic[curr_caliper].caliper_state != FINISHED){
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	4956      	ldr	r1, [pc, #344]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	4413      	add	r3, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	440b      	add	r3, r1
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 80a0 	beq.w	8000b08 <onRisingEdgeOfClockSignal+0x160>
 80009c8:	79fa      	ldrb	r2, [r7, #7]
 80009ca:	4951      	ldr	r1, [pc, #324]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 80009cc:	4613      	mov	r3, r2
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4413      	add	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	440b      	add	r3, r1
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	f000 8095 	beq.w	8000b08 <onRisingEdgeOfClockSignal+0x160>
		digimatic[curr_caliper].caliper_state = GETTING_FRAMES; // this doesn't change unless its last frame (implemented below)
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	494b      	ldr	r1, [pc, #300]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 80009e2:	4613      	mov	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	440b      	add	r3, r1
 80009ec:	2202      	movs	r2, #2
 80009ee:	701a      	strb	r2, [r3, #0]
		if(digimatic[curr_caliper].frame.index == 0){
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	4947      	ldr	r1, [pc, #284]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 80009f4:	4613      	mov	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	4413      	add	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	440b      	add	r3, r1
 80009fe:	3310      	adds	r3, #16
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10c      	bne.n	8000a20 <onRisingEdgeOfClockSignal+0x78>
			memset(&digimatic[curr_caliper].frames, 0, NUMBER_OF_FRAMES*sizeof(digimatic[curr_caliper].frames[0]));
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4a3f      	ldr	r2, [pc, #252]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000a12:	4413      	add	r3, r2
 8000a14:	3301      	adds	r3, #1
 8000a16:	220d      	movs	r2, #13
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00f f94a 	bl	800fcb4 <memset>
		}

		processBit(curr_caliper);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff4c 	bl	80008c0 <processBit>

		if(digimatic[curr_caliper].bit.index == BITS_PER_FRAME){ // tengo un frame guardado en digimatic.frame.data
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	4939      	ldr	r1, [pc, #228]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	440b      	add	r3, r1
 8000a36:	330e      	adds	r3, #14
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d13b      	bne.n	8000ab6 <onRisingEdgeOfClockSignal+0x10e>
			digimatic[curr_caliper].frames[digimatic[curr_caliper].frame.index] = digimatic[curr_caliper].frame.data; // lo guardo en el array
 8000a3e:	79f9      	ldrb	r1, [r7, #7]
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	79f8      	ldrb	r0, [r7, #7]
 8000a44:	4c32      	ldr	r4, [pc, #200]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000a46:	4603      	mov	r3, r0
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	4403      	add	r3, r0
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4423      	add	r3, r4
 8000a50:	3310      	adds	r3, #16
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	461c      	mov	r4, r3
 8000a56:	482e      	ldr	r0, [pc, #184]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000a58:	460b      	mov	r3, r1
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4403      	add	r3, r0
 8000a62:	3311      	adds	r3, #17
 8000a64:	7818      	ldrb	r0, [r3, #0]
 8000a66:	492a      	ldr	r1, [pc, #168]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000a68:	4613      	mov	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	440b      	add	r3, r1
 8000a72:	4423      	add	r3, r4
 8000a74:	3301      	adds	r3, #1
 8000a76:	4602      	mov	r2, r0
 8000a78:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].frame.index++; // avanzo en array
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	4924      	ldr	r1, [pc, #144]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000a7e:	4613      	mov	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	4413      	add	r3, r2
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	440b      	add	r3, r1
 8000a88:	3310      	adds	r3, #16
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2d8      	uxtb	r0, r3
 8000a90:	491f      	ldr	r1, [pc, #124]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000a92:	4613      	mov	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	440b      	add	r3, r1
 8000a9c:	3310      	adds	r3, #16
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].bit.index = 0; // reinicio el index de bit
 8000aa2:	79fa      	ldrb	r2, [r7, #7]
 8000aa4:	491a      	ldr	r1, [pc, #104]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	440b      	add	r3, r1
 8000ab0:	330e      	adds	r3, #14
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
		}

		if(digimatic[curr_caliper].frame.index == NUMBER_OF_FRAMES){
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	4915      	ldr	r1, [pc, #84]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	4413      	add	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3310      	adds	r3, #16
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b0d      	cmp	r3, #13
 8000aca:	d11d      	bne.n	8000b08 <onRisingEdgeOfClockSignal+0x160>
			digimatic[curr_caliper].frame.index = 0;
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	4910      	ldr	r1, [pc, #64]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	440b      	add	r3, r1
 8000ada:	3310      	adds	r3, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].caliper_state = FINISHED;
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	490b      	ldr	r1, [pc, #44]	; (8000b10 <onRisingEdgeOfClockSignal+0x168>)
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	00db      	lsls	r3, r3, #3
 8000ae8:	4413      	add	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	440b      	add	r3, r1
 8000aee:	2203      	movs	r2, #3
 8000af0:	701a      	strb	r2, [r3, #0]
			if(test_it == 1){
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <onRisingEdgeOfClockSignal+0x16c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d101      	bne.n	8000afe <onRisingEdgeOfClockSignal+0x156>
				int a = 5;
 8000afa:	2305      	movs	r3, #5
 8000afc:	60fb      	str	r3, [r7, #12]
			}
			test_it++;
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <onRisingEdgeOfClockSignal+0x16c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <onRisingEdgeOfClockSignal+0x16c>)
 8000b06:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	20000228 	.word	0x20000228
 8000b14:	20000098 	.word	0x20000098

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_TIM_Base_MspInit+0x48>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d115      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	202d      	movs	r0, #45	; 0x2d
 8000ba8:	f000 fad3 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000bac:	202d      	movs	r0, #45	; 0x2d
 8000bae:	f000 faec 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40002000 	.word	0x40002000
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f980 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c20:	f001 fe62 	bl	80028e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c2e:	f002 fb53 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000270 	.word	0x20000270

08000c3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <ETH_IRQHandler+0x10>)
 8000c42:	f000 fe9d 	bl	8001980 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20001bd0 	.word	0x20001bd0

08000c50 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <ETH_WKUP_IRQHandler+0x10>)
 8000c56:	f000 fe93 	bl	8001980 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20001bd0 	.word	0x20001bd0

08000c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	return 1;
 8000c68:	2301      	movs	r3, #1
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_kill>:

int _kill(int pid, int sig)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <_kill+0x20>)
 8000c80:	2216      	movs	r2, #22
 8000c82:	601a      	str	r2, [r3, #0]
	return -1;
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20006990 	.word	0x20006990

08000c98 <_exit>:

void _exit (int status)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe5 	bl	8000c74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000caa:	e7fe      	b.n	8000caa <_exit+0x12>

08000cac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
	}

return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
	}
	return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d205      	bcs.n	8000dc4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <_sbrk+0x6c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a06      	ldr	r2, [pc, #24]	; (8000dec <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	2000009c 	.word	0x2000009c
 8000df0:	200069a0 	.word	0x200069a0
 8000df4:	20006990 	.word	0x20006990

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f00e fef3 	bl	800fc34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fb95 	bl	800057c <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e60:	08013cf4 	.word	0x08013cf4
  ldr r2, =_sbss
 8000e64:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e68:	200069a0 	.word	0x200069a0

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f94f 	bl	800113c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe3e 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f967 	bl	80011a6 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f92f 	bl	8001152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	200002b8 	.word	0x200002b8

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200002b8 	.word	0x200002b8

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	db0b      	blt.n	800102a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	f003 021f 	and.w	r2, r3, #31
 8001018:	4907      	ldr	r1, [pc, #28]	; (8001038 <__NVIC_EnableIRQ+0x38>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	095b      	lsrs	r3, r3, #5
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001108:	d301      	bcc.n	800110e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2301      	movs	r3, #1
 800110c:	e00f      	b.n	800112e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SysTick_Config+0x40>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001116:	210f      	movs	r1, #15
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f7ff ff8e 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SysTick_Config+0x40>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <SysTick_Config+0x40>)
 8001128:	2207      	movs	r2, #7
 800112a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	e000e010 	.word	0xe000e010

0800113c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ff29 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001164:	f7ff ff3e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	68b9      	ldr	r1, [r7, #8]
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff ff8e 	bl	8001090 <NVIC_EncodePriority>
 8001174:	4602      	mov	r2, r0
 8001176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff5d 	bl	800103c <__NVIC_SetPriority>
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff31 	bl	8001000 <__NVIC_EnableIRQ>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff ffa2 	bl	80010f8 <SysTick_Config>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80011d0:	4baa      	ldr	r3, [pc, #680]	; (800147c <HAL_ETH_Init+0x2bc>)
 80011d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e183      	b.n	80014ee <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d106      	bne.n	8001200 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f002 faba 	bl	8003774 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <HAL_ETH_Init+0x2c0>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	4a9d      	ldr	r2, [pc, #628]	; (8001480 <HAL_ETH_Init+0x2c0>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	6453      	str	r3, [r2, #68]	; 0x44
 8001210:	4b9b      	ldr	r3, [pc, #620]	; (8001480 <HAL_ETH_Init+0x2c0>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800121c:	4b99      	ldr	r3, [pc, #612]	; (8001484 <HAL_ETH_Init+0x2c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a98      	ldr	r2, [pc, #608]	; (8001484 <HAL_ETH_Init+0x2c4>)
 8001222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001226:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001228:	4b96      	ldr	r3, [pc, #600]	; (8001484 <HAL_ETH_Init+0x2c4>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	4994      	ldr	r1, [pc, #592]	; (8001484 <HAL_ETH_Init+0x2c4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800124c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800124e:	f7ff fe75 	bl	8000f3c <HAL_GetTick>
 8001252:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001254:	e011      	b.n	800127a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001256:	f7ff fe71 	bl	8000f3c <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001264:	d909      	bls.n	800127a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e139      	b.n	80014ee <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e4      	bne.n	8001256 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f023 031c 	bic.w	r3, r3, #28
 800129a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800129c:	f001 ff50 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 80012a0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4a78      	ldr	r2, [pc, #480]	; (8001488 <HAL_ETH_Init+0x2c8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d908      	bls.n	80012bc <HAL_ETH_Init+0xfc>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4a77      	ldr	r2, [pc, #476]	; (800148c <HAL_ETH_Init+0x2cc>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d804      	bhi.n	80012bc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e027      	b.n	800130c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	4a73      	ldr	r2, [pc, #460]	; (800148c <HAL_ETH_Init+0x2cc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d908      	bls.n	80012d6 <HAL_ETH_Init+0x116>
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4a6d      	ldr	r2, [pc, #436]	; (800147c <HAL_ETH_Init+0x2bc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d204      	bcs.n	80012d6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f043 030c 	orr.w	r3, r3, #12
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	e01a      	b.n	800130c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4a68      	ldr	r2, [pc, #416]	; (800147c <HAL_ETH_Init+0x2bc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d303      	bcc.n	80012e6 <HAL_ETH_Init+0x126>
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4a6b      	ldr	r2, [pc, #428]	; (8001490 <HAL_ETH_Init+0x2d0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d911      	bls.n	800130a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4a69      	ldr	r2, [pc, #420]	; (8001490 <HAL_ETH_Init+0x2d0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d908      	bls.n	8001300 <HAL_ETH_Init+0x140>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_ETH_Init+0x2d4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d804      	bhi.n	8001300 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e005      	b.n	800130c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	e000      	b.n	800130c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800130a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001314:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001318:	2100      	movs	r1, #0
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fc1d 	bl	8001b5a <HAL_ETH_WritePHYRegister>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fdd3 	bl	8001ed8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0d7      	b.n	80014ee <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800133e:	20ff      	movs	r0, #255	; 0xff
 8001340:	f7ff fe08 	bl	8000f54 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a5 	beq.w	8001498 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800134e:	f7ff fdf5 	bl	8000f3c <HAL_GetTick>
 8001352:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	461a      	mov	r2, r3
 800135a:	2101      	movs	r1, #1
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fb94 	bl	8001a8a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001362:	f7ff fdeb 	bl	8000f3c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d90f      	bls.n	8001394 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001378:	6939      	ldr	r1, [r7, #16]
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 fdac 	bl	8001ed8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e0ac      	b.n	80014ee <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0da      	beq.n	8001354 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800139e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a2:	2100      	movs	r1, #0
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fbd8 	bl	8001b5a <HAL_ETH_WritePHYRegister>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00b      	beq.n	80013c8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013b4:	6939      	ldr	r1, [r7, #16]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fd8e 	bl	8001ed8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013c4:	2301      	movs	r3, #1
 80013c6:	e092      	b.n	80014ee <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013c8:	f7ff fdb8 	bl	8000f3c <HAL_GetTick>
 80013cc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	461a      	mov	r2, r3
 80013d4:	2101      	movs	r1, #1
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fb57 	bl	8001a8a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013dc:	f7ff fdae 	bl	8000f3c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d90f      	bls.n	800140e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013f2:	6939      	ldr	r1, [r7, #16]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fd6f 	bl	8001ed8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e06f      	b.n	80014ee <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0da      	beq.n	80013ce <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	461a      	mov	r2, r3
 800141e:	2110      	movs	r1, #16
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fb32 	bl	8001a8a <HAL_ETH_ReadPHYRegister>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001430:	6939      	ldr	r1, [r7, #16]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fd50 	bl	8001ed8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001440:	2301      	movs	r3, #1
 8001442:	e054      	b.n	80014ee <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	e002      	b.n	800145e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	e035      	b.n	80014dc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	e030      	b.n	80014dc <HAL_ETH_Init+0x31c>
 800147a:	bf00      	nop
 800147c:	03938700 	.word	0x03938700
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800
 8001488:	01312cff 	.word	0x01312cff
 800148c:	02160ebf 	.word	0x02160ebf
 8001490:	05f5e0ff 	.word	0x05f5e0ff
 8001494:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	08db      	lsrs	r3, r3, #3
 800149e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	085b      	lsrs	r3, r3, #1
 80014a6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fb52 	bl	8001b5a <HAL_ETH_WritePHYRegister>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fd08 	bl	8001ed8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e00c      	b.n	80014ee <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014d8:	f7ff fd3c 	bl	8000f54 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014dc:	6939      	ldr	r1, [r7, #16]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fcfa 	bl	8001ed8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3720      	adds	r7, #32
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop

080014f8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ETH_DMATxDescListInit+0x20>
 8001514:	2302      	movs	r3, #2
 8001516:	e052      	b.n	80015be <HAL_ETH_DMATxDescListInit+0xc6>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e030      	b.n	8001596 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	4413      	add	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001544:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	461a      	mov	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	429a      	cmp	r2, r3
 8001576:	d208      	bcs.n	800158a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	015b      	lsls	r3, r3, #5
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	4413      	add	r3, r2
 8001582:	461a      	mov	r2, r3
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	e002      	b.n	8001590 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3ca      	bcc.n	8001534 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a8:	3310      	adds	r3, #16
 80015aa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b087      	sub	sp, #28
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ETH_DMARxDescListInit+0x20>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e056      	b.n	8001698 <HAL_ETH_DMARxDescListInit+0xce>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e034      	b.n	8001670 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001616:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800161e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	461a      	mov	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3b01      	subs	r3, #1
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	429a      	cmp	r2, r3
 8001650:	d208      	bcs.n	8001664 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	015b      	lsls	r3, r3, #5
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	4413      	add	r3, r2
 800165c:	461a      	mov	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	e002      	b.n	800166a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d3c6      	bcc.n	8001606 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001682:	330c      	adds	r3, #12
 8001684:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ETH_TransmitFrame+0x24>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e0cd      	b.n	8001864 <HAL_ETH_TransmitFrame+0x1c0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0b8      	b.n	8001864 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da09      	bge.n	8001710 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2212      	movs	r2, #18
 8001700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0a9      	b.n	8001864 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001716:	4293      	cmp	r3, r2
 8001718:	d915      	bls.n	8001746 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4a54      	ldr	r2, [pc, #336]	; (8001870 <HAL_ETH_TransmitFrame+0x1cc>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0a9b      	lsrs	r3, r3, #10
 8001724:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_ETH_TransmitFrame+0x1cc>)
 800172a:	fba3 1302 	umull	r1, r3, r3, r2
 800172e:	0a9b      	lsrs	r3, r3, #10
 8001730:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e001      	b.n	800174a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001746:	2301      	movs	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d11c      	bne.n	800178a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800175e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800176a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800177a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
 8001788:	e04b      	b.n	8001822 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	e044      	b.n	800181a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800179e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d107      	bne.n	80017b6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017be:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d116      	bne.n	80017f8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017d8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_ETH_TransmitFrame+0x1d0>)
 80017de:	fb02 f203 	mul.w	r2, r2, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017ea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017f6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001802:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001806:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	3301      	adds	r3, #1
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	429a      	cmp	r2, r3
 8001820:	d3b6      	bcc.n	8001790 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182a:	3314      	adds	r3, #20
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	3314      	adds	r3, #20
 8001840:	2204      	movs	r2, #4
 8001842:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184c:	3304      	adds	r3, #4
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	371c      	adds	r7, #28
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	ac02b00b 	.word	0xac02b00b
 8001874:	fffffa0c 	.word	0xfffffa0c

08001878 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_ETH_GetReceivedFrame+0x1a>
 800188e:	2302      	movs	r3, #2
 8001890:	e070      	b.n	8001974 <HAL_ETH_GetReceivedFrame+0xfc>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2202      	movs	r2, #2
 800189e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db5a      	blt.n	8001962 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d030      	beq.n	800191c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d103      	bne.n	80018d4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0c1b      	lsrs	r3, r3, #16
 80018e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80018e8:	3b04      	subs	r3, #4
 80018ea:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	e02b      	b.n	8001974 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
 800194a:	e00a      	b.n	8001962 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	3314      	adds	r3, #20
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d112      	bne.n	80019c2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f860 	bl	8001a62 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019aa:	3314      	adds	r3, #20
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019c0:	e01b      	b.n	80019fa <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	3314      	adds	r3, #20
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d111      	bne.n	80019fa <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f839 	bl	8001a4e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e4:	3314      	adds	r3, #20
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	3314      	adds	r3, #20
 8001a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a08:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a12:	3314      	adds	r3, #20
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a1e:	d112      	bne.n	8001a46 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f828 	bl	8001a76 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2e:	3314      	adds	r3, #20
 8001a30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a34:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	460b      	mov	r3, r1
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b82      	cmp	r3, #130	; 0x82
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001aac:	2302      	movs	r3, #2
 8001aae:	e050      	b.n	8001b52 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2282      	movs	r2, #130	; 0x82
 8001ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 031c 	and.w	r3, r3, #28
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8a1b      	ldrh	r3, [r3, #16]
 8001acc:	02db      	lsls	r3, r3, #11
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ad6:	897b      	ldrh	r3, [r7, #10]
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
 8001aea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff fa1e 	bl	8000f3c <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b02:	e015      	b.n	8001b30 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b04:	f7ff fa1a 	bl	8000f3c <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b12:	d309      	bcc.n	8001b28 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e014      	b.n	8001b52 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e4      	bne.n	8001b04 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	460b      	mov	r3, r1
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b42      	cmp	r3, #66	; 0x42
 8001b7a:	d101      	bne.n	8001b80 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e04e      	b.n	8001c1e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2242      	movs	r2, #66	; 0x42
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 031c 	and.w	r3, r3, #28
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8a1b      	ldrh	r3, [r3, #16]
 8001b9c:	02db      	lsls	r3, r3, #11
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	019b      	lsls	r3, r3, #6
 8001baa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd6:	f7ff f9b1 	bl	8000f3c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bdc:	e015      	b.n	8001c0a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001bde:	f7ff f9ad 	bl	8000f3c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d309      	bcc.n	8001c02 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e00d      	b.n	8001c1e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e4      	bne.n	8001bde <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ETH_Start+0x16>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e01f      	b.n	8001c7c <HAL_ETH_Start+0x56>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 fb45 	bl	80022dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fb7c 	bl	8002350 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fc13 	bl	8002484 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fbb0 	bl	80023c4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fbdd 	bl	8002424 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ETH_Stop+0x16>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e01f      	b.n	8001cda <HAL_ETH_Stop+0x56>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 fba2 	bl	80023f4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fbcf 	bl	8002454 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fb67 	bl	800238a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fbe1 	bl	8002484 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fb27 	bl	8002316 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ETH_ConfigMAC+0x1c>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0e4      	b.n	8001eca <HAL_ETH_ConfigMAC+0x1e6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80b1 	beq.w	8001e7a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d30:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d36:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d3c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d42:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d48:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d4e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d54:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d5a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d60:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d66:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d6c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d72:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7ff f8e2 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001da0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001da6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001dac:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001db2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001db8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001dbe:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001dca:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dcc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7ff f8bc 	bl	8000f54 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dec:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001df6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e06:	4013      	ands	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e14:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e1a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e20:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e26:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e2c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff f885 	bl	8000f54 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f7ff f872 	bl	8000f54 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	61da      	str	r2, [r3, #28]
 8001e78:	e01e      	b.n	8001eb8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e88:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff f852 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	ff20810f 	.word	0xff20810f

08001ed8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0b0      	sub	sp, #192	; 0xc0
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ef4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001efc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f22:	663b      	str	r3, [r7, #96]	; 0x60
 8001f24:	e001      	b.n	8001f2a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f34:	2300      	movs	r3, #0
 8001f36:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001fac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb0:	4bac      	ldr	r3, [pc, #688]	; (8002264 <ETH_MACDMAConfig+0x38c>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fbc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fc0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fc4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fd2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fd8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fdc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fe0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fe4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fe8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001fee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002000:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800200c:	2001      	movs	r0, #1
 800200e:	f7fe ffa1 	bl	8000f54 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800201a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800201c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800201e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002020:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002022:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002024:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800202a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800202c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002030:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002036:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800203c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002040:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002048:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800204a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002056:	2001      	movs	r0, #1
 8002058:	f7fe ff7c 	bl	8000f54 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002064:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800206e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002078:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002084:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002088:	f64f 7341 	movw	r3, #65345	; 0xff41
 800208c:	4013      	ands	r3, r2
 800208e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002096:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800209c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020a2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020a8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020ae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020b4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7fe ff3d 	bl	8000f54 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7fe ff28 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002116:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800211c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002120:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002132:	2304      	movs	r3, #4
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800213c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002142:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002146:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002152:	2300      	movs	r3, #0
 8002154:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002156:	2300      	movs	r3, #0
 8002158:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	3318      	adds	r3, #24
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800216a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <ETH_MACDMAConfig+0x390>)
 8002170:	4013      	ands	r3, r2
 8002172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002176:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002178:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800217a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800217c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800217e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002180:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002182:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002184:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002186:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002188:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800218a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800218c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800218e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002192:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002194:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002196:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002198:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	3318      	adds	r3, #24
 80021ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	3318      	adds	r3, #24
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f7fe fec6 	bl	8000f54 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	3318      	adds	r3, #24
 80021d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021dc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021e0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021e4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021e8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021ee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80021f2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002210:	2001      	movs	r0, #1
 8002212:	f7fe fe9f 	bl	8000f54 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002222:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10f      	bne.n	800224c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	331c      	adds	r3, #28
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	331c      	adds	r3, #28
 800224a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	461a      	mov	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f809 	bl	800226c <ETH_MACAddressConfig>
}
 800225a:	bf00      	nop
 800225c:	37c0      	adds	r7, #192	; 0xc0
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	ff20810f 	.word	0xff20810f
 8002268:	f8de3f23 	.word	0xf8de3f23

0800226c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3305      	adds	r3, #5
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	3204      	adds	r2, #4
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <ETH_MACAddressConfig+0x68>)
 800228e:	4413      	add	r3, r2
 8002290:	461a      	mov	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3303      	adds	r3, #3
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	061a      	lsls	r2, r3, #24
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3302      	adds	r3, #2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3301      	adds	r3, #1
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	4313      	orrs	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	7812      	ldrb	r2, [r2, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <ETH_MACAddressConfig+0x6c>)
 80022be:	4413      	add	r3, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6013      	str	r3, [r2, #0]
}
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40028040 	.word	0x40028040
 80022d8:	40028044 	.word	0x40028044

080022dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002300:	2001      	movs	r0, #1
 8002302:	f000 f8e9 	bl	80024d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	601a      	str	r2, [r3, #0]
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0208 	bic.w	r2, r2, #8
 8002330:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800233a:	2001      	movs	r0, #1
 800233c:	f000 f8cc 	bl	80024d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0204 	orr.w	r2, r2, #4
 800236a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002374:	2001      	movs	r0, #1
 8002376:	f000 f8af 	bl	80024d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	601a      	str	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0204 	bic.w	r2, r2, #4
 80023a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023ae:	2001      	movs	r0, #1
 80023b0:	f000 f892 	bl	80024d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	601a      	str	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	3318      	adds	r3, #24
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e4:	3318      	adds	r3, #24
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002404:	3318      	adds	r3, #24
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	3318      	adds	r3, #24
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002434:	3318      	adds	r3, #24
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0202 	orr.w	r2, r2, #2
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	3318      	adds	r3, #24
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002464:	3318      	adds	r3, #24
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0202 	bic.w	r2, r2, #2
 8002470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002474:	3318      	adds	r3, #24
 8002476:	601a      	str	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002498:	3318      	adds	r3, #24
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	3318      	adds	r3, #24
 80024aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	3318      	adds	r3, #24
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 f80c 	bl	80024d8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ca:	3318      	adds	r3, #24
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <ETH_Delay+0x38>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0b      	ldr	r2, [pc, #44]	; (8002514 <ETH_Delay+0x3c>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0a5b      	lsrs	r3, r3, #9
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80024f4:	bf00      	nop
  } 
  while (Delay --);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	60fa      	str	r2, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1f9      	bne.n	80024f4 <ETH_Delay+0x1c>
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000000 	.word	0x20000000
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e16b      	b.n	800280c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 815a 	bne.w	8002806 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d005      	beq.n	800256a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	2b02      	cmp	r3, #2
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80b4 	beq.w	8002806 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b60      	ldr	r3, [pc, #384]	; (8002824 <HAL_GPIO_Init+0x30c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a5f      	ldr	r2, [pc, #380]	; (8002824 <HAL_GPIO_Init+0x30c>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_GPIO_Init+0x30c>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a5b      	ldr	r2, [pc, #364]	; (8002828 <HAL_GPIO_Init+0x310>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_GPIO_Init+0x314>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02b      	beq.n	800273e <HAL_GPIO_Init+0x226>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_GPIO_Init+0x318>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d025      	beq.n	800273a <HAL_GPIO_Init+0x222>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a50      	ldr	r2, [pc, #320]	; (8002834 <HAL_GPIO_Init+0x31c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01f      	beq.n	8002736 <HAL_GPIO_Init+0x21e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	; (8002838 <HAL_GPIO_Init+0x320>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d019      	beq.n	8002732 <HAL_GPIO_Init+0x21a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4e      	ldr	r2, [pc, #312]	; (800283c <HAL_GPIO_Init+0x324>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0x216>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4d      	ldr	r2, [pc, #308]	; (8002840 <HAL_GPIO_Init+0x328>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_GPIO_Init+0x212>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4c      	ldr	r2, [pc, #304]	; (8002844 <HAL_GPIO_Init+0x32c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x20e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4b      	ldr	r2, [pc, #300]	; (8002848 <HAL_GPIO_Init+0x330>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_GPIO_Init+0x20a>
 800271e:	2307      	movs	r3, #7
 8002720:	e00e      	b.n	8002740 <HAL_GPIO_Init+0x228>
 8002722:	2308      	movs	r3, #8
 8002724:	e00c      	b.n	8002740 <HAL_GPIO_Init+0x228>
 8002726:	2306      	movs	r3, #6
 8002728:	e00a      	b.n	8002740 <HAL_GPIO_Init+0x228>
 800272a:	2305      	movs	r3, #5
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x228>
 800272e:	2304      	movs	r3, #4
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x228>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x228>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x228>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x228>
 800273e:	2300      	movs	r3, #0
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002750:	4935      	ldr	r1, [pc, #212]	; (8002828 <HAL_GPIO_Init+0x310>)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_GPIO_Init+0x334>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002782:	4a32      	ldr	r2, [pc, #200]	; (800284c <HAL_GPIO_Init+0x334>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_GPIO_Init+0x334>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <HAL_GPIO_Init+0x334>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_GPIO_Init+0x334>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a1d      	ldr	r2, [pc, #116]	; (800284c <HAL_GPIO_Init+0x334>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_GPIO_Init+0x334>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a12      	ldr	r2, [pc, #72]	; (800284c <HAL_GPIO_Init+0x334>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	f67f ae90 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40013800 	.word	0x40013800
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400
 8002834:	40020800 	.word	0x40020800
 8002838:	40020c00 	.word	0x40020c00
 800283c:	40021000 	.word	0x40021000
 8002840:	40021400 	.word	0x40021400
 8002844:	40021800 	.word	0x40021800
 8002848:	40021c00 	.word	0x40021c00
 800284c:	40013c00 	.word	0x40013c00

08002850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e001      	b.n	8002872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
 800288c:	4613      	mov	r3, r2
 800288e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002890:	787b      	ldrb	r3, [r7, #1]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800289c:	e003      	b.n	80028a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	041a      	lsls	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	619a      	str	r2, [r3, #24]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c4:	887a      	ldrh	r2, [r7, #2]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	041a      	lsls	r2, r3, #16
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	887b      	ldrh	r3, [r7, #2]
 80028d2:	400b      	ands	r3, r1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	619a      	str	r2, [r3, #24]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fd ff7c 	bl	8000804 <HAL_GPIO_EXTI_Callback>
  }
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40013c00 	.word	0x40013c00

08002918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e264      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d075      	beq.n	8002a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002936:	4ba3      	ldr	r3, [pc, #652]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b04      	cmp	r3, #4
 8002940:	d00c      	beq.n	800295c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002942:	4ba0      	ldr	r3, [pc, #640]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800294a:	2b08      	cmp	r3, #8
 800294c:	d112      	bne.n	8002974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294e:	4b9d      	ldr	r3, [pc, #628]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800295a:	d10b      	bne.n	8002974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	4b99      	ldr	r3, [pc, #612]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d05b      	beq.n	8002a20 <HAL_RCC_OscConfig+0x108>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d157      	bne.n	8002a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e23f      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297c:	d106      	bne.n	800298c <HAL_RCC_OscConfig+0x74>
 800297e:	4b91      	ldr	r3, [pc, #580]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a90      	ldr	r2, [pc, #576]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e01d      	b.n	80029c8 <HAL_RCC_OscConfig+0xb0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x98>
 8002996:	4b8b      	ldr	r3, [pc, #556]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a8a      	ldr	r2, [pc, #552]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a87      	ldr	r2, [pc, #540]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0xb0>
 80029b0:	4b84      	ldr	r3, [pc, #528]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a83      	ldr	r2, [pc, #524]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b81      	ldr	r3, [pc, #516]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a80      	ldr	r2, [pc, #512]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fab4 	bl	8000f3c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fab0 	bl	8000f3c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e204      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b76      	ldr	r3, [pc, #472]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0xc0>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe faa0 	bl	8000f3c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fa9c 	bl	8000f3c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e1f0      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0xe8>
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d063      	beq.n	8002af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a2e:	4b65      	ldr	r3, [pc, #404]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00b      	beq.n	8002a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d11c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d116      	bne.n	8002a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a52:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_RCC_OscConfig+0x152>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e1c4      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6a:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4952      	ldr	r1, [pc, #328]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7e:	e03a      	b.n	8002af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a88:	4b4f      	ldr	r3, [pc, #316]	; (8002bc8 <HAL_RCC_OscConfig+0x2b0>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fa55 	bl	8000f3c <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a96:	f7fe fa51 	bl	8000f3c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1a5      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa8:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4940      	ldr	r1, [pc, #256]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]
 8002ac8:	e015      	b.n	8002af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_RCC_OscConfig+0x2b0>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fa34 	bl	8000f3c <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad8:	f7fe fa30 	bl	8000f3c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e184      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f0      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d030      	beq.n	8002b64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d016      	beq.n	8002b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0a:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <HAL_RCC_OscConfig+0x2b4>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7fe fa14 	bl	8000f3c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b18:	f7fe fa10 	bl	8000f3c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e164      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x200>
 8002b36:	e015      	b.n	8002b64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b38:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_OscConfig+0x2b4>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3e:	f7fe f9fd 	bl	8000f3c <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe f9f9 	bl	8000f3c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e14d      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a0 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b76:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_RCC_OscConfig+0x2b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d121      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_RCC_OscConfig+0x2b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <HAL_RCC_OscConfig+0x2b8>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7fe f9bf 	bl	8000f3c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	e011      	b.n	8002be6 <HAL_RCC_OscConfig+0x2ce>
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	42470000 	.word	0x42470000
 8002bcc:	42470e80 	.word	0x42470e80
 8002bd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe f9b2 	bl	8000f3c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e106      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	4b85      	ldr	r3, [pc, #532]	; (8002dfc <HAL_RCC_OscConfig+0x4e4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d106      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2f0>
 8002bfa:	4b81      	ldr	r3, [pc, #516]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a80      	ldr	r2, [pc, #512]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	e01c      	b.n	8002c42 <HAL_RCC_OscConfig+0x32a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	d10c      	bne.n	8002c2a <HAL_RCC_OscConfig+0x312>
 8002c10:	4b7b      	ldr	r3, [pc, #492]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c14:	4a7a      	ldr	r2, [pc, #488]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1c:	4b78      	ldr	r3, [pc, #480]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a77      	ldr	r2, [pc, #476]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	e00b      	b.n	8002c42 <HAL_RCC_OscConfig+0x32a>
 8002c2a:	4b75      	ldr	r3, [pc, #468]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a74      	ldr	r2, [pc, #464]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	4b72      	ldr	r3, [pc, #456]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a71      	ldr	r2, [pc, #452]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f977 	bl	8000f3c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c52:	f7fe f973 	bl	8000f3c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0c5      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c68:	4b65      	ldr	r3, [pc, #404]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ee      	beq.n	8002c52 <HAL_RCC_OscConfig+0x33a>
 8002c74:	e014      	b.n	8002ca0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe f961 	bl	8000f3c <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	e00a      	b.n	8002c94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7e:	f7fe f95d 	bl	8000f3c <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0af      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c94:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1ee      	bne.n	8002c7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a55      	ldr	r2, [pc, #340]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 809b 	beq.w	8002df2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d05c      	beq.n	8002d82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d141      	bne.n	8002d54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd0:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_RCC_OscConfig+0x4ec>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7fe f931 	bl	8000f3c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fe f92d 	bl	8000f3c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e081      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf0:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	019b      	lsls	r3, r3, #6
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	3b01      	subs	r3, #1
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	4937      	ldr	r1, [pc, #220]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d26:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_RCC_OscConfig+0x4ec>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe f906 	bl	8000f3c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d34:	f7fe f902 	bl	8000f3c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e056      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x41c>
 8002d52:	e04e      	b.n	8002df2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_RCC_OscConfig+0x4ec>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f8ef 	bl	8000f3c <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d62:	f7fe f8eb 	bl	8000f3c <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e03f      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x44a>
 8002d80:	e037      	b.n	8002df2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e032      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_RCC_OscConfig+0x4e8>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d028      	beq.n	8002dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d121      	bne.n	8002dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d11a      	bne.n	8002dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	40023800 	.word	0x40023800
 8002e04:	42470060 	.word	0x42470060

08002e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0cc      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d90c      	bls.n	8002e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e32:	4b63      	ldr	r3, [pc, #396]	; (8002fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d001      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0b8      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d020      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e5c:	4b59      	ldr	r3, [pc, #356]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a58      	ldr	r2, [pc, #352]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e74:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a52      	ldr	r2, [pc, #328]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e80:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	494d      	ldr	r1, [pc, #308]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d044      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d119      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e07f      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d003      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d107      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e06f      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e067      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f023 0203 	bic.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4934      	ldr	r1, [pc, #208]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef8:	f7fe f820 	bl	8000f3c <HAL_GetTick>
 8002efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f00:	f7fe f81c 	bl	8000f3c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e04f      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 020c 	and.w	r2, r3, #12
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d1eb      	bne.n	8002f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d20c      	bcs.n	8002f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b20      	ldr	r3, [pc, #128]	; (8002fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e032      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4916      	ldr	r1, [pc, #88]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	490e      	ldr	r1, [pc, #56]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8e:	f000 f821 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f92:	4602      	mov	r2, r0
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	490a      	ldr	r1, [pc, #40]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	5ccb      	ldrb	r3, [r1, r3]
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd ff80 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023c00 	.word	0x40023c00
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	08013a90 	.word	0x08013a90
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b5b0      	push	{r4, r5, r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6079      	str	r1, [r7, #4]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	60f9      	str	r1, [r7, #12]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fea:	4952      	ldr	r1, [pc, #328]	; (8003134 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fec:	6889      	ldr	r1, [r1, #8]
 8002fee:	f001 010c 	and.w	r1, r1, #12
 8002ff2:	2908      	cmp	r1, #8
 8002ff4:	d00d      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x3e>
 8002ff6:	2908      	cmp	r1, #8
 8002ff8:	f200 8094 	bhi.w	8003124 <HAL_RCC_GetSysClockFreq+0x150>
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_RCC_GetSysClockFreq+0x32>
 8003000:	2904      	cmp	r1, #4
 8003002:	d003      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x38>
 8003004:	e08e      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003006:	4b4c      	ldr	r3, [pc, #304]	; (8003138 <HAL_RCC_GetSysClockFreq+0x164>)
 8003008:	60bb      	str	r3, [r7, #8]
       break;
 800300a:	e08e      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800300c:	4b4b      	ldr	r3, [pc, #300]	; (800313c <HAL_RCC_GetSysClockFreq+0x168>)
 800300e:	60bb      	str	r3, [r7, #8]
      break;
 8003010:	e08b      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003012:	4948      	ldr	r1, [pc, #288]	; (8003134 <HAL_RCC_GetSysClockFreq+0x160>)
 8003014:	6849      	ldr	r1, [r1, #4]
 8003016:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800301a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800301c:	4945      	ldr	r1, [pc, #276]	; (8003134 <HAL_RCC_GetSysClockFreq+0x160>)
 800301e:	6849      	ldr	r1, [r1, #4]
 8003020:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003024:	2900      	cmp	r1, #0
 8003026:	d024      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003028:	4942      	ldr	r1, [pc, #264]	; (8003134 <HAL_RCC_GetSysClockFreq+0x160>)
 800302a:	6849      	ldr	r1, [r1, #4]
 800302c:	0989      	lsrs	r1, r1, #6
 800302e:	4608      	mov	r0, r1
 8003030:	f04f 0100 	mov.w	r1, #0
 8003034:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003038:	f04f 0500 	mov.w	r5, #0
 800303c:	ea00 0204 	and.w	r2, r0, r4
 8003040:	ea01 0305 	and.w	r3, r1, r5
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <HAL_RCC_GetSysClockFreq+0x168>)
 8003046:	fb01 f003 	mul.w	r0, r1, r3
 800304a:	2100      	movs	r1, #0
 800304c:	fb01 f102 	mul.w	r1, r1, r2
 8003050:	1844      	adds	r4, r0, r1
 8003052:	493a      	ldr	r1, [pc, #232]	; (800313c <HAL_RCC_GetSysClockFreq+0x168>)
 8003054:	fba2 0101 	umull	r0, r1, r2, r1
 8003058:	1863      	adds	r3, r4, r1
 800305a:	4619      	mov	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	461a      	mov	r2, r3
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	f7fd f904 	bl	8000270 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	e04a      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b30      	ldr	r3, [pc, #192]	; (8003134 <HAL_RCC_GetSysClockFreq+0x160>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	461a      	mov	r2, r3
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	ea02 0400 	and.w	r4, r2, r0
 800308a:	ea03 0501 	and.w	r5, r3, r1
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	014b      	lsls	r3, r1, #5
 800309c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030a0:	0142      	lsls	r2, r0, #5
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	1b00      	subs	r0, r0, r4
 80030a8:	eb61 0105 	sbc.w	r1, r1, r5
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	018b      	lsls	r3, r1, #6
 80030b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030ba:	0182      	lsls	r2, r0, #6
 80030bc:	1a12      	subs	r2, r2, r0
 80030be:	eb63 0301 	sbc.w	r3, r3, r1
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	00d9      	lsls	r1, r3, #3
 80030cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030d0:	00d0      	lsls	r0, r2, #3
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	1912      	adds	r2, r2, r4
 80030d8:	eb45 0303 	adc.w	r3, r5, r3
 80030dc:	f04f 0000 	mov.w	r0, #0
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	0299      	lsls	r1, r3, #10
 80030e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ea:	0290      	lsls	r0, r2, #10
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4610      	mov	r0, r2
 80030f2:	4619      	mov	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	f7fd f8b8 	bl	8000270 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <HAL_RCC_GetSysClockFreq+0x160>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	3301      	adds	r3, #1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003120:	60bb      	str	r3, [r7, #8]
      break;
 8003122:	e002      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_RCC_GetSysClockFreq+0x164>)
 8003126:	60bb      	str	r3, [r7, #8]
      break;
 8003128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312a:	68bb      	ldr	r3, [r7, #8]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bdb0      	pop	{r4, r5, r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	017d7840 	.word	0x017d7840

08003140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_GetHCLKFreq+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000

08003158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e041      	b.n	80031ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fcf8 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f000 f9ce 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e04e      	b.n	80032ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a23      	ldr	r2, [pc, #140]	; (80032bc <HAL_TIM_Base_Start_IT+0xc4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d022      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323a:	d01d      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d018      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00e      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_TIM_Base_Start_IT+0xd4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d009      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a19      	ldr	r2, [pc, #100]	; (80032d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d111      	bne.n	800329c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b06      	cmp	r3, #6
 8003288:	d010      	beq.n	80032ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329a:	e007      	b.n	80032ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40000800 	.word	0x40000800
 80032c8:	40000c00 	.word	0x40000c00
 80032cc:	40010400 	.word	0x40010400
 80032d0:	40014000 	.word	0x40014000
 80032d4:	40001800 	.word	0x40001800

080032d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d122      	bne.n	8003334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d11b      	bne.n	8003334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0202 	mvn.w	r2, #2
 8003304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f8ee 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003320:	e005      	b.n	800332e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8e0 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8f1 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d122      	bne.n	8003388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b04      	cmp	r3, #4
 800334e:	d11b      	bne.n	8003388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0204 	mvn.w	r2, #4
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8c4 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8b6 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8c7 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b08      	cmp	r3, #8
 8003394:	d122      	bne.n	80033dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d11b      	bne.n	80033dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f06f 0208 	mvn.w	r2, #8
 80033ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f89a 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 80033c8:	e005      	b.n	80033d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f88c 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f89d 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d122      	bne.n	8003430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d11b      	bne.n	8003430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0210 	mvn.w	r2, #16
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f870 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f862 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f873 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10e      	bne.n	800345c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0201 	mvn.w	r2, #1
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd f9bc 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003466:	2b80      	cmp	r3, #128	; 0x80
 8003468:	d10e      	bne.n	8003488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d107      	bne.n	8003488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f902 	bl	800368c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f838 	bl	8003524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0220 	mvn.w	r2, #32
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8cc 	bl	8003678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a40      	ldr	r2, [pc, #256]	; (800364c <TIM_Base_SetConfig+0x114>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d013      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d00f      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3d      	ldr	r2, [pc, #244]	; (8003650 <TIM_Base_SetConfig+0x118>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00b      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <TIM_Base_SetConfig+0x11c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3b      	ldr	r2, [pc, #236]	; (8003658 <TIM_Base_SetConfig+0x120>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3a      	ldr	r2, [pc, #232]	; (800365c <TIM_Base_SetConfig+0x124>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d108      	bne.n	800358a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2f      	ldr	r2, [pc, #188]	; (800364c <TIM_Base_SetConfig+0x114>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02b      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d027      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2c      	ldr	r2, [pc, #176]	; (8003650 <TIM_Base_SetConfig+0x118>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d023      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2b      	ldr	r2, [pc, #172]	; (8003654 <TIM_Base_SetConfig+0x11c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01f      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <TIM_Base_SetConfig+0x120>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01b      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <TIM_Base_SetConfig+0x124>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d017      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <TIM_Base_SetConfig+0x128>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a27      	ldr	r2, [pc, #156]	; (8003664 <TIM_Base_SetConfig+0x12c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00f      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a26      	ldr	r2, [pc, #152]	; (8003668 <TIM_Base_SetConfig+0x130>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00b      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a25      	ldr	r2, [pc, #148]	; (800366c <TIM_Base_SetConfig+0x134>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a24      	ldr	r2, [pc, #144]	; (8003670 <TIM_Base_SetConfig+0x138>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a23      	ldr	r2, [pc, #140]	; (8003674 <TIM_Base_SetConfig+0x13c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d108      	bne.n	80035fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <TIM_Base_SetConfig+0x114>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <TIM_Base_SetConfig+0xf8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0c      	ldr	r2, [pc, #48]	; (800365c <TIM_Base_SetConfig+0x124>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d103      	bne.n	8003638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	615a      	str	r2, [r3, #20]
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40010000 	.word	0x40010000
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40010400 	.word	0x40010400
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800
 800366c:	40001800 	.word	0x40001800
 8003670:	40001c00 	.word	0x40001c00
 8003674:	40002000 	.word	0x40002000

08003678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80036a6:	f000 fc5f 	bl	8003f68 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80036aa:	4b19      	ldr	r3, [pc, #100]	; (8003710 <MX_LWIP_Init+0x70>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <MX_LWIP_Init+0x74>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <MX_LWIP_Init+0x78>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <MX_LWIP_Init+0x7c>)
 80036be:	9302      	str	r3, [sp, #8]
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <MX_LWIP_Init+0x80>)
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	2300      	movs	r3, #0
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4b13      	ldr	r3, [pc, #76]	; (8003718 <MX_LWIP_Init+0x78>)
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <MX_LWIP_Init+0x74>)
 80036cc:	4910      	ldr	r1, [pc, #64]	; (8003710 <MX_LWIP_Init+0x70>)
 80036ce:	4815      	ldr	r0, [pc, #84]	; (8003724 <MX_LWIP_Init+0x84>)
 80036d0:	f001 f8f0 	bl	80048b4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80036d4:	4813      	ldr	r0, [pc, #76]	; (8003724 <MX_LWIP_Init+0x84>)
 80036d6:	f001 faa7 	bl	8004c28 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <MX_LWIP_Init+0x84>)
 80036dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80036ec:	480d      	ldr	r0, [pc, #52]	; (8003724 <MX_LWIP_Init+0x84>)
 80036ee:	f001 faab 	bl	8004c48 <netif_set_up>
 80036f2:	e002      	b.n	80036fa <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80036f4:	480b      	ldr	r0, [pc, #44]	; (8003724 <MX_LWIP_Init+0x84>)
 80036f6:	f001 fb13 	bl	8004d20 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80036fa:	490b      	ldr	r1, [pc, #44]	; (8003728 <MX_LWIP_Init+0x88>)
 80036fc:	4809      	ldr	r0, [pc, #36]	; (8003724 <MX_LWIP_Init+0x84>)
 80036fe:	f001 fba9 	bl	8004e54 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003702:	4808      	ldr	r0, [pc, #32]	; (8003724 <MX_LWIP_Init+0x84>)
 8003704:	f008 fc9e 	bl	800c044 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200002f4 	.word	0x200002f4
 8003714:	200002f8 	.word	0x200002f8
 8003718:	200002fc 	.word	0x200002fc
 800371c:	0800fa89 	.word	0x0800fa89
 8003720:	08003d21 	.word	0x08003d21
 8003724:	200002bc 	.word	0x200002bc
 8003728:	08003e15 	.word	0x08003e15

0800372c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003730:	480f      	ldr	r0, [pc, #60]	; (8003770 <MX_LWIP_Process+0x44>)
 8003732:	f000 fad5 	bl	8003ce0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003736:	f007 fc0b 	bl	800af50 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
  ethernetif_set_link(&gnetif);
 800373a:	480d      	ldr	r0, [pc, #52]	; (8003770 <MX_LWIP_Process+0x44>)
 800373c:	f000 fb26 	bl	8003d8c <ethernetif_set_link>
  if (netif_is_link_up(&gnetif) && !netif_is_up(&gnetif))
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <MX_LWIP_Process+0x44>)
 8003742:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <MX_LWIP_Process+0x40>
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <MX_LWIP_Process+0x44>)
 8003754:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <MX_LWIP_Process+0x40>
  {
	  netif_set_up(&gnetif);
 8003760:	4803      	ldr	r0, [pc, #12]	; (8003770 <MX_LWIP_Process+0x44>)
 8003762:	f001 fa71 	bl	8004c48 <netif_set_up>
	  dhcp_start(&gnetif);
 8003766:	4802      	ldr	r0, [pc, #8]	; (8003770 <MX_LWIP_Process+0x44>)
 8003768:	f008 fc6c 	bl	800c044 <dhcp_start>
  }

/* USER CODE END 4_3 */
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}
 8003770:	200002bc 	.word	0x200002bc

08003774 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08e      	sub	sp, #56	; 0x38
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800377c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	605a      	str	r2, [r3, #4]
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <HAL_ETH_MspInit+0x158>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f040 8095 	bne.w	80038c2 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003798:	2300      	movs	r3, #0
 800379a:	623b      	str	r3, [r7, #32]
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037a6:	6313      	str	r3, [r2, #48]	; 0x30
 80037a8:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	4a44      	ldr	r2, [pc, #272]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037c2:	6313      	str	r3, [r2, #48]	; 0x30
 80037c4:	4b42      	ldr	r3, [pc, #264]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	4a3d      	ldr	r2, [pc, #244]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037de:	6313      	str	r3, [r2, #48]	; 0x30
 80037e0:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	4a36      	ldr	r2, [pc, #216]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6313      	str	r3, [r2, #48]	; 0x30
 80037fc:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6313      	str	r3, [r2, #48]	; 0x30
 8003818:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	4a28      	ldr	r2, [pc, #160]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	6313      	str	r3, [r2, #48]	; 0x30
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <HAL_ETH_MspInit+0x15c>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003840:	2332      	movs	r3, #50	; 0x32
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003850:	230b      	movs	r3, #11
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003858:	4619      	mov	r1, r3
 800385a:	481e      	ldr	r0, [pc, #120]	; (80038d4 <HAL_ETH_MspInit+0x160>)
 800385c:	f7fe fe5c 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003860:	2386      	movs	r3, #134	; 0x86
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003864:	2302      	movs	r3, #2
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003868:	2300      	movs	r3, #0
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386c:	2303      	movs	r3, #3
 800386e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003870:	230b      	movs	r3, #11
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003878:	4619      	mov	r1, r3
 800387a:	4817      	ldr	r0, [pc, #92]	; (80038d8 <HAL_ETH_MspInit+0x164>)
 800387c:	f7fe fe4c 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003880:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800388e:	2303      	movs	r3, #3
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003892:	230b      	movs	r3, #11
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389a:	4619      	mov	r1, r3
 800389c:	480f      	ldr	r0, [pc, #60]	; (80038dc <HAL_ETH_MspInit+0x168>)
 800389e:	f7fe fe3b 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	203d      	movs	r0, #61	; 0x3d
 80038a8:	f7fd fc53 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80038ac:	203d      	movs	r0, #61	; 0x3d
 80038ae:	f7fd fc6c 	bl	800118a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	203e      	movs	r0, #62	; 0x3e
 80038b8:	f7fd fc4b 	bl	8001152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80038bc:	203e      	movs	r0, #62	; 0x3e
 80038be:	f7fd fc64 	bl	800118a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80038c2:	bf00      	nop
 80038c4:	3738      	adds	r7, #56	; 0x38
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40028000 	.word	0x40028000
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40020800 	.word	0x40020800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400

080038e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80038ec:	4b4d      	ldr	r3, [pc, #308]	; (8003a24 <low_level_init+0x144>)
 80038ee:	4a4e      	ldr	r2, [pc, #312]	; (8003a28 <low_level_init+0x148>)
 80038f0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80038f2:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <low_level_init+0x144>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80038f8:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <low_level_init+0x144>)
 80038fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038fe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003900:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <low_level_init+0x144>)
 8003902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003906:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003908:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <low_level_init+0x144>)
 800390a:	2200      	movs	r2, #0
 800390c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800390e:	2300      	movs	r3, #0
 8003910:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003916:	23e1      	movs	r3, #225	; 0xe1
 8003918:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800391a:	2300      	movs	r3, #0
 800391c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800391e:	2300      	movs	r3, #0
 8003920:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003922:	2300      	movs	r3, #0
 8003924:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003926:	4a3f      	ldr	r2, [pc, #252]	; (8003a24 <low_level_init+0x144>)
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <low_level_init+0x144>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003934:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <low_level_init+0x144>)
 8003936:	2200      	movs	r2, #0
 8003938:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800393a:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <low_level_init+0x144>)
 800393c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003940:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003942:	4838      	ldr	r0, [pc, #224]	; (8003a24 <low_level_init+0x144>)
 8003944:	f7fd fc3c 	bl	80011c0 <HAL_ETH_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003958:	f043 0304 	orr.w	r3, r3, #4
 800395c:	b2da      	uxtb	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003964:	2304      	movs	r3, #4
 8003966:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <low_level_init+0x14c>)
 8003968:	4931      	ldr	r1, [pc, #196]	; (8003a30 <low_level_init+0x150>)
 800396a:	482e      	ldr	r0, [pc, #184]	; (8003a24 <low_level_init+0x144>)
 800396c:	f7fd fdc4 	bl	80014f8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003970:	2304      	movs	r3, #4
 8003972:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <low_level_init+0x154>)
 8003974:	4930      	ldr	r1, [pc, #192]	; (8003a38 <low_level_init+0x158>)
 8003976:	482b      	ldr	r0, [pc, #172]	; (8003a24 <low_level_init+0x144>)
 8003978:	f7fd fe27 	bl	80015ca <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2206      	movs	r2, #6
 8003980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <low_level_init+0x144>)
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <low_level_init+0x144>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	785a      	ldrb	r2, [r3, #1]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <low_level_init+0x144>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	789a      	ldrb	r2, [r3, #2]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <low_level_init+0x144>)
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	78da      	ldrb	r2, [r3, #3]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <low_level_init+0x144>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	791a      	ldrb	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80039c0:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <low_level_init+0x144>)
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	795a      	ldrb	r2, [r3, #5]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039da:	f043 030a 	orr.w	r3, r3, #10
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80039e6:	480f      	ldr	r0, [pc, #60]	; (8003a24 <low_level_init+0x144>)
 80039e8:	f7fe f91d 	bl	8001c26 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80039ec:	f107 0310 	add.w	r3, r7, #16
 80039f0:	461a      	mov	r2, r3
 80039f2:	211d      	movs	r1, #29
 80039f4:	480b      	ldr	r0, [pc, #44]	; (8003a24 <low_level_init+0x144>)
 80039f6:	f7fe f848 	bl	8001a8a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f043 030b 	orr.w	r3, r3, #11
 8003a00:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	461a      	mov	r2, r3
 8003a06:	211d      	movs	r1, #29
 8003a08:	4806      	ldr	r0, [pc, #24]	; (8003a24 <low_level_init+0x144>)
 8003a0a:	f7fe f8a6 	bl	8001b5a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003a0e:	f107 0310 	add.w	r3, r7, #16
 8003a12:	461a      	mov	r2, r3
 8003a14:	211d      	movs	r1, #29
 8003a16:	4803      	ldr	r0, [pc, #12]	; (8003a24 <low_level_init+0x144>)
 8003a18:	f7fe f837 	bl	8001a8a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003a1c:	bf00      	nop
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20001bd0 	.word	0x20001bd0
 8003a28:	40028000 	.word	0x40028000
 8003a2c:	20001c18 	.word	0x20001c18
 8003a30:	20000300 	.word	0x20000300
 8003a34:	20000380 	.word	0x20000380
 8003a38:	20001b50 	.word	0x20001b50

08003a3c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003a46:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <low_level_output+0x138>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003a5e:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <low_level_output+0x138>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	623b      	str	r3, [r7, #32]
 8003a6c:	e05a      	b.n	8003b24 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da03      	bge.n	8003a7e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003a76:	23f8      	movs	r3, #248	; 0xf8
 8003a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003a7c:	e05c      	b.n	8003b38 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	895b      	ldrh	r3, [r3, #10]
 8003a82:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003a88:	e02f      	b.n	8003aea <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	18d0      	adds	r0, r2, r3
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	18d1      	adds	r1, r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f00c f8f9 	bl	800fc98 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da03      	bge.n	8003abc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003ab4:	23f8      	movs	r3, #248	; 0xf8
 8003ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003aba:	e03d      	b.n	8003b38 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003acc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ad8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ae4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d8c8      	bhi.n	8003a8a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	18d0      	adds	r0, r2, r3
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f00c f8c5 	bl	800fc98 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1a1      	bne.n	8003a6e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003b2a:	6979      	ldr	r1, [r7, #20]
 8003b2c:	4811      	ldr	r0, [pc, #68]	; (8003b74 <low_level_output+0x138>)
 8003b2e:	f7fd fdb9 	bl	80016a4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <low_level_output+0x138>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b40:	3314      	adds	r3, #20
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00d      	beq.n	8003b68 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <low_level_output+0x138>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b54:	3314      	adds	r3, #20
 8003b56:	2220      	movs	r2, #32
 8003b58:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <low_level_output+0x138>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b62:	3304      	adds	r3, #4
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003b68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20001bd0 	.word	0x20001bd0

08003b78 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08c      	sub	sp, #48	; 0x30
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003b9c:	484f      	ldr	r0, [pc, #316]	; (8003cdc <low_level_input+0x164>)
 8003b9e:	f7fd fe6b 	bl	8001878 <HAL_ETH_GetReceivedFrame>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <low_level_input+0x34>

    return NULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e092      	b.n	8003cd2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <low_level_input+0x164>)
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003bb2:	4b4a      	ldr	r3, [pc, #296]	; (8003cdc <low_level_input+0x164>)
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003bb8:	89fb      	ldrh	r3, [r7, #14]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f001 f9e0 	bl	8004f8c <pbuf_alloc>
 8003bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d04b      	beq.n	8003c6c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003bd4:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <low_level_input+0x164>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be2:	e040      	b.n	8003c66 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	895b      	ldrh	r3, [r3, #10]
 8003be8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003bee:	e021      	b.n	8003c34 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	18d0      	adds	r0, r2, r3
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	18d1      	adds	r1, r2, r3
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003c04:	3304      	adds	r3, #4
 8003c06:	461a      	mov	r2, r3
 8003c08:	f00c f846 	bl	800fc98 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003c22:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003c2e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d8d6      	bhi.n	8003bf0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	18d0      	adds	r0, r2, r3
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4619      	mov	r1, r3
 8003c54:	f00c f820 	bl	800fc98 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1bb      	bne.n	8003be4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <low_level_input+0x164>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	e00b      	b.n	8003c90 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <low_level_input+0x164>)
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3ee      	bcc.n	8003c78 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <low_level_input+0x164>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003ca0:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <low_level_input+0x164>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca8:	3314      	adds	r3, #20
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00d      	beq.n	8003cd0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <low_level_input+0x164>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <low_level_input+0x164>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3730      	adds	r7, #48	; 0x30
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	20001bd0 	.word	0x20001bd0

08003ce0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff45 	bl	8003b78 <low_level_input>
 8003cee:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	4798      	blx	r3
 8003d00:	4603      	mov	r3, r0
 8003d02:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003d04:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d006      	beq.n	8003d1a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f001 fc21 	bl	8005554 <pbuf_free>
    p = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	e000      	b.n	8003d1a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003d18:	bf00      	nop
  }
}
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <ethernetif_init+0x1c>
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <ethernetif_init+0x48>)
 8003d30:	f240 2211 	movw	r2, #529	; 0x211
 8003d34:	490d      	ldr	r1, [pc, #52]	; (8003d6c <ethernetif_init+0x4c>)
 8003d36:	480e      	ldr	r0, [pc, #56]	; (8003d70 <ethernetif_init+0x50>)
 8003d38:	f00b ffc4 	bl	800fcc4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2273      	movs	r2, #115	; 0x73
 8003d40:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2274      	movs	r2, #116	; 0x74
 8003d48:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <ethernetif_init+0x54>)
 8003d50:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <ethernetif_init+0x58>)
 8003d56:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fdc1 	bl	80038e0 <low_level_init>

  return ERR_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	08010d10 	.word	0x08010d10
 8003d6c:	08010d2c 	.word	0x08010d2c
 8003d70:	08010d3c 	.word	0x08010d3c
 8003d74:	0800df11 	.word	0x0800df11
 8003d78:	08003a3d 	.word	0x08003a3d

08003d7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003d80:	f7fd f8dc 	bl	8000f3c <HAL_GetTick>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 8003d98:	f7fd f8d0 	bl	8000f3c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <ethernetif_set_link+0x80>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2bc7      	cmp	r3, #199	; 0xc7
 8003da6:	d92c      	bls.n	8003e02 <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003da8:	f7fd f8c8 	bl	8000f3c <HAL_GetTick>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <ethernetif_set_link+0x80>)
 8003db0:	6013      	str	r3, [r2, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	461a      	mov	r2, r3
 8003db8:	2101      	movs	r1, #1
 8003dba:	4815      	ldr	r0, [pc, #84]	; (8003e10 <ethernetif_set_link+0x84>)
 8003dbc:	f7fd fe65 	bl	8001a8a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <ethernetif_set_link+0x58>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 ffd1 	bl	8004d84 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 8003de2:	e00e      	b.n	8003e02 <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <ethernetif_set_link+0x76>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fff9 	bl	8004df4 <netif_set_link_down>
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200000a0 	.word	0x200000a0
 8003e10:	20001bd0 	.word	0x20001bd0

08003e14 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d05d      	beq.n	8003ef2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003e36:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03f      	beq.n	8003ebe <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003e3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e42:	2100      	movs	r1, #0
 8003e44:	4830      	ldr	r0, [pc, #192]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003e46:	f7fd fe88 	bl	8001b5a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003e4a:	f7fd f877 	bl	8000f3c <HAL_GetTick>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	461a      	mov	r2, r3
 8003e58:	2101      	movs	r1, #1
 8003e5a:	482b      	ldr	r0, [pc, #172]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003e5c:	f7fd fe15 	bl	8001a8a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003e60:	f7fd f86c 	bl	8000f3c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e6e:	d828      	bhi.n	8003ec2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0eb      	beq.n	8003e52 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003e7a:	f107 0308 	add.w	r3, r7, #8
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2110      	movs	r1, #16
 8003e82:	4821      	ldr	r0, [pc, #132]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003e84:	f7fd fe01 	bl	8001a8a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	e002      	b.n	8003ea2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003eac:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	e016      	b.n	8003ee2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	e011      	b.n	8003ee2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <ethernetif_update_config+0xb0>
          goto error;
 8003ec2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ec4:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	08db      	lsrs	r3, r3, #3
 8003eca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2100      	movs	r1, #0
 8003edc:	480a      	ldr	r0, [pc, #40]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003ede:	f7fd fe3c 	bl	8001b5a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4808      	ldr	r0, [pc, #32]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003ee6:	f7fd fefd 	bl	8001ce4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003eea:	4807      	ldr	r0, [pc, #28]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003eec:	f7fd fe9b 	bl	8001c26 <HAL_ETH_Start>
 8003ef0:	e002      	b.n	8003ef8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003ef2:	4805      	ldr	r0, [pc, #20]	; (8003f08 <ethernetif_update_config+0xf4>)
 8003ef4:	f7fd fec6 	bl	8001c84 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fc fb35 	bl	8000568 <ethernetif_notify_conn_changed>
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20001bd0 	.word	0x20001bd0

08003f0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	021b      	lsls	r3, r3, #8
 8003f1a:	b21a      	sxth	r2, r3
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b21b      	sxth	r3, r3
 8003f28:	b29b      	uxth	r3, r3
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	061a      	lsls	r2, r3, #24
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	021b      	lsls	r3, r3, #8
 8003f46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0e1b      	lsrs	r3, r3, #24
 8003f5a:	4313      	orrs	r3, r2
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003f72:	f000 f8d5 	bl	8004120 <mem_init>
  memp_init();
 8003f76:	f000 fbdb 	bl	8004730 <memp_init>
  pbuf_init();
  netif_init();
 8003f7a:	f000 fc93 	bl	80048a4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003f7e:	f007 f829 	bl	800afd4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003f82:	f001 fd85 	bl	8005a90 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003f86:	f006 ff9b 	bl	800aec0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <ptr_to_mem+0x20>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	4413      	add	r3, r2
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	200000a4 	.word	0x200000a4

08003fb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <mem_to_ptr+0x20>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	b29b      	uxth	r3, r3
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	200000a4 	.word	0x200000a4

08003fdc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003fe4:	4b45      	ldr	r3, [pc, #276]	; (80040fc <plug_holes+0x120>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d206      	bcs.n	8003ffc <plug_holes+0x20>
 8003fee:	4b44      	ldr	r3, [pc, #272]	; (8004100 <plug_holes+0x124>)
 8003ff0:	f240 12df 	movw	r2, #479	; 0x1df
 8003ff4:	4943      	ldr	r1, [pc, #268]	; (8004104 <plug_holes+0x128>)
 8003ff6:	4844      	ldr	r0, [pc, #272]	; (8004108 <plug_holes+0x12c>)
 8003ff8:	f00b fe64 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003ffc:	4b43      	ldr	r3, [pc, #268]	; (800410c <plug_holes+0x130>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	429a      	cmp	r2, r3
 8004004:	d306      	bcc.n	8004014 <plug_holes+0x38>
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <plug_holes+0x124>)
 8004008:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800400c:	4940      	ldr	r1, [pc, #256]	; (8004110 <plug_holes+0x134>)
 800400e:	483e      	ldr	r0, [pc, #248]	; (8004108 <plug_holes+0x12c>)
 8004010:	f00b fe58 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	791b      	ldrb	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <plug_holes+0x4e>
 800401c:	4b38      	ldr	r3, [pc, #224]	; (8004100 <plug_holes+0x124>)
 800401e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004022:	493c      	ldr	r1, [pc, #240]	; (8004114 <plug_holes+0x138>)
 8004024:	4838      	ldr	r0, [pc, #224]	; (8004108 <plug_holes+0x12c>)
 8004026:	f00b fe4d 	bl	800fcc4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004032:	d906      	bls.n	8004042 <plug_holes+0x66>
 8004034:	4b32      	ldr	r3, [pc, #200]	; (8004100 <plug_holes+0x124>)
 8004036:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800403a:	4937      	ldr	r1, [pc, #220]	; (8004118 <plug_holes+0x13c>)
 800403c:	4832      	ldr	r0, [pc, #200]	; (8004108 <plug_holes+0x12c>)
 800403e:	f00b fe41 	bl	800fcc4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ffa4 	bl	8003f94 <ptr_to_mem>
 800404c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	429a      	cmp	r2, r3
 8004054:	d024      	beq.n	80040a0 <plug_holes+0xc4>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	791b      	ldrb	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d120      	bne.n	80040a0 <plug_holes+0xc4>
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <plug_holes+0x130>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	429a      	cmp	r2, r3
 8004066:	d01b      	beq.n	80040a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004068:	4b2c      	ldr	r3, [pc, #176]	; (800411c <plug_holes+0x140>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	429a      	cmp	r2, r3
 8004070:	d102      	bne.n	8004078 <plug_holes+0x9c>
      lfree = mem;
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <plug_holes+0x140>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004088:	d00a      	beq.n	80040a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff80 	bl	8003f94 <ptr_to_mem>
 8004094:	4604      	mov	r4, r0
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ff8e 	bl	8003fb8 <mem_to_ptr>
 800409c:	4603      	mov	r3, r0
 800409e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	885b      	ldrh	r3, [r3, #2]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff75 	bl	8003f94 <ptr_to_mem>
 80040aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d01f      	beq.n	80040f4 <plug_holes+0x118>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	791b      	ldrb	r3, [r3, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d11b      	bne.n	80040f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80040bc:	4b17      	ldr	r3, [pc, #92]	; (800411c <plug_holes+0x140>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d102      	bne.n	80040cc <plug_holes+0xf0>
      lfree = pmem;
 80040c6:	4a15      	ldr	r2, [pc, #84]	; (800411c <plug_holes+0x140>)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	881a      	ldrh	r2, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80040dc:	d00a      	beq.n	80040f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ff56 	bl	8003f94 <ptr_to_mem>
 80040e8:	4604      	mov	r4, r0
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f7ff ff64 	bl	8003fb8 <mem_to_ptr>
 80040f0:	4603      	mov	r3, r0
 80040f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd90      	pop	{r4, r7, pc}
 80040fc:	200000a4 	.word	0x200000a4
 8004100:	08010d64 	.word	0x08010d64
 8004104:	08010d94 	.word	0x08010d94
 8004108:	08010dac 	.word	0x08010dac
 800410c:	200000a8 	.word	0x200000a8
 8004110:	08010dd4 	.word	0x08010dd4
 8004114:	08010df0 	.word	0x08010df0
 8004118:	08010e0c 	.word	0x08010e0c
 800411c:	200000ac 	.word	0x200000ac

08004120 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <mem_init+0x68>)
 8004128:	3303      	adds	r3, #3
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	461a      	mov	r2, r3
 8004130:	4b16      	ldr	r3, [pc, #88]	; (800418c <mem_init+0x6c>)
 8004132:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <mem_init+0x6c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004140:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800414e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004152:	f7ff ff1f 	bl	8003f94 <ptr_to_mem>
 8004156:	4603      	mov	r3, r0
 8004158:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <mem_init+0x70>)
 800415a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <mem_init+0x70>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2201      	movs	r2, #1
 8004162:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004164:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <mem_init+0x70>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800416c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <mem_init+0x70>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004176:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <mem_init+0x6c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a05      	ldr	r2, [pc, #20]	; (8004194 <mem_init+0x74>)
 800417e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20003400 	.word	0x20003400
 800418c:	200000a4 	.word	0x200000a4
 8004190:	200000a8 	.word	0x200000a8
 8004194:	200000ac 	.word	0x200000ac

08004198 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff09 	bl	8003fb8 <mem_to_ptr>
 80041a6:	4603      	mov	r3, r0
 80041a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fef0 	bl	8003f94 <ptr_to_mem>
 80041b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	885b      	ldrh	r3, [r3, #2]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff feea 	bl	8003f94 <ptr_to_mem>
 80041c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041ca:	d818      	bhi.n	80041fe <mem_link_valid+0x66>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	885b      	ldrh	r3, [r3, #2]
 80041d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80041d4:	d813      	bhi.n	80041fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80041da:	8afa      	ldrh	r2, [r7, #22]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d004      	beq.n	80041ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	8afa      	ldrh	r2, [r7, #22]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d109      	bne.n	80041fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <mem_link_valid+0x74>)
 80041ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d006      	beq.n	8004202 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	885b      	ldrh	r3, [r3, #2]
 80041f8:	8afa      	ldrh	r2, [r7, #22]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <mem_link_valid+0x6a>
    return 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	e000      	b.n	8004204 <mem_link_valid+0x6c>
  }
  return 1;
 8004202:	2301      	movs	r3, #1
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200000a8 	.word	0x200000a8

08004210 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d04c      	beq.n	80042b8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <mem_free+0xb0>)
 800422a:	f240 2273 	movw	r2, #627	; 0x273
 800422e:	4925      	ldr	r1, [pc, #148]	; (80042c4 <mem_free+0xb4>)
 8004230:	4825      	ldr	r0, [pc, #148]	; (80042c8 <mem_free+0xb8>)
 8004232:	f00b fd47 	bl	800fcc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004236:	e040      	b.n	80042ba <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b08      	subs	r3, #8
 800423c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800423e:	4b23      	ldr	r3, [pc, #140]	; (80042cc <mem_free+0xbc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d306      	bcc.n	8004256 <mem_free+0x46>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f103 020c 	add.w	r2, r3, #12
 800424e:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <mem_free+0xc0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d907      	bls.n	8004266 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <mem_free+0xb0>)
 8004258:	f240 227f 	movw	r2, #639	; 0x27f
 800425c:	491d      	ldr	r1, [pc, #116]	; (80042d4 <mem_free+0xc4>)
 800425e:	481a      	ldr	r0, [pc, #104]	; (80042c8 <mem_free+0xb8>)
 8004260:	f00b fd30 	bl	800fcc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004264:	e029      	b.n	80042ba <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	791b      	ldrb	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <mem_free+0xb0>)
 8004270:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004274:	4918      	ldr	r1, [pc, #96]	; (80042d8 <mem_free+0xc8>)
 8004276:	4814      	ldr	r0, [pc, #80]	; (80042c8 <mem_free+0xb8>)
 8004278:	f00b fd24 	bl	800fcc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800427c:	e01d      	b.n	80042ba <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7ff ff8a 	bl	8004198 <mem_link_valid>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <mem_free+0xb0>)
 800428c:	f240 2295 	movw	r2, #661	; 0x295
 8004290:	4912      	ldr	r1, [pc, #72]	; (80042dc <mem_free+0xcc>)
 8004292:	480d      	ldr	r0, [pc, #52]	; (80042c8 <mem_free+0xb8>)
 8004294:	f00b fd16 	bl	800fcc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004298:	e00f      	b.n	80042ba <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <mem_free+0xd0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d202      	bcs.n	80042b0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80042aa:	4a0d      	ldr	r2, [pc, #52]	; (80042e0 <mem_free+0xd0>)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7ff fe93 	bl	8003fdc <plug_holes>
 80042b6:	e000      	b.n	80042ba <mem_free+0xaa>
    return;
 80042b8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	08010d64 	.word	0x08010d64
 80042c4:	08010e38 	.word	0x08010e38
 80042c8:	08010dac 	.word	0x08010dac
 80042cc:	200000a4 	.word	0x200000a4
 80042d0:	200000a8 	.word	0x200000a8
 80042d4:	08010e5c 	.word	0x08010e5c
 80042d8:	08010e78 	.word	0x08010e78
 80042dc:	08010ea0 	.word	0x08010ea0
 80042e0:	200000ac 	.word	0x200000ac

080042e4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	3303      	adds	r3, #3
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80042fc:	8bfb      	ldrh	r3, [r7, #30]
 80042fe:	2b0b      	cmp	r3, #11
 8004300:	d801      	bhi.n	8004306 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004302:	230c      	movs	r3, #12
 8004304:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004306:	8bfb      	ldrh	r3, [r7, #30]
 8004308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800430c:	d803      	bhi.n	8004316 <mem_trim+0x32>
 800430e:	8bfa      	ldrh	r2, [r7, #30]
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	429a      	cmp	r2, r3
 8004314:	d201      	bcs.n	800431a <mem_trim+0x36>
    return NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	e0cc      	b.n	80044b4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800431a:	4b68      	ldr	r3, [pc, #416]	; (80044bc <mem_trim+0x1d8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	429a      	cmp	r2, r3
 8004322:	d304      	bcc.n	800432e <mem_trim+0x4a>
 8004324:	4b66      	ldr	r3, [pc, #408]	; (80044c0 <mem_trim+0x1dc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d306      	bcc.n	800433c <mem_trim+0x58>
 800432e:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <mem_trim+0x1e0>)
 8004330:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004334:	4964      	ldr	r1, [pc, #400]	; (80044c8 <mem_trim+0x1e4>)
 8004336:	4865      	ldr	r0, [pc, #404]	; (80044cc <mem_trim+0x1e8>)
 8004338:	f00b fcc4 	bl	800fcc4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800433c:	4b5f      	ldr	r3, [pc, #380]	; (80044bc <mem_trim+0x1d8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d304      	bcc.n	8004350 <mem_trim+0x6c>
 8004346:	4b5e      	ldr	r3, [pc, #376]	; (80044c0 <mem_trim+0x1dc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	d301      	bcc.n	8004354 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	e0af      	b.n	80044b4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b08      	subs	r3, #8
 8004358:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800435a:	69b8      	ldr	r0, [r7, #24]
 800435c:	f7ff fe2c 	bl	8003fb8 <mem_to_ptr>
 8004360:	4603      	mov	r3, r0
 8004362:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	8afb      	ldrh	r3, [r7, #22]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b08      	subs	r3, #8
 8004370:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004372:	8bfa      	ldrh	r2, [r7, #30]
 8004374:	8abb      	ldrh	r3, [r7, #20]
 8004376:	429a      	cmp	r2, r3
 8004378:	d906      	bls.n	8004388 <mem_trim+0xa4>
 800437a:	4b52      	ldr	r3, [pc, #328]	; (80044c4 <mem_trim+0x1e0>)
 800437c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004380:	4953      	ldr	r1, [pc, #332]	; (80044d0 <mem_trim+0x1ec>)
 8004382:	4852      	ldr	r0, [pc, #328]	; (80044cc <mem_trim+0x1e8>)
 8004384:	f00b fc9e 	bl	800fcc4 <iprintf>
  if (newsize > size) {
 8004388:	8bfa      	ldrh	r2, [r7, #30]
 800438a:	8abb      	ldrh	r3, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	d901      	bls.n	8004394 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	e08f      	b.n	80044b4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004394:	8bfa      	ldrh	r2, [r7, #30]
 8004396:	8abb      	ldrh	r3, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	d101      	bne.n	80043a0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	e089      	b.n	80044b4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fdf5 	bl	8003f94 <ptr_to_mem>
 80043aa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	791b      	ldrb	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d13f      	bne.n	8004434 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043bc:	d106      	bne.n	80043cc <mem_trim+0xe8>
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <mem_trim+0x1e0>)
 80043c0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80043c4:	4943      	ldr	r1, [pc, #268]	; (80044d4 <mem_trim+0x1f0>)
 80043c6:	4841      	ldr	r0, [pc, #260]	; (80044cc <mem_trim+0x1e8>)
 80043c8:	f00b fc7c 	bl	800fcc4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80043d2:	8afa      	ldrh	r2, [r7, #22]
 80043d4:	8bfb      	ldrh	r3, [r7, #30]
 80043d6:	4413      	add	r3, r2
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3308      	adds	r3, #8
 80043dc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80043de:	4b3e      	ldr	r3, [pc, #248]	; (80044d8 <mem_trim+0x1f4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d106      	bne.n	80043f6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80043e8:	89fb      	ldrh	r3, [r7, #14]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff fdd2 	bl	8003f94 <ptr_to_mem>
 80043f0:	4603      	mov	r3, r0
 80043f2:	4a39      	ldr	r2, [pc, #228]	; (80044d8 <mem_trim+0x1f4>)
 80043f4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80043f6:	89fb      	ldrh	r3, [r7, #14]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fdcb 	bl	8003f94 <ptr_to_mem>
 80043fe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2200      	movs	r2, #0
 8004404:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	89ba      	ldrh	r2, [r7, #12]
 800440a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	8afa      	ldrh	r2, [r7, #22]
 8004410:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	89fa      	ldrh	r2, [r7, #14]
 8004416:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004420:	d047      	beq.n	80044b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fdb4 	bl	8003f94 <ptr_to_mem>
 800442c:	4602      	mov	r2, r0
 800442e:	89fb      	ldrh	r3, [r7, #14]
 8004430:	8053      	strh	r3, [r2, #2]
 8004432:	e03e      	b.n	80044b2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004434:	8bfb      	ldrh	r3, [r7, #30]
 8004436:	f103 0214 	add.w	r2, r3, #20
 800443a:	8abb      	ldrh	r3, [r7, #20]
 800443c:	429a      	cmp	r2, r3
 800443e:	d838      	bhi.n	80044b2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004440:	8afa      	ldrh	r2, [r7, #22]
 8004442:	8bfb      	ldrh	r3, [r7, #30]
 8004444:	4413      	add	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	3308      	adds	r3, #8
 800444a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004454:	d106      	bne.n	8004464 <mem_trim+0x180>
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <mem_trim+0x1e0>)
 8004458:	f240 3216 	movw	r2, #790	; 0x316
 800445c:	491d      	ldr	r1, [pc, #116]	; (80044d4 <mem_trim+0x1f0>)
 800445e:	481b      	ldr	r0, [pc, #108]	; (80044cc <mem_trim+0x1e8>)
 8004460:	f00b fc30 	bl	800fcc4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004464:	89fb      	ldrh	r3, [r7, #14]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fd94 	bl	8003f94 <ptr_to_mem>
 800446c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800446e:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <mem_trim+0x1f4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d202      	bcs.n	800447e <mem_trim+0x19a>
      lfree = mem2;
 8004478:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <mem_trim+0x1f4>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2200      	movs	r2, #0
 8004482:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	881a      	ldrh	r2, [r3, #0]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	8afa      	ldrh	r2, [r7, #22]
 8004490:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	89fa      	ldrh	r2, [r7, #14]
 8004496:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80044a0:	d007      	beq.n	80044b2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fd74 	bl	8003f94 <ptr_to_mem>
 80044ac:	4602      	mov	r2, r0
 80044ae:	89fb      	ldrh	r3, [r7, #14]
 80044b0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80044b2:	687b      	ldr	r3, [r7, #4]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200000a4 	.word	0x200000a4
 80044c0:	200000a8 	.word	0x200000a8
 80044c4:	08010d64 	.word	0x08010d64
 80044c8:	08010ed4 	.word	0x08010ed4
 80044cc:	08010dac 	.word	0x08010dac
 80044d0:	08010eec 	.word	0x08010eec
 80044d4:	08010f0c 	.word	0x08010f0c
 80044d8:	200000ac 	.word	0x200000ac

080044dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <mem_malloc+0x14>
    return NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e0d9      	b.n	80046a4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	3303      	adds	r3, #3
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80044fc:	8bbb      	ldrh	r3, [r7, #28]
 80044fe:	2b0b      	cmp	r3, #11
 8004500:	d801      	bhi.n	8004506 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004502:	230c      	movs	r3, #12
 8004504:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004506:	8bbb      	ldrh	r3, [r7, #28]
 8004508:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800450c:	d803      	bhi.n	8004516 <mem_malloc+0x3a>
 800450e:	8bba      	ldrh	r2, [r7, #28]
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	429a      	cmp	r2, r3
 8004514:	d201      	bcs.n	800451a <mem_malloc+0x3e>
    return NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	e0c4      	b.n	80046a4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800451a:	4b64      	ldr	r3, [pc, #400]	; (80046ac <mem_malloc+0x1d0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fd4a 	bl	8003fb8 <mem_to_ptr>
 8004524:	4603      	mov	r3, r0
 8004526:	83fb      	strh	r3, [r7, #30]
 8004528:	e0b4      	b.n	8004694 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800452a:	8bfb      	ldrh	r3, [r7, #30]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fd31 	bl	8003f94 <ptr_to_mem>
 8004532:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	791b      	ldrb	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 80a4 	bne.w	8004686 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	8bfb      	ldrh	r3, [r7, #30]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f1a3 0208 	sub.w	r2, r3, #8
 800454c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800454e:	429a      	cmp	r2, r3
 8004550:	f0c0 8099 	bcc.w	8004686 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	8bfb      	ldrh	r3, [r7, #30]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f1a3 0208 	sub.w	r2, r3, #8
 8004562:	8bbb      	ldrh	r3, [r7, #28]
 8004564:	3314      	adds	r3, #20
 8004566:	429a      	cmp	r2, r3
 8004568:	d333      	bcc.n	80045d2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800456a:	8bfa      	ldrh	r2, [r7, #30]
 800456c:	8bbb      	ldrh	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	3308      	adds	r3, #8
 8004574:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004576:	8a7b      	ldrh	r3, [r7, #18]
 8004578:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800457c:	d106      	bne.n	800458c <mem_malloc+0xb0>
 800457e:	4b4c      	ldr	r3, [pc, #304]	; (80046b0 <mem_malloc+0x1d4>)
 8004580:	f240 3287 	movw	r2, #903	; 0x387
 8004584:	494b      	ldr	r1, [pc, #300]	; (80046b4 <mem_malloc+0x1d8>)
 8004586:	484c      	ldr	r0, [pc, #304]	; (80046b8 <mem_malloc+0x1dc>)
 8004588:	f00b fb9c 	bl	800fcc4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800458c:	8a7b      	ldrh	r3, [r7, #18]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fd00 	bl	8003f94 <ptr_to_mem>
 8004594:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8bfa      	ldrh	r2, [r7, #30]
 80045a8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	8a7a      	ldrh	r2, [r7, #18]
 80045ae:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2201      	movs	r2, #1
 80045b4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80045be:	d00b      	beq.n	80045d8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fce5 	bl	8003f94 <ptr_to_mem>
 80045ca:	4602      	mov	r2, r0
 80045cc:	8a7b      	ldrh	r3, [r7, #18]
 80045ce:	8053      	strh	r3, [r2, #2]
 80045d0:	e002      	b.n	80045d8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2201      	movs	r2, #1
 80045d6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80045d8:	4b34      	ldr	r3, [pc, #208]	; (80046ac <mem_malloc+0x1d0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d127      	bne.n	8004632 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80045e2:	4b32      	ldr	r3, [pc, #200]	; (80046ac <mem_malloc+0x1d0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80045e8:	e005      	b.n	80045f6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fcd0 	bl	8003f94 <ptr_to_mem>
 80045f4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	791b      	ldrb	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <mem_malloc+0x12c>
 80045fe:	4b2f      	ldr	r3, [pc, #188]	; (80046bc <mem_malloc+0x1e0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	d1f0      	bne.n	80045ea <mem_malloc+0x10e>
          }
          lfree = cur;
 8004608:	4a28      	ldr	r2, [pc, #160]	; (80046ac <mem_malloc+0x1d0>)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <mem_malloc+0x1d0>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <mem_malloc+0x1e0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d00b      	beq.n	8004632 <mem_malloc+0x156>
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <mem_malloc+0x1d0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	791b      	ldrb	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d006      	beq.n	8004632 <mem_malloc+0x156>
 8004624:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <mem_malloc+0x1d4>)
 8004626:	f240 32b5 	movw	r2, #949	; 0x3b5
 800462a:	4925      	ldr	r1, [pc, #148]	; (80046c0 <mem_malloc+0x1e4>)
 800462c:	4822      	ldr	r0, [pc, #136]	; (80046b8 <mem_malloc+0x1dc>)
 800462e:	f00b fb49 	bl	800fcc4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004632:	8bba      	ldrh	r2, [r7, #28]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4413      	add	r3, r2
 8004638:	3308      	adds	r3, #8
 800463a:	4a20      	ldr	r2, [pc, #128]	; (80046bc <mem_malloc+0x1e0>)
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	4293      	cmp	r3, r2
 8004640:	d906      	bls.n	8004650 <mem_malloc+0x174>
 8004642:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <mem_malloc+0x1d4>)
 8004644:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004648:	491e      	ldr	r1, [pc, #120]	; (80046c4 <mem_malloc+0x1e8>)
 800464a:	481b      	ldr	r0, [pc, #108]	; (80046b8 <mem_malloc+0x1dc>)
 800464c:	f00b fb3a 	bl	800fcc4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d006      	beq.n	8004668 <mem_malloc+0x18c>
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <mem_malloc+0x1d4>)
 800465c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004660:	4919      	ldr	r1, [pc, #100]	; (80046c8 <mem_malloc+0x1ec>)
 8004662:	4815      	ldr	r0, [pc, #84]	; (80046b8 <mem_malloc+0x1dc>)
 8004664:	f00b fb2e 	bl	800fcc4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <mem_malloc+0x1a4>
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <mem_malloc+0x1d4>)
 8004674:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004678:	4914      	ldr	r1, [pc, #80]	; (80046cc <mem_malloc+0x1f0>)
 800467a:	480f      	ldr	r0, [pc, #60]	; (80046b8 <mem_malloc+0x1dc>)
 800467c:	f00b fb22 	bl	800fcc4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	3308      	adds	r3, #8
 8004684:	e00e      	b.n	80046a4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004686:	8bfb      	ldrh	r3, [r7, #30]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fc83 	bl	8003f94 <ptr_to_mem>
 800468e:	4603      	mov	r3, r0
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004694:	8bfa      	ldrh	r2, [r7, #30]
 8004696:	8bbb      	ldrh	r3, [r7, #28]
 8004698:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800469c:	429a      	cmp	r2, r3
 800469e:	f4ff af44 	bcc.w	800452a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3720      	adds	r7, #32
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200000ac 	.word	0x200000ac
 80046b0:	08010d64 	.word	0x08010d64
 80046b4:	08010f0c 	.word	0x08010f0c
 80046b8:	08010dac 	.word	0x08010dac
 80046bc:	200000a8 	.word	0x200000a8
 80046c0:	08010f20 	.word	0x08010f20
 80046c4:	08010f3c 	.word	0x08010f3c
 80046c8:	08010f6c 	.word	0x08010f6c
 80046cc:	08010f9c 	.word	0x08010f9c

080046d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	3303      	adds	r3, #3
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e011      	b.n	8004716 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	885b      	ldrh	r3, [r3, #2]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4293      	cmp	r3, r2
 8004720:	dbe7      	blt.n	80046f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004722:	bf00      	nop
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004736:	2300      	movs	r3, #0
 8004738:	80fb      	strh	r3, [r7, #6]
 800473a:	e009      	b.n	8004750 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800473c:	88fb      	ldrh	r3, [r7, #6]
 800473e:	4a08      	ldr	r2, [pc, #32]	; (8004760 <memp_init+0x30>)
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff ffc3 	bl	80046d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	3301      	adds	r3, #1
 800474e:	80fb      	strh	r3, [r7, #6]
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d9f2      	bls.n	800473c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	08013b0c 	.word	0x08013b0c

08004764 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d012      	beq.n	80047a0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d006      	beq.n	800479c <do_memp_malloc_pool+0x38>
 800478e:	4b07      	ldr	r3, [pc, #28]	; (80047ac <do_memp_malloc_pool+0x48>)
 8004790:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004794:	4906      	ldr	r1, [pc, #24]	; (80047b0 <do_memp_malloc_pool+0x4c>)
 8004796:	4807      	ldr	r0, [pc, #28]	; (80047b4 <do_memp_malloc_pool+0x50>)
 8004798:	f00b fa94 	bl	800fcc4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	e000      	b.n	80047a2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	08010fc0 	.word	0x08010fc0
 80047b0:	08010ff0 	.word	0x08010ff0
 80047b4:	08011014 	.word	0x08011014

080047b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d908      	bls.n	80047da <memp_malloc+0x22>
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <memp_malloc+0x3c>)
 80047ca:	f240 1257 	movw	r2, #343	; 0x157
 80047ce:	490a      	ldr	r1, [pc, #40]	; (80047f8 <memp_malloc+0x40>)
 80047d0:	480a      	ldr	r0, [pc, #40]	; (80047fc <memp_malloc+0x44>)
 80047d2:	f00b fa77 	bl	800fcc4 <iprintf>
 80047d6:	2300      	movs	r3, #0
 80047d8:	e008      	b.n	80047ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	4a08      	ldr	r2, [pc, #32]	; (8004800 <memp_malloc+0x48>)
 80047de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ffbe 	bl	8004764 <do_memp_malloc_pool>
 80047e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	08010fc0 	.word	0x08010fc0
 80047f8:	08011050 	.word	0x08011050
 80047fc:	08011014 	.word	0x08011014
 8004800:	08013b0c 	.word	0x08013b0c

08004804 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d006      	beq.n	8004826 <do_memp_free_pool+0x22>
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <do_memp_free_pool+0x40>)
 800481a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800481e:	490a      	ldr	r1, [pc, #40]	; (8004848 <do_memp_free_pool+0x44>)
 8004820:	480a      	ldr	r0, [pc, #40]	; (800484c <do_memp_free_pool+0x48>)
 8004822:	f00b fa4f 	bl	800fcc4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	08010fc0 	.word	0x08010fc0
 8004848:	08011070 	.word	0x08011070
 800484c:	08011014 	.word	0x08011014

08004850 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b08      	cmp	r3, #8
 8004860:	d907      	bls.n	8004872 <memp_free+0x22>
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <memp_free+0x44>)
 8004864:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004868:	490b      	ldr	r1, [pc, #44]	; (8004898 <memp_free+0x48>)
 800486a:	480c      	ldr	r0, [pc, #48]	; (800489c <memp_free+0x4c>)
 800486c:	f00b fa2a 	bl	800fcc4 <iprintf>
 8004870:	e00c      	b.n	800488c <memp_free+0x3c>

  if (mem == NULL) {
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <memp_free+0x50>)
 800487c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ffbe 	bl	8004804 <do_memp_free_pool>
 8004888:	e000      	b.n	800488c <memp_free+0x3c>
    return;
 800488a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	08010fc0 	.word	0x08010fc0
 8004898:	08011090 	.word	0x08011090
 800489c:	08011014 	.word	0x08011014
 80048a0:	08013b0c 	.word	0x08013b0c

080048a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d108      	bne.n	80048da <netif_add+0x26>
 80048c8:	4b5b      	ldr	r3, [pc, #364]	; (8004a38 <netif_add+0x184>)
 80048ca:	f240 1227 	movw	r2, #295	; 0x127
 80048ce:	495b      	ldr	r1, [pc, #364]	; (8004a3c <netif_add+0x188>)
 80048d0:	485b      	ldr	r0, [pc, #364]	; (8004a40 <netif_add+0x18c>)
 80048d2:	f00b f9f7 	bl	800fcc4 <iprintf>
 80048d6:	2300      	movs	r3, #0
 80048d8:	e0a9      	b.n	8004a2e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d108      	bne.n	80048f2 <netif_add+0x3e>
 80048e0:	4b55      	ldr	r3, [pc, #340]	; (8004a38 <netif_add+0x184>)
 80048e2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80048e6:	4957      	ldr	r1, [pc, #348]	; (8004a44 <netif_add+0x190>)
 80048e8:	4855      	ldr	r0, [pc, #340]	; (8004a40 <netif_add+0x18c>)
 80048ea:	f00b f9eb 	bl	800fcc4 <iprintf>
 80048ee:	2300      	movs	r3, #0
 80048f0:	e09d      	b.n	8004a2e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80048f8:	4b53      	ldr	r3, [pc, #332]	; (8004a48 <netif_add+0x194>)
 80048fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004902:	4b51      	ldr	r3, [pc, #324]	; (8004a48 <netif_add+0x194>)
 8004904:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800490c:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <netif_add+0x194>)
 800490e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a49      	ldr	r2, [pc, #292]	; (8004a4c <netif_add+0x198>)
 8004926:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3324      	adds	r3, #36	; 0x24
 800493a:	2204      	movs	r2, #4
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f00b f9b8 	bl	800fcb4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004950:	4b3f      	ldr	r3, [pc, #252]	; (8004a50 <netif_add+0x19c>)
 8004952:	781a      	ldrb	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68b9      	ldr	r1, [r7, #8]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f914 	bl	8004b94 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	4798      	blx	r3
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <netif_add+0xc8>
    return NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	e058      	b.n	8004a2e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004982:	2bff      	cmp	r3, #255	; 0xff
 8004984:	d103      	bne.n	800498e <netif_add+0xda>
        netif->num = 0;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004992:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <netif_add+0x1a0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e02b      	b.n	80049f2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d106      	bne.n	80049b0 <netif_add+0xfc>
 80049a2:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <netif_add+0x184>)
 80049a4:	f240 128b 	movw	r2, #395	; 0x18b
 80049a8:	492b      	ldr	r1, [pc, #172]	; (8004a58 <netif_add+0x1a4>)
 80049aa:	4825      	ldr	r0, [pc, #148]	; (8004a40 <netif_add+0x18c>)
 80049ac:	f00b f98a 	bl	800fcc4 <iprintf>
        num_netifs++;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3301      	adds	r3, #1
 80049b4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2bff      	cmp	r3, #255	; 0xff
 80049ba:	dd06      	ble.n	80049ca <netif_add+0x116>
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <netif_add+0x184>)
 80049be:	f240 128d 	movw	r2, #397	; 0x18d
 80049c2:	4926      	ldr	r1, [pc, #152]	; (8004a5c <netif_add+0x1a8>)
 80049c4:	481e      	ldr	r0, [pc, #120]	; (8004a40 <netif_add+0x18c>)
 80049c6:	f00b f97d 	bl	800fcc4 <iprintf>
        if (netif2->num == netif->num) {
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d108      	bne.n	80049ec <netif_add+0x138>
          netif->num++;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049e0:	3301      	adds	r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80049ea:	e005      	b.n	80049f8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1d0      	bne.n	800499a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1be      	bne.n	800497c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a04:	2bfe      	cmp	r3, #254	; 0xfe
 8004a06:	d103      	bne.n	8004a10 <netif_add+0x15c>
    netif_num = 0;
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <netif_add+0x19c>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
 8004a0e:	e006      	b.n	8004a1e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a16:	3301      	adds	r3, #1
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	; (8004a50 <netif_add+0x19c>)
 8004a1c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <netif_add+0x1a0>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004a26:	4a0b      	ldr	r2, [pc, #44]	; (8004a54 <netif_add+0x1a0>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	080110ac 	.word	0x080110ac
 8004a3c:	08011140 	.word	0x08011140
 8004a40:	080110fc 	.word	0x080110fc
 8004a44:	0801115c 	.word	0x0801115c
 8004a48:	08013b80 	.word	0x08013b80
 8004a4c:	08004e77 	.word	0x08004e77
 8004a50:	200000d4 	.word	0x200000d4
 8004a54:	2000693c 	.word	0x2000693c
 8004a58:	08011180 	.word	0x08011180
 8004a5c:	08011194 	.word	0x08011194

08004a60 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f002 fb57 	bl	8007120 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f006 ff39 	bl	800b8ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <netif_do_set_ipaddr+0x20>
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <netif_do_set_ipaddr+0x88>)
 8004a98:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004a9c:	491c      	ldr	r1, [pc, #112]	; (8004b10 <netif_do_set_ipaddr+0x8c>)
 8004a9e:	481d      	ldr	r0, [pc, #116]	; (8004b14 <netif_do_set_ipaddr+0x90>)
 8004aa0:	f00b f910 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <netif_do_set_ipaddr+0x34>
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <netif_do_set_ipaddr+0x88>)
 8004aac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004ab0:	4917      	ldr	r1, [pc, #92]	; (8004b10 <netif_do_set_ipaddr+0x8c>)
 8004ab2:	4818      	ldr	r0, [pc, #96]	; (8004b14 <netif_do_set_ipaddr+0x90>)
 8004ab4:	f00b f906 	bl	800fcc4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d01c      	beq.n	8004b00 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ffbf 	bl	8004a60 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <netif_do_set_ipaddr+0x6a>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	e000      	b.n	8004af0 <netif_do_set_ipaddr+0x6c>
 8004aee:	2300      	movs	r3, #0
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004af4:	2101      	movs	r1, #1
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f8d2 	bl	8004ca0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	080110ac 	.word	0x080110ac
 8004b10:	080111c4 	.word	0x080111c4
 8004b14:	080110fc 	.word	0x080110fc

08004b18 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d00a      	beq.n	8004b48 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <netif_do_set_netmask+0x26>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	e000      	b.n	8004b40 <netif_do_set_netmask+0x28>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d00a      	beq.n	8004b86 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <netif_do_set_gw+0x26>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	e000      	b.n	8004b7e <netif_do_set_gw+0x28>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004bb0:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <netif_set_addr+0x90>)
 8004bb2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004bba:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <netif_set_addr+0x90>)
 8004bbc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <netif_set_addr+0x90>)
 8004bc6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <netif_set_addr+0x42>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <netif_set_addr+0x46>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <netif_set_addr+0x48>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004be4:	f107 0310 	add.w	r3, r7, #16
 8004be8:	461a      	mov	r2, r3
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7ff ff49 	bl	8004a84 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ff8e 	bl	8004b18 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff ffa8 	bl	8004b56 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004c0c:	f107 0310 	add.w	r3, r7, #16
 8004c10:	461a      	mov	r2, r3
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff ff35 	bl	8004a84 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004c1a:	bf00      	nop
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	08013b80 	.word	0x08013b80

08004c28 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004c30:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <netif_set_default+0x1c>)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20006940 	.word	0x20006940

08004c48 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d107      	bne.n	8004c66 <netif_set_up+0x1e>
 8004c56:	4b0f      	ldr	r3, [pc, #60]	; (8004c94 <netif_set_up+0x4c>)
 8004c58:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004c5c:	490e      	ldr	r1, [pc, #56]	; (8004c98 <netif_set_up+0x50>)
 8004c5e:	480f      	ldr	r0, [pc, #60]	; (8004c9c <netif_set_up+0x54>)
 8004c60:	f00b f830 	bl	800fcc4 <iprintf>
 8004c64:	e013      	b.n	8004c8e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10c      	bne.n	8004c8e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004c86:	2103      	movs	r1, #3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f809 	bl	8004ca0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	080110ac 	.word	0x080110ac
 8004c98:	08011234 	.word	0x08011234
 8004c9c:	080110fc 	.word	0x080110fc

08004ca0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <netif_issue_reports+0x20>
 8004cb2:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <netif_issue_reports+0x74>)
 8004cb4:	f240 326d 	movw	r2, #877	; 0x36d
 8004cb8:	4917      	ldr	r1, [pc, #92]	; (8004d18 <netif_issue_reports+0x78>)
 8004cba:	4818      	ldr	r0, [pc, #96]	; (8004d1c <netif_issue_reports+0x7c>)
 8004cbc:	f00b f802 	bl	800fcc4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01e      	beq.n	8004d0c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004cd4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d017      	beq.n	8004d0c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d013      	beq.n	8004d0e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00e      	beq.n	8004d0e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d007      	beq.n	8004d0e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f009 fbf1 	bl	800e4ec <etharp_request>
 8004d0a:	e000      	b.n	8004d0e <netif_issue_reports+0x6e>
    return;
 8004d0c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	080110ac 	.word	0x080110ac
 8004d18:	08011250 	.word	0x08011250
 8004d1c:	080110fc 	.word	0x080110fc

08004d20 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d107      	bne.n	8004d3e <netif_set_down+0x1e>
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <netif_set_down+0x58>)
 8004d30:	f240 329b 	movw	r2, #923	; 0x39b
 8004d34:	4911      	ldr	r1, [pc, #68]	; (8004d7c <netif_set_down+0x5c>)
 8004d36:	4812      	ldr	r0, [pc, #72]	; (8004d80 <netif_set_down+0x60>)
 8004d38:	f00a ffc4 	bl	800fcc4 <iprintf>
 8004d3c:	e019      	b.n	8004d72 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d012      	beq.n	8004d72 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f008 ff77 	bl	800dc60 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	080110ac 	.word	0x080110ac
 8004d7c:	08011274 	.word	0x08011274
 8004d80:	080110fc 	.word	0x080110fc

08004d84 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d107      	bne.n	8004da2 <netif_set_link_up+0x1e>
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <netif_set_link_up+0x64>)
 8004d94:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004d98:	4914      	ldr	r1, [pc, #80]	; (8004dec <netif_set_link_up+0x68>)
 8004d9a:	4815      	ldr	r0, [pc, #84]	; (8004df0 <netif_set_link_up+0x6c>)
 8004d9c:	f00a ff92 	bl	800fcc4 <iprintf>
 8004da0:	e01e      	b.n	8004de0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d117      	bne.n	8004de0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004db6:	f043 0304 	orr.w	r3, r3, #4
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f007 f9bc 	bl	800c140 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004dc8:	2103      	movs	r1, #3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff ff68 	bl	8004ca0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <netif_set_link_up+0x5c>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	080110ac 	.word	0x080110ac
 8004dec:	08011294 	.word	0x08011294
 8004df0:	080110fc 	.word	0x080110fc

08004df4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d107      	bne.n	8004e12 <netif_set_link_down+0x1e>
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <netif_set_link_down+0x54>)
 8004e04:	f240 4206 	movw	r2, #1030	; 0x406
 8004e08:	4910      	ldr	r1, [pc, #64]	; (8004e4c <netif_set_link_down+0x58>)
 8004e0a:	4811      	ldr	r0, [pc, #68]	; (8004e50 <netif_set_link_down+0x5c>)
 8004e0c:	f00a ff5a 	bl	800fcc4 <iprintf>
 8004e10:	e017      	b.n	8004e42 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d010      	beq.n	8004e42 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e26:	f023 0304 	bic.w	r3, r3, #4
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <netif_set_link_down+0x4e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	080110ac 	.word	0x080110ac
 8004e4c:	080112b8 	.word	0x080112b8
 8004e50:	080110fc 	.word	0x080110fc

08004e54 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	61da      	str	r2, [r3, #28]
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004e82:	f06f 030b 	mvn.w	r3, #11
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004ea4:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <netif_get_by_index+0x48>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e00c      	b.n	8004ec6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	79fa      	ldrb	r2, [r7, #7]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d101      	bne.n	8004ec0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	e006      	b.n	8004ece <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1ef      	bne.n	8004eac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	2000693c 	.word	0x2000693c

08004ee0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <pbuf_free_ooseq+0x38>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <pbuf_free_ooseq+0x3c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	e00a      	b.n	8004f0a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f002 f94d 	bl	800719c <tcp_free_ooseq>
      return;
 8004f02:	e005      	b.n	8004f10 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	607b      	str	r3, [r7, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f1      	bne.n	8004ef4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20006944 	.word	0x20006944
 8004f1c:	2000694c 	.word	0x2000694c

08004f20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <pbuf_pool_is_empty+0x14>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20006944 	.word	0x20006944

08004f38 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4611      	mov	r1, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	460b      	mov	r3, r1
 8004f48:	80fb      	strh	r3, [r7, #6]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	88fa      	ldrh	r2, [r7, #6]
 8004f5e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	88ba      	ldrh	r2, [r7, #4]
 8004f64:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004f66:	8b3b      	ldrh	r3, [r7, #24]
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	7f3a      	ldrb	r2, [r7, #28]
 8004f72:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	73da      	strb	r2, [r3, #15]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
 8004f96:	460b      	mov	r3, r1
 8004f98:	80bb      	strh	r3, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004fa2:	887b      	ldrh	r3, [r7, #2]
 8004fa4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004fa8:	d07f      	beq.n	80050aa <pbuf_alloc+0x11e>
 8004faa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004fae:	f300 80c8 	bgt.w	8005142 <pbuf_alloc+0x1b6>
 8004fb2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004fb6:	d010      	beq.n	8004fda <pbuf_alloc+0x4e>
 8004fb8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004fbc:	f300 80c1 	bgt.w	8005142 <pbuf_alloc+0x1b6>
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d002      	beq.n	8004fca <pbuf_alloc+0x3e>
 8004fc4:	2b41      	cmp	r3, #65	; 0x41
 8004fc6:	f040 80bc 	bne.w	8005142 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	88bb      	ldrh	r3, [r7, #4]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f000 f8d1 	bl	8005178 <pbuf_alloc_reference>
 8004fd6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004fd8:	e0bd      	b.n	8005156 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004fe2:	88bb      	ldrh	r3, [r7, #4]
 8004fe4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004fe6:	2008      	movs	r0, #8
 8004fe8:	f7ff fbe6 	bl	80047b8 <memp_malloc>
 8004fec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8004ff4:	f7ff ff94 	bl	8004f20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <pbuf_alloc+0x78>
            pbuf_free(p);
 8004ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005000:	f000 faa8 	bl	8005554 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005004:	2300      	movs	r3, #0
 8005006:	e0a7      	b.n	8005158 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005008:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800500a:	3303      	adds	r3, #3
 800500c:	b29b      	uxth	r3, r3
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	b29b      	uxth	r3, r3
 8005014:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005018:	b29b      	uxth	r3, r3
 800501a:	8b7a      	ldrh	r2, [r7, #26]
 800501c:	4293      	cmp	r3, r2
 800501e:	bf28      	it	cs
 8005020:	4613      	movcs	r3, r2
 8005022:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005026:	3310      	adds	r3, #16
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	3303      	adds	r3, #3
 800502e:	f023 0303 	bic.w	r3, r3, #3
 8005032:	4618      	mov	r0, r3
 8005034:	89f9      	ldrh	r1, [r7, #14]
 8005036:	8b7a      	ldrh	r2, [r7, #26]
 8005038:	2300      	movs	r3, #0
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	460b      	mov	r3, r1
 8005042:	4601      	mov	r1, r0
 8005044:	6938      	ldr	r0, [r7, #16]
 8005046:	f7ff ff77 	bl	8004f38 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d006      	beq.n	8005064 <pbuf_alloc+0xd8>
 8005056:	4b42      	ldr	r3, [pc, #264]	; (8005160 <pbuf_alloc+0x1d4>)
 8005058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800505c:	4941      	ldr	r1, [pc, #260]	; (8005164 <pbuf_alloc+0x1d8>)
 800505e:	4842      	ldr	r0, [pc, #264]	; (8005168 <pbuf_alloc+0x1dc>)
 8005060:	f00a fe30 	bl	800fcc4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005066:	3303      	adds	r3, #3
 8005068:	f023 0303 	bic.w	r3, r3, #3
 800506c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005070:	d106      	bne.n	8005080 <pbuf_alloc+0xf4>
 8005072:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <pbuf_alloc+0x1d4>)
 8005074:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005078:	493c      	ldr	r1, [pc, #240]	; (800516c <pbuf_alloc+0x1e0>)
 800507a:	483b      	ldr	r0, [pc, #236]	; (8005168 <pbuf_alloc+0x1dc>)
 800507c:	f00a fe22 	bl	800fcc4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	e002      	b.n	8005092 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005096:	8b7a      	ldrh	r2, [r7, #26]
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800509e:	2300      	movs	r3, #0
 80050a0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80050a2:	8b7b      	ldrh	r3, [r7, #26]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d19e      	bne.n	8004fe6 <pbuf_alloc+0x5a>
      break;
 80050a8:	e055      	b.n	8005156 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80050aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80050ac:	3303      	adds	r3, #3
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f023 0303 	bic.w	r3, r3, #3
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	88bb      	ldrh	r3, [r7, #4]
 80050b8:	3303      	adds	r3, #3
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f023 0303 	bic.w	r3, r3, #3
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	4413      	add	r3, r2
 80050c4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80050c6:	8b3b      	ldrh	r3, [r7, #24]
 80050c8:	3310      	adds	r3, #16
 80050ca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80050cc:	8b3a      	ldrh	r2, [r7, #24]
 80050ce:	88bb      	ldrh	r3, [r7, #4]
 80050d0:	3303      	adds	r3, #3
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d306      	bcc.n	80050e8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80050da:	8afa      	ldrh	r2, [r7, #22]
 80050dc:	88bb      	ldrh	r3, [r7, #4]
 80050de:	3303      	adds	r3, #3
 80050e0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d201      	bcs.n	80050ec <pbuf_alloc+0x160>
        return NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e035      	b.n	8005158 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80050ec:	8afb      	ldrh	r3, [r7, #22]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff f9f4 	bl	80044dc <mem_malloc>
 80050f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <pbuf_alloc+0x174>
        return NULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e02b      	b.n	8005158 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005102:	3310      	adds	r3, #16
 8005104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005106:	4413      	add	r3, r2
 8005108:	3303      	adds	r3, #3
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	4618      	mov	r0, r3
 8005110:	88b9      	ldrh	r1, [r7, #4]
 8005112:	88ba      	ldrh	r2, [r7, #4]
 8005114:	2300      	movs	r3, #0
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	887b      	ldrh	r3, [r7, #2]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	460b      	mov	r3, r1
 800511e:	4601      	mov	r1, r0
 8005120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005122:	f7ff ff09 	bl	8004f38 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <pbuf_alloc+0x1c8>
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <pbuf_alloc+0x1d4>)
 8005134:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005138:	490d      	ldr	r1, [pc, #52]	; (8005170 <pbuf_alloc+0x1e4>)
 800513a:	480b      	ldr	r0, [pc, #44]	; (8005168 <pbuf_alloc+0x1dc>)
 800513c:	f00a fdc2 	bl	800fcc4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005140:	e008      	b.n	8005154 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005142:	4b07      	ldr	r3, [pc, #28]	; (8005160 <pbuf_alloc+0x1d4>)
 8005144:	f240 1227 	movw	r2, #295	; 0x127
 8005148:	490a      	ldr	r1, [pc, #40]	; (8005174 <pbuf_alloc+0x1e8>)
 800514a:	4807      	ldr	r0, [pc, #28]	; (8005168 <pbuf_alloc+0x1dc>)
 800514c:	f00a fdba 	bl	800fcc4 <iprintf>
      return NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	e001      	b.n	8005158 <pbuf_alloc+0x1cc>
      break;
 8005154:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005158:	4618      	mov	r0, r3
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	080112dc 	.word	0x080112dc
 8005164:	0801130c 	.word	0x0801130c
 8005168:	0801133c 	.word	0x0801133c
 800516c:	08011364 	.word	0x08011364
 8005170:	08011398 	.word	0x08011398
 8005174:	080113c4 	.word	0x080113c4

08005178 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	807b      	strh	r3, [r7, #2]
 8005184:	4613      	mov	r3, r2
 8005186:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005188:	883b      	ldrh	r3, [r7, #0]
 800518a:	2b41      	cmp	r3, #65	; 0x41
 800518c:	d009      	beq.n	80051a2 <pbuf_alloc_reference+0x2a>
 800518e:	883b      	ldrh	r3, [r7, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d006      	beq.n	80051a2 <pbuf_alloc_reference+0x2a>
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <pbuf_alloc_reference+0x5c>)
 8005196:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800519a:	490f      	ldr	r1, [pc, #60]	; (80051d8 <pbuf_alloc_reference+0x60>)
 800519c:	480f      	ldr	r0, [pc, #60]	; (80051dc <pbuf_alloc_reference+0x64>)
 800519e:	f00a fd91 	bl	800fcc4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80051a2:	2007      	movs	r0, #7
 80051a4:	f7ff fb08 	bl	80047b8 <memp_malloc>
 80051a8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e00b      	b.n	80051cc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80051b4:	8879      	ldrh	r1, [r7, #2]
 80051b6:	887a      	ldrh	r2, [r7, #2]
 80051b8:	2300      	movs	r3, #0
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	883b      	ldrh	r3, [r7, #0]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	460b      	mov	r3, r1
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff feb7 	bl	8004f38 <pbuf_init_alloced_pbuf>
  return p;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	080112dc 	.word	0x080112dc
 80051d8:	080113e0 	.word	0x080113e0
 80051dc:	0801133c 	.word	0x0801133c

080051e0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	4603      	mov	r3, r0
 80051ea:	73fb      	strb	r3, [r7, #15]
 80051ec:	460b      	mov	r3, r1
 80051ee:	81bb      	strh	r3, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80051f8:	8a7b      	ldrh	r3, [r7, #18]
 80051fa:	3303      	adds	r3, #3
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	89bb      	ldrh	r3, [r7, #12]
 8005202:	441a      	add	r2, r3
 8005204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005206:	429a      	cmp	r2, r3
 8005208:	d901      	bls.n	800520e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800520a:	2300      	movs	r3, #0
 800520c:	e018      	b.n	8005240 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005214:	8a7b      	ldrh	r3, [r7, #18]
 8005216:	3303      	adds	r3, #3
 8005218:	f023 0303 	bic.w	r3, r3, #3
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	4413      	add	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	e001      	b.n	8005228 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	89b9      	ldrh	r1, [r7, #12]
 800522c:	89ba      	ldrh	r2, [r7, #12]
 800522e:	2302      	movs	r3, #2
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	460b      	mov	r3, r1
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	f7ff fe7d 	bl	8004f38 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800523e:	687b      	ldr	r3, [r7, #4]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <pbuf_realloc+0x20>
 800525a:	4b3a      	ldr	r3, [pc, #232]	; (8005344 <pbuf_realloc+0xfc>)
 800525c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005260:	4939      	ldr	r1, [pc, #228]	; (8005348 <pbuf_realloc+0x100>)
 8005262:	483a      	ldr	r0, [pc, #232]	; (800534c <pbuf_realloc+0x104>)
 8005264:	f00a fd2e 	bl	800fcc4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	891b      	ldrh	r3, [r3, #8]
 800526c:	887a      	ldrh	r2, [r7, #2]
 800526e:	429a      	cmp	r2, r3
 8005270:	d263      	bcs.n	800533a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	891a      	ldrh	r2, [r3, #8]
 8005276:	887b      	ldrh	r3, [r7, #2]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800527c:	887b      	ldrh	r3, [r7, #2]
 800527e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005284:	e018      	b.n	80052b8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	895b      	ldrh	r3, [r3, #10]
 800528a:	897a      	ldrh	r2, [r7, #10]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	891a      	ldrh	r2, [r3, #8]
 8005294:	893b      	ldrh	r3, [r7, #8]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <pbuf_realloc+0x70>
 80052aa:	4b26      	ldr	r3, [pc, #152]	; (8005344 <pbuf_realloc+0xfc>)
 80052ac:	f240 12af 	movw	r2, #431	; 0x1af
 80052b0:	4927      	ldr	r1, [pc, #156]	; (8005350 <pbuf_realloc+0x108>)
 80052b2:	4826      	ldr	r0, [pc, #152]	; (800534c <pbuf_realloc+0x104>)
 80052b4:	f00a fd06 	bl	800fcc4 <iprintf>
  while (rem_len > q->len) {
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	895b      	ldrh	r3, [r3, #10]
 80052bc:	897a      	ldrh	r2, [r7, #10]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d8e1      	bhi.n	8005286 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	7b1b      	ldrb	r3, [r3, #12]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d121      	bne.n	8005312 <pbuf_realloc+0xca>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	895b      	ldrh	r3, [r3, #10]
 80052d2:	897a      	ldrh	r2, [r7, #10]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d01c      	beq.n	8005312 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	7b5b      	ldrb	r3, [r3, #13]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d116      	bne.n	8005312 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	897b      	ldrh	r3, [r7, #10]
 80052f0:	4413      	add	r3, r2
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	4619      	mov	r1, r3
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7fe fff4 	bl	80042e4 <mem_trim>
 80052fc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <pbuf_realloc+0xca>
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <pbuf_realloc+0xfc>)
 8005306:	f240 12bd 	movw	r2, #445	; 0x1bd
 800530a:	4912      	ldr	r1, [pc, #72]	; (8005354 <pbuf_realloc+0x10c>)
 800530c:	480f      	ldr	r0, [pc, #60]	; (800534c <pbuf_realloc+0x104>)
 800530e:	f00a fcd9 	bl	800fcc4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	897a      	ldrh	r2, [r7, #10]
 8005316:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	895a      	ldrh	r2, [r3, #10]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 f911 	bl	8005554 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e000      	b.n	800533c <pbuf_realloc+0xf4>
    return;
 800533a:	bf00      	nop

}
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	080112dc 	.word	0x080112dc
 8005348:	080113f4 	.word	0x080113f4
 800534c:	0801133c 	.word	0x0801133c
 8005350:	0801140c 	.word	0x0801140c
 8005354:	08011424 	.word	0x08011424

08005358 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <pbuf_add_header_impl+0x22>
 800536c:	4b2b      	ldr	r3, [pc, #172]	; (800541c <pbuf_add_header_impl+0xc4>)
 800536e:	f240 12df 	movw	r2, #479	; 0x1df
 8005372:	492b      	ldr	r1, [pc, #172]	; (8005420 <pbuf_add_header_impl+0xc8>)
 8005374:	482b      	ldr	r0, [pc, #172]	; (8005424 <pbuf_add_header_impl+0xcc>)
 8005376:	f00a fca5 	bl	800fcc4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <pbuf_add_header_impl+0x30>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005386:	d301      	bcc.n	800538c <pbuf_add_header_impl+0x34>
    return 1;
 8005388:	2301      	movs	r3, #1
 800538a:	e043      	b.n	8005414 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <pbuf_add_header_impl+0x3e>
    return 0;
 8005392:	2300      	movs	r3, #0
 8005394:	e03e      	b.n	8005414 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	891a      	ldrh	r2, [r3, #8]
 800539e:	8a7b      	ldrh	r3, [r7, #18]
 80053a0:	4413      	add	r3, r2
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8a7a      	ldrh	r2, [r7, #18]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d901      	bls.n	80053ae <pbuf_add_header_impl+0x56>
    return 1;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e032      	b.n	8005414 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	7b1b      	ldrb	r3, [r3, #12]
 80053b2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80053b4:	8a3b      	ldrh	r3, [r7, #16]
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	425b      	negs	r3, r3
 80053c6:	4413      	add	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3310      	adds	r3, #16
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d20d      	bcs.n	80053f0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e01d      	b.n	8005414 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d006      	beq.n	80053ec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	425b      	negs	r3, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e001      	b.n	80053f0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e011      	b.n	8005414 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	895a      	ldrh	r2, [r3, #10]
 80053fa:	8a7b      	ldrh	r3, [r7, #18]
 80053fc:	4413      	add	r3, r2
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	891a      	ldrh	r2, [r3, #8]
 8005408:	8a7b      	ldrh	r3, [r7, #18]
 800540a:	4413      	add	r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	811a      	strh	r2, [r3, #8]


  return 0;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	080112dc 	.word	0x080112dc
 8005420:	08011440 	.word	0x08011440
 8005424:	0801133c 	.word	0x0801133c

08005428 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005432:	2200      	movs	r2, #0
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff8e 	bl	8005358 <pbuf_add_header_impl>
 800543c:	4603      	mov	r3, r0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d106      	bne.n	8005466 <pbuf_remove_header+0x1e>
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <pbuf_remove_header+0x94>)
 800545a:	f240 224b 	movw	r2, #587	; 0x24b
 800545e:	4920      	ldr	r1, [pc, #128]	; (80054e0 <pbuf_remove_header+0x98>)
 8005460:	4820      	ldr	r0, [pc, #128]	; (80054e4 <pbuf_remove_header+0x9c>)
 8005462:	f00a fc2f 	bl	800fcc4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <pbuf_remove_header+0x2c>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005472:	d301      	bcc.n	8005478 <pbuf_remove_header+0x30>
    return 1;
 8005474:	2301      	movs	r3, #1
 8005476:	e02c      	b.n	80054d2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <pbuf_remove_header+0x3a>
    return 0;
 800547e:	2300      	movs	r3, #0
 8005480:	e027      	b.n	80054d2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	895b      	ldrh	r3, [r3, #10]
 800548a:	89fa      	ldrh	r2, [r7, #14]
 800548c:	429a      	cmp	r2, r3
 800548e:	d908      	bls.n	80054a2 <pbuf_remove_header+0x5a>
 8005490:	4b12      	ldr	r3, [pc, #72]	; (80054dc <pbuf_remove_header+0x94>)
 8005492:	f240 2255 	movw	r2, #597	; 0x255
 8005496:	4914      	ldr	r1, [pc, #80]	; (80054e8 <pbuf_remove_header+0xa0>)
 8005498:	4812      	ldr	r0, [pc, #72]	; (80054e4 <pbuf_remove_header+0x9c>)
 800549a:	f00a fc13 	bl	800fcc4 <iprintf>
 800549e:	2301      	movs	r3, #1
 80054a0:	e017      	b.n	80054d2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	895a      	ldrh	r2, [r3, #10]
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	891a      	ldrh	r2, [r3, #8]
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	080112dc 	.word	0x080112dc
 80054e0:	08011440 	.word	0x08011440
 80054e4:	0801133c 	.word	0x0801133c
 80054e8:	0801144c 	.word	0x0801144c

080054ec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	807b      	strh	r3, [r7, #2]
 80054f8:	4613      	mov	r3, r2
 80054fa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80054fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005500:	2b00      	cmp	r3, #0
 8005502:	da08      	bge.n	8005516 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005504:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005508:	425b      	negs	r3, r3
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff9b 	bl	8005448 <pbuf_remove_header>
 8005512:	4603      	mov	r3, r0
 8005514:	e007      	b.n	8005526 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005516:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800551a:	787a      	ldrb	r2, [r7, #1]
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ff1a 	bl	8005358 <pbuf_add_header_impl>
 8005524:	4603      	mov	r3, r0
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800553a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800553e:	2201      	movs	r2, #1
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ffd2 	bl	80054ec <pbuf_header_impl>
 8005548:	4603      	mov	r3, r0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <pbuf_free+0x22>
 8005568:	4b38      	ldr	r3, [pc, #224]	; (800564c <pbuf_free+0xf8>)
 800556a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800556e:	4938      	ldr	r1, [pc, #224]	; (8005650 <pbuf_free+0xfc>)
 8005570:	4838      	ldr	r0, [pc, #224]	; (8005654 <pbuf_free+0x100>)
 8005572:	f00a fba7 	bl	800fcc4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005576:	2300      	movs	r3, #0
 8005578:	e063      	b.n	8005642 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800557e:	e05c      	b.n	800563a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	7b9b      	ldrb	r3, [r3, #14]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <pbuf_free+0x42>
 8005588:	4b30      	ldr	r3, [pc, #192]	; (800564c <pbuf_free+0xf8>)
 800558a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800558e:	4932      	ldr	r1, [pc, #200]	; (8005658 <pbuf_free+0x104>)
 8005590:	4830      	ldr	r0, [pc, #192]	; (8005654 <pbuf_free+0x100>)
 8005592:	f00a fb97 	bl	800fcc4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	7b9b      	ldrb	r3, [r3, #14]
 800559a:	3b01      	subs	r3, #1
 800559c:	b2da      	uxtb	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	739a      	strb	r2, [r3, #14]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	7b9b      	ldrb	r3, [r3, #14]
 80055a6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80055a8:	7dbb      	ldrb	r3, [r7, #22]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d143      	bne.n	8005636 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	7b1b      	ldrb	r3, [r3, #12]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7b5b      	ldrb	r3, [r3, #13]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d011      	beq.n	80055ee <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <pbuf_free+0x90>
 80055d6:	4b1d      	ldr	r3, [pc, #116]	; (800564c <pbuf_free+0xf8>)
 80055d8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80055dc:	491f      	ldr	r1, [pc, #124]	; (800565c <pbuf_free+0x108>)
 80055de:	481d      	ldr	r0, [pc, #116]	; (8005654 <pbuf_free+0x100>)
 80055e0:	f00a fb70 	bl	800fcc4 <iprintf>
        pc->custom_free_function(p);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	4798      	blx	r3
 80055ec:	e01d      	b.n	800562a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d104      	bne.n	80055fe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	2008      	movs	r0, #8
 80055f8:	f7ff f92a 	bl	8004850 <memp_free>
 80055fc:	e015      	b.n	800562a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d104      	bne.n	800560e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	2007      	movs	r0, #7
 8005608:	f7ff f922 	bl	8004850 <memp_free>
 800560c:	e00d      	b.n	800562a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <pbuf_free+0xc8>
          mem_free(p);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7fe fdfb 	bl	8004210 <mem_free>
 800561a:	e006      	b.n	800562a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800561c:	4b0b      	ldr	r3, [pc, #44]	; (800564c <pbuf_free+0xf8>)
 800561e:	f240 320f 	movw	r2, #783	; 0x30f
 8005622:	490f      	ldr	r1, [pc, #60]	; (8005660 <pbuf_free+0x10c>)
 8005624:	480b      	ldr	r0, [pc, #44]	; (8005654 <pbuf_free+0x100>)
 8005626:	f00a fb4d 	bl	800fcc4 <iprintf>
        }
      }
      count++;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	3301      	adds	r3, #1
 800562e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	e001      	b.n	800563a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d19f      	bne.n	8005580 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	080112dc 	.word	0x080112dc
 8005650:	08011440 	.word	0x08011440
 8005654:	0801133c 	.word	0x0801133c
 8005658:	0801146c 	.word	0x0801146c
 800565c:	08011484 	.word	0x08011484
 8005660:	080114a8 	.word	0x080114a8

08005664 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005670:	e005      	b.n	800567e <pbuf_clen+0x1a>
    ++len;
 8005672:	89fb      	ldrh	r3, [r7, #14]
 8005674:	3301      	adds	r3, #1
 8005676:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f6      	bne.n	8005672 <pbuf_clen+0xe>
  }
  return len;
 8005684:	89fb      	ldrh	r3, [r7, #14]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7b9b      	ldrb	r3, [r3, #14]
 80056a6:	3301      	adds	r3, #1
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	7b9b      	ldrb	r3, [r3, #14]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <pbuf_ref+0x30>
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <pbuf_ref+0x38>)
 80056b8:	f240 3242 	movw	r2, #834	; 0x342
 80056bc:	4904      	ldr	r1, [pc, #16]	; (80056d0 <pbuf_ref+0x3c>)
 80056be:	4805      	ldr	r0, [pc, #20]	; (80056d4 <pbuf_ref+0x40>)
 80056c0:	f00a fb00 	bl	800fcc4 <iprintf>
  }
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	080112dc 	.word	0x080112dc
 80056d0:	080114bc 	.word	0x080114bc
 80056d4:	0801133c 	.word	0x0801133c

080056d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <pbuf_cat+0x16>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <pbuf_cat+0x26>
 80056ee:	4b20      	ldr	r3, [pc, #128]	; (8005770 <pbuf_cat+0x98>)
 80056f0:	f240 3259 	movw	r2, #857	; 0x359
 80056f4:	491f      	ldr	r1, [pc, #124]	; (8005774 <pbuf_cat+0x9c>)
 80056f6:	4820      	ldr	r0, [pc, #128]	; (8005778 <pbuf_cat+0xa0>)
 80056f8:	f00a fae4 	bl	800fcc4 <iprintf>
 80056fc:	e034      	b.n	8005768 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	e00a      	b.n	800571a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	891a      	ldrh	r2, [r3, #8]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	891b      	ldrh	r3, [r3, #8]
 800570c:	4413      	add	r3, r2
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	891a      	ldrh	r2, [r3, #8]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	895b      	ldrh	r3, [r3, #10]
 800572a:	429a      	cmp	r2, r3
 800572c:	d006      	beq.n	800573c <pbuf_cat+0x64>
 800572e:	4b10      	ldr	r3, [pc, #64]	; (8005770 <pbuf_cat+0x98>)
 8005730:	f240 3262 	movw	r2, #866	; 0x362
 8005734:	4911      	ldr	r1, [pc, #68]	; (800577c <pbuf_cat+0xa4>)
 8005736:	4810      	ldr	r0, [pc, #64]	; (8005778 <pbuf_cat+0xa0>)
 8005738:	f00a fac4 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d006      	beq.n	8005752 <pbuf_cat+0x7a>
 8005744:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <pbuf_cat+0x98>)
 8005746:	f240 3263 	movw	r2, #867	; 0x363
 800574a:	490d      	ldr	r1, [pc, #52]	; (8005780 <pbuf_cat+0xa8>)
 800574c:	480a      	ldr	r0, [pc, #40]	; (8005778 <pbuf_cat+0xa0>)
 800574e:	f00a fab9 	bl	800fcc4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	891a      	ldrh	r2, [r3, #8]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	891b      	ldrh	r3, [r3, #8]
 800575a:	4413      	add	r3, r2
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	080112dc 	.word	0x080112dc
 8005774:	080114d0 	.word	0x080114d0
 8005778:	0801133c 	.word	0x0801133c
 800577c:	08011508 	.word	0x08011508
 8005780:	08011538 	.word	0x08011538

08005784 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff ffa1 	bl	80056d8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005796:	6838      	ldr	r0, [r7, #0]
 8005798:	f7ff ff7c 	bl	8005694 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <pbuf_copy+0x2a>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <pbuf_copy+0x2a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	891a      	ldrh	r2, [r3, #8]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	891b      	ldrh	r3, [r3, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d209      	bcs.n	80057e2 <pbuf_copy+0x3e>
 80057ce:	4b57      	ldr	r3, [pc, #348]	; (800592c <pbuf_copy+0x188>)
 80057d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80057d4:	4956      	ldr	r1, [pc, #344]	; (8005930 <pbuf_copy+0x18c>)
 80057d6:	4857      	ldr	r0, [pc, #348]	; (8005934 <pbuf_copy+0x190>)
 80057d8:	f00a fa74 	bl	800fcc4 <iprintf>
 80057dc:	f06f 030f 	mvn.w	r3, #15
 80057e0:	e09f      	b.n	8005922 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	895b      	ldrh	r3, [r3, #10]
 80057e6:	461a      	mov	r2, r3
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad2      	subs	r2, r2, r3
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	895b      	ldrh	r3, [r3, #10]
 80057f0:	4619      	mov	r1, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1acb      	subs	r3, r1, r3
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d306      	bcc.n	8005808 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	895b      	ldrh	r3, [r3, #10]
 80057fe:	461a      	mov	r2, r3
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e005      	b.n	8005814 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	895b      	ldrh	r3, [r3, #10]
 800580c:	461a      	mov	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	18d0      	adds	r0, r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4413      	add	r3, r2
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4619      	mov	r1, r3
 8005828:	f00a fa36 	bl	800fc98 <memcpy>
    offset_to += len;
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	895b      	ldrh	r3, [r3, #10]
 8005840:	461a      	mov	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4293      	cmp	r3, r2
 8005846:	d906      	bls.n	8005856 <pbuf_copy+0xb2>
 8005848:	4b38      	ldr	r3, [pc, #224]	; (800592c <pbuf_copy+0x188>)
 800584a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800584e:	493a      	ldr	r1, [pc, #232]	; (8005938 <pbuf_copy+0x194>)
 8005850:	4838      	ldr	r0, [pc, #224]	; (8005934 <pbuf_copy+0x190>)
 8005852:	f00a fa37 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	895b      	ldrh	r3, [r3, #10]
 800585a:	461a      	mov	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	4293      	cmp	r3, r2
 8005860:	d906      	bls.n	8005870 <pbuf_copy+0xcc>
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <pbuf_copy+0x188>)
 8005864:	f240 32da 	movw	r2, #986	; 0x3da
 8005868:	4934      	ldr	r1, [pc, #208]	; (800593c <pbuf_copy+0x198>)
 800586a:	4832      	ldr	r0, [pc, #200]	; (8005934 <pbuf_copy+0x190>)
 800586c:	f00a fa2a 	bl	800fcc4 <iprintf>
    if (offset_from >= p_from->len) {
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	895b      	ldrh	r3, [r3, #10]
 8005874:	461a      	mov	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	4293      	cmp	r3, r2
 800587a:	d304      	bcc.n	8005886 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	895b      	ldrh	r3, [r3, #10]
 800588a:	461a      	mov	r2, r3
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	4293      	cmp	r3, r2
 8005890:	d114      	bne.n	80058bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10c      	bne.n	80058bc <pbuf_copy+0x118>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <pbuf_copy+0x118>
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <pbuf_copy+0x188>)
 80058aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80058ae:	4924      	ldr	r1, [pc, #144]	; (8005940 <pbuf_copy+0x19c>)
 80058b0:	4820      	ldr	r0, [pc, #128]	; (8005934 <pbuf_copy+0x190>)
 80058b2:	f00a fa07 	bl	800fcc4 <iprintf>
 80058b6:	f06f 030f 	mvn.w	r3, #15
 80058ba:	e032      	b.n	8005922 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d013      	beq.n	80058ea <pbuf_copy+0x146>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	895a      	ldrh	r2, [r3, #10]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	891b      	ldrh	r3, [r3, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d10d      	bne.n	80058ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <pbuf_copy+0x146>
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <pbuf_copy+0x188>)
 80058d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80058dc:	4919      	ldr	r1, [pc, #100]	; (8005944 <pbuf_copy+0x1a0>)
 80058de:	4815      	ldr	r0, [pc, #84]	; (8005934 <pbuf_copy+0x190>)
 80058e0:	f00a f9f0 	bl	800fcc4 <iprintf>
 80058e4:	f06f 0305 	mvn.w	r3, #5
 80058e8:	e01b      	b.n	8005922 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <pbuf_copy+0x174>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	895a      	ldrh	r2, [r3, #10]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	891b      	ldrh	r3, [r3, #8]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d10d      	bne.n	8005918 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <pbuf_copy+0x174>
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <pbuf_copy+0x188>)
 8005906:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800590a:	490e      	ldr	r1, [pc, #56]	; (8005944 <pbuf_copy+0x1a0>)
 800590c:	4809      	ldr	r0, [pc, #36]	; (8005934 <pbuf_copy+0x190>)
 800590e:	f00a f9d9 	bl	800fcc4 <iprintf>
 8005912:	f06f 0305 	mvn.w	r3, #5
 8005916:	e004      	b.n	8005922 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f47f af61 	bne.w	80057e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	080112dc 	.word	0x080112dc
 8005930:	08011584 	.word	0x08011584
 8005934:	0801133c 	.word	0x0801133c
 8005938:	080115b4 	.word	0x080115b4
 800593c:	080115cc 	.word	0x080115cc
 8005940:	080115e8 	.word	0x080115e8
 8005944:	080115f8 	.word	0x080115f8

08005948 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b088      	sub	sp, #32
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4611      	mov	r1, r2
 8005954:	461a      	mov	r2, r3
 8005956:	460b      	mov	r3, r1
 8005958:	80fb      	strh	r3, [r7, #6]
 800595a:	4613      	mov	r3, r2
 800595c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <pbuf_copy_partial+0x36>
 800596c:	4b2b      	ldr	r3, [pc, #172]	; (8005a1c <pbuf_copy_partial+0xd4>)
 800596e:	f240 420a 	movw	r2, #1034	; 0x40a
 8005972:	492b      	ldr	r1, [pc, #172]	; (8005a20 <pbuf_copy_partial+0xd8>)
 8005974:	482b      	ldr	r0, [pc, #172]	; (8005a24 <pbuf_copy_partial+0xdc>)
 8005976:	f00a f9a5 	bl	800fcc4 <iprintf>
 800597a:	2300      	movs	r3, #0
 800597c:	e04a      	b.n	8005a14 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <pbuf_copy_partial+0x4e>
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <pbuf_copy_partial+0xd4>)
 8005986:	f240 420b 	movw	r2, #1035	; 0x40b
 800598a:	4927      	ldr	r1, [pc, #156]	; (8005a28 <pbuf_copy_partial+0xe0>)
 800598c:	4825      	ldr	r0, [pc, #148]	; (8005a24 <pbuf_copy_partial+0xdc>)
 800598e:	f00a f999 	bl	800fcc4 <iprintf>
 8005992:	2300      	movs	r3, #0
 8005994:	e03e      	b.n	8005a14 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	e034      	b.n	8005a06 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800599c:	88bb      	ldrh	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <pbuf_copy_partial+0x70>
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	895b      	ldrh	r3, [r3, #10]
 80059a6:	88ba      	ldrh	r2, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d305      	bcc.n	80059b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	895b      	ldrh	r3, [r3, #10]
 80059b0:	88ba      	ldrh	r2, [r7, #4]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	80bb      	strh	r3, [r7, #4]
 80059b6:	e023      	b.n	8005a00 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	895a      	ldrh	r2, [r3, #10]
 80059bc:	88bb      	ldrh	r3, [r7, #4]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80059c2:	8b3a      	ldrh	r2, [r7, #24]
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d901      	bls.n	80059ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80059ce:	8b7b      	ldrh	r3, [r7, #26]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	18d0      	adds	r0, r2, r3
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	88bb      	ldrh	r3, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	8b3a      	ldrh	r2, [r7, #24]
 80059de:	4619      	mov	r1, r3
 80059e0:	f00a f95a 	bl	800fc98 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80059e4:	8afa      	ldrh	r2, [r7, #22]
 80059e6:	8b3b      	ldrh	r3, [r7, #24]
 80059e8:	4413      	add	r3, r2
 80059ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80059ec:	8b7a      	ldrh	r2, [r7, #26]
 80059ee:	8b3b      	ldrh	r3, [r7, #24]
 80059f0:	4413      	add	r3, r2
 80059f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80059f4:	88fa      	ldrh	r2, [r7, #6]
 80059f6:	8b3b      	ldrh	r3, [r7, #24]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80059fc:	2300      	movs	r3, #0
 80059fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <pbuf_copy_partial+0xca>
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1c4      	bne.n	800599c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005a12:	8afb      	ldrh	r3, [r7, #22]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	080112dc 	.word	0x080112dc
 8005a20:	08011624 	.word	0x08011624
 8005a24:	0801133c 	.word	0x0801133c
 8005a28:	08011644 	.word	0x08011644

08005a2c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	603a      	str	r2, [r7, #0]
 8005a36:	71fb      	strb	r3, [r7, #7]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	8919      	ldrh	r1, [r3, #8]
 8005a40:	88ba      	ldrh	r2, [r7, #4]
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff faa1 	bl	8004f8c <pbuf_alloc>
 8005a4a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <pbuf_clone+0x2a>
    return NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	e011      	b.n	8005a7a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff fea3 	bl	80057a4 <pbuf_copy>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005a62:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d006      	beq.n	8005a78 <pbuf_clone+0x4c>
 8005a6a:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <pbuf_clone+0x58>)
 8005a6c:	f240 5224 	movw	r2, #1316	; 0x524
 8005a70:	4905      	ldr	r1, [pc, #20]	; (8005a88 <pbuf_clone+0x5c>)
 8005a72:	4806      	ldr	r0, [pc, #24]	; (8005a8c <pbuf_clone+0x60>)
 8005a74:	f00a f926 	bl	800fcc4 <iprintf>
  return q;
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	080112dc 	.word	0x080112dc
 8005a88:	08011750 	.word	0x08011750
 8005a8c:	0801133c 	.word	0x0801133c

08005a90 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005a94:	f00a f92e 	bl	800fcf4 <rand>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	4b01      	ldr	r3, [pc, #4]	; (8005ab0 <tcp_init+0x20>)
 8005aaa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005aac:	bf00      	nop
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	2000000a 	.word	0x2000000a

08005ab4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	7d1b      	ldrb	r3, [r3, #20]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d105      	bne.n	8005ad0 <tcp_free+0x1c>
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <tcp_free+0x2c>)
 8005ac6:	22d4      	movs	r2, #212	; 0xd4
 8005ac8:	4906      	ldr	r1, [pc, #24]	; (8005ae4 <tcp_free+0x30>)
 8005aca:	4807      	ldr	r0, [pc, #28]	; (8005ae8 <tcp_free+0x34>)
 8005acc:	f00a f8fa 	bl	800fcc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	f7fe febc 	bl	8004850 <memp_free>
}
 8005ad8:	bf00      	nop
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	080117dc 	.word	0x080117dc
 8005ae4:	0801180c 	.word	0x0801180c
 8005ae8:	08011820 	.word	0x08011820

08005aec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	7d1b      	ldrb	r3, [r3, #20]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d105      	bne.n	8005b08 <tcp_free_listen+0x1c>
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <tcp_free_listen+0x2c>)
 8005afe:	22df      	movs	r2, #223	; 0xdf
 8005b00:	4906      	ldr	r1, [pc, #24]	; (8005b1c <tcp_free_listen+0x30>)
 8005b02:	4807      	ldr	r0, [pc, #28]	; (8005b20 <tcp_free_listen+0x34>)
 8005b04:	f00a f8de 	bl	800fcc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	2002      	movs	r0, #2
 8005b0c:	f7fe fea0 	bl	8004850 <memp_free>
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	080117dc 	.word	0x080117dc
 8005b1c:	08011848 	.word	0x08011848
 8005b20:	08011820 	.word	0x08011820

08005b24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005b28:	f000 fea2 	bl	8006870 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005b2c:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <tcp_tmr+0x28>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	3301      	adds	r3, #1
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <tcp_tmr+0x28>)
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <tcp_tmr+0x28>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005b44:	f000 fb54 	bl	80061f0 <tcp_slowtmr>
  }
}
 8005b48:	bf00      	nop
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200000d5 	.word	0x200000d5

08005b50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <tcp_remove_listener+0x1c>
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <tcp_remove_listener+0x48>)
 8005b62:	22ff      	movs	r2, #255	; 0xff
 8005b64:	490d      	ldr	r1, [pc, #52]	; (8005b9c <tcp_remove_listener+0x4c>)
 8005b66:	480e      	ldr	r0, [pc, #56]	; (8005ba0 <tcp_remove_listener+0x50>)
 8005b68:	f00a f8ac 	bl	800fcc4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e00a      	b.n	8005b88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d102      	bne.n	8005b82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f1      	bne.n	8005b72 <tcp_remove_listener+0x22>
    }
  }
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	080117dc 	.word	0x080117dc
 8005b9c:	08011864 	.word	0x08011864
 8005ba0:	08011820 	.word	0x08011820

08005ba4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <tcp_listen_closed+0x1c>
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <tcp_listen_closed+0x60>)
 8005bb4:	f240 1211 	movw	r2, #273	; 0x111
 8005bb8:	4913      	ldr	r1, [pc, #76]	; (8005c08 <tcp_listen_closed+0x64>)
 8005bba:	4814      	ldr	r0, [pc, #80]	; (8005c0c <tcp_listen_closed+0x68>)
 8005bbc:	f00a f882 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	7d1b      	ldrb	r3, [r3, #20]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d006      	beq.n	8005bd6 <tcp_listen_closed+0x32>
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <tcp_listen_closed+0x60>)
 8005bca:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005bce:	4910      	ldr	r1, [pc, #64]	; (8005c10 <tcp_listen_closed+0x6c>)
 8005bd0:	480e      	ldr	r0, [pc, #56]	; (8005c0c <tcp_listen_closed+0x68>)
 8005bd2:	f00a f877 	bl	800fcc4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e00b      	b.n	8005bf4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005bdc:	4a0d      	ldr	r2, [pc, #52]	; (8005c14 <tcp_listen_closed+0x70>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ffb1 	bl	8005b50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d9f0      	bls.n	8005bdc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005bfa:	bf00      	nop
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	080117dc 	.word	0x080117dc
 8005c08:	0801188c 	.word	0x0801188c
 8005c0c:	08011820 	.word	0x08011820
 8005c10:	08011898 	.word	0x08011898
 8005c14:	08013b48 	.word	0x08013b48

08005c18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005c18:	b5b0      	push	{r4, r5, r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af04      	add	r7, sp, #16
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <tcp_close_shutdown+0x20>
 8005c2a:	4b63      	ldr	r3, [pc, #396]	; (8005db8 <tcp_close_shutdown+0x1a0>)
 8005c2c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005c30:	4962      	ldr	r1, [pc, #392]	; (8005dbc <tcp_close_shutdown+0x1a4>)
 8005c32:	4863      	ldr	r0, [pc, #396]	; (8005dc0 <tcp_close_shutdown+0x1a8>)
 8005c34:	f00a f846 	bl	800fcc4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d066      	beq.n	8005d0c <tcp_close_shutdown+0xf4>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7d1b      	ldrb	r3, [r3, #20]
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d003      	beq.n	8005c4e <tcp_close_shutdown+0x36>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	7d1b      	ldrb	r3, [r3, #20]
 8005c4a:	2b07      	cmp	r3, #7
 8005c4c:	d15e      	bne.n	8005d0c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d104      	bne.n	8005c60 <tcp_close_shutdown+0x48>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005c5e:	d055      	beq.n	8005d0c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8b5b      	ldrh	r3, [r3, #26]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <tcp_close_shutdown+0x62>
 8005c6c:	4b52      	ldr	r3, [pc, #328]	; (8005db8 <tcp_close_shutdown+0x1a0>)
 8005c6e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005c72:	4954      	ldr	r1, [pc, #336]	; (8005dc4 <tcp_close_shutdown+0x1ac>)
 8005c74:	4852      	ldr	r0, [pc, #328]	; (8005dc0 <tcp_close_shutdown+0x1a8>)
 8005c76:	f00a f825 	bl	800fcc4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005c82:	687d      	ldr	r5, [r7, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	8ad2      	ldrh	r2, [r2, #22]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	8b09      	ldrh	r1, [r1, #24]
 8005c90:	9102      	str	r1, [sp, #8]
 8005c92:	9201      	str	r2, [sp, #4]
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	462b      	mov	r3, r5
 8005c98:	4622      	mov	r2, r4
 8005c9a:	4601      	mov	r1, r0
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f004 fe8d 	bl	800a9bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f001 f8c6 	bl	8006e34 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005ca8:	4b47      	ldr	r3, [pc, #284]	; (8005dc8 <tcp_close_shutdown+0x1b0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d105      	bne.n	8005cbe <tcp_close_shutdown+0xa6>
 8005cb2:	4b45      	ldr	r3, [pc, #276]	; (8005dc8 <tcp_close_shutdown+0x1b0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4a43      	ldr	r2, [pc, #268]	; (8005dc8 <tcp_close_shutdown+0x1b0>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e013      	b.n	8005ce6 <tcp_close_shutdown+0xce>
 8005cbe:	4b42      	ldr	r3, [pc, #264]	; (8005dc8 <tcp_close_shutdown+0x1b0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e00c      	b.n	8005ce0 <tcp_close_shutdown+0xc8>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d104      	bne.n	8005cda <tcp_close_shutdown+0xc2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	e005      	b.n	8005ce6 <tcp_close_shutdown+0xce>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1ef      	bne.n	8005cc6 <tcp_close_shutdown+0xae>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	60da      	str	r2, [r3, #12]
 8005cec:	4b37      	ldr	r3, [pc, #220]	; (8005dcc <tcp_close_shutdown+0x1b4>)
 8005cee:	2201      	movs	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005cf2:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <tcp_close_shutdown+0x1b8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d102      	bne.n	8005d02 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005cfc:	f003 fd5a 	bl	80097b4 <tcp_trigger_input_pcb_close>
 8005d00:	e002      	b.n	8005d08 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fed6 	bl	8005ab4 <tcp_free>
      }
      return ERR_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e050      	b.n	8005dae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7d1b      	ldrb	r3, [r3, #20]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d03b      	beq.n	8005d8c <tcp_close_shutdown+0x174>
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	dc44      	bgt.n	8005da2 <tcp_close_shutdown+0x18a>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <tcp_close_shutdown+0x10a>
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d02a      	beq.n	8005d76 <tcp_close_shutdown+0x15e>
 8005d20:	e03f      	b.n	8005da2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8adb      	ldrh	r3, [r3, #22]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d021      	beq.n	8005d6e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d2a:	4b2a      	ldr	r3, [pc, #168]	; (8005dd4 <tcp_close_shutdown+0x1bc>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d105      	bne.n	8005d40 <tcp_close_shutdown+0x128>
 8005d34:	4b27      	ldr	r3, [pc, #156]	; (8005dd4 <tcp_close_shutdown+0x1bc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	4a26      	ldr	r2, [pc, #152]	; (8005dd4 <tcp_close_shutdown+0x1bc>)
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e013      	b.n	8005d68 <tcp_close_shutdown+0x150>
 8005d40:	4b24      	ldr	r3, [pc, #144]	; (8005dd4 <tcp_close_shutdown+0x1bc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	e00c      	b.n	8005d62 <tcp_close_shutdown+0x14a>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d104      	bne.n	8005d5c <tcp_close_shutdown+0x144>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	e005      	b.n	8005d68 <tcp_close_shutdown+0x150>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1ef      	bne.n	8005d48 <tcp_close_shutdown+0x130>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff fea0 	bl	8005ab4 <tcp_free>
      break;
 8005d74:	e01a      	b.n	8005dac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ff14 	bl	8005ba4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4816      	ldr	r0, [pc, #88]	; (8005dd8 <tcp_close_shutdown+0x1c0>)
 8005d80:	f001 f8a8 	bl	8006ed4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff feb1 	bl	8005aec <tcp_free_listen>
      break;
 8005d8a:	e00f      	b.n	8005dac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	480e      	ldr	r0, [pc, #56]	; (8005dc8 <tcp_close_shutdown+0x1b0>)
 8005d90:	f001 f8a0 	bl	8006ed4 <tcp_pcb_remove>
 8005d94:	4b0d      	ldr	r3, [pc, #52]	; (8005dcc <tcp_close_shutdown+0x1b4>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff fe8a 	bl	8005ab4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005da0:	e004      	b.n	8005dac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f81a 	bl	8005ddc <tcp_close_shutdown_fin>
 8005da8:	4603      	mov	r3, r0
 8005daa:	e000      	b.n	8005dae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bdb0      	pop	{r4, r5, r7, pc}
 8005db6:	bf00      	nop
 8005db8:	080117dc 	.word	0x080117dc
 8005dbc:	080118b0 	.word	0x080118b0
 8005dc0:	08011820 	.word	0x08011820
 8005dc4:	080118d0 	.word	0x080118d0
 8005dc8:	2000694c 	.word	0x2000694c
 8005dcc:	20006948 	.word	0x20006948
 8005dd0:	20006960 	.word	0x20006960
 8005dd4:	20006958 	.word	0x20006958
 8005dd8:	20006954 	.word	0x20006954

08005ddc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <tcp_close_shutdown_fin+0x1c>
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <tcp_close_shutdown_fin+0xc8>)
 8005dec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005df0:	492d      	ldr	r1, [pc, #180]	; (8005ea8 <tcp_close_shutdown_fin+0xcc>)
 8005df2:	482e      	ldr	r0, [pc, #184]	; (8005eac <tcp_close_shutdown_fin+0xd0>)
 8005df4:	f009 ff66 	bl	800fcc4 <iprintf>

  switch (pcb->state) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7d1b      	ldrb	r3, [r3, #20]
 8005dfc:	2b07      	cmp	r3, #7
 8005dfe:	d020      	beq.n	8005e42 <tcp_close_shutdown_fin+0x66>
 8005e00:	2b07      	cmp	r3, #7
 8005e02:	dc2b      	bgt.n	8005e5c <tcp_close_shutdown_fin+0x80>
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d002      	beq.n	8005e0e <tcp_close_shutdown_fin+0x32>
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d00d      	beq.n	8005e28 <tcp_close_shutdown_fin+0x4c>
 8005e0c:	e026      	b.n	8005e5c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f003 fee2 	bl	8009bd8 <tcp_send_fin>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d11f      	bne.n	8005e60 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2205      	movs	r2, #5
 8005e24:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e26:	e01b      	b.n	8005e60 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f003 fed5 	bl	8009bd8 <tcp_send_fin>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d114      	bne.n	8005e64 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e40:	e010      	b.n	8005e64 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f003 fec8 	bl	8009bd8 <tcp_send_fin>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d109      	bne.n	8005e68 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2209      	movs	r2, #9
 8005e58:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005e5a:	e005      	b.n	8005e68 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e01c      	b.n	8005e9a <tcp_close_shutdown_fin+0xbe>
      break;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <tcp_close_shutdown_fin+0x8e>
      break;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <tcp_close_shutdown_fin+0x8e>
      break;
 8005e68:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f003 ffee 	bl	8009e54 <tcp_output>
 8005e78:	e00d      	b.n	8005e96 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d108      	bne.n	8005e96 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8b5b      	ldrh	r3, [r3, #26]
 8005e88:	f043 0308 	orr.w	r3, r3, #8
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e001      	b.n	8005e9a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	080117dc 	.word	0x080117dc
 8005ea8:	0801188c 	.word	0x0801188c
 8005eac:	08011820 	.word	0x08011820

08005eb0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <tcp_close+0x22>
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <tcp_close+0x4c>)
 8005ec0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005ec4:	490e      	ldr	r1, [pc, #56]	; (8005f00 <tcp_close+0x50>)
 8005ec6:	480f      	ldr	r0, [pc, #60]	; (8005f04 <tcp_close+0x54>)
 8005ec8:	f009 fefc 	bl	800fcc4 <iprintf>
 8005ecc:	f06f 030f 	mvn.w	r3, #15
 8005ed0:	e00f      	b.n	8005ef2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	7d1b      	ldrb	r3, [r3, #20]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d006      	beq.n	8005ee8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	8b5b      	ldrh	r3, [r3, #26]
 8005ede:	f043 0310 	orr.w	r3, r3, #16
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005ee8:	2101      	movs	r1, #1
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fe94 	bl	8005c18 <tcp_close_shutdown>
 8005ef0:	4603      	mov	r3, r0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	080117dc 	.word	0x080117dc
 8005f00:	080118ec 	.word	0x080118ec
 8005f04:	08011820 	.word	0x08011820

08005f08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	; 0x38
 8005f0c:	af04      	add	r7, sp, #16
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d107      	bne.n	8005f28 <tcp_abandon+0x20>
 8005f18:	4b52      	ldr	r3, [pc, #328]	; (8006064 <tcp_abandon+0x15c>)
 8005f1a:	f240 223d 	movw	r2, #573	; 0x23d
 8005f1e:	4952      	ldr	r1, [pc, #328]	; (8006068 <tcp_abandon+0x160>)
 8005f20:	4852      	ldr	r0, [pc, #328]	; (800606c <tcp_abandon+0x164>)
 8005f22:	f009 fecf 	bl	800fcc4 <iprintf>
 8005f26:	e099      	b.n	800605c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	7d1b      	ldrb	r3, [r3, #20]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d106      	bne.n	8005f3e <tcp_abandon+0x36>
 8005f30:	4b4c      	ldr	r3, [pc, #304]	; (8006064 <tcp_abandon+0x15c>)
 8005f32:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005f36:	494e      	ldr	r1, [pc, #312]	; (8006070 <tcp_abandon+0x168>)
 8005f38:	484c      	ldr	r0, [pc, #304]	; (800606c <tcp_abandon+0x164>)
 8005f3a:	f009 fec3 	bl	800fcc4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	7d1b      	ldrb	r3, [r3, #20]
 8005f42:	2b0a      	cmp	r3, #10
 8005f44:	d107      	bne.n	8005f56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	484a      	ldr	r0, [pc, #296]	; (8006074 <tcp_abandon+0x16c>)
 8005f4a:	f000 ffc3 	bl	8006ed4 <tcp_pcb_remove>
    tcp_free(pcb);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fdb0 	bl	8005ab4 <tcp_free>
 8005f54:	e082      	b.n	800605c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	7d1b      	ldrb	r3, [r3, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d126      	bne.n	8005fce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8adb      	ldrh	r3, [r3, #22]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02e      	beq.n	8005fe6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f88:	4b3b      	ldr	r3, [pc, #236]	; (8006078 <tcp_abandon+0x170>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d105      	bne.n	8005f9e <tcp_abandon+0x96>
 8005f92:	4b39      	ldr	r3, [pc, #228]	; (8006078 <tcp_abandon+0x170>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	4a37      	ldr	r2, [pc, #220]	; (8006078 <tcp_abandon+0x170>)
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	e013      	b.n	8005fc6 <tcp_abandon+0xbe>
 8005f9e:	4b36      	ldr	r3, [pc, #216]	; (8006078 <tcp_abandon+0x170>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e00c      	b.n	8005fc0 <tcp_abandon+0xb8>
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d104      	bne.n	8005fba <tcp_abandon+0xb2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	60da      	str	r2, [r3, #12]
 8005fb8:	e005      	b.n	8005fc6 <tcp_abandon+0xbe>
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	61fb      	str	r3, [r7, #28]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1ef      	bne.n	8005fa6 <tcp_abandon+0x9e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	60da      	str	r2, [r3, #12]
 8005fcc:	e00b      	b.n	8005fe6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8adb      	ldrh	r3, [r3, #22]
 8005fd6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4828      	ldr	r0, [pc, #160]	; (800607c <tcp_abandon+0x174>)
 8005fdc:	f000 ff7a 	bl	8006ed4 <tcp_pcb_remove>
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <tcp_abandon+0x178>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fd1c 	bl	8006a30 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d004      	beq.n	800600a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fd13 	bl	8006a30 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fd0a 	bl	8006a30 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00e      	beq.n	8006040 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3304      	adds	r3, #4
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	8b12      	ldrh	r2, [r2, #24]
 800602c:	9202      	str	r2, [sp, #8]
 800602e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006030:	9201      	str	r2, [sp, #4]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	460b      	mov	r3, r1
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f004 fcbe 	bl	800a9bc <tcp_rst>
    }
    last_state = pcb->state;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	7d1b      	ldrb	r3, [r3, #20]
 8006044:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fd34 	bl	8005ab4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <tcp_abandon+0x154>
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f06f 010c 	mvn.w	r1, #12
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	4798      	blx	r3
  }
}
 800605c:	3728      	adds	r7, #40	; 0x28
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	080117dc 	.word	0x080117dc
 8006068:	08011920 	.word	0x08011920
 800606c:	08011820 	.word	0x08011820
 8006070:	0801193c 	.word	0x0801193c
 8006074:	2000695c 	.word	0x2000695c
 8006078:	20006958 	.word	0x20006958
 800607c:	2000694c 	.word	0x2000694c
 8006080:	20006948 	.word	0x20006948

08006084 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800608c:	2101      	movs	r1, #1
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ff3a 	bl	8005f08 <tcp_abandon>
}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <tcp_update_rcv_ann_wnd+0x1c>
 80060aa:	4b25      	ldr	r3, [pc, #148]	; (8006140 <tcp_update_rcv_ann_wnd+0xa4>)
 80060ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 80060b0:	4924      	ldr	r1, [pc, #144]	; (8006144 <tcp_update_rcv_ann_wnd+0xa8>)
 80060b2:	4825      	ldr	r0, [pc, #148]	; (8006148 <tcp_update_rcv_ann_wnd+0xac>)
 80060b4:	f009 fe06 	bl	800fcc4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80060c0:	4413      	add	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80060cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80060d0:	bf28      	it	cs
 80060d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80060d6:	b292      	uxth	r2, r2
 80060d8:	4413      	add	r3, r2
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	db08      	blt.n	80060f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	e020      	b.n	8006136 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	dd03      	ble.n	800610a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006108:	e014      	b.n	8006134 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d306      	bcc.n	800612c <tcp_update_rcv_ann_wnd+0x90>
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <tcp_update_rcv_ann_wnd+0xa4>)
 8006120:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006124:	4909      	ldr	r1, [pc, #36]	; (800614c <tcp_update_rcv_ann_wnd+0xb0>)
 8006126:	4808      	ldr	r0, [pc, #32]	; (8006148 <tcp_update_rcv_ann_wnd+0xac>)
 8006128:	f009 fdcc 	bl	800fcc4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	b29a      	uxth	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006134:	2300      	movs	r3, #0
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	080117dc 	.word	0x080117dc
 8006144:	08011a38 	.word	0x08011a38
 8006148:	08011820 	.word	0x08011820
 800614c:	08011a5c 	.word	0x08011a5c

08006150 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d107      	bne.n	8006172 <tcp_recved+0x22>
 8006162:	4b1f      	ldr	r3, [pc, #124]	; (80061e0 <tcp_recved+0x90>)
 8006164:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006168:	491e      	ldr	r1, [pc, #120]	; (80061e4 <tcp_recved+0x94>)
 800616a:	481f      	ldr	r0, [pc, #124]	; (80061e8 <tcp_recved+0x98>)
 800616c:	f009 fdaa 	bl	800fcc4 <iprintf>
 8006170:	e032      	b.n	80061d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7d1b      	ldrb	r3, [r3, #20]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d106      	bne.n	8006188 <tcp_recved+0x38>
 800617a:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <tcp_recved+0x90>)
 800617c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006180:	491a      	ldr	r1, [pc, #104]	; (80061ec <tcp_recved+0x9c>)
 8006182:	4819      	ldr	r0, [pc, #100]	; (80061e8 <tcp_recved+0x98>)
 8006184:	f009 fd9e 	bl	800fcc4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800618c:	887b      	ldrh	r3, [r7, #2]
 800618e:	4413      	add	r3, r2
 8006190:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006192:	89fb      	ldrh	r3, [r7, #14]
 8006194:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006198:	d804      	bhi.n	80061a4 <tcp_recved+0x54>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	89fa      	ldrh	r2, [r7, #14]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d204      	bcs.n	80061ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80061aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80061ac:	e002      	b.n	80061b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	89fa      	ldrh	r2, [r7, #14]
 80061b2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff71 	bl	800609c <tcp_update_rcv_ann_wnd>
 80061ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80061c2:	d309      	bcc.n	80061d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	8b5b      	ldrh	r3, [r3, #26]
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f003 fe3e 	bl	8009e54 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	080117dc 	.word	0x080117dc
 80061e4:	08011a78 	.word	0x08011a78
 80061e8:	08011820 	.word	0x08011820
 80061ec:	08011a90 	.word	0x08011a90

080061f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80061f0:	b5b0      	push	{r4, r5, r7, lr}
 80061f2:	b090      	sub	sp, #64	; 0x40
 80061f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80061fc:	4b94      	ldr	r3, [pc, #592]	; (8006450 <tcp_slowtmr+0x260>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	4a93      	ldr	r2, [pc, #588]	; (8006450 <tcp_slowtmr+0x260>)
 8006204:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006206:	4b93      	ldr	r3, [pc, #588]	; (8006454 <tcp_slowtmr+0x264>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	3301      	adds	r3, #1
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b91      	ldr	r3, [pc, #580]	; (8006454 <tcp_slowtmr+0x264>)
 8006210:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006212:	2300      	movs	r3, #0
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006216:	4b90      	ldr	r3, [pc, #576]	; (8006458 <tcp_slowtmr+0x268>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800621c:	e29f      	b.n	800675e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800621e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006220:	7d1b      	ldrb	r3, [r3, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <tcp_slowtmr+0x44>
 8006226:	4b8d      	ldr	r3, [pc, #564]	; (800645c <tcp_slowtmr+0x26c>)
 8006228:	f240 42be 	movw	r2, #1214	; 0x4be
 800622c:	498c      	ldr	r1, [pc, #560]	; (8006460 <tcp_slowtmr+0x270>)
 800622e:	488d      	ldr	r0, [pc, #564]	; (8006464 <tcp_slowtmr+0x274>)
 8006230:	f009 fd48 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	7d1b      	ldrb	r3, [r3, #20]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d106      	bne.n	800624a <tcp_slowtmr+0x5a>
 800623c:	4b87      	ldr	r3, [pc, #540]	; (800645c <tcp_slowtmr+0x26c>)
 800623e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006242:	4989      	ldr	r1, [pc, #548]	; (8006468 <tcp_slowtmr+0x278>)
 8006244:	4887      	ldr	r0, [pc, #540]	; (8006464 <tcp_slowtmr+0x274>)
 8006246:	f009 fd3d 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	7d1b      	ldrb	r3, [r3, #20]
 800624e:	2b0a      	cmp	r3, #10
 8006250:	d106      	bne.n	8006260 <tcp_slowtmr+0x70>
 8006252:	4b82      	ldr	r3, [pc, #520]	; (800645c <tcp_slowtmr+0x26c>)
 8006254:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006258:	4984      	ldr	r1, [pc, #528]	; (800646c <tcp_slowtmr+0x27c>)
 800625a:	4882      	ldr	r0, [pc, #520]	; (8006464 <tcp_slowtmr+0x274>)
 800625c:	f009 fd32 	bl	800fcc4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	7f9a      	ldrb	r2, [r3, #30]
 8006264:	4b7b      	ldr	r3, [pc, #492]	; (8006454 <tcp_slowtmr+0x264>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d105      	bne.n	8006278 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006276:	e272      	b.n	800675e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006278:	4b76      	ldr	r3, [pc, #472]	; (8006454 <tcp_slowtmr+0x264>)
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	7d1b      	ldrb	r3, [r3, #20]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d10a      	bne.n	80062aa <tcp_slowtmr+0xba>
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800629a:	2b05      	cmp	r3, #5
 800629c:	d905      	bls.n	80062aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800629e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062a2:	3301      	adds	r3, #1
 80062a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062a8:	e11e      	b.n	80064e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062b0:	2b0b      	cmp	r3, #11
 80062b2:	d905      	bls.n	80062c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80062b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062b8:	3301      	adds	r3, #1
 80062ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80062be:	e113      	b.n	80064e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d075      	beq.n	80063b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d006      	beq.n	80062e0 <tcp_slowtmr+0xf0>
 80062d2:	4b62      	ldr	r3, [pc, #392]	; (800645c <tcp_slowtmr+0x26c>)
 80062d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80062d8:	4965      	ldr	r1, [pc, #404]	; (8006470 <tcp_slowtmr+0x280>)
 80062da:	4862      	ldr	r0, [pc, #392]	; (8006464 <tcp_slowtmr+0x274>)
 80062dc:	f009 fcf2 	bl	800fcc4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <tcp_slowtmr+0x106>
 80062e8:	4b5c      	ldr	r3, [pc, #368]	; (800645c <tcp_slowtmr+0x26c>)
 80062ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80062ee:	4961      	ldr	r1, [pc, #388]	; (8006474 <tcp_slowtmr+0x284>)
 80062f0:	485c      	ldr	r0, [pc, #368]	; (8006464 <tcp_slowtmr+0x274>)
 80062f2:	f009 fce7 	bl	800fcc4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80062fc:	2b0b      	cmp	r3, #11
 80062fe:	d905      	bls.n	800630c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006304:	3301      	adds	r3, #1
 8006306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800630a:	e0ed      	b.n	80064e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006312:	3b01      	subs	r3, #1
 8006314:	4a58      	ldr	r2, [pc, #352]	; (8006478 <tcp_slowtmr+0x288>)
 8006316:	5cd3      	ldrb	r3, [r2, r3]
 8006318:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006320:	7c7a      	ldrb	r2, [r7, #17]
 8006322:	429a      	cmp	r2, r3
 8006324:	d907      	bls.n	8006336 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800632c:	3301      	adds	r3, #1
 800632e:	b2da      	uxtb	r2, r3
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800633c:	7c7a      	ldrb	r2, [r7, #17]
 800633e:	429a      	cmp	r2, r3
 8006340:	f200 80d2 	bhi.w	80064e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006344:	2301      	movs	r3, #1
 8006346:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800634e:	2b00      	cmp	r3, #0
 8006350:	d108      	bne.n	8006364 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006354:	f004 fc26 	bl	800aba4 <tcp_zero_window_probe>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d014      	beq.n	8006388 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	e011      	b.n	8006388 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800636a:	4619      	mov	r1, r3
 800636c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800636e:	f003 faeb 	bl	8009948 <tcp_split_unsent_seg>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d107      	bne.n	8006388 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800637a:	f003 fd6b 	bl	8009e54 <tcp_output>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f000 80ac 	beq.w	80064e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800639e:	2b06      	cmp	r3, #6
 80063a0:	f200 80a2 	bhi.w	80064e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80063aa:	3301      	adds	r3, #1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80063b4:	e098      	b.n	80064e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80063bc:	2b00      	cmp	r3, #0
 80063be:	db0f      	blt.n	80063e0 <tcp_slowtmr+0x1f0>
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80063c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d008      	beq.n	80063e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	b29b      	uxth	r3, r3
 80063da:	b21a      	sxth	r2, r3
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80063ec:	429a      	cmp	r2, r3
 80063ee:	db7b      	blt.n	80064e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80063f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063f2:	f004 f821 	bl	800a438 <tcp_rexmit_rto_prepare>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <tcp_slowtmr+0x21c>
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006400:	2b00      	cmp	r3, #0
 8006402:	d171      	bne.n	80064e8 <tcp_slowtmr+0x2f8>
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d06d      	beq.n	80064e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	7d1b      	ldrb	r3, [r3, #20]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d03a      	beq.n	800648a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800641a:	2b0c      	cmp	r3, #12
 800641c:	bf28      	it	cs
 800641e:	230c      	movcs	r3, #12
 8006420:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006428:	10db      	asrs	r3, r3, #3
 800642a:	b21b      	sxth	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006434:	4413      	add	r3, r2
 8006436:	7efa      	ldrb	r2, [r7, #27]
 8006438:	4910      	ldr	r1, [pc, #64]	; (800647c <tcp_slowtmr+0x28c>)
 800643a:	5c8a      	ldrb	r2, [r1, r2]
 800643c:	4093      	lsls	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006446:	4293      	cmp	r3, r2
 8006448:	dc1a      	bgt.n	8006480 <tcp_slowtmr+0x290>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	b21a      	sxth	r2, r3
 800644e:	e019      	b.n	8006484 <tcp_slowtmr+0x294>
 8006450:	20006950 	.word	0x20006950
 8006454:	200000d6 	.word	0x200000d6
 8006458:	2000694c 	.word	0x2000694c
 800645c:	080117dc 	.word	0x080117dc
 8006460:	08011b20 	.word	0x08011b20
 8006464:	08011820 	.word	0x08011820
 8006468:	08011b4c 	.word	0x08011b4c
 800646c:	08011b78 	.word	0x08011b78
 8006470:	08011ba8 	.word	0x08011ba8
 8006474:	08011bdc 	.word	0x08011bdc
 8006478:	08013b40 	.word	0x08013b40
 800647c:	08013b30 	.word	0x08013b30
 8006480:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	2200      	movs	r2, #0
 800648e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800649c:	4293      	cmp	r3, r2
 800649e:	bf28      	it	cs
 80064a0:	4613      	movcs	r3, r2
 80064a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80064a4:	8a7b      	ldrh	r3, [r7, #18]
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	429a      	cmp	r2, r3
 80064c0:	d206      	bcs.n	80064d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	2200      	movs	r2, #0
 80064de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80064e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e4:	f004 f818 	bl	800a518 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	7d1b      	ldrb	r3, [r3, #20]
 80064ec:	2b06      	cmp	r3, #6
 80064ee:	d111      	bne.n	8006514 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	8b5b      	ldrh	r3, [r3, #26]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80064fc:	4b9d      	ldr	r3, [pc, #628]	; (8006774 <tcp_slowtmr+0x584>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b28      	cmp	r3, #40	; 0x28
 8006508:	d904      	bls.n	8006514 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800650a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800650e:	3301      	adds	r3, #1
 8006510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	7a5b      	ldrb	r3, [r3, #9]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d04c      	beq.n	80065ba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006524:	2b04      	cmp	r3, #4
 8006526:	d003      	beq.n	8006530 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800652c:	2b07      	cmp	r3, #7
 800652e:	d144      	bne.n	80065ba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006530:	4b90      	ldr	r3, [pc, #576]	; (8006774 <tcp_slowtmr+0x584>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006540:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006544:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006548:	498b      	ldr	r1, [pc, #556]	; (8006778 <tcp_slowtmr+0x588>)
 800654a:	fba1 1303 	umull	r1, r3, r1, r3
 800654e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006550:	429a      	cmp	r2, r3
 8006552:	d90a      	bls.n	800656a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006558:	3301      	adds	r3, #1
 800655a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800655e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006562:	3301      	adds	r3, #1
 8006564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006568:	e027      	b.n	80065ba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800656a:	4b82      	ldr	r3, [pc, #520]	; (8006774 <tcp_slowtmr+0x584>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006580:	4618      	mov	r0, r3
 8006582:	4b7e      	ldr	r3, [pc, #504]	; (800677c <tcp_slowtmr+0x58c>)
 8006584:	fb03 f300 	mul.w	r3, r3, r0
 8006588:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800658a:	497b      	ldr	r1, [pc, #492]	; (8006778 <tcp_slowtmr+0x588>)
 800658c:	fba1 1303 	umull	r1, r3, r1, r3
 8006590:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006592:	429a      	cmp	r2, r3
 8006594:	d911      	bls.n	80065ba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006598:	f004 fac4 	bl	800ab24 <tcp_keepalive>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80065a2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80065aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80065b0:	3301      	adds	r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d011      	beq.n	80065e6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80065c2:	4b6c      	ldr	r3, [pc, #432]	; (8006774 <tcp_slowtmr+0x584>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80065d2:	4619      	mov	r1, r3
 80065d4:	460b      	mov	r3, r1
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	440b      	add	r3, r1
 80065da:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80065dc:	429a      	cmp	r2, r3
 80065de:	d302      	bcc.n	80065e6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80065e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065e2:	f000 fddb 	bl	800719c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	7d1b      	ldrb	r3, [r3, #20]
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d10b      	bne.n	8006606 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80065ee:	4b61      	ldr	r3, [pc, #388]	; (8006774 <tcp_slowtmr+0x584>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b28      	cmp	r3, #40	; 0x28
 80065fa:	d904      	bls.n	8006606 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80065fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006600:	3301      	adds	r3, #1
 8006602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	7d1b      	ldrb	r3, [r3, #20]
 800660a:	2b09      	cmp	r3, #9
 800660c:	d10b      	bne.n	8006626 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800660e:	4b59      	ldr	r3, [pc, #356]	; (8006774 <tcp_slowtmr+0x584>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2bf0      	cmp	r3, #240	; 0xf0
 800661a:	d904      	bls.n	8006626 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800661c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006620:	3301      	adds	r3, #1
 8006622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800662a:	2b00      	cmp	r3, #0
 800662c:	d060      	beq.n	80066f0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006634:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006638:	f000 fbfc 	bl	8006e34 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b00      	cmp	r3, #0
 8006640:	d010      	beq.n	8006664 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006642:	4b4f      	ldr	r3, [pc, #316]	; (8006780 <tcp_slowtmr+0x590>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006648:	429a      	cmp	r2, r3
 800664a:	d106      	bne.n	800665a <tcp_slowtmr+0x46a>
 800664c:	4b4d      	ldr	r3, [pc, #308]	; (8006784 <tcp_slowtmr+0x594>)
 800664e:	f240 526d 	movw	r2, #1389	; 0x56d
 8006652:	494d      	ldr	r1, [pc, #308]	; (8006788 <tcp_slowtmr+0x598>)
 8006654:	484d      	ldr	r0, [pc, #308]	; (800678c <tcp_slowtmr+0x59c>)
 8006656:	f009 fb35 	bl	800fcc4 <iprintf>
        prev->next = pcb->next;
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	60da      	str	r2, [r3, #12]
 8006662:	e00f      	b.n	8006684 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006664:	4b46      	ldr	r3, [pc, #280]	; (8006780 <tcp_slowtmr+0x590>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800666a:	429a      	cmp	r2, r3
 800666c:	d006      	beq.n	800667c <tcp_slowtmr+0x48c>
 800666e:	4b45      	ldr	r3, [pc, #276]	; (8006784 <tcp_slowtmr+0x594>)
 8006670:	f240 5271 	movw	r2, #1393	; 0x571
 8006674:	4946      	ldr	r1, [pc, #280]	; (8006790 <tcp_slowtmr+0x5a0>)
 8006676:	4845      	ldr	r0, [pc, #276]	; (800678c <tcp_slowtmr+0x59c>)
 8006678:	f009 fb24 	bl	800fcc4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4a3f      	ldr	r2, [pc, #252]	; (8006780 <tcp_slowtmr+0x590>)
 8006682:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006684:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006688:	2b00      	cmp	r3, #0
 800668a:	d013      	beq.n	80066b4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006694:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	3304      	adds	r3, #4
 800669a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669c:	8ad2      	ldrh	r2, [r2, #22]
 800669e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066a0:	8b09      	ldrh	r1, [r1, #24]
 80066a2:	9102      	str	r1, [sp, #8]
 80066a4:	9201      	str	r2, [sp, #4]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	462b      	mov	r3, r5
 80066aa:	4622      	mov	r2, r4
 80066ac:	4601      	mov	r1, r0
 80066ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066b0:	f004 f984 	bl	800a9bc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80066b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	7d1b      	ldrb	r3, [r3, #20]
 80066be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80066ca:	6838      	ldr	r0, [r7, #0]
 80066cc:	f7ff f9f2 	bl	8005ab4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80066d0:	4b30      	ldr	r3, [pc, #192]	; (8006794 <tcp_slowtmr+0x5a4>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <tcp_slowtmr+0x4f6>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f06f 010c 	mvn.w	r1, #12
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80066e6:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <tcp_slowtmr+0x5a4>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d037      	beq.n	800675e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80066ee:	e590      	b.n	8006212 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	7f1b      	ldrb	r3, [r3, #28]
 80066fe:	3301      	adds	r3, #1
 8006700:	b2da      	uxtb	r2, r3
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	7f1a      	ldrb	r2, [r3, #28]
 800670a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670c:	7f5b      	ldrb	r3, [r3, #29]
 800670e:	429a      	cmp	r2, r3
 8006710:	d325      	bcc.n	800675e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006718:	4b1e      	ldr	r3, [pc, #120]	; (8006794 <tcp_slowtmr+0x5a4>)
 800671a:	2200      	movs	r2, #0
 800671c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <tcp_slowtmr+0x550>
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006730:	6912      	ldr	r2, [r2, #16]
 8006732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006734:	4610      	mov	r0, r2
 8006736:	4798      	blx	r3
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800673e:	e002      	b.n	8006746 <tcp_slowtmr+0x556>
 8006740:	2300      	movs	r3, #0
 8006742:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <tcp_slowtmr+0x5a4>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d000      	beq.n	8006750 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800674e:	e560      	b.n	8006212 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006750:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800675a:	f003 fb7b 	bl	8009e54 <tcp_output>
  while (pcb != NULL) {
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	f47f ad5c 	bne.w	800621e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <tcp_slowtmr+0x5a8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006770:	e067      	b.n	8006842 <tcp_slowtmr+0x652>
 8006772:	bf00      	nop
 8006774:	20006950 	.word	0x20006950
 8006778:	10624dd3 	.word	0x10624dd3
 800677c:	000124f8 	.word	0x000124f8
 8006780:	2000694c 	.word	0x2000694c
 8006784:	080117dc 	.word	0x080117dc
 8006788:	08011c14 	.word	0x08011c14
 800678c:	08011820 	.word	0x08011820
 8006790:	08011c40 	.word	0x08011c40
 8006794:	20006948 	.word	0x20006948
 8006798:	2000695c 	.word	0x2000695c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	7d1b      	ldrb	r3, [r3, #20]
 80067a0:	2b0a      	cmp	r3, #10
 80067a2:	d006      	beq.n	80067b2 <tcp_slowtmr+0x5c2>
 80067a4:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <tcp_slowtmr+0x664>)
 80067a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80067aa:	492b      	ldr	r1, [pc, #172]	; (8006858 <tcp_slowtmr+0x668>)
 80067ac:	482b      	ldr	r0, [pc, #172]	; (800685c <tcp_slowtmr+0x66c>)
 80067ae:	f009 fa89 	bl	800fcc4 <iprintf>
    pcb_remove = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80067b8:	4b29      	ldr	r3, [pc, #164]	; (8006860 <tcp_slowtmr+0x670>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2bf0      	cmp	r3, #240	; 0xf0
 80067c4:	d904      	bls.n	80067d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80067c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067ca:	3301      	adds	r3, #1
 80067cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80067d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02f      	beq.n	8006838 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80067d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067da:	f000 fb2b 	bl	8006e34 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d010      	beq.n	8006806 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80067e4:	4b1f      	ldr	r3, [pc, #124]	; (8006864 <tcp_slowtmr+0x674>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d106      	bne.n	80067fc <tcp_slowtmr+0x60c>
 80067ee:	4b19      	ldr	r3, [pc, #100]	; (8006854 <tcp_slowtmr+0x664>)
 80067f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80067f4:	491c      	ldr	r1, [pc, #112]	; (8006868 <tcp_slowtmr+0x678>)
 80067f6:	4819      	ldr	r0, [pc, #100]	; (800685c <tcp_slowtmr+0x66c>)
 80067f8:	f009 fa64 	bl	800fcc4 <iprintf>
        prev->next = pcb->next;
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	e00f      	b.n	8006826 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006806:	4b17      	ldr	r3, [pc, #92]	; (8006864 <tcp_slowtmr+0x674>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680c:	429a      	cmp	r2, r3
 800680e:	d006      	beq.n	800681e <tcp_slowtmr+0x62e>
 8006810:	4b10      	ldr	r3, [pc, #64]	; (8006854 <tcp_slowtmr+0x664>)
 8006812:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006816:	4915      	ldr	r1, [pc, #84]	; (800686c <tcp_slowtmr+0x67c>)
 8006818:	4810      	ldr	r0, [pc, #64]	; (800685c <tcp_slowtmr+0x66c>)
 800681a:	f009 fa53 	bl	800fcc4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <tcp_slowtmr+0x674>)
 8006824:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006828:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006830:	69f8      	ldr	r0, [r7, #28]
 8006832:	f7ff f93f 	bl	8005ab4 <tcp_free>
 8006836:	e004      	b.n	8006842 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1a9      	bne.n	800679c <tcp_slowtmr+0x5ac>
    }
  }
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	3730      	adds	r7, #48	; 0x30
 800684e:	46bd      	mov	sp, r7
 8006850:	bdb0      	pop	{r4, r5, r7, pc}
 8006852:	bf00      	nop
 8006854:	080117dc 	.word	0x080117dc
 8006858:	08011c6c 	.word	0x08011c6c
 800685c:	08011820 	.word	0x08011820
 8006860:	20006950 	.word	0x20006950
 8006864:	2000695c 	.word	0x2000695c
 8006868:	08011c9c 	.word	0x08011c9c
 800686c:	08011cc4 	.word	0x08011cc4

08006870 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006876:	4b2d      	ldr	r3, [pc, #180]	; (800692c <tcp_fasttmr+0xbc>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	b2da      	uxtb	r2, r3
 800687e:	4b2b      	ldr	r3, [pc, #172]	; (800692c <tcp_fasttmr+0xbc>)
 8006880:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006882:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <tcp_fasttmr+0xc0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006888:	e048      	b.n	800691c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	7f9a      	ldrb	r2, [r3, #30]
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <tcp_fasttmr+0xbc>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d03f      	beq.n	8006916 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <tcp_fasttmr+0xbc>)
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8b5b      	ldrh	r3, [r3, #26]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d010      	beq.n	80068cc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	8b5b      	ldrh	r3, [r3, #26]
 80068ae:	f043 0302 	orr.w	r3, r3, #2
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f003 facb 	bl	8009e54 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	8b5b      	ldrh	r3, [r3, #26]
 80068c2:	f023 0303 	bic.w	r3, r3, #3
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8b5b      	ldrh	r3, [r3, #26]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8b5b      	ldrh	r3, [r3, #26]
 80068dc:	f023 0308 	bic.w	r3, r3, #8
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fa78 	bl	8005ddc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80068fa:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <tcp_fasttmr+0xc4>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f819 	bl	8006938 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006906:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <tcp_fasttmr+0xc4>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d000      	beq.n	8006910 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800690e:	e7b8      	b.n	8006882 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	607b      	str	r3, [r7, #4]
 8006914:	e002      	b.n	800691c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1b3      	bne.n	800688a <tcp_fasttmr+0x1a>
    }
  }
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200000d6 	.word	0x200000d6
 8006930:	2000694c 	.word	0x2000694c
 8006934:	20006948 	.word	0x20006948

08006938 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <tcp_process_refused_data+0x22>
 8006946:	4b37      	ldr	r3, [pc, #220]	; (8006a24 <tcp_process_refused_data+0xec>)
 8006948:	f240 6209 	movw	r2, #1545	; 0x609
 800694c:	4936      	ldr	r1, [pc, #216]	; (8006a28 <tcp_process_refused_data+0xf0>)
 800694e:	4837      	ldr	r0, [pc, #220]	; (8006a2c <tcp_process_refused_data+0xf4>)
 8006950:	f009 f9b8 	bl	800fcc4 <iprintf>
 8006954:	f06f 030f 	mvn.w	r3, #15
 8006958:	e060      	b.n	8006a1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800695e:	7b5b      	ldrb	r3, [r3, #13]
 8006960:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006966:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <tcp_process_refused_data+0x58>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6918      	ldr	r0, [r3, #16]
 8006982:	2300      	movs	r3, #0
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	47a0      	blx	r4
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	e007      	b.n	80069a0 <tcp_process_refused_data+0x68>
 8006990:	2300      	movs	r3, #0
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	2000      	movs	r0, #0
 8006998:	f000 f8a4 	bl	8006ae4 <tcp_recv_null>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80069a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d12a      	bne.n	80069fe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d033      	beq.n	8006a1a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80069ba:	d005      	beq.n	80069c8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c0:	3301      	adds	r3, #1
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <tcp_process_refused_data+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6918      	ldr	r0, [r3, #16]
 80069dc:	2300      	movs	r3, #0
 80069de:	2200      	movs	r2, #0
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	47a0      	blx	r4
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
 80069e8:	e001      	b.n	80069ee <tcp_process_refused_data+0xb6>
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80069ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069f2:	f113 0f0d 	cmn.w	r3, #13
 80069f6:	d110      	bne.n	8006a1a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80069f8:	f06f 030c 	mvn.w	r3, #12
 80069fc:	e00e      	b.n	8006a1c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80069fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a02:	f113 0f0d 	cmn.w	r3, #13
 8006a06:	d102      	bne.n	8006a0e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006a08:	f06f 030c 	mvn.w	r3, #12
 8006a0c:	e006      	b.n	8006a1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006a14:	f06f 0304 	mvn.w	r3, #4
 8006a18:	e000      	b.n	8006a1c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}
 8006a24:	080117dc 	.word	0x080117dc
 8006a28:	08011cec 	.word	0x08011cec
 8006a2c:	08011820 	.word	0x08011820

08006a30 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006a38:	e007      	b.n	8006a4a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f80a 	bl	8006a5a <tcp_seg_free>
    seg = next;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f4      	bne.n	8006a3a <tcp_segs_free+0xa>
  }
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b082      	sub	sp, #8
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00c      	beq.n	8006a82 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7fe fd6d 	bl	8005554 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	2003      	movs	r0, #3
 8006a7e:	f7fd fee7 	bl	8004850 <memp_free>
  }
}
 8006a82:	bf00      	nop
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <tcp_seg_copy+0x1c>
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <tcp_seg_copy+0x4c>)
 8006a9c:	f240 6282 	movw	r2, #1666	; 0x682
 8006aa0:	490e      	ldr	r1, [pc, #56]	; (8006adc <tcp_seg_copy+0x50>)
 8006aa2:	480f      	ldr	r0, [pc, #60]	; (8006ae0 <tcp_seg_copy+0x54>)
 8006aa4:	f009 f90e 	bl	800fcc4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006aa8:	2003      	movs	r0, #3
 8006aaa:	f7fd fe85 	bl	80047b8 <memp_malloc>
 8006aae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <tcp_seg_copy+0x2e>
    return NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e00a      	b.n	8006ad0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006aba:	2210      	movs	r2, #16
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f009 f8ea 	bl	800fc98 <memcpy>
  pbuf_ref(cseg->p);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fde3 	bl	8005694 <pbuf_ref>
  return cseg;
 8006ace:	68fb      	ldr	r3, [r7, #12]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	080117dc 	.word	0x080117dc
 8006adc:	08011d30 	.word	0x08011d30
 8006ae0:	08011820 	.word	0x08011820

08006ae4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <tcp_recv_null+0x28>
 8006af8:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <tcp_recv_null+0x60>)
 8006afa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006afe:	4912      	ldr	r1, [pc, #72]	; (8006b48 <tcp_recv_null+0x64>)
 8006b00:	4812      	ldr	r0, [pc, #72]	; (8006b4c <tcp_recv_null+0x68>)
 8006b02:	f009 f8df 	bl	800fcc4 <iprintf>
 8006b06:	f06f 030f 	mvn.w	r3, #15
 8006b0a:	e016      	b.n	8006b3a <tcp_recv_null+0x56>

  if (p != NULL) {
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d009      	beq.n	8006b26 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	891b      	ldrh	r3, [r3, #8]
 8006b16:	4619      	mov	r1, r3
 8006b18:	68b8      	ldr	r0, [r7, #8]
 8006b1a:	f7ff fb19 	bl	8006150 <tcp_recved>
    pbuf_free(p);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fe fd18 	bl	8005554 <pbuf_free>
 8006b24:	e008      	b.n	8006b38 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d104      	bne.n	8006b38 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006b2e:	68b8      	ldr	r0, [r7, #8]
 8006b30:	f7ff f9be 	bl	8005eb0 <tcp_close>
 8006b34:	4603      	mov	r3, r0
 8006b36:	e000      	b.n	8006b3a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	080117dc 	.word	0x080117dc
 8006b48:	08011d4c 	.word	0x08011d4c
 8006b4c:	08011820 	.word	0x08011820

08006b50 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	db01      	blt.n	8006b66 <tcp_kill_prio+0x16>
 8006b62:	79fb      	ldrb	r3, [r7, #7]
 8006b64:	e000      	b.n	8006b68 <tcp_kill_prio+0x18>
 8006b66:	237f      	movs	r3, #127	; 0x7f
 8006b68:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d034      	beq.n	8006bda <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006b70:	7afb      	ldrb	r3, [r7, #11]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006b7e:	4b19      	ldr	r3, [pc, #100]	; (8006be4 <tcp_kill_prio+0x94>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e01f      	b.n	8006bc6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	7d5b      	ldrb	r3, [r3, #21]
 8006b8a:	7afa      	ldrb	r2, [r7, #11]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d80c      	bhi.n	8006baa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006b94:	7afa      	ldrb	r2, [r7, #11]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d112      	bne.n	8006bc0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006b9a:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <tcp_kill_prio+0x98>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d80a      	bhi.n	8006bc0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <tcp_kill_prio+0x98>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	7d5b      	ldrb	r3, [r3, #21]
 8006bbe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1dc      	bne.n	8006b86 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006bd2:	6938      	ldr	r0, [r7, #16]
 8006bd4:	f7ff fa56 	bl	8006084 <tcp_abort>
 8006bd8:	e000      	b.n	8006bdc <tcp_kill_prio+0x8c>
    return;
 8006bda:	bf00      	nop
  }
}
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	2000694c 	.word	0x2000694c
 8006be8:	20006950 	.word	0x20006950

08006bec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d009      	beq.n	8006c10 <tcp_kill_state+0x24>
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	2b09      	cmp	r3, #9
 8006c00:	d006      	beq.n	8006c10 <tcp_kill_state+0x24>
 8006c02:	4b1a      	ldr	r3, [pc, #104]	; (8006c6c <tcp_kill_state+0x80>)
 8006c04:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006c08:	4919      	ldr	r1, [pc, #100]	; (8006c70 <tcp_kill_state+0x84>)
 8006c0a:	481a      	ldr	r0, [pc, #104]	; (8006c74 <tcp_kill_state+0x88>)
 8006c0c:	f009 f85a 	bl	800fcc4 <iprintf>

  inactivity = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c18:	4b17      	ldr	r3, [pc, #92]	; (8006c78 <tcp_kill_state+0x8c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	e017      	b.n	8006c50 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	7d1b      	ldrb	r3, [r3, #20]
 8006c24:	79fa      	ldrb	r2, [r7, #7]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d10f      	bne.n	8006c4a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <tcp_kill_state+0x90>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d807      	bhi.n	8006c4a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <tcp_kill_state+0x90>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1e4      	bne.n	8006c20 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	6938      	ldr	r0, [r7, #16]
 8006c60:	f7ff f952 	bl	8005f08 <tcp_abandon>
  }
}
 8006c64:	bf00      	nop
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	080117dc 	.word	0x080117dc
 8006c70:	08011d68 	.word	0x08011d68
 8006c74:	08011820 	.word	0x08011820
 8006c78:	2000694c 	.word	0x2000694c
 8006c7c:	20006950 	.word	0x20006950

08006c80 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c8e:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <tcp_kill_timewait+0x58>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e012      	b.n	8006cbc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006c96:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <tcp_kill_timewait+0x5c>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d807      	bhi.n	8006cb6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <tcp_kill_timewait+0x5c>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e9      	bne.n	8006c96 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006cc8:	68b8      	ldr	r0, [r7, #8]
 8006cca:	f7ff f9db 	bl	8006084 <tcp_abort>
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2000695c 	.word	0x2000695c
 8006cdc:	20006950 	.word	0x20006950

08006ce0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006ce6:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <tcp_handle_closepend+0x48>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006cec:	e014      	b.n	8006d18 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8b5b      	ldrh	r3, [r3, #26]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d009      	beq.n	8006d14 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8b5b      	ldrh	r3, [r3, #26]
 8006d04:	f023 0308 	bic.w	r3, r3, #8
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff f864 	bl	8005ddc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e7      	bne.n	8006cee <tcp_handle_closepend+0xe>
  }
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	2000694c 	.word	0x2000694c

08006d2c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d36:	2001      	movs	r0, #1
 8006d38:	f7fd fd3e 	bl	80047b8 <memp_malloc>
 8006d3c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d126      	bne.n	8006d92 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006d44:	f7ff ffcc 	bl	8006ce0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006d48:	f7ff ff9a 	bl	8006c80 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d4c:	2001      	movs	r0, #1
 8006d4e:	f7fd fd33 	bl	80047b8 <memp_malloc>
 8006d52:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d11b      	bne.n	8006d92 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006d5a:	2009      	movs	r0, #9
 8006d5c:	f7ff ff46 	bl	8006bec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d60:	2001      	movs	r0, #1
 8006d62:	f7fd fd29 	bl	80047b8 <memp_malloc>
 8006d66:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d111      	bne.n	8006d92 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006d6e:	2008      	movs	r0, #8
 8006d70:	f7ff ff3c 	bl	8006bec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d74:	2001      	movs	r0, #1
 8006d76:	f7fd fd1f 	bl	80047b8 <memp_malloc>
 8006d7a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d107      	bne.n	8006d92 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fee3 	bl	8006b50 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	f7fd fd14 	bl	80047b8 <memp_malloc>
 8006d90:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d03f      	beq.n	8006e18 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006d98:	229c      	movs	r2, #156	; 0x9c
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f008 ff89 	bl	800fcb4 <memset>
    pcb->prio = prio;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	79fa      	ldrb	r2, [r7, #7]
 8006da6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006dae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006db8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	22ff      	movs	r2, #255	; 0xff
 8006dc6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006dce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2206      	movs	r2, #6
 8006dd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2206      	movs	r2, #6
 8006ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006de4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <tcp_alloc+0xf8>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <tcp_alloc+0xfc>)
 8006df8:	781a      	ldrb	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006e04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <tcp_alloc+0x100>)
 8006e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4a07      	ldr	r2, [pc, #28]	; (8006e30 <tcp_alloc+0x104>)
 8006e14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006e18:	68fb      	ldr	r3, [r7, #12]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20006950 	.word	0x20006950
 8006e28:	200000d6 	.word	0x200000d6
 8006e2c:	08006ae5 	.word	0x08006ae5
 8006e30:	006ddd00 	.word	0x006ddd00

08006e34 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d107      	bne.n	8006e52 <tcp_pcb_purge+0x1e>
 8006e42:	4b21      	ldr	r3, [pc, #132]	; (8006ec8 <tcp_pcb_purge+0x94>)
 8006e44:	f640 0251 	movw	r2, #2129	; 0x851
 8006e48:	4920      	ldr	r1, [pc, #128]	; (8006ecc <tcp_pcb_purge+0x98>)
 8006e4a:	4821      	ldr	r0, [pc, #132]	; (8006ed0 <tcp_pcb_purge+0x9c>)
 8006e4c:	f008 ff3a 	bl	800fcc4 <iprintf>
 8006e50:	e037      	b.n	8006ec2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7d1b      	ldrb	r3, [r3, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d033      	beq.n	8006ec2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	d02f      	beq.n	8006ec2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d02b      	beq.n	8006ec2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fb6c 	bl	8005554 <pbuf_free>
      pcb->refused_data = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f986 	bl	800719c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e96:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fdc7 	bl	8006a30 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7ff fdc2 	bl	8006a30 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	66da      	str	r2, [r3, #108]	; 0x6c
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	080117dc 	.word	0x080117dc
 8006ecc:	08011e28 	.word	0x08011e28
 8006ed0:	08011820 	.word	0x08011820

08006ed4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <tcp_pcb_remove+0x1e>
 8006ee4:	4b3e      	ldr	r3, [pc, #248]	; (8006fe0 <tcp_pcb_remove+0x10c>)
 8006ee6:	f640 0283 	movw	r2, #2179	; 0x883
 8006eea:	493e      	ldr	r1, [pc, #248]	; (8006fe4 <tcp_pcb_remove+0x110>)
 8006eec:	483e      	ldr	r0, [pc, #248]	; (8006fe8 <tcp_pcb_remove+0x114>)
 8006eee:	f008 fee9 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d106      	bne.n	8006f06 <tcp_pcb_remove+0x32>
 8006ef8:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <tcp_pcb_remove+0x10c>)
 8006efa:	f640 0284 	movw	r2, #2180	; 0x884
 8006efe:	493b      	ldr	r1, [pc, #236]	; (8006fec <tcp_pcb_remove+0x118>)
 8006f00:	4839      	ldr	r0, [pc, #228]	; (8006fe8 <tcp_pcb_remove+0x114>)
 8006f02:	f008 fedf 	bl	800fcc4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d105      	bne.n	8006f1c <tcp_pcb_remove+0x48>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	e013      	b.n	8006f44 <tcp_pcb_remove+0x70>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	e00c      	b.n	8006f3e <tcp_pcb_remove+0x6a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d104      	bne.n	8006f38 <tcp_pcb_remove+0x64>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	e005      	b.n	8006f44 <tcp_pcb_remove+0x70>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1ef      	bne.n	8006f24 <tcp_pcb_remove+0x50>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006f4a:	6838      	ldr	r0, [r7, #0]
 8006f4c:	f7ff ff72 	bl	8006e34 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	7d1b      	ldrb	r3, [r3, #20]
 8006f54:	2b0a      	cmp	r3, #10
 8006f56:	d013      	beq.n	8006f80 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d00f      	beq.n	8006f80 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	8b5b      	ldrh	r3, [r3, #26]
 8006f64:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	8b5b      	ldrh	r3, [r3, #26]
 8006f70:	f043 0302 	orr.w	r3, r3, #2
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006f7a:	6838      	ldr	r0, [r7, #0]
 8006f7c:	f002 ff6a 	bl	8009e54 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	7d1b      	ldrb	r3, [r3, #20]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d020      	beq.n	8006fca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d006      	beq.n	8006f9e <tcp_pcb_remove+0xca>
 8006f90:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <tcp_pcb_remove+0x10c>)
 8006f92:	f640 0293 	movw	r2, #2195	; 0x893
 8006f96:	4916      	ldr	r1, [pc, #88]	; (8006ff0 <tcp_pcb_remove+0x11c>)
 8006f98:	4813      	ldr	r0, [pc, #76]	; (8006fe8 <tcp_pcb_remove+0x114>)
 8006f9a:	f008 fe93 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <tcp_pcb_remove+0xe0>
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	; (8006fe0 <tcp_pcb_remove+0x10c>)
 8006fa8:	f640 0294 	movw	r2, #2196	; 0x894
 8006fac:	4911      	ldr	r1, [pc, #68]	; (8006ff4 <tcp_pcb_remove+0x120>)
 8006fae:	480e      	ldr	r0, [pc, #56]	; (8006fe8 <tcp_pcb_remove+0x114>)
 8006fb0:	f008 fe88 	bl	800fcc4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <tcp_pcb_remove+0xf6>
 8006fbc:	4b08      	ldr	r3, [pc, #32]	; (8006fe0 <tcp_pcb_remove+0x10c>)
 8006fbe:	f640 0296 	movw	r2, #2198	; 0x896
 8006fc2:	490d      	ldr	r1, [pc, #52]	; (8006ff8 <tcp_pcb_remove+0x124>)
 8006fc4:	4808      	ldr	r0, [pc, #32]	; (8006fe8 <tcp_pcb_remove+0x114>)
 8006fc6:	f008 fe7d 	bl	800fcc4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006fd6:	bf00      	nop
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	080117dc 	.word	0x080117dc
 8006fe4:	08011e44 	.word	0x08011e44
 8006fe8:	08011820 	.word	0x08011820
 8006fec:	08011e60 	.word	0x08011e60
 8006ff0:	08011e80 	.word	0x08011e80
 8006ff4:	08011e98 	.word	0x08011e98
 8006ff8:	08011eb4 	.word	0x08011eb4

08006ffc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d106      	bne.n	8007018 <tcp_next_iss+0x1c>
 800700a:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <tcp_next_iss+0x38>)
 800700c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007010:	4909      	ldr	r1, [pc, #36]	; (8007038 <tcp_next_iss+0x3c>)
 8007012:	480a      	ldr	r0, [pc, #40]	; (800703c <tcp_next_iss+0x40>)
 8007014:	f008 fe56 	bl	800fcc4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007018:	4b09      	ldr	r3, [pc, #36]	; (8007040 <tcp_next_iss+0x44>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <tcp_next_iss+0x48>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4413      	add	r3, r2
 8007022:	4a07      	ldr	r2, [pc, #28]	; (8007040 <tcp_next_iss+0x44>)
 8007024:	6013      	str	r3, [r2, #0]
  return iss;
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <tcp_next_iss+0x44>)
 8007028:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	080117dc 	.word	0x080117dc
 8007038:	08011ecc 	.word	0x08011ecc
 800703c:	08011820 	.word	0x08011820
 8007040:	2000000c 	.word	0x2000000c
 8007044:	20006950 	.word	0x20006950

08007048 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <tcp_eff_send_mss_netif+0x22>
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <tcp_eff_send_mss_netif+0x68>)
 800705e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007062:	4914      	ldr	r1, [pc, #80]	; (80070b4 <tcp_eff_send_mss_netif+0x6c>)
 8007064:	4814      	ldr	r0, [pc, #80]	; (80070b8 <tcp_eff_send_mss_netif+0x70>)
 8007066:	f008 fe2d 	bl	800fcc4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007070:	89fb      	ldrh	r3, [r7, #14]
 8007072:	e019      	b.n	80070a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007078:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800707a:	8afb      	ldrh	r3, [r7, #22]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d012      	beq.n	80070a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007080:	2328      	movs	r3, #40	; 0x28
 8007082:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007084:	8afa      	ldrh	r2, [r7, #22]
 8007086:	8abb      	ldrh	r3, [r7, #20]
 8007088:	429a      	cmp	r2, r3
 800708a:	d904      	bls.n	8007096 <tcp_eff_send_mss_netif+0x4e>
 800708c:	8afa      	ldrh	r2, [r7, #22]
 800708e:	8abb      	ldrh	r3, [r7, #20]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	e000      	b.n	8007098 <tcp_eff_send_mss_netif+0x50>
 8007096:	2300      	movs	r3, #0
 8007098:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800709a:	8a7a      	ldrh	r2, [r7, #18]
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	4293      	cmp	r3, r2
 80070a0:	bf28      	it	cs
 80070a2:	4613      	movcs	r3, r2
 80070a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80070a6:	89fb      	ldrh	r3, [r7, #14]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	080117dc 	.word	0x080117dc
 80070b4:	08011ee8 	.word	0x08011ee8
 80070b8:	08011820 	.word	0x08011820

080070bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d119      	bne.n	8007104 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80070d0:	4b10      	ldr	r3, [pc, #64]	; (8007114 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80070d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80070d6:	4910      	ldr	r1, [pc, #64]	; (8007118 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80070d8:	4810      	ldr	r0, [pc, #64]	; (800711c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80070da:	f008 fdf3 	bl	800fcc4 <iprintf>

  while (pcb != NULL) {
 80070de:	e011      	b.n	8007104 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d108      	bne.n	80070fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7fe ffc6 	bl	8006084 <tcp_abort>
      pcb = next;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	e002      	b.n	8007104 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1ea      	bne.n	80070e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	080117dc 	.word	0x080117dc
 8007118:	08011f10 	.word	0x08011f10
 800711c:	08011820 	.word	0x08011820

08007120 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d02a      	beq.n	8007186 <tcp_netif_ip_addr_changed+0x66>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d026      	beq.n	8007186 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007138:	4b15      	ldr	r3, [pc, #84]	; (8007190 <tcp_netif_ip_addr_changed+0x70>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff ffbc 	bl	80070bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007144:	4b13      	ldr	r3, [pc, #76]	; (8007194 <tcp_netif_ip_addr_changed+0x74>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff ffb6 	bl	80070bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d017      	beq.n	8007186 <tcp_netif_ip_addr_changed+0x66>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d013      	beq.n	8007186 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800715e:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <tcp_netif_ip_addr_changed+0x78>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e00c      	b.n	8007180 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d103      	bne.n	800717a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1ef      	bne.n	8007166 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007186:	bf00      	nop
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	2000694c 	.word	0x2000694c
 8007194:	20006958 	.word	0x20006958
 8007198:	20006954 	.word	0x20006954

0800719c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7ff fc3d 	bl	8006a30 <tcp_segs_free>
    pcb->ooseq = NULL;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80071bc:	bf00      	nop
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80071c4:	b590      	push	{r4, r7, lr}
 80071c6:	b08d      	sub	sp, #52	; 0x34
 80071c8:	af04      	add	r7, sp, #16
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d105      	bne.n	80071e0 <tcp_input+0x1c>
 80071d4:	4b9b      	ldr	r3, [pc, #620]	; (8007444 <tcp_input+0x280>)
 80071d6:	2283      	movs	r2, #131	; 0x83
 80071d8:	499b      	ldr	r1, [pc, #620]	; (8007448 <tcp_input+0x284>)
 80071da:	489c      	ldr	r0, [pc, #624]	; (800744c <tcp_input+0x288>)
 80071dc:	f008 fd72 	bl	800fcc4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4a9a      	ldr	r2, [pc, #616]	; (8007450 <tcp_input+0x28c>)
 80071e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	895b      	ldrh	r3, [r3, #10]
 80071ec:	2b13      	cmp	r3, #19
 80071ee:	f240 83c4 	bls.w	800797a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80071f2:	4b98      	ldr	r3, [pc, #608]	; (8007454 <tcp_input+0x290>)
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	4a97      	ldr	r2, [pc, #604]	; (8007454 <tcp_input+0x290>)
 80071f8:	6812      	ldr	r2, [r2, #0]
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f007 fdc9 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	f040 83ba 	bne.w	800797e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800720a:	4b92      	ldr	r3, [pc, #584]	; (8007454 <tcp_input+0x290>)
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007212:	2be0      	cmp	r3, #224	; 0xe0
 8007214:	f000 83b3 	beq.w	800797e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007218:	4b8d      	ldr	r3, [pc, #564]	; (8007450 <tcp_input+0x28c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	899b      	ldrh	r3, [r3, #12]
 800721e:	b29b      	uxth	r3, r3
 8007220:	4618      	mov	r0, r3
 8007222:	f7fc fe73 	bl	8003f0c <lwip_htons>
 8007226:	4603      	mov	r3, r0
 8007228:	0b1b      	lsrs	r3, r3, #12
 800722a:	b29b      	uxth	r3, r3
 800722c:	b2db      	uxtb	r3, r3
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007232:	7cbb      	ldrb	r3, [r7, #18]
 8007234:	2b13      	cmp	r3, #19
 8007236:	f240 83a4 	bls.w	8007982 <tcp_input+0x7be>
 800723a:	7cbb      	ldrb	r3, [r7, #18]
 800723c:	b29a      	uxth	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	891b      	ldrh	r3, [r3, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	f200 839d 	bhi.w	8007982 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007248:	7cbb      	ldrb	r3, [r7, #18]
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b14      	subs	r3, #20
 800724e:	b29a      	uxth	r2, r3
 8007250:	4b81      	ldr	r3, [pc, #516]	; (8007458 <tcp_input+0x294>)
 8007252:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007254:	4b81      	ldr	r3, [pc, #516]	; (800745c <tcp_input+0x298>)
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	895a      	ldrh	r2, [r3, #10]
 800725e:	7cbb      	ldrb	r3, [r7, #18]
 8007260:	b29b      	uxth	r3, r3
 8007262:	429a      	cmp	r2, r3
 8007264:	d309      	bcc.n	800727a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007266:	4b7c      	ldr	r3, [pc, #496]	; (8007458 <tcp_input+0x294>)
 8007268:	881a      	ldrh	r2, [r3, #0]
 800726a:	4b7d      	ldr	r3, [pc, #500]	; (8007460 <tcp_input+0x29c>)
 800726c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800726e:	7cbb      	ldrb	r3, [r7, #18]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fe f8e8 	bl	8005448 <pbuf_remove_header>
 8007278:	e04e      	b.n	8007318 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d105      	bne.n	800728e <tcp_input+0xca>
 8007282:	4b70      	ldr	r3, [pc, #448]	; (8007444 <tcp_input+0x280>)
 8007284:	22c2      	movs	r2, #194	; 0xc2
 8007286:	4977      	ldr	r1, [pc, #476]	; (8007464 <tcp_input+0x2a0>)
 8007288:	4870      	ldr	r0, [pc, #448]	; (800744c <tcp_input+0x288>)
 800728a:	f008 fd1b 	bl	800fcc4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800728e:	2114      	movs	r1, #20
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fe f8d9 	bl	8005448 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	895a      	ldrh	r2, [r3, #10]
 800729a:	4b71      	ldr	r3, [pc, #452]	; (8007460 <tcp_input+0x29c>)
 800729c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800729e:	4b6e      	ldr	r3, [pc, #440]	; (8007458 <tcp_input+0x294>)
 80072a0:	881a      	ldrh	r2, [r3, #0]
 80072a2:	4b6f      	ldr	r3, [pc, #444]	; (8007460 <tcp_input+0x29c>)
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80072aa:	4b6d      	ldr	r3, [pc, #436]	; (8007460 <tcp_input+0x29c>)
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fe f8c9 	bl	8005448 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	895b      	ldrh	r3, [r3, #10]
 80072bc:	8a3a      	ldrh	r2, [r7, #16]
 80072be:	429a      	cmp	r2, r3
 80072c0:	f200 8361 	bhi.w	8007986 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	4a64      	ldr	r2, [pc, #400]	; (800745c <tcp_input+0x298>)
 80072cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	8a3a      	ldrh	r2, [r7, #16]
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe f8b6 	bl	8005448 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	891a      	ldrh	r2, [r3, #8]
 80072e0:	8a3b      	ldrh	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	895b      	ldrh	r3, [r3, #10]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <tcp_input+0x13a>
 80072f2:	4b54      	ldr	r3, [pc, #336]	; (8007444 <tcp_input+0x280>)
 80072f4:	22df      	movs	r2, #223	; 0xdf
 80072f6:	495c      	ldr	r1, [pc, #368]	; (8007468 <tcp_input+0x2a4>)
 80072f8:	4854      	ldr	r0, [pc, #336]	; (800744c <tcp_input+0x288>)
 80072fa:	f008 fce3 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	891a      	ldrh	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	891b      	ldrh	r3, [r3, #8]
 8007308:	429a      	cmp	r2, r3
 800730a:	d005      	beq.n	8007318 <tcp_input+0x154>
 800730c:	4b4d      	ldr	r3, [pc, #308]	; (8007444 <tcp_input+0x280>)
 800730e:	22e0      	movs	r2, #224	; 0xe0
 8007310:	4956      	ldr	r1, [pc, #344]	; (800746c <tcp_input+0x2a8>)
 8007312:	484e      	ldr	r0, [pc, #312]	; (800744c <tcp_input+0x288>)
 8007314:	f008 fcd6 	bl	800fcc4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007318:	4b4d      	ldr	r3, [pc, #308]	; (8007450 <tcp_input+0x28c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29b      	uxth	r3, r3
 8007320:	4a4b      	ldr	r2, [pc, #300]	; (8007450 <tcp_input+0x28c>)
 8007322:	6814      	ldr	r4, [r2, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f7fc fdf1 	bl	8003f0c <lwip_htons>
 800732a:	4603      	mov	r3, r0
 800732c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800732e:	4b48      	ldr	r3, [pc, #288]	; (8007450 <tcp_input+0x28c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	885b      	ldrh	r3, [r3, #2]
 8007334:	b29b      	uxth	r3, r3
 8007336:	4a46      	ldr	r2, [pc, #280]	; (8007450 <tcp_input+0x28c>)
 8007338:	6814      	ldr	r4, [r2, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f7fc fde6 	bl	8003f0c <lwip_htons>
 8007340:	4603      	mov	r3, r0
 8007342:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007344:	4b42      	ldr	r3, [pc, #264]	; (8007450 <tcp_input+0x28c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	4a41      	ldr	r2, [pc, #260]	; (8007450 <tcp_input+0x28c>)
 800734c:	6814      	ldr	r4, [r2, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f7fc fdf1 	bl	8003f36 <lwip_htonl>
 8007354:	4603      	mov	r3, r0
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	6863      	ldr	r3, [r4, #4]
 800735a:	4a45      	ldr	r2, [pc, #276]	; (8007470 <tcp_input+0x2ac>)
 800735c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800735e:	4b3c      	ldr	r3, [pc, #240]	; (8007450 <tcp_input+0x28c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	4a3a      	ldr	r2, [pc, #232]	; (8007450 <tcp_input+0x28c>)
 8007366:	6814      	ldr	r4, [r2, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f7fc fde4 	bl	8003f36 <lwip_htonl>
 800736e:	4603      	mov	r3, r0
 8007370:	60a3      	str	r3, [r4, #8]
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	4a3f      	ldr	r2, [pc, #252]	; (8007474 <tcp_input+0x2b0>)
 8007376:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007378:	4b35      	ldr	r3, [pc, #212]	; (8007450 <tcp_input+0x28c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	89db      	ldrh	r3, [r3, #14]
 800737e:	b29b      	uxth	r3, r3
 8007380:	4a33      	ldr	r2, [pc, #204]	; (8007450 <tcp_input+0x28c>)
 8007382:	6814      	ldr	r4, [r2, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f7fc fdc1 	bl	8003f0c <lwip_htons>
 800738a:	4603      	mov	r3, r0
 800738c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800738e:	4b30      	ldr	r3, [pc, #192]	; (8007450 <tcp_input+0x28c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	899b      	ldrh	r3, [r3, #12]
 8007394:	b29b      	uxth	r3, r3
 8007396:	4618      	mov	r0, r3
 8007398:	f7fc fdb8 	bl	8003f0c <lwip_htons>
 800739c:	4603      	mov	r3, r0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	4b34      	ldr	r3, [pc, #208]	; (8007478 <tcp_input+0x2b4>)
 80073a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	891a      	ldrh	r2, [r3, #8]
 80073ae:	4b33      	ldr	r3, [pc, #204]	; (800747c <tcp_input+0x2b8>)
 80073b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80073b2:	4b31      	ldr	r3, [pc, #196]	; (8007478 <tcp_input+0x2b4>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00c      	beq.n	80073d8 <tcp_input+0x214>
    tcplen++;
 80073be:	4b2f      	ldr	r3, [pc, #188]	; (800747c <tcp_input+0x2b8>)
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	4b2d      	ldr	r3, [pc, #180]	; (800747c <tcp_input+0x2b8>)
 80073c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	891a      	ldrh	r2, [r3, #8]
 80073ce:	4b2b      	ldr	r3, [pc, #172]	; (800747c <tcp_input+0x2b8>)
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	f200 82d9 	bhi.w	800798a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073dc:	4b28      	ldr	r3, [pc, #160]	; (8007480 <tcp_input+0x2bc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	e09d      	b.n	8007520 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	7d1b      	ldrb	r3, [r3, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d105      	bne.n	80073f8 <tcp_input+0x234>
 80073ec:	4b15      	ldr	r3, [pc, #84]	; (8007444 <tcp_input+0x280>)
 80073ee:	22fb      	movs	r2, #251	; 0xfb
 80073f0:	4924      	ldr	r1, [pc, #144]	; (8007484 <tcp_input+0x2c0>)
 80073f2:	4816      	ldr	r0, [pc, #88]	; (800744c <tcp_input+0x288>)
 80073f4:	f008 fc66 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	7d1b      	ldrb	r3, [r3, #20]
 80073fc:	2b0a      	cmp	r3, #10
 80073fe:	d105      	bne.n	800740c <tcp_input+0x248>
 8007400:	4b10      	ldr	r3, [pc, #64]	; (8007444 <tcp_input+0x280>)
 8007402:	22fc      	movs	r2, #252	; 0xfc
 8007404:	4920      	ldr	r1, [pc, #128]	; (8007488 <tcp_input+0x2c4>)
 8007406:	4811      	ldr	r0, [pc, #68]	; (800744c <tcp_input+0x288>)
 8007408:	f008 fc5c 	bl	800fcc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	7d1b      	ldrb	r3, [r3, #20]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d105      	bne.n	8007420 <tcp_input+0x25c>
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <tcp_input+0x280>)
 8007416:	22fd      	movs	r2, #253	; 0xfd
 8007418:	491c      	ldr	r1, [pc, #112]	; (800748c <tcp_input+0x2c8>)
 800741a:	480c      	ldr	r0, [pc, #48]	; (800744c <tcp_input+0x288>)
 800741c:	f008 fc52 	bl	800fcc4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	7a1b      	ldrb	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d033      	beq.n	8007490 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	7a1a      	ldrb	r2, [r3, #8]
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <tcp_input+0x290>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007434:	3301      	adds	r3, #1
 8007436:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007438:	429a      	cmp	r2, r3
 800743a:	d029      	beq.n	8007490 <tcp_input+0x2cc>
      prev = pcb;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	61bb      	str	r3, [r7, #24]
      continue;
 8007440:	e06b      	b.n	800751a <tcp_input+0x356>
 8007442:	bf00      	nop
 8007444:	08011f44 	.word	0x08011f44
 8007448:	08011f78 	.word	0x08011f78
 800744c:	08011f90 	.word	0x08011f90
 8007450:	200000e8 	.word	0x200000e8
 8007454:	200033e8 	.word	0x200033e8
 8007458:	200000ec 	.word	0x200000ec
 800745c:	200000f0 	.word	0x200000f0
 8007460:	200000ee 	.word	0x200000ee
 8007464:	08011fb8 	.word	0x08011fb8
 8007468:	08011fc8 	.word	0x08011fc8
 800746c:	08011fd4 	.word	0x08011fd4
 8007470:	200000f8 	.word	0x200000f8
 8007474:	200000fc 	.word	0x200000fc
 8007478:	20000104 	.word	0x20000104
 800747c:	20000102 	.word	0x20000102
 8007480:	2000694c 	.word	0x2000694c
 8007484:	08011ff4 	.word	0x08011ff4
 8007488:	0801201c 	.word	0x0801201c
 800748c:	08012048 	.word	0x08012048
    }

    if (pcb->remote_port == tcphdr->src &&
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	8b1a      	ldrh	r2, [r3, #24]
 8007494:	4b94      	ldr	r3, [pc, #592]	; (80076e8 <tcp_input+0x524>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	429a      	cmp	r2, r3
 800749e:	d13a      	bne.n	8007516 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	8ada      	ldrh	r2, [r3, #22]
 80074a4:	4b90      	ldr	r3, [pc, #576]	; (80076e8 <tcp_input+0x524>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d132      	bne.n	8007516 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	4b8d      	ldr	r3, [pc, #564]	; (80076ec <tcp_input+0x528>)
 80074b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d12c      	bne.n	8007516 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4b8a      	ldr	r3, [pc, #552]	; (80076ec <tcp_input+0x528>)
 80074c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d126      	bne.n	8007516 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	69fa      	ldr	r2, [r7, #28]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d106      	bne.n	80074e0 <tcp_input+0x31c>
 80074d2:	4b87      	ldr	r3, [pc, #540]	; (80076f0 <tcp_input+0x52c>)
 80074d4:	f240 120d 	movw	r2, #269	; 0x10d
 80074d8:	4986      	ldr	r1, [pc, #536]	; (80076f4 <tcp_input+0x530>)
 80074da:	4887      	ldr	r0, [pc, #540]	; (80076f8 <tcp_input+0x534>)
 80074dc:	f008 fbf2 	bl	800fcc4 <iprintf>
      if (prev != NULL) {
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <tcp_input+0x338>
        prev->next = pcb->next;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80074ee:	4b83      	ldr	r3, [pc, #524]	; (80076fc <tcp_input+0x538>)
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80074f6:	4a81      	ldr	r2, [pc, #516]	; (80076fc <tcp_input+0x538>)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	429a      	cmp	r2, r3
 8007504:	d111      	bne.n	800752a <tcp_input+0x366>
 8007506:	4b7a      	ldr	r3, [pc, #488]	; (80076f0 <tcp_input+0x52c>)
 8007508:	f240 1215 	movw	r2, #277	; 0x115
 800750c:	497c      	ldr	r1, [pc, #496]	; (8007700 <tcp_input+0x53c>)
 800750e:	487a      	ldr	r0, [pc, #488]	; (80076f8 <tcp_input+0x534>)
 8007510:	f008 fbd8 	bl	800fcc4 <iprintf>
      break;
 8007514:	e009      	b.n	800752a <tcp_input+0x366>
    }
    prev = pcb;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	61fb      	str	r3, [r7, #28]
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f47f af5e 	bne.w	80073e4 <tcp_input+0x220>
 8007528:	e000      	b.n	800752c <tcp_input+0x368>
      break;
 800752a:	bf00      	nop
  }

  if (pcb == NULL) {
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 8095 	bne.w	800765e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007534:	4b73      	ldr	r3, [pc, #460]	; (8007704 <tcp_input+0x540>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	e03f      	b.n	80075bc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	7d1b      	ldrb	r3, [r3, #20]
 8007540:	2b0a      	cmp	r3, #10
 8007542:	d006      	beq.n	8007552 <tcp_input+0x38e>
 8007544:	4b6a      	ldr	r3, [pc, #424]	; (80076f0 <tcp_input+0x52c>)
 8007546:	f240 121f 	movw	r2, #287	; 0x11f
 800754a:	496f      	ldr	r1, [pc, #444]	; (8007708 <tcp_input+0x544>)
 800754c:	486a      	ldr	r0, [pc, #424]	; (80076f8 <tcp_input+0x534>)
 800754e:	f008 fbb9 	bl	800fcc4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	7a1b      	ldrb	r3, [r3, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	7a1a      	ldrb	r2, [r3, #8]
 800755e:	4b63      	ldr	r3, [pc, #396]	; (80076ec <tcp_input+0x528>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007566:	3301      	adds	r3, #1
 8007568:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800756a:	429a      	cmp	r2, r3
 800756c:	d122      	bne.n	80075b4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	8b1a      	ldrh	r2, [r3, #24]
 8007572:	4b5d      	ldr	r3, [pc, #372]	; (80076e8 <tcp_input+0x524>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	429a      	cmp	r2, r3
 800757c:	d11b      	bne.n	80075b6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	8ada      	ldrh	r2, [r3, #22]
 8007582:	4b59      	ldr	r3, [pc, #356]	; (80076e8 <tcp_input+0x524>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	885b      	ldrh	r3, [r3, #2]
 8007588:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800758a:	429a      	cmp	r2, r3
 800758c:	d113      	bne.n	80075b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	4b56      	ldr	r3, [pc, #344]	; (80076ec <tcp_input+0x528>)
 8007594:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007596:	429a      	cmp	r2, r3
 8007598:	d10d      	bne.n	80075b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	4b53      	ldr	r3, [pc, #332]	; (80076ec <tcp_input+0x528>)
 80075a0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d107      	bne.n	80075b6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80075a6:	69f8      	ldr	r0, [r7, #28]
 80075a8:	f000 fb54 	bl	8007c54 <tcp_timewait_input>
        }
        pbuf_free(p);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f7fd ffd1 	bl	8005554 <pbuf_free>
        return;
 80075b2:	e1f0      	b.n	8007996 <tcp_input+0x7d2>
        continue;
 80075b4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1bc      	bne.n	800753c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80075c6:	4b51      	ldr	r3, [pc, #324]	; (800770c <tcp_input+0x548>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e02a      	b.n	8007624 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	7a1b      	ldrb	r3, [r3, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00c      	beq.n	80075f0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	7a1a      	ldrb	r2, [r3, #8]
 80075da:	4b44      	ldr	r3, [pc, #272]	; (80076ec <tcp_input+0x528>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075e2:	3301      	adds	r3, #1
 80075e4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d002      	beq.n	80075f0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	61bb      	str	r3, [r7, #24]
        continue;
 80075ee:	e016      	b.n	800761e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	8ada      	ldrh	r2, [r3, #22]
 80075f4:	4b3c      	ldr	r3, [pc, #240]	; (80076e8 <tcp_input+0x524>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	885b      	ldrh	r3, [r3, #2]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d10c      	bne.n	800761a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	4b39      	ldr	r3, [pc, #228]	; (80076ec <tcp_input+0x528>)
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	429a      	cmp	r2, r3
 800760a:	d00f      	beq.n	800762c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00d      	beq.n	800762e <tcp_input+0x46a>
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1d1      	bne.n	80075ce <tcp_input+0x40a>
 800762a:	e000      	b.n	800762e <tcp_input+0x46a>
            break;
 800762c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d014      	beq.n	800765e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007642:	4b32      	ldr	r3, [pc, #200]	; (800770c <tcp_input+0x548>)
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800764a:	4a30      	ldr	r2, [pc, #192]	; (800770c <tcp_input+0x548>)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007650:	6978      	ldr	r0, [r7, #20]
 8007652:	f000 fa01 	bl	8007a58 <tcp_listen_input>
      }
      pbuf_free(p);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fd ff7c 	bl	8005554 <pbuf_free>
      return;
 800765c:	e19b      	b.n	8007996 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8160 	beq.w	8007926 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007666:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <tcp_input+0x54c>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	891a      	ldrh	r2, [r3, #8]
 8007670:	4b27      	ldr	r3, [pc, #156]	; (8007710 <tcp_input+0x54c>)
 8007672:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007674:	4a26      	ldr	r2, [pc, #152]	; (8007710 <tcp_input+0x54c>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800767a:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <tcp_input+0x524>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a24      	ldr	r2, [pc, #144]	; (8007710 <tcp_input+0x54c>)
 8007680:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007682:	4b24      	ldr	r3, [pc, #144]	; (8007714 <tcp_input+0x550>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007688:	4b23      	ldr	r3, [pc, #140]	; (8007718 <tcp_input+0x554>)
 800768a:	2200      	movs	r2, #0
 800768c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800768e:	4b23      	ldr	r3, [pc, #140]	; (800771c <tcp_input+0x558>)
 8007690:	2200      	movs	r2, #0
 8007692:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007694:	4b22      	ldr	r3, [pc, #136]	; (8007720 <tcp_input+0x55c>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7b5b      	ldrb	r3, [r3, #13]
 80076a4:	f043 0301 	orr.w	r3, r3, #1
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d038      	beq.n	8007728 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80076b6:	69f8      	ldr	r0, [r7, #28]
 80076b8:	f7ff f93e 	bl	8006938 <tcp_process_refused_data>
 80076bc:	4603      	mov	r3, r0
 80076be:	f113 0f0d 	cmn.w	r3, #13
 80076c2:	d007      	beq.n	80076d4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d02d      	beq.n	8007728 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80076cc:	4b15      	ldr	r3, [pc, #84]	; (8007724 <tcp_input+0x560>)
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d029      	beq.n	8007728 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f040 8104 	bne.w	80078e6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80076de:	69f8      	ldr	r0, [r7, #28]
 80076e0:	f003 f9be 	bl	800aa60 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80076e4:	e0ff      	b.n	80078e6 <tcp_input+0x722>
 80076e6:	bf00      	nop
 80076e8:	200000e8 	.word	0x200000e8
 80076ec:	200033e8 	.word	0x200033e8
 80076f0:	08011f44 	.word	0x08011f44
 80076f4:	08012070 	.word	0x08012070
 80076f8:	08011f90 	.word	0x08011f90
 80076fc:	2000694c 	.word	0x2000694c
 8007700:	0801209c 	.word	0x0801209c
 8007704:	2000695c 	.word	0x2000695c
 8007708:	080120c8 	.word	0x080120c8
 800770c:	20006954 	.word	0x20006954
 8007710:	200000d8 	.word	0x200000d8
 8007714:	20000108 	.word	0x20000108
 8007718:	20000105 	.word	0x20000105
 800771c:	20000100 	.word	0x20000100
 8007720:	20000104 	.word	0x20000104
 8007724:	20000102 	.word	0x20000102
      }
    }
    tcp_input_pcb = pcb;
 8007728:	4a9c      	ldr	r2, [pc, #624]	; (800799c <tcp_input+0x7d8>)
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800772e:	69f8      	ldr	r0, [r7, #28]
 8007730:	f000 fb0a 	bl	8007d48 <tcp_process>
 8007734:	4603      	mov	r3, r0
 8007736:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007738:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800773c:	f113 0f0d 	cmn.w	r3, #13
 8007740:	f000 80d3 	beq.w	80078ea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007744:	4b96      	ldr	r3, [pc, #600]	; (80079a0 <tcp_input+0x7dc>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b00      	cmp	r3, #0
 800774e:	d015      	beq.n	800777c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <tcp_input+0x5a8>
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	6912      	ldr	r2, [r2, #16]
 8007764:	f06f 010d 	mvn.w	r1, #13
 8007768:	4610      	mov	r0, r2
 800776a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800776c:	69f9      	ldr	r1, [r7, #28]
 800776e:	488d      	ldr	r0, [pc, #564]	; (80079a4 <tcp_input+0x7e0>)
 8007770:	f7ff fbb0 	bl	8006ed4 <tcp_pcb_remove>
        tcp_free(pcb);
 8007774:	69f8      	ldr	r0, [r7, #28]
 8007776:	f7fe f99d 	bl	8005ab4 <tcp_free>
 800777a:	e0c1      	b.n	8007900 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007780:	4b89      	ldr	r3, [pc, #548]	; (80079a8 <tcp_input+0x7e4>)
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01d      	beq.n	80077c4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007788:	4b87      	ldr	r3, [pc, #540]	; (80079a8 <tcp_input+0x7e4>)
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00a      	beq.n	80077ae <tcp_input+0x5ea>
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	6910      	ldr	r0, [r2, #16]
 80077a2:	89fa      	ldrh	r2, [r7, #14]
 80077a4:	69f9      	ldr	r1, [r7, #28]
 80077a6:	4798      	blx	r3
 80077a8:	4603      	mov	r3, r0
 80077aa:	74fb      	strb	r3, [r7, #19]
 80077ac:	e001      	b.n	80077b2 <tcp_input+0x5ee>
 80077ae:	2300      	movs	r3, #0
 80077b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80077b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077b6:	f113 0f0d 	cmn.w	r3, #13
 80077ba:	f000 8098 	beq.w	80078ee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80077be:	4b7a      	ldr	r3, [pc, #488]	; (80079a8 <tcp_input+0x7e4>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80077c4:	69f8      	ldr	r0, [r7, #28]
 80077c6:	f000 f907 	bl	80079d8 <tcp_input_delayed_close>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f040 8090 	bne.w	80078f2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80077d2:	4b76      	ldr	r3, [pc, #472]	; (80079ac <tcp_input+0x7e8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d041      	beq.n	800785e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d006      	beq.n	80077f0 <tcp_input+0x62c>
 80077e2:	4b73      	ldr	r3, [pc, #460]	; (80079b0 <tcp_input+0x7ec>)
 80077e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80077e8:	4972      	ldr	r1, [pc, #456]	; (80079b4 <tcp_input+0x7f0>)
 80077ea:	4873      	ldr	r0, [pc, #460]	; (80079b8 <tcp_input+0x7f4>)
 80077ec:	f008 fa6a 	bl	800fcc4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	8b5b      	ldrh	r3, [r3, #26]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80077fc:	4b6b      	ldr	r3, [pc, #428]	; (80079ac <tcp_input+0x7e8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4618      	mov	r0, r3
 8007802:	f7fd fea7 	bl	8005554 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007806:	69f8      	ldr	r0, [r7, #28]
 8007808:	f7fe fc3c 	bl	8006084 <tcp_abort>
            goto aborted;
 800780c:	e078      	b.n	8007900 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00c      	beq.n	8007832 <tcp_input+0x66e>
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	6918      	ldr	r0, [r3, #16]
 8007822:	4b62      	ldr	r3, [pc, #392]	; (80079ac <tcp_input+0x7e8>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	2300      	movs	r3, #0
 8007828:	69f9      	ldr	r1, [r7, #28]
 800782a:	47a0      	blx	r4
 800782c:	4603      	mov	r3, r0
 800782e:	74fb      	strb	r3, [r7, #19]
 8007830:	e008      	b.n	8007844 <tcp_input+0x680>
 8007832:	4b5e      	ldr	r3, [pc, #376]	; (80079ac <tcp_input+0x7e8>)
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	2300      	movs	r3, #0
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	2000      	movs	r0, #0
 800783c:	f7ff f952 	bl	8006ae4 <tcp_recv_null>
 8007840:	4603      	mov	r3, r0
 8007842:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007844:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007848:	f113 0f0d 	cmn.w	r3, #13
 800784c:	d053      	beq.n	80078f6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800784e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007856:	4b55      	ldr	r3, [pc, #340]	; (80079ac <tcp_input+0x7e8>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800785e:	4b50      	ldr	r3, [pc, #320]	; (80079a0 <tcp_input+0x7dc>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d030      	beq.n	80078cc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800786e:	2b00      	cmp	r3, #0
 8007870:	d009      	beq.n	8007886 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007876:	7b5a      	ldrb	r2, [r3, #13]
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800787c:	f042 0220 	orr.w	r2, r2, #32
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	735a      	strb	r2, [r3, #13]
 8007884:	e022      	b.n	80078cc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800788e:	d005      	beq.n	800789c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007894:	3301      	adds	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <tcp_input+0x6fa>
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	6918      	ldr	r0, [r3, #16]
 80078b0:	2300      	movs	r3, #0
 80078b2:	2200      	movs	r2, #0
 80078b4:	69f9      	ldr	r1, [r7, #28]
 80078b6:	47a0      	blx	r4
 80078b8:	4603      	mov	r3, r0
 80078ba:	74fb      	strb	r3, [r7, #19]
 80078bc:	e001      	b.n	80078c2 <tcp_input+0x6fe>
 80078be:	2300      	movs	r3, #0
 80078c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80078c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078c6:	f113 0f0d 	cmn.w	r3, #13
 80078ca:	d016      	beq.n	80078fa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80078cc:	4b33      	ldr	r3, [pc, #204]	; (800799c <tcp_input+0x7d8>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80078d2:	69f8      	ldr	r0, [r7, #28]
 80078d4:	f000 f880 	bl	80079d8 <tcp_input_delayed_close>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10f      	bne.n	80078fe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80078de:	69f8      	ldr	r0, [r7, #28]
 80078e0:	f002 fab8 	bl	8009e54 <tcp_output>
 80078e4:	e00c      	b.n	8007900 <tcp_input+0x73c>
        goto aborted;
 80078e6:	bf00      	nop
 80078e8:	e00a      	b.n	8007900 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80078ea:	bf00      	nop
 80078ec:	e008      	b.n	8007900 <tcp_input+0x73c>
              goto aborted;
 80078ee:	bf00      	nop
 80078f0:	e006      	b.n	8007900 <tcp_input+0x73c>
          goto aborted;
 80078f2:	bf00      	nop
 80078f4:	e004      	b.n	8007900 <tcp_input+0x73c>
            goto aborted;
 80078f6:	bf00      	nop
 80078f8:	e002      	b.n	8007900 <tcp_input+0x73c>
              goto aborted;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <tcp_input+0x73c>
          goto aborted;
 80078fe:	bf00      	nop
    tcp_input_pcb = NULL;
 8007900:	4b26      	ldr	r3, [pc, #152]	; (800799c <tcp_input+0x7d8>)
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007906:	4b29      	ldr	r3, [pc, #164]	; (80079ac <tcp_input+0x7e8>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800790c:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <tcp_input+0x7f8>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d03f      	beq.n	8007994 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007914:	4b29      	ldr	r3, [pc, #164]	; (80079bc <tcp_input+0x7f8>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	4618      	mov	r0, r3
 800791a:	f7fd fe1b 	bl	8005554 <pbuf_free>
      inseg.p = NULL;
 800791e:	4b27      	ldr	r3, [pc, #156]	; (80079bc <tcp_input+0x7f8>)
 8007920:	2200      	movs	r2, #0
 8007922:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007924:	e036      	b.n	8007994 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007926:	4b26      	ldr	r3, [pc, #152]	; (80079c0 <tcp_input+0x7fc>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	899b      	ldrh	r3, [r3, #12]
 800792c:	b29b      	uxth	r3, r3
 800792e:	4618      	mov	r0, r3
 8007930:	f7fc faec 	bl	8003f0c <lwip_htons>
 8007934:	4603      	mov	r3, r0
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d118      	bne.n	8007972 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007940:	4b20      	ldr	r3, [pc, #128]	; (80079c4 <tcp_input+0x800>)
 8007942:	6819      	ldr	r1, [r3, #0]
 8007944:	4b20      	ldr	r3, [pc, #128]	; (80079c8 <tcp_input+0x804>)
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	461a      	mov	r2, r3
 800794a:	4b20      	ldr	r3, [pc, #128]	; (80079cc <tcp_input+0x808>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <tcp_input+0x7fc>)
 8007952:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007958:	4a19      	ldr	r2, [pc, #100]	; (80079c0 <tcp_input+0x7fc>)
 800795a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800795c:	8812      	ldrh	r2, [r2, #0]
 800795e:	b292      	uxth	r2, r2
 8007960:	9202      	str	r2, [sp, #8]
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <tcp_input+0x80c>)
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <tcp_input+0x810>)
 800796a:	4602      	mov	r2, r0
 800796c:	2000      	movs	r0, #0
 800796e:	f003 f825 	bl	800a9bc <tcp_rst>
    pbuf_free(p);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fd fdee 	bl	8005554 <pbuf_free>
  return;
 8007978:	e00c      	b.n	8007994 <tcp_input+0x7d0>
    goto dropped;
 800797a:	bf00      	nop
 800797c:	e006      	b.n	800798c <tcp_input+0x7c8>
    goto dropped;
 800797e:	bf00      	nop
 8007980:	e004      	b.n	800798c <tcp_input+0x7c8>
    goto dropped;
 8007982:	bf00      	nop
 8007984:	e002      	b.n	800798c <tcp_input+0x7c8>
      goto dropped;
 8007986:	bf00      	nop
 8007988:	e000      	b.n	800798c <tcp_input+0x7c8>
      goto dropped;
 800798a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7fd fde1 	bl	8005554 <pbuf_free>
 8007992:	e000      	b.n	8007996 <tcp_input+0x7d2>
  return;
 8007994:	bf00      	nop
}
 8007996:	3724      	adds	r7, #36	; 0x24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd90      	pop	{r4, r7, pc}
 800799c:	20006960 	.word	0x20006960
 80079a0:	20000105 	.word	0x20000105
 80079a4:	2000694c 	.word	0x2000694c
 80079a8:	20000100 	.word	0x20000100
 80079ac:	20000108 	.word	0x20000108
 80079b0:	08011f44 	.word	0x08011f44
 80079b4:	080120f8 	.word	0x080120f8
 80079b8:	08011f90 	.word	0x08011f90
 80079bc:	200000d8 	.word	0x200000d8
 80079c0:	200000e8 	.word	0x200000e8
 80079c4:	200000fc 	.word	0x200000fc
 80079c8:	20000102 	.word	0x20000102
 80079cc:	200000f8 	.word	0x200000f8
 80079d0:	200033f8 	.word	0x200033f8
 80079d4:	200033fc 	.word	0x200033fc

080079d8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d106      	bne.n	80079f4 <tcp_input_delayed_close+0x1c>
 80079e6:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <tcp_input_delayed_close+0x6c>)
 80079e8:	f240 225a 	movw	r2, #602	; 0x25a
 80079ec:	4916      	ldr	r1, [pc, #88]	; (8007a48 <tcp_input_delayed_close+0x70>)
 80079ee:	4817      	ldr	r0, [pc, #92]	; (8007a4c <tcp_input_delayed_close+0x74>)
 80079f0:	f008 f968 	bl	800fcc4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80079f4:	4b16      	ldr	r3, [pc, #88]	; (8007a50 <tcp_input_delayed_close+0x78>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01c      	beq.n	8007a3a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8b5b      	ldrh	r3, [r3, #26]
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10d      	bne.n	8007a28 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d008      	beq.n	8007a28 <tcp_input_delayed_close+0x50>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6912      	ldr	r2, [r2, #16]
 8007a20:	f06f 010e 	mvn.w	r1, #14
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	480a      	ldr	r0, [pc, #40]	; (8007a54 <tcp_input_delayed_close+0x7c>)
 8007a2c:	f7ff fa52 	bl	8006ed4 <tcp_pcb_remove>
    tcp_free(pcb);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7fe f83f 	bl	8005ab4 <tcp_free>
    return 1;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	08011f44 	.word	0x08011f44
 8007a48:	08012114 	.word	0x08012114
 8007a4c:	08011f90 	.word	0x08011f90
 8007a50:	20000105 	.word	0x20000105
 8007a54:	2000694c 	.word	0x2000694c

08007a58 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007a58:	b590      	push	{r4, r7, lr}
 8007a5a:	b08b      	sub	sp, #44	; 0x2c
 8007a5c:	af04      	add	r7, sp, #16
 8007a5e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007a60:	4b6f      	ldr	r3, [pc, #444]	; (8007c20 <tcp_listen_input+0x1c8>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 80d2 	bne.w	8007c12 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <tcp_listen_input+0x2a>
 8007a74:	4b6b      	ldr	r3, [pc, #428]	; (8007c24 <tcp_listen_input+0x1cc>)
 8007a76:	f240 2281 	movw	r2, #641	; 0x281
 8007a7a:	496b      	ldr	r1, [pc, #428]	; (8007c28 <tcp_listen_input+0x1d0>)
 8007a7c:	486b      	ldr	r0, [pc, #428]	; (8007c2c <tcp_listen_input+0x1d4>)
 8007a7e:	f008 f921 	bl	800fcc4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007a82:	4b67      	ldr	r3, [pc, #412]	; (8007c20 <tcp_listen_input+0x1c8>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d019      	beq.n	8007ac2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a8e:	4b68      	ldr	r3, [pc, #416]	; (8007c30 <tcp_listen_input+0x1d8>)
 8007a90:	6819      	ldr	r1, [r3, #0]
 8007a92:	4b68      	ldr	r3, [pc, #416]	; (8007c34 <tcp_listen_input+0x1dc>)
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	4b67      	ldr	r3, [pc, #412]	; (8007c38 <tcp_listen_input+0x1e0>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a9e:	4b67      	ldr	r3, [pc, #412]	; (8007c3c <tcp_listen_input+0x1e4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007aa2:	885b      	ldrh	r3, [r3, #2]
 8007aa4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aa6:	4a65      	ldr	r2, [pc, #404]	; (8007c3c <tcp_listen_input+0x1e4>)
 8007aa8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007aaa:	8812      	ldrh	r2, [r2, #0]
 8007aac:	b292      	uxth	r2, r2
 8007aae:	9202      	str	r2, [sp, #8]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	4b63      	ldr	r3, [pc, #396]	; (8007c40 <tcp_listen_input+0x1e8>)
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4b63      	ldr	r3, [pc, #396]	; (8007c44 <tcp_listen_input+0x1ec>)
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f002 ff7e 	bl	800a9bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007ac0:	e0a9      	b.n	8007c16 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007ac2:	4b57      	ldr	r3, [pc, #348]	; (8007c20 <tcp_listen_input+0x1c8>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 80a3 	beq.w	8007c16 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7d5b      	ldrb	r3, [r3, #21]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff f929 	bl	8006d2c <tcp_alloc>
 8007ada:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d111      	bne.n	8007b06 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <tcp_listen_input+0xa8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6910      	ldr	r0, [r2, #16]
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295
 8007af6:	2100      	movs	r1, #0
 8007af8:	4798      	blx	r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	73bb      	strb	r3, [r7, #14]
      return;
 8007afe:	e08b      	b.n	8007c18 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007b00:	23f0      	movs	r3, #240	; 0xf0
 8007b02:	73bb      	strb	r3, [r7, #14]
      return;
 8007b04:	e088      	b.n	8007c18 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007b06:	4b50      	ldr	r3, [pc, #320]	; (8007c48 <tcp_listen_input+0x1f0>)
 8007b08:	695a      	ldr	r2, [r3, #20]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007b0e:	4b4e      	ldr	r3, [pc, #312]	; (8007c48 <tcp_listen_input+0x1f0>)
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	8ada      	ldrh	r2, [r3, #22]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007b1e:	4b47      	ldr	r3, [pc, #284]	; (8007c3c <tcp_listen_input+0x1e4>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007b30:	4b41      	ldr	r3, [pc, #260]	; (8007c38 <tcp_listen_input+0x1e0>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007b42:	6978      	ldr	r0, [r7, #20]
 8007b44:	f7ff fa5a 	bl	8006ffc <tcp_next_iss>
 8007b48:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007b62:	4b35      	ldr	r3, [pc, #212]	; (8007c38 <tcp_listen_input+0x1e0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	1e5a      	subs	r2, r3, #1
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7a5b      	ldrb	r3, [r3, #9]
 8007b7e:	f003 030c 	and.w	r3, r3, #12
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7a1a      	ldrb	r2, [r3, #8]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007b90:	4b2e      	ldr	r3, [pc, #184]	; (8007c4c <tcp_listen_input+0x1f4>)
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	60da      	str	r2, [r3, #12]
 8007b98:	4a2c      	ldr	r2, [pc, #176]	; (8007c4c <tcp_listen_input+0x1f4>)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	f003 f8cf 	bl	800ad40 <tcp_timer_needed>
 8007ba2:	4b2b      	ldr	r3, [pc, #172]	; (8007c50 <tcp_listen_input+0x1f8>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007ba8:	6978      	ldr	r0, [r7, #20]
 8007baa:	f001 fd8d 	bl	80096c8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007bae:	4b23      	ldr	r3, [pc, #140]	; (8007c3c <tcp_listen_input+0x1e4>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	89db      	ldrh	r3, [r3, #14]
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f006 fe2b 	bl	800e82c <ip4_route>
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fa32 	bl	8007048 <tcp_eff_send_mss_netif>
 8007be4:	4603      	mov	r3, r0
 8007be6:	461a      	mov	r2, r3
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007bec:	2112      	movs	r1, #18
 8007bee:	6978      	ldr	r0, [r7, #20]
 8007bf0:	f002 f842 	bl	8009c78 <tcp_enqueue_flags>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d004      	beq.n	8007c0a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007c00:	2100      	movs	r1, #0
 8007c02:	6978      	ldr	r0, [r7, #20]
 8007c04:	f7fe f980 	bl	8005f08 <tcp_abandon>
      return;
 8007c08:	e006      	b.n	8007c18 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007c0a:	6978      	ldr	r0, [r7, #20]
 8007c0c:	f002 f922 	bl	8009e54 <tcp_output>
  return;
 8007c10:	e001      	b.n	8007c16 <tcp_listen_input+0x1be>
    return;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <tcp_listen_input+0x1c0>
  return;
 8007c16:	bf00      	nop
}
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd90      	pop	{r4, r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000104 	.word	0x20000104
 8007c24:	08011f44 	.word	0x08011f44
 8007c28:	0801213c 	.word	0x0801213c
 8007c2c:	08011f90 	.word	0x08011f90
 8007c30:	200000fc 	.word	0x200000fc
 8007c34:	20000102 	.word	0x20000102
 8007c38:	200000f8 	.word	0x200000f8
 8007c3c:	200000e8 	.word	0x200000e8
 8007c40:	200033f8 	.word	0x200033f8
 8007c44:	200033fc 	.word	0x200033fc
 8007c48:	200033e8 	.word	0x200033e8
 8007c4c:	2000694c 	.word	0x2000694c
 8007c50:	20006948 	.word	0x20006948

08007c54 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af04      	add	r7, sp, #16
 8007c5a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007c5c:	4b2f      	ldr	r3, [pc, #188]	; (8007d1c <tcp_timewait_input+0xc8>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d153      	bne.n	8007d10 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d106      	bne.n	8007c7c <tcp_timewait_input+0x28>
 8007c6e:	4b2c      	ldr	r3, [pc, #176]	; (8007d20 <tcp_timewait_input+0xcc>)
 8007c70:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007c74:	492b      	ldr	r1, [pc, #172]	; (8007d24 <tcp_timewait_input+0xd0>)
 8007c76:	482c      	ldr	r0, [pc, #176]	; (8007d28 <tcp_timewait_input+0xd4>)
 8007c78:	f008 f824 	bl	800fcc4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007c7c:	4b27      	ldr	r3, [pc, #156]	; (8007d1c <tcp_timewait_input+0xc8>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d02a      	beq.n	8007cde <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007c88:	4b28      	ldr	r3, [pc, #160]	; (8007d2c <tcp_timewait_input+0xd8>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	db2d      	blt.n	8007cf2 <tcp_timewait_input+0x9e>
 8007c96:	4b25      	ldr	r3, [pc, #148]	; (8007d2c <tcp_timewait_input+0xd8>)
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007ca2:	440b      	add	r3, r1
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	dc23      	bgt.n	8007cf2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007caa:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <tcp_timewait_input+0xdc>)
 8007cac:	6819      	ldr	r1, [r3, #0]
 8007cae:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <tcp_timewait_input+0xe0>)
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4b1d      	ldr	r3, [pc, #116]	; (8007d2c <tcp_timewait_input+0xd8>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cba:	4b1f      	ldr	r3, [pc, #124]	; (8007d38 <tcp_timewait_input+0xe4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cbe:	885b      	ldrh	r3, [r3, #2]
 8007cc0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cc2:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <tcp_timewait_input+0xe4>)
 8007cc4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cc6:	8812      	ldrh	r2, [r2, #0]
 8007cc8:	b292      	uxth	r2, r2
 8007cca:	9202      	str	r2, [sp, #8]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	4b1b      	ldr	r3, [pc, #108]	; (8007d3c <tcp_timewait_input+0xe8>)
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4b1b      	ldr	r3, [pc, #108]	; (8007d40 <tcp_timewait_input+0xec>)
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f002 fe70 	bl	800a9bc <tcp_rst>
      return;
 8007cdc:	e01b      	b.n	8007d16 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007cde:	4b0f      	ldr	r3, [pc, #60]	; (8007d1c <tcp_timewait_input+0xc8>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007cea:	4b16      	ldr	r3, [pc, #88]	; (8007d44 <tcp_timewait_input+0xf0>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007cf2:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <tcp_timewait_input+0xe0>)
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00c      	beq.n	8007d14 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	8b5b      	ldrh	r3, [r3, #26]
 8007cfe:	f043 0302 	orr.w	r3, r3, #2
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f002 f8a3 	bl	8009e54 <tcp_output>
  }
  return;
 8007d0e:	e001      	b.n	8007d14 <tcp_timewait_input+0xc0>
    return;
 8007d10:	bf00      	nop
 8007d12:	e000      	b.n	8007d16 <tcp_timewait_input+0xc2>
  return;
 8007d14:	bf00      	nop
}
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000104 	.word	0x20000104
 8007d20:	08011f44 	.word	0x08011f44
 8007d24:	0801215c 	.word	0x0801215c
 8007d28:	08011f90 	.word	0x08011f90
 8007d2c:	200000f8 	.word	0x200000f8
 8007d30:	200000fc 	.word	0x200000fc
 8007d34:	20000102 	.word	0x20000102
 8007d38:	200000e8 	.word	0x200000e8
 8007d3c:	200033f8 	.word	0x200033f8
 8007d40:	200033fc 	.word	0x200033fc
 8007d44:	20006950 	.word	0x20006950

08007d48 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007d48:	b590      	push	{r4, r7, lr}
 8007d4a:	b08d      	sub	sp, #52	; 0x34
 8007d4c:	af04      	add	r7, sp, #16
 8007d4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <tcp_process+0x24>
 8007d5e:	4ba5      	ldr	r3, [pc, #660]	; (8007ff4 <tcp_process+0x2ac>)
 8007d60:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007d64:	49a4      	ldr	r1, [pc, #656]	; (8007ff8 <tcp_process+0x2b0>)
 8007d66:	48a5      	ldr	r0, [pc, #660]	; (8007ffc <tcp_process+0x2b4>)
 8007d68:	f007 ffac 	bl	800fcc4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007d6c:	4ba4      	ldr	r3, [pc, #656]	; (8008000 <tcp_process+0x2b8>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d04e      	beq.n	8007e16 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7d1b      	ldrb	r3, [r3, #20]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d108      	bne.n	8007d92 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d84:	4b9f      	ldr	r3, [pc, #636]	; (8008004 <tcp_process+0x2bc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d123      	bne.n	8007dd4 <tcp_process+0x8c>
        acceptable = 1;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	76fb      	strb	r3, [r7, #27]
 8007d90:	e020      	b.n	8007dd4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d96:	4b9c      	ldr	r3, [pc, #624]	; (8008008 <tcp_process+0x2c0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d102      	bne.n	8007da4 <tcp_process+0x5c>
        acceptable = 1;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	76fb      	strb	r3, [r7, #27]
 8007da2:	e017      	b.n	8007dd4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007da4:	4b98      	ldr	r3, [pc, #608]	; (8008008 <tcp_process+0x2c0>)
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	db10      	blt.n	8007dd4 <tcp_process+0x8c>
 8007db2:	4b95      	ldr	r3, [pc, #596]	; (8008008 <tcp_process+0x2c0>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007dbe:	440b      	add	r3, r1
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	dc06      	bgt.n	8007dd4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	8b5b      	ldrh	r3, [r3, #26]
 8007dca:	f043 0302 	orr.w	r3, r3, #2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007dd4:	7efb      	ldrb	r3, [r7, #27]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d01b      	beq.n	8007e12 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7d1b      	ldrb	r3, [r3, #20]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <tcp_process+0xa8>
 8007de2:	4b84      	ldr	r3, [pc, #528]	; (8007ff4 <tcp_process+0x2ac>)
 8007de4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007de8:	4988      	ldr	r1, [pc, #544]	; (800800c <tcp_process+0x2c4>)
 8007dea:	4884      	ldr	r0, [pc, #528]	; (8007ffc <tcp_process+0x2b4>)
 8007dec:	f007 ff6a 	bl	800fcc4 <iprintf>
      recv_flags |= TF_RESET;
 8007df0:	4b87      	ldr	r3, [pc, #540]	; (8008010 <tcp_process+0x2c8>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	f043 0308 	orr.w	r3, r3, #8
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	4b85      	ldr	r3, [pc, #532]	; (8008010 <tcp_process+0x2c8>)
 8007dfc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	8b5b      	ldrh	r3, [r3, #26]
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007e0c:	f06f 030d 	mvn.w	r3, #13
 8007e10:	e37a      	b.n	8008508 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e378      	b.n	8008508 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007e16:	4b7a      	ldr	r3, [pc, #488]	; (8008000 <tcp_process+0x2b8>)
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d010      	beq.n	8007e44 <tcp_process+0xfc>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7d1b      	ldrb	r3, [r3, #20]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d00c      	beq.n	8007e44 <tcp_process+0xfc>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7d1b      	ldrb	r3, [r3, #20]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d008      	beq.n	8007e44 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	8b5b      	ldrh	r3, [r3, #26]
 8007e36:	f043 0302 	orr.w	r3, r3, #2
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e361      	b.n	8008508 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8b5b      	ldrh	r3, [r3, #26]
 8007e48:	f003 0310 	and.w	r3, r3, #16
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007e50:	4b70      	ldr	r3, [pc, #448]	; (8008014 <tcp_process+0x2cc>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 fc2d 	bl	80096c8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	7d1b      	ldrb	r3, [r3, #20]
 8007e72:	3b02      	subs	r3, #2
 8007e74:	2b07      	cmp	r3, #7
 8007e76:	f200 8337 	bhi.w	80084e8 <tcp_process+0x7a0>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <tcp_process+0x138>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007ea1 	.word	0x08007ea1
 8007e84:	080080d1 	.word	0x080080d1
 8007e88:	08008249 	.word	0x08008249
 8007e8c:	08008273 	.word	0x08008273
 8007e90:	08008397 	.word	0x08008397
 8007e94:	08008249 	.word	0x08008249
 8007e98:	08008423 	.word	0x08008423
 8007e9c:	080084b3 	.word	0x080084b3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007ea0:	4b57      	ldr	r3, [pc, #348]	; (8008000 <tcp_process+0x2b8>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f003 0310 	and.w	r3, r3, #16
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80e4 	beq.w	8008076 <tcp_process+0x32e>
 8007eae:	4b54      	ldr	r3, [pc, #336]	; (8008000 <tcp_process+0x2b8>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 80dd 	beq.w	8008076 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	4b50      	ldr	r3, [pc, #320]	; (8008004 <tcp_process+0x2bc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	f040 80d5 	bne.w	8008076 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007ecc:	4b4e      	ldr	r3, [pc, #312]	; (8008008 <tcp_process+0x2c0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	1c5a      	adds	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007ede:	4b49      	ldr	r3, [pc, #292]	; (8008004 <tcp_process+0x2bc>)
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007ee6:	4b4c      	ldr	r3, [pc, #304]	; (8008018 <tcp_process+0x2d0>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	89db      	ldrh	r3, [r3, #14]
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007f00:	4b41      	ldr	r3, [pc, #260]	; (8008008 <tcp_process+0x2c0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	1e5a      	subs	r2, r3, #1
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f006 fc87 	bl	800e82c <ip4_route>
 8007f1e:	4601      	mov	r1, r0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	3304      	adds	r3, #4
 8007f24:	461a      	mov	r2, r3
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7ff f88e 	bl	8007048 <tcp_eff_send_mss_netif>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f38:	009a      	lsls	r2, r3, #2
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	f241 111c 	movw	r1, #4380	; 0x111c
 8007f44:	428b      	cmp	r3, r1
 8007f46:	bf38      	it	cc
 8007f48:	460b      	movcc	r3, r1
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d204      	bcs.n	8007f58 <tcp_process+0x210>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	e00d      	b.n	8007f74 <tcp_process+0x22c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d904      	bls.n	8007f70 <tcp_process+0x228>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	e001      	b.n	8007f74 <tcp_process+0x22c>
 8007f70:	f241 131c 	movw	r3, #4380	; 0x111c
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <tcp_process+0x24a>
 8007f84:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <tcp_process+0x2ac>)
 8007f86:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007f8a:	4924      	ldr	r1, [pc, #144]	; (800801c <tcp_process+0x2d4>)
 8007f8c:	481b      	ldr	r0, [pc, #108]	; (8007ffc <tcp_process+0x2b4>)
 8007f8e:	f007 fe99 	bl	800fcc4 <iprintf>
        --pcb->snd_queuelen;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d111      	bne.n	8007fd2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d106      	bne.n	8007fc8 <tcp_process+0x280>
 8007fba:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <tcp_process+0x2ac>)
 8007fbc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007fc0:	4917      	ldr	r1, [pc, #92]	; (8008020 <tcp_process+0x2d8>)
 8007fc2:	480e      	ldr	r0, [pc, #56]	; (8007ffc <tcp_process+0x2b4>)
 8007fc4:	f007 fe7e 	bl	800fcc4 <iprintf>
          pcb->unsent = rseg->next;
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	66da      	str	r2, [r3, #108]	; 0x6c
 8007fd0:	e003      	b.n	8007fda <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007fda:	69f8      	ldr	r0, [r7, #28]
 8007fdc:	f7fe fd3d 	bl	8006a5a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11d      	bne.n	8008024 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fee:	861a      	strh	r2, [r3, #48]	; 0x30
 8007ff0:	e01f      	b.n	8008032 <tcp_process+0x2ea>
 8007ff2:	bf00      	nop
 8007ff4:	08011f44 	.word	0x08011f44
 8007ff8:	0801217c 	.word	0x0801217c
 8007ffc:	08011f90 	.word	0x08011f90
 8008000:	20000104 	.word	0x20000104
 8008004:	200000fc 	.word	0x200000fc
 8008008:	200000f8 	.word	0x200000f8
 800800c:	08012198 	.word	0x08012198
 8008010:	20000105 	.word	0x20000105
 8008014:	20006950 	.word	0x20006950
 8008018:	200000e8 	.word	0x200000e8
 800801c:	080121b8 	.word	0x080121b8
 8008020:	080121d0 	.word	0x080121d0
        } else {
          pcb->rtime = 0;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <tcp_process+0x30a>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	6910      	ldr	r0, [r2, #16]
 8008046:	2200      	movs	r2, #0
 8008048:	6879      	ldr	r1, [r7, #4]
 800804a:	4798      	blx	r3
 800804c:	4603      	mov	r3, r0
 800804e:	76bb      	strb	r3, [r7, #26]
 8008050:	e001      	b.n	8008056 <tcp_process+0x30e>
 8008052:	2300      	movs	r3, #0
 8008054:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008056:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800805a:	f113 0f0d 	cmn.w	r3, #13
 800805e:	d102      	bne.n	8008066 <tcp_process+0x31e>
          return ERR_ABRT;
 8008060:	f06f 030c 	mvn.w	r3, #12
 8008064:	e250      	b.n	8008508 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	8b5b      	ldrh	r3, [r3, #26]
 800806a:	f043 0302 	orr.w	r3, r3, #2
 800806e:	b29a      	uxth	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008074:	e23a      	b.n	80084ec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008076:	4b9d      	ldr	r3, [pc, #628]	; (80082ec <tcp_process+0x5a4>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8234 	beq.w	80084ec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008084:	4b9a      	ldr	r3, [pc, #616]	; (80082f0 <tcp_process+0x5a8>)
 8008086:	6819      	ldr	r1, [r3, #0]
 8008088:	4b9a      	ldr	r3, [pc, #616]	; (80082f4 <tcp_process+0x5ac>)
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	4b9a      	ldr	r3, [pc, #616]	; (80082f8 <tcp_process+0x5b0>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008094:	4b99      	ldr	r3, [pc, #612]	; (80082fc <tcp_process+0x5b4>)
 8008096:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008098:	885b      	ldrh	r3, [r3, #2]
 800809a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800809c:	4a97      	ldr	r2, [pc, #604]	; (80082fc <tcp_process+0x5b4>)
 800809e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80080a0:	8812      	ldrh	r2, [r2, #0]
 80080a2:	b292      	uxth	r2, r2
 80080a4:	9202      	str	r2, [sp, #8]
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	4b95      	ldr	r3, [pc, #596]	; (8008300 <tcp_process+0x5b8>)
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4b95      	ldr	r3, [pc, #596]	; (8008304 <tcp_process+0x5bc>)
 80080ae:	4602      	mov	r2, r0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f002 fc83 	bl	800a9bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80080bc:	2b05      	cmp	r3, #5
 80080be:	f200 8215 	bhi.w	80084ec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f002 fa4d 	bl	800a568 <tcp_rexmit_rto>
      break;
 80080ce:	e20d      	b.n	80084ec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80080d0:	4b86      	ldr	r3, [pc, #536]	; (80082ec <tcp_process+0x5a4>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 80a1 	beq.w	8008220 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80080de:	4b84      	ldr	r3, [pc, #528]	; (80082f0 <tcp_process+0x5a8>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	db7e      	blt.n	80081ec <tcp_process+0x4a4>
 80080ee:	4b80      	ldr	r3, [pc, #512]	; (80082f0 <tcp_process+0x5a8>)
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dc77      	bgt.n	80081ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2204      	movs	r2, #4
 8008100:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008106:	2b00      	cmp	r3, #0
 8008108:	d102      	bne.n	8008110 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800810a:	23fa      	movs	r3, #250	; 0xfa
 800810c:	76bb      	strb	r3, [r7, #26]
 800810e:	e01d      	b.n	800814c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <tcp_process+0x3e0>
 800811a:	4b7b      	ldr	r3, [pc, #492]	; (8008308 <tcp_process+0x5c0>)
 800811c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008120:	497a      	ldr	r1, [pc, #488]	; (800830c <tcp_process+0x5c4>)
 8008122:	487b      	ldr	r0, [pc, #492]	; (8008310 <tcp_process+0x5c8>)
 8008124:	f007 fdce 	bl	800fcc4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <tcp_process+0x400>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6910      	ldr	r0, [r2, #16]
 800813c:	2200      	movs	r2, #0
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	4798      	blx	r3
 8008142:	4603      	mov	r3, r0
 8008144:	76bb      	strb	r3, [r7, #26]
 8008146:	e001      	b.n	800814c <tcp_process+0x404>
 8008148:	23f0      	movs	r3, #240	; 0xf0
 800814a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800814c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008154:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008158:	f113 0f0d 	cmn.w	r3, #13
 800815c:	d002      	beq.n	8008164 <tcp_process+0x41c>
              tcp_abort(pcb);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fd ff90 	bl	8006084 <tcp_abort>
            }
            return ERR_ABRT;
 8008164:	f06f 030c 	mvn.w	r3, #12
 8008168:	e1ce      	b.n	8008508 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fae0 	bl	8008730 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008170:	4b68      	ldr	r3, [pc, #416]	; (8008314 <tcp_process+0x5cc>)
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <tcp_process+0x43c>
            recv_acked--;
 8008178:	4b66      	ldr	r3, [pc, #408]	; (8008314 <tcp_process+0x5cc>)
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	4b64      	ldr	r3, [pc, #400]	; (8008314 <tcp_process+0x5cc>)
 8008182:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008188:	009a      	lsls	r2, r3, #2
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	f241 111c 	movw	r1, #4380	; 0x111c
 8008194:	428b      	cmp	r3, r1
 8008196:	bf38      	it	cc
 8008198:	460b      	movcc	r3, r1
 800819a:	429a      	cmp	r2, r3
 800819c:	d204      	bcs.n	80081a8 <tcp_process+0x460>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	e00d      	b.n	80081c4 <tcp_process+0x47c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d904      	bls.n	80081c0 <tcp_process+0x478>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	b29b      	uxth	r3, r3
 80081be:	e001      	b.n	80081c4 <tcp_process+0x47c>
 80081c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80081ca:	4b53      	ldr	r3, [pc, #332]	; (8008318 <tcp_process+0x5d0>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d037      	beq.n	8008246 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8b5b      	ldrh	r3, [r3, #26]
 80081da:	f043 0302 	orr.w	r3, r3, #2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2207      	movs	r2, #7
 80081e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80081ea:	e02c      	b.n	8008246 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081ec:	4b40      	ldr	r3, [pc, #256]	; (80082f0 <tcp_process+0x5a8>)
 80081ee:	6819      	ldr	r1, [r3, #0]
 80081f0:	4b40      	ldr	r3, [pc, #256]	; (80082f4 <tcp_process+0x5ac>)
 80081f2:	881b      	ldrh	r3, [r3, #0]
 80081f4:	461a      	mov	r2, r3
 80081f6:	4b40      	ldr	r3, [pc, #256]	; (80082f8 <tcp_process+0x5b0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081fc:	4b3f      	ldr	r3, [pc, #252]	; (80082fc <tcp_process+0x5b4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008200:	885b      	ldrh	r3, [r3, #2]
 8008202:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008204:	4a3d      	ldr	r2, [pc, #244]	; (80082fc <tcp_process+0x5b4>)
 8008206:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008208:	8812      	ldrh	r2, [r2, #0]
 800820a:	b292      	uxth	r2, r2
 800820c:	9202      	str	r2, [sp, #8]
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	4b3b      	ldr	r3, [pc, #236]	; (8008300 <tcp_process+0x5b8>)
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	4b3b      	ldr	r3, [pc, #236]	; (8008304 <tcp_process+0x5bc>)
 8008216:	4602      	mov	r2, r0
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f002 fbcf 	bl	800a9bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800821e:	e167      	b.n	80084f0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008220:	4b32      	ldr	r3, [pc, #200]	; (80082ec <tcp_process+0x5a4>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	f003 0302 	and.w	r3, r3, #2
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8161 	beq.w	80084f0 <tcp_process+0x7a8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	1e5a      	subs	r2, r3, #1
 8008234:	4b30      	ldr	r3, [pc, #192]	; (80082f8 <tcp_process+0x5b0>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	429a      	cmp	r2, r3
 800823a:	f040 8159 	bne.w	80084f0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f002 f9b4 	bl	800a5ac <tcp_rexmit>
      break;
 8008244:	e154      	b.n	80084f0 <tcp_process+0x7a8>
 8008246:	e153      	b.n	80084f0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fa71 	bl	8008730 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800824e:	4b32      	ldr	r3, [pc, #200]	; (8008318 <tcp_process+0x5d0>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 0320 	and.w	r3, r3, #32
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 814c 	beq.w	80084f4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	8b5b      	ldrh	r3, [r3, #26]
 8008260:	f043 0302 	orr.w	r3, r3, #2
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2207      	movs	r2, #7
 800826e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008270:	e140      	b.n	80084f4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa5c 	bl	8008730 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008278:	4b27      	ldr	r3, [pc, #156]	; (8008318 <tcp_process+0x5d0>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d071      	beq.n	8008368 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008284:	4b19      	ldr	r3, [pc, #100]	; (80082ec <tcp_process+0x5a4>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	d060      	beq.n	8008352 <tcp_process+0x60a>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008294:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <tcp_process+0x5a8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d15a      	bne.n	8008352 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d156      	bne.n	8008352 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8b5b      	ldrh	r3, [r3, #26]
 80082a8:	f043 0302 	orr.w	r3, r3, #2
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fe fdbe 	bl	8006e34 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80082b8:	4b18      	ldr	r3, [pc, #96]	; (800831c <tcp_process+0x5d4>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d105      	bne.n	80082ce <tcp_process+0x586>
 80082c2:	4b16      	ldr	r3, [pc, #88]	; (800831c <tcp_process+0x5d4>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	4a14      	ldr	r2, [pc, #80]	; (800831c <tcp_process+0x5d4>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	e02e      	b.n	800832c <tcp_process+0x5e4>
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <tcp_process+0x5d4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	617b      	str	r3, [r7, #20]
 80082d4:	e027      	b.n	8008326 <tcp_process+0x5de>
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d11f      	bne.n	8008320 <tcp_process+0x5d8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	60da      	str	r2, [r3, #12]
 80082e8:	e020      	b.n	800832c <tcp_process+0x5e4>
 80082ea:	bf00      	nop
 80082ec:	20000104 	.word	0x20000104
 80082f0:	200000fc 	.word	0x200000fc
 80082f4:	20000102 	.word	0x20000102
 80082f8:	200000f8 	.word	0x200000f8
 80082fc:	200000e8 	.word	0x200000e8
 8008300:	200033f8 	.word	0x200033f8
 8008304:	200033fc 	.word	0x200033fc
 8008308:	08011f44 	.word	0x08011f44
 800830c:	080121e4 	.word	0x080121e4
 8008310:	08011f90 	.word	0x08011f90
 8008314:	20000100 	.word	0x20000100
 8008318:	20000105 	.word	0x20000105
 800831c:	2000694c 	.word	0x2000694c
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1d4      	bne.n	80082d6 <tcp_process+0x58e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	60da      	str	r2, [r3, #12]
 8008332:	4b77      	ldr	r3, [pc, #476]	; (8008510 <tcp_process+0x7c8>)
 8008334:	2201      	movs	r2, #1
 8008336:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	220a      	movs	r2, #10
 800833c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800833e:	4b75      	ldr	r3, [pc, #468]	; (8008514 <tcp_process+0x7cc>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60da      	str	r2, [r3, #12]
 8008346:	4a73      	ldr	r2, [pc, #460]	; (8008514 <tcp_process+0x7cc>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	f002 fcf8 	bl	800ad40 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008350:	e0d2      	b.n	80084f8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	8b5b      	ldrh	r3, [r3, #26]
 8008356:	f043 0302 	orr.w	r3, r3, #2
 800835a:	b29a      	uxth	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2208      	movs	r2, #8
 8008364:	751a      	strb	r2, [r3, #20]
      break;
 8008366:	e0c7      	b.n	80084f8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008368:	4b6b      	ldr	r3, [pc, #428]	; (8008518 <tcp_process+0x7d0>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80c1 	beq.w	80084f8 <tcp_process+0x7b0>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800837a:	4b68      	ldr	r3, [pc, #416]	; (800851c <tcp_process+0x7d4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	f040 80ba 	bne.w	80084f8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008388:	2b00      	cmp	r3, #0
 800838a:	f040 80b5 	bne.w	80084f8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2206      	movs	r2, #6
 8008392:	751a      	strb	r2, [r3, #20]
      break;
 8008394:	e0b0      	b.n	80084f8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f9ca 	bl	8008730 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800839c:	4b60      	ldr	r3, [pc, #384]	; (8008520 <tcp_process+0x7d8>)
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f003 0320 	and.w	r3, r3, #32
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80a9 	beq.w	80084fc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8b5b      	ldrh	r3, [r3, #26]
 80083ae:	f043 0302 	orr.w	r3, r3, #2
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fe fd3b 	bl	8006e34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80083be:	4b59      	ldr	r3, [pc, #356]	; (8008524 <tcp_process+0x7dc>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d105      	bne.n	80083d4 <tcp_process+0x68c>
 80083c8:	4b56      	ldr	r3, [pc, #344]	; (8008524 <tcp_process+0x7dc>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	4a55      	ldr	r2, [pc, #340]	; (8008524 <tcp_process+0x7dc>)
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	e013      	b.n	80083fc <tcp_process+0x6b4>
 80083d4:	4b53      	ldr	r3, [pc, #332]	; (8008524 <tcp_process+0x7dc>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	613b      	str	r3, [r7, #16]
 80083da:	e00c      	b.n	80083f6 <tcp_process+0x6ae>
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d104      	bne.n	80083f0 <tcp_process+0x6a8>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	60da      	str	r2, [r3, #12]
 80083ee:	e005      	b.n	80083fc <tcp_process+0x6b4>
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1ef      	bne.n	80083dc <tcp_process+0x694>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	60da      	str	r2, [r3, #12]
 8008402:	4b43      	ldr	r3, [pc, #268]	; (8008510 <tcp_process+0x7c8>)
 8008404:	2201      	movs	r2, #1
 8008406:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	220a      	movs	r2, #10
 800840c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800840e:	4b41      	ldr	r3, [pc, #260]	; (8008514 <tcp_process+0x7cc>)
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]
 8008416:	4a3f      	ldr	r2, [pc, #252]	; (8008514 <tcp_process+0x7cc>)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	f002 fc90 	bl	800ad40 <tcp_timer_needed>
      }
      break;
 8008420:	e06c      	b.n	80084fc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f984 	bl	8008730 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008428:	4b3b      	ldr	r3, [pc, #236]	; (8008518 <tcp_process+0x7d0>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b00      	cmp	r3, #0
 8008432:	d065      	beq.n	8008500 <tcp_process+0x7b8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008438:	4b38      	ldr	r3, [pc, #224]	; (800851c <tcp_process+0x7d4>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d15f      	bne.n	8008500 <tcp_process+0x7b8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d15b      	bne.n	8008500 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7fe fcf3 	bl	8006e34 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800844e:	4b35      	ldr	r3, [pc, #212]	; (8008524 <tcp_process+0x7dc>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d105      	bne.n	8008464 <tcp_process+0x71c>
 8008458:	4b32      	ldr	r3, [pc, #200]	; (8008524 <tcp_process+0x7dc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	4a31      	ldr	r2, [pc, #196]	; (8008524 <tcp_process+0x7dc>)
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	e013      	b.n	800848c <tcp_process+0x744>
 8008464:	4b2f      	ldr	r3, [pc, #188]	; (8008524 <tcp_process+0x7dc>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	e00c      	b.n	8008486 <tcp_process+0x73e>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	429a      	cmp	r2, r3
 8008474:	d104      	bne.n	8008480 <tcp_process+0x738>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	60da      	str	r2, [r3, #12]
 800847e:	e005      	b.n	800848c <tcp_process+0x744>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1ef      	bne.n	800846c <tcp_process+0x724>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	60da      	str	r2, [r3, #12]
 8008492:	4b1f      	ldr	r3, [pc, #124]	; (8008510 <tcp_process+0x7c8>)
 8008494:	2201      	movs	r2, #1
 8008496:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	220a      	movs	r2, #10
 800849c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800849e:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <tcp_process+0x7cc>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	4a1b      	ldr	r2, [pc, #108]	; (8008514 <tcp_process+0x7cc>)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	f002 fc48 	bl	800ad40 <tcp_timer_needed>
      }
      break;
 80084b0:	e026      	b.n	8008500 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f93c 	bl	8008730 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80084b8:	4b17      	ldr	r3, [pc, #92]	; (8008518 <tcp_process+0x7d0>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01f      	beq.n	8008504 <tcp_process+0x7bc>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084c8:	4b14      	ldr	r3, [pc, #80]	; (800851c <tcp_process+0x7d4>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d119      	bne.n	8008504 <tcp_process+0x7bc>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d115      	bne.n	8008504 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80084d8:	4b11      	ldr	r3, [pc, #68]	; (8008520 <tcp_process+0x7d8>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f043 0310 	orr.w	r3, r3, #16
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <tcp_process+0x7d8>)
 80084e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80084e6:	e00d      	b.n	8008504 <tcp_process+0x7bc>
    default:
      break;
 80084e8:	bf00      	nop
 80084ea:	e00c      	b.n	8008506 <tcp_process+0x7be>
      break;
 80084ec:	bf00      	nop
 80084ee:	e00a      	b.n	8008506 <tcp_process+0x7be>
      break;
 80084f0:	bf00      	nop
 80084f2:	e008      	b.n	8008506 <tcp_process+0x7be>
      break;
 80084f4:	bf00      	nop
 80084f6:	e006      	b.n	8008506 <tcp_process+0x7be>
      break;
 80084f8:	bf00      	nop
 80084fa:	e004      	b.n	8008506 <tcp_process+0x7be>
      break;
 80084fc:	bf00      	nop
 80084fe:	e002      	b.n	8008506 <tcp_process+0x7be>
      break;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <tcp_process+0x7be>
      break;
 8008504:	bf00      	nop
  }
  return ERR_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3724      	adds	r7, #36	; 0x24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd90      	pop	{r4, r7, pc}
 8008510:	20006948 	.word	0x20006948
 8008514:	2000695c 	.word	0x2000695c
 8008518:	20000104 	.word	0x20000104
 800851c:	200000fc 	.word	0x200000fc
 8008520:	20000105 	.word	0x20000105
 8008524:	2000694c 	.word	0x2000694c

08008528 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d106      	bne.n	8008546 <tcp_oos_insert_segment+0x1e>
 8008538:	4b3b      	ldr	r3, [pc, #236]	; (8008628 <tcp_oos_insert_segment+0x100>)
 800853a:	f240 421f 	movw	r2, #1055	; 0x41f
 800853e:	493b      	ldr	r1, [pc, #236]	; (800862c <tcp_oos_insert_segment+0x104>)
 8008540:	483b      	ldr	r0, [pc, #236]	; (8008630 <tcp_oos_insert_segment+0x108>)
 8008542:	f007 fbbf 	bl	800fcc4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	899b      	ldrh	r3, [r3, #12]
 800854c:	b29b      	uxth	r3, r3
 800854e:	4618      	mov	r0, r3
 8008550:	f7fb fcdc 	bl	8003f0c <lwip_htons>
 8008554:	4603      	mov	r3, r0
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d028      	beq.n	80085b2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008560:	6838      	ldr	r0, [r7, #0]
 8008562:	f7fe fa65 	bl	8006a30 <tcp_segs_free>
    next = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	603b      	str	r3, [r7, #0]
 800856a:	e056      	b.n	800861a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	899b      	ldrh	r3, [r3, #12]
 8008572:	b29b      	uxth	r3, r3
 8008574:	4618      	mov	r0, r3
 8008576:	f7fb fcc9 	bl	8003f0c <lwip_htons>
 800857a:	4603      	mov	r3, r0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00d      	beq.n	80085a2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	899b      	ldrh	r3, [r3, #12]
 800858c:	b29c      	uxth	r4, r3
 800858e:	2001      	movs	r0, #1
 8008590:	f7fb fcbc 	bl	8003f0c <lwip_htons>
 8008594:	4603      	mov	r3, r0
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	4322      	orrs	r2, r4
 800859e:	b292      	uxth	r2, r2
 80085a0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f7fe fa54 	bl	8006a5a <tcp_seg_free>
    while (next &&
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00e      	beq.n	80085d6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	891b      	ldrh	r3, [r3, #8]
 80085bc:	461a      	mov	r2, r3
 80085be:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <tcp_oos_insert_segment+0x10c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	441a      	add	r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	8909      	ldrh	r1, [r1, #8]
 80085ce:	440b      	add	r3, r1
 80085d0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	daca      	bge.n	800856c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01e      	beq.n	800861a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	891b      	ldrh	r3, [r3, #8]
 80085e0:	461a      	mov	r2, r3
 80085e2:	4b14      	ldr	r3, [pc, #80]	; (8008634 <tcp_oos_insert_segment+0x10c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	441a      	add	r2, r3
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	1ad3      	subs	r3, r2, r3
    if (next &&
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd12      	ble.n	800861a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <tcp_oos_insert_segment+0x10c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	b29b      	uxth	r3, r3
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	b29a      	uxth	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	891b      	ldrh	r3, [r3, #8]
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f7fc fe17 	bl	8005248 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	601a      	str	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	bd90      	pop	{r4, r7, pc}
 8008628:	08011f44 	.word	0x08011f44
 800862c:	08012204 	.word	0x08012204
 8008630:	08011f90 	.word	0x08011f90
 8008634:	200000f8 	.word	0x200000f8

08008638 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008638:	b5b0      	push	{r4, r5, r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008646:	e03e      	b.n	80086c6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	4618      	mov	r0, r3
 8008658:	f7fd f804 	bl	8005664 <pbuf_clen>
 800865c:	4603      	mov	r3, r0
 800865e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008666:	8a7a      	ldrh	r2, [r7, #18]
 8008668:	429a      	cmp	r2, r3
 800866a:	d906      	bls.n	800867a <tcp_free_acked_segments+0x42>
 800866c:	4b2a      	ldr	r3, [pc, #168]	; (8008718 <tcp_free_acked_segments+0xe0>)
 800866e:	f240 4257 	movw	r2, #1111	; 0x457
 8008672:	492a      	ldr	r1, [pc, #168]	; (800871c <tcp_free_acked_segments+0xe4>)
 8008674:	482a      	ldr	r0, [pc, #168]	; (8008720 <tcp_free_acked_segments+0xe8>)
 8008676:	f007 fb25 	bl	800fcc4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008680:	8a7b      	ldrh	r3, [r7, #18]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	b29a      	uxth	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	891a      	ldrh	r2, [r3, #8]
 8008690:	4b24      	ldr	r3, [pc, #144]	; (8008724 <tcp_free_acked_segments+0xec>)
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	4413      	add	r3, r2
 8008696:	b29a      	uxth	r2, r3
 8008698:	4b22      	ldr	r3, [pc, #136]	; (8008724 <tcp_free_acked_segments+0xec>)
 800869a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800869c:	6978      	ldr	r0, [r7, #20]
 800869e:	f7fe f9dc 	bl	8006a5a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00c      	beq.n	80086c6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d109      	bne.n	80086c6 <tcp_free_acked_segments+0x8e>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d106      	bne.n	80086c6 <tcp_free_acked_segments+0x8e>
 80086b8:	4b17      	ldr	r3, [pc, #92]	; (8008718 <tcp_free_acked_segments+0xe0>)
 80086ba:	f240 4261 	movw	r2, #1121	; 0x461
 80086be:	491a      	ldr	r1, [pc, #104]	; (8008728 <tcp_free_acked_segments+0xf0>)
 80086c0:	4817      	ldr	r0, [pc, #92]	; (8008720 <tcp_free_acked_segments+0xe8>)
 80086c2:	f007 faff 	bl	800fcc4 <iprintf>
  while (seg_list != NULL &&
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d020      	beq.n	800870e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fb fc2f 	bl	8003f36 <lwip_htonl>
 80086d8:	4604      	mov	r4, r0
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	891b      	ldrh	r3, [r3, #8]
 80086de:	461d      	mov	r5, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	899b      	ldrh	r3, [r3, #12]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fb fc0f 	bl	8003f0c <lwip_htons>
 80086ee:	4603      	mov	r3, r0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <tcp_free_acked_segments+0xc6>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <tcp_free_acked_segments+0xc8>
 80086fe:	2300      	movs	r3, #0
 8008700:	442b      	add	r3, r5
 8008702:	18e2      	adds	r2, r4, r3
 8008704:	4b09      	ldr	r3, [pc, #36]	; (800872c <tcp_free_acked_segments+0xf4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800870a:	2b00      	cmp	r3, #0
 800870c:	dd9c      	ble.n	8008648 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800870e:	68bb      	ldr	r3, [r7, #8]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bdb0      	pop	{r4, r5, r7, pc}
 8008718:	08011f44 	.word	0x08011f44
 800871c:	0801222c 	.word	0x0801222c
 8008720:	08011f90 	.word	0x08011f90
 8008724:	20000100 	.word	0x20000100
 8008728:	08012254 	.word	0x08012254
 800872c:	200000fc 	.word	0x200000fc

08008730 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008730:	b5b0      	push	{r4, r5, r7, lr}
 8008732:	b094      	sub	sp, #80	; 0x50
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008738:	2300      	movs	r3, #0
 800873a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <tcp_receive+0x20>
 8008742:	4ba6      	ldr	r3, [pc, #664]	; (80089dc <tcp_receive+0x2ac>)
 8008744:	f240 427b 	movw	r2, #1147	; 0x47b
 8008748:	49a5      	ldr	r1, [pc, #660]	; (80089e0 <tcp_receive+0x2b0>)
 800874a:	48a6      	ldr	r0, [pc, #664]	; (80089e4 <tcp_receive+0x2b4>)
 800874c:	f007 faba 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7d1b      	ldrb	r3, [r3, #20]
 8008754:	2b03      	cmp	r3, #3
 8008756:	d806      	bhi.n	8008766 <tcp_receive+0x36>
 8008758:	4ba0      	ldr	r3, [pc, #640]	; (80089dc <tcp_receive+0x2ac>)
 800875a:	f240 427c 	movw	r2, #1148	; 0x47c
 800875e:	49a2      	ldr	r1, [pc, #648]	; (80089e8 <tcp_receive+0x2b8>)
 8008760:	48a0      	ldr	r0, [pc, #640]	; (80089e4 <tcp_receive+0x2b4>)
 8008762:	f007 faaf 	bl	800fcc4 <iprintf>

  if (flags & TCP_ACK) {
 8008766:	4ba1      	ldr	r3, [pc, #644]	; (80089ec <tcp_receive+0x2bc>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 0310 	and.w	r3, r3, #16
 800876e:	2b00      	cmp	r3, #0
 8008770:	f000 8263 	beq.w	8008c3a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800877a:	461a      	mov	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008780:	4413      	add	r3, r2
 8008782:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008788:	4b99      	ldr	r3, [pc, #612]	; (80089f0 <tcp_receive+0x2c0>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	db1b      	blt.n	80087ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008796:	4b96      	ldr	r3, [pc, #600]	; (80089f0 <tcp_receive+0x2c0>)
 8008798:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800879a:	429a      	cmp	r2, r3
 800879c:	d106      	bne.n	80087ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087a2:	4b94      	ldr	r3, [pc, #592]	; (80089f4 <tcp_receive+0x2c4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	db0e      	blt.n	80087ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80087b0:	4b90      	ldr	r3, [pc, #576]	; (80089f4 <tcp_receive+0x2c4>)
 80087b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d125      	bne.n	8008804 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80087b8:	4b8f      	ldr	r3, [pc, #572]	; (80089f8 <tcp_receive+0x2c8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	89db      	ldrh	r3, [r3, #14]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d91c      	bls.n	8008804 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80087ca:	4b8b      	ldr	r3, [pc, #556]	; (80089f8 <tcp_receive+0x2c8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	89db      	ldrh	r3, [r3, #14]
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d205      	bcs.n	80087f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80087f4:	4b7e      	ldr	r3, [pc, #504]	; (80089f0 <tcp_receive+0x2c0>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80087fc:	4b7d      	ldr	r3, [pc, #500]	; (80089f4 <tcp_receive+0x2c4>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008804:	4b7b      	ldr	r3, [pc, #492]	; (80089f4 <tcp_receive+0x2c4>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	dc58      	bgt.n	80088c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008812:	4b7a      	ldr	r3, [pc, #488]	; (80089fc <tcp_receive+0x2cc>)
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d14b      	bne.n	80088b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008824:	4413      	add	r3, r2
 8008826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008828:	429a      	cmp	r2, r3
 800882a:	d142      	bne.n	80088b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008832:	2b00      	cmp	r3, #0
 8008834:	db3d      	blt.n	80088b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800883a:	4b6e      	ldr	r3, [pc, #440]	; (80089f4 <tcp_receive+0x2c4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d137      	bne.n	80088b2 <tcp_receive+0x182>
              found_dupack = 1;
 8008842:	2301      	movs	r3, #1
 8008844:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800884c:	2bff      	cmp	r3, #255	; 0xff
 800884e:	d007      	beq.n	8008860 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008856:	3301      	adds	r3, #1
 8008858:	b2da      	uxtb	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008866:	2b03      	cmp	r3, #3
 8008868:	d91b      	bls.n	80088a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008874:	4413      	add	r3, r2
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800887e:	429a      	cmp	r2, r3
 8008880:	d30a      	bcc.n	8008898 <tcp_receive+0x168>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800888c:	4413      	add	r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008896:	e004      	b.n	80088a2 <tcp_receive+0x172>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800889e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d902      	bls.n	80088b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f001 fee9 	bl	800a684 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80088b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 8160 	bne.w	8008b7a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088c2:	e15a      	b.n	8008b7a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80088c4:	4b4b      	ldr	r3, [pc, #300]	; (80089f4 <tcp_receive+0x2c4>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f2c0 814d 	blt.w	8008b70 <tcp_receive+0x440>
 80088d6:	4b47      	ldr	r3, [pc, #284]	; (80089f4 <tcp_receive+0x2c4>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f300 8145 	bgt.w	8008b70 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	8b5b      	ldrh	r3, [r3, #26]
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d010      	beq.n	8008914 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	8b5b      	ldrh	r3, [r3, #26]
 80088f6:	f023 0304 	bic.w	r3, r3, #4
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008922:	10db      	asrs	r3, r3, #3
 8008924:	b21b      	sxth	r3, r3
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800892e:	b29b      	uxth	r3, r3
 8008930:	4413      	add	r3, r2
 8008932:	b29b      	uxth	r3, r3
 8008934:	b21a      	sxth	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800893c:	4b2d      	ldr	r3, [pc, #180]	; (80089f4 <tcp_receive+0x2c4>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008946:	b29b      	uxth	r3, r3
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008954:	4b27      	ldr	r3, [pc, #156]	; (80089f4 <tcp_receive+0x2c4>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7d1b      	ldrb	r3, [r3, #20]
 8008960:	2b03      	cmp	r3, #3
 8008962:	f240 8096 	bls.w	8008a92 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008972:	429a      	cmp	r2, r3
 8008974:	d244      	bcs.n	8008a00 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	8b5b      	ldrh	r3, [r3, #26]
 800897a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <tcp_receive+0x256>
 8008982:	2301      	movs	r3, #1
 8008984:	e000      	b.n	8008988 <tcp_receive+0x258>
 8008986:	2302      	movs	r3, #2
 8008988:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800898c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008990:	b29a      	uxth	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008996:	fb12 f303 	smulbb	r3, r2, r3
 800899a:	b29b      	uxth	r3, r3
 800899c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800899e:	4293      	cmp	r3, r2
 80089a0:	bf28      	it	cs
 80089a2:	4613      	movcs	r3, r2
 80089a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089ae:	4413      	add	r3, r2
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d309      	bcc.n	80089d0 <tcp_receive+0x2a0>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80089c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80089c4:	4413      	add	r3, r2
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089ce:	e060      	b.n	8008a92 <tcp_receive+0x362>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80089da:	e05a      	b.n	8008a92 <tcp_receive+0x362>
 80089dc:	08011f44 	.word	0x08011f44
 80089e0:	08012274 	.word	0x08012274
 80089e4:	08011f90 	.word	0x08011f90
 80089e8:	08012290 	.word	0x08012290
 80089ec:	20000104 	.word	0x20000104
 80089f0:	200000f8 	.word	0x200000f8
 80089f4:	200000fc 	.word	0x200000fc
 80089f8:	200000e8 	.word	0x200000e8
 80089fc:	20000102 	.word	0x20000102
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008a06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a08:	4413      	add	r3, r2
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d309      	bcc.n	8008a2a <tcp_receive+0x2fa>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008a1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a1e:	4413      	add	r3, r2
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a28:	e004      	b.n	8008a34 <tcp_receive+0x304>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d326      	bcc.n	8008a92 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a64:	4413      	add	r3, r2
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d30a      	bcc.n	8008a88 <tcp_receive+0x358>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a7c:	4413      	add	r3, r2
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008a86:	e004      	b.n	8008a92 <tcp_receive+0x362>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a9a:	4a98      	ldr	r2, [pc, #608]	; (8008cfc <tcp_receive+0x5cc>)
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff fdcb 	bl	8008638 <tcp_free_acked_segments>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	4a93      	ldr	r2, [pc, #588]	; (8008d00 <tcp_receive+0x5d0>)
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fdc0 	bl	8008638 <tcp_free_acked_segments>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008acc:	861a      	strh	r2, [r3, #48]	; 0x30
 8008ace:	e002      	b.n	8008ad6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d103      	bne.n	8008aec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008af2:	4b84      	ldr	r3, [pc, #528]	; (8008d04 <tcp_receive+0x5d4>)
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	4413      	add	r3, r2
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	8b5b      	ldrh	r3, [r3, #26]
 8008b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d035      	beq.n	8008b78 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d118      	bne.n	8008b46 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00c      	beq.n	8008b36 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fb fa04 	bl	8003f36 <lwip_htonl>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dc20      	bgt.n	8008b78 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	8b5b      	ldrh	r3, [r3, #26]
 8008b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b44:	e018      	b.n	8008b78 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fb f9ef 	bl	8003f36 <lwip_htonl>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	1ae3      	subs	r3, r4, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dc0b      	bgt.n	8008b78 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	8b5b      	ldrh	r3, [r3, #26]
 8008b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b6e:	e003      	b.n	8008b78 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 ff75 	bl	800aa60 <tcp_send_empty_ack>
 8008b76:	e000      	b.n	8008b7a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b78:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d05b      	beq.n	8008c3a <tcp_receive+0x50a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b86:	4b60      	ldr	r3, [pc, #384]	; (8008d08 <tcp_receive+0x5d8>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	da54      	bge.n	8008c3a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008b90:	4b5e      	ldr	r3, [pc, #376]	; (8008d0c <tcp_receive+0x5dc>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008ba4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008bae:	10db      	asrs	r3, r3, #3
 8008bb0:	b21b      	sxth	r3, r3
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008bc8:	4413      	add	r3, r2
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	b21a      	sxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008bd2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	da05      	bge.n	8008be6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8008bda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008bde:	425b      	negs	r3, r3
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008be6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008bf0:	109b      	asrs	r3, r3, #2
 8008bf2:	b21b      	sxth	r3, r3
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008c0a:	4413      	add	r3, r2
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	b21a      	sxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008c1a:	10db      	asrs	r3, r3, #3
 8008c1c:	b21b      	sxth	r3, r3
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	4413      	add	r3, r2
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	b21a      	sxth	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008c3a:	4b35      	ldr	r3, [pc, #212]	; (8008d10 <tcp_receive+0x5e0>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 84e1 	beq.w	8009606 <tcp_receive+0xed6>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7d1b      	ldrb	r3, [r3, #20]
 8008c48:	2b06      	cmp	r3, #6
 8008c4a:	f200 84dc 	bhi.w	8009606 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c52:	4b30      	ldr	r3, [pc, #192]	; (8008d14 <tcp_receive+0x5e4>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f2c0 808e 	blt.w	8008d7c <tcp_receive+0x64c>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c64:	4b2a      	ldr	r3, [pc, #168]	; (8008d10 <tcp_receive+0x5e0>)
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4b2a      	ldr	r3, [pc, #168]	; (8008d14 <tcp_receive+0x5e4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	440b      	add	r3, r1
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	3301      	adds	r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f300 8081 	bgt.w	8008d7c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008c7a:	4b27      	ldr	r3, [pc, #156]	; (8008d18 <tcp_receive+0x5e8>)
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c84:	4b23      	ldr	r3, [pc, #140]	; (8008d14 <tcp_receive+0x5e4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008c8c:	4b22      	ldr	r3, [pc, #136]	; (8008d18 <tcp_receive+0x5e8>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d106      	bne.n	8008ca2 <tcp_receive+0x572>
 8008c94:	4b21      	ldr	r3, [pc, #132]	; (8008d1c <tcp_receive+0x5ec>)
 8008c96:	f240 5294 	movw	r2, #1428	; 0x594
 8008c9a:	4921      	ldr	r1, [pc, #132]	; (8008d20 <tcp_receive+0x5f0>)
 8008c9c:	4821      	ldr	r0, [pc, #132]	; (8008d24 <tcp_receive+0x5f4>)
 8008c9e:	f007 f811 	bl	800fcc4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d906      	bls.n	8008cba <tcp_receive+0x58a>
 8008cac:	4b1b      	ldr	r3, [pc, #108]	; (8008d1c <tcp_receive+0x5ec>)
 8008cae:	f240 5295 	movw	r2, #1429	; 0x595
 8008cb2:	491d      	ldr	r1, [pc, #116]	; (8008d28 <tcp_receive+0x5f8>)
 8008cb4:	481b      	ldr	r0, [pc, #108]	; (8008d24 <tcp_receive+0x5f4>)
 8008cb6:	f007 f805 	bl	800fcc4 <iprintf>
      off = (u16_t)off32;
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008cc0:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <tcp_receive+0x5e8>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	891b      	ldrh	r3, [r3, #8]
 8008cc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d906      	bls.n	8008cdc <tcp_receive+0x5ac>
 8008cce:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <tcp_receive+0x5ec>)
 8008cd0:	f240 5297 	movw	r2, #1431	; 0x597
 8008cd4:	4915      	ldr	r1, [pc, #84]	; (8008d2c <tcp_receive+0x5fc>)
 8008cd6:	4813      	ldr	r0, [pc, #76]	; (8008d24 <tcp_receive+0x5f4>)
 8008cd8:	f006 fff4 	bl	800fcc4 <iprintf>
      inseg.len -= off;
 8008cdc:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <tcp_receive+0x5e8>)
 8008cde:	891a      	ldrh	r2, [r3, #8]
 8008ce0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <tcp_receive+0x5e8>)
 8008cea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <tcp_receive+0x5e8>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	891a      	ldrh	r2, [r3, #8]
 8008cf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008cfa:	e029      	b.n	8008d50 <tcp_receive+0x620>
 8008cfc:	080122ac 	.word	0x080122ac
 8008d00:	080122b4 	.word	0x080122b4
 8008d04:	20000100 	.word	0x20000100
 8008d08:	200000fc 	.word	0x200000fc
 8008d0c:	20006950 	.word	0x20006950
 8008d10:	20000102 	.word	0x20000102
 8008d14:	200000f8 	.word	0x200000f8
 8008d18:	200000d8 	.word	0x200000d8
 8008d1c:	08011f44 	.word	0x08011f44
 8008d20:	080122bc 	.word	0x080122bc
 8008d24:	08011f90 	.word	0x08011f90
 8008d28:	080122cc 	.word	0x080122cc
 8008d2c:	080122dc 	.word	0x080122dc
        off -= p->len;
 8008d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d32:	895b      	ldrh	r3, [r3, #10]
 8008d34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008d42:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d46:	2200      	movs	r2, #0
 8008d48:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d52:	895b      	ldrh	r3, [r3, #10]
 8008d54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d8e9      	bhi.n	8008d30 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008d5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008d60:	4619      	mov	r1, r3
 8008d62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008d64:	f7fc fb70 	bl	8005448 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	4a91      	ldr	r2, [pc, #580]	; (8008fb4 <tcp_receive+0x884>)
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	4b91      	ldr	r3, [pc, #580]	; (8008fb8 <tcp_receive+0x888>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	4a8f      	ldr	r2, [pc, #572]	; (8008fb4 <tcp_receive+0x884>)
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008d7a:	e00d      	b.n	8008d98 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008d7c:	4b8d      	ldr	r3, [pc, #564]	; (8008fb4 <tcp_receive+0x884>)
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da06      	bge.n	8008d98 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	8b5b      	ldrh	r3, [r3, #26]
 8008d8e:	f043 0302 	orr.w	r3, r3, #2
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008d98:	4b86      	ldr	r3, [pc, #536]	; (8008fb4 <tcp_receive+0x884>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f2c0 842a 	blt.w	80095fc <tcp_receive+0xecc>
 8008da8:	4b82      	ldr	r3, [pc, #520]	; (8008fb4 <tcp_receive+0x884>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008db4:	440b      	add	r3, r1
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	3301      	adds	r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f300 841e 	bgt.w	80095fc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dc4:	4b7b      	ldr	r3, [pc, #492]	; (8008fb4 <tcp_receive+0x884>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	f040 829a 	bne.w	8009302 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008dce:	4b7a      	ldr	r3, [pc, #488]	; (8008fb8 <tcp_receive+0x888>)
 8008dd0:	891c      	ldrh	r4, [r3, #8]
 8008dd2:	4b79      	ldr	r3, [pc, #484]	; (8008fb8 <tcp_receive+0x888>)
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	899b      	ldrh	r3, [r3, #12]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fb f896 	bl	8003f0c <lwip_htons>
 8008de0:	4603      	mov	r3, r0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <tcp_receive+0x6c0>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e000      	b.n	8008df2 <tcp_receive+0x6c2>
 8008df0:	2300      	movs	r3, #0
 8008df2:	4423      	add	r3, r4
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	4b71      	ldr	r3, [pc, #452]	; (8008fbc <tcp_receive+0x88c>)
 8008df8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008dfe:	4b6f      	ldr	r3, [pc, #444]	; (8008fbc <tcp_receive+0x88c>)
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d275      	bcs.n	8008ef2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008e06:	4b6c      	ldr	r3, [pc, #432]	; (8008fb8 <tcp_receive+0x888>)
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	899b      	ldrh	r3, [r3, #12]
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fb f87c 	bl	8003f0c <lwip_htons>
 8008e14:	4603      	mov	r3, r0
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01f      	beq.n	8008e60 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008e20:	4b65      	ldr	r3, [pc, #404]	; (8008fb8 <tcp_receive+0x888>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	899b      	ldrh	r3, [r3, #12]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	b21b      	sxth	r3, r3
 8008e2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e2e:	b21c      	sxth	r4, r3
 8008e30:	4b61      	ldr	r3, [pc, #388]	; (8008fb8 <tcp_receive+0x888>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	899b      	ldrh	r3, [r3, #12]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fb f867 	bl	8003f0c <lwip_htons>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fb f85e 	bl	8003f0c <lwip_htons>
 8008e50:	4603      	mov	r3, r0
 8008e52:	b21b      	sxth	r3, r3
 8008e54:	4323      	orrs	r3, r4
 8008e56:	b21a      	sxth	r2, r3
 8008e58:	4b57      	ldr	r3, [pc, #348]	; (8008fb8 <tcp_receive+0x888>)
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	b292      	uxth	r2, r2
 8008e5e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e64:	4b54      	ldr	r3, [pc, #336]	; (8008fb8 <tcp_receive+0x888>)
 8008e66:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008e68:	4b53      	ldr	r3, [pc, #332]	; (8008fb8 <tcp_receive+0x888>)
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	899b      	ldrh	r3, [r3, #12]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fb f84b 	bl	8003f0c <lwip_htons>
 8008e76:	4603      	mov	r3, r0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <tcp_receive+0x75e>
            inseg.len -= 1;
 8008e82:	4b4d      	ldr	r3, [pc, #308]	; (8008fb8 <tcp_receive+0x888>)
 8008e84:	891b      	ldrh	r3, [r3, #8]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	4b4b      	ldr	r3, [pc, #300]	; (8008fb8 <tcp_receive+0x888>)
 8008e8c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008e8e:	4b4a      	ldr	r3, [pc, #296]	; (8008fb8 <tcp_receive+0x888>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	4a49      	ldr	r2, [pc, #292]	; (8008fb8 <tcp_receive+0x888>)
 8008e94:	8912      	ldrh	r2, [r2, #8]
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fc f9d5 	bl	8005248 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008e9e:	4b46      	ldr	r3, [pc, #280]	; (8008fb8 <tcp_receive+0x888>)
 8008ea0:	891c      	ldrh	r4, [r3, #8]
 8008ea2:	4b45      	ldr	r3, [pc, #276]	; (8008fb8 <tcp_receive+0x888>)
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	899b      	ldrh	r3, [r3, #12]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fb f82e 	bl	8003f0c <lwip_htons>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	f003 0303 	and.w	r3, r3, #3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <tcp_receive+0x790>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e000      	b.n	8008ec2 <tcp_receive+0x792>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4423      	add	r3, r4
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	4b3d      	ldr	r3, [pc, #244]	; (8008fbc <tcp_receive+0x88c>)
 8008ec8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008eca:	4b3c      	ldr	r3, [pc, #240]	; (8008fbc <tcp_receive+0x88c>)
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	4b38      	ldr	r3, [pc, #224]	; (8008fb4 <tcp_receive+0x884>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	441a      	add	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ede:	440b      	add	r3, r1
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d006      	beq.n	8008ef2 <tcp_receive+0x7c2>
 8008ee4:	4b36      	ldr	r3, [pc, #216]	; (8008fc0 <tcp_receive+0x890>)
 8008ee6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8008eea:	4936      	ldr	r1, [pc, #216]	; (8008fc4 <tcp_receive+0x894>)
 8008eec:	4836      	ldr	r0, [pc, #216]	; (8008fc8 <tcp_receive+0x898>)
 8008eee:	f006 fee9 	bl	800fcc4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 80e7 	beq.w	80090ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008efc:	4b2e      	ldr	r3, [pc, #184]	; (8008fb8 <tcp_receive+0x888>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	899b      	ldrh	r3, [r3, #12]
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fb f801 	bl	8003f0c <lwip_htons>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d010      	beq.n	8008f38 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008f16:	e00a      	b.n	8008f2e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7fd fd96 	bl	8006a5a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f0      	bne.n	8008f18 <tcp_receive+0x7e8>
 8008f36:	e0c8      	b.n	80090ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008f3e:	e052      	b.n	8008fe6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	899b      	ldrh	r3, [r3, #12]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fa ffdf 	bl	8003f0c <lwip_htons>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d03d      	beq.n	8008fd6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008f5a:	4b17      	ldr	r3, [pc, #92]	; (8008fb8 <tcp_receive+0x888>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	899b      	ldrh	r3, [r3, #12]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fa ffd2 	bl	8003f0c <lwip_htons>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d130      	bne.n	8008fd6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008f74:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <tcp_receive+0x888>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	899b      	ldrh	r3, [r3, #12]
 8008f7a:	b29c      	uxth	r4, r3
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	f7fa ffc5 	bl	8003f0c <lwip_htons>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <tcp_receive+0x888>)
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	4322      	orrs	r2, r4
 8008f8c:	b292      	uxth	r2, r2
 8008f8e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008f90:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <tcp_receive+0x888>)
 8008f92:	891c      	ldrh	r4, [r3, #8]
 8008f94:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <tcp_receive+0x888>)
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	899b      	ldrh	r3, [r3, #12]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fa ffb5 	bl	8003f0c <lwip_htons>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00e      	beq.n	8008fcc <tcp_receive+0x89c>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e00d      	b.n	8008fce <tcp_receive+0x89e>
 8008fb2:	bf00      	nop
 8008fb4:	200000f8 	.word	0x200000f8
 8008fb8:	200000d8 	.word	0x200000d8
 8008fbc:	20000102 	.word	0x20000102
 8008fc0:	08011f44 	.word	0x08011f44
 8008fc4:	080122ec 	.word	0x080122ec
 8008fc8:	08011f90 	.word	0x08011f90
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4423      	add	r3, r4
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	4b98      	ldr	r3, [pc, #608]	; (8009234 <tcp_receive+0xb04>)
 8008fd4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008fe0:	6938      	ldr	r0, [r7, #16]
 8008fe2:	f7fd fd3a 	bl	8006a5a <tcp_seg_free>
            while (next &&
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00e      	beq.n	800900a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008fec:	4b91      	ldr	r3, [pc, #580]	; (8009234 <tcp_receive+0xb04>)
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4b91      	ldr	r3, [pc, #580]	; (8009238 <tcp_receive+0xb08>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	441a      	add	r2, r3
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009000:	8909      	ldrh	r1, [r1, #8]
 8009002:	440b      	add	r3, r1
 8009004:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009006:	2b00      	cmp	r3, #0
 8009008:	da9a      	bge.n	8008f40 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800900a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d059      	beq.n	80090c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009010:	4b88      	ldr	r3, [pc, #544]	; (8009234 <tcp_receive+0xb04>)
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	4b88      	ldr	r3, [pc, #544]	; (8009238 <tcp_receive+0xb08>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	441a      	add	r2, r3
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009024:	2b00      	cmp	r3, #0
 8009026:	dd4d      	ble.n	80090c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	b29a      	uxth	r2, r3
 8009030:	4b81      	ldr	r3, [pc, #516]	; (8009238 <tcp_receive+0xb08>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	b29b      	uxth	r3, r3
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	b29a      	uxth	r2, r3
 800903a:	4b80      	ldr	r3, [pc, #512]	; (800923c <tcp_receive+0xb0c>)
 800903c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800903e:	4b7f      	ldr	r3, [pc, #508]	; (800923c <tcp_receive+0xb0c>)
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	899b      	ldrh	r3, [r3, #12]
 8009044:	b29b      	uxth	r3, r3
 8009046:	4618      	mov	r0, r3
 8009048:	f7fa ff60 	bl	8003f0c <lwip_htons>
 800904c:	4603      	mov	r3, r0
 800904e:	b2db      	uxtb	r3, r3
 8009050:	f003 0302 	and.w	r3, r3, #2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <tcp_receive+0x934>
                inseg.len -= 1;
 8009058:	4b78      	ldr	r3, [pc, #480]	; (800923c <tcp_receive+0xb0c>)
 800905a:	891b      	ldrh	r3, [r3, #8]
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	4b76      	ldr	r3, [pc, #472]	; (800923c <tcp_receive+0xb0c>)
 8009062:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009064:	4b75      	ldr	r3, [pc, #468]	; (800923c <tcp_receive+0xb0c>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	4a74      	ldr	r2, [pc, #464]	; (800923c <tcp_receive+0xb0c>)
 800906a:	8912      	ldrh	r2, [r2, #8]
 800906c:	4611      	mov	r1, r2
 800906e:	4618      	mov	r0, r3
 8009070:	f7fc f8ea 	bl	8005248 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009074:	4b71      	ldr	r3, [pc, #452]	; (800923c <tcp_receive+0xb0c>)
 8009076:	891c      	ldrh	r4, [r3, #8]
 8009078:	4b70      	ldr	r3, [pc, #448]	; (800923c <tcp_receive+0xb0c>)
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	899b      	ldrh	r3, [r3, #12]
 800907e:	b29b      	uxth	r3, r3
 8009080:	4618      	mov	r0, r3
 8009082:	f7fa ff43 	bl	8003f0c <lwip_htons>
 8009086:	4603      	mov	r3, r0
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <tcp_receive+0x966>
 8009092:	2301      	movs	r3, #1
 8009094:	e000      	b.n	8009098 <tcp_receive+0x968>
 8009096:	2300      	movs	r3, #0
 8009098:	4423      	add	r3, r4
 800909a:	b29a      	uxth	r2, r3
 800909c:	4b65      	ldr	r3, [pc, #404]	; (8009234 <tcp_receive+0xb04>)
 800909e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80090a0:	4b64      	ldr	r3, [pc, #400]	; (8009234 <tcp_receive+0xb04>)
 80090a2:	881b      	ldrh	r3, [r3, #0]
 80090a4:	461a      	mov	r2, r3
 80090a6:	4b64      	ldr	r3, [pc, #400]	; (8009238 <tcp_receive+0xb08>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	441a      	add	r2, r3
 80090ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d006      	beq.n	80090c4 <tcp_receive+0x994>
 80090b6:	4b62      	ldr	r3, [pc, #392]	; (8009240 <tcp_receive+0xb10>)
 80090b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80090bc:	4961      	ldr	r1, [pc, #388]	; (8009244 <tcp_receive+0xb14>)
 80090be:	4862      	ldr	r0, [pc, #392]	; (8009248 <tcp_receive+0xb18>)
 80090c0:	f006 fe00 	bl	800fcc4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80090ca:	4b5a      	ldr	r3, [pc, #360]	; (8009234 <tcp_receive+0xb04>)
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	4b59      	ldr	r3, [pc, #356]	; (8009238 <tcp_receive+0xb08>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	441a      	add	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80090de:	4b55      	ldr	r3, [pc, #340]	; (8009234 <tcp_receive+0xb04>)
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d206      	bcs.n	80090f4 <tcp_receive+0x9c4>
 80090e6:	4b56      	ldr	r3, [pc, #344]	; (8009240 <tcp_receive+0xb10>)
 80090e8:	f240 6207 	movw	r2, #1543	; 0x607
 80090ec:	4957      	ldr	r1, [pc, #348]	; (800924c <tcp_receive+0xb1c>)
 80090ee:	4856      	ldr	r0, [pc, #344]	; (8009248 <tcp_receive+0xb18>)
 80090f0:	f006 fde8 	bl	800fcc4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80090f8:	4b4e      	ldr	r3, [pc, #312]	; (8009234 <tcp_receive+0xb04>)
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fc ffc9 	bl	800609c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800910a:	4b4c      	ldr	r3, [pc, #304]	; (800923c <tcp_receive+0xb0c>)
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	891b      	ldrh	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d006      	beq.n	8009122 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009114:	4b49      	ldr	r3, [pc, #292]	; (800923c <tcp_receive+0xb0c>)
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	4a4d      	ldr	r2, [pc, #308]	; (8009250 <tcp_receive+0xb20>)
 800911a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800911c:	4b47      	ldr	r3, [pc, #284]	; (800923c <tcp_receive+0xb0c>)
 800911e:	2200      	movs	r2, #0
 8009120:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009122:	4b46      	ldr	r3, [pc, #280]	; (800923c <tcp_receive+0xb0c>)
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	899b      	ldrh	r3, [r3, #12]
 8009128:	b29b      	uxth	r3, r3
 800912a:	4618      	mov	r0, r3
 800912c:	f7fa feee 	bl	8003f0c <lwip_htons>
 8009130:	4603      	mov	r3, r0
 8009132:	b2db      	uxtb	r3, r3
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	f000 80b8 	beq.w	80092ae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800913e:	4b45      	ldr	r3, [pc, #276]	; (8009254 <tcp_receive+0xb24>)
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	f043 0320 	orr.w	r3, r3, #32
 8009146:	b2da      	uxtb	r2, r3
 8009148:	4b42      	ldr	r3, [pc, #264]	; (8009254 <tcp_receive+0xb24>)
 800914a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800914c:	e0af      	b.n	80092ae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009152:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	4a36      	ldr	r2, [pc, #216]	; (8009238 <tcp_receive+0xb08>)
 800915e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	891b      	ldrh	r3, [r3, #8]
 8009164:	461c      	mov	r4, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	899b      	ldrh	r3, [r3, #12]
 800916c:	b29b      	uxth	r3, r3
 800916e:	4618      	mov	r0, r3
 8009170:	f7fa fecc 	bl	8003f0c <lwip_htons>
 8009174:	4603      	mov	r3, r0
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <tcp_receive+0xa54>
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <tcp_receive+0xa56>
 8009184:	2300      	movs	r3, #0
 8009186:	191a      	adds	r2, r3, r4
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	441a      	add	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009196:	461c      	mov	r4, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	891b      	ldrh	r3, [r3, #8]
 800919c:	461d      	mov	r5, r3
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	899b      	ldrh	r3, [r3, #12]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fa feb0 	bl	8003f0c <lwip_htons>
 80091ac:	4603      	mov	r3, r0
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	f003 0303 	and.w	r3, r3, #3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <tcp_receive+0xa8c>
 80091b8:	2301      	movs	r3, #1
 80091ba:	e000      	b.n	80091be <tcp_receive+0xa8e>
 80091bc:	2300      	movs	r3, #0
 80091be:	442b      	add	r3, r5
 80091c0:	429c      	cmp	r4, r3
 80091c2:	d206      	bcs.n	80091d2 <tcp_receive+0xaa2>
 80091c4:	4b1e      	ldr	r3, [pc, #120]	; (8009240 <tcp_receive+0xb10>)
 80091c6:	f240 622b 	movw	r2, #1579	; 0x62b
 80091ca:	4923      	ldr	r1, [pc, #140]	; (8009258 <tcp_receive+0xb28>)
 80091cc:	481e      	ldr	r0, [pc, #120]	; (8009248 <tcp_receive+0xb18>)
 80091ce:	f006 fd79 	bl	800fcc4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	891b      	ldrh	r3, [r3, #8]
 80091d6:	461c      	mov	r4, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	899b      	ldrh	r3, [r3, #12]
 80091de:	b29b      	uxth	r3, r3
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fa fe93 	bl	8003f0c <lwip_htons>
 80091e6:	4603      	mov	r3, r0
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <tcp_receive+0xac6>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <tcp_receive+0xac8>
 80091f6:	2300      	movs	r3, #0
 80091f8:	1919      	adds	r1, r3, r4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80091fe:	b28b      	uxth	r3, r1
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	b29a      	uxth	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7fc ff47 	bl	800609c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	891b      	ldrh	r3, [r3, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d028      	beq.n	800926a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009218:	4b0d      	ldr	r3, [pc, #52]	; (8009250 <tcp_receive+0xb20>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01d      	beq.n	800925c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <tcp_receive+0xb20>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	4619      	mov	r1, r3
 800922a:	4610      	mov	r0, r2
 800922c:	f7fc fa54 	bl	80056d8 <pbuf_cat>
 8009230:	e018      	b.n	8009264 <tcp_receive+0xb34>
 8009232:	bf00      	nop
 8009234:	20000102 	.word	0x20000102
 8009238:	200000f8 	.word	0x200000f8
 800923c:	200000d8 	.word	0x200000d8
 8009240:	08011f44 	.word	0x08011f44
 8009244:	08012324 	.word	0x08012324
 8009248:	08011f90 	.word	0x08011f90
 800924c:	08012360 	.word	0x08012360
 8009250:	20000108 	.word	0x20000108
 8009254:	20000105 	.word	0x20000105
 8009258:	08012380 	.word	0x08012380
            } else {
              recv_data = cseg->p;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4a70      	ldr	r2, [pc, #448]	; (8009424 <tcp_receive+0xcf4>)
 8009262:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	899b      	ldrh	r3, [r3, #12]
 8009270:	b29b      	uxth	r3, r3
 8009272:	4618      	mov	r0, r3
 8009274:	f7fa fe4a 	bl	8003f0c <lwip_htons>
 8009278:	4603      	mov	r3, r0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00d      	beq.n	80092a0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009284:	4b68      	ldr	r3, [pc, #416]	; (8009428 <tcp_receive+0xcf8>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	f043 0320 	orr.w	r3, r3, #32
 800928c:	b2da      	uxtb	r2, r3
 800928e:	4b66      	ldr	r3, [pc, #408]	; (8009428 <tcp_receive+0xcf8>)
 8009290:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	7d1b      	ldrb	r3, [r3, #20]
 8009296:	2b04      	cmp	r3, #4
 8009298:	d102      	bne.n	80092a0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2207      	movs	r2, #7
 800929e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80092a8:	68b8      	ldr	r0, [r7, #8]
 80092aa:	f7fd fbd6 	bl	8006a5a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d008      	beq.n	80092c8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80092c2:	429a      	cmp	r2, r3
 80092c4:	f43f af43 	beq.w	800914e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8b5b      	ldrh	r3, [r3, #26]
 80092cc:	f003 0301 	and.w	r3, r3, #1
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00e      	beq.n	80092f2 <tcp_receive+0xbc2>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8b5b      	ldrh	r3, [r3, #26]
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	835a      	strh	r2, [r3, #26]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	8b5b      	ldrh	r3, [r3, #26]
 80092e6:	f043 0302 	orr.w	r3, r3, #2
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80092f0:	e188      	b.n	8009604 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8b5b      	ldrh	r3, [r3, #26]
 80092f6:	f043 0301 	orr.w	r3, r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009300:	e180      	b.n	8009604 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800930a:	4848      	ldr	r0, [pc, #288]	; (800942c <tcp_receive+0xcfc>)
 800930c:	f7fd fbbe 	bl	8006a8c <tcp_seg_copy>
 8009310:	4602      	mov	r2, r0
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	675a      	str	r2, [r3, #116]	; 0x74
 8009316:	e16d      	b.n	80095f4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009318:	2300      	movs	r3, #0
 800931a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009320:	63bb      	str	r3, [r7, #56]	; 0x38
 8009322:	e157      	b.n	80095d4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	4b41      	ldr	r3, [pc, #260]	; (8009430 <tcp_receive+0xd00>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	429a      	cmp	r2, r3
 8009330:	d11d      	bne.n	800936e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009332:	4b3e      	ldr	r3, [pc, #248]	; (800942c <tcp_receive+0xcfc>)
 8009334:	891a      	ldrh	r2, [r3, #8]
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	891b      	ldrh	r3, [r3, #8]
 800933a:	429a      	cmp	r2, r3
 800933c:	f240 814f 	bls.w	80095de <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009340:	483a      	ldr	r0, [pc, #232]	; (800942c <tcp_receive+0xcfc>)
 8009342:	f7fd fba3 	bl	8006a8c <tcp_seg_copy>
 8009346:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	f000 8149 	beq.w	80095e2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	e002      	b.n	8009364 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009366:	6978      	ldr	r0, [r7, #20]
 8009368:	f7ff f8de 	bl	8008528 <tcp_oos_insert_segment>
                }
                break;
 800936c:	e139      	b.n	80095e2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d117      	bne.n	80093a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009374:	4b2e      	ldr	r3, [pc, #184]	; (8009430 <tcp_receive+0xd00>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	da57      	bge.n	8009434 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009384:	4829      	ldr	r0, [pc, #164]	; (800942c <tcp_receive+0xcfc>)
 8009386:	f7fd fb81 	bl	8006a8c <tcp_seg_copy>
 800938a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 8129 	beq.w	80095e6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800939a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800939c:	69b8      	ldr	r0, [r7, #24]
 800939e:	f7ff f8c3 	bl	8008528 <tcp_oos_insert_segment>
                  }
                  break;
 80093a2:	e120      	b.n	80095e6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80093a4:	4b22      	ldr	r3, [pc, #136]	; (8009430 <tcp_receive+0xd00>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	db3e      	blt.n	8009434 <tcp_receive+0xd04>
 80093b6:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <tcp_receive+0xd00>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	3301      	adds	r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	dc35      	bgt.n	8009434 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80093c8:	4818      	ldr	r0, [pc, #96]	; (800942c <tcp_receive+0xcfc>)
 80093ca:	f7fd fb5f 	bl	8006a8c <tcp_seg_copy>
 80093ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 8109 	beq.w	80095ea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80093d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e0:	8912      	ldrh	r2, [r2, #8]
 80093e2:	441a      	add	r2, r3
 80093e4:	4b12      	ldr	r3, [pc, #72]	; (8009430 <tcp_receive+0xd00>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	dd12      	ble.n	8009414 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80093ee:	4b10      	ldr	r3, [pc, #64]	; (8009430 <tcp_receive+0xd00>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	b29a      	uxth	r2, r3
 8009400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009402:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800940a:	891b      	ldrh	r3, [r3, #8]
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f7fb ff1a 	bl	8005248 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800941a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800941c:	69f8      	ldr	r0, [r7, #28]
 800941e:	f7ff f883 	bl	8008528 <tcp_oos_insert_segment>
                  }
                  break;
 8009422:	e0e2      	b.n	80095ea <tcp_receive+0xeba>
 8009424:	20000108 	.word	0x20000108
 8009428:	20000105 	.word	0x20000105
 800942c:	200000d8 	.word	0x200000d8
 8009430:	200000f8 	.word	0x200000f8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009436:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f040 80c6 	bne.w	80095ce <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009442:	4b80      	ldr	r3, [pc, #512]	; (8009644 <tcp_receive+0xf14>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800944e:	2b00      	cmp	r3, #0
 8009450:	f340 80bd 	ble.w	80095ce <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	899b      	ldrh	r3, [r3, #12]
 800945a:	b29b      	uxth	r3, r3
 800945c:	4618      	mov	r0, r3
 800945e:	f7fa fd55 	bl	8003f0c <lwip_htons>
 8009462:	4603      	mov	r3, r0
 8009464:	b2db      	uxtb	r3, r3
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	f040 80bf 	bne.w	80095ee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009470:	4875      	ldr	r0, [pc, #468]	; (8009648 <tcp_receive+0xf18>)
 8009472:	f7fd fb0b 	bl	8006a8c <tcp_seg_copy>
 8009476:	4602      	mov	r2, r0
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80b6 	beq.w	80095f2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800948e:	8912      	ldrh	r2, [r2, #8]
 8009490:	441a      	add	r2, r3
 8009492:	4b6c      	ldr	r3, [pc, #432]	; (8009644 <tcp_receive+0xf14>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	dd12      	ble.n	80094c2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800949c:	4b69      	ldr	r3, [pc, #420]	; (8009644 <tcp_receive+0xf14>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b8:	891b      	ldrh	r3, [r3, #8]
 80094ba:	4619      	mov	r1, r3
 80094bc:	4610      	mov	r0, r2
 80094be:	f7fb fec3 	bl	8005248 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80094c2:	4b62      	ldr	r3, [pc, #392]	; (800964c <tcp_receive+0xf1c>)
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	4b5e      	ldr	r3, [pc, #376]	; (8009644 <tcp_receive+0xf14>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	441a      	add	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094d6:	440b      	add	r3, r1
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f340 8089 	ble.w	80095f2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	899b      	ldrh	r3, [r3, #12]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fa fd0e 	bl	8003f0c <lwip_htons>
 80094f0:	4603      	mov	r3, r0
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d022      	beq.n	8009542 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	899b      	ldrh	r3, [r3, #12]
 8009504:	b29b      	uxth	r3, r3
 8009506:	b21b      	sxth	r3, r3
 8009508:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800950c:	b21c      	sxth	r4, r3
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	899b      	ldrh	r3, [r3, #12]
 8009516:	b29b      	uxth	r3, r3
 8009518:	4618      	mov	r0, r3
 800951a:	f7fa fcf7 	bl	8003f0c <lwip_htons>
 800951e:	4603      	mov	r3, r0
 8009520:	b2db      	uxtb	r3, r3
 8009522:	b29b      	uxth	r3, r3
 8009524:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009528:	b29b      	uxth	r3, r3
 800952a:	4618      	mov	r0, r3
 800952c:	f7fa fcee 	bl	8003f0c <lwip_htons>
 8009530:	4603      	mov	r3, r0
 8009532:	b21b      	sxth	r3, r3
 8009534:	4323      	orrs	r3, r4
 8009536:	b21a      	sxth	r2, r3
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	b292      	uxth	r2, r2
 8009540:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	b29a      	uxth	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	4413      	add	r3, r2
 800954e:	b299      	uxth	r1, r3
 8009550:	4b3c      	ldr	r3, [pc, #240]	; (8009644 <tcp_receive+0xf14>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	b29a      	uxth	r2, r3
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	1a8a      	subs	r2, r1, r2
 800955c:	b292      	uxth	r2, r2
 800955e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	891b      	ldrh	r3, [r3, #8]
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7fb fe6a 	bl	8005248 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	891c      	ldrh	r4, [r3, #8]
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	899b      	ldrh	r3, [r3, #12]
 8009582:	b29b      	uxth	r3, r3
 8009584:	4618      	mov	r0, r3
 8009586:	f7fa fcc1 	bl	8003f0c <lwip_htons>
 800958a:	4603      	mov	r3, r0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <tcp_receive+0xe6a>
 8009596:	2301      	movs	r3, #1
 8009598:	e000      	b.n	800959c <tcp_receive+0xe6c>
 800959a:	2300      	movs	r3, #0
 800959c:	4423      	add	r3, r4
 800959e:	b29a      	uxth	r2, r3
 80095a0:	4b2a      	ldr	r3, [pc, #168]	; (800964c <tcp_receive+0xf1c>)
 80095a2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80095a4:	4b29      	ldr	r3, [pc, #164]	; (800964c <tcp_receive+0xf1c>)
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	4b26      	ldr	r3, [pc, #152]	; (8009644 <tcp_receive+0xf14>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	441a      	add	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095b8:	440b      	add	r3, r1
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d019      	beq.n	80095f2 <tcp_receive+0xec2>
 80095be:	4b24      	ldr	r3, [pc, #144]	; (8009650 <tcp_receive+0xf20>)
 80095c0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80095c4:	4923      	ldr	r1, [pc, #140]	; (8009654 <tcp_receive+0xf24>)
 80095c6:	4824      	ldr	r0, [pc, #144]	; (8009658 <tcp_receive+0xf28>)
 80095c8:	f006 fb7c 	bl	800fcc4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80095cc:	e011      	b.n	80095f2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80095d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f47f aea4 	bne.w	8009324 <tcp_receive+0xbf4>
 80095dc:	e00a      	b.n	80095f4 <tcp_receive+0xec4>
                break;
 80095de:	bf00      	nop
 80095e0:	e008      	b.n	80095f4 <tcp_receive+0xec4>
                break;
 80095e2:	bf00      	nop
 80095e4:	e006      	b.n	80095f4 <tcp_receive+0xec4>
                  break;
 80095e6:	bf00      	nop
 80095e8:	e004      	b.n	80095f4 <tcp_receive+0xec4>
                  break;
 80095ea:	bf00      	nop
 80095ec:	e002      	b.n	80095f4 <tcp_receive+0xec4>
                  break;
 80095ee:	bf00      	nop
 80095f0:	e000      	b.n	80095f4 <tcp_receive+0xec4>
                break;
 80095f2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 fa33 	bl	800aa60 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80095fa:	e003      	b.n	8009604 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 fa2f 	bl	800aa60 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009602:	e01a      	b.n	800963a <tcp_receive+0xf0a>
 8009604:	e019      	b.n	800963a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009606:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <tcp_receive+0xf14>)
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	db0a      	blt.n	800962a <tcp_receive+0xefa>
 8009614:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <tcp_receive+0xf14>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009620:	440b      	add	r3, r1
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	3301      	adds	r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	dd07      	ble.n	800963a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8b5b      	ldrh	r3, [r3, #26]
 800962e:	f043 0302 	orr.w	r3, r3, #2
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009638:	e7ff      	b.n	800963a <tcp_receive+0xf0a>
 800963a:	bf00      	nop
 800963c:	3750      	adds	r7, #80	; 0x50
 800963e:	46bd      	mov	sp, r7
 8009640:	bdb0      	pop	{r4, r5, r7, pc}
 8009642:	bf00      	nop
 8009644:	200000f8 	.word	0x200000f8
 8009648:	200000d8 	.word	0x200000d8
 800964c:	20000102 	.word	0x20000102
 8009650:	08011f44 	.word	0x08011f44
 8009654:	080122ec 	.word	0x080122ec
 8009658:	08011f90 	.word	0x08011f90

0800965c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009662:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <tcp_get_next_optbyte+0x5c>)
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	1c5a      	adds	r2, r3, #1
 8009668:	b291      	uxth	r1, r2
 800966a:	4a13      	ldr	r2, [pc, #76]	; (80096b8 <tcp_get_next_optbyte+0x5c>)
 800966c:	8011      	strh	r1, [r2, #0]
 800966e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009670:	4b12      	ldr	r3, [pc, #72]	; (80096bc <tcp_get_next_optbyte+0x60>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <tcp_get_next_optbyte+0x26>
 8009678:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <tcp_get_next_optbyte+0x64>)
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	88fa      	ldrh	r2, [r7, #6]
 800967e:	429a      	cmp	r2, r3
 8009680:	d208      	bcs.n	8009694 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009682:	4b10      	ldr	r3, [pc, #64]	; (80096c4 <tcp_get_next_optbyte+0x68>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3314      	adds	r3, #20
 8009688:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800968a:	88fb      	ldrh	r3, [r7, #6]
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	4413      	add	r3, r2
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	e00b      	b.n	80096ac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009694:	88fb      	ldrh	r3, [r7, #6]
 8009696:	b2da      	uxtb	r2, r3
 8009698:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <tcp_get_next_optbyte+0x64>)
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80096a2:	4b06      	ldr	r3, [pc, #24]	; (80096bc <tcp_get_next_optbyte+0x60>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	797b      	ldrb	r3, [r7, #5]
 80096a8:	4413      	add	r3, r2
 80096aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	200000f4 	.word	0x200000f4
 80096bc:	200000f0 	.word	0x200000f0
 80096c0:	200000ee 	.word	0x200000ee
 80096c4:	200000e8 	.word	0x200000e8

080096c8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d106      	bne.n	80096e4 <tcp_parseopt+0x1c>
 80096d6:	4b32      	ldr	r3, [pc, #200]	; (80097a0 <tcp_parseopt+0xd8>)
 80096d8:	f240 727d 	movw	r2, #1917	; 0x77d
 80096dc:	4931      	ldr	r1, [pc, #196]	; (80097a4 <tcp_parseopt+0xdc>)
 80096de:	4832      	ldr	r0, [pc, #200]	; (80097a8 <tcp_parseopt+0xe0>)
 80096e0:	f006 faf0 	bl	800fcc4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80096e4:	4b31      	ldr	r3, [pc, #196]	; (80097ac <tcp_parseopt+0xe4>)
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d055      	beq.n	8009798 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80096ec:	4b30      	ldr	r3, [pc, #192]	; (80097b0 <tcp_parseopt+0xe8>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	e045      	b.n	8009780 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80096f4:	f7ff ffb2 	bl	800965c <tcp_get_next_optbyte>
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d006      	beq.n	8009710 <tcp_parseopt+0x48>
 8009702:	2b02      	cmp	r3, #2
 8009704:	dc2b      	bgt.n	800975e <tcp_parseopt+0x96>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d041      	beq.n	800978e <tcp_parseopt+0xc6>
 800970a:	2b01      	cmp	r3, #1
 800970c:	d127      	bne.n	800975e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800970e:	e037      	b.n	8009780 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009710:	f7ff ffa4 	bl	800965c <tcp_get_next_optbyte>
 8009714:	4603      	mov	r3, r0
 8009716:	2b04      	cmp	r3, #4
 8009718:	d13b      	bne.n	8009792 <tcp_parseopt+0xca>
 800971a:	4b25      	ldr	r3, [pc, #148]	; (80097b0 <tcp_parseopt+0xe8>)
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	3301      	adds	r3, #1
 8009720:	4a22      	ldr	r2, [pc, #136]	; (80097ac <tcp_parseopt+0xe4>)
 8009722:	8812      	ldrh	r2, [r2, #0]
 8009724:	4293      	cmp	r3, r2
 8009726:	da34      	bge.n	8009792 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009728:	f7ff ff98 	bl	800965c <tcp_get_next_optbyte>
 800972c:	4603      	mov	r3, r0
 800972e:	b29b      	uxth	r3, r3
 8009730:	021b      	lsls	r3, r3, #8
 8009732:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009734:	f7ff ff92 	bl	800965c <tcp_get_next_optbyte>
 8009738:	4603      	mov	r3, r0
 800973a:	b29a      	uxth	r2, r3
 800973c:	89bb      	ldrh	r3, [r7, #12]
 800973e:	4313      	orrs	r3, r2
 8009740:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009742:	89bb      	ldrh	r3, [r7, #12]
 8009744:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009748:	d804      	bhi.n	8009754 <tcp_parseopt+0x8c>
 800974a:	89bb      	ldrh	r3, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <tcp_parseopt+0x8c>
 8009750:	89ba      	ldrh	r2, [r7, #12]
 8009752:	e001      	b.n	8009758 <tcp_parseopt+0x90>
 8009754:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800975c:	e010      	b.n	8009780 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800975e:	f7ff ff7d 	bl	800965c <tcp_get_next_optbyte>
 8009762:	4603      	mov	r3, r0
 8009764:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009766:	7afb      	ldrb	r3, [r7, #11]
 8009768:	2b01      	cmp	r3, #1
 800976a:	d914      	bls.n	8009796 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800976c:	7afb      	ldrb	r3, [r7, #11]
 800976e:	b29a      	uxth	r2, r3
 8009770:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <tcp_parseopt+0xe8>)
 8009772:	881b      	ldrh	r3, [r3, #0]
 8009774:	4413      	add	r3, r2
 8009776:	b29b      	uxth	r3, r3
 8009778:	3b02      	subs	r3, #2
 800977a:	b29a      	uxth	r2, r3
 800977c:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <tcp_parseopt+0xe8>)
 800977e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009780:	4b0b      	ldr	r3, [pc, #44]	; (80097b0 <tcp_parseopt+0xe8>)
 8009782:	881a      	ldrh	r2, [r3, #0]
 8009784:	4b09      	ldr	r3, [pc, #36]	; (80097ac <tcp_parseopt+0xe4>)
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	d3b3      	bcc.n	80096f4 <tcp_parseopt+0x2c>
 800978c:	e004      	b.n	8009798 <tcp_parseopt+0xd0>
          return;
 800978e:	bf00      	nop
 8009790:	e002      	b.n	8009798 <tcp_parseopt+0xd0>
            return;
 8009792:	bf00      	nop
 8009794:	e000      	b.n	8009798 <tcp_parseopt+0xd0>
            return;
 8009796:	bf00      	nop
      }
    }
  }
}
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	08011f44 	.word	0x08011f44
 80097a4:	080123a8 	.word	0x080123a8
 80097a8:	08011f90 	.word	0x08011f90
 80097ac:	200000ec 	.word	0x200000ec
 80097b0:	200000f4 	.word	0x200000f4

080097b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80097b4:	b480      	push	{r7}
 80097b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80097b8:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <tcp_trigger_input_pcb_close+0x1c>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	f043 0310 	orr.w	r3, r3, #16
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	4b03      	ldr	r3, [pc, #12]	; (80097d0 <tcp_trigger_input_pcb_close+0x1c>)
 80097c4:	701a      	strb	r2, [r3, #0]
}
 80097c6:	bf00      	nop
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	20000105 	.word	0x20000105

080097d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00a      	beq.n	80097fc <tcp_route+0x28>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	7a1b      	ldrb	r3, [r3, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d006      	beq.n	80097fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	7a1b      	ldrb	r3, [r3, #8]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fb fb4e 	bl	8004e94 <netif_get_by_index>
 80097f8:	4603      	mov	r3, r0
 80097fa:	e003      	b.n	8009804 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f005 f815 	bl	800e82c <ip4_route>
 8009802:	4603      	mov	r3, r0
  }
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	4613      	mov	r3, r2
 800981a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d105      	bne.n	800982e <tcp_create_segment+0x22>
 8009822:	4b44      	ldr	r3, [pc, #272]	; (8009934 <tcp_create_segment+0x128>)
 8009824:	22a3      	movs	r2, #163	; 0xa3
 8009826:	4944      	ldr	r1, [pc, #272]	; (8009938 <tcp_create_segment+0x12c>)
 8009828:	4844      	ldr	r0, [pc, #272]	; (800993c <tcp_create_segment+0x130>)
 800982a:	f006 fa4b 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d105      	bne.n	8009840 <tcp_create_segment+0x34>
 8009834:	4b3f      	ldr	r3, [pc, #252]	; (8009934 <tcp_create_segment+0x128>)
 8009836:	22a4      	movs	r2, #164	; 0xa4
 8009838:	4941      	ldr	r1, [pc, #260]	; (8009940 <tcp_create_segment+0x134>)
 800983a:	4840      	ldr	r0, [pc, #256]	; (800993c <tcp_create_segment+0x130>)
 800983c:	f006 fa42 	bl	800fcc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800984e:	2003      	movs	r0, #3
 8009850:	f7fa ffb2 	bl	80047b8 <memp_malloc>
 8009854:	6138      	str	r0, [r7, #16]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d104      	bne.n	8009866 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800985c:	68b8      	ldr	r0, [r7, #8]
 800985e:	f7fb fe79 	bl	8005554 <pbuf_free>
    return NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	e061      	b.n	800992a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800986c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	891a      	ldrh	r2, [r3, #8]
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	b29b      	uxth	r3, r3
 8009882:	429a      	cmp	r2, r3
 8009884:	d205      	bcs.n	8009892 <tcp_create_segment+0x86>
 8009886:	4b2b      	ldr	r3, [pc, #172]	; (8009934 <tcp_create_segment+0x128>)
 8009888:	22b0      	movs	r2, #176	; 0xb0
 800988a:	492e      	ldr	r1, [pc, #184]	; (8009944 <tcp_create_segment+0x138>)
 800988c:	482b      	ldr	r0, [pc, #172]	; (800993c <tcp_create_segment+0x130>)
 800988e:	f006 fa19 	bl	800fcc4 <iprintf>
  seg->len = p->tot_len - optlen;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	891a      	ldrh	r2, [r3, #8]
 8009896:	7dfb      	ldrb	r3, [r7, #23]
 8009898:	b29b      	uxth	r3, r3
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	b29a      	uxth	r2, r3
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80098a2:	2114      	movs	r1, #20
 80098a4:	68b8      	ldr	r0, [r7, #8]
 80098a6:	f7fb fdbf 	bl	8005428 <pbuf_add_header>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d004      	beq.n	80098ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80098b0:	6938      	ldr	r0, [r7, #16]
 80098b2:	f7fd f8d2 	bl	8006a5a <tcp_seg_free>
    return NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e037      	b.n	800992a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8ada      	ldrh	r2, [r3, #22]
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	68dc      	ldr	r4, [r3, #12]
 80098cc:	4610      	mov	r0, r2
 80098ce:	f7fa fb1d 	bl	8003f0c <lwip_htons>
 80098d2:	4603      	mov	r3, r0
 80098d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8b1a      	ldrh	r2, [r3, #24]
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	68dc      	ldr	r4, [r3, #12]
 80098de:	4610      	mov	r0, r2
 80098e0:	f7fa fb14 	bl	8003f0c <lwip_htons>
 80098e4:	4603      	mov	r3, r0
 80098e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	68dc      	ldr	r4, [r3, #12]
 80098ec:	6838      	ldr	r0, [r7, #0]
 80098ee:	f7fa fb22 	bl	8003f36 <lwip_htonl>
 80098f2:	4603      	mov	r3, r0
 80098f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	089b      	lsrs	r3, r3, #2
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	3305      	adds	r3, #5
 8009900:	b29b      	uxth	r3, r3
 8009902:	031b      	lsls	r3, r3, #12
 8009904:	b29a      	uxth	r2, r3
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	b29b      	uxth	r3, r3
 800990a:	4313      	orrs	r3, r2
 800990c:	b29a      	uxth	r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	68dc      	ldr	r4, [r3, #12]
 8009912:	4610      	mov	r0, r2
 8009914:	f7fa fafa 	bl	8003f0c <lwip_htons>
 8009918:	4603      	mov	r3, r0
 800991a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	749a      	strb	r2, [r3, #18]
 8009924:	2200      	movs	r2, #0
 8009926:	74da      	strb	r2, [r3, #19]
  return seg;
 8009928:	693b      	ldr	r3, [r7, #16]
}
 800992a:	4618      	mov	r0, r3
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	bd90      	pop	{r4, r7, pc}
 8009932:	bf00      	nop
 8009934:	080123c4 	.word	0x080123c4
 8009938:	080123f8 	.word	0x080123f8
 800993c:	08012418 	.word	0x08012418
 8009940:	08012440 	.word	0x08012440
 8009944:	08012464 	.word	0x08012464

08009948 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009948:	b590      	push	{r4, r7, lr}
 800994a:	b08b      	sub	sp, #44	; 0x2c
 800994c:	af02      	add	r7, sp, #8
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009954:	2300      	movs	r3, #0
 8009956:	61fb      	str	r3, [r7, #28]
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <tcp_split_unsent_seg+0x2c>
 8009966:	4b95      	ldr	r3, [pc, #596]	; (8009bbc <tcp_split_unsent_seg+0x274>)
 8009968:	f240 324b 	movw	r2, #843	; 0x34b
 800996c:	4994      	ldr	r1, [pc, #592]	; (8009bc0 <tcp_split_unsent_seg+0x278>)
 800996e:	4895      	ldr	r0, [pc, #596]	; (8009bc4 <tcp_split_unsent_seg+0x27c>)
 8009970:	f006 f9a8 	bl	800fcc4 <iprintf>

  useg = pcb->unsent;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009978:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009980:	f04f 33ff 	mov.w	r3, #4294967295
 8009984:	e116      	b.n	8009bb4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009986:	887b      	ldrh	r3, [r7, #2]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d109      	bne.n	80099a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800998c:	4b8b      	ldr	r3, [pc, #556]	; (8009bbc <tcp_split_unsent_seg+0x274>)
 800998e:	f240 3253 	movw	r2, #851	; 0x353
 8009992:	498d      	ldr	r1, [pc, #564]	; (8009bc8 <tcp_split_unsent_seg+0x280>)
 8009994:	488b      	ldr	r0, [pc, #556]	; (8009bc4 <tcp_split_unsent_seg+0x27c>)
 8009996:	f006 f995 	bl	800fcc4 <iprintf>
    return ERR_VAL;
 800999a:	f06f 0305 	mvn.w	r3, #5
 800999e:	e109      	b.n	8009bb4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	891b      	ldrh	r3, [r3, #8]
 80099a4:	887a      	ldrh	r2, [r7, #2]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d301      	bcc.n	80099ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e102      	b.n	8009bb4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099b2:	887a      	ldrh	r2, [r7, #2]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d906      	bls.n	80099c6 <tcp_split_unsent_seg+0x7e>
 80099b8:	4b80      	ldr	r3, [pc, #512]	; (8009bbc <tcp_split_unsent_seg+0x274>)
 80099ba:	f240 325b 	movw	r2, #859	; 0x35b
 80099be:	4983      	ldr	r1, [pc, #524]	; (8009bcc <tcp_split_unsent_seg+0x284>)
 80099c0:	4880      	ldr	r0, [pc, #512]	; (8009bc4 <tcp_split_unsent_seg+0x27c>)
 80099c2:	f006 f97f 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	891b      	ldrh	r3, [r3, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <tcp_split_unsent_seg+0x94>
 80099ce:	4b7b      	ldr	r3, [pc, #492]	; (8009bbc <tcp_split_unsent_seg+0x274>)
 80099d0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80099d4:	497e      	ldr	r1, [pc, #504]	; (8009bd0 <tcp_split_unsent_seg+0x288>)
 80099d6:	487b      	ldr	r0, [pc, #492]	; (8009bc4 <tcp_split_unsent_seg+0x27c>)
 80099d8:	f006 f974 	bl	800fcc4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	7a9b      	ldrb	r3, [r3, #10]
 80099e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	f003 0304 	and.w	r3, r3, #4
 80099ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	891a      	ldrh	r2, [r3, #8]
 80099f2:	887b      	ldrh	r3, [r7, #2]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	89bb      	ldrh	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009a06:	4619      	mov	r1, r3
 8009a08:	2036      	movs	r0, #54	; 0x36
 8009a0a:	f7fb fabf 	bl	8004f8c <pbuf_alloc>
 8009a0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f000 80b7 	beq.w	8009b86 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	891a      	ldrh	r2, [r3, #8]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	891b      	ldrh	r3, [r3, #8]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	887b      	ldrh	r3, [r7, #2]
 8009a28:	4413      	add	r3, r2
 8009a2a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	6858      	ldr	r0, [r3, #4]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
 8009a36:	18d1      	adds	r1, r2, r3
 8009a38:	897b      	ldrh	r3, [r7, #10]
 8009a3a:	89ba      	ldrh	r2, [r7, #12]
 8009a3c:	f7fb ff84 	bl	8005948 <pbuf_copy_partial>
 8009a40:	4603      	mov	r3, r0
 8009a42:	461a      	mov	r2, r3
 8009a44:	89bb      	ldrh	r3, [r7, #12]
 8009a46:	4293      	cmp	r3, r2
 8009a48:	f040 809f 	bne.w	8009b8a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	899b      	ldrh	r3, [r3, #12]
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fa fa59 	bl	8003f0c <lwip_htons>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a62:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009a64:	2300      	movs	r3, #0
 8009a66:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009a68:	7efb      	ldrb	r3, [r7, #27]
 8009a6a:	f003 0308 	and.w	r3, r3, #8
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d007      	beq.n	8009a82 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009a72:	7efb      	ldrb	r3, [r7, #27]
 8009a74:	f023 0308 	bic.w	r3, r3, #8
 8009a78:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009a7a:	7ebb      	ldrb	r3, [r7, #26]
 8009a7c:	f043 0308 	orr.w	r3, r3, #8
 8009a80:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009a82:	7efb      	ldrb	r3, [r7, #27]
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009a8c:	7efb      	ldrb	r3, [r7, #27]
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009a94:	7ebb      	ldrb	r3, [r7, #26]
 8009a96:	f043 0301 	orr.w	r3, r3, #1
 8009a9a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fa fa47 	bl	8003f36 <lwip_htonl>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	887b      	ldrh	r3, [r7, #2]
 8009aac:	18d1      	adds	r1, r2, r3
 8009aae:	7eba      	ldrb	r2, [r7, #26]
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	6939      	ldr	r1, [r7, #16]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff fea7 	bl	800980c <tcp_create_segment>
 8009abe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d063      	beq.n	8009b8e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fb fdca 	bl	8005664 <pbuf_clen>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	6858      	ldr	r0, [r3, #4]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	891a      	ldrh	r2, [r3, #8]
 8009aee:	89bb      	ldrh	r3, [r7, #12]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	4619      	mov	r1, r3
 8009af6:	f7fb fba7 	bl	8005248 <pbuf_realloc>
  useg->len -= remainder;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	891a      	ldrh	r2, [r3, #8]
 8009afe:	89bb      	ldrh	r3, [r7, #12]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	899b      	ldrh	r3, [r3, #12]
 8009b0e:	b29c      	uxth	r4, r3
 8009b10:	7efb      	ldrb	r3, [r7, #27]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fa f9f9 	bl	8003f0c <lwip_htons>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	4322      	orrs	r2, r4
 8009b24:	b292      	uxth	r2, r2
 8009b26:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fb fd99 	bl	8005664 <pbuf_clen>
 8009b32:	4603      	mov	r3, r0
 8009b34:	461a      	mov	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b3c:	4413      	add	r3, r2
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fb fd8a 	bl	8005664 <pbuf_clen>
 8009b50:	4603      	mov	r3, r0
 8009b52:	461a      	mov	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b5a:	4413      	add	r3, r2
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d103      	bne.n	8009b82 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e016      	b.n	8009bb4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009b86:	bf00      	nop
 8009b88:	e002      	b.n	8009b90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009b8a:	bf00      	nop
 8009b8c:	e000      	b.n	8009b90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009b8e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d006      	beq.n	8009ba4 <tcp_split_unsent_seg+0x25c>
 8009b96:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <tcp_split_unsent_seg+0x274>)
 8009b98:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009b9c:	490d      	ldr	r1, [pc, #52]	; (8009bd4 <tcp_split_unsent_seg+0x28c>)
 8009b9e:	4809      	ldr	r0, [pc, #36]	; (8009bc4 <tcp_split_unsent_seg+0x27c>)
 8009ba0:	f006 f890 	bl	800fcc4 <iprintf>
  if (p != NULL) {
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009baa:	6938      	ldr	r0, [r7, #16]
 8009bac:	f7fb fcd2 	bl	8005554 <pbuf_free>
  }

  return ERR_MEM;
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3724      	adds	r7, #36	; 0x24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd90      	pop	{r4, r7, pc}
 8009bbc:	080123c4 	.word	0x080123c4
 8009bc0:	08012758 	.word	0x08012758
 8009bc4:	08012418 	.word	0x08012418
 8009bc8:	0801277c 	.word	0x0801277c
 8009bcc:	080127a0 	.word	0x080127a0
 8009bd0:	080127b0 	.word	0x080127b0
 8009bd4:	080127c0 	.word	0x080127c0

08009bd8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d106      	bne.n	8009bf4 <tcp_send_fin+0x1c>
 8009be6:	4b21      	ldr	r3, [pc, #132]	; (8009c6c <tcp_send_fin+0x94>)
 8009be8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009bec:	4920      	ldr	r1, [pc, #128]	; (8009c70 <tcp_send_fin+0x98>)
 8009bee:	4821      	ldr	r0, [pc, #132]	; (8009c74 <tcp_send_fin+0x9c>)
 8009bf0:	f006 f868 	bl	800fcc4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d02e      	beq.n	8009c5a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	e002      	b.n	8009c0a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1f8      	bne.n	8009c04 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	899b      	ldrh	r3, [r3, #12]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fa f976 	bl	8003f0c <lwip_htons>
 8009c20:	4603      	mov	r3, r0
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	f003 0307 	and.w	r3, r3, #7
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d116      	bne.n	8009c5a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	899b      	ldrh	r3, [r3, #12]
 8009c32:	b29c      	uxth	r4, r3
 8009c34:	2001      	movs	r0, #1
 8009c36:	f7fa f969 	bl	8003f0c <lwip_htons>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	4322      	orrs	r2, r4
 8009c44:	b292      	uxth	r2, r2
 8009c46:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	8b5b      	ldrh	r3, [r3, #26]
 8009c4c:	f043 0320 	orr.w	r3, r3, #32
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	e004      	b.n	8009c64 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f80b 	bl	8009c78 <tcp_enqueue_flags>
 8009c62:	4603      	mov	r3, r0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd90      	pop	{r4, r7, pc}
 8009c6c:	080123c4 	.word	0x080123c4
 8009c70:	080127cc 	.word	0x080127cc
 8009c74:	08012418 	.word	0x08012418

08009c78 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009c84:	2300      	movs	r3, #0
 8009c86:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	f003 0303 	and.w	r3, r3, #3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <tcp_enqueue_flags+0x2c>
 8009c96:	4b67      	ldr	r3, [pc, #412]	; (8009e34 <tcp_enqueue_flags+0x1bc>)
 8009c98:	f240 4211 	movw	r2, #1041	; 0x411
 8009c9c:	4966      	ldr	r1, [pc, #408]	; (8009e38 <tcp_enqueue_flags+0x1c0>)
 8009c9e:	4867      	ldr	r0, [pc, #412]	; (8009e3c <tcp_enqueue_flags+0x1c4>)
 8009ca0:	f006 f810 	bl	800fcc4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <tcp_enqueue_flags+0x40>
 8009caa:	4b62      	ldr	r3, [pc, #392]	; (8009e34 <tcp_enqueue_flags+0x1bc>)
 8009cac:	f240 4213 	movw	r2, #1043	; 0x413
 8009cb0:	4963      	ldr	r1, [pc, #396]	; (8009e40 <tcp_enqueue_flags+0x1c8>)
 8009cb2:	4862      	ldr	r0, [pc, #392]	; (8009e3c <tcp_enqueue_flags+0x1c4>)
 8009cb4:	f006 f806 	bl	800fcc4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009cc6:	7ffb      	ldrb	r3, [r7, #31]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009cda:	4619      	mov	r1, r3
 8009cdc:	2036      	movs	r0, #54	; 0x36
 8009cde:	f7fb f955 	bl	8004f8c <pbuf_alloc>
 8009ce2:	6138      	str	r0, [r7, #16]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	8b5b      	ldrh	r3, [r3, #26]
 8009cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfc:	e095      	b.n	8009e2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	895a      	ldrh	r2, [r3, #10]
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d206      	bcs.n	8009d18 <tcp_enqueue_flags+0xa0>
 8009d0a:	4b4a      	ldr	r3, [pc, #296]	; (8009e34 <tcp_enqueue_flags+0x1bc>)
 8009d0c:	f240 4239 	movw	r2, #1081	; 0x439
 8009d10:	494c      	ldr	r1, [pc, #304]	; (8009e44 <tcp_enqueue_flags+0x1cc>)
 8009d12:	484a      	ldr	r0, [pc, #296]	; (8009e3c <tcp_enqueue_flags+0x1c4>)
 8009d14:	f005 ffd6 	bl	800fcc4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009d1c:	78fa      	ldrb	r2, [r7, #3]
 8009d1e:	7ffb      	ldrb	r3, [r7, #31]
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	460b      	mov	r3, r1
 8009d24:	6939      	ldr	r1, [r7, #16]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fd70 	bl	800980c <tcp_create_segment>
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d109      	bne.n	8009d48 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	8b5b      	ldrh	r3, [r3, #26]
 8009d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009d42:	f04f 33ff 	mov.w	r3, #4294967295
 8009d46:	e070      	b.n	8009e2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f003 0303 	and.w	r3, r3, #3
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d006      	beq.n	8009d62 <tcp_enqueue_flags+0xea>
 8009d54:	4b37      	ldr	r3, [pc, #220]	; (8009e34 <tcp_enqueue_flags+0x1bc>)
 8009d56:	f240 4242 	movw	r2, #1090	; 0x442
 8009d5a:	493b      	ldr	r1, [pc, #236]	; (8009e48 <tcp_enqueue_flags+0x1d0>)
 8009d5c:	4837      	ldr	r0, [pc, #220]	; (8009e3c <tcp_enqueue_flags+0x1c4>)
 8009d5e:	f005 ffb1 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	891b      	ldrh	r3, [r3, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d006      	beq.n	8009d78 <tcp_enqueue_flags+0x100>
 8009d6a:	4b32      	ldr	r3, [pc, #200]	; (8009e34 <tcp_enqueue_flags+0x1bc>)
 8009d6c:	f240 4243 	movw	r2, #1091	; 0x443
 8009d70:	4936      	ldr	r1, [pc, #216]	; (8009e4c <tcp_enqueue_flags+0x1d4>)
 8009d72:	4832      	ldr	r0, [pc, #200]	; (8009e3c <tcp_enqueue_flags+0x1c4>)
 8009d74:	f005 ffa6 	bl	800fcc4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d103      	bne.n	8009d88 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d86:	e00d      	b.n	8009da4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d8c:	61bb      	str	r3, [r7, #24]
 8009d8e:	e002      	b.n	8009d96 <tcp_enqueue_flags+0x11e>
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	61bb      	str	r3, [r7, #24]
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1f8      	bne.n	8009d90 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d104      	bne.n	8009dc0 <tcp_enqueue_flags+0x148>
 8009db6:	78fb      	ldrb	r3, [r7, #3]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	8b5b      	ldrh	r3, [r3, #26]
 8009dd8:	f043 0320 	orr.w	r3, r3, #32
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7fb fc3c 	bl	8005664 <pbuf_clen>
 8009dec:	4603      	mov	r3, r0
 8009dee:	461a      	mov	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009df6:	4413      	add	r3, r2
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00e      	beq.n	8009e28 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <tcp_enqueue_flags+0x1b0>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d106      	bne.n	8009e28 <tcp_enqueue_flags+0x1b0>
 8009e1a:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <tcp_enqueue_flags+0x1bc>)
 8009e1c:	f240 4265 	movw	r2, #1125	; 0x465
 8009e20:	490b      	ldr	r1, [pc, #44]	; (8009e50 <tcp_enqueue_flags+0x1d8>)
 8009e22:	4806      	ldr	r0, [pc, #24]	; (8009e3c <tcp_enqueue_flags+0x1c4>)
 8009e24:	f005 ff4e 	bl	800fcc4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3720      	adds	r7, #32
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	080123c4 	.word	0x080123c4
 8009e38:	080127e8 	.word	0x080127e8
 8009e3c:	08012418 	.word	0x08012418
 8009e40:	08012840 	.word	0x08012840
 8009e44:	08012860 	.word	0x08012860
 8009e48:	0801289c 	.word	0x0801289c
 8009e4c:	080128b4 	.word	0x080128b4
 8009e50:	080128e0 	.word	0x080128e0

08009e54 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009e54:	b5b0      	push	{r4, r5, r7, lr}
 8009e56:	b08a      	sub	sp, #40	; 0x28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d106      	bne.n	8009e70 <tcp_output+0x1c>
 8009e62:	4b9e      	ldr	r3, [pc, #632]	; (800a0dc <tcp_output+0x288>)
 8009e64:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009e68:	499d      	ldr	r1, [pc, #628]	; (800a0e0 <tcp_output+0x28c>)
 8009e6a:	489e      	ldr	r0, [pc, #632]	; (800a0e4 <tcp_output+0x290>)
 8009e6c:	f005 ff2a 	bl	800fcc4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	7d1b      	ldrb	r3, [r3, #20]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d106      	bne.n	8009e86 <tcp_output+0x32>
 8009e78:	4b98      	ldr	r3, [pc, #608]	; (800a0dc <tcp_output+0x288>)
 8009e7a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8009e7e:	499a      	ldr	r1, [pc, #616]	; (800a0e8 <tcp_output+0x294>)
 8009e80:	4898      	ldr	r0, [pc, #608]	; (800a0e4 <tcp_output+0x290>)
 8009e82:	f005 ff1f 	bl	800fcc4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009e86:	4b99      	ldr	r3, [pc, #612]	; (800a0ec <tcp_output+0x298>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d101      	bne.n	8009e94 <tcp_output+0x40>
    return ERR_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	e1ce      	b.n	800a232 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	bf28      	it	cs
 8009ea4:	4613      	movcs	r3, r2
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d10b      	bne.n	8009ece <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	8b5b      	ldrh	r3, [r3, #26]
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 81aa 	beq.w	800a218 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 fdcb 	bl	800aa60 <tcp_send_empty_ack>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	e1b1      	b.n	800a232 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fc7c 	bl	80097d4 <tcp_route>
 8009edc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <tcp_output+0x96>
    return ERR_RTE;
 8009ee4:	f06f 0303 	mvn.w	r3, #3
 8009ee8:	e1a3      	b.n	800a232 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <tcp_output+0xa4>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d111      	bne.n	8009f1c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <tcp_output+0xb0>
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	3304      	adds	r3, #4
 8009f02:	e000      	b.n	8009f06 <tcp_output+0xb2>
 8009f04:	2300      	movs	r3, #0
 8009f06:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d102      	bne.n	8009f14 <tcp_output+0xc0>
      return ERR_RTE;
 8009f0e:	f06f 0303 	mvn.w	r3, #3
 8009f12:	e18e      	b.n	800a232 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fa f807 	bl	8003f36 <lwip_htonl>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f32:	8912      	ldrh	r2, [r2, #8]
 8009f34:	4413      	add	r3, r2
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d227      	bcs.n	8009f8c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f42:	461a      	mov	r2, r3
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d114      	bne.n	8009f74 <tcp_output+0x120>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d110      	bne.n	8009f74 <tcp_output+0x120>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	8b5b      	ldrh	r3, [r3, #26]
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 814d 	beq.w	800a21c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fd6c 	bl	800aa60 <tcp_send_empty_ack>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	e152      	b.n	800a232 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f98:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 811c 	beq.w	800a1da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8009fa2:	e002      	b.n	8009faa <tcp_output+0x156>
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	623b      	str	r3, [r7, #32]
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1f8      	bne.n	8009fa4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009fb2:	e112      	b.n	800a1da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	899b      	ldrh	r3, [r3, #12]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f9 ffa5 	bl	8003f0c <lwip_htons>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <tcp_output+0x188>
 8009fce:	4b43      	ldr	r3, [pc, #268]	; (800a0dc <tcp_output+0x288>)
 8009fd0:	f240 5236 	movw	r2, #1334	; 0x536
 8009fd4:	4946      	ldr	r1, [pc, #280]	; (800a0f0 <tcp_output+0x29c>)
 8009fd6:	4843      	ldr	r0, [pc, #268]	; (800a0e4 <tcp_output+0x290>)
 8009fd8:	f005 fe74 	bl	800fcc4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01f      	beq.n	800a024 <tcp_output+0x1d0>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	8b5b      	ldrh	r3, [r3, #26]
 8009fe8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d119      	bne.n	800a024 <tcp_output+0x1d0>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <tcp_output+0x1bc>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d110      	bne.n	800a024 <tcp_output+0x1d0>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a006:	891a      	ldrh	r2, [r3, #8]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d209      	bcs.n	800a024 <tcp_output+0x1d0>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a016:	2b00      	cmp	r3, #0
 800a018:	d004      	beq.n	800a024 <tcp_output+0x1d0>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a020:	2b08      	cmp	r3, #8
 800a022:	d901      	bls.n	800a028 <tcp_output+0x1d4>
 800a024:	2301      	movs	r3, #1
 800a026:	e000      	b.n	800a02a <tcp_output+0x1d6>
 800a028:	2300      	movs	r3, #0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d106      	bne.n	800a03c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	8b5b      	ldrh	r3, [r3, #26]
 800a032:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a036:	2b00      	cmp	r3, #0
 800a038:	f000 80e4 	beq.w	800a204 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	7d1b      	ldrb	r3, [r3, #20]
 800a040:	2b02      	cmp	r3, #2
 800a042:	d00d      	beq.n	800a060 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	899b      	ldrh	r3, [r3, #12]
 800a04a:	b29c      	uxth	r4, r3
 800a04c:	2010      	movs	r0, #16
 800a04e:	f7f9 ff5d 	bl	8003f0c <lwip_htons>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	4322      	orrs	r2, r4
 800a05c:	b292      	uxth	r2, r2
 800a05e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a066:	f000 f909 	bl	800a27c <tcp_output_segment>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a06e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d009      	beq.n	800a08a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	8b5b      	ldrh	r3, [r3, #26]
 800a07a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a07e:	b29a      	uxth	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	835a      	strh	r2, [r3, #26]
      return err;
 800a084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a088:	e0d3      	b.n	800a232 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	7d1b      	ldrb	r3, [r3, #20]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d006      	beq.n	800a0a8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	8b5b      	ldrh	r3, [r3, #26]
 800a09e:	f023 0303 	bic.w	r3, r3, #3
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7f9 ff41 	bl	8003f36 <lwip_htonl>
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	891b      	ldrh	r3, [r3, #8]
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	899b      	ldrh	r3, [r3, #12]
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f9 ff21 	bl	8003f0c <lwip_htons>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00e      	beq.n	800a0f4 <tcp_output+0x2a0>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e00d      	b.n	800a0f6 <tcp_output+0x2a2>
 800a0da:	bf00      	nop
 800a0dc:	080123c4 	.word	0x080123c4
 800a0e0:	08012908 	.word	0x08012908
 800a0e4:	08012418 	.word	0x08012418
 800a0e8:	08012920 	.word	0x08012920
 800a0ec:	20006960 	.word	0x20006960
 800a0f0:	08012948 	.word	0x08012948
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	442b      	add	r3, r5
 800a0f8:	4423      	add	r3, r4
 800a0fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	da02      	bge.n	800a10e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	891b      	ldrh	r3, [r3, #8]
 800a112:	461c      	mov	r4, r3
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	899b      	ldrh	r3, [r3, #12]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7f9 fef5 	bl	8003f0c <lwip_htons>
 800a122:	4603      	mov	r3, r0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <tcp_output+0x2de>
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <tcp_output+0x2e0>
 800a132:	2300      	movs	r3, #0
 800a134:	4423      	add	r3, r4
 800a136:	2b00      	cmp	r3, #0
 800a138:	d049      	beq.n	800a1ce <tcp_output+0x37a>
      seg->next = NULL;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	2200      	movs	r2, #0
 800a13e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a144:	2b00      	cmp	r3, #0
 800a146:	d105      	bne.n	800a154 <tcp_output+0x300>
        pcb->unacked = seg;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	623b      	str	r3, [r7, #32]
 800a152:	e03f      	b.n	800a1d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7f9 feeb 	bl	8003f36 <lwip_htonl>
 800a160:	4604      	mov	r4, r0
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7f9 fee4 	bl	8003f36 <lwip_htonl>
 800a16e:	4603      	mov	r3, r0
 800a170:	1ae3      	subs	r3, r4, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	da24      	bge.n	800a1c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3370      	adds	r3, #112	; 0x70
 800a17a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a17c:	e002      	b.n	800a184 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d011      	beq.n	800a1b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	4618      	mov	r0, r3
 800a196:	f7f9 fece 	bl	8003f36 <lwip_htonl>
 800a19a:	4604      	mov	r4, r0
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7f9 fec7 	bl	8003f36 <lwip_htonl>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	dbe6      	blt.n	800a17e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	e009      	b.n	800a1d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	623b      	str	r3, [r7, #32]
 800a1cc:	e002      	b.n	800a1d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a1ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1d0:	f7fc fc43 	bl	8006a5a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d012      	beq.n	800a206 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7f9 fea5 	bl	8003f36 <lwip_htonl>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f6:	8912      	ldrh	r2, [r2, #8]
 800a1f8:	4413      	add	r3, r2
  while (seg != NULL &&
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	f4bf aed9 	bcs.w	8009fb4 <tcp_output+0x160>
 800a202:	e000      	b.n	800a206 <tcp_output+0x3b2>
      break;
 800a204:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d108      	bne.n	800a220 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a216:	e004      	b.n	800a222 <tcp_output+0x3ce>
    goto output_done;
 800a218:	bf00      	nop
 800a21a:	e002      	b.n	800a222 <tcp_output+0x3ce>
    goto output_done;
 800a21c:	bf00      	nop
 800a21e:	e000      	b.n	800a222 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a220:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	8b5b      	ldrh	r3, [r3, #26]
 800a226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3728      	adds	r7, #40	; 0x28
 800a236:	46bd      	mov	sp, r7
 800a238:	bdb0      	pop	{r4, r5, r7, pc}
 800a23a:	bf00      	nop

0800a23c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d106      	bne.n	800a258 <tcp_output_segment_busy+0x1c>
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <tcp_output_segment_busy+0x34>)
 800a24c:	f240 529a 	movw	r2, #1434	; 0x59a
 800a250:	4908      	ldr	r1, [pc, #32]	; (800a274 <tcp_output_segment_busy+0x38>)
 800a252:	4809      	ldr	r0, [pc, #36]	; (800a278 <tcp_output_segment_busy+0x3c>)
 800a254:	f005 fd36 	bl	800fcc4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	7b9b      	ldrb	r3, [r3, #14]
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d001      	beq.n	800a266 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	080123c4 	.word	0x080123c4
 800a274:	08012960 	.word	0x08012960
 800a278:	08012418 	.word	0x08012418

0800a27c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a27c:	b5b0      	push	{r4, r5, r7, lr}
 800a27e:	b08c      	sub	sp, #48	; 0x30
 800a280:	af04      	add	r7, sp, #16
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d106      	bne.n	800a29c <tcp_output_segment+0x20>
 800a28e:	4b63      	ldr	r3, [pc, #396]	; (800a41c <tcp_output_segment+0x1a0>)
 800a290:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a294:	4962      	ldr	r1, [pc, #392]	; (800a420 <tcp_output_segment+0x1a4>)
 800a296:	4863      	ldr	r0, [pc, #396]	; (800a424 <tcp_output_segment+0x1a8>)
 800a298:	f005 fd14 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <tcp_output_segment+0x34>
 800a2a2:	4b5e      	ldr	r3, [pc, #376]	; (800a41c <tcp_output_segment+0x1a0>)
 800a2a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a2a8:	495f      	ldr	r1, [pc, #380]	; (800a428 <tcp_output_segment+0x1ac>)
 800a2aa:	485e      	ldr	r0, [pc, #376]	; (800a424 <tcp_output_segment+0x1a8>)
 800a2ac:	f005 fd0a 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d106      	bne.n	800a2c4 <tcp_output_segment+0x48>
 800a2b6:	4b59      	ldr	r3, [pc, #356]	; (800a41c <tcp_output_segment+0x1a0>)
 800a2b8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a2bc:	495b      	ldr	r1, [pc, #364]	; (800a42c <tcp_output_segment+0x1b0>)
 800a2be:	4859      	ldr	r0, [pc, #356]	; (800a424 <tcp_output_segment+0x1a8>)
 800a2c0:	f005 fd00 	bl	800fcc4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f7ff ffb9 	bl	800a23c <tcp_output_segment_busy>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	e09f      	b.n	800a414 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	68dc      	ldr	r4, [r3, #12]
 800a2dc:	4610      	mov	r0, r2
 800a2de:	f7f9 fe2a 	bl	8003f36 <lwip_htonl>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68dc      	ldr	r4, [r3, #12]
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f7f9 fe0c 	bl	8003f0c <lwip_htons>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a300:	441a      	add	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	3314      	adds	r3, #20
 800a30c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	7a9b      	ldrb	r3, [r3, #10]
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d015      	beq.n	800a346 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	3304      	adds	r3, #4
 800a31e:	461a      	mov	r2, r3
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a326:	f7fc fe8f 	bl	8007048 <tcp_eff_send_mss_netif>
 800a32a:	4603      	mov	r3, r0
 800a32c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a32e:	8b7b      	ldrh	r3, [r7, #26]
 800a330:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a334:	4618      	mov	r0, r3
 800a336:	f7f9 fdfe 	bl	8003f36 <lwip_htonl>
 800a33a:	4602      	mov	r2, r0
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	3304      	adds	r3, #4
 800a344:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	da02      	bge.n	800a356 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2200      	movs	r2, #0
 800a354:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10c      	bne.n	800a378 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a35e:	4b34      	ldr	r3, [pc, #208]	; (800a430 <tcp_output_segment+0x1b4>)
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7f9 fde2 	bl	8003f36 <lwip_htonl>
 800a372:	4602      	mov	r2, r0
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	68da      	ldr	r2, [r3, #12]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	8959      	ldrh	r1, [r3, #10]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	8b3a      	ldrh	r2, [r7, #24]
 800a392:	1a8a      	subs	r2, r1, r2
 800a394:	b292      	uxth	r2, r2
 800a396:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	8919      	ldrh	r1, [r3, #8]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	8b3a      	ldrh	r2, [r7, #24]
 800a3a4:	1a8a      	subs	r2, r1, r2
 800a3a6:	b292      	uxth	r2, r2
 800a3a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	68d2      	ldr	r2, [r2, #12]
 800a3b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	741a      	strb	r2, [r3, #16]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f103 0214 	add.w	r2, r3, #20
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	7a9b      	ldrb	r3, [r3, #10]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	f003 0304 	and.w	r3, r3, #4
 800a3d2:	4413      	add	r3, r2
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d006      	beq.n	800a3e8 <tcp_output_segment+0x16c>
 800a3da:	4b10      	ldr	r3, [pc, #64]	; (800a41c <tcp_output_segment+0x1a0>)
 800a3dc:	f240 621c 	movw	r2, #1564	; 0x61c
 800a3e0:	4914      	ldr	r1, [pc, #80]	; (800a434 <tcp_output_segment+0x1b8>)
 800a3e2:	4810      	ldr	r0, [pc, #64]	; (800a424 <tcp_output_segment+0x1a8>)
 800a3e4:	f005 fc6e 	bl	800fcc4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6858      	ldr	r0, [r3, #4]
 800a3ec:	68b9      	ldr	r1, [r7, #8]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	1d1c      	adds	r4, r3, #4
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	7add      	ldrb	r5, [r3, #11]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	7a9b      	ldrb	r3, [r3, #10]
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	9202      	str	r2, [sp, #8]
 800a3fe:	2206      	movs	r2, #6
 800a400:	9201      	str	r2, [sp, #4]
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	462b      	mov	r3, r5
 800a406:	4622      	mov	r2, r4
 800a408:	f004 fbec 	bl	800ebe4 <ip4_output_if>
 800a40c:	4603      	mov	r3, r0
 800a40e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3720      	adds	r7, #32
 800a418:	46bd      	mov	sp, r7
 800a41a:	bdb0      	pop	{r4, r5, r7, pc}
 800a41c:	080123c4 	.word	0x080123c4
 800a420:	08012988 	.word	0x08012988
 800a424:	08012418 	.word	0x08012418
 800a428:	080129a8 	.word	0x080129a8
 800a42c:	080129c8 	.word	0x080129c8
 800a430:	20006950 	.word	0x20006950
 800a434:	080129ec 	.word	0x080129ec

0800a438 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a438:	b5b0      	push	{r4, r5, r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <tcp_rexmit_rto_prepare+0x1c>
 800a446:	4b31      	ldr	r3, [pc, #196]	; (800a50c <tcp_rexmit_rto_prepare+0xd4>)
 800a448:	f240 6263 	movw	r2, #1635	; 0x663
 800a44c:	4930      	ldr	r1, [pc, #192]	; (800a510 <tcp_rexmit_rto_prepare+0xd8>)
 800a44e:	4831      	ldr	r0, [pc, #196]	; (800a514 <tcp_rexmit_rto_prepare+0xdc>)
 800a450:	f005 fc38 	bl	800fcc4 <iprintf>

  if (pcb->unacked == NULL) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d102      	bne.n	800a462 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a45c:	f06f 0305 	mvn.w	r3, #5
 800a460:	e050      	b.n	800a504 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e00b      	b.n	800a482 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fee6 	bl	800a23c <tcp_output_segment_busy>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a476:	f06f 0305 	mvn.w	r3, #5
 800a47a:	e043      	b.n	800a504 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1ef      	bne.n	800a46a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fed6 	bl	800a23c <tcp_output_segment_busy>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a496:	f06f 0305 	mvn.w	r3, #5
 800a49a:	e033      	b.n	800a504 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	8b5b      	ldrh	r3, [r3, #26]
 800a4b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7f9 fd35 	bl	8003f36 <lwip_htonl>
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	891b      	ldrh	r3, [r3, #8]
 800a4d2:	461d      	mov	r5, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	899b      	ldrh	r3, [r3, #12]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7f9 fd15 	bl	8003f0c <lwip_htons>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	f003 0303 	and.w	r3, r3, #3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d001      	beq.n	800a4f2 <tcp_rexmit_rto_prepare+0xba>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e000      	b.n	800a4f4 <tcp_rexmit_rto_prepare+0xbc>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	442b      	add	r3, r5
 800a4f6:	18e2      	adds	r2, r4, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bdb0      	pop	{r4, r5, r7, pc}
 800a50c:	080123c4 	.word	0x080123c4
 800a510:	08012a00 	.word	0x08012a00
 800a514:	08012418 	.word	0x08012418

0800a518 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <tcp_rexmit_rto_commit+0x1c>
 800a526:	4b0d      	ldr	r3, [pc, #52]	; (800a55c <tcp_rexmit_rto_commit+0x44>)
 800a528:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a52c:	490c      	ldr	r1, [pc, #48]	; (800a560 <tcp_rexmit_rto_commit+0x48>)
 800a52e:	480d      	ldr	r0, [pc, #52]	; (800a564 <tcp_rexmit_rto_commit+0x4c>)
 800a530:	f005 fbc8 	bl	800fcc4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a53a:	2bff      	cmp	r3, #255	; 0xff
 800a53c:	d007      	beq.n	800a54e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a544:	3301      	adds	r3, #1
 800a546:	b2da      	uxtb	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff fc80 	bl	8009e54 <tcp_output>
}
 800a554:	bf00      	nop
 800a556:	3708      	adds	r7, #8
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	080123c4 	.word	0x080123c4
 800a560:	08012a24 	.word	0x08012a24
 800a564:	08012418 	.word	0x08012418

0800a568 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d106      	bne.n	800a584 <tcp_rexmit_rto+0x1c>
 800a576:	4b0a      	ldr	r3, [pc, #40]	; (800a5a0 <tcp_rexmit_rto+0x38>)
 800a578:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a57c:	4909      	ldr	r1, [pc, #36]	; (800a5a4 <tcp_rexmit_rto+0x3c>)
 800a57e:	480a      	ldr	r0, [pc, #40]	; (800a5a8 <tcp_rexmit_rto+0x40>)
 800a580:	f005 fba0 	bl	800fcc4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ff57 	bl	800a438 <tcp_rexmit_rto_prepare>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d102      	bne.n	800a596 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f7ff ffc1 	bl	800a518 <tcp_rexmit_rto_commit>
  }
}
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	080123c4 	.word	0x080123c4
 800a5a4:	08012a48 	.word	0x08012a48
 800a5a8:	08012418 	.word	0x08012418

0800a5ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a5ac:	b590      	push	{r4, r7, lr}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <tcp_rexmit+0x1c>
 800a5ba:	4b2f      	ldr	r3, [pc, #188]	; (800a678 <tcp_rexmit+0xcc>)
 800a5bc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a5c0:	492e      	ldr	r1, [pc, #184]	; (800a67c <tcp_rexmit+0xd0>)
 800a5c2:	482f      	ldr	r0, [pc, #188]	; (800a680 <tcp_rexmit+0xd4>)
 800a5c4:	f005 fb7e 	bl	800fcc4 <iprintf>

  if (pcb->unacked == NULL) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d102      	bne.n	800a5d6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a5d0:	f06f 0305 	mvn.w	r3, #5
 800a5d4:	e04c      	b.n	800a670 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5da:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a5dc:	68b8      	ldr	r0, [r7, #8]
 800a5de:	f7ff fe2d 	bl	800a23c <tcp_output_segment_busy>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d002      	beq.n	800a5ee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a5e8:	f06f 0305 	mvn.w	r3, #5
 800a5ec:	e040      	b.n	800a670 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	336c      	adds	r3, #108	; 0x6c
 800a5fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a5fc:	e002      	b.n	800a604 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d011      	beq.n	800a630 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	4618      	mov	r0, r3
 800a616:	f7f9 fc8e 	bl	8003f36 <lwip_htonl>
 800a61a:	4604      	mov	r4, r0
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	4618      	mov	r0, r3
 800a624:	f7f9 fc87 	bl	8003f36 <lwip_htonl>
 800a628:	4603      	mov	r3, r0
 800a62a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	dbe6      	blt.n	800a5fe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d103      	bne.n	800a64e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a654:	2bff      	cmp	r3, #255	; 0xff
 800a656:	d007      	beq.n	800a668 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a65e:	3301      	adds	r3, #1
 800a660:	b2da      	uxtb	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	bd90      	pop	{r4, r7, pc}
 800a678:	080123c4 	.word	0x080123c4
 800a67c:	08012a64 	.word	0x08012a64
 800a680:	08012418 	.word	0x08012418

0800a684 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d106      	bne.n	800a6a0 <tcp_rexmit_fast+0x1c>
 800a692:	4b2a      	ldr	r3, [pc, #168]	; (800a73c <tcp_rexmit_fast+0xb8>)
 800a694:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a698:	4929      	ldr	r1, [pc, #164]	; (800a740 <tcp_rexmit_fast+0xbc>)
 800a69a:	482a      	ldr	r0, [pc, #168]	; (800a744 <tcp_rexmit_fast+0xc0>)
 800a69c:	f005 fb12 	bl	800fcc4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d044      	beq.n	800a732 <tcp_rexmit_fast+0xae>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	8b5b      	ldrh	r3, [r3, #26]
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d13e      	bne.n	800a732 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff ff79 	bl	800a5ac <tcp_rexmit>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d138      	bne.n	800a732 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	bf28      	it	cs
 800a6d0:	4613      	movcs	r3, r2
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	0fda      	lsrs	r2, r3, #31
 800a6d6:	4413      	add	r3, r2
 800a6d8:	105b      	asrs	r3, r3, #1
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d206      	bcs.n	800a702 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6f8:	005b      	lsls	r3, r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a70c:	4619      	mov	r1, r3
 800a70e:	0049      	lsls	r1, r1, #1
 800a710:	440b      	add	r3, r1
 800a712:	b29b      	uxth	r3, r3
 800a714:	4413      	add	r3, r2
 800a716:	b29a      	uxth	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	8b5b      	ldrh	r3, [r3, #26]
 800a722:	f043 0304 	orr.w	r3, r3, #4
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a732:	bf00      	nop
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	080123c4 	.word	0x080123c4
 800a740:	08012a7c 	.word	0x08012a7c
 800a744:	08012418 	.word	0x08012418

0800a748 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	607b      	str	r3, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	817b      	strh	r3, [r7, #10]
 800a756:	4613      	mov	r3, r2
 800a758:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a75a:	897a      	ldrh	r2, [r7, #10]
 800a75c:	893b      	ldrh	r3, [r7, #8]
 800a75e:	4413      	add	r3, r2
 800a760:	b29b      	uxth	r3, r3
 800a762:	3314      	adds	r3, #20
 800a764:	b29b      	uxth	r3, r3
 800a766:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a76a:	4619      	mov	r1, r3
 800a76c:	2022      	movs	r0, #34	; 0x22
 800a76e:	f7fa fc0d 	bl	8004f8c <pbuf_alloc>
 800a772:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d04d      	beq.n	800a816 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a77a:	897b      	ldrh	r3, [r7, #10]
 800a77c:	3313      	adds	r3, #19
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	8952      	ldrh	r2, [r2, #10]
 800a782:	4293      	cmp	r3, r2
 800a784:	db06      	blt.n	800a794 <tcp_output_alloc_header_common+0x4c>
 800a786:	4b26      	ldr	r3, [pc, #152]	; (800a820 <tcp_output_alloc_header_common+0xd8>)
 800a788:	f240 7223 	movw	r2, #1827	; 0x723
 800a78c:	4925      	ldr	r1, [pc, #148]	; (800a824 <tcp_output_alloc_header_common+0xdc>)
 800a78e:	4826      	ldr	r0, [pc, #152]	; (800a828 <tcp_output_alloc_header_common+0xe0>)
 800a790:	f005 fa98 	bl	800fcc4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a79a:	8c3b      	ldrh	r3, [r7, #32]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7f9 fbb5 	bl	8003f0c <lwip_htons>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a7aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7f9 fbad 	bl	8003f0c <lwip_htons>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7f9 fbb8 	bl	8003f36 <lwip_htonl>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a7cc:	897b      	ldrh	r3, [r7, #10]
 800a7ce:	089b      	lsrs	r3, r3, #2
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	3305      	adds	r3, #5
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	031b      	lsls	r3, r3, #12
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7f9 fb91 	bl	8003f0c <lwip_htons>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a7f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7f9 fb89 	bl	8003f0c <lwip_htons>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2200      	movs	r2, #0
 800a806:	741a      	strb	r2, [r3, #16]
 800a808:	2200      	movs	r2, #0
 800a80a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2200      	movs	r2, #0
 800a810:	749a      	strb	r2, [r3, #18]
 800a812:	2200      	movs	r2, #0
 800a814:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a816:	697b      	ldr	r3, [r7, #20]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3718      	adds	r7, #24
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	080123c4 	.word	0x080123c4
 800a824:	08012a9c 	.word	0x08012a9c
 800a828:	08012418 	.word	0x08012418

0800a82c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a82c:	b5b0      	push	{r4, r5, r7, lr}
 800a82e:	b08a      	sub	sp, #40	; 0x28
 800a830:	af04      	add	r7, sp, #16
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	607b      	str	r3, [r7, #4]
 800a836:	460b      	mov	r3, r1
 800a838:	817b      	strh	r3, [r7, #10]
 800a83a:	4613      	mov	r3, r2
 800a83c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d106      	bne.n	800a852 <tcp_output_alloc_header+0x26>
 800a844:	4b15      	ldr	r3, [pc, #84]	; (800a89c <tcp_output_alloc_header+0x70>)
 800a846:	f240 7242 	movw	r2, #1858	; 0x742
 800a84a:	4915      	ldr	r1, [pc, #84]	; (800a8a0 <tcp_output_alloc_header+0x74>)
 800a84c:	4815      	ldr	r0, [pc, #84]	; (800a8a4 <tcp_output_alloc_header+0x78>)
 800a84e:	f005 fa39 	bl	800fcc4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8adb      	ldrh	r3, [r3, #22]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	8b12      	ldrh	r2, [r2, #24]
 800a85e:	68f9      	ldr	r1, [r7, #12]
 800a860:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a862:	893d      	ldrh	r5, [r7, #8]
 800a864:	897c      	ldrh	r4, [r7, #10]
 800a866:	9103      	str	r1, [sp, #12]
 800a868:	2110      	movs	r1, #16
 800a86a:	9102      	str	r1, [sp, #8]
 800a86c:	9201      	str	r2, [sp, #4]
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	462a      	mov	r2, r5
 800a874:	4621      	mov	r1, r4
 800a876:	f7ff ff67 	bl	800a748 <tcp_output_alloc_header_common>
 800a87a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d006      	beq.n	800a890 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	68fa      	ldr	r2, [r7, #12]
 800a888:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a88a:	441a      	add	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a890:	697b      	ldr	r3, [r7, #20]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bdb0      	pop	{r4, r5, r7, pc}
 800a89a:	bf00      	nop
 800a89c:	080123c4 	.word	0x080123c4
 800a8a0:	08012acc 	.word	0x08012acc
 800a8a4:	08012418 	.word	0x08012418

0800a8a8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b088      	sub	sp, #32
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	71fb      	strb	r3, [r7, #7]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d106      	bne.n	800a8d6 <tcp_output_fill_options+0x2e>
 800a8c8:	4b13      	ldr	r3, [pc, #76]	; (800a918 <tcp_output_fill_options+0x70>)
 800a8ca:	f240 7256 	movw	r2, #1878	; 0x756
 800a8ce:	4913      	ldr	r1, [pc, #76]	; (800a91c <tcp_output_fill_options+0x74>)
 800a8d0:	4813      	ldr	r0, [pc, #76]	; (800a920 <tcp_output_fill_options+0x78>)
 800a8d2:	f005 f9f7 	bl	800fcc4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	3314      	adds	r3, #20
 800a8e0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	f103 0214 	add.w	r2, r3, #20
 800a8e8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	440b      	add	r3, r1
 800a8f8:	4413      	add	r3, r2
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d006      	beq.n	800a90e <tcp_output_fill_options+0x66>
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <tcp_output_fill_options+0x70>)
 800a902:	f240 7275 	movw	r2, #1909	; 0x775
 800a906:	4907      	ldr	r1, [pc, #28]	; (800a924 <tcp_output_fill_options+0x7c>)
 800a908:	4805      	ldr	r0, [pc, #20]	; (800a920 <tcp_output_fill_options+0x78>)
 800a90a:	f005 f9db 	bl	800fcc4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a90e:	bf00      	nop
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	080123c4 	.word	0x080123c4
 800a91c:	08012af4 	.word	0x08012af4
 800a920:	08012418 	.word	0x08012418
 800a924:	080129ec 	.word	0x080129ec

0800a928 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b08a      	sub	sp, #40	; 0x28
 800a92c:	af04      	add	r7, sp, #16
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
 800a934:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d106      	bne.n	800a94a <tcp_output_control_segment+0x22>
 800a93c:	4b1c      	ldr	r3, [pc, #112]	; (800a9b0 <tcp_output_control_segment+0x88>)
 800a93e:	f240 7287 	movw	r2, #1927	; 0x787
 800a942:	491c      	ldr	r1, [pc, #112]	; (800a9b4 <tcp_output_control_segment+0x8c>)
 800a944:	481c      	ldr	r0, [pc, #112]	; (800a9b8 <tcp_output_control_segment+0x90>)
 800a946:	f005 f9bd 	bl	800fcc4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7fe ff40 	bl	80097d4 <tcp_route>
 800a954:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a95c:	23fc      	movs	r3, #252	; 0xfc
 800a95e:	75fb      	strb	r3, [r7, #23]
 800a960:	e01c      	b.n	800a99c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d006      	beq.n	800a976 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	7adb      	ldrb	r3, [r3, #11]
 800a96c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	7a9b      	ldrb	r3, [r3, #10]
 800a972:	757b      	strb	r3, [r7, #21]
 800a974:	e003      	b.n	800a97e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a976:	23ff      	movs	r3, #255	; 0xff
 800a978:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a97a:	2300      	movs	r3, #0
 800a97c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a97e:	7dba      	ldrb	r2, [r7, #22]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	9302      	str	r3, [sp, #8]
 800a984:	2306      	movs	r3, #6
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	7d7b      	ldrb	r3, [r7, #21]
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	4613      	mov	r3, r2
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	6879      	ldr	r1, [r7, #4]
 800a992:	68b8      	ldr	r0, [r7, #8]
 800a994:	f004 f926 	bl	800ebe4 <ip4_output_if>
 800a998:	4603      	mov	r3, r0
 800a99a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a99c:	68b8      	ldr	r0, [r7, #8]
 800a99e:	f7fa fdd9 	bl	8005554 <pbuf_free>
  return err;
 800a9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	080123c4 	.word	0x080123c4
 800a9b4:	08012b1c 	.word	0x08012b1c
 800a9b8:	08012418 	.word	0x08012418

0800a9bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a9bc:	b590      	push	{r4, r7, lr}
 800a9be:	b08b      	sub	sp, #44	; 0x2c
 800a9c0:	af04      	add	r7, sp, #16
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
 800a9c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <tcp_rst+0x22>
 800a9d0:	4b1f      	ldr	r3, [pc, #124]	; (800aa50 <tcp_rst+0x94>)
 800a9d2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a9d6:	491f      	ldr	r1, [pc, #124]	; (800aa54 <tcp_rst+0x98>)
 800a9d8:	481f      	ldr	r0, [pc, #124]	; (800aa58 <tcp_rst+0x9c>)
 800a9da:	f005 f973 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <tcp_rst+0x36>
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <tcp_rst+0x94>)
 800a9e6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a9ea:	491c      	ldr	r1, [pc, #112]	; (800aa5c <tcp_rst+0xa0>)
 800a9ec:	481a      	ldr	r0, [pc, #104]	; (800aa58 <tcp_rst+0x9c>)
 800a9ee:	f005 f969 	bl	800fcc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a9f6:	f246 0308 	movw	r3, #24584	; 0x6008
 800a9fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
 800a9fe:	b29c      	uxth	r4, r3
 800aa00:	68b8      	ldr	r0, [r7, #8]
 800aa02:	f7f9 fa98 	bl	8003f36 <lwip_htonl>
 800aa06:	4602      	mov	r2, r0
 800aa08:	8abb      	ldrh	r3, [r7, #20]
 800aa0a:	9303      	str	r3, [sp, #12]
 800aa0c:	2314      	movs	r3, #20
 800aa0e:	9302      	str	r3, [sp, #8]
 800aa10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aa12:	9301      	str	r3, [sp, #4]
 800aa14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fe92 	bl	800a748 <tcp_output_alloc_header_common>
 800aa24:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00c      	beq.n	800aa46 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aa2c:	7dfb      	ldrb	r3, [r7, #23]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	6939      	ldr	r1, [r7, #16]
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff ff38 	bl	800a8a8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	6939      	ldr	r1, [r7, #16]
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff ff72 	bl	800a928 <tcp_output_control_segment>
 800aa44:	e000      	b.n	800aa48 <tcp_rst+0x8c>
    return;
 800aa46:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aa48:	371c      	adds	r7, #28
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd90      	pop	{r4, r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	080123c4 	.word	0x080123c4
 800aa54:	08012b48 	.word	0x08012b48
 800aa58:	08012418 	.word	0x08012418
 800aa5c:	08012b64 	.word	0x08012b64

0800aa60 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d106      	bne.n	800aa84 <tcp_send_empty_ack+0x24>
 800aa76:	4b28      	ldr	r3, [pc, #160]	; (800ab18 <tcp_send_empty_ack+0xb8>)
 800aa78:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800aa7c:	4927      	ldr	r1, [pc, #156]	; (800ab1c <tcp_send_empty_ack+0xbc>)
 800aa7e:	4828      	ldr	r0, [pc, #160]	; (800ab20 <tcp_send_empty_ack+0xc0>)
 800aa80:	f005 f920 	bl	800fcc4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	f003 0304 	and.w	r3, r3, #4
 800aa8e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800aa90:	7d7b      	ldrb	r3, [r7, #21]
 800aa92:	b29c      	uxth	r4, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f9 fa4c 	bl	8003f36 <lwip_htonl>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff fec1 	bl	800a82c <tcp_output_alloc_header>
 800aaaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d109      	bne.n	800aac6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	8b5b      	ldrh	r3, [r3, #26]
 800aab6:	f043 0303 	orr.w	r3, r3, #3
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800aac0:	f06f 0301 	mvn.w	r3, #1
 800aac4:	e023      	b.n	800ab0e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800aac6:	7dbb      	ldrb	r3, [r7, #22]
 800aac8:	7dfa      	ldrb	r2, [r7, #23]
 800aaca:	6939      	ldr	r1, [r7, #16]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f7ff feeb 	bl	800a8a8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	3304      	adds	r3, #4
 800aad8:	6939      	ldr	r1, [r7, #16]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff ff24 	bl	800a928 <tcp_output_control_segment>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800aae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d007      	beq.n	800aafc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	8b5b      	ldrh	r3, [r3, #26]
 800aaf0:	f043 0303 	orr.w	r3, r3, #3
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	835a      	strh	r2, [r3, #26]
 800aafa:	e006      	b.n	800ab0a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	8b5b      	ldrh	r3, [r3, #26]
 800ab00:	f023 0303 	bic.w	r3, r3, #3
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ab0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd90      	pop	{r4, r7, pc}
 800ab16:	bf00      	nop
 800ab18:	080123c4 	.word	0x080123c4
 800ab1c:	08012b80 	.word	0x08012b80
 800ab20:	08012418 	.word	0x08012418

0800ab24 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <tcp_keepalive+0x20>
 800ab36:	4b18      	ldr	r3, [pc, #96]	; (800ab98 <tcp_keepalive+0x74>)
 800ab38:	f640 0224 	movw	r2, #2084	; 0x824
 800ab3c:	4917      	ldr	r1, [pc, #92]	; (800ab9c <tcp_keepalive+0x78>)
 800ab3e:	4818      	ldr	r0, [pc, #96]	; (800aba0 <tcp_keepalive+0x7c>)
 800ab40:	f005 f8c0 	bl	800fcc4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	b29c      	uxth	r4, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7f9 f9f1 	bl	8003f36 <lwip_htonl>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2200      	movs	r2, #0
 800ab58:	4621      	mov	r1, r4
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7ff fe66 	bl	800a82c <tcp_output_alloc_header>
 800ab60:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ab68:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6c:	e010      	b.n	800ab90 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	2200      	movs	r2, #0
 800ab72:	6939      	ldr	r1, [r7, #16]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff fe97 	bl	800a8a8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	6939      	ldr	r1, [r7, #16]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff fed0 	bl	800a928 <tcp_output_control_segment>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ab8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd90      	pop	{r4, r7, pc}
 800ab98:	080123c4 	.word	0x080123c4
 800ab9c:	08012ba0 	.word	0x08012ba0
 800aba0:	08012418 	.word	0x08012418

0800aba4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800aba4:	b590      	push	{r4, r7, lr}
 800aba6:	b08b      	sub	sp, #44	; 0x2c
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800abac:	2300      	movs	r3, #0
 800abae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d106      	bne.n	800abc6 <tcp_zero_window_probe+0x22>
 800abb8:	4b4c      	ldr	r3, [pc, #304]	; (800acec <tcp_zero_window_probe+0x148>)
 800abba:	f640 024f 	movw	r2, #2127	; 0x84f
 800abbe:	494c      	ldr	r1, [pc, #304]	; (800acf0 <tcp_zero_window_probe+0x14c>)
 800abc0:	484c      	ldr	r0, [pc, #304]	; (800acf4 <tcp_zero_window_probe+0x150>)
 800abc2:	f005 f87f 	bl	800fcc4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	e086      	b.n	800ace4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800abdc:	2bff      	cmp	r3, #255	; 0xff
 800abde:	d007      	beq.n	800abf0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800abe6:	3301      	adds	r3, #1
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800abf0:	6a3b      	ldr	r3, [r7, #32]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	899b      	ldrh	r3, [r3, #12]
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7f9 f987 	bl	8003f0c <lwip_htons>
 800abfe:	4603      	mov	r3, r0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	f003 0301 	and.w	r3, r3, #1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d005      	beq.n	800ac16 <tcp_zero_window_probe+0x72>
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	891b      	ldrh	r3, [r3, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d101      	bne.n	800ac16 <tcp_zero_window_probe+0x72>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e000      	b.n	800ac18 <tcp_zero_window_probe+0x74>
 800ac16:	2300      	movs	r3, #0
 800ac18:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ac1a:	7ffb      	ldrb	r3, [r7, #31]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	bf0c      	ite	eq
 800ac20:	2301      	moveq	r3, #1
 800ac22:	2300      	movne	r3, #0
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ac28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac2c:	b299      	uxth	r1, r3
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	8bba      	ldrh	r2, [r7, #28]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff fdf8 	bl	800a82c <tcp_output_alloc_header>
 800ac3c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ac44:	f04f 33ff 	mov.w	r3, #4294967295
 800ac48:	e04c      	b.n	800ace4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ac50:	7ffb      	ldrb	r3, [r7, #31]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d011      	beq.n	800ac7a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	899b      	ldrh	r3, [r3, #12]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	b21b      	sxth	r3, r3
 800ac5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac62:	b21c      	sxth	r4, r3
 800ac64:	2011      	movs	r0, #17
 800ac66:	f7f9 f951 	bl	8003f0c <lwip_htons>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	b21b      	sxth	r3, r3
 800ac6e:	4323      	orrs	r3, r4
 800ac70:	b21b      	sxth	r3, r3
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	819a      	strh	r2, [r3, #12]
 800ac78:	e010      	b.n	800ac9c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	3314      	adds	r3, #20
 800ac80:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	6858      	ldr	r0, [r3, #4]
 800ac86:	6a3b      	ldr	r3, [r7, #32]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	891a      	ldrh	r2, [r3, #8]
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	891b      	ldrh	r3, [r3, #8]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	2201      	movs	r2, #1
 800ac96:	6939      	ldr	r1, [r7, #16]
 800ac98:	f7fa fe56 	bl	8005948 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7f9 f947 	bl	8003f36 <lwip_htonl>
 800aca8:	4603      	mov	r3, r0
 800acaa:	3301      	adds	r3, #1
 800acac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	da02      	bge.n	800acc0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800acc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acc4:	2200      	movs	r2, #0
 800acc6:	69b9      	ldr	r1, [r7, #24]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fded 	bl	800a8a8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3304      	adds	r3, #4
 800acd4:	69b9      	ldr	r1, [r7, #24]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff fe26 	bl	800a928 <tcp_output_control_segment>
 800acdc:	4603      	mov	r3, r0
 800acde:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ace0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	372c      	adds	r7, #44	; 0x2c
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd90      	pop	{r4, r7, pc}
 800acec:	080123c4 	.word	0x080123c4
 800acf0:	08012bbc 	.word	0x08012bbc
 800acf4:	08012418 	.word	0x08012418

0800acf8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ad00:	f7fa ff10 	bl	8005b24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ad04:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <tcpip_tcp_timer+0x38>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d103      	bne.n	800ad14 <tcpip_tcp_timer+0x1c>
 800ad0c:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <tcpip_tcp_timer+0x3c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ad14:	2200      	movs	r2, #0
 800ad16:	4908      	ldr	r1, [pc, #32]	; (800ad38 <tcpip_tcp_timer+0x40>)
 800ad18:	20fa      	movs	r0, #250	; 0xfa
 800ad1a:	f000 f8f3 	bl	800af04 <sys_timeout>
 800ad1e:	e003      	b.n	800ad28 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ad20:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <tcpip_tcp_timer+0x44>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
  }
}
 800ad26:	bf00      	nop
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	2000694c 	.word	0x2000694c
 800ad34:	2000695c 	.word	0x2000695c
 800ad38:	0800acf9 	.word	0x0800acf9
 800ad3c:	20000114 	.word	0x20000114

0800ad40 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <tcp_timer_needed+0x30>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10f      	bne.n	800ad6c <tcp_timer_needed+0x2c>
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <tcp_timer_needed+0x34>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <tcp_timer_needed+0x1c>
 800ad54:	4b08      	ldr	r3, [pc, #32]	; (800ad78 <tcp_timer_needed+0x38>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d007      	beq.n	800ad6c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <tcp_timer_needed+0x30>)
 800ad5e:	2201      	movs	r2, #1
 800ad60:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ad62:	2200      	movs	r2, #0
 800ad64:	4905      	ldr	r1, [pc, #20]	; (800ad7c <tcp_timer_needed+0x3c>)
 800ad66:	20fa      	movs	r0, #250	; 0xfa
 800ad68:	f000 f8cc 	bl	800af04 <sys_timeout>
  }
}
 800ad6c:	bf00      	nop
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20000114 	.word	0x20000114
 800ad74:	2000694c 	.word	0x2000694c
 800ad78:	2000695c 	.word	0x2000695c
 800ad7c:	0800acf9 	.word	0x0800acf9

0800ad80 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ad8c:	2006      	movs	r0, #6
 800ad8e:	f7f9 fd13 	bl	80047b8 <memp_malloc>
 800ad92:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d151      	bne.n	800ae44 <sys_timeout_abs+0xc4>
 800ada0:	4b2a      	ldr	r3, [pc, #168]	; (800ae4c <sys_timeout_abs+0xcc>)
 800ada2:	22be      	movs	r2, #190	; 0xbe
 800ada4:	492a      	ldr	r1, [pc, #168]	; (800ae50 <sys_timeout_abs+0xd0>)
 800ada6:	482b      	ldr	r0, [pc, #172]	; (800ae54 <sys_timeout_abs+0xd4>)
 800ada8:	f004 ff8c 	bl	800fcc4 <iprintf>
    return;
 800adac:	e04a      	b.n	800ae44 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	68ba      	ldr	r2, [r7, #8]
 800adb8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	68fa      	ldr	r2, [r7, #12]
 800adc4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800adc6:	4b24      	ldr	r3, [pc, #144]	; (800ae58 <sys_timeout_abs+0xd8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d103      	bne.n	800add6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800adce:	4a22      	ldr	r2, [pc, #136]	; (800ae58 <sys_timeout_abs+0xd8>)
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	6013      	str	r3, [r2, #0]
    return;
 800add4:	e037      	b.n	800ae46 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	4b1f      	ldr	r3, [pc, #124]	; (800ae58 <sys_timeout_abs+0xd8>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	0fdb      	lsrs	r3, r3, #31
 800ade4:	f003 0301 	and.w	r3, r3, #1
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b00      	cmp	r3, #0
 800adec:	d007      	beq.n	800adfe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800adee:	4b1a      	ldr	r3, [pc, #104]	; (800ae58 <sys_timeout_abs+0xd8>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800adf6:	4a18      	ldr	r2, [pc, #96]	; (800ae58 <sys_timeout_abs+0xd8>)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	e023      	b.n	800ae46 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800adfe:	4b16      	ldr	r3, [pc, #88]	; (800ae58 <sys_timeout_abs+0xd8>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	e01a      	b.n	800ae3c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00b      	beq.n	800ae26 <sys_timeout_abs+0xa6>
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	0fdb      	lsrs	r3, r3, #31
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d007      	beq.n	800ae36 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	601a      	str	r2, [r3, #0]
        break;
 800ae34:	e007      	b.n	800ae46 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1e1      	bne.n	800ae06 <sys_timeout_abs+0x86>
 800ae42:	e000      	b.n	800ae46 <sys_timeout_abs+0xc6>
    return;
 800ae44:	bf00      	nop
      }
    }
  }
}
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	08012be0 	.word	0x08012be0
 800ae50:	08012c14 	.word	0x08012c14
 800ae54:	08012c54 	.word	0x08012c54
 800ae58:	2000010c 	.word	0x2000010c

0800ae5c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	4798      	blx	r3

  now = sys_now();
 800ae6e:	f7f8 ff85 	bl	8003d7c <sys_now>
 800ae72:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	4b0f      	ldr	r3, [pc, #60]	; (800aeb8 <lwip_cyclic_timer+0x5c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ae80:	68fa      	ldr	r2, [r7, #12]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	0fdb      	lsrs	r3, r3, #31
 800ae88:	f003 0301 	and.w	r3, r3, #1
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d009      	beq.n	800aea6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	4413      	add	r3, r2
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	4907      	ldr	r1, [pc, #28]	; (800aebc <lwip_cyclic_timer+0x60>)
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff ff6e 	bl	800ad80 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800aea4:	e004      	b.n	800aeb0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	4904      	ldr	r1, [pc, #16]	; (800aebc <lwip_cyclic_timer+0x60>)
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff ff68 	bl	800ad80 <sys_timeout_abs>
}
 800aeb0:	bf00      	nop
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	20000110 	.word	0x20000110
 800aebc:	0800ae5d 	.word	0x0800ae5d

0800aec0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aec6:	2301      	movs	r3, #1
 800aec8:	607b      	str	r3, [r7, #4]
 800aeca:	e00e      	b.n	800aeea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800aecc:	4a0b      	ldr	r2, [pc, #44]	; (800aefc <sys_timeouts_init+0x3c>)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	00db      	lsls	r3, r3, #3
 800aed8:	4a08      	ldr	r2, [pc, #32]	; (800aefc <sys_timeouts_init+0x3c>)
 800aeda:	4413      	add	r3, r2
 800aedc:	461a      	mov	r2, r3
 800aede:	4908      	ldr	r1, [pc, #32]	; (800af00 <sys_timeouts_init+0x40>)
 800aee0:	f000 f810 	bl	800af04 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3301      	adds	r3, #1
 800aee8:	607b      	str	r3, [r7, #4]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d9ed      	bls.n	800aecc <sys_timeouts_init+0xc>
  }
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	08013b58 	.word	0x08013b58
 800af00:	0800ae5d 	.word	0x0800ae5d

0800af04 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af16:	d306      	bcc.n	800af26 <sys_timeout+0x22>
 800af18:	4b0a      	ldr	r3, [pc, #40]	; (800af44 <sys_timeout+0x40>)
 800af1a:	f240 1229 	movw	r2, #297	; 0x129
 800af1e:	490a      	ldr	r1, [pc, #40]	; (800af48 <sys_timeout+0x44>)
 800af20:	480a      	ldr	r0, [pc, #40]	; (800af4c <sys_timeout+0x48>)
 800af22:	f004 fecf 	bl	800fcc4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800af26:	f7f8 ff29 	bl	8003d7c <sys_now>
 800af2a:	4602      	mov	r2, r0
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	68b9      	ldr	r1, [r7, #8]
 800af36:	6978      	ldr	r0, [r7, #20]
 800af38:	f7ff ff22 	bl	800ad80 <sys_timeout_abs>
#endif
}
 800af3c:	bf00      	nop
 800af3e:	3718      	adds	r7, #24
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	08012be0 	.word	0x08012be0
 800af48:	08012c7c 	.word	0x08012c7c
 800af4c:	08012c54 	.word	0x08012c54

0800af50 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800af56:	f7f8 ff11 	bl	8003d7c <sys_now>
 800af5a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800af5c:	4b1a      	ldr	r3, [pc, #104]	; (800afc8 <sys_check_timeouts+0x78>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <sys_check_timeouts+0x1a>
 800af66:	f7f9 ffbb 	bl	8004ee0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800af6a:	4b18      	ldr	r3, [pc, #96]	; (800afcc <sys_check_timeouts+0x7c>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d022      	beq.n	800afbc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	68fa      	ldr	r2, [r7, #12]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	0fdb      	lsrs	r3, r3, #31
 800af80:	f003 0301 	and.w	r3, r3, #1
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d11a      	bne.n	800afc0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a0f      	ldr	r2, [pc, #60]	; (800afcc <sys_check_timeouts+0x7c>)
 800af90:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	4a0b      	ldr	r2, [pc, #44]	; (800afd0 <sys_check_timeouts+0x80>)
 800afa4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800afa6:	68b9      	ldr	r1, [r7, #8]
 800afa8:	2006      	movs	r0, #6
 800afaa:	f7f9 fc51 	bl	8004850 <memp_free>
    if (handler != NULL) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d0d3      	beq.n	800af5c <sys_check_timeouts+0xc>
      handler(arg);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6838      	ldr	r0, [r7, #0]
 800afb8:	4798      	blx	r3
  do {
 800afba:	e7cf      	b.n	800af5c <sys_check_timeouts+0xc>
      return;
 800afbc:	bf00      	nop
 800afbe:	e000      	b.n	800afc2 <sys_check_timeouts+0x72>
      return;
 800afc0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20006944 	.word	0x20006944
 800afcc:	2000010c 	.word	0x2000010c
 800afd0:	20000110 	.word	0x20000110

0800afd4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800afd8:	f004 fe8c 	bl	800fcf4 <rand>
 800afdc:	4603      	mov	r3, r0
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800afea:	b29a      	uxth	r2, r3
 800afec:	4b01      	ldr	r3, [pc, #4]	; (800aff4 <udp_init+0x20>)
 800afee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800aff0:	bf00      	nop
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20000010 	.word	0x20000010

0800aff8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b002:	4b17      	ldr	r3, [pc, #92]	; (800b060 <udp_new_port+0x68>)
 800b004:	881b      	ldrh	r3, [r3, #0]
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	b291      	uxth	r1, r2
 800b00a:	4a15      	ldr	r2, [pc, #84]	; (800b060 <udp_new_port+0x68>)
 800b00c:	8011      	strh	r1, [r2, #0]
 800b00e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b012:	4293      	cmp	r3, r2
 800b014:	d103      	bne.n	800b01e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b016:	4b12      	ldr	r3, [pc, #72]	; (800b060 <udp_new_port+0x68>)
 800b018:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b01c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b01e:	4b11      	ldr	r3, [pc, #68]	; (800b064 <udp_new_port+0x6c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	e011      	b.n	800b04a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	8a5a      	ldrh	r2, [r3, #18]
 800b02a:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <udp_new_port+0x68>)
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d108      	bne.n	800b044 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b032:	88fb      	ldrh	r3, [r7, #6]
 800b034:	3301      	adds	r3, #1
 800b036:	80fb      	strh	r3, [r7, #6]
 800b038:	88fb      	ldrh	r3, [r7, #6]
 800b03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b03e:	d3e0      	bcc.n	800b002 <udp_new_port+0xa>
        return 0;
 800b040:	2300      	movs	r3, #0
 800b042:	e007      	b.n	800b054 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	603b      	str	r3, [r7, #0]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1ea      	bne.n	800b026 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b050:	4b03      	ldr	r3, [pc, #12]	; (800b060 <udp_new_port+0x68>)
 800b052:	881b      	ldrh	r3, [r3, #0]
}
 800b054:	4618      	mov	r0, r3
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	20000010 	.word	0x20000010
 800b064:	20006964 	.word	0x20006964

0800b068 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	4613      	mov	r3, r2
 800b074:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d105      	bne.n	800b088 <udp_input_local_match+0x20>
 800b07c:	4b27      	ldr	r3, [pc, #156]	; (800b11c <udp_input_local_match+0xb4>)
 800b07e:	2287      	movs	r2, #135	; 0x87
 800b080:	4927      	ldr	r1, [pc, #156]	; (800b120 <udp_input_local_match+0xb8>)
 800b082:	4828      	ldr	r0, [pc, #160]	; (800b124 <udp_input_local_match+0xbc>)
 800b084:	f004 fe1e 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d105      	bne.n	800b09a <udp_input_local_match+0x32>
 800b08e:	4b23      	ldr	r3, [pc, #140]	; (800b11c <udp_input_local_match+0xb4>)
 800b090:	2288      	movs	r2, #136	; 0x88
 800b092:	4925      	ldr	r1, [pc, #148]	; (800b128 <udp_input_local_match+0xc0>)
 800b094:	4823      	ldr	r0, [pc, #140]	; (800b124 <udp_input_local_match+0xbc>)
 800b096:	f004 fe15 	bl	800fcc4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	7a1b      	ldrb	r3, [r3, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00b      	beq.n	800b0ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	7a1a      	ldrb	r2, [r3, #8]
 800b0a6:	4b21      	ldr	r3, [pc, #132]	; (800b12c <udp_input_local_match+0xc4>)
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d001      	beq.n	800b0ba <udp_input_local_match+0x52>
    return 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e02b      	b.n	800b112 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d018      	beq.n	800b0f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d013      	beq.n	800b0ee <udp_input_local_match+0x86>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00f      	beq.n	800b0ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b0ce:	4b17      	ldr	r3, [pc, #92]	; (800b12c <udp_input_local_match+0xc4>)
 800b0d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d6:	d00a      	beq.n	800b0ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	4b13      	ldr	r3, [pc, #76]	; (800b12c <udp_input_local_match+0xc4>)
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	405a      	eors	r2, r3
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d110      	bne.n	800b110 <udp_input_local_match+0xa8>
          return 1;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e00f      	b.n	800b112 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d009      	beq.n	800b10c <udp_input_local_match+0xa4>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <udp_input_local_match+0xa4>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	4b09      	ldr	r3, [pc, #36]	; (800b12c <udp_input_local_match+0xc4>)
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d101      	bne.n	800b110 <udp_input_local_match+0xa8>
        return 1;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e000      	b.n	800b112 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08012cc8 	.word	0x08012cc8
 800b120:	08012cf8 	.word	0x08012cf8
 800b124:	08012d1c 	.word	0x08012d1c
 800b128:	08012d44 	.word	0x08012d44
 800b12c:	200033e8 	.word	0x200033e8

0800b130 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b130:	b590      	push	{r4, r7, lr}
 800b132:	b08d      	sub	sp, #52	; 0x34
 800b134:	af02      	add	r7, sp, #8
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d105      	bne.n	800b150 <udp_input+0x20>
 800b144:	4b7c      	ldr	r3, [pc, #496]	; (800b338 <udp_input+0x208>)
 800b146:	22cf      	movs	r2, #207	; 0xcf
 800b148:	497c      	ldr	r1, [pc, #496]	; (800b33c <udp_input+0x20c>)
 800b14a:	487d      	ldr	r0, [pc, #500]	; (800b340 <udp_input+0x210>)
 800b14c:	f004 fdba 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d105      	bne.n	800b162 <udp_input+0x32>
 800b156:	4b78      	ldr	r3, [pc, #480]	; (800b338 <udp_input+0x208>)
 800b158:	22d0      	movs	r2, #208	; 0xd0
 800b15a:	497a      	ldr	r1, [pc, #488]	; (800b344 <udp_input+0x214>)
 800b15c:	4878      	ldr	r0, [pc, #480]	; (800b340 <udp_input+0x210>)
 800b15e:	f004 fdb1 	bl	800fcc4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	895b      	ldrh	r3, [r3, #10]
 800b166:	2b07      	cmp	r3, #7
 800b168:	d803      	bhi.n	800b172 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f7fa f9f2 	bl	8005554 <pbuf_free>
    goto end;
 800b170:	e0de      	b.n	800b330 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b178:	4b73      	ldr	r3, [pc, #460]	; (800b348 <udp_input+0x218>)
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	4a72      	ldr	r2, [pc, #456]	; (800b348 <udp_input+0x218>)
 800b17e:	6812      	ldr	r2, [r2, #0]
 800b180:	4611      	mov	r1, r2
 800b182:	4618      	mov	r0, r3
 800b184:	f003 fe06 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800b188:	4603      	mov	r3, r0
 800b18a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	b29b      	uxth	r3, r3
 800b192:	4618      	mov	r0, r3
 800b194:	f7f8 feba 	bl	8003f0c <lwip_htons>
 800b198:	4603      	mov	r3, r0
 800b19a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	885b      	ldrh	r3, [r3, #2]
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7f8 feb2 	bl	8003f0c <lwip_htons>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1b8:	4b64      	ldr	r3, [pc, #400]	; (800b34c <udp_input+0x21c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1be:	e054      	b.n	800b26a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	8a5b      	ldrh	r3, [r3, #18]
 800b1c4:	89fa      	ldrh	r2, [r7, #14]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d14a      	bne.n	800b260 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b1ca:	7cfb      	ldrb	r3, [r7, #19]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1d2:	f7ff ff49 	bl	800b068 <udp_input_local_match>
 800b1d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d041      	beq.n	800b260 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	7c1b      	ldrb	r3, [r3, #16]
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d11d      	bne.n	800b224 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d102      	bne.n	800b1f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	61fb      	str	r3, [r7, #28]
 800b1f2:	e017      	b.n	800b224 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b1f4:	7cfb      	ldrb	r3, [r7, #19]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d014      	beq.n	800b224 <udp_input+0xf4>
 800b1fa:	4b53      	ldr	r3, [pc, #332]	; (800b348 <udp_input+0x218>)
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b202:	d10f      	bne.n	800b224 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	3304      	adds	r3, #4
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d008      	beq.n	800b224 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	3304      	adds	r3, #4
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d101      	bne.n	800b224 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	8a9b      	ldrh	r3, [r3, #20]
 800b228:	8a3a      	ldrh	r2, [r7, #16]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d118      	bne.n	800b260 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b232:	2b00      	cmp	r3, #0
 800b234:	d005      	beq.n	800b242 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	4b43      	ldr	r3, [pc, #268]	; (800b348 <udp_input+0x218>)
 800b23c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b23e:	429a      	cmp	r2, r3
 800b240:	d10e      	bne.n	800b260 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d014      	beq.n	800b272 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	68da      	ldr	r2, [r3, #12]
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b250:	4b3e      	ldr	r3, [pc, #248]	; (800b34c <udp_input+0x21c>)
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b258:	4a3c      	ldr	r2, [pc, #240]	; (800b34c <udp_input+0x21c>)
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b25e:	e008      	b.n	800b272 <udp_input+0x142>
      }
    }

    prev = pcb;
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1a7      	bne.n	800b1c0 <udp_input+0x90>
 800b270:	e000      	b.n	800b274 <udp_input+0x144>
        break;
 800b272:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <udp_input+0x14e>
    pcb = uncon_pcb;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <udp_input+0x15a>
    for_us = 1;
 800b284:	2301      	movs	r3, #1
 800b286:	76fb      	strb	r3, [r7, #27]
 800b288:	e00a      	b.n	800b2a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	3304      	adds	r3, #4
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	4b2d      	ldr	r3, [pc, #180]	; (800b348 <udp_input+0x218>)
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	429a      	cmp	r2, r3
 800b296:	bf0c      	ite	eq
 800b298:	2301      	moveq	r3, #1
 800b29a:	2300      	movne	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b2a0:	7efb      	ldrb	r3, [r7, #27]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d041      	beq.n	800b32a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b2a6:	2108      	movs	r1, #8
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7fa f8cd 	bl	8005448 <pbuf_remove_header>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b2b4:	4b20      	ldr	r3, [pc, #128]	; (800b338 <udp_input+0x208>)
 800b2b6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b2ba:	4925      	ldr	r1, [pc, #148]	; (800b350 <udp_input+0x220>)
 800b2bc:	4820      	ldr	r0, [pc, #128]	; (800b340 <udp_input+0x210>)
 800b2be:	f004 fd01 	bl	800fcc4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7fa f946 	bl	8005554 <pbuf_free>
      goto end;
 800b2c8:	e032      	b.n	800b330 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d012      	beq.n	800b2f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00a      	beq.n	800b2ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	699c      	ldr	r4, [r3, #24]
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	69d8      	ldr	r0, [r3, #28]
 800b2e0:	8a3b      	ldrh	r3, [r7, #16]
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	4b1b      	ldr	r3, [pc, #108]	; (800b354 <udp_input+0x224>)
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b2ec:	e021      	b.n	800b332 <udp_input+0x202>
        pbuf_free(p);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f7fa f930 	bl	8005554 <pbuf_free>
        goto end;
 800b2f4:	e01c      	b.n	800b330 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b2f6:	7cfb      	ldrb	r3, [r7, #19]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d112      	bne.n	800b322 <udp_input+0x1f2>
 800b2fc:	4b12      	ldr	r3, [pc, #72]	; (800b348 <udp_input+0x218>)
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b304:	2be0      	cmp	r3, #224	; 0xe0
 800b306:	d00c      	beq.n	800b322 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b308:	4b0f      	ldr	r3, [pc, #60]	; (800b348 <udp_input+0x218>)
 800b30a:	899b      	ldrh	r3, [r3, #12]
 800b30c:	3308      	adds	r3, #8
 800b30e:	b29b      	uxth	r3, r3
 800b310:	b21b      	sxth	r3, r3
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7fa f90a 	bl	800552e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b31a:	2103      	movs	r1, #3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f003 f9fb 	bl	800e718 <icmp_dest_unreach>
      pbuf_free(p);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7fa f916 	bl	8005554 <pbuf_free>
  return;
 800b328:	e003      	b.n	800b332 <udp_input+0x202>
    pbuf_free(p);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7fa f912 	bl	8005554 <pbuf_free>
  return;
 800b330:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b332:	372c      	adds	r7, #44	; 0x2c
 800b334:	46bd      	mov	sp, r7
 800b336:	bd90      	pop	{r4, r7, pc}
 800b338:	08012cc8 	.word	0x08012cc8
 800b33c:	08012d6c 	.word	0x08012d6c
 800b340:	08012d1c 	.word	0x08012d1c
 800b344:	08012d84 	.word	0x08012d84
 800b348:	200033e8 	.word	0x200033e8
 800b34c:	20006964 	.word	0x20006964
 800b350:	08012da0 	.word	0x08012da0
 800b354:	200033f8 	.word	0x200033f8

0800b358 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d109      	bne.n	800b380 <udp_sendto_if+0x28>
 800b36c:	4b2e      	ldr	r3, [pc, #184]	; (800b428 <udp_sendto_if+0xd0>)
 800b36e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b372:	492e      	ldr	r1, [pc, #184]	; (800b42c <udp_sendto_if+0xd4>)
 800b374:	482e      	ldr	r0, [pc, #184]	; (800b430 <udp_sendto_if+0xd8>)
 800b376:	f004 fca5 	bl	800fcc4 <iprintf>
 800b37a:	f06f 030f 	mvn.w	r3, #15
 800b37e:	e04f      	b.n	800b420 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d109      	bne.n	800b39a <udp_sendto_if+0x42>
 800b386:	4b28      	ldr	r3, [pc, #160]	; (800b428 <udp_sendto_if+0xd0>)
 800b388:	f240 2281 	movw	r2, #641	; 0x281
 800b38c:	4929      	ldr	r1, [pc, #164]	; (800b434 <udp_sendto_if+0xdc>)
 800b38e:	4828      	ldr	r0, [pc, #160]	; (800b430 <udp_sendto_if+0xd8>)
 800b390:	f004 fc98 	bl	800fcc4 <iprintf>
 800b394:	f06f 030f 	mvn.w	r3, #15
 800b398:	e042      	b.n	800b420 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d109      	bne.n	800b3b4 <udp_sendto_if+0x5c>
 800b3a0:	4b21      	ldr	r3, [pc, #132]	; (800b428 <udp_sendto_if+0xd0>)
 800b3a2:	f240 2282 	movw	r2, #642	; 0x282
 800b3a6:	4924      	ldr	r1, [pc, #144]	; (800b438 <udp_sendto_if+0xe0>)
 800b3a8:	4821      	ldr	r0, [pc, #132]	; (800b430 <udp_sendto_if+0xd8>)
 800b3aa:	f004 fc8b 	bl	800fcc4 <iprintf>
 800b3ae:	f06f 030f 	mvn.w	r3, #15
 800b3b2:	e035      	b.n	800b420 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d109      	bne.n	800b3ce <udp_sendto_if+0x76>
 800b3ba:	4b1b      	ldr	r3, [pc, #108]	; (800b428 <udp_sendto_if+0xd0>)
 800b3bc:	f240 2283 	movw	r2, #643	; 0x283
 800b3c0:	491e      	ldr	r1, [pc, #120]	; (800b43c <udp_sendto_if+0xe4>)
 800b3c2:	481b      	ldr	r0, [pc, #108]	; (800b430 <udp_sendto_if+0xd8>)
 800b3c4:	f004 fc7e 	bl	800fcc4 <iprintf>
 800b3c8:	f06f 030f 	mvn.w	r3, #15
 800b3cc:	e028      	b.n	800b420 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d009      	beq.n	800b3e8 <udp_sendto_if+0x90>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b3e4:	2be0      	cmp	r3, #224	; 0xe0
 800b3e6:	d103      	bne.n	800b3f0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	617b      	str	r3, [r7, #20]
 800b3ee:	e00b      	b.n	800b408 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d002      	beq.n	800b404 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b3fe:	f06f 0303 	mvn.w	r3, #3
 800b402:	e00d      	b.n	800b420 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b408:	887a      	ldrh	r2, [r7, #2]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	4613      	mov	r3, r2
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	68b9      	ldr	r1, [r7, #8]
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f000 f811 	bl	800b440 <udp_sendto_if_src>
 800b41e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	08012cc8 	.word	0x08012cc8
 800b42c:	08012e3c 	.word	0x08012e3c
 800b430:	08012d1c 	.word	0x08012d1c
 800b434:	08012e58 	.word	0x08012e58
 800b438:	08012e74 	.word	0x08012e74
 800b43c:	08012e94 	.word	0x08012e94

0800b440 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	; 0x30
 800b444:	af04      	add	r7, sp, #16
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <udp_sendto_if_src+0x28>
 800b454:	4b65      	ldr	r3, [pc, #404]	; (800b5ec <udp_sendto_if_src+0x1ac>)
 800b456:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b45a:	4965      	ldr	r1, [pc, #404]	; (800b5f0 <udp_sendto_if_src+0x1b0>)
 800b45c:	4865      	ldr	r0, [pc, #404]	; (800b5f4 <udp_sendto_if_src+0x1b4>)
 800b45e:	f004 fc31 	bl	800fcc4 <iprintf>
 800b462:	f06f 030f 	mvn.w	r3, #15
 800b466:	e0bc      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d109      	bne.n	800b482 <udp_sendto_if_src+0x42>
 800b46e:	4b5f      	ldr	r3, [pc, #380]	; (800b5ec <udp_sendto_if_src+0x1ac>)
 800b470:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b474:	4960      	ldr	r1, [pc, #384]	; (800b5f8 <udp_sendto_if_src+0x1b8>)
 800b476:	485f      	ldr	r0, [pc, #380]	; (800b5f4 <udp_sendto_if_src+0x1b4>)
 800b478:	f004 fc24 	bl	800fcc4 <iprintf>
 800b47c:	f06f 030f 	mvn.w	r3, #15
 800b480:	e0af      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d109      	bne.n	800b49c <udp_sendto_if_src+0x5c>
 800b488:	4b58      	ldr	r3, [pc, #352]	; (800b5ec <udp_sendto_if_src+0x1ac>)
 800b48a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b48e:	495b      	ldr	r1, [pc, #364]	; (800b5fc <udp_sendto_if_src+0x1bc>)
 800b490:	4858      	ldr	r0, [pc, #352]	; (800b5f4 <udp_sendto_if_src+0x1b4>)
 800b492:	f004 fc17 	bl	800fcc4 <iprintf>
 800b496:	f06f 030f 	mvn.w	r3, #15
 800b49a:	e0a2      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d109      	bne.n	800b4b6 <udp_sendto_if_src+0x76>
 800b4a2:	4b52      	ldr	r3, [pc, #328]	; (800b5ec <udp_sendto_if_src+0x1ac>)
 800b4a4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b4a8:	4955      	ldr	r1, [pc, #340]	; (800b600 <udp_sendto_if_src+0x1c0>)
 800b4aa:	4852      	ldr	r0, [pc, #328]	; (800b5f4 <udp_sendto_if_src+0x1b4>)
 800b4ac:	f004 fc0a 	bl	800fcc4 <iprintf>
 800b4b0:	f06f 030f 	mvn.w	r3, #15
 800b4b4:	e095      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d109      	bne.n	800b4d0 <udp_sendto_if_src+0x90>
 800b4bc:	4b4b      	ldr	r3, [pc, #300]	; (800b5ec <udp_sendto_if_src+0x1ac>)
 800b4be:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b4c2:	4950      	ldr	r1, [pc, #320]	; (800b604 <udp_sendto_if_src+0x1c4>)
 800b4c4:	484b      	ldr	r0, [pc, #300]	; (800b5f4 <udp_sendto_if_src+0x1b4>)
 800b4c6:	f004 fbfd 	bl	800fcc4 <iprintf>
 800b4ca:	f06f 030f 	mvn.w	r3, #15
 800b4ce:	e088      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	8a5b      	ldrh	r3, [r3, #18]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10f      	bne.n	800b4f8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b4d8:	68f9      	ldr	r1, [r7, #12]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	8a5b      	ldrh	r3, [r3, #18]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 f893 	bl	800b60c <udp_bind>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b4ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d002      	beq.n	800b4f8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b4f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b4f6:	e074      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	891b      	ldrh	r3, [r3, #8]
 800b4fc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b500:	4293      	cmp	r3, r2
 800b502:	d902      	bls.n	800b50a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b504:	f04f 33ff 	mov.w	r3, #4294967295
 800b508:	e06b      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b50a:	2108      	movs	r1, #8
 800b50c:	68b8      	ldr	r0, [r7, #8]
 800b50e:	f7f9 ff8b 	bl	8005428 <pbuf_add_header>
 800b512:	4603      	mov	r3, r0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d015      	beq.n	800b544 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b518:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b51c:	2108      	movs	r1, #8
 800b51e:	2022      	movs	r0, #34	; 0x22
 800b520:	f7f9 fd34 	bl	8004f8c <pbuf_alloc>
 800b524:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d102      	bne.n	800b532 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b52c:	f04f 33ff 	mov.w	r3, #4294967295
 800b530:	e057      	b.n	800b5e2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	891b      	ldrh	r3, [r3, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d006      	beq.n	800b548 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	69f8      	ldr	r0, [r7, #28]
 800b53e:	f7fa f921 	bl	8005784 <pbuf_chain>
 800b542:	e001      	b.n	800b548 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	895b      	ldrh	r3, [r3, #10]
 800b54c:	2b07      	cmp	r3, #7
 800b54e:	d806      	bhi.n	800b55e <udp_sendto_if_src+0x11e>
 800b550:	4b26      	ldr	r3, [pc, #152]	; (800b5ec <udp_sendto_if_src+0x1ac>)
 800b552:	f240 320d 	movw	r2, #781	; 0x30d
 800b556:	492c      	ldr	r1, [pc, #176]	; (800b608 <udp_sendto_if_src+0x1c8>)
 800b558:	4826      	ldr	r0, [pc, #152]	; (800b5f4 <udp_sendto_if_src+0x1b4>)
 800b55a:	f004 fbb3 	bl	800fcc4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8a5b      	ldrh	r3, [r3, #18]
 800b568:	4618      	mov	r0, r3
 800b56a:	f7f8 fccf 	bl	8003f0c <lwip_htons>
 800b56e:	4603      	mov	r3, r0
 800b570:	461a      	mov	r2, r3
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b576:	887b      	ldrh	r3, [r7, #2]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7f8 fcc7 	bl	8003f0c <lwip_htons>
 800b57e:	4603      	mov	r3, r0
 800b580:	461a      	mov	r2, r3
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2200      	movs	r2, #0
 800b58a:	719a      	strb	r2, [r3, #6]
 800b58c:	2200      	movs	r2, #0
 800b58e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	891b      	ldrh	r3, [r3, #8]
 800b594:	4618      	mov	r0, r3
 800b596:	f7f8 fcb9 	bl	8003f0c <lwip_htons>
 800b59a:	4603      	mov	r3, r0
 800b59c:	461a      	mov	r2, r3
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b5a2:	2311      	movs	r3, #17
 800b5a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	7adb      	ldrb	r3, [r3, #11]
 800b5aa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	7a9b      	ldrb	r3, [r3, #10]
 800b5b0:	7cb9      	ldrb	r1, [r7, #18]
 800b5b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b4:	9202      	str	r2, [sp, #8]
 800b5b6:	7cfa      	ldrb	r2, [r7, #19]
 800b5b8:	9201      	str	r2, [sp, #4]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5c2:	69f8      	ldr	r0, [r7, #28]
 800b5c4:	f003 fb38 	bl	800ec38 <ip4_output_if_src>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b5cc:	69fa      	ldr	r2, [r7, #28]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d004      	beq.n	800b5de <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b5d4:	69f8      	ldr	r0, [r7, #28]
 800b5d6:	f7f9 ffbd 	bl	8005554 <pbuf_free>
    q = NULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b5de:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3720      	adds	r7, #32
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	08012cc8 	.word	0x08012cc8
 800b5f0:	08012eb4 	.word	0x08012eb4
 800b5f4:	08012d1c 	.word	0x08012d1c
 800b5f8:	08012ed4 	.word	0x08012ed4
 800b5fc:	08012ef4 	.word	0x08012ef4
 800b600:	08012f18 	.word	0x08012f18
 800b604:	08012f3c 	.word	0x08012f3c
 800b608:	08012f60 	.word	0x08012f60

0800b60c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b620:	4b39      	ldr	r3, [pc, #228]	; (800b708 <udp_bind+0xfc>)
 800b622:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d109      	bne.n	800b63e <udp_bind+0x32>
 800b62a:	4b38      	ldr	r3, [pc, #224]	; (800b70c <udp_bind+0x100>)
 800b62c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b630:	4937      	ldr	r1, [pc, #220]	; (800b710 <udp_bind+0x104>)
 800b632:	4838      	ldr	r0, [pc, #224]	; (800b714 <udp_bind+0x108>)
 800b634:	f004 fb46 	bl	800fcc4 <iprintf>
 800b638:	f06f 030f 	mvn.w	r3, #15
 800b63c:	e060      	b.n	800b700 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b642:	4b35      	ldr	r3, [pc, #212]	; (800b718 <udp_bind+0x10c>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	e009      	b.n	800b65e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d102      	bne.n	800b658 <udp_bind+0x4c>
      rebind = 1;
 800b652:	2301      	movs	r3, #1
 800b654:	74fb      	strb	r3, [r7, #19]
      break;
 800b656:	e005      	b.n	800b664 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1f2      	bne.n	800b64a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b664:	88fb      	ldrh	r3, [r7, #6]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d109      	bne.n	800b67e <udp_bind+0x72>
    port = udp_new_port();
 800b66a:	f7ff fcc5 	bl	800aff8 <udp_new_port>
 800b66e:	4603      	mov	r3, r0
 800b670:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b672:	88fb      	ldrh	r3, [r7, #6]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d12c      	bne.n	800b6d2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b678:	f06f 0307 	mvn.w	r3, #7
 800b67c:	e040      	b.n	800b700 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b67e:	4b26      	ldr	r3, [pc, #152]	; (800b718 <udp_bind+0x10c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	617b      	str	r3, [r7, #20]
 800b684:	e022      	b.n	800b6cc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d01b      	beq.n	800b6c6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	8a5b      	ldrh	r3, [r3, #18]
 800b692:	88fa      	ldrh	r2, [r7, #6]
 800b694:	429a      	cmp	r2, r3
 800b696:	d116      	bne.n	800b6c6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d00d      	beq.n	800b6c0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <udp_bind+0xb4>
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d006      	beq.n	800b6c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b6b2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d102      	bne.n	800b6c6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b6c0:	f06f 0307 	mvn.w	r3, #7
 800b6c4:	e01c      	b.n	800b700 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1d9      	bne.n	800b686 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <udp_bind+0xd2>
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	e000      	b.n	800b6e0 <udp_bind+0xd4>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	88fa      	ldrh	r2, [r7, #6]
 800b6e8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b6ea:	7cfb      	ldrb	r3, [r7, #19]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d106      	bne.n	800b6fe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b6f0:	4b09      	ldr	r3, [pc, #36]	; (800b718 <udp_bind+0x10c>)
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b6f8:	4a07      	ldr	r2, [pc, #28]	; (800b718 <udp_bind+0x10c>)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	08013b80 	.word	0x08013b80
 800b70c:	08012cc8 	.word	0x08012cc8
 800b710:	08012f90 	.word	0x08012f90
 800b714:	08012d1c 	.word	0x08012d1c
 800b718:	20006964 	.word	0x20006964

0800b71c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	4613      	mov	r3, r2
 800b728:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <udp_connect+0x28>
 800b730:	4b2c      	ldr	r3, [pc, #176]	; (800b7e4 <udp_connect+0xc8>)
 800b732:	f240 4235 	movw	r2, #1077	; 0x435
 800b736:	492c      	ldr	r1, [pc, #176]	; (800b7e8 <udp_connect+0xcc>)
 800b738:	482c      	ldr	r0, [pc, #176]	; (800b7ec <udp_connect+0xd0>)
 800b73a:	f004 fac3 	bl	800fcc4 <iprintf>
 800b73e:	f06f 030f 	mvn.w	r3, #15
 800b742:	e04b      	b.n	800b7dc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d109      	bne.n	800b75e <udp_connect+0x42>
 800b74a:	4b26      	ldr	r3, [pc, #152]	; (800b7e4 <udp_connect+0xc8>)
 800b74c:	f240 4236 	movw	r2, #1078	; 0x436
 800b750:	4927      	ldr	r1, [pc, #156]	; (800b7f0 <udp_connect+0xd4>)
 800b752:	4826      	ldr	r0, [pc, #152]	; (800b7ec <udp_connect+0xd0>)
 800b754:	f004 fab6 	bl	800fcc4 <iprintf>
 800b758:	f06f 030f 	mvn.w	r3, #15
 800b75c:	e03e      	b.n	800b7dc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8a5b      	ldrh	r3, [r3, #18]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10f      	bne.n	800b786 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b766:	68f9      	ldr	r1, [r7, #12]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8a5b      	ldrh	r3, [r3, #18]
 800b76c:	461a      	mov	r2, r3
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7ff ff4c 	bl	800b60c <udp_bind>
 800b774:	4603      	mov	r3, r0
 800b776:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b778:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <udp_connect+0x6a>
      return err;
 800b780:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b784:	e02a      	b.n	800b7dc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d002      	beq.n	800b792 <udp_connect+0x76>
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	e000      	b.n	800b794 <udp_connect+0x78>
 800b792:	2300      	movs	r3, #0
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	88fa      	ldrh	r2, [r7, #6]
 800b79c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	7c1b      	ldrb	r3, [r3, #16]
 800b7a2:	f043 0304 	orr.w	r3, r3, #4
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b7ac:	4b11      	ldr	r3, [pc, #68]	; (800b7f4 <udp_connect+0xd8>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	617b      	str	r3, [r7, #20]
 800b7b2:	e008      	b.n	800b7c6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d101      	bne.n	800b7c0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e00d      	b.n	800b7dc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	617b      	str	r3, [r7, #20]
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1f3      	bne.n	800b7b4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b7cc:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <udp_connect+0xd8>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b7d4:	4a07      	ldr	r2, [pc, #28]	; (800b7f4 <udp_connect+0xd8>)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3718      	adds	r7, #24
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	08012cc8 	.word	0x08012cc8
 800b7e8:	08012fa8 	.word	0x08012fa8
 800b7ec:	08012d1c 	.word	0x08012d1c
 800b7f0:	08012fc4 	.word	0x08012fc4
 800b7f4:	20006964 	.word	0x20006964

0800b7f8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d107      	bne.n	800b81a <udp_recv+0x22>
 800b80a:	4b08      	ldr	r3, [pc, #32]	; (800b82c <udp_recv+0x34>)
 800b80c:	f240 428a 	movw	r2, #1162	; 0x48a
 800b810:	4907      	ldr	r1, [pc, #28]	; (800b830 <udp_recv+0x38>)
 800b812:	4808      	ldr	r0, [pc, #32]	; (800b834 <udp_recv+0x3c>)
 800b814:	f004 fa56 	bl	800fcc4 <iprintf>
 800b818:	e005      	b.n	800b826 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	61da      	str	r2, [r3, #28]
}
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	08012cc8 	.word	0x08012cc8
 800b830:	08012ffc 	.word	0x08012ffc
 800b834:	08012d1c 	.word	0x08012d1c

0800b838 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d107      	bne.n	800b856 <udp_remove+0x1e>
 800b846:	4b19      	ldr	r3, [pc, #100]	; (800b8ac <udp_remove+0x74>)
 800b848:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b84c:	4918      	ldr	r1, [pc, #96]	; (800b8b0 <udp_remove+0x78>)
 800b84e:	4819      	ldr	r0, [pc, #100]	; (800b8b4 <udp_remove+0x7c>)
 800b850:	f004 fa38 	bl	800fcc4 <iprintf>
 800b854:	e026      	b.n	800b8a4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b856:	4b18      	ldr	r3, [pc, #96]	; (800b8b8 <udp_remove+0x80>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d105      	bne.n	800b86c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b860:	4b15      	ldr	r3, [pc, #84]	; (800b8b8 <udp_remove+0x80>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	4a14      	ldr	r2, [pc, #80]	; (800b8b8 <udp_remove+0x80>)
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	e017      	b.n	800b89c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b86c:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <udp_remove+0x80>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	60fb      	str	r3, [r7, #12]
 800b872:	e010      	b.n	800b896 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d009      	beq.n	800b890 <udp_remove+0x58>
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	429a      	cmp	r2, r3
 800b884:	d104      	bne.n	800b890 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	68da      	ldr	r2, [r3, #12]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	60da      	str	r2, [r3, #12]
        break;
 800b88e:	e005      	b.n	800b89c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	60fb      	str	r3, [r7, #12]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1eb      	bne.n	800b874 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b89c:	6879      	ldr	r1, [r7, #4]
 800b89e:	2000      	movs	r0, #0
 800b8a0:	f7f8 ffd6 	bl	8004850 <memp_free>
}
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	08012cc8 	.word	0x08012cc8
 800b8b0:	08013014 	.word	0x08013014
 800b8b4:	08012d1c 	.word	0x08012d1c
 800b8b8:	20006964 	.word	0x20006964

0800b8bc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f7f8 ff78 	bl	80047b8 <memp_malloc>
 800b8c8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d007      	beq.n	800b8e0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b8d0:	2220      	movs	r2, #32
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f004 f9ed 	bl	800fcb4 <memset>
    pcb->ttl = UDP_TTL;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	22ff      	movs	r2, #255	; 0xff
 800b8de:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b8e0:	687b      	ldr	r3, [r7, #4]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d01e      	beq.n	800b93a <udp_netif_ip_addr_changed+0x4e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d01a      	beq.n	800b93a <udp_netif_ip_addr_changed+0x4e>
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d017      	beq.n	800b93a <udp_netif_ip_addr_changed+0x4e>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d013      	beq.n	800b93a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b912:	4b0d      	ldr	r3, [pc, #52]	; (800b948 <udp_netif_ip_addr_changed+0x5c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	e00c      	b.n	800b934 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	429a      	cmp	r2, r3
 800b924:	d103      	bne.n	800b92e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d1ef      	bne.n	800b91a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b93a:	bf00      	nop
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	20006964 	.word	0x20006964

0800b94c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800b950:	4b20      	ldr	r3, [pc, #128]	; (800b9d4 <dhcp_inc_pcb_refcount+0x88>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d133      	bne.n	800b9c0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b958:	4b1f      	ldr	r3, [pc, #124]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d005      	beq.n	800b96c <dhcp_inc_pcb_refcount+0x20>
 800b960:	4b1e      	ldr	r3, [pc, #120]	; (800b9dc <dhcp_inc_pcb_refcount+0x90>)
 800b962:	22e5      	movs	r2, #229	; 0xe5
 800b964:	491e      	ldr	r1, [pc, #120]	; (800b9e0 <dhcp_inc_pcb_refcount+0x94>)
 800b966:	481f      	ldr	r0, [pc, #124]	; (800b9e4 <dhcp_inc_pcb_refcount+0x98>)
 800b968:	f004 f9ac 	bl	800fcc4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800b96c:	f7ff ffa6 	bl	800b8bc <udp_new>
 800b970:	4603      	mov	r3, r0
 800b972:	4a19      	ldr	r2, [pc, #100]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b974:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d102      	bne.n	800b984 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800b97e:	f04f 33ff 	mov.w	r3, #4294967295
 800b982:	e024      	b.n	800b9ce <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b984:	4b14      	ldr	r3, [pc, #80]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	7a5a      	ldrb	r2, [r3, #9]
 800b98a:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f042 0220 	orr.w	r2, r2, #32
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800b996:	4b10      	ldr	r3, [pc, #64]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2244      	movs	r2, #68	; 0x44
 800b99c:	4912      	ldr	r1, [pc, #72]	; (800b9e8 <dhcp_inc_pcb_refcount+0x9c>)
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff fe34 	bl	800b60c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800b9a4:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2243      	movs	r2, #67	; 0x43
 800b9aa:	490f      	ldr	r1, [pc, #60]	; (800b9e8 <dhcp_inc_pcb_refcount+0x9c>)
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f7ff feb5 	bl	800b71c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b9b2:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <dhcp_inc_pcb_refcount+0x8c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	490c      	ldr	r1, [pc, #48]	; (800b9ec <dhcp_inc_pcb_refcount+0xa0>)
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7ff ff1c 	bl	800b7f8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800b9c0:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <dhcp_inc_pcb_refcount+0x88>)
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	4b02      	ldr	r3, [pc, #8]	; (800b9d4 <dhcp_inc_pcb_refcount+0x88>)
 800b9ca:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	2000011c 	.word	0x2000011c
 800b9d8:	20000118 	.word	0x20000118
 800b9dc:	0801302c 	.word	0x0801302c
 800b9e0:	08013064 	.word	0x08013064
 800b9e4:	0801308c 	.word	0x0801308c
 800b9e8:	08013b80 	.word	0x08013b80
 800b9ec:	0800d281 	.word	0x0800d281

0800b9f0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b9f4:	4b0e      	ldr	r3, [pc, #56]	; (800ba30 <dhcp_dec_pcb_refcount+0x40>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d105      	bne.n	800ba08 <dhcp_dec_pcb_refcount+0x18>
 800b9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ba34 <dhcp_dec_pcb_refcount+0x44>)
 800b9fe:	22ff      	movs	r2, #255	; 0xff
 800ba00:	490d      	ldr	r1, [pc, #52]	; (800ba38 <dhcp_dec_pcb_refcount+0x48>)
 800ba02:	480e      	ldr	r0, [pc, #56]	; (800ba3c <dhcp_dec_pcb_refcount+0x4c>)
 800ba04:	f004 f95e 	bl	800fcc4 <iprintf>
  dhcp_pcb_refcount--;
 800ba08:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <dhcp_dec_pcb_refcount+0x40>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	4b07      	ldr	r3, [pc, #28]	; (800ba30 <dhcp_dec_pcb_refcount+0x40>)
 800ba12:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800ba14:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <dhcp_dec_pcb_refcount+0x40>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d107      	bne.n	800ba2c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800ba1c:	4b08      	ldr	r3, [pc, #32]	; (800ba40 <dhcp_dec_pcb_refcount+0x50>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7ff ff09 	bl	800b838 <udp_remove>
    dhcp_pcb = NULL;
 800ba26:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <dhcp_dec_pcb_refcount+0x50>)
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]
  }
}
 800ba2c:	bf00      	nop
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	2000011c 	.word	0x2000011c
 800ba34:	0801302c 	.word	0x0801302c
 800ba38:	080130b4 	.word	0x080130b4
 800ba3c:	0801308c 	.word	0x0801308c
 800ba40:	20000118 	.word	0x20000118

0800ba44 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ba52:	210c      	movs	r1, #12
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f001 f855 	bl	800cb04 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800ba5a:	4b06      	ldr	r3, [pc, #24]	; (800ba74 <dhcp_handle_nak+0x30>)
 800ba5c:	4a05      	ldr	r2, [pc, #20]	; (800ba74 <dhcp_handle_nak+0x30>)
 800ba5e:	4905      	ldr	r1, [pc, #20]	; (800ba74 <dhcp_handle_nak+0x30>)
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7f9 f897 	bl	8004b94 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fc48 	bl	800c2fc <dhcp_discover>
}
 800ba6c:	bf00      	nop
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	08013b80 	.word	0x08013b80

0800ba78 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800ba86:	2108      	movs	r1, #8
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f001 f83b 	bl	800cb04 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	331c      	adds	r3, #28
 800ba92:	2200      	movs	r2, #0
 800ba94:	4619      	mov	r1, r3
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f002 fb3c 	bl	800e114 <etharp_query>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	799b      	ldrb	r3, [r3, #6]
 800baa4:	2bff      	cmp	r3, #255	; 0xff
 800baa6:	d005      	beq.n	800bab4 <dhcp_check+0x3c>
    dhcp->tries++;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	799b      	ldrb	r3, [r3, #6]
 800baac:	3301      	adds	r3, #1
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800bab4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bab8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800baba:	893b      	ldrh	r3, [r7, #8]
 800babc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bac0:	4a06      	ldr	r2, [pc, #24]	; (800badc <dhcp_check+0x64>)
 800bac2:	fb82 1203 	smull	r1, r2, r2, r3
 800bac6:	1152      	asrs	r2, r2, #5
 800bac8:	17db      	asrs	r3, r3, #31
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800bad2:	bf00      	nop
 800bad4:	3710      	adds	r7, #16
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	10624dd3 	.word	0x10624dd3

0800bae0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800baf0:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <dhcp_handle_offer+0x44>)
 800baf2:	789b      	ldrb	r3, [r3, #2]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d011      	beq.n	800bb1c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800bafe:	4b0a      	ldr	r3, [pc, #40]	; (800bb28 <dhcp_handle_offer+0x48>)
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f8 fa17 	bl	8003f36 <lwip_htonl>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	691a      	ldr	r2, [r3, #16]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f808 	bl	800bb2c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800bb1c:	bf00      	nop
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20006968 	.word	0x20006968
 800bb28:	20006970 	.word	0x20006970

0800bb2c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800bb2c:	b5b0      	push	{r4, r5, r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d109      	bne.n	800bb4e <dhcp_select+0x22>
 800bb3a:	4b71      	ldr	r3, [pc, #452]	; (800bd00 <dhcp_select+0x1d4>)
 800bb3c:	f240 1277 	movw	r2, #375	; 0x177
 800bb40:	4970      	ldr	r1, [pc, #448]	; (800bd04 <dhcp_select+0x1d8>)
 800bb42:	4871      	ldr	r0, [pc, #452]	; (800bd08 <dhcp_select+0x1dc>)
 800bb44:	f004 f8be 	bl	800fcc4 <iprintf>
 800bb48:	f06f 030f 	mvn.w	r3, #15
 800bb4c:	e0d3      	b.n	800bcf6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb52:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <dhcp_select+0x42>
 800bb5a:	4b69      	ldr	r3, [pc, #420]	; (800bd00 <dhcp_select+0x1d4>)
 800bb5c:	f240 1279 	movw	r2, #377	; 0x179
 800bb60:	496a      	ldr	r1, [pc, #424]	; (800bd0c <dhcp_select+0x1e0>)
 800bb62:	4869      	ldr	r0, [pc, #420]	; (800bd08 <dhcp_select+0x1dc>)
 800bb64:	f004 f8ae 	bl	800fcc4 <iprintf>
 800bb68:	f06f 0305 	mvn.w	r3, #5
 800bb6c:	e0c3      	b.n	800bcf6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800bb6e:	2101      	movs	r1, #1
 800bb70:	69b8      	ldr	r0, [r7, #24]
 800bb72:	f000 ffc7 	bl	800cb04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800bb76:	f107 030c 	add.w	r3, r7, #12
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	69b9      	ldr	r1, [r7, #24]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f001 fc4c 	bl	800d41c <dhcp_create_msg>
 800bb84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 8085 	beq.w	800bc98 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800bb94:	89b8      	ldrh	r0, [r7, #12]
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	2239      	movs	r2, #57	; 0x39
 800bba0:	f000 ffca 	bl	800cb38 <dhcp_option>
 800bba4:	4603      	mov	r3, r0
 800bba6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800bba8:	89b8      	ldrh	r0, [r7, #12]
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f001 f819 	bl	800cbec <dhcp_option_short>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800bbbe:	89b8      	ldrh	r0, [r7, #12]
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bbc6:	2304      	movs	r3, #4
 800bbc8:	2232      	movs	r2, #50	; 0x32
 800bbca:	f000 ffb5 	bl	800cb38 <dhcp_option>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800bbd2:	89bc      	ldrh	r4, [r7, #12]
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	69db      	ldr	r3, [r3, #28]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f8 f9a9 	bl	8003f36 <lwip_htonl>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4620      	mov	r0, r4
 800bbec:	f001 f830 	bl	800cc50 <dhcp_option_long>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800bbf4:	89b8      	ldrh	r0, [r7, #12]
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bbfc:	2304      	movs	r3, #4
 800bbfe:	2236      	movs	r2, #54	; 0x36
 800bc00:	f000 ff9a 	bl	800cb38 <dhcp_option>
 800bc04:	4603      	mov	r3, r0
 800bc06:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800bc08:	89bc      	ldrh	r4, [r7, #12]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7f8 f98e 	bl	8003f36 <lwip_htonl>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	4629      	mov	r1, r5
 800bc20:	4620      	mov	r0, r4
 800bc22:	f001 f815 	bl	800cc50 <dhcp_option_long>
 800bc26:	4603      	mov	r3, r0
 800bc28:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800bc2a:	89b8      	ldrh	r0, [r7, #12]
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bc32:	2303      	movs	r3, #3
 800bc34:	2237      	movs	r2, #55	; 0x37
 800bc36:	f000 ff7f 	bl	800cb38 <dhcp_option>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bc3e:	2300      	movs	r3, #0
 800bc40:	77bb      	strb	r3, [r7, #30]
 800bc42:	e00e      	b.n	800bc62 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800bc44:	89b8      	ldrh	r0, [r7, #12]
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800bc4c:	7fbb      	ldrb	r3, [r7, #30]
 800bc4e:	4a30      	ldr	r2, [pc, #192]	; (800bd10 <dhcp_select+0x1e4>)
 800bc50:	5cd3      	ldrb	r3, [r2, r3]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f000 ffa4 	bl	800cba0 <dhcp_option_byte>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800bc5c:	7fbb      	ldrb	r3, [r7, #30]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	77bb      	strb	r3, [r7, #30]
 800bc62:	7fbb      	ldrb	r3, [r7, #30]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d9ed      	bls.n	800bc44 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800bc68:	89b8      	ldrh	r0, [r7, #12]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	33f0      	adds	r3, #240	; 0xf0
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	4619      	mov	r1, r3
 800bc72:	f001 fca9 	bl	800d5c8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800bc76:	4b27      	ldr	r3, [pc, #156]	; (800bd14 <dhcp_select+0x1e8>)
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	4b27      	ldr	r3, [pc, #156]	; (800bd18 <dhcp_select+0x1ec>)
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	2343      	movs	r3, #67	; 0x43
 800bc84:	4a25      	ldr	r2, [pc, #148]	; (800bd1c <dhcp_select+0x1f0>)
 800bc86:	6979      	ldr	r1, [r7, #20]
 800bc88:	f7ff fbda 	bl	800b440 <udp_sendto_if_src>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800bc90:	6978      	ldr	r0, [r7, #20]
 800bc92:	f7f9 fc5f 	bl	8005554 <pbuf_free>
 800bc96:	e001      	b.n	800bc9c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800bc98:	23ff      	movs	r3, #255	; 0xff
 800bc9a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	799b      	ldrb	r3, [r3, #6]
 800bca0:	2bff      	cmp	r3, #255	; 0xff
 800bca2:	d005      	beq.n	800bcb0 <dhcp_select+0x184>
    dhcp->tries++;
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	799b      	ldrb	r3, [r3, #6]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	799b      	ldrb	r3, [r3, #6]
 800bcb4:	2b05      	cmp	r3, #5
 800bcb6:	d80d      	bhi.n	800bcd4 <dhcp_select+0x1a8>
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	799b      	ldrb	r3, [r3, #6]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4093      	lsls	r3, r2
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	0152      	lsls	r2, r2, #5
 800bcc8:	1ad2      	subs	r2, r2, r3
 800bcca:	0092      	lsls	r2, r2, #2
 800bccc:	4413      	add	r3, r2
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	e001      	b.n	800bcd8 <dhcp_select+0x1ac>
 800bcd4:	f64e 2360 	movw	r3, #60000	; 0xea60
 800bcd8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bcda:	89fb      	ldrh	r3, [r7, #14]
 800bcdc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bce0:	4a0f      	ldr	r2, [pc, #60]	; (800bd20 <dhcp_select+0x1f4>)
 800bce2:	fb82 1203 	smull	r1, r2, r2, r3
 800bce6:	1152      	asrs	r2, r2, #5
 800bce8:	17db      	asrs	r3, r3, #31
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bcf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bdb0      	pop	{r4, r5, r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	0801302c 	.word	0x0801302c
 800bd04:	080130d8 	.word	0x080130d8
 800bd08:	0801308c 	.word	0x0801308c
 800bd0c:	080130f4 	.word	0x080130f4
 800bd10:	20000014 	.word	0x20000014
 800bd14:	20000118 	.word	0x20000118
 800bd18:	08013b80 	.word	0x08013b80
 800bd1c:	08013b84 	.word	0x08013b84
 800bd20:	10624dd3 	.word	0x10624dd3

0800bd24 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800bd2a:	4b27      	ldr	r3, [pc, #156]	; (800bdc8 <dhcp_coarse_tmr+0xa4>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	607b      	str	r3, [r7, #4]
 800bd30:	e042      	b.n	800bdb8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd36:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d039      	beq.n	800bdb2 <dhcp_coarse_tmr+0x8e>
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	795b      	ldrb	r3, [r3, #5]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d035      	beq.n	800bdb2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	8a9b      	ldrh	r3, [r3, #20]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d012      	beq.n	800bd74 <dhcp_coarse_tmr+0x50>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	8a5b      	ldrh	r3, [r3, #18]
 800bd52:	3301      	adds	r3, #1
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	825a      	strh	r2, [r3, #18]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	8a5a      	ldrh	r2, [r3, #18]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	8a9b      	ldrh	r3, [r3, #20]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d106      	bne.n	800bd74 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fe32 	bl	800c9d0 <dhcp_release_and_stop>
        dhcp_start(netif);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 f969 	bl	800c044 <dhcp_start>
 800bd72:	e01e      	b.n	800bdb2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	8a1b      	ldrh	r3, [r3, #16]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <dhcp_coarse_tmr+0x70>
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	8a1b      	ldrh	r3, [r3, #16]
 800bd80:	1e5a      	subs	r2, r3, #1
 800bd82:	b291      	uxth	r1, r2
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	8211      	strh	r1, [r2, #16]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d103      	bne.n	800bd94 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 f8c6 	bl	800bf1e <dhcp_t2_timeout>
 800bd92:	e00e      	b.n	800bdb2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	89db      	ldrh	r3, [r3, #14]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00a      	beq.n	800bdb2 <dhcp_coarse_tmr+0x8e>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	89db      	ldrh	r3, [r3, #14]
 800bda0:	1e5a      	subs	r2, r3, #1
 800bda2:	b291      	uxth	r1, r2
 800bda4:	683a      	ldr	r2, [r7, #0]
 800bda6:	81d1      	strh	r1, [r2, #14]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d102      	bne.n	800bdb2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f888 	bl	800bec2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	607b      	str	r3, [r7, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1b9      	bne.n	800bd32 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800bdbe:	bf00      	nop
 800bdc0:	bf00      	nop
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	2000693c 	.word	0x2000693c

0800bdcc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800bdd2:	4b16      	ldr	r3, [pc, #88]	; (800be2c <dhcp_fine_tmr+0x60>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	607b      	str	r3, [r7, #4]
 800bdd8:	e020      	b.n	800be1c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdde:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d017      	beq.n	800be16 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	891b      	ldrh	r3, [r3, #8]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d906      	bls.n	800bdfc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	891b      	ldrh	r3, [r3, #8]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	811a      	strh	r2, [r3, #8]
 800bdfa:	e00c      	b.n	800be16 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	891b      	ldrh	r3, [r3, #8]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d108      	bne.n	800be16 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	891b      	ldrh	r3, [r3, #8]
 800be08:	3b01      	subs	r3, #1
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f80d 	bl	800be30 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	607b      	str	r3, [r7, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1db      	bne.n	800bdda <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800be22:	bf00      	nop
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	2000693c 	.word	0x2000693c

0800be30 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	795b      	ldrb	r3, [r3, #5]
 800be42:	2b0c      	cmp	r3, #12
 800be44:	d003      	beq.n	800be4e <dhcp_timeout+0x1e>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	795b      	ldrb	r3, [r3, #5]
 800be4a:	2b06      	cmp	r3, #6
 800be4c:	d103      	bne.n	800be56 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fa54 	bl	800c2fc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800be54:	e031      	b.n	800beba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	795b      	ldrb	r3, [r3, #5]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d10e      	bne.n	800be7c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	799b      	ldrb	r3, [r3, #6]
 800be62:	2b05      	cmp	r3, #5
 800be64:	d803      	bhi.n	800be6e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff fe60 	bl	800bb2c <dhcp_select>
}
 800be6c:	e025      	b.n	800beba <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 fdae 	bl	800c9d0 <dhcp_release_and_stop>
      dhcp_start(netif);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f8e5 	bl	800c044 <dhcp_start>
}
 800be7a:	e01e      	b.n	800beba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	795b      	ldrb	r3, [r3, #5]
 800be80:	2b08      	cmp	r3, #8
 800be82:	d10b      	bne.n	800be9c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	799b      	ldrb	r3, [r3, #6]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d803      	bhi.n	800be94 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff fdf3 	bl	800ba78 <dhcp_check>
}
 800be92:	e012      	b.n	800beba <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fad3 	bl	800c440 <dhcp_bind>
}
 800be9a:	e00e      	b.n	800beba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	795b      	ldrb	r3, [r3, #5]
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d10a      	bne.n	800beba <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	799b      	ldrb	r3, [r3, #6]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d803      	bhi.n	800beb4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fcd9 	bl	800c864 <dhcp_reboot>
}
 800beb2:	e002      	b.n	800beba <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 fa21 	bl	800c2fc <dhcp_discover>
}
 800beba:	bf00      	nop
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	795b      	ldrb	r3, [r3, #5]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d007      	beq.n	800bee8 <dhcp_t1_timeout+0x26>
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	795b      	ldrb	r3, [r3, #5]
 800bedc:	2b0a      	cmp	r3, #10
 800bede:	d003      	beq.n	800bee8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bee4:	2b05      	cmp	r3, #5
 800bee6:	d116      	bne.n	800bf16 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fb83 	bl	800c5f4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	899b      	ldrh	r3, [r3, #12]
 800bef2:	461a      	mov	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	8a5b      	ldrh	r3, [r3, #18]
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b01      	cmp	r3, #1
 800befc:	dd0b      	ble.n	800bf16 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	899b      	ldrh	r3, [r3, #12]
 800bf02:	461a      	mov	r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	8a5b      	ldrh	r3, [r3, #18]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	0fda      	lsrs	r2, r3, #31
 800bf0c:	4413      	add	r3, r2
 800bf0e:	105b      	asrs	r3, r3, #1
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b084      	sub	sp, #16
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	795b      	ldrb	r3, [r3, #5]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d00b      	beq.n	800bf4c <dhcp_t2_timeout+0x2e>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	795b      	ldrb	r3, [r3, #5]
 800bf38:	2b0a      	cmp	r3, #10
 800bf3a:	d007      	beq.n	800bf4c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bf40:	2b05      	cmp	r3, #5
 800bf42:	d003      	beq.n	800bf4c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	795b      	ldrb	r3, [r3, #5]
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d116      	bne.n	800bf7a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fbed 	bl	800c72c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	8a9b      	ldrh	r3, [r3, #20]
 800bf56:	461a      	mov	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	8a5b      	ldrh	r3, [r3, #18]
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	dd0b      	ble.n	800bf7a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	8a9b      	ldrh	r3, [r3, #20]
 800bf66:	461a      	mov	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8a5b      	ldrh	r3, [r3, #18]
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	0fda      	lsrs	r2, r3, #31
 800bf70:	4413      	add	r3, r2
 800bf72:	105b      	asrs	r3, r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800bf7a:	bf00      	nop
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
	...

0800bf84 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf92:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800bfa0:	4b26      	ldr	r3, [pc, #152]	; (800c03c <dhcp_handle_ack+0xb8>)
 800bfa2:	78db      	ldrb	r3, [r3, #3]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800bfa8:	4b25      	ldr	r3, [pc, #148]	; (800c040 <dhcp_handle_ack+0xbc>)
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800bfb0:	4b22      	ldr	r3, [pc, #136]	; (800c03c <dhcp_handle_ack+0xb8>)
 800bfb2:	791b      	ldrb	r3, [r3, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d004      	beq.n	800bfc2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800bfb8:	4b21      	ldr	r3, [pc, #132]	; (800c040 <dhcp_handle_ack+0xbc>)
 800bfba:	691a      	ldr	r2, [r3, #16]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	62da      	str	r2, [r3, #44]	; 0x2c
 800bfc0:	e004      	b.n	800bfcc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc6:	085a      	lsrs	r2, r3, #1
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800bfcc:	4b1b      	ldr	r3, [pc, #108]	; (800c03c <dhcp_handle_ack+0xb8>)
 800bfce:	795b      	ldrb	r3, [r3, #5]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800bfd4:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <dhcp_handle_ack+0xbc>)
 800bfd6:	695a      	ldr	r2, [r3, #20]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30
 800bfdc:	e007      	b.n	800bfee <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	00db      	lsls	r3, r3, #3
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	08da      	lsrs	r2, r3, #3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	691a      	ldr	r2, [r3, #16]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800bff6:	4b11      	ldr	r3, [pc, #68]	; (800c03c <dhcp_handle_ack+0xb8>)
 800bff8:	799b      	ldrb	r3, [r3, #6]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800bffe:	4b10      	ldr	r3, [pc, #64]	; (800c040 <dhcp_handle_ack+0xbc>)
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	4618      	mov	r0, r3
 800c004:	f7f7 ff97 	bl	8003f36 <lwip_htonl>
 800c008:	4602      	mov	r2, r0
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	71da      	strb	r2, [r3, #7]
 800c014:	e002      	b.n	800c01c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800c01c:	4b07      	ldr	r3, [pc, #28]	; (800c03c <dhcp_handle_ack+0xb8>)
 800c01e:	79db      	ldrb	r3, [r3, #7]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800c024:	4b06      	ldr	r3, [pc, #24]	; (800c040 <dhcp_handle_ack+0xbc>)
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	4618      	mov	r0, r3
 800c02a:	f7f7 ff84 	bl	8003f36 <lwip_htonl>
 800c02e:	4602      	mov	r2, r0
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800c034:	bf00      	nop
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20006968 	.word	0x20006968
 800c040:	20006970 	.word	0x20006970

0800c044 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d109      	bne.n	800c066 <dhcp_start+0x22>
 800c052:	4b37      	ldr	r3, [pc, #220]	; (800c130 <dhcp_start+0xec>)
 800c054:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c058:	4936      	ldr	r1, [pc, #216]	; (800c134 <dhcp_start+0xf0>)
 800c05a:	4837      	ldr	r0, [pc, #220]	; (800c138 <dhcp_start+0xf4>)
 800c05c:	f003 fe32 	bl	800fcc4 <iprintf>
 800c060:	f06f 030f 	mvn.w	r3, #15
 800c064:	e060      	b.n	800c128 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d109      	bne.n	800c088 <dhcp_start+0x44>
 800c074:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <dhcp_start+0xec>)
 800c076:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800c07a:	4930      	ldr	r1, [pc, #192]	; (800c13c <dhcp_start+0xf8>)
 800c07c:	482e      	ldr	r0, [pc, #184]	; (800c138 <dhcp_start+0xf4>)
 800c07e:	f003 fe21 	bl	800fcc4 <iprintf>
 800c082:	f06f 030f 	mvn.w	r3, #15
 800c086:	e04f      	b.n	800c128 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c092:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800c096:	d202      	bcs.n	800c09e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800c098:	f04f 33ff 	mov.w	r3, #4294967295
 800c09c:	e044      	b.n	800c128 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10d      	bne.n	800c0c0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800c0a4:	2034      	movs	r0, #52	; 0x34
 800c0a6:	f7f8 fa19 	bl	80044dc <mem_malloc>
 800c0aa:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d102      	bne.n	800c0b8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800c0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b6:	e037      	b.n	800c128 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c0be:	e005      	b.n	800c0cc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	791b      	ldrb	r3, [r3, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c0c8:	f7ff fc92 	bl	800b9f0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800c0cc:	2234      	movs	r2, #52	; 0x34
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f003 fdef 	bl	800fcb4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800c0d6:	f7ff fc39 	bl	800b94c <dhcp_inc_pcb_refcount>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <dhcp_start+0xa2>
    return ERR_MEM;
 800c0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e4:	e020      	b.n	800c128 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c0f2:	f003 0304 	and.w	r3, r3, #4
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800c0fa:	2102      	movs	r1, #2
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 fd01 	bl	800cb04 <dhcp_set_state>
    return ERR_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	e010      	b.n	800c128 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f000 f8f8 	bl	800c2fc <dhcp_discover>
 800c10c:	4603      	mov	r3, r0
 800c10e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800c110:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d005      	beq.n	800c124 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fc59 	bl	800c9d0 <dhcp_release_and_stop>
    return ERR_MEM;
 800c11e:	f04f 33ff 	mov.w	r3, #4294967295
 800c122:	e001      	b.n	800c128 <dhcp_start+0xe4>
  }
  return result;
 800c124:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	0801302c 	.word	0x0801302c
 800c134:	08013110 	.word	0x08013110
 800c138:	0801308c 	.word	0x0801308c
 800c13c:	08013154 	.word	0x08013154

0800c140 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d025      	beq.n	800c1a0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	795b      	ldrb	r3, [r3, #5]
 800c158:	2b0a      	cmp	r3, #10
 800c15a:	d008      	beq.n	800c16e <dhcp_network_changed+0x2e>
 800c15c:	2b0a      	cmp	r3, #10
 800c15e:	dc0d      	bgt.n	800c17c <dhcp_network_changed+0x3c>
 800c160:	2b00      	cmp	r3, #0
 800c162:	d01f      	beq.n	800c1a4 <dhcp_network_changed+0x64>
 800c164:	2b00      	cmp	r3, #0
 800c166:	db09      	blt.n	800c17c <dhcp_network_changed+0x3c>
 800c168:	3b03      	subs	r3, #3
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d806      	bhi.n	800c17c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fb75 	bl	800c864 <dhcp_reboot>
      break;
 800c17a:	e014      	b.n	800c1a6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	795b      	ldrb	r3, [r3, #5]
 800c180:	2b0c      	cmp	r3, #12
 800c182:	d906      	bls.n	800c192 <dhcp_network_changed+0x52>
 800c184:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <dhcp_network_changed+0x6c>)
 800c186:	f240 326d 	movw	r2, #877	; 0x36d
 800c18a:	4909      	ldr	r1, [pc, #36]	; (800c1b0 <dhcp_network_changed+0x70>)
 800c18c:	4809      	ldr	r0, [pc, #36]	; (800c1b4 <dhcp_network_changed+0x74>)
 800c18e:	f003 fd99 	bl	800fcc4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f8af 	bl	800c2fc <dhcp_discover>
      break;
 800c19e:	e002      	b.n	800c1a6 <dhcp_network_changed+0x66>
    return;
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <dhcp_network_changed+0x66>
      break;
 800c1a4:	bf00      	nop
  }
}
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	0801302c 	.word	0x0801302c
 800c1b0:	08013178 	.word	0x08013178
 800c1b4:	0801308c 	.word	0x0801308c

0800c1b8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d107      	bne.n	800c1d8 <dhcp_arp_reply+0x20>
 800c1c8:	4b0e      	ldr	r3, [pc, #56]	; (800c204 <dhcp_arp_reply+0x4c>)
 800c1ca:	f240 328b 	movw	r2, #907	; 0x38b
 800c1ce:	490e      	ldr	r1, [pc, #56]	; (800c208 <dhcp_arp_reply+0x50>)
 800c1d0:	480e      	ldr	r0, [pc, #56]	; (800c20c <dhcp_arp_reply+0x54>)
 800c1d2:	f003 fd77 	bl	800fcc4 <iprintf>
 800c1d6:	e012      	b.n	800c1fe <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1dc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00c      	beq.n	800c1fe <dhcp_arp_reply+0x46>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	795b      	ldrb	r3, [r3, #5]
 800c1e8:	2b08      	cmp	r3, #8
 800c1ea:	d108      	bne.n	800c1fe <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	69db      	ldr	r3, [r3, #28]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d102      	bne.n	800c1fe <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f809 	bl	800c210 <dhcp_decline>
    }
  }
}
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	0801302c 	.word	0x0801302c
 800c208:	08013110 	.word	0x08013110
 800c20c:	0801308c 	.word	0x0801308c

0800c210 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800c210:	b5b0      	push	{r4, r5, r7, lr}
 800c212:	b08a      	sub	sp, #40	; 0x28
 800c214:	af02      	add	r7, sp, #8
 800c216:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c21e:	210c      	movs	r1, #12
 800c220:	69b8      	ldr	r0, [r7, #24]
 800c222:	f000 fc6f 	bl	800cb04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800c226:	f107 030c 	add.w	r3, r7, #12
 800c22a:	2204      	movs	r2, #4
 800c22c:	69b9      	ldr	r1, [r7, #24]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f001 f8f4 	bl	800d41c <dhcp_create_msg>
 800c234:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d035      	beq.n	800c2a8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c242:	89b8      	ldrh	r0, [r7, #12]
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c24a:	2304      	movs	r3, #4
 800c24c:	2232      	movs	r2, #50	; 0x32
 800c24e:	f000 fc73 	bl	800cb38 <dhcp_option>
 800c252:	4603      	mov	r3, r0
 800c254:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c256:	89bc      	ldrh	r4, [r7, #12]
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	69db      	ldr	r3, [r3, #28]
 800c262:	4618      	mov	r0, r3
 800c264:	f7f7 fe67 	bl	8003f36 <lwip_htonl>
 800c268:	4603      	mov	r3, r0
 800c26a:	461a      	mov	r2, r3
 800c26c:	4629      	mov	r1, r5
 800c26e:	4620      	mov	r0, r4
 800c270:	f000 fcee 	bl	800cc50 <dhcp_option_long>
 800c274:	4603      	mov	r3, r0
 800c276:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c278:	89b8      	ldrh	r0, [r7, #12]
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	33f0      	adds	r3, #240	; 0xf0
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	4619      	mov	r1, r3
 800c282:	f001 f9a1 	bl	800d5c8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c286:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <dhcp_decline+0xdc>)
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	4b19      	ldr	r3, [pc, #100]	; (800c2f0 <dhcp_decline+0xe0>)
 800c28c:	9301      	str	r3, [sp, #4]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	2343      	movs	r3, #67	; 0x43
 800c294:	4a17      	ldr	r2, [pc, #92]	; (800c2f4 <dhcp_decline+0xe4>)
 800c296:	6979      	ldr	r1, [r7, #20]
 800c298:	f7ff f8d2 	bl	800b440 <udp_sendto_if_src>
 800c29c:	4603      	mov	r3, r0
 800c29e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c2a0:	6978      	ldr	r0, [r7, #20]
 800c2a2:	f7f9 f957 	bl	8005554 <pbuf_free>
 800c2a6:	e001      	b.n	800c2ac <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c2a8:	23ff      	movs	r3, #255	; 0xff
 800c2aa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	799b      	ldrb	r3, [r3, #6]
 800c2b0:	2bff      	cmp	r3, #255	; 0xff
 800c2b2:	d005      	beq.n	800c2c0 <dhcp_decline+0xb0>
    dhcp->tries++;
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	799b      	ldrb	r3, [r3, #6]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800c2c0:	f242 7310 	movw	r3, #10000	; 0x2710
 800c2c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c2c6:	89fb      	ldrh	r3, [r7, #14]
 800c2c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c2cc:	4a0a      	ldr	r2, [pc, #40]	; (800c2f8 <dhcp_decline+0xe8>)
 800c2ce:	fb82 1203 	smull	r1, r2, r2, r3
 800c2d2:	1152      	asrs	r2, r2, #5
 800c2d4:	17db      	asrs	r3, r3, #31
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c2de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3720      	adds	r7, #32
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000118 	.word	0x20000118
 800c2f0:	08013b80 	.word	0x08013b80
 800c2f4:	08013b84 	.word	0x08013b84
 800c2f8:	10624dd3 	.word	0x10624dd3

0800c2fc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08a      	sub	sp, #40	; 0x28
 800c300:	af02      	add	r7, sp, #8
 800c302:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c308:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	2200      	movs	r2, #0
 800c312:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800c314:	2106      	movs	r1, #6
 800c316:	69b8      	ldr	r0, [r7, #24]
 800c318:	f000 fbf4 	bl	800cb04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800c31c:	f107 0308 	add.w	r3, r7, #8
 800c320:	2201      	movs	r2, #1
 800c322:	69b9      	ldr	r1, [r7, #24]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 f879 	bl	800d41c <dhcp_create_msg>
 800c32a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d04b      	beq.n	800c3ca <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c338:	8938      	ldrh	r0, [r7, #8]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c340:	2302      	movs	r3, #2
 800c342:	2239      	movs	r2, #57	; 0x39
 800c344:	f000 fbf8 	bl	800cb38 <dhcp_option>
 800c348:	4603      	mov	r3, r0
 800c34a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c34c:	8938      	ldrh	r0, [r7, #8]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c358:	461a      	mov	r2, r3
 800c35a:	f000 fc47 	bl	800cbec <dhcp_option_short>
 800c35e:	4603      	mov	r3, r0
 800c360:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c362:	8938      	ldrh	r0, [r7, #8]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c36a:	2303      	movs	r3, #3
 800c36c:	2237      	movs	r2, #55	; 0x37
 800c36e:	f000 fbe3 	bl	800cb38 <dhcp_option>
 800c372:	4603      	mov	r3, r0
 800c374:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c376:	2300      	movs	r3, #0
 800c378:	77fb      	strb	r3, [r7, #31]
 800c37a:	e00e      	b.n	800c39a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c37c:	8938      	ldrh	r0, [r7, #8]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c384:	7ffb      	ldrb	r3, [r7, #31]
 800c386:	4a29      	ldr	r2, [pc, #164]	; (800c42c <dhcp_discover+0x130>)
 800c388:	5cd3      	ldrb	r3, [r2, r3]
 800c38a:	461a      	mov	r2, r3
 800c38c:	f000 fc08 	bl	800cba0 <dhcp_option_byte>
 800c390:	4603      	mov	r3, r0
 800c392:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c394:	7ffb      	ldrb	r3, [r7, #31]
 800c396:	3301      	adds	r3, #1
 800c398:	77fb      	strb	r3, [r7, #31]
 800c39a:	7ffb      	ldrb	r3, [r7, #31]
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d9ed      	bls.n	800c37c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c3a0:	8938      	ldrh	r0, [r7, #8]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	33f0      	adds	r3, #240	; 0xf0
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	f001 f90d 	bl	800d5c8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c3ae:	4b20      	ldr	r3, [pc, #128]	; (800c430 <dhcp_discover+0x134>)
 800c3b0:	6818      	ldr	r0, [r3, #0]
 800c3b2:	4b20      	ldr	r3, [pc, #128]	; (800c434 <dhcp_discover+0x138>)
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	2343      	movs	r3, #67	; 0x43
 800c3bc:	4a1e      	ldr	r2, [pc, #120]	; (800c438 <dhcp_discover+0x13c>)
 800c3be:	6939      	ldr	r1, [r7, #16]
 800c3c0:	f7ff f83e 	bl	800b440 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800c3c4:	6938      	ldr	r0, [r7, #16]
 800c3c6:	f7f9 f8c5 	bl	8005554 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	799b      	ldrb	r3, [r3, #6]
 800c3ce:	2bff      	cmp	r3, #255	; 0xff
 800c3d0:	d005      	beq.n	800c3de <dhcp_discover+0xe2>
    dhcp->tries++;
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	799b      	ldrb	r3, [r3, #6]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	799b      	ldrb	r3, [r3, #6]
 800c3e2:	2b05      	cmp	r3, #5
 800c3e4:	d80d      	bhi.n	800c402 <dhcp_discover+0x106>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	799b      	ldrb	r3, [r3, #6]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	4093      	lsls	r3, r2
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	0152      	lsls	r2, r2, #5
 800c3f6:	1ad2      	subs	r2, r2, r3
 800c3f8:	0092      	lsls	r2, r2, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	e001      	b.n	800c406 <dhcp_discover+0x10a>
 800c402:	f64e 2360 	movw	r3, #60000	; 0xea60
 800c406:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c408:	897b      	ldrh	r3, [r7, #10]
 800c40a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c40e:	4a0b      	ldr	r2, [pc, #44]	; (800c43c <dhcp_discover+0x140>)
 800c410:	fb82 1203 	smull	r1, r2, r2, r3
 800c414:	1152      	asrs	r2, r2, #5
 800c416:	17db      	asrs	r3, r3, #31
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3720      	adds	r7, #32
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	20000014 	.word	0x20000014
 800c430:	20000118 	.word	0x20000118
 800c434:	08013b80 	.word	0x08013b80
 800c438:	08013b84 	.word	0x08013b84
 800c43c:	10624dd3 	.word	0x10624dd3

0800c440 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b088      	sub	sp, #32
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d107      	bne.n	800c45e <dhcp_bind+0x1e>
 800c44e:	4b64      	ldr	r3, [pc, #400]	; (800c5e0 <dhcp_bind+0x1a0>)
 800c450:	f240 4215 	movw	r2, #1045	; 0x415
 800c454:	4963      	ldr	r1, [pc, #396]	; (800c5e4 <dhcp_bind+0x1a4>)
 800c456:	4864      	ldr	r0, [pc, #400]	; (800c5e8 <dhcp_bind+0x1a8>)
 800c458:	f003 fc34 	bl	800fcc4 <iprintf>
 800c45c:	e0bc      	b.n	800c5d8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c462:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d107      	bne.n	800c47a <dhcp_bind+0x3a>
 800c46a:	4b5d      	ldr	r3, [pc, #372]	; (800c5e0 <dhcp_bind+0x1a0>)
 800c46c:	f240 4217 	movw	r2, #1047	; 0x417
 800c470:	495e      	ldr	r1, [pc, #376]	; (800c5ec <dhcp_bind+0x1ac>)
 800c472:	485d      	ldr	r0, [pc, #372]	; (800c5e8 <dhcp_bind+0x1a8>)
 800c474:	f003 fc26 	bl	800fcc4 <iprintf>
 800c478:	e0ae      	b.n	800c5d8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	2200      	movs	r2, #0
 800c47e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c488:	d019      	beq.n	800c4be <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c48a:	69bb      	ldr	r3, [r7, #24]
 800c48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48e:	331e      	adds	r3, #30
 800c490:	4a57      	ldr	r2, [pc, #348]	; (800c5f0 <dhcp_bind+0x1b0>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	095b      	lsrs	r3, r3, #5
 800c498:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4a0:	d302      	bcc.n	800c4a8 <dhcp_bind+0x68>
      timeout = 0xffff;
 800c4a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	8a9b      	ldrh	r3, [r3, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d102      	bne.n	800c4be <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c6:	d01d      	beq.n	800c504 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4cc:	331e      	adds	r3, #30
 800c4ce:	4a48      	ldr	r2, [pc, #288]	; (800c5f0 <dhcp_bind+0x1b0>)
 800c4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d4:	095b      	lsrs	r3, r3, #5
 800c4d6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4de:	d302      	bcc.n	800c4e6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800c4e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4e4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	895b      	ldrh	r3, [r3, #10]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d102      	bne.n	800c4fc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	895a      	ldrh	r2, [r3, #10]
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c50c:	d01d      	beq.n	800c54a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c512:	331e      	adds	r3, #30
 800c514:	4a36      	ldr	r2, [pc, #216]	; (800c5f0 <dhcp_bind+0x1b0>)
 800c516:	fba2 2303 	umull	r2, r3, r2, r3
 800c51a:	095b      	lsrs	r3, r3, #5
 800c51c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c524:	d302      	bcc.n	800c52c <dhcp_bind+0xec>
      timeout = 0xffff;
 800c526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c52a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	b29a      	uxth	r2, r3
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	899b      	ldrh	r3, [r3, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d102      	bne.n	800c542 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	2201      	movs	r2, #1
 800c540:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	899a      	ldrh	r2, [r3, #12]
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	895a      	ldrh	r2, [r3, #10]
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	899b      	ldrh	r3, [r3, #12]
 800c552:	429a      	cmp	r2, r3
 800c554:	d306      	bcc.n	800c564 <dhcp_bind+0x124>
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	899b      	ldrh	r3, [r3, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d002      	beq.n	800c564 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800c55e:	69bb      	ldr	r3, [r7, #24]
 800c560:	2200      	movs	r2, #0
 800c562:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	79db      	ldrb	r3, [r3, #7]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	6a1b      	ldr	r3, [r3, #32]
 800c570:	613b      	str	r3, [r7, #16]
 800c572:	e014      	b.n	800c59e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	331c      	adds	r3, #28
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800c57c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c580:	2b00      	cmp	r3, #0
 800c582:	db02      	blt.n	800c58a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800c584:	23ff      	movs	r3, #255	; 0xff
 800c586:	613b      	str	r3, [r7, #16]
 800c588:	e009      	b.n	800c59e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
 800c58c:	2bbf      	cmp	r3, #191	; 0xbf
 800c58e:	d903      	bls.n	800c598 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800c590:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800c594:	613b      	str	r3, [r7, #16]
 800c596:	e002      	b.n	800c59e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800c598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c59c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d108      	bne.n	800c5bc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	69da      	ldr	r2, [r3, #28]
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c5ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800c5bc:	210a      	movs	r1, #10
 800c5be:	69b8      	ldr	r0, [r7, #24]
 800c5c0:	f000 faa0 	bl	800cb04 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	f103 011c 	add.w	r1, r3, #28
 800c5ca:	f107 030c 	add.w	r3, r7, #12
 800c5ce:	f107 0210 	add.w	r2, r7, #16
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f7f8 fade 	bl	8004b94 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800c5d8:	3720      	adds	r7, #32
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	0801302c 	.word	0x0801302c
 800c5e4:	0801318c 	.word	0x0801318c
 800c5e8:	0801308c 	.word	0x0801308c
 800c5ec:	080131a8 	.word	0x080131a8
 800c5f0:	88888889 	.word	0x88888889

0800c5f4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08a      	sub	sp, #40	; 0x28
 800c5f8:	af02      	add	r7, sp, #8
 800c5fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c600:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800c602:	2105      	movs	r1, #5
 800c604:	69b8      	ldr	r0, [r7, #24]
 800c606:	f000 fa7d 	bl	800cb04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c60a:	f107 030c 	add.w	r3, r7, #12
 800c60e:	2203      	movs	r2, #3
 800c610:	69b9      	ldr	r1, [r7, #24]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 ff02 	bl	800d41c <dhcp_create_msg>
 800c618:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d04e      	beq.n	800c6be <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c626:	89b8      	ldrh	r0, [r7, #12]
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c62e:	2302      	movs	r3, #2
 800c630:	2239      	movs	r2, #57	; 0x39
 800c632:	f000 fa81 	bl	800cb38 <dhcp_option>
 800c636:	4603      	mov	r3, r0
 800c638:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c63a:	89b8      	ldrh	r0, [r7, #12]
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c646:	461a      	mov	r2, r3
 800c648:	f000 fad0 	bl	800cbec <dhcp_option_short>
 800c64c:	4603      	mov	r3, r0
 800c64e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c650:	89b8      	ldrh	r0, [r7, #12]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c658:	2303      	movs	r3, #3
 800c65a:	2237      	movs	r2, #55	; 0x37
 800c65c:	f000 fa6c 	bl	800cb38 <dhcp_option>
 800c660:	4603      	mov	r3, r0
 800c662:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c664:	2300      	movs	r3, #0
 800c666:	77bb      	strb	r3, [r7, #30]
 800c668:	e00e      	b.n	800c688 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c66a:	89b8      	ldrh	r0, [r7, #12]
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c672:	7fbb      	ldrb	r3, [r7, #30]
 800c674:	4a2a      	ldr	r2, [pc, #168]	; (800c720 <dhcp_renew+0x12c>)
 800c676:	5cd3      	ldrb	r3, [r2, r3]
 800c678:	461a      	mov	r2, r3
 800c67a:	f000 fa91 	bl	800cba0 <dhcp_option_byte>
 800c67e:	4603      	mov	r3, r0
 800c680:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c682:	7fbb      	ldrb	r3, [r7, #30]
 800c684:	3301      	adds	r3, #1
 800c686:	77bb      	strb	r3, [r7, #30]
 800c688:	7fbb      	ldrb	r3, [r7, #30]
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d9ed      	bls.n	800c66a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c68e:	89b8      	ldrh	r0, [r7, #12]
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	33f0      	adds	r3, #240	; 0xf0
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	4619      	mov	r1, r3
 800c698:	f000 ff96 	bl	800d5c8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c69c:	4b21      	ldr	r3, [pc, #132]	; (800c724 <dhcp_renew+0x130>)
 800c69e:	6818      	ldr	r0, [r3, #0]
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	f103 0218 	add.w	r2, r3, #24
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	2343      	movs	r3, #67	; 0x43
 800c6ac:	6979      	ldr	r1, [r7, #20]
 800c6ae:	f7fe fe53 	bl	800b358 <udp_sendto_if>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c6b6:	6978      	ldr	r0, [r7, #20]
 800c6b8:	f7f8 ff4c 	bl	8005554 <pbuf_free>
 800c6bc:	e001      	b.n	800c6c2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c6be:	23ff      	movs	r3, #255	; 0xff
 800c6c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	799b      	ldrb	r3, [r3, #6]
 800c6c6:	2bff      	cmp	r3, #255	; 0xff
 800c6c8:	d005      	beq.n	800c6d6 <dhcp_renew+0xe2>
    dhcp->tries++;
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	799b      	ldrb	r3, [r3, #6]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	799b      	ldrb	r3, [r3, #6]
 800c6da:	2b09      	cmp	r3, #9
 800c6dc:	d80a      	bhi.n	800c6f4 <dhcp_renew+0x100>
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	799b      	ldrb	r3, [r3, #6]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	0152      	lsls	r2, r2, #5
 800c6e8:	1ad2      	subs	r2, r2, r3
 800c6ea:	0092      	lsls	r2, r2, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	011b      	lsls	r3, r3, #4
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	e001      	b.n	800c6f8 <dhcp_renew+0x104>
 800c6f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c6f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c6fa:	89fb      	ldrh	r3, [r7, #14]
 800c6fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c700:	4a09      	ldr	r2, [pc, #36]	; (800c728 <dhcp_renew+0x134>)
 800c702:	fb82 1203 	smull	r1, r2, r2, r3
 800c706:	1152      	asrs	r2, r2, #5
 800c708:	17db      	asrs	r3, r3, #31
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c712:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3720      	adds	r7, #32
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20000014 	.word	0x20000014
 800c724:	20000118 	.word	0x20000118
 800c728:	10624dd3 	.word	0x10624dd3

0800c72c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08a      	sub	sp, #40	; 0x28
 800c730:	af02      	add	r7, sp, #8
 800c732:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c73a:	2104      	movs	r1, #4
 800c73c:	69b8      	ldr	r0, [r7, #24]
 800c73e:	f000 f9e1 	bl	800cb04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c742:	f107 030c 	add.w	r3, r7, #12
 800c746:	2203      	movs	r2, #3
 800c748:	69b9      	ldr	r1, [r7, #24]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fe66 	bl	800d41c <dhcp_create_msg>
 800c750:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d04c      	beq.n	800c7f2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c75e:	89b8      	ldrh	r0, [r7, #12]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c766:	2302      	movs	r3, #2
 800c768:	2239      	movs	r2, #57	; 0x39
 800c76a:	f000 f9e5 	bl	800cb38 <dhcp_option>
 800c76e:	4603      	mov	r3, r0
 800c770:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c772:	89b8      	ldrh	r0, [r7, #12]
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c77e:	461a      	mov	r2, r3
 800c780:	f000 fa34 	bl	800cbec <dhcp_option_short>
 800c784:	4603      	mov	r3, r0
 800c786:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c788:	89b8      	ldrh	r0, [r7, #12]
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c790:	2303      	movs	r3, #3
 800c792:	2237      	movs	r2, #55	; 0x37
 800c794:	f000 f9d0 	bl	800cb38 <dhcp_option>
 800c798:	4603      	mov	r3, r0
 800c79a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c79c:	2300      	movs	r3, #0
 800c79e:	77bb      	strb	r3, [r7, #30]
 800c7a0:	e00e      	b.n	800c7c0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c7a2:	89b8      	ldrh	r0, [r7, #12]
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c7aa:	7fbb      	ldrb	r3, [r7, #30]
 800c7ac:	4a29      	ldr	r2, [pc, #164]	; (800c854 <dhcp_rebind+0x128>)
 800c7ae:	5cd3      	ldrb	r3, [r2, r3]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	f000 f9f5 	bl	800cba0 <dhcp_option_byte>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c7ba:	7fbb      	ldrb	r3, [r7, #30]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	77bb      	strb	r3, [r7, #30]
 800c7c0:	7fbb      	ldrb	r3, [r7, #30]
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d9ed      	bls.n	800c7a2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c7c6:	89b8      	ldrh	r0, [r7, #12]
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	33f0      	adds	r3, #240	; 0xf0
 800c7cc:	697a      	ldr	r2, [r7, #20]
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f000 fefa 	bl	800d5c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c7d4:	4b20      	ldr	r3, [pc, #128]	; (800c858 <dhcp_rebind+0x12c>)
 800c7d6:	6818      	ldr	r0, [r3, #0]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	2343      	movs	r3, #67	; 0x43
 800c7de:	4a1f      	ldr	r2, [pc, #124]	; (800c85c <dhcp_rebind+0x130>)
 800c7e0:	6979      	ldr	r1, [r7, #20]
 800c7e2:	f7fe fdb9 	bl	800b358 <udp_sendto_if>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c7ea:	6978      	ldr	r0, [r7, #20]
 800c7ec:	f7f8 feb2 	bl	8005554 <pbuf_free>
 800c7f0:	e001      	b.n	800c7f6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c7f2:	23ff      	movs	r3, #255	; 0xff
 800c7f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	799b      	ldrb	r3, [r3, #6]
 800c7fa:	2bff      	cmp	r3, #255	; 0xff
 800c7fc:	d005      	beq.n	800c80a <dhcp_rebind+0xde>
    dhcp->tries++;
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	799b      	ldrb	r3, [r3, #6]
 800c802:	3301      	adds	r3, #1
 800c804:	b2da      	uxtb	r2, r3
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	799b      	ldrb	r3, [r3, #6]
 800c80e:	2b09      	cmp	r3, #9
 800c810:	d80a      	bhi.n	800c828 <dhcp_rebind+0xfc>
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	799b      	ldrb	r3, [r3, #6]
 800c816:	b29b      	uxth	r3, r3
 800c818:	461a      	mov	r2, r3
 800c81a:	0152      	lsls	r2, r2, #5
 800c81c:	1ad2      	subs	r2, r2, r3
 800c81e:	0092      	lsls	r2, r2, #2
 800c820:	4413      	add	r3, r2
 800c822:	00db      	lsls	r3, r3, #3
 800c824:	b29b      	uxth	r3, r3
 800c826:	e001      	b.n	800c82c <dhcp_rebind+0x100>
 800c828:	f242 7310 	movw	r3, #10000	; 0x2710
 800c82c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c82e:	89fb      	ldrh	r3, [r7, #14]
 800c830:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c834:	4a0a      	ldr	r2, [pc, #40]	; (800c860 <dhcp_rebind+0x134>)
 800c836:	fb82 1203 	smull	r1, r2, r2, r3
 800c83a:	1152      	asrs	r2, r2, #5
 800c83c:	17db      	asrs	r3, r3, #31
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	b29a      	uxth	r2, r3
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c846:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3720      	adds	r7, #32
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20000014 	.word	0x20000014
 800c858:	20000118 	.word	0x20000118
 800c85c:	08013b84 	.word	0x08013b84
 800c860:	10624dd3 	.word	0x10624dd3

0800c864 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c864:	b5b0      	push	{r4, r5, r7, lr}
 800c866:	b08a      	sub	sp, #40	; 0x28
 800c868:	af02      	add	r7, sp, #8
 800c86a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c870:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c872:	2103      	movs	r1, #3
 800c874:	69b8      	ldr	r0, [r7, #24]
 800c876:	f000 f945 	bl	800cb04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c87a:	f107 030c 	add.w	r3, r7, #12
 800c87e:	2203      	movs	r2, #3
 800c880:	69b9      	ldr	r1, [r7, #24]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fdca 	bl	800d41c <dhcp_create_msg>
 800c888:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d066      	beq.n	800c95e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c896:	89b8      	ldrh	r0, [r7, #12]
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c89e:	2302      	movs	r3, #2
 800c8a0:	2239      	movs	r2, #57	; 0x39
 800c8a2:	f000 f949 	bl	800cb38 <dhcp_option>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c8aa:	89b8      	ldrh	r0, [r7, #12]
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	33f0      	adds	r3, #240	; 0xf0
 800c8b0:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	f000 f999 	bl	800cbec <dhcp_option_short>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c8be:	89b8      	ldrh	r0, [r7, #12]
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c8c6:	2304      	movs	r3, #4
 800c8c8:	2232      	movs	r2, #50	; 0x32
 800c8ca:	f000 f935 	bl	800cb38 <dhcp_option>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c8d2:	89bc      	ldrh	r4, [r7, #12]
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7f7 fb29 	bl	8003f36 <lwip_htonl>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 f9b0 	bl	800cc50 <dhcp_option_long>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c8f4:	89b8      	ldrh	r0, [r7, #12]
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	2237      	movs	r2, #55	; 0x37
 800c900:	f000 f91a 	bl	800cb38 <dhcp_option>
 800c904:	4603      	mov	r3, r0
 800c906:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c908:	2300      	movs	r3, #0
 800c90a:	77bb      	strb	r3, [r7, #30]
 800c90c:	e00e      	b.n	800c92c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c90e:	89b8      	ldrh	r0, [r7, #12]
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c916:	7fbb      	ldrb	r3, [r7, #30]
 800c918:	4a29      	ldr	r2, [pc, #164]	; (800c9c0 <dhcp_reboot+0x15c>)
 800c91a:	5cd3      	ldrb	r3, [r2, r3]
 800c91c:	461a      	mov	r2, r3
 800c91e:	f000 f93f 	bl	800cba0 <dhcp_option_byte>
 800c922:	4603      	mov	r3, r0
 800c924:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c926:	7fbb      	ldrb	r3, [r7, #30]
 800c928:	3301      	adds	r3, #1
 800c92a:	77bb      	strb	r3, [r7, #30]
 800c92c:	7fbb      	ldrb	r3, [r7, #30]
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d9ed      	bls.n	800c90e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c932:	89b8      	ldrh	r0, [r7, #12]
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	33f0      	adds	r3, #240	; 0xf0
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	4619      	mov	r1, r3
 800c93c:	f000 fe44 	bl	800d5c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c940:	4b20      	ldr	r3, [pc, #128]	; (800c9c4 <dhcp_reboot+0x160>)
 800c942:	6818      	ldr	r0, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	2343      	movs	r3, #67	; 0x43
 800c94a:	4a1f      	ldr	r2, [pc, #124]	; (800c9c8 <dhcp_reboot+0x164>)
 800c94c:	6979      	ldr	r1, [r7, #20]
 800c94e:	f7fe fd03 	bl	800b358 <udp_sendto_if>
 800c952:	4603      	mov	r3, r0
 800c954:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c956:	6978      	ldr	r0, [r7, #20]
 800c958:	f7f8 fdfc 	bl	8005554 <pbuf_free>
 800c95c:	e001      	b.n	800c962 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c95e:	23ff      	movs	r3, #255	; 0xff
 800c960:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	799b      	ldrb	r3, [r3, #6]
 800c966:	2bff      	cmp	r3, #255	; 0xff
 800c968:	d005      	beq.n	800c976 <dhcp_reboot+0x112>
    dhcp->tries++;
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	799b      	ldrb	r3, [r3, #6]
 800c96e:	3301      	adds	r3, #1
 800c970:	b2da      	uxtb	r2, r3
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	799b      	ldrb	r3, [r3, #6]
 800c97a:	2b09      	cmp	r3, #9
 800c97c:	d80a      	bhi.n	800c994 <dhcp_reboot+0x130>
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	799b      	ldrb	r3, [r3, #6]
 800c982:	b29b      	uxth	r3, r3
 800c984:	461a      	mov	r2, r3
 800c986:	0152      	lsls	r2, r2, #5
 800c988:	1ad2      	subs	r2, r2, r3
 800c98a:	0092      	lsls	r2, r2, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	00db      	lsls	r3, r3, #3
 800c990:	b29b      	uxth	r3, r3
 800c992:	e001      	b.n	800c998 <dhcp_reboot+0x134>
 800c994:	f242 7310 	movw	r3, #10000	; 0x2710
 800c998:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c99a:	89fb      	ldrh	r3, [r7, #14]
 800c99c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c9a0:	4a0a      	ldr	r2, [pc, #40]	; (800c9cc <dhcp_reboot+0x168>)
 800c9a2:	fb82 1203 	smull	r1, r2, r2, r3
 800c9a6:	1152      	asrs	r2, r2, #5
 800c9a8:	17db      	asrs	r3, r3, #31
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c9b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3720      	adds	r7, #32
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bdb0      	pop	{r4, r5, r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20000014 	.word	0x20000014
 800c9c4:	20000118 	.word	0x20000118
 800c9c8:	08013b84 	.word	0x08013b84
 800c9cc:	10624dd3 	.word	0x10624dd3

0800c9d0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800c9d0:	b5b0      	push	{r4, r5, r7, lr}
 800c9d2:	b08a      	sub	sp, #40	; 0x28
 800c9d4:	af02      	add	r7, sp, #8
 800c9d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800c9de:	69fb      	ldr	r3, [r7, #28]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 8084 	beq.w	800caee <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	795b      	ldrb	r3, [r3, #5]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f000 8081 	beq.w	800caf2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	2200      	movs	r2, #0
 800ca06:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	2200      	movs	r2, #0
 800ca12:	631a      	str	r2, [r3, #48]	; 0x30
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	2200      	movs	r2, #0
 800ca28:	829a      	strh	r2, [r3, #20]
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	8a9a      	ldrh	r2, [r3, #20]
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	825a      	strh	r2, [r3, #18]
 800ca32:	69fb      	ldr	r3, [r7, #28]
 800ca34:	8a5a      	ldrh	r2, [r3, #18]
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	821a      	strh	r2, [r3, #16]
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	8a1a      	ldrh	r2, [r3, #16]
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fdee 	bl	800d624 <dhcp_supplied_address>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d03b      	beq.n	800cac6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800ca4e:	f107 030e 	add.w	r3, r7, #14
 800ca52:	2207      	movs	r2, #7
 800ca54:	69f9      	ldr	r1, [r7, #28]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fce0 	bl	800d41c <dhcp_create_msg>
 800ca5c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d030      	beq.n	800cac6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ca64:	69bb      	ldr	r3, [r7, #24]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ca6a:	89f8      	ldrh	r0, [r7, #14]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ca72:	2304      	movs	r3, #4
 800ca74:	2236      	movs	r2, #54	; 0x36
 800ca76:	f000 f85f 	bl	800cb38 <dhcp_option>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800ca7e:	89fc      	ldrh	r4, [r7, #14]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f7 fa54 	bl	8003f36 <lwip_htonl>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	4629      	mov	r1, r5
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 f8db 	bl	800cc50 <dhcp_option_long>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ca9e:	89f8      	ldrh	r0, [r7, #14]
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	33f0      	adds	r3, #240	; 0xf0
 800caa4:	69ba      	ldr	r2, [r7, #24]
 800caa6:	4619      	mov	r1, r3
 800caa8:	f000 fd8e 	bl	800d5c8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800caac:	4b13      	ldr	r3, [pc, #76]	; (800cafc <dhcp_release_and_stop+0x12c>)
 800caae:	6818      	ldr	r0, [r3, #0]
 800cab0:	f107 0210 	add.w	r2, r7, #16
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	2343      	movs	r3, #67	; 0x43
 800caba:	69b9      	ldr	r1, [r7, #24]
 800cabc:	f7fe fc4c 	bl	800b358 <udp_sendto_if>
      pbuf_free(p_out);
 800cac0:	69b8      	ldr	r0, [r7, #24]
 800cac2:	f7f8 fd47 	bl	8005554 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800cac6:	4b0e      	ldr	r3, [pc, #56]	; (800cb00 <dhcp_release_and_stop+0x130>)
 800cac8:	4a0d      	ldr	r2, [pc, #52]	; (800cb00 <dhcp_release_and_stop+0x130>)
 800caca:	490d      	ldr	r1, [pc, #52]	; (800cb00 <dhcp_release_and_stop+0x130>)
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7f8 f861 	bl	8004b94 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800cad2:	2100      	movs	r1, #0
 800cad4:	69f8      	ldr	r0, [r7, #28]
 800cad6:	f000 f815 	bl	800cb04 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	791b      	ldrb	r3, [r3, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d008      	beq.n	800caf4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800cae2:	f7fe ff85 	bl	800b9f0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	2200      	movs	r2, #0
 800caea:	711a      	strb	r2, [r3, #4]
 800caec:	e002      	b.n	800caf4 <dhcp_release_and_stop+0x124>
    return;
 800caee:	bf00      	nop
 800caf0:	e000      	b.n	800caf4 <dhcp_release_and_stop+0x124>
    return;
 800caf2:	bf00      	nop
  }
}
 800caf4:	3720      	adds	r7, #32
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bdb0      	pop	{r4, r5, r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20000118 	.word	0x20000118
 800cb00:	08013b80 	.word	0x08013b80

0800cb04 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	795b      	ldrb	r3, [r3, #5]
 800cb14:	78fa      	ldrb	r2, [r7, #3]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d008      	beq.n	800cb2c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	78fa      	ldrb	r2, [r7, #3]
 800cb1e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	811a      	strh	r2, [r3, #8]
  }
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6039      	str	r1, [r7, #0]
 800cb40:	4611      	mov	r1, r2
 800cb42:	461a      	mov	r2, r3
 800cb44:	4603      	mov	r3, r0
 800cb46:	80fb      	strh	r3, [r7, #6]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	717b      	strb	r3, [r7, #5]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cb50:	88fa      	ldrh	r2, [r7, #6]
 800cb52:	793b      	ldrb	r3, [r7, #4]
 800cb54:	4413      	add	r3, r2
 800cb56:	3302      	adds	r3, #2
 800cb58:	2b44      	cmp	r3, #68	; 0x44
 800cb5a:	d906      	bls.n	800cb6a <dhcp_option+0x32>
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <dhcp_option+0x5c>)
 800cb5e:	f240 529a 	movw	r2, #1434	; 0x59a
 800cb62:	490d      	ldr	r1, [pc, #52]	; (800cb98 <dhcp_option+0x60>)
 800cb64:	480d      	ldr	r0, [pc, #52]	; (800cb9c <dhcp_option+0x64>)
 800cb66:	f003 f8ad 	bl	800fcc4 <iprintf>
  options[options_out_len++] = option_type;
 800cb6a:	88fb      	ldrh	r3, [r7, #6]
 800cb6c:	1c5a      	adds	r2, r3, #1
 800cb6e:	80fa      	strh	r2, [r7, #6]
 800cb70:	461a      	mov	r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	4413      	add	r3, r2
 800cb76:	797a      	ldrb	r2, [r7, #5]
 800cb78:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800cb7a:	88fb      	ldrh	r3, [r7, #6]
 800cb7c:	1c5a      	adds	r2, r3, #1
 800cb7e:	80fa      	strh	r2, [r7, #6]
 800cb80:	461a      	mov	r2, r3
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	4413      	add	r3, r2
 800cb86:	793a      	ldrb	r2, [r7, #4]
 800cb88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800cb8a:	88fb      	ldrh	r3, [r7, #6]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3708      	adds	r7, #8
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	0801302c 	.word	0x0801302c
 800cb98:	080131c0 	.word	0x080131c0
 800cb9c:	0801308c 	.word	0x0801308c

0800cba0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	4603      	mov	r3, r0
 800cba8:	6039      	str	r1, [r7, #0]
 800cbaa:	80fb      	strh	r3, [r7, #6]
 800cbac:	4613      	mov	r3, r2
 800cbae:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cbb0:	88fb      	ldrh	r3, [r7, #6]
 800cbb2:	2b43      	cmp	r3, #67	; 0x43
 800cbb4:	d906      	bls.n	800cbc4 <dhcp_option_byte+0x24>
 800cbb6:	4b0a      	ldr	r3, [pc, #40]	; (800cbe0 <dhcp_option_byte+0x40>)
 800cbb8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800cbbc:	4909      	ldr	r1, [pc, #36]	; (800cbe4 <dhcp_option_byte+0x44>)
 800cbbe:	480a      	ldr	r0, [pc, #40]	; (800cbe8 <dhcp_option_byte+0x48>)
 800cbc0:	f003 f880 	bl	800fcc4 <iprintf>
  options[options_out_len++] = value;
 800cbc4:	88fb      	ldrh	r3, [r7, #6]
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	80fa      	strh	r2, [r7, #6]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	4413      	add	r3, r2
 800cbd0:	797a      	ldrb	r2, [r7, #5]
 800cbd2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800cbd4:	88fb      	ldrh	r3, [r7, #6]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	0801302c 	.word	0x0801302c
 800cbe4:	08013204 	.word	0x08013204
 800cbe8:	0801308c 	.word	0x0801308c

0800cbec <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	80fb      	strh	r3, [r7, #6]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800cbfc:	88fb      	ldrh	r3, [r7, #6]
 800cbfe:	3302      	adds	r3, #2
 800cc00:	2b44      	cmp	r3, #68	; 0x44
 800cc02:	d906      	bls.n	800cc12 <dhcp_option_short+0x26>
 800cc04:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <dhcp_option_short+0x58>)
 800cc06:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800cc0a:	490f      	ldr	r1, [pc, #60]	; (800cc48 <dhcp_option_short+0x5c>)
 800cc0c:	480f      	ldr	r0, [pc, #60]	; (800cc4c <dhcp_option_short+0x60>)
 800cc0e:	f003 f859 	bl	800fcc4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800cc12:	88bb      	ldrh	r3, [r7, #4]
 800cc14:	0a1b      	lsrs	r3, r3, #8
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	88fb      	ldrh	r3, [r7, #6]
 800cc1a:	1c59      	adds	r1, r3, #1
 800cc1c:	80f9      	strh	r1, [r7, #6]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	440b      	add	r3, r1
 800cc24:	b2d2      	uxtb	r2, r2
 800cc26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800cc28:	88fb      	ldrh	r3, [r7, #6]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	80fa      	strh	r2, [r7, #6]
 800cc2e:	461a      	mov	r2, r3
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	4413      	add	r3, r2
 800cc34:	88ba      	ldrh	r2, [r7, #4]
 800cc36:	b2d2      	uxtb	r2, r2
 800cc38:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800cc3a:	88fb      	ldrh	r3, [r7, #6]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	0801302c 	.word	0x0801302c
 800cc48:	0801323c 	.word	0x0801323c
 800cc4c:	0801308c 	.word	0x0801308c

0800cc50 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
 800cc5c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800cc5e:	89fb      	ldrh	r3, [r7, #14]
 800cc60:	3304      	adds	r3, #4
 800cc62:	2b44      	cmp	r3, #68	; 0x44
 800cc64:	d906      	bls.n	800cc74 <dhcp_option_long+0x24>
 800cc66:	4b19      	ldr	r3, [pc, #100]	; (800cccc <dhcp_option_long+0x7c>)
 800cc68:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800cc6c:	4918      	ldr	r1, [pc, #96]	; (800ccd0 <dhcp_option_long+0x80>)
 800cc6e:	4819      	ldr	r0, [pc, #100]	; (800ccd4 <dhcp_option_long+0x84>)
 800cc70:	f003 f828 	bl	800fcc4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	0e1a      	lsrs	r2, r3, #24
 800cc78:	89fb      	ldrh	r3, [r7, #14]
 800cc7a:	1c59      	adds	r1, r3, #1
 800cc7c:	81f9      	strh	r1, [r7, #14]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	440b      	add	r3, r1
 800cc84:	b2d2      	uxtb	r2, r2
 800cc86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	0c1a      	lsrs	r2, r3, #16
 800cc8c:	89fb      	ldrh	r3, [r7, #14]
 800cc8e:	1c59      	adds	r1, r3, #1
 800cc90:	81f9      	strh	r1, [r7, #14]
 800cc92:	4619      	mov	r1, r3
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	440b      	add	r3, r1
 800cc98:	b2d2      	uxtb	r2, r2
 800cc9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	0a1a      	lsrs	r2, r3, #8
 800cca0:	89fb      	ldrh	r3, [r7, #14]
 800cca2:	1c59      	adds	r1, r3, #1
 800cca4:	81f9      	strh	r1, [r7, #14]
 800cca6:	4619      	mov	r1, r3
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	440b      	add	r3, r1
 800ccac:	b2d2      	uxtb	r2, r2
 800ccae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800ccb0:	89fb      	ldrh	r3, [r7, #14]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	81fa      	strh	r2, [r7, #14]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	4413      	add	r3, r2
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	b2d2      	uxtb	r2, r2
 800ccc0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ccc2:	89fb      	ldrh	r3, [r7, #14]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	0801302c 	.word	0x0801302c
 800ccd0:	08013278 	.word	0x08013278
 800ccd4:	0801308c 	.word	0x0801308c

0800ccd8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b090      	sub	sp, #64	; 0x40
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800ccea:	2208      	movs	r2, #8
 800ccec:	2100      	movs	r1, #0
 800ccee:	48be      	ldr	r0, [pc, #760]	; (800cfe8 <dhcp_parse_reply+0x310>)
 800ccf0:	f002 ffe0 	bl	800fcb4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	895b      	ldrh	r3, [r3, #10]
 800ccf8:	2b2b      	cmp	r3, #43	; 0x2b
 800ccfa:	d802      	bhi.n	800cd02 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800ccfc:	f06f 0301 	mvn.w	r3, #1
 800cd00:	e2a8      	b.n	800d254 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800cd08:	23f0      	movs	r3, #240	; 0xf0
 800cd0a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	891b      	ldrh	r3, [r3, #8]
 800cd10:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800cd16:	e00c      	b.n	800cd32 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800cd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1a:	895b      	ldrh	r3, [r3, #10]
 800cd1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800cd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd24:	895b      	ldrh	r3, [r3, #10]
 800cd26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800cd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d004      	beq.n	800cd42 <dhcp_parse_reply+0x6a>
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	895b      	ldrh	r3, [r3, #10]
 800cd3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d2ea      	bcs.n	800cd18 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800cd48:	f06f 0301 	mvn.w	r3, #1
 800cd4c:	e282      	b.n	800d254 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800cd4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd50:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800cd52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd54:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800cd5c:	e23a      	b.n	800d1d4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800cd5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd62:	4413      	add	r3, r2
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800cd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd72:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800cd74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd76:	3302      	adds	r3, #2
 800cd78:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800cd7a:	8bfa      	ldrh	r2, [r7, #30]
 800cd7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d202      	bcs.n	800cd88 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800cd82:	f06f 0301 	mvn.w	r3, #1
 800cd86:	e265      	b.n	800d254 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800cd88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd8e:	8952      	ldrh	r2, [r2, #10]
 800cd90:	4293      	cmp	r3, r2
 800cd92:	da07      	bge.n	800cda4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800cd94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cd96:	3301      	adds	r3, #1
 800cd98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cd9a:	4413      	add	r3, r2
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cda2:	e00b      	b.n	800cdbc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800cda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d004      	beq.n	800cdb6 <dhcp_parse_reply+0xde>
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	e000      	b.n	800cdb8 <dhcp_parse_reply+0xe0>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800cdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800cdc4:	7dfb      	ldrb	r3, [r7, #23]
 800cdc6:	2b3b      	cmp	r3, #59	; 0x3b
 800cdc8:	f200 812d 	bhi.w	800d026 <dhcp_parse_reply+0x34e>
 800cdcc:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <dhcp_parse_reply+0xfc>)
 800cdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd2:	bf00      	nop
 800cdd4:	0800cec5 	.word	0x0800cec5
 800cdd8:	0800ced5 	.word	0x0800ced5
 800cddc:	0800d027 	.word	0x0800d027
 800cde0:	0800cef7 	.word	0x0800cef7
 800cde4:	0800d027 	.word	0x0800d027
 800cde8:	0800d027 	.word	0x0800d027
 800cdec:	0800d027 	.word	0x0800d027
 800cdf0:	0800d027 	.word	0x0800d027
 800cdf4:	0800d027 	.word	0x0800d027
 800cdf8:	0800d027 	.word	0x0800d027
 800cdfc:	0800d027 	.word	0x0800d027
 800ce00:	0800d027 	.word	0x0800d027
 800ce04:	0800d027 	.word	0x0800d027
 800ce08:	0800d027 	.word	0x0800d027
 800ce0c:	0800d027 	.word	0x0800d027
 800ce10:	0800d027 	.word	0x0800d027
 800ce14:	0800d027 	.word	0x0800d027
 800ce18:	0800d027 	.word	0x0800d027
 800ce1c:	0800d027 	.word	0x0800d027
 800ce20:	0800d027 	.word	0x0800d027
 800ce24:	0800d027 	.word	0x0800d027
 800ce28:	0800d027 	.word	0x0800d027
 800ce2c:	0800d027 	.word	0x0800d027
 800ce30:	0800d027 	.word	0x0800d027
 800ce34:	0800d027 	.word	0x0800d027
 800ce38:	0800d027 	.word	0x0800d027
 800ce3c:	0800d027 	.word	0x0800d027
 800ce40:	0800d027 	.word	0x0800d027
 800ce44:	0800d027 	.word	0x0800d027
 800ce48:	0800d027 	.word	0x0800d027
 800ce4c:	0800d027 	.word	0x0800d027
 800ce50:	0800d027 	.word	0x0800d027
 800ce54:	0800d027 	.word	0x0800d027
 800ce58:	0800d027 	.word	0x0800d027
 800ce5c:	0800d027 	.word	0x0800d027
 800ce60:	0800d027 	.word	0x0800d027
 800ce64:	0800d027 	.word	0x0800d027
 800ce68:	0800d027 	.word	0x0800d027
 800ce6c:	0800d027 	.word	0x0800d027
 800ce70:	0800d027 	.word	0x0800d027
 800ce74:	0800d027 	.word	0x0800d027
 800ce78:	0800d027 	.word	0x0800d027
 800ce7c:	0800d027 	.word	0x0800d027
 800ce80:	0800d027 	.word	0x0800d027
 800ce84:	0800d027 	.word	0x0800d027
 800ce88:	0800d027 	.word	0x0800d027
 800ce8c:	0800d027 	.word	0x0800d027
 800ce90:	0800d027 	.word	0x0800d027
 800ce94:	0800d027 	.word	0x0800d027
 800ce98:	0800d027 	.word	0x0800d027
 800ce9c:	0800d027 	.word	0x0800d027
 800cea0:	0800cf23 	.word	0x0800cf23
 800cea4:	0800cf45 	.word	0x0800cf45
 800cea8:	0800cf81 	.word	0x0800cf81
 800ceac:	0800cfa3 	.word	0x0800cfa3
 800ceb0:	0800d027 	.word	0x0800d027
 800ceb4:	0800d027 	.word	0x0800d027
 800ceb8:	0800d027 	.word	0x0800d027
 800cebc:	0800cfc5 	.word	0x0800cfc5
 800cec0:	0800d005 	.word	0x0800d005
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ceca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cece:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800ced2:	e0ac      	b.n	800d02e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ced4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ced8:	2b04      	cmp	r3, #4
 800ceda:	d009      	beq.n	800cef0 <dhcp_parse_reply+0x218>
 800cedc:	4b43      	ldr	r3, [pc, #268]	; (800cfec <dhcp_parse_reply+0x314>)
 800cede:	f240 622e 	movw	r2, #1582	; 0x62e
 800cee2:	4943      	ldr	r1, [pc, #268]	; (800cff0 <dhcp_parse_reply+0x318>)
 800cee4:	4843      	ldr	r0, [pc, #268]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cee6:	f002 feed 	bl	800fcc4 <iprintf>
 800ceea:	f06f 0305 	mvn.w	r3, #5
 800ceee:	e1b1      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800cef0:	2306      	movs	r3, #6
 800cef2:	623b      	str	r3, [r7, #32]
        break;
 800cef4:	e09b      	b.n	800d02e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800cef6:	2304      	movs	r3, #4
 800cef8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800cefc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cf00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d209      	bcs.n	800cf1c <dhcp_parse_reply+0x244>
 800cf08:	4b38      	ldr	r3, [pc, #224]	; (800cfec <dhcp_parse_reply+0x314>)
 800cf0a:	f240 6233 	movw	r2, #1587	; 0x633
 800cf0e:	493a      	ldr	r1, [pc, #232]	; (800cff8 <dhcp_parse_reply+0x320>)
 800cf10:	4838      	ldr	r0, [pc, #224]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cf12:	f002 fed7 	bl	800fcc4 <iprintf>
 800cf16:	f06f 0305 	mvn.w	r3, #5
 800cf1a:	e19b      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800cf1c:	2307      	movs	r3, #7
 800cf1e:	623b      	str	r3, [r7, #32]
        break;
 800cf20:	e085      	b.n	800d02e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cf22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	d009      	beq.n	800cf3e <dhcp_parse_reply+0x266>
 800cf2a:	4b30      	ldr	r3, [pc, #192]	; (800cfec <dhcp_parse_reply+0x314>)
 800cf2c:	f240 6241 	movw	r2, #1601	; 0x641
 800cf30:	492f      	ldr	r1, [pc, #188]	; (800cff0 <dhcp_parse_reply+0x318>)
 800cf32:	4830      	ldr	r0, [pc, #192]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cf34:	f002 fec6 	bl	800fcc4 <iprintf>
 800cf38:	f06f 0305 	mvn.w	r3, #5
 800cf3c:	e18a      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	623b      	str	r3, [r7, #32]
        break;
 800cf42:	e074      	b.n	800d02e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800cf44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d009      	beq.n	800cf60 <dhcp_parse_reply+0x288>
 800cf4c:	4b27      	ldr	r3, [pc, #156]	; (800cfec <dhcp_parse_reply+0x314>)
 800cf4e:	f240 624f 	movw	r2, #1615	; 0x64f
 800cf52:	492a      	ldr	r1, [pc, #168]	; (800cffc <dhcp_parse_reply+0x324>)
 800cf54:	4827      	ldr	r0, [pc, #156]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cf56:	f002 feb5 	bl	800fcc4 <iprintf>
 800cf5a:	f06f 0305 	mvn.w	r3, #5
 800cf5e:	e179      	b.n	800d254 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800cf60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf62:	2bf0      	cmp	r3, #240	; 0xf0
 800cf64:	d009      	beq.n	800cf7a <dhcp_parse_reply+0x2a2>
 800cf66:	4b21      	ldr	r3, [pc, #132]	; (800cfec <dhcp_parse_reply+0x314>)
 800cf68:	f240 6251 	movw	r2, #1617	; 0x651
 800cf6c:	4924      	ldr	r1, [pc, #144]	; (800d000 <dhcp_parse_reply+0x328>)
 800cf6e:	4821      	ldr	r0, [pc, #132]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cf70:	f002 fea8 	bl	800fcc4 <iprintf>
 800cf74:	f06f 0305 	mvn.w	r3, #5
 800cf78:	e16c      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	623b      	str	r3, [r7, #32]
        break;
 800cf7e:	e056      	b.n	800d02e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800cf80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d009      	beq.n	800cf9c <dhcp_parse_reply+0x2c4>
 800cf88:	4b18      	ldr	r3, [pc, #96]	; (800cfec <dhcp_parse_reply+0x314>)
 800cf8a:	f240 6255 	movw	r2, #1621	; 0x655
 800cf8e:	491b      	ldr	r1, [pc, #108]	; (800cffc <dhcp_parse_reply+0x324>)
 800cf90:	4818      	ldr	r0, [pc, #96]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cf92:	f002 fe97 	bl	800fcc4 <iprintf>
 800cf96:	f06f 0305 	mvn.w	r3, #5
 800cf9a:	e15b      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	623b      	str	r3, [r7, #32]
        break;
 800cfa0:	e045      	b.n	800d02e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cfa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfa6:	2b04      	cmp	r3, #4
 800cfa8:	d009      	beq.n	800cfbe <dhcp_parse_reply+0x2e6>
 800cfaa:	4b10      	ldr	r3, [pc, #64]	; (800cfec <dhcp_parse_reply+0x314>)
 800cfac:	f240 6259 	movw	r2, #1625	; 0x659
 800cfb0:	490f      	ldr	r1, [pc, #60]	; (800cff0 <dhcp_parse_reply+0x318>)
 800cfb2:	4810      	ldr	r0, [pc, #64]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cfb4:	f002 fe86 	bl	800fcc4 <iprintf>
 800cfb8:	f06f 0305 	mvn.w	r3, #5
 800cfbc:	e14a      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	623b      	str	r3, [r7, #32]
        break;
 800cfc2:	e034      	b.n	800d02e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cfc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc8:	2b04      	cmp	r3, #4
 800cfca:	d009      	beq.n	800cfe0 <dhcp_parse_reply+0x308>
 800cfcc:	4b07      	ldr	r3, [pc, #28]	; (800cfec <dhcp_parse_reply+0x314>)
 800cfce:	f240 625d 	movw	r2, #1629	; 0x65d
 800cfd2:	4907      	ldr	r1, [pc, #28]	; (800cff0 <dhcp_parse_reply+0x318>)
 800cfd4:	4807      	ldr	r0, [pc, #28]	; (800cff4 <dhcp_parse_reply+0x31c>)
 800cfd6:	f002 fe75 	bl	800fcc4 <iprintf>
 800cfda:	f06f 0305 	mvn.w	r3, #5
 800cfde:	e139      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800cfe0:	2304      	movs	r3, #4
 800cfe2:	623b      	str	r3, [r7, #32]
        break;
 800cfe4:	e023      	b.n	800d02e <dhcp_parse_reply+0x356>
 800cfe6:	bf00      	nop
 800cfe8:	20006968 	.word	0x20006968
 800cfec:	0801302c 	.word	0x0801302c
 800cff0:	080132b4 	.word	0x080132b4
 800cff4:	0801308c 	.word	0x0801308c
 800cff8:	080132c0 	.word	0x080132c0
 800cffc:	080132d4 	.word	0x080132d4
 800d000:	080132e0 	.word	0x080132e0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800d004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d008:	2b04      	cmp	r3, #4
 800d00a:	d009      	beq.n	800d020 <dhcp_parse_reply+0x348>
 800d00c:	4b93      	ldr	r3, [pc, #588]	; (800d25c <dhcp_parse_reply+0x584>)
 800d00e:	f240 6261 	movw	r2, #1633	; 0x661
 800d012:	4993      	ldr	r1, [pc, #588]	; (800d260 <dhcp_parse_reply+0x588>)
 800d014:	4893      	ldr	r0, [pc, #588]	; (800d264 <dhcp_parse_reply+0x58c>)
 800d016:	f002 fe55 	bl	800fcc4 <iprintf>
 800d01a:	f06f 0305 	mvn.w	r3, #5
 800d01e:	e119      	b.n	800d254 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800d020:	2305      	movs	r3, #5
 800d022:	623b      	str	r3, [r7, #32]
        break;
 800d024:	e003      	b.n	800d02e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800d026:	2300      	movs	r3, #0
 800d028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800d02c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800d02e:	7dfb      	ldrb	r3, [r7, #23]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d103      	bne.n	800d03c <dhcp_parse_reply+0x364>
      offset++;
 800d034:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d036:	3301      	adds	r3, #1
 800d038:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d03a:	e0a1      	b.n	800d180 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800d03c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d03e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d042:	4413      	add	r3, r2
 800d044:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800d048:	4293      	cmp	r3, r2
 800d04a:	dd02      	ble.n	800d052 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800d04c:	f06f 0301 	mvn.w	r3, #1
 800d050:	e100      	b.n	800d254 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800d052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d056:	b29a      	uxth	r2, r3
 800d058:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d05a:	4413      	add	r3, r2
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	3302      	adds	r3, #2
 800d060:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800d062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d066:	2b00      	cmp	r3, #0
 800d068:	f000 808a 	beq.w	800d180 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	2b00      	cmp	r3, #0
 800d074:	db02      	blt.n	800d07c <dhcp_parse_reply+0x3a4>
 800d076:	6a3b      	ldr	r3, [r7, #32]
 800d078:	2b07      	cmp	r3, #7
 800d07a:	dd06      	ble.n	800d08a <dhcp_parse_reply+0x3b2>
 800d07c:	4b77      	ldr	r3, [pc, #476]	; (800d25c <dhcp_parse_reply+0x584>)
 800d07e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800d082:	4979      	ldr	r1, [pc, #484]	; (800d268 <dhcp_parse_reply+0x590>)
 800d084:	4877      	ldr	r0, [pc, #476]	; (800d264 <dhcp_parse_reply+0x58c>)
 800d086:	f002 fe1d 	bl	800fcc4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800d08a:	4a78      	ldr	r2, [pc, #480]	; (800d26c <dhcp_parse_reply+0x594>)
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	4413      	add	r3, r2
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d174      	bne.n	800d180 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800d096:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d09a:	2b04      	cmp	r3, #4
 800d09c:	bf28      	it	cs
 800d09e:	2304      	movcs	r3, #4
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800d0a4:	8bfb      	ldrh	r3, [r7, #30]
 800d0a6:	8aba      	ldrh	r2, [r7, #20]
 800d0a8:	f107 0108 	add.w	r1, r7, #8
 800d0ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0ae:	f7f8 fc4b 	bl	8005948 <pbuf_copy_partial>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	8abb      	ldrh	r3, [r7, #20]
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d002      	beq.n	800d0c2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800d0bc:	f06f 0301 	mvn.w	r3, #1
 800d0c0:	e0c8      	b.n	800d254 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800d0c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0c6:	2b04      	cmp	r3, #4
 800d0c8:	d933      	bls.n	800d132 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800d0ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0ce:	f003 0303 	and.w	r3, r3, #3
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d009      	beq.n	800d0ec <dhcp_parse_reply+0x414>
 800d0d8:	4b60      	ldr	r3, [pc, #384]	; (800d25c <dhcp_parse_reply+0x584>)
 800d0da:	f240 6281 	movw	r2, #1665	; 0x681
 800d0de:	4964      	ldr	r1, [pc, #400]	; (800d270 <dhcp_parse_reply+0x598>)
 800d0e0:	4860      	ldr	r0, [pc, #384]	; (800d264 <dhcp_parse_reply+0x58c>)
 800d0e2:	f002 fdef 	bl	800fcc4 <iprintf>
 800d0e6:	f06f 0305 	mvn.w	r3, #5
 800d0ea:	e0b3      	b.n	800d254 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800d0ec:	4a5f      	ldr	r2, [pc, #380]	; (800d26c <dhcp_parse_reply+0x594>)
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f6 ff1c 	bl	8003f36 <lwip_htonl>
 800d0fe:	4602      	mov	r2, r0
 800d100:	495c      	ldr	r1, [pc, #368]	; (800d274 <dhcp_parse_reply+0x59c>)
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800d108:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d10c:	3b04      	subs	r3, #4
 800d10e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800d112:	8bfb      	ldrh	r3, [r7, #30]
 800d114:	3304      	adds	r3, #4
 800d116:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800d118:	8a7a      	ldrh	r2, [r7, #18]
 800d11a:	8bfb      	ldrh	r3, [r7, #30]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d202      	bcs.n	800d126 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800d120:	f06f 0301 	mvn.w	r3, #1
 800d124:	e096      	b.n	800d254 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800d126:	8a7b      	ldrh	r3, [r7, #18]
 800d128:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	3301      	adds	r3, #1
 800d12e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800d130:	e79e      	b.n	800d070 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800d132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d136:	2b04      	cmp	r3, #4
 800d138:	d106      	bne.n	800d148 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f6 fefa 	bl	8003f36 <lwip_htonl>
 800d142:	4603      	mov	r3, r0
 800d144:	60bb      	str	r3, [r7, #8]
 800d146:	e011      	b.n	800d16c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800d148:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d009      	beq.n	800d164 <dhcp_parse_reply+0x48c>
 800d150:	4b42      	ldr	r3, [pc, #264]	; (800d25c <dhcp_parse_reply+0x584>)
 800d152:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800d156:	4948      	ldr	r1, [pc, #288]	; (800d278 <dhcp_parse_reply+0x5a0>)
 800d158:	4842      	ldr	r0, [pc, #264]	; (800d264 <dhcp_parse_reply+0x58c>)
 800d15a:	f002 fdb3 	bl	800fcc4 <iprintf>
 800d15e:	f06f 0305 	mvn.w	r3, #5
 800d162:	e077      	b.n	800d254 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800d164:	f107 0308 	add.w	r3, r7, #8
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800d16c:	4a3f      	ldr	r2, [pc, #252]	; (800d26c <dhcp_parse_reply+0x594>)
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	4413      	add	r3, r2
 800d172:	2201      	movs	r2, #1
 800d174:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800d176:	68ba      	ldr	r2, [r7, #8]
 800d178:	493e      	ldr	r1, [pc, #248]	; (800d274 <dhcp_parse_reply+0x59c>)
 800d17a:	6a3b      	ldr	r3, [r7, #32]
 800d17c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800d180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d182:	895b      	ldrh	r3, [r3, #10]
 800d184:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d186:	429a      	cmp	r2, r3
 800d188:	d324      	bcc.n	800d1d4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	895b      	ldrh	r3, [r3, #10]
 800d18e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800d194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d196:	895b      	ldrh	r3, [r3, #10]
 800d198:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800d19e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d1a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d213      	bcs.n	800d1ce <dhcp_parse_reply+0x4f6>
        q = q->next;
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800d1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d109      	bne.n	800d1c6 <dhcp_parse_reply+0x4ee>
 800d1b2:	4b2a      	ldr	r3, [pc, #168]	; (800d25c <dhcp_parse_reply+0x584>)
 800d1b4:	f240 629d 	movw	r2, #1693	; 0x69d
 800d1b8:	4930      	ldr	r1, [pc, #192]	; (800d27c <dhcp_parse_reply+0x5a4>)
 800d1ba:	482a      	ldr	r0, [pc, #168]	; (800d264 <dhcp_parse_reply+0x58c>)
 800d1bc:	f002 fd82 	bl	800fcc4 <iprintf>
 800d1c0:	f06f 0305 	mvn.w	r3, #5
 800d1c4:	e046      	b.n	800d254 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800d1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1cc:	e002      	b.n	800d1d4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800d1ce:	f06f 0301 	mvn.w	r3, #1
 800d1d2:	e03f      	b.n	800d254 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00a      	beq.n	800d1f0 <dhcp_parse_reply+0x518>
 800d1da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d1dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d206      	bcs.n	800d1f0 <dhcp_parse_reply+0x518>
 800d1e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d1e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1e6:	4413      	add	r3, r2
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	2bff      	cmp	r3, #255	; 0xff
 800d1ec:	f47f adb7 	bne.w	800cd5e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800d1f0:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <dhcp_parse_reply+0x594>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d018      	beq.n	800d22a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d1f8:	4b1e      	ldr	r3, [pc, #120]	; (800d274 <dhcp_parse_reply+0x59c>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d1fe:	4b1b      	ldr	r3, [pc, #108]	; (800d26c <dhcp_parse_reply+0x594>)
 800d200:	2200      	movs	r2, #0
 800d202:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b01      	cmp	r3, #1
 800d208:	d102      	bne.n	800d210 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800d20a:	2301      	movs	r3, #1
 800d20c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d20e:	e00c      	b.n	800d22a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	2b02      	cmp	r3, #2
 800d214:	d102      	bne.n	800d21c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800d216:	2301      	movs	r3, #1
 800d218:	62bb      	str	r3, [r7, #40]	; 0x28
 800d21a:	e006      	b.n	800d22a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d103      	bne.n	800d22a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800d222:	2301      	movs	r3, #1
 800d224:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800d226:	2301      	movs	r3, #1
 800d228:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800d22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d006      	beq.n	800d23e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800d230:	2300      	movs	r3, #0
 800d232:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800d234:	236c      	movs	r3, #108	; 0x6c
 800d236:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800d238:	23ec      	movs	r3, #236	; 0xec
 800d23a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800d23c:	e569      	b.n	800cd12 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	2b00      	cmp	r3, #0
 800d242:	d006      	beq.n	800d252 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800d248:	232c      	movs	r3, #44	; 0x2c
 800d24a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800d24c:	236c      	movs	r3, #108	; 0x6c
 800d24e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800d250:	e55f      	b.n	800cd12 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3740      	adds	r7, #64	; 0x40
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	0801302c 	.word	0x0801302c
 800d260:	080132b4 	.word	0x080132b4
 800d264:	0801308c 	.word	0x0801308c
 800d268:	080132f8 	.word	0x080132f8
 800d26c:	20006968 	.word	0x20006968
 800d270:	0801330c 	.word	0x0801330c
 800d274:	20006970 	.word	0x20006970
 800d278:	08013324 	.word	0x08013324
 800d27c:	08013338 	.word	0x08013338

0800d280 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08a      	sub	sp, #40	; 0x28
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800d28e:	4b60      	ldr	r3, [pc, #384]	; (800d410 <dhcp_recv+0x190>)
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d298:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f000 809d 	beq.w	800d3e2 <dhcp_recv+0x162>
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	791b      	ldrb	r3, [r3, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f000 8098 	beq.w	800d3e2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	895b      	ldrh	r3, [r3, #10]
 800d2b6:	2b2b      	cmp	r3, #43	; 0x2b
 800d2b8:	f240 8095 	bls.w	800d3e6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	f040 8092 	bne.w	800d3ea <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2cc:	e012      	b.n	800d2f4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800d2ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2d2:	6a3a      	ldr	r2, [r7, #32]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d2da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2de:	69b9      	ldr	r1, [r7, #24]
 800d2e0:	440b      	add	r3, r1
 800d2e2:	7f1b      	ldrb	r3, [r3, #28]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	f040 8082 	bne.w	800d3ee <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d203      	bcs.n	800d30a <dhcp_recv+0x8a>
 800d302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d306:	2b05      	cmp	r3, #5
 800d308:	d9e1      	bls.n	800d2ce <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7f6 fe11 	bl	8003f36 <lwip_htonl>
 800d314:	4602      	mov	r2, r0
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d169      	bne.n	800d3f2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800d31e:	69f9      	ldr	r1, [r7, #28]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff fcd9 	bl	800ccd8 <dhcp_parse_reply>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d164      	bne.n	800d3f6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800d32c:	4b39      	ldr	r3, [pc, #228]	; (800d414 <dhcp_recv+0x194>)
 800d32e:	785b      	ldrb	r3, [r3, #1]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d062      	beq.n	800d3fa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800d33a:	4b37      	ldr	r3, [pc, #220]	; (800d418 <dhcp_recv+0x198>)
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800d340:	7cfb      	ldrb	r3, [r7, #19]
 800d342:	2b05      	cmp	r3, #5
 800d344:	d12a      	bne.n	800d39c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	795b      	ldrb	r3, [r3, #5]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d112      	bne.n	800d374 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800d34e:	6979      	ldr	r1, [r7, #20]
 800d350:	6a38      	ldr	r0, [r7, #32]
 800d352:	f7fe fe17 	bl	800bf84 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800d356:	6a3b      	ldr	r3, [r7, #32]
 800d358:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d35c:	f003 0308 	and.w	r3, r3, #8
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800d364:	6a38      	ldr	r0, [r7, #32]
 800d366:	f7fe fb87 	bl	800ba78 <dhcp_check>
 800d36a:	e049      	b.n	800d400 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800d36c:	6a38      	ldr	r0, [r7, #32]
 800d36e:	f7ff f867 	bl	800c440 <dhcp_bind>
 800d372:	e045      	b.n	800d400 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	795b      	ldrb	r3, [r3, #5]
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d007      	beq.n	800d38c <dhcp_recv+0x10c>
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	795b      	ldrb	r3, [r3, #5]
 800d380:	2b04      	cmp	r3, #4
 800d382:	d003      	beq.n	800d38c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d388:	2b05      	cmp	r3, #5
 800d38a:	d139      	bne.n	800d400 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800d38c:	6979      	ldr	r1, [r7, #20]
 800d38e:	6a38      	ldr	r0, [r7, #32]
 800d390:	f7fe fdf8 	bl	800bf84 <dhcp_handle_ack>
      dhcp_bind(netif);
 800d394:	6a38      	ldr	r0, [r7, #32]
 800d396:	f7ff f853 	bl	800c440 <dhcp_bind>
 800d39a:	e031      	b.n	800d400 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800d39c:	7cfb      	ldrb	r3, [r7, #19]
 800d39e:	2b06      	cmp	r3, #6
 800d3a0:	d113      	bne.n	800d3ca <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d00b      	beq.n	800d3c2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	795b      	ldrb	r3, [r3, #5]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d007      	beq.n	800d3c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d3b6:	2b04      	cmp	r3, #4
 800d3b8:	d003      	beq.n	800d3c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d3ba:	69fb      	ldr	r3, [r7, #28]
 800d3bc:	795b      	ldrb	r3, [r3, #5]
 800d3be:	2b05      	cmp	r3, #5
 800d3c0:	d103      	bne.n	800d3ca <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800d3c2:	6a38      	ldr	r0, [r7, #32]
 800d3c4:	f7fe fb3e 	bl	800ba44 <dhcp_handle_nak>
 800d3c8:	e01a      	b.n	800d400 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800d3ca:	7cfb      	ldrb	r3, [r7, #19]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d116      	bne.n	800d3fe <dhcp_recv+0x17e>
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	795b      	ldrb	r3, [r3, #5]
 800d3d4:	2b06      	cmp	r3, #6
 800d3d6:	d112      	bne.n	800d3fe <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800d3d8:	6979      	ldr	r1, [r7, #20]
 800d3da:	6a38      	ldr	r0, [r7, #32]
 800d3dc:	f7fe fb80 	bl	800bae0 <dhcp_handle_offer>
 800d3e0:	e00e      	b.n	800d400 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800d3e2:	bf00      	nop
 800d3e4:	e00c      	b.n	800d400 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800d3e6:	bf00      	nop
 800d3e8:	e00a      	b.n	800d400 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800d3ea:	bf00      	nop
 800d3ec:	e008      	b.n	800d400 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800d3ee:	bf00      	nop
 800d3f0:	e006      	b.n	800d400 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800d3f2:	bf00      	nop
 800d3f4:	e004      	b.n	800d400 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800d3f6:	bf00      	nop
 800d3f8:	e002      	b.n	800d400 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800d3fa:	bf00      	nop
 800d3fc:	e000      	b.n	800d400 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800d3fe:	bf00      	nop
  pbuf_free(p);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7f8 f8a7 	bl	8005554 <pbuf_free>
}
 800d406:	bf00      	nop
 800d408:	3728      	adds	r7, #40	; 0x28
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	200033e8 	.word	0x200033e8
 800d414:	20006968 	.word	0x20006968
 800d418:	20006970 	.word	0x20006970

0800d41c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b088      	sub	sp, #32
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	603b      	str	r3, [r7, #0]
 800d428:	4613      	mov	r3, r2
 800d42a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d108      	bne.n	800d444 <dhcp_create_msg+0x28>
 800d432:	4b5f      	ldr	r3, [pc, #380]	; (800d5b0 <dhcp_create_msg+0x194>)
 800d434:	f240 7269 	movw	r2, #1897	; 0x769
 800d438:	495e      	ldr	r1, [pc, #376]	; (800d5b4 <dhcp_create_msg+0x198>)
 800d43a:	485f      	ldr	r0, [pc, #380]	; (800d5b8 <dhcp_create_msg+0x19c>)
 800d43c:	f002 fc42 	bl	800fcc4 <iprintf>
 800d440:	2300      	movs	r3, #0
 800d442:	e0b1      	b.n	800d5a8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d108      	bne.n	800d45c <dhcp_create_msg+0x40>
 800d44a:	4b59      	ldr	r3, [pc, #356]	; (800d5b0 <dhcp_create_msg+0x194>)
 800d44c:	f240 726a 	movw	r2, #1898	; 0x76a
 800d450:	495a      	ldr	r1, [pc, #360]	; (800d5bc <dhcp_create_msg+0x1a0>)
 800d452:	4859      	ldr	r0, [pc, #356]	; (800d5b8 <dhcp_create_msg+0x19c>)
 800d454:	f002 fc36 	bl	800fcc4 <iprintf>
 800d458:	2300      	movs	r3, #0
 800d45a:	e0a5      	b.n	800d5a8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800d45c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d460:	f44f 719a 	mov.w	r1, #308	; 0x134
 800d464:	2036      	movs	r0, #54	; 0x36
 800d466:	f7f7 fd91 	bl	8004f8c <pbuf_alloc>
 800d46a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	e098      	b.n	800d5a8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	895b      	ldrh	r3, [r3, #10]
 800d47a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800d47e:	d206      	bcs.n	800d48e <dhcp_create_msg+0x72>
 800d480:	4b4b      	ldr	r3, [pc, #300]	; (800d5b0 <dhcp_create_msg+0x194>)
 800d482:	f240 7271 	movw	r2, #1905	; 0x771
 800d486:	494e      	ldr	r1, [pc, #312]	; (800d5c0 <dhcp_create_msg+0x1a4>)
 800d488:	484b      	ldr	r0, [pc, #300]	; (800d5b8 <dhcp_create_msg+0x19c>)
 800d48a:	f002 fc1b 	bl	800fcc4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d48e:	79fb      	ldrb	r3, [r7, #7]
 800d490:	2b03      	cmp	r3, #3
 800d492:	d103      	bne.n	800d49c <dhcp_create_msg+0x80>
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	795b      	ldrb	r3, [r3, #5]
 800d498:	2b03      	cmp	r3, #3
 800d49a:	d10d      	bne.n	800d4b8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	799b      	ldrb	r3, [r3, #6]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d105      	bne.n	800d4b0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800d4a4:	f002 fc26 	bl	800fcf4 <rand>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	4b45      	ldr	r3, [pc, #276]	; (800d5c4 <dhcp_create_msg+0x1a8>)
 800d4ae:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800d4b0:	4b44      	ldr	r3, [pc, #272]	; (800d5c4 <dhcp_create_msg+0x1a8>)
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800d4be:	f44f 729a 	mov.w	r2, #308	; 0x134
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	6978      	ldr	r0, [r7, #20]
 800d4c6:	f002 fbf5 	bl	800fcb4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7f6 fd26 	bl	8003f36 <lwip_htonl>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d4f0:	79fb      	ldrb	r3, [r7, #7]
 800d4f2:	2b08      	cmp	r3, #8
 800d4f4:	d010      	beq.n	800d518 <dhcp_create_msg+0xfc>
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	2b04      	cmp	r3, #4
 800d4fa:	d00d      	beq.n	800d518 <dhcp_create_msg+0xfc>
 800d4fc:	79fb      	ldrb	r3, [r7, #7]
 800d4fe:	2b07      	cmp	r3, #7
 800d500:	d00a      	beq.n	800d518 <dhcp_create_msg+0xfc>
 800d502:	79fb      	ldrb	r3, [r7, #7]
 800d504:	2b03      	cmp	r3, #3
 800d506:	d10c      	bne.n	800d522 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d50c:	2b05      	cmp	r3, #5
 800d50e:	d003      	beq.n	800d518 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	795b      	ldrb	r3, [r3, #5]
 800d514:	2b04      	cmp	r3, #4
 800d516:	d104      	bne.n	800d522 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	3304      	adds	r3, #4
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d522:	2300      	movs	r3, #0
 800d524:	83fb      	strh	r3, [r7, #30]
 800d526:	e00c      	b.n	800d542 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800d528:	8bfa      	ldrh	r2, [r7, #30]
 800d52a:	8bfb      	ldrh	r3, [r7, #30]
 800d52c:	68f9      	ldr	r1, [r7, #12]
 800d52e:	440a      	add	r2, r1
 800d530:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800d534:	697a      	ldr	r2, [r7, #20]
 800d536:	4413      	add	r3, r2
 800d538:	460a      	mov	r2, r1
 800d53a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d53c:	8bfb      	ldrh	r3, [r7, #30]
 800d53e:	3301      	adds	r3, #1
 800d540:	83fb      	strh	r3, [r7, #30]
 800d542:	8bfb      	ldrh	r3, [r7, #30]
 800d544:	2b05      	cmp	r3, #5
 800d546:	d9ef      	bls.n	800d528 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d550:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800d554:	2200      	movs	r2, #0
 800d556:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800d55a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800d55e:	2200      	movs	r2, #0
 800d560:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800d564:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800d568:	2200      	movs	r2, #0
 800d56a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d56e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d578:	2301      	movs	r3, #1
 800d57a:	2235      	movs	r2, #53	; 0x35
 800d57c:	2000      	movs	r0, #0
 800d57e:	f7ff fadb 	bl	800cb38 <dhcp_option>
 800d582:	4603      	mov	r3, r0
 800d584:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d58c:	79fa      	ldrb	r2, [r7, #7]
 800d58e:	8a7b      	ldrh	r3, [r7, #18]
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fb05 	bl	800cba0 <dhcp_option_byte>
 800d596:	4603      	mov	r3, r0
 800d598:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	8a7a      	ldrh	r2, [r7, #18]
 800d5a4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800d5a6:	69bb      	ldr	r3, [r7, #24]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3720      	adds	r7, #32
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	0801302c 	.word	0x0801302c
 800d5b4:	0801334c 	.word	0x0801334c
 800d5b8:	0801308c 	.word	0x0801308c
 800d5bc:	0801336c 	.word	0x0801336c
 800d5c0:	0801338c 	.word	0x0801338c
 800d5c4:	20000120 	.word	0x20000120

0800d5c8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
 800d5d4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800d5d6:	89fb      	ldrh	r3, [r7, #14]
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	81fa      	strh	r2, [r7, #14]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	4413      	add	r3, r2
 800d5e2:	22ff      	movs	r2, #255	; 0xff
 800d5e4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d5e6:	e007      	b.n	800d5f8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d5e8:	89fb      	ldrh	r3, [r7, #14]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	81fa      	strh	r2, [r7, #14]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d5f8:	89fb      	ldrh	r3, [r7, #14]
 800d5fa:	2b43      	cmp	r3, #67	; 0x43
 800d5fc:	d904      	bls.n	800d608 <dhcp_option_trailer+0x40>
 800d5fe:	89fb      	ldrh	r3, [r7, #14]
 800d600:	f003 0303 	and.w	r3, r3, #3
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <dhcp_option_trailer+0x46>
 800d608:	89fb      	ldrh	r3, [r7, #14]
 800d60a:	2b43      	cmp	r3, #67	; 0x43
 800d60c:	d9ec      	bls.n	800d5e8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d60e:	89fb      	ldrh	r3, [r7, #14]
 800d610:	33f0      	adds	r3, #240	; 0xf0
 800d612:	b29b      	uxth	r3, r3
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7f7 fe16 	bl	8005248 <pbuf_realloc>
}
 800d61c:	bf00      	nop
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d624:	b480      	push	{r7}
 800d626:	b085      	sub	sp, #20
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d017      	beq.n	800d662 <dhcp_supplied_address+0x3e>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d636:	2b00      	cmp	r3, #0
 800d638:	d013      	beq.n	800d662 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	795b      	ldrb	r3, [r3, #5]
 800d644:	2b0a      	cmp	r3, #10
 800d646:	d007      	beq.n	800d658 <dhcp_supplied_address+0x34>
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	795b      	ldrb	r3, [r3, #5]
 800d64c:	2b05      	cmp	r3, #5
 800d64e:	d003      	beq.n	800d658 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d654:	2b04      	cmp	r3, #4
 800d656:	d101      	bne.n	800d65c <dhcp_supplied_address+0x38>
 800d658:	2301      	movs	r3, #1
 800d65a:	e000      	b.n	800d65e <dhcp_supplied_address+0x3a>
 800d65c:	2300      	movs	r3, #0
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	e000      	b.n	800d664 <dhcp_supplied_address+0x40>
  }
  return 0;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d678:	4915      	ldr	r1, [pc, #84]	; (800d6d0 <etharp_free_entry+0x60>)
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	4613      	mov	r3, r2
 800d67e:	005b      	lsls	r3, r3, #1
 800d680:	4413      	add	r3, r2
 800d682:	00db      	lsls	r3, r3, #3
 800d684:	440b      	add	r3, r1
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d013      	beq.n	800d6b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d68c:	4910      	ldr	r1, [pc, #64]	; (800d6d0 <etharp_free_entry+0x60>)
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	4613      	mov	r3, r2
 800d692:	005b      	lsls	r3, r3, #1
 800d694:	4413      	add	r3, r2
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	440b      	add	r3, r1
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7f7 ff59 	bl	8005554 <pbuf_free>
    arp_table[i].q = NULL;
 800d6a2:	490b      	ldr	r1, [pc, #44]	; (800d6d0 <etharp_free_entry+0x60>)
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	4413      	add	r3, r2
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	440b      	add	r3, r1
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d6b4:	4906      	ldr	r1, [pc, #24]	; (800d6d0 <etharp_free_entry+0x60>)
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	440b      	add	r3, r1
 800d6c2:	3314      	adds	r3, #20
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	20000124 	.word	0x20000124

0800d6d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6da:	2300      	movs	r3, #0
 800d6dc:	607b      	str	r3, [r7, #4]
 800d6de:	e096      	b.n	800d80e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d6e0:	494f      	ldr	r1, [pc, #316]	; (800d820 <etharp_tmr+0x14c>)
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	005b      	lsls	r3, r3, #1
 800d6e8:	4413      	add	r3, r2
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	440b      	add	r3, r1
 800d6ee:	3314      	adds	r3, #20
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d6f4:	78fb      	ldrb	r3, [r7, #3]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 8086 	beq.w	800d808 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d6fc:	4948      	ldr	r1, [pc, #288]	; (800d820 <etharp_tmr+0x14c>)
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	4613      	mov	r3, r2
 800d702:	005b      	lsls	r3, r3, #1
 800d704:	4413      	add	r3, r2
 800d706:	00db      	lsls	r3, r3, #3
 800d708:	440b      	add	r3, r1
 800d70a:	3312      	adds	r3, #18
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	3301      	adds	r3, #1
 800d710:	b298      	uxth	r0, r3
 800d712:	4943      	ldr	r1, [pc, #268]	; (800d820 <etharp_tmr+0x14c>)
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	4613      	mov	r3, r2
 800d718:	005b      	lsls	r3, r3, #1
 800d71a:	4413      	add	r3, r2
 800d71c:	00db      	lsls	r3, r3, #3
 800d71e:	440b      	add	r3, r1
 800d720:	3312      	adds	r3, #18
 800d722:	4602      	mov	r2, r0
 800d724:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d726:	493e      	ldr	r1, [pc, #248]	; (800d820 <etharp_tmr+0x14c>)
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	4613      	mov	r3, r2
 800d72c:	005b      	lsls	r3, r3, #1
 800d72e:	4413      	add	r3, r2
 800d730:	00db      	lsls	r3, r3, #3
 800d732:	440b      	add	r3, r1
 800d734:	3312      	adds	r3, #18
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d73c:	d215      	bcs.n	800d76a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d73e:	4938      	ldr	r1, [pc, #224]	; (800d820 <etharp_tmr+0x14c>)
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	4613      	mov	r3, r2
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	4413      	add	r3, r2
 800d748:	00db      	lsls	r3, r3, #3
 800d74a:	440b      	add	r3, r1
 800d74c:	3314      	adds	r3, #20
 800d74e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d750:	2b01      	cmp	r3, #1
 800d752:	d10e      	bne.n	800d772 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d754:	4932      	ldr	r1, [pc, #200]	; (800d820 <etharp_tmr+0x14c>)
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	4613      	mov	r3, r2
 800d75a:	005b      	lsls	r3, r3, #1
 800d75c:	4413      	add	r3, r2
 800d75e:	00db      	lsls	r3, r3, #3
 800d760:	440b      	add	r3, r1
 800d762:	3312      	adds	r3, #18
 800d764:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d766:	2b04      	cmp	r3, #4
 800d768:	d903      	bls.n	800d772 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7ff ff80 	bl	800d670 <etharp_free_entry>
 800d770:	e04a      	b.n	800d808 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d772:	492b      	ldr	r1, [pc, #172]	; (800d820 <etharp_tmr+0x14c>)
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	4613      	mov	r3, r2
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	4413      	add	r3, r2
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	440b      	add	r3, r1
 800d780:	3314      	adds	r3, #20
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b03      	cmp	r3, #3
 800d786:	d10a      	bne.n	800d79e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d788:	4925      	ldr	r1, [pc, #148]	; (800d820 <etharp_tmr+0x14c>)
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	4613      	mov	r3, r2
 800d78e:	005b      	lsls	r3, r3, #1
 800d790:	4413      	add	r3, r2
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	440b      	add	r3, r1
 800d796:	3314      	adds	r3, #20
 800d798:	2204      	movs	r2, #4
 800d79a:	701a      	strb	r2, [r3, #0]
 800d79c:	e034      	b.n	800d808 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d79e:	4920      	ldr	r1, [pc, #128]	; (800d820 <etharp_tmr+0x14c>)
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	005b      	lsls	r3, r3, #1
 800d7a6:	4413      	add	r3, r2
 800d7a8:	00db      	lsls	r3, r3, #3
 800d7aa:	440b      	add	r3, r1
 800d7ac:	3314      	adds	r3, #20
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	2b04      	cmp	r3, #4
 800d7b2:	d10a      	bne.n	800d7ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d7b4:	491a      	ldr	r1, [pc, #104]	; (800d820 <etharp_tmr+0x14c>)
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	4613      	mov	r3, r2
 800d7ba:	005b      	lsls	r3, r3, #1
 800d7bc:	4413      	add	r3, r2
 800d7be:	00db      	lsls	r3, r3, #3
 800d7c0:	440b      	add	r3, r1
 800d7c2:	3314      	adds	r3, #20
 800d7c4:	2202      	movs	r2, #2
 800d7c6:	701a      	strb	r2, [r3, #0]
 800d7c8:	e01e      	b.n	800d808 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d7ca:	4915      	ldr	r1, [pc, #84]	; (800d820 <etharp_tmr+0x14c>)
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	4413      	add	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	440b      	add	r3, r1
 800d7d8:	3314      	adds	r3, #20
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d113      	bne.n	800d808 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d7e0:	490f      	ldr	r1, [pc, #60]	; (800d820 <etharp_tmr+0x14c>)
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	4413      	add	r3, r2
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	440b      	add	r3, r1
 800d7ee:	3308      	adds	r3, #8
 800d7f0:	6818      	ldr	r0, [r3, #0]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	4a08      	ldr	r2, [pc, #32]	; (800d820 <etharp_tmr+0x14c>)
 800d7fe:	4413      	add	r3, r2
 800d800:	3304      	adds	r3, #4
 800d802:	4619      	mov	r1, r3
 800d804:	f000 fe72 	bl	800e4ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	3301      	adds	r3, #1
 800d80c:	607b      	str	r3, [r7, #4]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b09      	cmp	r3, #9
 800d812:	f77f af65 	ble.w	800d6e0 <etharp_tmr+0xc>
      }
    }
  }
}
 800d816:	bf00      	nop
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20000124 	.word	0x20000124

0800d824 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b08a      	sub	sp, #40	; 0x28
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	460b      	mov	r3, r1
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d832:	230a      	movs	r3, #10
 800d834:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d836:	230a      	movs	r3, #10
 800d838:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d83a:	230a      	movs	r3, #10
 800d83c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d842:	230a      	movs	r3, #10
 800d844:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d846:	2300      	movs	r3, #0
 800d848:	83bb      	strh	r3, [r7, #28]
 800d84a:	2300      	movs	r3, #0
 800d84c:	837b      	strh	r3, [r7, #26]
 800d84e:	2300      	movs	r3, #0
 800d850:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d852:	2300      	movs	r3, #0
 800d854:	843b      	strh	r3, [r7, #32]
 800d856:	e0ae      	b.n	800d9b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d85c:	49a6      	ldr	r1, [pc, #664]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d85e:	4613      	mov	r3, r2
 800d860:	005b      	lsls	r3, r3, #1
 800d862:	4413      	add	r3, r2
 800d864:	00db      	lsls	r3, r3, #3
 800d866:	440b      	add	r3, r1
 800d868:	3314      	adds	r3, #20
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d86e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d872:	2b0a      	cmp	r3, #10
 800d874:	d105      	bne.n	800d882 <etharp_find_entry+0x5e>
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d102      	bne.n	800d882 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d87c:	8c3b      	ldrh	r3, [r7, #32]
 800d87e:	847b      	strh	r3, [r7, #34]	; 0x22
 800d880:	e095      	b.n	800d9ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d882:	7dfb      	ldrb	r3, [r7, #23]
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 8092 	beq.w	800d9ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d009      	beq.n	800d8a4 <etharp_find_entry+0x80>
 800d890:	7dfb      	ldrb	r3, [r7, #23]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d806      	bhi.n	800d8a4 <etharp_find_entry+0x80>
 800d896:	4b99      	ldr	r3, [pc, #612]	; (800dafc <etharp_find_entry+0x2d8>)
 800d898:	f240 1223 	movw	r2, #291	; 0x123
 800d89c:	4998      	ldr	r1, [pc, #608]	; (800db00 <etharp_find_entry+0x2dc>)
 800d89e:	4899      	ldr	r0, [pc, #612]	; (800db04 <etharp_find_entry+0x2e0>)
 800d8a0:	f002 fa10 	bl	800fcc4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d020      	beq.n	800d8ec <etharp_find_entry+0xc8>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6819      	ldr	r1, [r3, #0]
 800d8ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8b2:	4891      	ldr	r0, [pc, #580]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	4413      	add	r3, r2
 800d8ba:	00db      	lsls	r3, r3, #3
 800d8bc:	4403      	add	r3, r0
 800d8be:	3304      	adds	r3, #4
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4299      	cmp	r1, r3
 800d8c4:	d112      	bne.n	800d8ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00c      	beq.n	800d8e6 <etharp_find_entry+0xc2>
 800d8cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8d0:	4989      	ldr	r1, [pc, #548]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	4413      	add	r3, r2
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	440b      	add	r3, r1
 800d8dc:	3308      	adds	r3, #8
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d102      	bne.n	800d8ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d8e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d8ea:	e100      	b.n	800daee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d140      	bne.n	800d974 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d8f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8f6:	4980      	ldr	r1, [pc, #512]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	4413      	add	r3, r2
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	440b      	add	r3, r1
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d01a      	beq.n	800d93e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d908:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d90c:	497a      	ldr	r1, [pc, #488]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d90e:	4613      	mov	r3, r2
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	4413      	add	r3, r2
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	440b      	add	r3, r1
 800d918:	3312      	adds	r3, #18
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	8bba      	ldrh	r2, [r7, #28]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d845      	bhi.n	800d9ae <etharp_find_entry+0x18a>
            old_queue = i;
 800d922:	8c3b      	ldrh	r3, [r7, #32]
 800d924:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d926:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d92a:	4973      	ldr	r1, [pc, #460]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d92c:	4613      	mov	r3, r2
 800d92e:	005b      	lsls	r3, r3, #1
 800d930:	4413      	add	r3, r2
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	440b      	add	r3, r1
 800d936:	3312      	adds	r3, #18
 800d938:	881b      	ldrh	r3, [r3, #0]
 800d93a:	83bb      	strh	r3, [r7, #28]
 800d93c:	e037      	b.n	800d9ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d93e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d942:	496d      	ldr	r1, [pc, #436]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d944:	4613      	mov	r3, r2
 800d946:	005b      	lsls	r3, r3, #1
 800d948:	4413      	add	r3, r2
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	440b      	add	r3, r1
 800d94e:	3312      	adds	r3, #18
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	8b7a      	ldrh	r2, [r7, #26]
 800d954:	429a      	cmp	r2, r3
 800d956:	d82a      	bhi.n	800d9ae <etharp_find_entry+0x18a>
            old_pending = i;
 800d958:	8c3b      	ldrh	r3, [r7, #32]
 800d95a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d95c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d960:	4965      	ldr	r1, [pc, #404]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d962:	4613      	mov	r3, r2
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	4413      	add	r3, r2
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	440b      	add	r3, r1
 800d96c:	3312      	adds	r3, #18
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	837b      	strh	r3, [r7, #26]
 800d972:	e01c      	b.n	800d9ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d974:	7dfb      	ldrb	r3, [r7, #23]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d919      	bls.n	800d9ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d97a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d97e:	495e      	ldr	r1, [pc, #376]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d980:	4613      	mov	r3, r2
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	4413      	add	r3, r2
 800d986:	00db      	lsls	r3, r3, #3
 800d988:	440b      	add	r3, r1
 800d98a:	3312      	adds	r3, #18
 800d98c:	881b      	ldrh	r3, [r3, #0]
 800d98e:	8b3a      	ldrh	r2, [r7, #24]
 800d990:	429a      	cmp	r2, r3
 800d992:	d80c      	bhi.n	800d9ae <etharp_find_entry+0x18a>
            old_stable = i;
 800d994:	8c3b      	ldrh	r3, [r7, #32]
 800d996:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d99c:	4956      	ldr	r1, [pc, #344]	; (800daf8 <etharp_find_entry+0x2d4>)
 800d99e:	4613      	mov	r3, r2
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	4413      	add	r3, r2
 800d9a4:	00db      	lsls	r3, r3, #3
 800d9a6:	440b      	add	r3, r1
 800d9a8:	3312      	adds	r3, #18
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9ae:	8c3b      	ldrh	r3, [r7, #32]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	843b      	strh	r3, [r7, #32]
 800d9b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d9ba:	2b09      	cmp	r3, #9
 800d9bc:	f77f af4c 	ble.w	800d858 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d9c0:	7afb      	ldrb	r3, [r7, #11]
 800d9c2:	f003 0302 	and.w	r3, r3, #2
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d108      	bne.n	800d9dc <etharp_find_entry+0x1b8>
 800d9ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d9ce:	2b0a      	cmp	r3, #10
 800d9d0:	d107      	bne.n	800d9e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d9d2:	7afb      	ldrb	r3, [r7, #11]
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d102      	bne.n	800d9e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9e0:	e085      	b.n	800daee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d9e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d9e6:	2b09      	cmp	r3, #9
 800d9e8:	dc02      	bgt.n	800d9f0 <etharp_find_entry+0x1cc>
    i = empty;
 800d9ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9ec:	843b      	strh	r3, [r7, #32]
 800d9ee:	e039      	b.n	800da64 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d9f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d9f4:	2b09      	cmp	r3, #9
 800d9f6:	dc14      	bgt.n	800da22 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d9fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da00:	493d      	ldr	r1, [pc, #244]	; (800daf8 <etharp_find_entry+0x2d4>)
 800da02:	4613      	mov	r3, r2
 800da04:	005b      	lsls	r3, r3, #1
 800da06:	4413      	add	r3, r2
 800da08:	00db      	lsls	r3, r3, #3
 800da0a:	440b      	add	r3, r1
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d018      	beq.n	800da44 <etharp_find_entry+0x220>
 800da12:	4b3a      	ldr	r3, [pc, #232]	; (800dafc <etharp_find_entry+0x2d8>)
 800da14:	f240 126d 	movw	r2, #365	; 0x16d
 800da18:	493b      	ldr	r1, [pc, #236]	; (800db08 <etharp_find_entry+0x2e4>)
 800da1a:	483a      	ldr	r0, [pc, #232]	; (800db04 <etharp_find_entry+0x2e0>)
 800da1c:	f002 f952 	bl	800fcc4 <iprintf>
 800da20:	e010      	b.n	800da44 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800da22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800da26:	2b09      	cmp	r3, #9
 800da28:	dc02      	bgt.n	800da30 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800da2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800da2c:	843b      	strh	r3, [r7, #32]
 800da2e:	e009      	b.n	800da44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800da30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800da34:	2b09      	cmp	r3, #9
 800da36:	dc02      	bgt.n	800da3e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800da38:	8bfb      	ldrh	r3, [r7, #30]
 800da3a:	843b      	strh	r3, [r7, #32]
 800da3c:	e002      	b.n	800da44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800da3e:	f04f 33ff 	mov.w	r3, #4294967295
 800da42:	e054      	b.n	800daee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800da44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800da48:	2b09      	cmp	r3, #9
 800da4a:	dd06      	ble.n	800da5a <etharp_find_entry+0x236>
 800da4c:	4b2b      	ldr	r3, [pc, #172]	; (800dafc <etharp_find_entry+0x2d8>)
 800da4e:	f240 127f 	movw	r2, #383	; 0x17f
 800da52:	492e      	ldr	r1, [pc, #184]	; (800db0c <etharp_find_entry+0x2e8>)
 800da54:	482b      	ldr	r0, [pc, #172]	; (800db04 <etharp_find_entry+0x2e0>)
 800da56:	f002 f935 	bl	800fcc4 <iprintf>
    etharp_free_entry(i);
 800da5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7ff fe06 	bl	800d670 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800da64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800da68:	2b09      	cmp	r3, #9
 800da6a:	dd06      	ble.n	800da7a <etharp_find_entry+0x256>
 800da6c:	4b23      	ldr	r3, [pc, #140]	; (800dafc <etharp_find_entry+0x2d8>)
 800da6e:	f240 1283 	movw	r2, #387	; 0x183
 800da72:	4926      	ldr	r1, [pc, #152]	; (800db0c <etharp_find_entry+0x2e8>)
 800da74:	4823      	ldr	r0, [pc, #140]	; (800db04 <etharp_find_entry+0x2e0>)
 800da76:	f002 f925 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800da7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da7e:	491e      	ldr	r1, [pc, #120]	; (800daf8 <etharp_find_entry+0x2d4>)
 800da80:	4613      	mov	r3, r2
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	4413      	add	r3, r2
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	440b      	add	r3, r1
 800da8a:	3314      	adds	r3, #20
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d006      	beq.n	800daa0 <etharp_find_entry+0x27c>
 800da92:	4b1a      	ldr	r3, [pc, #104]	; (800dafc <etharp_find_entry+0x2d8>)
 800da94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800da98:	491d      	ldr	r1, [pc, #116]	; (800db10 <etharp_find_entry+0x2ec>)
 800da9a:	481a      	ldr	r0, [pc, #104]	; (800db04 <etharp_find_entry+0x2e0>)
 800da9c:	f002 f912 	bl	800fcc4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00b      	beq.n	800dabe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800daa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6819      	ldr	r1, [r3, #0]
 800daae:	4812      	ldr	r0, [pc, #72]	; (800daf8 <etharp_find_entry+0x2d4>)
 800dab0:	4613      	mov	r3, r2
 800dab2:	005b      	lsls	r3, r3, #1
 800dab4:	4413      	add	r3, r2
 800dab6:	00db      	lsls	r3, r3, #3
 800dab8:	4403      	add	r3, r0
 800daba:	3304      	adds	r3, #4
 800dabc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dabe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dac2:	490d      	ldr	r1, [pc, #52]	; (800daf8 <etharp_find_entry+0x2d4>)
 800dac4:	4613      	mov	r3, r2
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	4413      	add	r3, r2
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	3312      	adds	r3, #18
 800dad0:	2200      	movs	r2, #0
 800dad2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800dad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dad8:	4907      	ldr	r1, [pc, #28]	; (800daf8 <etharp_find_entry+0x2d4>)
 800dada:	4613      	mov	r3, r2
 800dadc:	005b      	lsls	r3, r3, #1
 800dade:	4413      	add	r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	440b      	add	r3, r1
 800dae4:	3308      	adds	r3, #8
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800daea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3728      	adds	r7, #40	; 0x28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20000124 	.word	0x20000124
 800dafc:	080133cc 	.word	0x080133cc
 800db00:	08013404 	.word	0x08013404
 800db04:	08013444 	.word	0x08013444
 800db08:	0801346c 	.word	0x0801346c
 800db0c:	08013484 	.word	0x08013484
 800db10:	08013498 	.word	0x08013498

0800db14 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b088      	sub	sp, #32
 800db18:	af02      	add	r7, sp, #8
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
 800db20:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db28:	2b06      	cmp	r3, #6
 800db2a:	d006      	beq.n	800db3a <etharp_update_arp_entry+0x26>
 800db2c:	4b48      	ldr	r3, [pc, #288]	; (800dc50 <etharp_update_arp_entry+0x13c>)
 800db2e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800db32:	4948      	ldr	r1, [pc, #288]	; (800dc54 <etharp_update_arp_entry+0x140>)
 800db34:	4848      	ldr	r0, [pc, #288]	; (800dc58 <etharp_update_arp_entry+0x144>)
 800db36:	f002 f8c5 	bl	800fcc4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d012      	beq.n	800db66 <etharp_update_arp_entry+0x52>
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00e      	beq.n	800db66 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68f9      	ldr	r1, [r7, #12]
 800db4e:	4618      	mov	r0, r3
 800db50:	f001 f920 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800db54:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800db56:	2b00      	cmp	r3, #0
 800db58:	d105      	bne.n	800db66 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800db62:	2be0      	cmp	r3, #224	; 0xe0
 800db64:	d102      	bne.n	800db6c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800db66:	f06f 030f 	mvn.w	r3, #15
 800db6a:	e06c      	b.n	800dc46 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800db6c:	78fb      	ldrb	r3, [r7, #3]
 800db6e:	68fa      	ldr	r2, [r7, #12]
 800db70:	4619      	mov	r1, r3
 800db72:	68b8      	ldr	r0, [r7, #8]
 800db74:	f7ff fe56 	bl	800d824 <etharp_find_entry>
 800db78:	4603      	mov	r3, r0
 800db7a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800db7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800db80:	2b00      	cmp	r3, #0
 800db82:	da02      	bge.n	800db8a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800db84:	8afb      	ldrh	r3, [r7, #22]
 800db86:	b25b      	sxtb	r3, r3
 800db88:	e05d      	b.n	800dc46 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800db8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db8e:	4933      	ldr	r1, [pc, #204]	; (800dc5c <etharp_update_arp_entry+0x148>)
 800db90:	4613      	mov	r3, r2
 800db92:	005b      	lsls	r3, r3, #1
 800db94:	4413      	add	r3, r2
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	440b      	add	r3, r1
 800db9a:	3314      	adds	r3, #20
 800db9c:	2202      	movs	r2, #2
 800db9e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dba0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dba4:	492d      	ldr	r1, [pc, #180]	; (800dc5c <etharp_update_arp_entry+0x148>)
 800dba6:	4613      	mov	r3, r2
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	4413      	add	r3, r2
 800dbac:	00db      	lsls	r3, r3, #3
 800dbae:	440b      	add	r3, r1
 800dbb0:	3308      	adds	r3, #8
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dbb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	005b      	lsls	r3, r3, #1
 800dbbe:	4413      	add	r3, r2
 800dbc0:	00db      	lsls	r3, r3, #3
 800dbc2:	3308      	adds	r3, #8
 800dbc4:	4a25      	ldr	r2, [pc, #148]	; (800dc5c <etharp_update_arp_entry+0x148>)
 800dbc6:	4413      	add	r3, r2
 800dbc8:	3304      	adds	r3, #4
 800dbca:	2206      	movs	r2, #6
 800dbcc:	6879      	ldr	r1, [r7, #4]
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f002 f862 	bl	800fc98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dbd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbd8:	4920      	ldr	r1, [pc, #128]	; (800dc5c <etharp_update_arp_entry+0x148>)
 800dbda:	4613      	mov	r3, r2
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	4413      	add	r3, r2
 800dbe0:	00db      	lsls	r3, r3, #3
 800dbe2:	440b      	add	r3, r1
 800dbe4:	3312      	adds	r3, #18
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dbea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dbee:	491b      	ldr	r1, [pc, #108]	; (800dc5c <etharp_update_arp_entry+0x148>)
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	4413      	add	r3, r2
 800dbf6:	00db      	lsls	r3, r3, #3
 800dbf8:	440b      	add	r3, r1
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d021      	beq.n	800dc44 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dc00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc04:	4915      	ldr	r1, [pc, #84]	; (800dc5c <etharp_update_arp_entry+0x148>)
 800dc06:	4613      	mov	r3, r2
 800dc08:	005b      	lsls	r3, r3, #1
 800dc0a:	4413      	add	r3, r2
 800dc0c:	00db      	lsls	r3, r3, #3
 800dc0e:	440b      	add	r3, r1
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800dc14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dc18:	4910      	ldr	r1, [pc, #64]	; (800dc5c <etharp_update_arp_entry+0x148>)
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	005b      	lsls	r3, r3, #1
 800dc1e:	4413      	add	r3, r2
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	440b      	add	r3, r1
 800dc24:	2200      	movs	r2, #0
 800dc26:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800dc2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6939      	ldr	r1, [r7, #16]
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f001 ffb3 	bl	800fba4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800dc3e:	6938      	ldr	r0, [r7, #16]
 800dc40:	f7f7 fc88 	bl	8005554 <pbuf_free>
  }
  return ERR_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3718      	adds	r7, #24
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	080133cc 	.word	0x080133cc
 800dc54:	080134c4 	.word	0x080134c4
 800dc58:	08013444 	.word	0x08013444
 800dc5c:	20000124 	.word	0x20000124

0800dc60 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc68:	2300      	movs	r3, #0
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	e01e      	b.n	800dcac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dc6e:	4913      	ldr	r1, [pc, #76]	; (800dcbc <etharp_cleanup_netif+0x5c>)
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	4613      	mov	r3, r2
 800dc74:	005b      	lsls	r3, r3, #1
 800dc76:	4413      	add	r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	440b      	add	r3, r1
 800dc7c:	3314      	adds	r3, #20
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dc82:	7afb      	ldrb	r3, [r7, #11]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00e      	beq.n	800dca6 <etharp_cleanup_netif+0x46>
 800dc88:	490c      	ldr	r1, [pc, #48]	; (800dcbc <etharp_cleanup_netif+0x5c>)
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	4613      	mov	r3, r2
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	4413      	add	r3, r2
 800dc92:	00db      	lsls	r3, r3, #3
 800dc94:	440b      	add	r3, r1
 800dc96:	3308      	adds	r3, #8
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d102      	bne.n	800dca6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f7ff fce5 	bl	800d670 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	60fb      	str	r3, [r7, #12]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2b09      	cmp	r3, #9
 800dcb0:	dddd      	ble.n	800dc6e <etharp_cleanup_netif+0xe>
    }
  }
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	3710      	adds	r7, #16
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	20000124 	.word	0x20000124

0800dcc0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dcc0:	b5b0      	push	{r4, r5, r7, lr}
 800dcc2:	b08a      	sub	sp, #40	; 0x28
 800dcc4:	af04      	add	r7, sp, #16
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d107      	bne.n	800dce0 <etharp_input+0x20>
 800dcd0:	4b3f      	ldr	r3, [pc, #252]	; (800ddd0 <etharp_input+0x110>)
 800dcd2:	f240 228a 	movw	r2, #650	; 0x28a
 800dcd6:	493f      	ldr	r1, [pc, #252]	; (800ddd4 <etharp_input+0x114>)
 800dcd8:	483f      	ldr	r0, [pc, #252]	; (800ddd8 <etharp_input+0x118>)
 800dcda:	f001 fff3 	bl	800fcc4 <iprintf>
 800dcde:	e074      	b.n	800ddca <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcf0:	d10c      	bne.n	800dd0c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dcf6:	2b06      	cmp	r3, #6
 800dcf8:	d108      	bne.n	800dd0c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dcfe:	2b04      	cmp	r3, #4
 800dd00:	d104      	bne.n	800dd0c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	885b      	ldrh	r3, [r3, #2]
 800dd06:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dd08:	2b08      	cmp	r3, #8
 800dd0a:	d003      	beq.n	800dd14 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7f7 fc21 	bl	8005554 <pbuf_free>
    return;
 800dd12:	e05a      	b.n	800ddca <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	330e      	adds	r3, #14
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	3318      	adds	r3, #24
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	3304      	adds	r3, #4
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d102      	bne.n	800dd34 <etharp_input+0x74>
    for_us = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	75fb      	strb	r3, [r7, #23]
 800dd32:	e009      	b.n	800dd48 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	bf0c      	ite	eq
 800dd40:	2301      	moveq	r3, #1
 800dd42:	2300      	movne	r3, #0
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	f103 0208 	add.w	r2, r3, #8
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <etharp_input+0x98>
 800dd54:	2301      	movs	r3, #1
 800dd56:	e000      	b.n	800dd5a <etharp_input+0x9a>
 800dd58:	2302      	movs	r3, #2
 800dd5a:	f107 010c 	add.w	r1, r7, #12
 800dd5e:	6838      	ldr	r0, [r7, #0]
 800dd60:	f7ff fed8 	bl	800db14 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	88db      	ldrh	r3, [r3, #6]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd6e:	d003      	beq.n	800dd78 <etharp_input+0xb8>
 800dd70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd74:	d01e      	beq.n	800ddb4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dd76:	e025      	b.n	800ddc4 <etharp_input+0x104>
      if (for_us) {
 800dd78:	7dfb      	ldrb	r3, [r7, #23]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d021      	beq.n	800ddc2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dd94:	693a      	ldr	r2, [r7, #16]
 800dd96:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dd98:	2102      	movs	r1, #2
 800dd9a:	9103      	str	r1, [sp, #12]
 800dd9c:	f107 010c 	add.w	r1, r7, #12
 800dda0:	9102      	str	r1, [sp, #8]
 800dda2:	9201      	str	r2, [sp, #4]
 800dda4:	9300      	str	r3, [sp, #0]
 800dda6:	462b      	mov	r3, r5
 800dda8:	4622      	mov	r2, r4
 800ddaa:	4601      	mov	r1, r0
 800ddac:	6838      	ldr	r0, [r7, #0]
 800ddae:	f000 faef 	bl	800e390 <etharp_raw>
      break;
 800ddb2:	e006      	b.n	800ddc2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800ddb4:	f107 030c 	add.w	r3, r7, #12
 800ddb8:	4619      	mov	r1, r3
 800ddba:	6838      	ldr	r0, [r7, #0]
 800ddbc:	f7fe f9fc 	bl	800c1b8 <dhcp_arp_reply>
      break;
 800ddc0:	e000      	b.n	800ddc4 <etharp_input+0x104>
      break;
 800ddc2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7f7 fbc5 	bl	8005554 <pbuf_free>
}
 800ddca:	3718      	adds	r7, #24
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bdb0      	pop	{r4, r5, r7, pc}
 800ddd0:	080133cc 	.word	0x080133cc
 800ddd4:	0801351c 	.word	0x0801351c
 800ddd8:	08013444 	.word	0x08013444

0800dddc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af02      	add	r7, sp, #8
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	4613      	mov	r3, r2
 800dde8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ddea:	79fa      	ldrb	r2, [r7, #7]
 800ddec:	4944      	ldr	r1, [pc, #272]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800ddee:	4613      	mov	r3, r2
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	4413      	add	r3, r2
 800ddf4:	00db      	lsls	r3, r3, #3
 800ddf6:	440b      	add	r3, r1
 800ddf8:	3314      	adds	r3, #20
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d806      	bhi.n	800de0e <etharp_output_to_arp_index+0x32>
 800de00:	4b40      	ldr	r3, [pc, #256]	; (800df04 <etharp_output_to_arp_index+0x128>)
 800de02:	f240 22ee 	movw	r2, #750	; 0x2ee
 800de06:	4940      	ldr	r1, [pc, #256]	; (800df08 <etharp_output_to_arp_index+0x12c>)
 800de08:	4840      	ldr	r0, [pc, #256]	; (800df0c <etharp_output_to_arp_index+0x130>)
 800de0a:	f001 ff5b 	bl	800fcc4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de0e:	79fa      	ldrb	r2, [r7, #7]
 800de10:	493b      	ldr	r1, [pc, #236]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800de12:	4613      	mov	r3, r2
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	4413      	add	r3, r2
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	440b      	add	r3, r1
 800de1c:	3314      	adds	r3, #20
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b02      	cmp	r3, #2
 800de22:	d153      	bne.n	800decc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800de24:	79fa      	ldrb	r2, [r7, #7]
 800de26:	4936      	ldr	r1, [pc, #216]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800de28:	4613      	mov	r3, r2
 800de2a:	005b      	lsls	r3, r3, #1
 800de2c:	4413      	add	r3, r2
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	440b      	add	r3, r1
 800de32:	3312      	adds	r3, #18
 800de34:	881b      	ldrh	r3, [r3, #0]
 800de36:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800de3a:	d919      	bls.n	800de70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800de3c:	79fa      	ldrb	r2, [r7, #7]
 800de3e:	4613      	mov	r3, r2
 800de40:	005b      	lsls	r3, r3, #1
 800de42:	4413      	add	r3, r2
 800de44:	00db      	lsls	r3, r3, #3
 800de46:	4a2e      	ldr	r2, [pc, #184]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800de48:	4413      	add	r3, r2
 800de4a:	3304      	adds	r3, #4
 800de4c:	4619      	mov	r1, r3
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f000 fb4c 	bl	800e4ec <etharp_request>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d138      	bne.n	800decc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de5a:	79fa      	ldrb	r2, [r7, #7]
 800de5c:	4928      	ldr	r1, [pc, #160]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800de5e:	4613      	mov	r3, r2
 800de60:	005b      	lsls	r3, r3, #1
 800de62:	4413      	add	r3, r2
 800de64:	00db      	lsls	r3, r3, #3
 800de66:	440b      	add	r3, r1
 800de68:	3314      	adds	r3, #20
 800de6a:	2203      	movs	r2, #3
 800de6c:	701a      	strb	r2, [r3, #0]
 800de6e:	e02d      	b.n	800decc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800de70:	79fa      	ldrb	r2, [r7, #7]
 800de72:	4923      	ldr	r1, [pc, #140]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800de74:	4613      	mov	r3, r2
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	4413      	add	r3, r2
 800de7a:	00db      	lsls	r3, r3, #3
 800de7c:	440b      	add	r3, r1
 800de7e:	3312      	adds	r3, #18
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800de86:	d321      	bcc.n	800decc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800de88:	79fa      	ldrb	r2, [r7, #7]
 800de8a:	4613      	mov	r3, r2
 800de8c:	005b      	lsls	r3, r3, #1
 800de8e:	4413      	add	r3, r2
 800de90:	00db      	lsls	r3, r3, #3
 800de92:	4a1b      	ldr	r2, [pc, #108]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800de94:	4413      	add	r3, r2
 800de96:	1d19      	adds	r1, r3, #4
 800de98:	79fa      	ldrb	r2, [r7, #7]
 800de9a:	4613      	mov	r3, r2
 800de9c:	005b      	lsls	r3, r3, #1
 800de9e:	4413      	add	r3, r2
 800dea0:	00db      	lsls	r3, r3, #3
 800dea2:	3308      	adds	r3, #8
 800dea4:	4a16      	ldr	r2, [pc, #88]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800dea6:	4413      	add	r3, r2
 800dea8:	3304      	adds	r3, #4
 800deaa:	461a      	mov	r2, r3
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 fafb 	bl	800e4a8 <etharp_request_dst>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d109      	bne.n	800decc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800deb8:	79fa      	ldrb	r2, [r7, #7]
 800deba:	4911      	ldr	r1, [pc, #68]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800debc:	4613      	mov	r3, r2
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	4413      	add	r3, r2
 800dec2:	00db      	lsls	r3, r3, #3
 800dec4:	440b      	add	r3, r1
 800dec6:	3314      	adds	r3, #20
 800dec8:	2203      	movs	r2, #3
 800deca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800ded2:	79fa      	ldrb	r2, [r7, #7]
 800ded4:	4613      	mov	r3, r2
 800ded6:	005b      	lsls	r3, r3, #1
 800ded8:	4413      	add	r3, r2
 800deda:	00db      	lsls	r3, r3, #3
 800dedc:	3308      	adds	r3, #8
 800dede:	4a08      	ldr	r2, [pc, #32]	; (800df00 <etharp_output_to_arp_index+0x124>)
 800dee0:	4413      	add	r3, r2
 800dee2:	3304      	adds	r3, #4
 800dee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dee8:	9200      	str	r2, [sp, #0]
 800deea:	460a      	mov	r2, r1
 800deec:	68b9      	ldr	r1, [r7, #8]
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f001 fe58 	bl	800fba4 <ethernet_output>
 800def4:	4603      	mov	r3, r0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	20000124 	.word	0x20000124
 800df04:	080133cc 	.word	0x080133cc
 800df08:	0801353c 	.word	0x0801353c
 800df0c:	08013444 	.word	0x08013444

0800df10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b08a      	sub	sp, #40	; 0x28
 800df14:	af02      	add	r7, sp, #8
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d106      	bne.n	800df34 <etharp_output+0x24>
 800df26:	4b73      	ldr	r3, [pc, #460]	; (800e0f4 <etharp_output+0x1e4>)
 800df28:	f240 321e 	movw	r2, #798	; 0x31e
 800df2c:	4972      	ldr	r1, [pc, #456]	; (800e0f8 <etharp_output+0x1e8>)
 800df2e:	4873      	ldr	r0, [pc, #460]	; (800e0fc <etharp_output+0x1ec>)
 800df30:	f001 fec8 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <etharp_output+0x38>
 800df3a:	4b6e      	ldr	r3, [pc, #440]	; (800e0f4 <etharp_output+0x1e4>)
 800df3c:	f240 321f 	movw	r2, #799	; 0x31f
 800df40:	496f      	ldr	r1, [pc, #444]	; (800e100 <etharp_output+0x1f0>)
 800df42:	486e      	ldr	r0, [pc, #440]	; (800e0fc <etharp_output+0x1ec>)
 800df44:	f001 febe 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <etharp_output+0x4c>
 800df4e:	4b69      	ldr	r3, [pc, #420]	; (800e0f4 <etharp_output+0x1e4>)
 800df50:	f44f 7248 	mov.w	r2, #800	; 0x320
 800df54:	496b      	ldr	r1, [pc, #428]	; (800e104 <etharp_output+0x1f4>)
 800df56:	4869      	ldr	r0, [pc, #420]	; (800e0fc <etharp_output+0x1ec>)
 800df58:	f001 feb4 	bl	800fcc4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68f9      	ldr	r1, [r7, #12]
 800df62:	4618      	mov	r0, r3
 800df64:	f000 ff16 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800df68:	4603      	mov	r3, r0
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d002      	beq.n	800df74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800df6e:	4b66      	ldr	r3, [pc, #408]	; (800e108 <etharp_output+0x1f8>)
 800df70:	61fb      	str	r3, [r7, #28]
 800df72:	e0af      	b.n	800e0d4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df7c:	2be0      	cmp	r3, #224	; 0xe0
 800df7e:	d118      	bne.n	800dfb2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800df80:	2301      	movs	r3, #1
 800df82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800df84:	2300      	movs	r3, #0
 800df86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800df88:	235e      	movs	r3, #94	; 0x5e
 800df8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3301      	adds	r3, #1
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df96:	b2db      	uxtb	r3, r3
 800df98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	3302      	adds	r3, #2
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3303      	adds	r3, #3
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dfaa:	f107 0310 	add.w	r3, r7, #16
 800dfae:	61fb      	str	r3, [r7, #28]
 800dfb0:	e090      	b.n	800e0d4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681a      	ldr	r2, [r3, #0]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	405a      	eors	r2, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3308      	adds	r3, #8
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d012      	beq.n	800dff0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dfd0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d00b      	beq.n	800dff0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	330c      	adds	r3, #12
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d003      	beq.n	800dfea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	330c      	adds	r3, #12
 800dfe6:	61bb      	str	r3, [r7, #24]
 800dfe8:	e002      	b.n	800dff0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dfea:	f06f 0303 	mvn.w	r3, #3
 800dfee:	e07d      	b.n	800e0ec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dff0:	4b46      	ldr	r3, [pc, #280]	; (800e10c <etharp_output+0x1fc>)
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	4619      	mov	r1, r3
 800dff6:	4a46      	ldr	r2, [pc, #280]	; (800e110 <etharp_output+0x200>)
 800dff8:	460b      	mov	r3, r1
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	440b      	add	r3, r1
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	4413      	add	r3, r2
 800e002:	3314      	adds	r3, #20
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d925      	bls.n	800e056 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e00a:	4b40      	ldr	r3, [pc, #256]	; (800e10c <etharp_output+0x1fc>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	4619      	mov	r1, r3
 800e010:	4a3f      	ldr	r2, [pc, #252]	; (800e110 <etharp_output+0x200>)
 800e012:	460b      	mov	r3, r1
 800e014:	005b      	lsls	r3, r3, #1
 800e016:	440b      	add	r3, r1
 800e018:	00db      	lsls	r3, r3, #3
 800e01a:	4413      	add	r3, r2
 800e01c:	3308      	adds	r3, #8
 800e01e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	429a      	cmp	r2, r3
 800e024:	d117      	bne.n	800e056 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	4b38      	ldr	r3, [pc, #224]	; (800e10c <etharp_output+0x1fc>)
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	4618      	mov	r0, r3
 800e030:	4937      	ldr	r1, [pc, #220]	; (800e110 <etharp_output+0x200>)
 800e032:	4603      	mov	r3, r0
 800e034:	005b      	lsls	r3, r3, #1
 800e036:	4403      	add	r3, r0
 800e038:	00db      	lsls	r3, r3, #3
 800e03a:	440b      	add	r3, r1
 800e03c:	3304      	adds	r3, #4
 800e03e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e040:	429a      	cmp	r2, r3
 800e042:	d108      	bne.n	800e056 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e044:	4b31      	ldr	r3, [pc, #196]	; (800e10c <etharp_output+0x1fc>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	461a      	mov	r2, r3
 800e04a:	68b9      	ldr	r1, [r7, #8]
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f7ff fec5 	bl	800dddc <etharp_output_to_arp_index>
 800e052:	4603      	mov	r3, r0
 800e054:	e04a      	b.n	800e0ec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e056:	2300      	movs	r3, #0
 800e058:	75fb      	strb	r3, [r7, #23]
 800e05a:	e031      	b.n	800e0c0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e05c:	7dfa      	ldrb	r2, [r7, #23]
 800e05e:	492c      	ldr	r1, [pc, #176]	; (800e110 <etharp_output+0x200>)
 800e060:	4613      	mov	r3, r2
 800e062:	005b      	lsls	r3, r3, #1
 800e064:	4413      	add	r3, r2
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	440b      	add	r3, r1
 800e06a:	3314      	adds	r3, #20
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d923      	bls.n	800e0ba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e072:	7dfa      	ldrb	r2, [r7, #23]
 800e074:	4926      	ldr	r1, [pc, #152]	; (800e110 <etharp_output+0x200>)
 800e076:	4613      	mov	r3, r2
 800e078:	005b      	lsls	r3, r3, #1
 800e07a:	4413      	add	r3, r2
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	440b      	add	r3, r1
 800e080:	3308      	adds	r3, #8
 800e082:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	429a      	cmp	r2, r3
 800e088:	d117      	bne.n	800e0ba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	6819      	ldr	r1, [r3, #0]
 800e08e:	7dfa      	ldrb	r2, [r7, #23]
 800e090:	481f      	ldr	r0, [pc, #124]	; (800e110 <etharp_output+0x200>)
 800e092:	4613      	mov	r3, r2
 800e094:	005b      	lsls	r3, r3, #1
 800e096:	4413      	add	r3, r2
 800e098:	00db      	lsls	r3, r3, #3
 800e09a:	4403      	add	r3, r0
 800e09c:	3304      	adds	r3, #4
 800e09e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e0a0:	4299      	cmp	r1, r3
 800e0a2:	d10a      	bne.n	800e0ba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e0a4:	4a19      	ldr	r2, [pc, #100]	; (800e10c <etharp_output+0x1fc>)
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
 800e0a8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e0aa:	7dfb      	ldrb	r3, [r7, #23]
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	68b9      	ldr	r1, [r7, #8]
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f7ff fe93 	bl	800dddc <etharp_output_to_arp_index>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	e018      	b.n	800e0ec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e0ba:	7dfb      	ldrb	r3, [r7, #23]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	75fb      	strb	r3, [r7, #23]
 800e0c0:	7dfb      	ldrb	r3, [r7, #23]
 800e0c2:	2b09      	cmp	r3, #9
 800e0c4:	d9ca      	bls.n	800e05c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	69b9      	ldr	r1, [r7, #24]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 f822 	bl	800e114 <etharp_query>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	e00b      	b.n	800e0ec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800e0da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	68b9      	ldr	r1, [r7, #8]
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f001 fd5d 	bl	800fba4 <ethernet_output>
 800e0ea:	4603      	mov	r3, r0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3720      	adds	r7, #32
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	080133cc 	.word	0x080133cc
 800e0f8:	0801351c 	.word	0x0801351c
 800e0fc:	08013444 	.word	0x08013444
 800e100:	0801356c 	.word	0x0801356c
 800e104:	0801350c 	.word	0x0801350c
 800e108:	08013b88 	.word	0x08013b88
 800e10c:	20000214 	.word	0x20000214
 800e110:	20000124 	.word	0x20000124

0800e114 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08c      	sub	sp, #48	; 0x30
 800e118:	af02      	add	r7, sp, #8
 800e11a:	60f8      	str	r0, [r7, #12]
 800e11c:	60b9      	str	r1, [r7, #8]
 800e11e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	332a      	adds	r3, #42	; 0x2a
 800e124:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e126:	23ff      	movs	r3, #255	; 0xff
 800e128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68f9      	ldr	r1, [r7, #12]
 800e136:	4618      	mov	r0, r3
 800e138:	f000 fe2c 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10c      	bne.n	800e15c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e14a:	2be0      	cmp	r3, #224	; 0xe0
 800e14c:	d006      	beq.n	800e15c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d003      	beq.n	800e15c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d102      	bne.n	800e162 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e15c:	f06f 030f 	mvn.w	r3, #15
 800e160:	e101      	b.n	800e366 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	2101      	movs	r1, #1
 800e166:	68b8      	ldr	r0, [r7, #8]
 800e168:	f7ff fb5c 	bl	800d824 <etharp_find_entry>
 800e16c:	4603      	mov	r3, r0
 800e16e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e174:	2b00      	cmp	r3, #0
 800e176:	da02      	bge.n	800e17e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e178:	8a7b      	ldrh	r3, [r7, #18]
 800e17a:	b25b      	sxtb	r3, r3
 800e17c:	e0f3      	b.n	800e366 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e17e:	8a7b      	ldrh	r3, [r7, #18]
 800e180:	2b7e      	cmp	r3, #126	; 0x7e
 800e182:	d906      	bls.n	800e192 <etharp_query+0x7e>
 800e184:	4b7a      	ldr	r3, [pc, #488]	; (800e370 <etharp_query+0x25c>)
 800e186:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e18a:	497a      	ldr	r1, [pc, #488]	; (800e374 <etharp_query+0x260>)
 800e18c:	487a      	ldr	r0, [pc, #488]	; (800e378 <etharp_query+0x264>)
 800e18e:	f001 fd99 	bl	800fcc4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e192:	8a7b      	ldrh	r3, [r7, #18]
 800e194:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e196:	7c7a      	ldrb	r2, [r7, #17]
 800e198:	4978      	ldr	r1, [pc, #480]	; (800e37c <etharp_query+0x268>)
 800e19a:	4613      	mov	r3, r2
 800e19c:	005b      	lsls	r3, r3, #1
 800e19e:	4413      	add	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	440b      	add	r3, r1
 800e1a4:	3314      	adds	r3, #20
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d115      	bne.n	800e1d8 <etharp_query+0xc4>
    is_new_entry = 1;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e1b0:	7c7a      	ldrb	r2, [r7, #17]
 800e1b2:	4972      	ldr	r1, [pc, #456]	; (800e37c <etharp_query+0x268>)
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	005b      	lsls	r3, r3, #1
 800e1b8:	4413      	add	r3, r2
 800e1ba:	00db      	lsls	r3, r3, #3
 800e1bc:	440b      	add	r3, r1
 800e1be:	3314      	adds	r3, #20
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e1c4:	7c7a      	ldrb	r2, [r7, #17]
 800e1c6:	496d      	ldr	r1, [pc, #436]	; (800e37c <etharp_query+0x268>)
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	4413      	add	r3, r2
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	440b      	add	r3, r1
 800e1d2:	3308      	adds	r3, #8
 800e1d4:	68fa      	ldr	r2, [r7, #12]
 800e1d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e1d8:	7c7a      	ldrb	r2, [r7, #17]
 800e1da:	4968      	ldr	r1, [pc, #416]	; (800e37c <etharp_query+0x268>)
 800e1dc:	4613      	mov	r3, r2
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	4413      	add	r3, r2
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	440b      	add	r3, r1
 800e1e6:	3314      	adds	r3, #20
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d011      	beq.n	800e212 <etharp_query+0xfe>
 800e1ee:	7c7a      	ldrb	r2, [r7, #17]
 800e1f0:	4962      	ldr	r1, [pc, #392]	; (800e37c <etharp_query+0x268>)
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	005b      	lsls	r3, r3, #1
 800e1f6:	4413      	add	r3, r2
 800e1f8:	00db      	lsls	r3, r3, #3
 800e1fa:	440b      	add	r3, r1
 800e1fc:	3314      	adds	r3, #20
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b01      	cmp	r3, #1
 800e202:	d806      	bhi.n	800e212 <etharp_query+0xfe>
 800e204:	4b5a      	ldr	r3, [pc, #360]	; (800e370 <etharp_query+0x25c>)
 800e206:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e20a:	495d      	ldr	r1, [pc, #372]	; (800e380 <etharp_query+0x26c>)
 800e20c:	485a      	ldr	r0, [pc, #360]	; (800e378 <etharp_query+0x264>)
 800e20e:	f001 fd59 	bl	800fcc4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d102      	bne.n	800e21e <etharp_query+0x10a>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10c      	bne.n	800e238 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e21e:	68b9      	ldr	r1, [r7, #8]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f000 f963 	bl	800e4ec <etharp_request>
 800e226:	4603      	mov	r3, r0
 800e228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d102      	bne.n	800e238 <etharp_query+0x124>
      return result;
 800e232:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e236:	e096      	b.n	800e366 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <etharp_query+0x138>
 800e23e:	4b4c      	ldr	r3, [pc, #304]	; (800e370 <etharp_query+0x25c>)
 800e240:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e244:	494f      	ldr	r1, [pc, #316]	; (800e384 <etharp_query+0x270>)
 800e246:	484c      	ldr	r0, [pc, #304]	; (800e378 <etharp_query+0x264>)
 800e248:	f001 fd3c 	bl	800fcc4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e24c:	7c7a      	ldrb	r2, [r7, #17]
 800e24e:	494b      	ldr	r1, [pc, #300]	; (800e37c <etharp_query+0x268>)
 800e250:	4613      	mov	r3, r2
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	4413      	add	r3, r2
 800e256:	00db      	lsls	r3, r3, #3
 800e258:	440b      	add	r3, r1
 800e25a:	3314      	adds	r3, #20
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	2b01      	cmp	r3, #1
 800e260:	d917      	bls.n	800e292 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e262:	4a49      	ldr	r2, [pc, #292]	; (800e388 <etharp_query+0x274>)
 800e264:	7c7b      	ldrb	r3, [r7, #17]
 800e266:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e268:	7c7a      	ldrb	r2, [r7, #17]
 800e26a:	4613      	mov	r3, r2
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	4413      	add	r3, r2
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	3308      	adds	r3, #8
 800e274:	4a41      	ldr	r2, [pc, #260]	; (800e37c <etharp_query+0x268>)
 800e276:	4413      	add	r3, r2
 800e278:	3304      	adds	r3, #4
 800e27a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e27e:	9200      	str	r2, [sp, #0]
 800e280:	697a      	ldr	r2, [r7, #20]
 800e282:	6879      	ldr	r1, [r7, #4]
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f001 fc8d 	bl	800fba4 <ethernet_output>
 800e28a:	4603      	mov	r3, r0
 800e28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e290:	e067      	b.n	800e362 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e292:	7c7a      	ldrb	r2, [r7, #17]
 800e294:	4939      	ldr	r1, [pc, #228]	; (800e37c <etharp_query+0x268>)
 800e296:	4613      	mov	r3, r2
 800e298:	005b      	lsls	r3, r3, #1
 800e29a:	4413      	add	r3, r2
 800e29c:	00db      	lsls	r3, r3, #3
 800e29e:	440b      	add	r3, r1
 800e2a0:	3314      	adds	r3, #20
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d15c      	bne.n	800e362 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e2b0:	e01c      	b.n	800e2ec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	895a      	ldrh	r2, [r3, #10]
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	891b      	ldrh	r3, [r3, #8]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d10a      	bne.n	800e2d4 <etharp_query+0x1c0>
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d006      	beq.n	800e2d4 <etharp_query+0x1c0>
 800e2c6:	4b2a      	ldr	r3, [pc, #168]	; (800e370 <etharp_query+0x25c>)
 800e2c8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e2cc:	492f      	ldr	r1, [pc, #188]	; (800e38c <etharp_query+0x278>)
 800e2ce:	482a      	ldr	r0, [pc, #168]	; (800e378 <etharp_query+0x264>)
 800e2d0:	f001 fcf8 	bl	800fcc4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	7b1b      	ldrb	r3, [r3, #12]
 800e2d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d002      	beq.n	800e2e6 <etharp_query+0x1d2>
        copy_needed = 1;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	61bb      	str	r3, [r7, #24]
        break;
 800e2e4:	e005      	b.n	800e2f2 <etharp_query+0x1de>
      }
      p = p->next;
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1df      	bne.n	800e2b2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d007      	beq.n	800e308 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e2fe:	200e      	movs	r0, #14
 800e300:	f7f7 fb94 	bl	8005a2c <pbuf_clone>
 800e304:	61f8      	str	r0, [r7, #28]
 800e306:	e004      	b.n	800e312 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e30c:	69f8      	ldr	r0, [r7, #28]
 800e30e:	f7f7 f9c1 	bl	8005694 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d021      	beq.n	800e35c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e318:	7c7a      	ldrb	r2, [r7, #17]
 800e31a:	4918      	ldr	r1, [pc, #96]	; (800e37c <etharp_query+0x268>)
 800e31c:	4613      	mov	r3, r2
 800e31e:	005b      	lsls	r3, r3, #1
 800e320:	4413      	add	r3, r2
 800e322:	00db      	lsls	r3, r3, #3
 800e324:	440b      	add	r3, r1
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00a      	beq.n	800e342 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e32c:	7c7a      	ldrb	r2, [r7, #17]
 800e32e:	4913      	ldr	r1, [pc, #76]	; (800e37c <etharp_query+0x268>)
 800e330:	4613      	mov	r3, r2
 800e332:	005b      	lsls	r3, r3, #1
 800e334:	4413      	add	r3, r2
 800e336:	00db      	lsls	r3, r3, #3
 800e338:	440b      	add	r3, r1
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4618      	mov	r0, r3
 800e33e:	f7f7 f909 	bl	8005554 <pbuf_free>
      }
      arp_table[i].q = p;
 800e342:	7c7a      	ldrb	r2, [r7, #17]
 800e344:	490d      	ldr	r1, [pc, #52]	; (800e37c <etharp_query+0x268>)
 800e346:	4613      	mov	r3, r2
 800e348:	005b      	lsls	r3, r3, #1
 800e34a:	4413      	add	r3, r2
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	440b      	add	r3, r1
 800e350:	69fa      	ldr	r2, [r7, #28]
 800e352:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e354:	2300      	movs	r3, #0
 800e356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e35a:	e002      	b.n	800e362 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e35c:	23ff      	movs	r3, #255	; 0xff
 800e35e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e362:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e366:	4618      	mov	r0, r3
 800e368:	3728      	adds	r7, #40	; 0x28
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	080133cc 	.word	0x080133cc
 800e374:	08013578 	.word	0x08013578
 800e378:	08013444 	.word	0x08013444
 800e37c:	20000124 	.word	0x20000124
 800e380:	08013588 	.word	0x08013588
 800e384:	0801356c 	.word	0x0801356c
 800e388:	20000214 	.word	0x20000214
 800e38c:	080135b0 	.word	0x080135b0

0800e390 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08a      	sub	sp, #40	; 0x28
 800e394:	af02      	add	r7, sp, #8
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
 800e39c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d106      	bne.n	800e3b6 <etharp_raw+0x26>
 800e3a8:	4b3a      	ldr	r3, [pc, #232]	; (800e494 <etharp_raw+0x104>)
 800e3aa:	f240 4257 	movw	r2, #1111	; 0x457
 800e3ae:	493a      	ldr	r1, [pc, #232]	; (800e498 <etharp_raw+0x108>)
 800e3b0:	483a      	ldr	r0, [pc, #232]	; (800e49c <etharp_raw+0x10c>)
 800e3b2:	f001 fc87 	bl	800fcc4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e3b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3ba:	211c      	movs	r1, #28
 800e3bc:	200e      	movs	r0, #14
 800e3be:	f7f6 fde5 	bl	8004f8c <pbuf_alloc>
 800e3c2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d102      	bne.n	800e3d0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ce:	e05d      	b.n	800e48c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e3d0:	69bb      	ldr	r3, [r7, #24]
 800e3d2:	895b      	ldrh	r3, [r3, #10]
 800e3d4:	2b1b      	cmp	r3, #27
 800e3d6:	d806      	bhi.n	800e3e6 <etharp_raw+0x56>
 800e3d8:	4b2e      	ldr	r3, [pc, #184]	; (800e494 <etharp_raw+0x104>)
 800e3da:	f240 4262 	movw	r2, #1122	; 0x462
 800e3de:	4930      	ldr	r1, [pc, #192]	; (800e4a0 <etharp_raw+0x110>)
 800e3e0:	482e      	ldr	r0, [pc, #184]	; (800e49c <etharp_raw+0x10c>)
 800e3e2:	f001 fc6f 	bl	800fcc4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e3ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7f5 fd8c 	bl	8003f0c <lwip_htons>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e402:	2b06      	cmp	r3, #6
 800e404:	d006      	beq.n	800e414 <etharp_raw+0x84>
 800e406:	4b23      	ldr	r3, [pc, #140]	; (800e494 <etharp_raw+0x104>)
 800e408:	f240 4269 	movw	r2, #1129	; 0x469
 800e40c:	4925      	ldr	r1, [pc, #148]	; (800e4a4 <etharp_raw+0x114>)
 800e40e:	4823      	ldr	r0, [pc, #140]	; (800e49c <etharp_raw+0x10c>)
 800e410:	f001 fc58 	bl	800fcc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	3308      	adds	r3, #8
 800e418:	2206      	movs	r2, #6
 800e41a:	6839      	ldr	r1, [r7, #0]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f001 fc3b 	bl	800fc98 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	3312      	adds	r3, #18
 800e426:	2206      	movs	r2, #6
 800e428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e42a:	4618      	mov	r0, r3
 800e42c:	f001 fc34 	bl	800fc98 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	330e      	adds	r3, #14
 800e434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e436:	6812      	ldr	r2, [r2, #0]
 800e438:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	3318      	adds	r3, #24
 800e43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e440:	6812      	ldr	r2, [r2, #0]
 800e442:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	2200      	movs	r2, #0
 800e448:	701a      	strb	r2, [r3, #0]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f042 0201 	orr.w	r2, r2, #1
 800e450:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2200      	movs	r2, #0
 800e456:	f042 0208 	orr.w	r2, r2, #8
 800e45a:	709a      	strb	r2, [r3, #2]
 800e45c:	2200      	movs	r2, #0
 800e45e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	2206      	movs	r2, #6
 800e464:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	2204      	movs	r2, #4
 800e46a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e46c:	f640 0306 	movw	r3, #2054	; 0x806
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	69b9      	ldr	r1, [r7, #24]
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f001 fb93 	bl	800fba4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e47e:	69b8      	ldr	r0, [r7, #24]
 800e480:	f7f7 f868 	bl	8005554 <pbuf_free>
  p = NULL;
 800e484:	2300      	movs	r3, #0
 800e486:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e488:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3720      	adds	r7, #32
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	080133cc 	.word	0x080133cc
 800e498:	0801351c 	.word	0x0801351c
 800e49c:	08013444 	.word	0x08013444
 800e4a0:	080135cc 	.word	0x080135cc
 800e4a4:	08013600 	.word	0x08013600

0800e4a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b088      	sub	sp, #32
 800e4ac:	af04      	add	r7, sp, #16
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	9203      	str	r2, [sp, #12]
 800e4c8:	68ba      	ldr	r2, [r7, #8]
 800e4ca:	9202      	str	r2, [sp, #8]
 800e4cc:	4a06      	ldr	r2, [pc, #24]	; (800e4e8 <etharp_request_dst+0x40>)
 800e4ce:	9201      	str	r2, [sp, #4]
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f7ff ff5a 	bl	800e390 <etharp_raw>
 800e4dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08013b90 	.word	0x08013b90

0800e4ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e4f6:	4a05      	ldr	r2, [pc, #20]	; (800e50c <etharp_request+0x20>)
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff ffd4 	bl	800e4a8 <etharp_request_dst>
 800e500:	4603      	mov	r3, r0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	08013b88 	.word	0x08013b88

0800e510 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08e      	sub	sp, #56	; 0x38
 800e514:	af04      	add	r7, sp, #16
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e51a:	4b79      	ldr	r3, [pc, #484]	; (800e700 <icmp_input+0x1f0>)
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	f003 030f 	and.w	r3, r3, #15
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e532:	2b13      	cmp	r3, #19
 800e534:	f240 80cd 	bls.w	800e6d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	895b      	ldrh	r3, [r3, #10]
 800e53c:	2b03      	cmp	r3, #3
 800e53e:	f240 80ca 	bls.w	800e6d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e54c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e550:	2b00      	cmp	r3, #0
 800e552:	f000 80b7 	beq.w	800e6c4 <icmp_input+0x1b4>
 800e556:	2b08      	cmp	r3, #8
 800e558:	f040 80b7 	bne.w	800e6ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e55c:	4b69      	ldr	r3, [pc, #420]	; (800e704 <icmp_input+0x1f4>)
 800e55e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e560:	4b67      	ldr	r3, [pc, #412]	; (800e700 <icmp_input+0x1f0>)
 800e562:	695b      	ldr	r3, [r3, #20]
 800e564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e568:	2be0      	cmp	r3, #224	; 0xe0
 800e56a:	f000 80bb 	beq.w	800e6e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e56e:	4b64      	ldr	r3, [pc, #400]	; (800e700 <icmp_input+0x1f0>)
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	4a63      	ldr	r2, [pc, #396]	; (800e700 <icmp_input+0x1f0>)
 800e574:	6812      	ldr	r2, [r2, #0]
 800e576:	4611      	mov	r1, r2
 800e578:	4618      	mov	r0, r3
 800e57a:	f000 fc0b 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	f040 80b1 	bne.w	800e6e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	891b      	ldrh	r3, [r3, #8]
 800e58a:	2b07      	cmp	r3, #7
 800e58c:	f240 80a5 	bls.w	800e6da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e592:	330e      	adds	r3, #14
 800e594:	4619      	mov	r1, r3
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7f6 ff46 	bl	8005428 <pbuf_add_header>
 800e59c:	4603      	mov	r3, r0
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d04b      	beq.n	800e63a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	891a      	ldrh	r2, [r3, #8]
 800e5a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5a8:	4413      	add	r3, r2
 800e5aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	891b      	ldrh	r3, [r3, #8]
 800e5b0:	8b7a      	ldrh	r2, [r7, #26]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	f0c0 809a 	bcc.w	800e6ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e5b8:	8b7b      	ldrh	r3, [r7, #26]
 800e5ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5be:	4619      	mov	r1, r3
 800e5c0:	200e      	movs	r0, #14
 800e5c2:	f7f6 fce3 	bl	8004f8c <pbuf_alloc>
 800e5c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f000 8090 	beq.w	800e6f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	895b      	ldrh	r3, [r3, #10]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5d8:	3308      	adds	r3, #8
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d203      	bcs.n	800e5e6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e5de:	6978      	ldr	r0, [r7, #20]
 800e5e0:	f7f6 ffb8 	bl	8005554 <pbuf_free>
          goto icmperr;
 800e5e4:	e085      	b.n	800e6f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e5ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f001 fb52 	bl	800fc98 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e5f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	6978      	ldr	r0, [r7, #20]
 800e5fa:	f7f6 ff25 	bl	8005448 <pbuf_remove_header>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d009      	beq.n	800e618 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e604:	4b40      	ldr	r3, [pc, #256]	; (800e708 <icmp_input+0x1f8>)
 800e606:	22b6      	movs	r2, #182	; 0xb6
 800e608:	4940      	ldr	r1, [pc, #256]	; (800e70c <icmp_input+0x1fc>)
 800e60a:	4841      	ldr	r0, [pc, #260]	; (800e710 <icmp_input+0x200>)
 800e60c:	f001 fb5a 	bl	800fcc4 <iprintf>
          pbuf_free(r);
 800e610:	6978      	ldr	r0, [r7, #20]
 800e612:	f7f6 ff9f 	bl	8005554 <pbuf_free>
          goto icmperr;
 800e616:	e06c      	b.n	800e6f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e618:	6879      	ldr	r1, [r7, #4]
 800e61a:	6978      	ldr	r0, [r7, #20]
 800e61c:	f7f7 f8c2 	bl	80057a4 <pbuf_copy>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d003      	beq.n	800e62e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e626:	6978      	ldr	r0, [r7, #20]
 800e628:	f7f6 ff94 	bl	8005554 <pbuf_free>
          goto icmperr;
 800e62c:	e061      	b.n	800e6f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7f6 ff90 	bl	8005554 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	607b      	str	r3, [r7, #4]
 800e638:	e00f      	b.n	800e65a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e63a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e63c:	330e      	adds	r3, #14
 800e63e:	4619      	mov	r1, r3
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7f6 ff01 	bl	8005448 <pbuf_remove_header>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d006      	beq.n	800e65a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e64c:	4b2e      	ldr	r3, [pc, #184]	; (800e708 <icmp_input+0x1f8>)
 800e64e:	22c7      	movs	r2, #199	; 0xc7
 800e650:	4930      	ldr	r1, [pc, #192]	; (800e714 <icmp_input+0x204>)
 800e652:	482f      	ldr	r0, [pc, #188]	; (800e710 <icmp_input+0x200>)
 800e654:	f001 fb36 	bl	800fcc4 <iprintf>
          goto icmperr;
 800e658:	e04b      	b.n	800e6f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e662:	4619      	mov	r1, r3
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7f6 fedf 	bl	8005428 <pbuf_add_header>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d12b      	bne.n	800e6c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e67e:	4b20      	ldr	r3, [pc, #128]	; (800e700 <icmp_input+0x1f0>)
 800e680:	691a      	ldr	r2, [r3, #16]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	2200      	movs	r2, #0
 800e68a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	2200      	movs	r2, #0
 800e690:	709a      	strb	r2, [r3, #2]
 800e692:	2200      	movs	r2, #0
 800e694:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	22ff      	movs	r2, #255	; 0xff
 800e69a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	729a      	strb	r2, [r3, #10]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	9302      	str	r3, [sp, #8]
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	23ff      	movs	r3, #255	; 0xff
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	69f9      	ldr	r1, [r7, #28]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fa93 	bl	800ebe4 <ip4_output_if>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e6c2:	e001      	b.n	800e6c8 <icmp_input+0x1b8>
      break;
 800e6c4:	bf00      	nop
 800e6c6:	e000      	b.n	800e6ca <icmp_input+0x1ba>
      break;
 800e6c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7f6 ff42 	bl	8005554 <pbuf_free>
  return;
 800e6d0:	e013      	b.n	800e6fa <icmp_input+0x1ea>
    goto lenerr;
 800e6d2:	bf00      	nop
 800e6d4:	e002      	b.n	800e6dc <icmp_input+0x1cc>
    goto lenerr;
 800e6d6:	bf00      	nop
 800e6d8:	e000      	b.n	800e6dc <icmp_input+0x1cc>
        goto lenerr;
 800e6da:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7f6 ff39 	bl	8005554 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e6e2:	e00a      	b.n	800e6fa <icmp_input+0x1ea>
        goto icmperr;
 800e6e4:	bf00      	nop
 800e6e6:	e004      	b.n	800e6f2 <icmp_input+0x1e2>
        goto icmperr;
 800e6e8:	bf00      	nop
 800e6ea:	e002      	b.n	800e6f2 <icmp_input+0x1e2>
          goto icmperr;
 800e6ec:	bf00      	nop
 800e6ee:	e000      	b.n	800e6f2 <icmp_input+0x1e2>
          goto icmperr;
 800e6f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7f6 ff2e 	bl	8005554 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e6f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e6fa:	3728      	adds	r7, #40	; 0x28
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	200033e8 	.word	0x200033e8
 800e704:	200033fc 	.word	0x200033fc
 800e708:	08013644 	.word	0x08013644
 800e70c:	0801367c 	.word	0x0801367c
 800e710:	080136b4 	.word	0x080136b4
 800e714:	080136dc 	.word	0x080136dc

0800e718 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	460b      	mov	r3, r1
 800e722:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e724:	78fb      	ldrb	r3, [r7, #3]
 800e726:	461a      	mov	r2, r3
 800e728:	2103      	movs	r1, #3
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 f814 	bl	800e758 <icmp_send_response>
}
 800e730:	bf00      	nop
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e744:	78fb      	ldrb	r3, [r7, #3]
 800e746:	461a      	mov	r2, r3
 800e748:	210b      	movs	r1, #11
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 f804 	bl	800e758 <icmp_send_response>
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b08c      	sub	sp, #48	; 0x30
 800e75c:	af04      	add	r7, sp, #16
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	460b      	mov	r3, r1
 800e762:	70fb      	strb	r3, [r7, #3]
 800e764:	4613      	mov	r3, r2
 800e766:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e768:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e76c:	2124      	movs	r1, #36	; 0x24
 800e76e:	2022      	movs	r0, #34	; 0x22
 800e770:	f7f6 fc0c 	bl	8004f8c <pbuf_alloc>
 800e774:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d04c      	beq.n	800e816 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	895b      	ldrh	r3, [r3, #10]
 800e780:	2b23      	cmp	r3, #35	; 0x23
 800e782:	d806      	bhi.n	800e792 <icmp_send_response+0x3a>
 800e784:	4b26      	ldr	r3, [pc, #152]	; (800e820 <icmp_send_response+0xc8>)
 800e786:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e78a:	4926      	ldr	r1, [pc, #152]	; (800e824 <icmp_send_response+0xcc>)
 800e78c:	4826      	ldr	r0, [pc, #152]	; (800e828 <icmp_send_response+0xd0>)
 800e78e:	f001 fa99 	bl	800fcc4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	78fa      	ldrb	r2, [r7, #3]
 800e7a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	78ba      	ldrb	r2, [r7, #2]
 800e7a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	711a      	strb	r2, [r3, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	719a      	strb	r2, [r3, #6]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	f103 0008 	add.w	r0, r3, #8
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	221c      	movs	r2, #28
 800e7cc:	4619      	mov	r1, r3
 800e7ce:	f001 fa63 	bl	800fc98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e7d8:	f107 030c 	add.w	r3, r7, #12
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f000 f825 	bl	800e82c <ip4_route>
 800e7e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d011      	beq.n	800e80e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	709a      	strb	r2, [r3, #2]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e7f4:	f107 020c 	add.w	r2, r7, #12
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	9302      	str	r3, [sp, #8]
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	2300      	movs	r3, #0
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	23ff      	movs	r3, #255	; 0xff
 800e806:	2100      	movs	r1, #0
 800e808:	69f8      	ldr	r0, [r7, #28]
 800e80a:	f000 f9eb 	bl	800ebe4 <ip4_output_if>
  }
  pbuf_free(q);
 800e80e:	69f8      	ldr	r0, [r7, #28]
 800e810:	f7f6 fea0 	bl	8005554 <pbuf_free>
 800e814:	e000      	b.n	800e818 <icmp_send_response+0xc0>
    return;
 800e816:	bf00      	nop
}
 800e818:	3720      	adds	r7, #32
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
 800e81e:	bf00      	nop
 800e820:	08013644 	.word	0x08013644
 800e824:	08013710 	.word	0x08013710
 800e828:	080136b4 	.word	0x080136b4

0800e82c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e82c:	b480      	push	{r7}
 800e82e:	b085      	sub	sp, #20
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e834:	4b33      	ldr	r3, [pc, #204]	; (800e904 <ip4_route+0xd8>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	60fb      	str	r3, [r7, #12]
 800e83a:	e036      	b.n	800e8aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e842:	f003 0301 	and.w	r3, r3, #1
 800e846:	b2db      	uxtb	r3, r3
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d02b      	beq.n	800e8a4 <ip4_route+0x78>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e852:	089b      	lsrs	r3, r3, #2
 800e854:	f003 0301 	and.w	r3, r3, #1
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d022      	beq.n	800e8a4 <ip4_route+0x78>
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3304      	adds	r3, #4
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01d      	beq.n	800e8a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	3304      	adds	r3, #4
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	405a      	eors	r2, r3
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	3308      	adds	r3, #8
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4013      	ands	r3, r2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d101      	bne.n	800e884 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	e038      	b.n	800e8f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e88a:	f003 0302 	and.w	r3, r3, #2
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d108      	bne.n	800e8a4 <ip4_route+0x78>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	330c      	adds	r3, #12
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d101      	bne.n	800e8a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	e028      	b.n	800e8f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	60fb      	str	r3, [r7, #12]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d1c5      	bne.n	800e83c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8b0:	4b15      	ldr	r3, [pc, #84]	; (800e908 <ip4_route+0xdc>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d01a      	beq.n	800e8ee <ip4_route+0xc2>
 800e8b8:	4b13      	ldr	r3, [pc, #76]	; (800e908 <ip4_route+0xdc>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e8c0:	f003 0301 	and.w	r3, r3, #1
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d012      	beq.n	800e8ee <ip4_route+0xc2>
 800e8c8:	4b0f      	ldr	r3, [pc, #60]	; (800e908 <ip4_route+0xdc>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e8d0:	f003 0304 	and.w	r3, r3, #4
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00a      	beq.n	800e8ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e8d8:	4b0b      	ldr	r3, [pc, #44]	; (800e908 <ip4_route+0xdc>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d004      	beq.n	800e8ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b7f      	cmp	r3, #127	; 0x7f
 800e8ec:	d101      	bne.n	800e8f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	e001      	b.n	800e8f6 <ip4_route+0xca>
  }

  return netif_default;
 800e8f2:	4b05      	ldr	r3, [pc, #20]	; (800e908 <ip4_route+0xdc>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3714      	adds	r7, #20
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr
 800e902:	bf00      	nop
 800e904:	2000693c 	.word	0x2000693c
 800e908:	20006940 	.word	0x20006940

0800e90c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e91a:	f003 0301 	and.w	r3, r3, #1
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b00      	cmp	r3, #0
 800e922:	d016      	beq.n	800e952 <ip4_input_accept+0x46>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	3304      	adds	r3, #4
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d011      	beq.n	800e952 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e92e:	4b0b      	ldr	r3, [pc, #44]	; (800e95c <ip4_input_accept+0x50>)
 800e930:	695a      	ldr	r2, [r3, #20]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	3304      	adds	r3, #4
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d008      	beq.n	800e94e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e93c:	4b07      	ldr	r3, [pc, #28]	; (800e95c <ip4_input_accept+0x50>)
 800e93e:	695b      	ldr	r3, [r3, #20]
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	4618      	mov	r0, r3
 800e944:	f000 fa26 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800e948:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e94e:	2301      	movs	r3, #1
 800e950:	e000      	b.n	800e954 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	3708      	adds	r7, #8
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	200033e8 	.word	0x200033e8

0800e960 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b088      	sub	sp, #32
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800e96a:	2301      	movs	r3, #1
 800e96c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	091b      	lsrs	r3, r3, #4
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	2b04      	cmp	r3, #4
 800e97e:	d004      	beq.n	800e98a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7f6 fde7 	bl	8005554 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e986:	2300      	movs	r3, #0
 800e988:	e123      	b.n	800ebd2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	f003 030f 	and.w	r3, r3, #15
 800e992:	b2db      	uxtb	r3, r3
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	b2db      	uxtb	r3, r3
 800e998:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	885b      	ldrh	r3, [r3, #2]
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7f5 fab3 	bl	8003f0c <lwip_htons>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	891b      	ldrh	r3, [r3, #8]
 800e9ae:	8a3a      	ldrh	r2, [r7, #16]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d204      	bcs.n	800e9be <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800e9b4:	8a3b      	ldrh	r3, [r7, #16]
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7f6 fc45 	bl	8005248 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	895b      	ldrh	r3, [r3, #10]
 800e9c2:	8a7a      	ldrh	r2, [r7, #18]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d807      	bhi.n	800e9d8 <ip4_input+0x78>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	891b      	ldrh	r3, [r3, #8]
 800e9cc:	8a3a      	ldrh	r2, [r7, #16]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d802      	bhi.n	800e9d8 <ip4_input+0x78>
 800e9d2:	8a7b      	ldrh	r3, [r7, #18]
 800e9d4:	2b13      	cmp	r3, #19
 800e9d6:	d804      	bhi.n	800e9e2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7f6 fdbb 	bl	8005554 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e0f7      	b.n	800ebd2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	4a7d      	ldr	r2, [pc, #500]	; (800ebdc <ip4_input+0x27c>)
 800e9e8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	4a7b      	ldr	r2, [pc, #492]	; (800ebdc <ip4_input+0x27c>)
 800e9f0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e9f2:	4b7a      	ldr	r3, [pc, #488]	; (800ebdc <ip4_input+0x27c>)
 800e9f4:	695b      	ldr	r3, [r3, #20]
 800e9f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9fa:	2be0      	cmp	r3, #224	; 0xe0
 800e9fc:	d112      	bne.n	800ea24 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d007      	beq.n	800ea1e <ip4_input+0xbe>
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	3304      	adds	r3, #4
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <ip4_input+0xbe>
      netif = inp;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	61bb      	str	r3, [r7, #24]
 800ea1c:	e02a      	b.n	800ea74 <ip4_input+0x114>
    } else {
      netif = NULL;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	61bb      	str	r3, [r7, #24]
 800ea22:	e027      	b.n	800ea74 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ea24:	6838      	ldr	r0, [r7, #0]
 800ea26:	f7ff ff71 	bl	800e90c <ip4_input_accept>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d002      	beq.n	800ea36 <ip4_input+0xd6>
      netif = inp;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	61bb      	str	r3, [r7, #24]
 800ea34:	e01e      	b.n	800ea74 <ip4_input+0x114>
    } else {
      netif = NULL;
 800ea36:	2300      	movs	r3, #0
 800ea38:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ea3a:	4b68      	ldr	r3, [pc, #416]	; (800ebdc <ip4_input+0x27c>)
 800ea3c:	695b      	ldr	r3, [r3, #20]
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b7f      	cmp	r3, #127	; 0x7f
 800ea42:	d017      	beq.n	800ea74 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ea44:	4b66      	ldr	r3, [pc, #408]	; (800ebe0 <ip4_input+0x280>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	61bb      	str	r3, [r7, #24]
 800ea4a:	e00e      	b.n	800ea6a <ip4_input+0x10a>
          if (netif == inp) {
 800ea4c:	69ba      	ldr	r2, [r7, #24]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d006      	beq.n	800ea62 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ea54:	69b8      	ldr	r0, [r7, #24]
 800ea56:	f7ff ff59 	bl	800e90c <ip4_input_accept>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d108      	bne.n	800ea72 <ip4_input+0x112>
 800ea60:	e000      	b.n	800ea64 <ip4_input+0x104>
            continue;
 800ea62:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	61bb      	str	r3, [r7, #24]
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1ed      	bne.n	800ea4c <ip4_input+0xec>
 800ea70:	e000      	b.n	800ea74 <ip4_input+0x114>
            break;
 800ea72:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d111      	bne.n	800ea9e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	7a5b      	ldrb	r3, [r3, #9]
 800ea7e:	2b11      	cmp	r3, #17
 800ea80:	d10d      	bne.n	800ea9e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800ea82:	8a7b      	ldrh	r3, [r7, #18]
 800ea84:	69fa      	ldr	r2, [r7, #28]
 800ea86:	4413      	add	r3, r2
 800ea88:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	885b      	ldrh	r3, [r3, #2]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800ea94:	d103      	bne.n	800ea9e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d017      	beq.n	800ead4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800eaa4:	4b4d      	ldr	r3, [pc, #308]	; (800ebdc <ip4_input+0x27c>)
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d013      	beq.n	800ead4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eaac:	4b4b      	ldr	r3, [pc, #300]	; (800ebdc <ip4_input+0x27c>)
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	6839      	ldr	r1, [r7, #0]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 f96e 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d105      	bne.n	800eaca <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800eabe:	4b47      	ldr	r3, [pc, #284]	; (800ebdc <ip4_input+0x27c>)
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eac6:	2be0      	cmp	r3, #224	; 0xe0
 800eac8:	d104      	bne.n	800ead4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7f6 fd42 	bl	8005554 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ead0:	2300      	movs	r3, #0
 800ead2:	e07e      	b.n	800ebd2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d104      	bne.n	800eae4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7f6 fd3a 	bl	8005554 <pbuf_free>
    return ERR_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	e076      	b.n	800ebd2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	88db      	ldrh	r3, [r3, #6]
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	461a      	mov	r2, r3
 800eaec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800eaf0:	4013      	ands	r3, r2
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00b      	beq.n	800eb0e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 fc92 	bl	800f420 <ip4_reass>
 800eafc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <ip4_input+0x1a8>
      return ERR_OK;
 800eb04:	2300      	movs	r3, #0
 800eb06:	e064      	b.n	800ebd2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800eb0e:	4a33      	ldr	r2, [pc, #204]	; (800ebdc <ip4_input+0x27c>)
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eb14:	4a31      	ldr	r2, [pc, #196]	; (800ebdc <ip4_input+0x27c>)
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eb1a:	4a30      	ldr	r2, [pc, #192]	; (800ebdc <ip4_input+0x27c>)
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	f003 030f 	and.w	r3, r3, #15
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	4b2a      	ldr	r3, [pc, #168]	; (800ebdc <ip4_input+0x27c>)
 800eb32:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800eb34:	8a7b      	ldrh	r3, [r7, #18]
 800eb36:	4619      	mov	r1, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7f6 fc85 	bl	8005448 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	7a5b      	ldrb	r3, [r3, #9]
 800eb42:	2b11      	cmp	r3, #17
 800eb44:	d006      	beq.n	800eb54 <ip4_input+0x1f4>
 800eb46:	2b11      	cmp	r3, #17
 800eb48:	dc13      	bgt.n	800eb72 <ip4_input+0x212>
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d00c      	beq.n	800eb68 <ip4_input+0x208>
 800eb4e:	2b06      	cmp	r3, #6
 800eb50:	d005      	beq.n	800eb5e <ip4_input+0x1fe>
 800eb52:	e00e      	b.n	800eb72 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800eb54:	6839      	ldr	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7fc faea 	bl	800b130 <udp_input>
        break;
 800eb5c:	e026      	b.n	800ebac <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f7f8 fb2f 	bl	80071c4 <tcp_input>
        break;
 800eb66:	e021      	b.n	800ebac <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff fcd0 	bl	800e510 <icmp_input>
        break;
 800eb70:	e01c      	b.n	800ebac <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eb72:	4b1a      	ldr	r3, [pc, #104]	; (800ebdc <ip4_input+0x27c>)
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	69b9      	ldr	r1, [r7, #24]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 f90b 	bl	800ed94 <ip4_addr_isbroadcast_u32>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d10f      	bne.n	800eba4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eb84:	4b15      	ldr	r3, [pc, #84]	; (800ebdc <ip4_input+0x27c>)
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eb8c:	2be0      	cmp	r3, #224	; 0xe0
 800eb8e:	d009      	beq.n	800eba4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800eb90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7f6 fcc9 	bl	800552e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eb9c:	2102      	movs	r1, #2
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7ff fdba 	bl	800e718 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7f6 fcd5 	bl	8005554 <pbuf_free>
        break;
 800ebaa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ebac:	4b0b      	ldr	r3, [pc, #44]	; (800ebdc <ip4_input+0x27c>)
 800ebae:	2200      	movs	r2, #0
 800ebb0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ebb2:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <ip4_input+0x27c>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ebb8:	4b08      	ldr	r3, [pc, #32]	; (800ebdc <ip4_input+0x27c>)
 800ebba:	2200      	movs	r2, #0
 800ebbc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ebbe:	4b07      	ldr	r3, [pc, #28]	; (800ebdc <ip4_input+0x27c>)
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ebc4:	4b05      	ldr	r3, [pc, #20]	; (800ebdc <ip4_input+0x27c>)
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ebca:	4b04      	ldr	r3, [pc, #16]	; (800ebdc <ip4_input+0x27c>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3720      	adds	r7, #32
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	200033e8 	.word	0x200033e8
 800ebe0:	2000693c 	.word	0x2000693c

0800ebe4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08a      	sub	sp, #40	; 0x28
 800ebe8:	af04      	add	r7, sp, #16
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	60b9      	str	r1, [r7, #8]
 800ebee:	607a      	str	r2, [r7, #4]
 800ebf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d009      	beq.n	800ec10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d003      	beq.n	800ec0a <ip4_output_if+0x26>
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d102      	bne.n	800ec10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ec10:	78fa      	ldrb	r2, [r7, #3]
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	9302      	str	r3, [sp, #8]
 800ec16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec1a:	9301      	str	r3, [sp, #4]
 800ec1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	4613      	mov	r3, r2
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	6979      	ldr	r1, [r7, #20]
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f000 f805 	bl	800ec38 <ip4_output_if_src>
 800ec2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3718      	adds	r7, #24
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b088      	sub	sp, #32
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	60b9      	str	r1, [r7, #8]
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	7b9b      	ldrb	r3, [r3, #14]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d006      	beq.n	800ec5c <ip4_output_if_src+0x24>
 800ec4e:	4b4b      	ldr	r3, [pc, #300]	; (800ed7c <ip4_output_if_src+0x144>)
 800ec50:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ec54:	494a      	ldr	r1, [pc, #296]	; (800ed80 <ip4_output_if_src+0x148>)
 800ec56:	484b      	ldr	r0, [pc, #300]	; (800ed84 <ip4_output_if_src+0x14c>)
 800ec58:	f001 f834 	bl	800fcc4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d060      	beq.n	800ed24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ec62:	2314      	movs	r3, #20
 800ec64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ec66:	2114      	movs	r1, #20
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f7f6 fbdd 	bl	8005428 <pbuf_add_header>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d002      	beq.n	800ec7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ec74:	f06f 0301 	mvn.w	r3, #1
 800ec78:	e07c      	b.n	800ed74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	895b      	ldrh	r3, [r3, #10]
 800ec84:	2b13      	cmp	r3, #19
 800ec86:	d806      	bhi.n	800ec96 <ip4_output_if_src+0x5e>
 800ec88:	4b3c      	ldr	r3, [pc, #240]	; (800ed7c <ip4_output_if_src+0x144>)
 800ec8a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ec8e:	493e      	ldr	r1, [pc, #248]	; (800ed88 <ip4_output_if_src+0x150>)
 800ec90:	483c      	ldr	r0, [pc, #240]	; (800ed84 <ip4_output_if_src+0x14c>)
 800ec92:	f001 f817 	bl	800fcc4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	78fa      	ldrb	r2, [r7, #3]
 800ec9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eca2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ecac:	8b7b      	ldrh	r3, [r7, #26]
 800ecae:	089b      	lsrs	r3, r3, #2
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecb8:	b2da      	uxtb	r2, r3
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ecc4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	891b      	ldrh	r3, [r3, #8]
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7f5 f91e 	bl	8003f0c <lwip_htons>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	719a      	strb	r2, [r3, #6]
 800ecde:	2200      	movs	r2, #0
 800ece0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ece2:	4b2a      	ldr	r3, [pc, #168]	; (800ed8c <ip4_output_if_src+0x154>)
 800ece4:	881b      	ldrh	r3, [r3, #0]
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7f5 f910 	bl	8003f0c <lwip_htons>
 800ecec:	4603      	mov	r3, r0
 800ecee:	461a      	mov	r2, r3
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ecf4:	4b25      	ldr	r3, [pc, #148]	; (800ed8c <ip4_output_if_src+0x154>)
 800ecf6:	881b      	ldrh	r3, [r3, #0]
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	4b23      	ldr	r3, [pc, #140]	; (800ed8c <ip4_output_if_src+0x154>)
 800ecfe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d104      	bne.n	800ed10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ed06:	4b22      	ldr	r3, [pc, #136]	; (800ed90 <ip4_output_if_src+0x158>)
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	60da      	str	r2, [r3, #12]
 800ed0e:	e003      	b.n	800ed18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	69fb      	ldr	r3, [r7, #28]
 800ed16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	729a      	strb	r2, [r3, #10]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	72da      	strb	r2, [r3, #11]
 800ed22:	e00f      	b.n	800ed44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	895b      	ldrh	r3, [r3, #10]
 800ed28:	2b13      	cmp	r3, #19
 800ed2a:	d802      	bhi.n	800ed32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ed2c:	f06f 0301 	mvn.w	r3, #1
 800ed30:	e020      	b.n	800ed74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ed3e:	f107 0314 	add.w	r3, r7, #20
 800ed42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ed44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00c      	beq.n	800ed66 <ip4_output_if_src+0x12e>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	891a      	ldrh	r2, [r3, #8]
 800ed50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d906      	bls.n	800ed66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f000 fd4d 	bl	800f7fc <ip4_frag>
 800ed62:	4603      	mov	r3, r0
 800ed64:	e006      	b.n	800ed74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	687a      	ldr	r2, [r7, #4]
 800ed6c:	68f9      	ldr	r1, [r7, #12]
 800ed6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed70:	4798      	blx	r3
 800ed72:	4603      	mov	r3, r0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3720      	adds	r7, #32
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	0801373c 	.word	0x0801373c
 800ed80:	08013770 	.word	0x08013770
 800ed84:	0801377c 	.word	0x0801377c
 800ed88:	080137a4 	.word	0x080137a4
 800ed8c:	20000216 	.word	0x20000216
 800ed90:	08013b80 	.word	0x08013b80

0800ed94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda8:	d002      	beq.n	800edb0 <ip4_addr_isbroadcast_u32+0x1c>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d101      	bne.n	800edb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800edb0:	2301      	movs	r3, #1
 800edb2:	e02a      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800edba:	f003 0302 	and.w	r3, r3, #2
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	e021      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	3304      	adds	r3, #4
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d101      	bne.n	800edd6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800edd2:	2300      	movs	r3, #0
 800edd4:	e019      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	3304      	adds	r3, #4
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	405a      	eors	r2, r3
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	3308      	adds	r3, #8
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4013      	ands	r3, r2
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10d      	bne.n	800ee08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	3308      	adds	r3, #8
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	43da      	mvns	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	3308      	adds	r3, #8
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d101      	bne.n	800ee08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e000      	b.n	800ee0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ee08:	2300      	movs	r3, #0
  }
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3714      	adds	r7, #20
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
	...

0800ee18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ee22:	4b12      	ldr	r3, [pc, #72]	; (800ee6c <ip_reass_tmr+0x54>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ee28:	e018      	b.n	800ee5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	7fdb      	ldrb	r3, [r3, #31]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00b      	beq.n	800ee4a <ip_reass_tmr+0x32>
      r->timer--;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	7fdb      	ldrb	r3, [r3, #31]
 800ee36:	3b01      	subs	r3, #1
 800ee38:	b2da      	uxtb	r2, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60fb      	str	r3, [r7, #12]
 800ee48:	e008      	b.n	800ee5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ee54:	68b9      	ldr	r1, [r7, #8]
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f80a 	bl	800ee70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1e3      	bne.n	800ee2a <ip_reass_tmr+0x12>
    }
  }
}
 800ee62:	bf00      	nop
 800ee64:	bf00      	nop
 800ee66:	3710      	adds	r7, #16
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	20000218 	.word	0x20000218

0800ee70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b088      	sub	sp, #32
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d105      	bne.n	800ee92 <ip_reass_free_complete_datagram+0x22>
 800ee86:	4b45      	ldr	r3, [pc, #276]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800ee88:	22ab      	movs	r2, #171	; 0xab
 800ee8a:	4945      	ldr	r1, [pc, #276]	; (800efa0 <ip_reass_free_complete_datagram+0x130>)
 800ee8c:	4845      	ldr	r0, [pc, #276]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ee8e:	f000 ff19 	bl	800fcc4 <iprintf>
  if (prev != NULL) {
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00a      	beq.n	800eeae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d005      	beq.n	800eeae <ip_reass_free_complete_datagram+0x3e>
 800eea2:	4b3e      	ldr	r3, [pc, #248]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800eea4:	22ad      	movs	r2, #173	; 0xad
 800eea6:	4940      	ldr	r1, [pc, #256]	; (800efa8 <ip_reass_free_complete_datagram+0x138>)
 800eea8:	483e      	ldr	r0, [pc, #248]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800eeaa:	f000 ff0b 	bl	800fcc4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	889b      	ldrh	r3, [r3, #4]
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d12a      	bne.n	800ef16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	6858      	ldr	r0, [r3, #4]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	3308      	adds	r3, #8
 800eed6:	2214      	movs	r2, #20
 800eed8:	4619      	mov	r1, r3
 800eeda:	f000 fedd 	bl	800fc98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800eede:	2101      	movs	r1, #1
 800eee0:	69b8      	ldr	r0, [r7, #24]
 800eee2:	f7ff fc29 	bl	800e738 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800eee6:	69b8      	ldr	r0, [r7, #24]
 800eee8:	f7f6 fbbc 	bl	8005664 <pbuf_clen>
 800eeec:	4603      	mov	r3, r0
 800eeee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eef0:	8bfa      	ldrh	r2, [r7, #30]
 800eef2:	8a7b      	ldrh	r3, [r7, #18]
 800eef4:	4413      	add	r3, r2
 800eef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eefa:	db05      	blt.n	800ef08 <ip_reass_free_complete_datagram+0x98>
 800eefc:	4b27      	ldr	r3, [pc, #156]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800eefe:	22bc      	movs	r2, #188	; 0xbc
 800ef00:	492a      	ldr	r1, [pc, #168]	; (800efac <ip_reass_free_complete_datagram+0x13c>)
 800ef02:	4828      	ldr	r0, [pc, #160]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ef04:	f000 fede 	bl	800fcc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ef08:	8bfa      	ldrh	r2, [r7, #30]
 800ef0a:	8a7b      	ldrh	r3, [r7, #18]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ef10:	69b8      	ldr	r0, [r7, #24]
 800ef12:	f7f6 fb1f 	bl	8005554 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ef1c:	e01f      	b.n	800ef5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ef2e:	68f8      	ldr	r0, [r7, #12]
 800ef30:	f7f6 fb98 	bl	8005664 <pbuf_clen>
 800ef34:	4603      	mov	r3, r0
 800ef36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ef38:	8bfa      	ldrh	r2, [r7, #30]
 800ef3a:	8a7b      	ldrh	r3, [r7, #18]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef42:	db05      	blt.n	800ef50 <ip_reass_free_complete_datagram+0xe0>
 800ef44:	4b15      	ldr	r3, [pc, #84]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800ef46:	22cc      	movs	r2, #204	; 0xcc
 800ef48:	4918      	ldr	r1, [pc, #96]	; (800efac <ip_reass_free_complete_datagram+0x13c>)
 800ef4a:	4816      	ldr	r0, [pc, #88]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ef4c:	f000 feba 	bl	800fcc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ef50:	8bfa      	ldrh	r2, [r7, #30]
 800ef52:	8a7b      	ldrh	r3, [r7, #18]
 800ef54:	4413      	add	r3, r2
 800ef56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7f6 fafb 	bl	8005554 <pbuf_free>
  while (p != NULL) {
 800ef5e:	69bb      	ldr	r3, [r7, #24]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1dc      	bne.n	800ef1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ef64:	6839      	ldr	r1, [r7, #0]
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f8c2 	bl	800f0f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ef6c:	4b10      	ldr	r3, [pc, #64]	; (800efb0 <ip_reass_free_complete_datagram+0x140>)
 800ef6e:	881b      	ldrh	r3, [r3, #0]
 800ef70:	8bfa      	ldrh	r2, [r7, #30]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d905      	bls.n	800ef82 <ip_reass_free_complete_datagram+0x112>
 800ef76:	4b09      	ldr	r3, [pc, #36]	; (800ef9c <ip_reass_free_complete_datagram+0x12c>)
 800ef78:	22d2      	movs	r2, #210	; 0xd2
 800ef7a:	490e      	ldr	r1, [pc, #56]	; (800efb4 <ip_reass_free_complete_datagram+0x144>)
 800ef7c:	4809      	ldr	r0, [pc, #36]	; (800efa4 <ip_reass_free_complete_datagram+0x134>)
 800ef7e:	f000 fea1 	bl	800fcc4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ef82:	4b0b      	ldr	r3, [pc, #44]	; (800efb0 <ip_reass_free_complete_datagram+0x140>)
 800ef84:	881a      	ldrh	r2, [r3, #0]
 800ef86:	8bfb      	ldrh	r3, [r7, #30]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	4b08      	ldr	r3, [pc, #32]	; (800efb0 <ip_reass_free_complete_datagram+0x140>)
 800ef8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ef90:	8bfb      	ldrh	r3, [r7, #30]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3720      	adds	r7, #32
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	080137d4 	.word	0x080137d4
 800efa0:	08013810 	.word	0x08013810
 800efa4:	0801381c 	.word	0x0801381c
 800efa8:	08013844 	.word	0x08013844
 800efac:	08013858 	.word	0x08013858
 800efb0:	2000021c 	.word	0x2000021c
 800efb4:	08013878 	.word	0x08013878

0800efb8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b08a      	sub	sp, #40	; 0x28
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800efc2:	2300      	movs	r3, #0
 800efc4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800efca:	2300      	movs	r3, #0
 800efcc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800efce:	2300      	movs	r3, #0
 800efd0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800efd2:	2300      	movs	r3, #0
 800efd4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800efd6:	4b28      	ldr	r3, [pc, #160]	; (800f078 <ip_reass_remove_oldest_datagram+0xc0>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800efdc:	e030      	b.n	800f040 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	695a      	ldr	r2, [r3, #20]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d10c      	bne.n	800f004 <ip_reass_remove_oldest_datagram+0x4c>
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	699a      	ldr	r2, [r3, #24]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	691b      	ldr	r3, [r3, #16]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d106      	bne.n	800f004 <ip_reass_remove_oldest_datagram+0x4c>
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	899a      	ldrh	r2, [r3, #12]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	889b      	ldrh	r3, [r3, #4]
 800effe:	b29b      	uxth	r3, r3
 800f000:	429a      	cmp	r2, r3
 800f002:	d014      	beq.n	800f02e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	3301      	adds	r3, #1
 800f008:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f00a:	6a3b      	ldr	r3, [r7, #32]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d104      	bne.n	800f01a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	61bb      	str	r3, [r7, #24]
 800f018:	e009      	b.n	800f02e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	7fda      	ldrb	r2, [r3, #31]
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	7fdb      	ldrb	r3, [r3, #31]
 800f022:	429a      	cmp	r2, r3
 800f024:	d803      	bhi.n	800f02e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d001      	beq.n	800f03a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f038:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1cb      	bne.n	800efde <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d008      	beq.n	800f05e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f04c:	69b9      	ldr	r1, [r7, #24]
 800f04e:	6a38      	ldr	r0, [r7, #32]
 800f050:	f7ff ff0e 	bl	800ee70 <ip_reass_free_complete_datagram>
 800f054:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	4413      	add	r3, r2
 800f05c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f05e:	697a      	ldr	r2, [r7, #20]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	da02      	bge.n	800f06c <ip_reass_remove_oldest_datagram+0xb4>
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	2b01      	cmp	r3, #1
 800f06a:	dcac      	bgt.n	800efc6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f06c:	697b      	ldr	r3, [r7, #20]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3728      	adds	r7, #40	; 0x28
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	20000218 	.word	0x20000218

0800f07c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f086:	2004      	movs	r0, #4
 800f088:	f7f5 fb96 	bl	80047b8 <memp_malloc>
 800f08c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d110      	bne.n	800f0b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f094:	6839      	ldr	r1, [r7, #0]
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff ff8e 	bl	800efb8 <ip_reass_remove_oldest_datagram>
 800f09c:	4602      	mov	r2, r0
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	dc03      	bgt.n	800f0ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f0a4:	2004      	movs	r0, #4
 800f0a6:	f7f5 fb87 	bl	80047b8 <memp_malloc>
 800f0aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	e016      	b.n	800f0e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f0b6:	2220      	movs	r2, #32
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	68f8      	ldr	r0, [r7, #12]
 800f0bc:	f000 fdfa 	bl	800fcb4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	220f      	movs	r2, #15
 800f0c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f0c6:	4b09      	ldr	r3, [pc, #36]	; (800f0ec <ip_reass_enqueue_new_datagram+0x70>)
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f0ce:	4a07      	ldr	r2, [pc, #28]	; (800f0ec <ip_reass_enqueue_new_datagram+0x70>)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	3308      	adds	r3, #8
 800f0d8:	2214      	movs	r2, #20
 800f0da:	6879      	ldr	r1, [r7, #4]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f000 fddb 	bl	800fc98 <memcpy>
  return ipr;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	20000218 	.word	0x20000218

0800f0f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f0fa:	4b10      	ldr	r3, [pc, #64]	; (800f13c <ip_reass_dequeue_datagram+0x4c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	687a      	ldr	r2, [r7, #4]
 800f100:	429a      	cmp	r2, r3
 800f102:	d104      	bne.n	800f10e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a0c      	ldr	r2, [pc, #48]	; (800f13c <ip_reass_dequeue_datagram+0x4c>)
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	e00d      	b.n	800f12a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d106      	bne.n	800f122 <ip_reass_dequeue_datagram+0x32>
 800f114:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <ip_reass_dequeue_datagram+0x50>)
 800f116:	f240 1245 	movw	r2, #325	; 0x145
 800f11a:	490a      	ldr	r1, [pc, #40]	; (800f144 <ip_reass_dequeue_datagram+0x54>)
 800f11c:	480a      	ldr	r0, [pc, #40]	; (800f148 <ip_reass_dequeue_datagram+0x58>)
 800f11e:	f000 fdd1 	bl	800fcc4 <iprintf>
    prev->next = ipr->next;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f12a:	6879      	ldr	r1, [r7, #4]
 800f12c:	2004      	movs	r0, #4
 800f12e:	f7f5 fb8f 	bl	8004850 <memp_free>
}
 800f132:	bf00      	nop
 800f134:	3708      	adds	r7, #8
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	20000218 	.word	0x20000218
 800f140:	080137d4 	.word	0x080137d4
 800f144:	0801389c 	.word	0x0801389c
 800f148:	0801381c 	.word	0x0801381c

0800f14c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08c      	sub	sp, #48	; 0x30
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f158:	2300      	movs	r3, #0
 800f15a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f15c:	2301      	movs	r3, #1
 800f15e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	885b      	ldrh	r3, [r3, #2]
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7f4 fecd 	bl	8003f0c <lwip_htons>
 800f172:	4603      	mov	r3, r0
 800f174:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	f003 030f 	and.w	r3, r3, #15
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f184:	7e7b      	ldrb	r3, [r7, #25]
 800f186:	b29b      	uxth	r3, r3
 800f188:	8b7a      	ldrh	r2, [r7, #26]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d202      	bcs.n	800f194 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f18e:	f04f 33ff 	mov.w	r3, #4294967295
 800f192:	e135      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f194:	7e7b      	ldrb	r3, [r7, #25]
 800f196:	b29b      	uxth	r3, r3
 800f198:	8b7a      	ldrh	r2, [r7, #26]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	88db      	ldrh	r3, [r3, #6]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7f4 feb1 	bl	8003f0c <lwip_htons>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	00db      	lsls	r3, r3, #3
 800f1b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	2200      	movs	r2, #0
 800f1c0:	701a      	strb	r2, [r3, #0]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	705a      	strb	r2, [r3, #1]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	709a      	strb	r2, [r3, #2]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d0:	8afa      	ldrh	r2, [r7, #22]
 800f1d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f1d4:	8afa      	ldrh	r2, [r7, #22]
 800f1d6:	8b7b      	ldrh	r3, [r7, #26]
 800f1d8:	4413      	add	r3, r2
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e2:	88db      	ldrh	r3, [r3, #6]
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	8afa      	ldrh	r2, [r7, #22]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d902      	bls.n	800f1f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f0:	e106      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f1f8:	e068      	b.n	800f2cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	685b      	ldr	r3, [r3, #4]
 800f1fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	889b      	ldrh	r3, [r3, #4]
 800f204:	b29a      	uxth	r2, r3
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	889b      	ldrh	r3, [r3, #4]
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d235      	bcs.n	800f27c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f214:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d020      	beq.n	800f25e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	889b      	ldrh	r3, [r3, #4]
 800f220:	b29a      	uxth	r2, r3
 800f222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f224:	88db      	ldrh	r3, [r3, #6]
 800f226:	b29b      	uxth	r3, r3
 800f228:	429a      	cmp	r2, r3
 800f22a:	d307      	bcc.n	800f23c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22e:	88db      	ldrh	r3, [r3, #6]
 800f230:	b29a      	uxth	r2, r3
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	889b      	ldrh	r3, [r3, #4]
 800f236:	b29b      	uxth	r3, r3
 800f238:	429a      	cmp	r2, r3
 800f23a:	d902      	bls.n	800f242 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f23c:	f04f 33ff 	mov.w	r3, #4294967295
 800f240:	e0de      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24a:	88db      	ldrh	r3, [r3, #6]
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f250:	889b      	ldrh	r3, [r3, #4]
 800f252:	b29b      	uxth	r3, r3
 800f254:	429a      	cmp	r2, r3
 800f256:	d03d      	beq.n	800f2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f25c:	e03a      	b.n	800f2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	88db      	ldrh	r3, [r3, #6]
 800f262:	b29a      	uxth	r2, r3
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	889b      	ldrh	r3, [r3, #4]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d902      	bls.n	800f274 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f26e:	f04f 33ff 	mov.w	r3, #4294967295
 800f272:	e0c5      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	68ba      	ldr	r2, [r7, #8]
 800f278:	605a      	str	r2, [r3, #4]
      break;
 800f27a:	e02b      	b.n	800f2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27e:	889b      	ldrh	r3, [r3, #4]
 800f280:	b29a      	uxth	r2, r3
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	889b      	ldrh	r3, [r3, #4]
 800f286:	b29b      	uxth	r3, r3
 800f288:	429a      	cmp	r2, r3
 800f28a:	d102      	bne.n	800f292 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295
 800f290:	e0b6      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	889b      	ldrh	r3, [r3, #4]
 800f296:	b29a      	uxth	r2, r3
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	88db      	ldrh	r3, [r3, #6]
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d202      	bcs.n	800f2a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a6:	e0ab      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d009      	beq.n	800f2c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b0:	88db      	ldrh	r3, [r3, #6]
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	889b      	ldrh	r3, [r3, #4]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d001      	beq.n	800f2c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d193      	bne.n	800f1fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f2d2:	e000      	b.n	800f2d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f2d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d12d      	bne.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d01c      	beq.n	800f31c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e4:	88db      	ldrh	r3, [r3, #6]
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ea:	889b      	ldrh	r3, [r3, #4]
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d906      	bls.n	800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f2f2:	4b45      	ldr	r3, [pc, #276]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f2f8:	4944      	ldr	r1, [pc, #272]	; (800f40c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f2fa:	4845      	ldr	r0, [pc, #276]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2fc:	f000 fce2 	bl	800fcc4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f308:	88db      	ldrh	r3, [r3, #6]
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30e:	889b      	ldrh	r3, [r3, #4]
 800f310:	b29b      	uxth	r3, r3
 800f312:	429a      	cmp	r2, r3
 800f314:	d010      	beq.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f316:	2300      	movs	r3, #0
 800f318:	623b      	str	r3, [r7, #32]
 800f31a:	e00d      	b.n	800f338 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d006      	beq.n	800f332 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f324:	4b38      	ldr	r3, [pc, #224]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f326:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f32a:	493a      	ldr	r1, [pc, #232]	; (800f414 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f32c:	4838      	ldr	r0, [pc, #224]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f32e:	f000 fcc9 	bl	800fcc4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	7f9b      	ldrb	r3, [r3, #30]
 800f342:	f003 0301 	and.w	r3, r3, #1
 800f346:	2b00      	cmp	r3, #0
 800f348:	d059      	beq.n	800f3fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f34a:	6a3b      	ldr	r3, [r7, #32]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d04f      	beq.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d006      	beq.n	800f366 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	889b      	ldrh	r3, [r3, #4]
 800f360:	b29b      	uxth	r3, r3
 800f362:	2b00      	cmp	r3, #0
 800f364:	d002      	beq.n	800f36c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	623b      	str	r3, [r7, #32]
 800f36a:	e041      	b.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f376:	e012      	b.n	800f39e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37a:	685b      	ldr	r3, [r3, #4]
 800f37c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	88db      	ldrh	r3, [r3, #6]
 800f382:	b29a      	uxth	r2, r3
 800f384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f386:	889b      	ldrh	r3, [r3, #4]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d002      	beq.n	800f394 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f38e:	2300      	movs	r3, #0
 800f390:	623b      	str	r3, [r7, #32]
            break;
 800f392:	e007      	b.n	800f3a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1e9      	bne.n	800f378 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f3a4:	6a3b      	ldr	r3, [r7, #32]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d022      	beq.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d106      	bne.n	800f3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f3b2:	4b15      	ldr	r3, [pc, #84]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3b4:	f240 12df 	movw	r2, #479	; 0x1df
 800f3b8:	4917      	ldr	r1, [pc, #92]	; (800f418 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f3ba:	4815      	ldr	r0, [pc, #84]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3bc:	f000 fc82 	bl	800fcc4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d106      	bne.n	800f3da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f3cc:	4b0e      	ldr	r3, [pc, #56]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f3d2:	4911      	ldr	r1, [pc, #68]	; (800f418 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f3d4:	480e      	ldr	r0, [pc, #56]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3d6:	f000 fc75 	bl	800fcc4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d006      	beq.n	800f3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f3e2:	4b09      	ldr	r3, [pc, #36]	; (800f408 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f3e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f3e8:	490c      	ldr	r1, [pc, #48]	; (800f41c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f3ea:	4809      	ldr	r0, [pc, #36]	; (800f410 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f3ec:	f000 fc6a 	bl	800fcc4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f3f0:	6a3b      	ldr	r3, [r7, #32]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	bf14      	ite	ne
 800f3f6:	2301      	movne	r3, #1
 800f3f8:	2300      	moveq	r3, #0
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	e000      	b.n	800f400 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3730      	adds	r7, #48	; 0x30
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	080137d4 	.word	0x080137d4
 800f40c:	080138b8 	.word	0x080138b8
 800f410:	0801381c 	.word	0x0801381c
 800f414:	080138d8 	.word	0x080138d8
 800f418:	08013910 	.word	0x08013910
 800f41c:	08013920 	.word	0x08013920

0800f420 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b08e      	sub	sp, #56	; 0x38
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	f003 030f 	and.w	r3, r3, #15
 800f436:	b2db      	uxtb	r3, r3
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b14      	cmp	r3, #20
 800f43e:	f040 8167 	bne.w	800f710 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f444:	88db      	ldrh	r3, [r3, #6]
 800f446:	b29b      	uxth	r3, r3
 800f448:	4618      	mov	r0, r3
 800f44a:	f7f4 fd5f 	bl	8003f0c <lwip_htons>
 800f44e:	4603      	mov	r3, r0
 800f450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f454:	b29b      	uxth	r3, r3
 800f456:	00db      	lsls	r3, r3, #3
 800f458:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	885b      	ldrh	r3, [r3, #2]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	4618      	mov	r0, r3
 800f462:	f7f4 fd53 	bl	8003f0c <lwip_htons>
 800f466:	4603      	mov	r3, r0
 800f468:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	f003 030f 	and.w	r3, r3, #15
 800f472:	b2db      	uxtb	r3, r3
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f47a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f47e:	b29b      	uxth	r3, r3
 800f480:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f482:	429a      	cmp	r2, r3
 800f484:	f0c0 8146 	bcc.w	800f714 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f488:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7f6 f8e5 	bl	8005664 <pbuf_clen>
 800f49a:	4603      	mov	r3, r0
 800f49c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f49e:	4b9f      	ldr	r3, [pc, #636]	; (800f71c <ip4_reass+0x2fc>)
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	8c3b      	ldrh	r3, [r7, #32]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	2b0a      	cmp	r3, #10
 800f4aa:	dd10      	ble.n	800f4ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f4ac:	8c3b      	ldrh	r3, [r7, #32]
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b2:	f7ff fd81 	bl	800efb8 <ip_reass_remove_oldest_datagram>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 812d 	beq.w	800f718 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f4be:	4b97      	ldr	r3, [pc, #604]	; (800f71c <ip4_reass+0x2fc>)
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	8c3b      	ldrh	r3, [r7, #32]
 800f4c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f4c8:	2b0a      	cmp	r3, #10
 800f4ca:	f300 8125 	bgt.w	800f718 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f4ce:	4b94      	ldr	r3, [pc, #592]	; (800f720 <ip4_reass+0x300>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	633b      	str	r3, [r7, #48]	; 0x30
 800f4d4:	e015      	b.n	800f502 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d8:	695a      	ldr	r2, [r3, #20]
 800f4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d10c      	bne.n	800f4fc <ip4_reass+0xdc>
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	699a      	ldr	r2, [r3, #24]
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d106      	bne.n	800f4fc <ip4_reass+0xdc>
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	899a      	ldrh	r2, [r3, #12]
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	889b      	ldrh	r3, [r3, #4]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d006      	beq.n	800f50a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	633b      	str	r3, [r7, #48]	; 0x30
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e6      	bne.n	800f4d6 <ip4_reass+0xb6>
 800f508:	e000      	b.n	800f50c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f50a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d109      	bne.n	800f526 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f512:	8c3b      	ldrh	r3, [r7, #32]
 800f514:	4619      	mov	r1, r3
 800f516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f518:	f7ff fdb0 	bl	800f07c <ip_reass_enqueue_new_datagram>
 800f51c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	2b00      	cmp	r3, #0
 800f522:	d11c      	bne.n	800f55e <ip4_reass+0x13e>
      goto nullreturn;
 800f524:	e109      	b.n	800f73a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	88db      	ldrh	r3, [r3, #6]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f4 fced 	bl	8003f0c <lwip_htons>
 800f532:	4603      	mov	r3, r0
 800f534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d110      	bne.n	800f55e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53e:	89db      	ldrh	r3, [r3, #14]
 800f540:	4618      	mov	r0, r3
 800f542:	f7f4 fce3 	bl	8003f0c <lwip_htons>
 800f546:	4603      	mov	r3, r0
 800f548:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d006      	beq.n	800f55e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f552:	3308      	adds	r3, #8
 800f554:	2214      	movs	r2, #20
 800f556:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 fb9d 	bl	800fc98 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f560:	88db      	ldrh	r3, [r3, #6]
 800f562:	b29b      	uxth	r3, r3
 800f564:	f003 0320 	and.w	r3, r3, #32
 800f568:	2b00      	cmp	r3, #0
 800f56a:	bf0c      	ite	eq
 800f56c:	2301      	moveq	r3, #1
 800f56e:	2300      	movne	r3, #0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00e      	beq.n	800f598 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f57a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f57c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f57e:	4413      	add	r3, r2
 800f580:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f582:	8b7a      	ldrh	r2, [r7, #26]
 800f584:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f586:	429a      	cmp	r2, r3
 800f588:	f0c0 80a0 	bcc.w	800f6cc <ip4_reass+0x2ac>
 800f58c:	8b7b      	ldrh	r3, [r7, #26]
 800f58e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f592:	4293      	cmp	r3, r2
 800f594:	f200 809a 	bhi.w	800f6cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f598:	69fa      	ldr	r2, [r7, #28]
 800f59a:	6879      	ldr	r1, [r7, #4]
 800f59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f59e:	f7ff fdd5 	bl	800f14c <ip_reass_chain_frag_into_datagram_and_validate>
 800f5a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	f000 8091 	beq.w	800f6d0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f5ae:	4b5b      	ldr	r3, [pc, #364]	; (800f71c <ip4_reass+0x2fc>)
 800f5b0:	881a      	ldrh	r2, [r3, #0]
 800f5b2:	8c3b      	ldrh	r3, [r7, #32]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	b29a      	uxth	r2, r3
 800f5b8:	4b58      	ldr	r3, [pc, #352]	; (800f71c <ip4_reass+0x2fc>)
 800f5ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d00d      	beq.n	800f5de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f5c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f5c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5c6:	4413      	add	r3, r2
 800f5c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	8a7a      	ldrh	r2, [r7, #18]
 800f5ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d2:	7f9b      	ldrb	r3, [r3, #30]
 800f5d4:	f043 0301 	orr.w	r3, r3, #1
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d171      	bne.n	800f6c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	8b9b      	ldrh	r3, [r3, #28]
 800f5e8:	3314      	adds	r3, #20
 800f5ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	3308      	adds	r3, #8
 800f602:	2214      	movs	r2, #20
 800f604:	4619      	mov	r1, r3
 800f606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f608:	f000 fb46 	bl	800fc98 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f60c:	8a3b      	ldrh	r3, [r7, #16]
 800f60e:	4618      	mov	r0, r3
 800f610:	f7f4 fc7c 	bl	8003f0c <lwip_htons>
 800f614:	4603      	mov	r3, r0
 800f616:	461a      	mov	r2, r3
 800f618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61e:	2200      	movs	r2, #0
 800f620:	719a      	strb	r2, [r3, #6]
 800f622:	2200      	movs	r2, #0
 800f624:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f628:	2200      	movs	r2, #0
 800f62a:	729a      	strb	r2, [r3, #10]
 800f62c:	2200      	movs	r2, #0
 800f62e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f636:	e00d      	b.n	800f654 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f63e:	2114      	movs	r1, #20
 800f640:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f642:	f7f5 ff01 	bl	8005448 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f646:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7f6 f845 	bl	80056d8 <pbuf_cat>
      r = iprh->next_pbuf;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1ee      	bne.n	800f638 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f65a:	4b31      	ldr	r3, [pc, #196]	; (800f720 <ip4_reass+0x300>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f660:	429a      	cmp	r2, r3
 800f662:	d102      	bne.n	800f66a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f664:	2300      	movs	r3, #0
 800f666:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f668:	e010      	b.n	800f68c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f66a:	4b2d      	ldr	r3, [pc, #180]	; (800f720 <ip4_reass+0x300>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f670:	e007      	b.n	800f682 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f678:	429a      	cmp	r2, r3
 800f67a:	d006      	beq.n	800f68a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f684:	2b00      	cmp	r3, #0
 800f686:	d1f4      	bne.n	800f672 <ip4_reass+0x252>
 800f688:	e000      	b.n	800f68c <ip4_reass+0x26c>
          break;
 800f68a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f68c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f68e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f690:	f7ff fd2e 	bl	800f0f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7f5 ffe5 	bl	8005664 <pbuf_clen>
 800f69a:	4603      	mov	r3, r0
 800f69c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f69e:	4b1f      	ldr	r3, [pc, #124]	; (800f71c <ip4_reass+0x2fc>)
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	8c3a      	ldrh	r2, [r7, #32]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d906      	bls.n	800f6b6 <ip4_reass+0x296>
 800f6a8:	4b1e      	ldr	r3, [pc, #120]	; (800f724 <ip4_reass+0x304>)
 800f6aa:	f240 229b 	movw	r2, #667	; 0x29b
 800f6ae:	491e      	ldr	r1, [pc, #120]	; (800f728 <ip4_reass+0x308>)
 800f6b0:	481e      	ldr	r0, [pc, #120]	; (800f72c <ip4_reass+0x30c>)
 800f6b2:	f000 fb07 	bl	800fcc4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f6b6:	4b19      	ldr	r3, [pc, #100]	; (800f71c <ip4_reass+0x2fc>)
 800f6b8:	881a      	ldrh	r2, [r3, #0]
 800f6ba:	8c3b      	ldrh	r3, [r7, #32]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	4b16      	ldr	r3, [pc, #88]	; (800f71c <ip4_reass+0x2fc>)
 800f6c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	e03c      	b.n	800f742 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	e03a      	b.n	800f742 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800f6cc:	bf00      	nop
 800f6ce:	e000      	b.n	800f6d2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f6d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d106      	bne.n	800f6e6 <ip4_reass+0x2c6>
 800f6d8:	4b12      	ldr	r3, [pc, #72]	; (800f724 <ip4_reass+0x304>)
 800f6da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f6de:	4914      	ldr	r1, [pc, #80]	; (800f730 <ip4_reass+0x310>)
 800f6e0:	4812      	ldr	r0, [pc, #72]	; (800f72c <ip4_reass+0x30c>)
 800f6e2:	f000 faef 	bl	800fcc4 <iprintf>
  if (ipr->p == NULL) {
 800f6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d124      	bne.n	800f738 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	; (800f720 <ip4_reass+0x300>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d006      	beq.n	800f706 <ip4_reass+0x2e6>
 800f6f8:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <ip4_reass+0x304>)
 800f6fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f6fe:	490d      	ldr	r1, [pc, #52]	; (800f734 <ip4_reass+0x314>)
 800f700:	480a      	ldr	r0, [pc, #40]	; (800f72c <ip4_reass+0x30c>)
 800f702:	f000 fadf 	bl	800fcc4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f706:	2100      	movs	r1, #0
 800f708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f70a:	f7ff fcf1 	bl	800f0f0 <ip_reass_dequeue_datagram>
 800f70e:	e014      	b.n	800f73a <ip4_reass+0x31a>
    goto nullreturn;
 800f710:	bf00      	nop
 800f712:	e012      	b.n	800f73a <ip4_reass+0x31a>
    goto nullreturn;
 800f714:	bf00      	nop
 800f716:	e010      	b.n	800f73a <ip4_reass+0x31a>
      goto nullreturn;
 800f718:	bf00      	nop
 800f71a:	e00e      	b.n	800f73a <ip4_reass+0x31a>
 800f71c:	2000021c 	.word	0x2000021c
 800f720:	20000218 	.word	0x20000218
 800f724:	080137d4 	.word	0x080137d4
 800f728:	08013944 	.word	0x08013944
 800f72c:	0801381c 	.word	0x0801381c
 800f730:	08013960 	.word	0x08013960
 800f734:	0801396c 	.word	0x0801396c
  }

nullreturn:
 800f738:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f7f5 ff0a 	bl	8005554 <pbuf_free>
  return NULL;
 800f740:	2300      	movs	r3, #0
}
 800f742:	4618      	mov	r0, r3
 800f744:	3738      	adds	r7, #56	; 0x38
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop

0800f74c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f750:	2005      	movs	r0, #5
 800f752:	f7f5 f831 	bl	80047b8 <memp_malloc>
 800f756:	4603      	mov	r3, r0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b082      	sub	sp, #8
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d106      	bne.n	800f778 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f76a:	4b07      	ldr	r3, [pc, #28]	; (800f788 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f76c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f770:	4906      	ldr	r1, [pc, #24]	; (800f78c <ip_frag_free_pbuf_custom_ref+0x30>)
 800f772:	4807      	ldr	r0, [pc, #28]	; (800f790 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f774:	f000 faa6 	bl	800fcc4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f778:	6879      	ldr	r1, [r7, #4]
 800f77a:	2005      	movs	r0, #5
 800f77c:	f7f5 f868 	bl	8004850 <memp_free>
}
 800f780:	bf00      	nop
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	080137d4 	.word	0x080137d4
 800f78c:	0801398c 	.word	0x0801398c
 800f790:	0801381c 	.word	0x0801381c

0800f794 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <ipfrag_free_pbuf_custom+0x20>
 800f7a6:	4b11      	ldr	r3, [pc, #68]	; (800f7ec <ipfrag_free_pbuf_custom+0x58>)
 800f7a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f7ac:	4910      	ldr	r1, [pc, #64]	; (800f7f0 <ipfrag_free_pbuf_custom+0x5c>)
 800f7ae:	4811      	ldr	r0, [pc, #68]	; (800f7f4 <ipfrag_free_pbuf_custom+0x60>)
 800f7b0:	f000 fa88 	bl	800fcc4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d006      	beq.n	800f7ca <ipfrag_free_pbuf_custom+0x36>
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	; (800f7ec <ipfrag_free_pbuf_custom+0x58>)
 800f7be:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f7c2:	490d      	ldr	r1, [pc, #52]	; (800f7f8 <ipfrag_free_pbuf_custom+0x64>)
 800f7c4:	480b      	ldr	r0, [pc, #44]	; (800f7f4 <ipfrag_free_pbuf_custom+0x60>)
 800f7c6:	f000 fa7d 	bl	800fcc4 <iprintf>
  if (pcr->original != NULL) {
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	695b      	ldr	r3, [r3, #20]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d004      	beq.n	800f7dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7f5 febc 	bl	8005554 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f7dc:	68f8      	ldr	r0, [r7, #12]
 800f7de:	f7ff ffbd 	bl	800f75c <ip_frag_free_pbuf_custom_ref>
}
 800f7e2:	bf00      	nop
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	080137d4 	.word	0x080137d4
 800f7f0:	08013998 	.word	0x08013998
 800f7f4:	0801381c 	.word	0x0801381c
 800f7f8:	080139a4 	.word	0x080139a4

0800f7fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b094      	sub	sp, #80	; 0x50
 800f800:	af02      	add	r7, sp, #8
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f808:	2300      	movs	r3, #0
 800f80a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f812:	3b14      	subs	r3, #20
 800f814:	2b00      	cmp	r3, #0
 800f816:	da00      	bge.n	800f81a <ip4_frag+0x1e>
 800f818:	3307      	adds	r3, #7
 800f81a:	10db      	asrs	r3, r3, #3
 800f81c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f81e:	2314      	movs	r3, #20
 800f820:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	f003 030f 	and.w	r3, r3, #15
 800f834:	b2db      	uxtb	r3, r3
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	2b14      	cmp	r3, #20
 800f83c:	d002      	beq.n	800f844 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f83e:	f06f 0305 	mvn.w	r3, #5
 800f842:	e110      	b.n	800fa66 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	895b      	ldrh	r3, [r3, #10]
 800f848:	2b13      	cmp	r3, #19
 800f84a:	d809      	bhi.n	800f860 <ip4_frag+0x64>
 800f84c:	4b88      	ldr	r3, [pc, #544]	; (800fa70 <ip4_frag+0x274>)
 800f84e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f852:	4988      	ldr	r1, [pc, #544]	; (800fa74 <ip4_frag+0x278>)
 800f854:	4888      	ldr	r0, [pc, #544]	; (800fa78 <ip4_frag+0x27c>)
 800f856:	f000 fa35 	bl	800fcc4 <iprintf>
 800f85a:	f06f 0305 	mvn.w	r3, #5
 800f85e:	e102      	b.n	800fa66 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f862:	88db      	ldrh	r3, [r3, #6]
 800f864:	b29b      	uxth	r3, r3
 800f866:	4618      	mov	r0, r3
 800f868:	f7f4 fb50 	bl	8003f0c <lwip_htons>
 800f86c:	4603      	mov	r3, r0
 800f86e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f870:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f87a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f87c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f880:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	891b      	ldrh	r3, [r3, #8]
 800f886:	3b14      	subs	r3, #20
 800f888:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f88c:	e0e1      	b.n	800fa52 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f88e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f890:	00db      	lsls	r3, r3, #3
 800f892:	b29b      	uxth	r3, r3
 800f894:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f898:	4293      	cmp	r3, r2
 800f89a:	bf28      	it	cs
 800f89c:	4613      	movcs	r3, r2
 800f89e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f8a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f8a4:	2114      	movs	r1, #20
 800f8a6:	200e      	movs	r0, #14
 800f8a8:	f7f5 fb70 	bl	8004f8c <pbuf_alloc>
 800f8ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 80d5 	beq.w	800fa60 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b8:	895b      	ldrh	r3, [r3, #10]
 800f8ba:	2b13      	cmp	r3, #19
 800f8bc:	d806      	bhi.n	800f8cc <ip4_frag+0xd0>
 800f8be:	4b6c      	ldr	r3, [pc, #432]	; (800fa70 <ip4_frag+0x274>)
 800f8c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f8c4:	496d      	ldr	r1, [pc, #436]	; (800fa7c <ip4_frag+0x280>)
 800f8c6:	486c      	ldr	r0, [pc, #432]	; (800fa78 <ip4_frag+0x27c>)
 800f8c8:	f000 f9fc 	bl	800fcc4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	2214      	movs	r2, #20
 800f8d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 f9df 	bl	800fc98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f8e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f8e6:	e064      	b.n	800f9b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	895a      	ldrh	r2, [r3, #10]
 800f8ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	895b      	ldrh	r3, [r3, #10]
 800f8f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d906      	bls.n	800f90a <ip4_frag+0x10e>
 800f8fc:	4b5c      	ldr	r3, [pc, #368]	; (800fa70 <ip4_frag+0x274>)
 800f8fe:	f240 322d 	movw	r2, #813	; 0x32d
 800f902:	495f      	ldr	r1, [pc, #380]	; (800fa80 <ip4_frag+0x284>)
 800f904:	485c      	ldr	r0, [pc, #368]	; (800fa78 <ip4_frag+0x27c>)
 800f906:	f000 f9dd 	bl	800fcc4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f90a:	8bfa      	ldrh	r2, [r7, #30]
 800f90c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f910:	4293      	cmp	r3, r2
 800f912:	bf28      	it	cs
 800f914:	4613      	movcs	r3, r2
 800f916:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f91a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d105      	bne.n	800f92e <ip4_frag+0x132>
        poff = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	60fb      	str	r3, [r7, #12]
        continue;
 800f92c:	e041      	b.n	800f9b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f92e:	f7ff ff0d 	bl	800f74c <ip_frag_alloc_pbuf_custom_ref>
 800f932:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d103      	bne.n	800f942 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f93a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f93c:	f7f5 fe0a 	bl	8005554 <pbuf_free>
        goto memerr;
 800f940:	e08f      	b.n	800fa62 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f942:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f948:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f94a:	4413      	add	r3, r2
 800f94c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f950:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f954:	9201      	str	r2, [sp, #4]
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	4603      	mov	r3, r0
 800f95a:	2241      	movs	r2, #65	; 0x41
 800f95c:	2000      	movs	r0, #0
 800f95e:	f7f5 fc3f 	bl	80051e0 <pbuf_alloced_custom>
 800f962:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f96a:	69b8      	ldr	r0, [r7, #24]
 800f96c:	f7ff fef6 	bl	800f75c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f972:	f7f5 fdef 	bl	8005554 <pbuf_free>
        goto memerr;
 800f976:	e074      	b.n	800fa62 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7f5 fe8b 	bl	8005694 <pbuf_ref>
      pcr->original = p;
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	68fa      	ldr	r2, [r7, #12]
 800f982:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	4a3f      	ldr	r2, [pc, #252]	; (800fa84 <ip4_frag+0x288>)
 800f988:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f98a:	6979      	ldr	r1, [r7, #20]
 800f98c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f98e:	f7f5 fea3 	bl	80056d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f992:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f996:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f99a:	1ad3      	subs	r3, r2, r3
 800f99c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f9a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d004      	beq.n	800f9b2 <ip4_frag+0x1b6>
        poff = 0;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f9b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d196      	bne.n	800f8e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f9ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f9bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f9c0:	4413      	add	r3, r2
 800f9c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9c8:	f1a3 0213 	sub.w	r2, r3, #19
 800f9cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	bfcc      	ite	gt
 800f9d4:	2301      	movgt	r3, #1
 800f9d6:	2300      	movle	r3, #0
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f9dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f9e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d002      	beq.n	800f9f2 <ip4_frag+0x1f6>
 800f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f9f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f9f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f9f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f9fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7f4 fa85 	bl	8003f0c <lwip_htons>
 800fa02:	4603      	mov	r3, r0
 800fa04:	461a      	mov	r2, r3
 800fa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa08:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fa0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa0c:	3314      	adds	r3, #20
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7f4 fa7b 	bl	8003f0c <lwip_htons>
 800fa16:	4603      	mov	r3, r0
 800fa18:	461a      	mov	r2, r3
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fa1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa20:	2200      	movs	r2, #0
 800fa22:	729a      	strb	r2, [r3, #10]
 800fa24:	2200      	movs	r2, #0
 800fa26:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	695b      	ldr	r3, [r3, #20]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa30:	68b8      	ldr	r0, [r7, #8]
 800fa32:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fa34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa36:	f7f5 fd8d 	bl	8005554 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fa3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa40:	1ad3      	subs	r3, r2, r3
 800fa42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fa46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fa4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa4c:	4413      	add	r3, r2
 800fa4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fa52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f47f af19 	bne.w	800f88e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e002      	b.n	800fa66 <ip4_frag+0x26a>
      goto memerr;
 800fa60:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fa62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3748      	adds	r7, #72	; 0x48
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	080137d4 	.word	0x080137d4
 800fa74:	080139b0 	.word	0x080139b0
 800fa78:	0801381c 	.word	0x0801381c
 800fa7c:	080139cc 	.word	0x080139cc
 800fa80:	080139ec 	.word	0x080139ec
 800fa84:	0800f795 	.word	0x0800f795

0800fa88 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fa92:	230e      	movs	r3, #14
 800fa94:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	895b      	ldrh	r3, [r3, #10]
 800fa9a:	2b0e      	cmp	r3, #14
 800fa9c:	d96e      	bls.n	800fb7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	7bdb      	ldrb	r3, [r3, #15]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d106      	bne.n	800fab4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800faac:	3301      	adds	r3, #1
 800faae:	b2da      	uxtb	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	7b1a      	ldrb	r2, [r3, #12]
 800fabe:	7b5b      	ldrb	r3, [r3, #13]
 800fac0:	021b      	lsls	r3, r3, #8
 800fac2:	4313      	orrs	r3, r2
 800fac4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	2b00      	cmp	r3, #0
 800fad0:	d023      	beq.n	800fb1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d10f      	bne.n	800fafa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	785b      	ldrb	r3, [r3, #1]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d11b      	bne.n	800fb1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fae6:	2b5e      	cmp	r3, #94	; 0x5e
 800fae8:	d117      	bne.n	800fb1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	7b5b      	ldrb	r3, [r3, #13]
 800faee:	f043 0310 	orr.w	r3, r3, #16
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	735a      	strb	r2, [r3, #13]
 800faf8:	e00f      	b.n	800fb1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2206      	movs	r2, #6
 800fafe:	4928      	ldr	r1, [pc, #160]	; (800fba0 <ethernet_input+0x118>)
 800fb00:	4618      	mov	r0, r3
 800fb02:	f000 f8bb 	bl	800fc7c <memcmp>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	7b5b      	ldrb	r3, [r3, #13]
 800fb10:	f043 0308 	orr.w	r3, r3, #8
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fb1a:	89fb      	ldrh	r3, [r7, #14]
 800fb1c:	2b08      	cmp	r3, #8
 800fb1e:	d003      	beq.n	800fb28 <ethernet_input+0xa0>
 800fb20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fb24:	d014      	beq.n	800fb50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fb26:	e032      	b.n	800fb8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fb2e:	f003 0308 	and.w	r3, r3, #8
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d024      	beq.n	800fb80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fb36:	8afb      	ldrh	r3, [r7, #22]
 800fb38:	4619      	mov	r1, r3
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7f5 fc84 	bl	8005448 <pbuf_remove_header>
 800fb40:	4603      	mov	r3, r0
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d11e      	bne.n	800fb84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7fe ff09 	bl	800e960 <ip4_input>
      break;
 800fb4e:	e013      	b.n	800fb78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fb56:	f003 0308 	and.w	r3, r3, #8
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d014      	beq.n	800fb88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fb5e:	8afb      	ldrh	r3, [r7, #22]
 800fb60:	4619      	mov	r1, r3
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7f5 fc70 	bl	8005448 <pbuf_remove_header>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d10e      	bne.n	800fb8c <ethernet_input+0x104>
        etharp_input(p, netif);
 800fb6e:	6839      	ldr	r1, [r7, #0]
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f7fe f8a5 	bl	800dcc0 <etharp_input>
      break;
 800fb76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	e00c      	b.n	800fb96 <ethernet_input+0x10e>
    goto free_and_return;
 800fb7c:	bf00      	nop
 800fb7e:	e006      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb80:	bf00      	nop
 800fb82:	e004      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb84:	bf00      	nop
 800fb86:	e002      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb88:	bf00      	nop
 800fb8a:	e000      	b.n	800fb8e <ethernet_input+0x106>
        goto free_and_return;
 800fb8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7f5 fce0 	bl	8005554 <pbuf_free>
  return ERR_OK;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3718      	adds	r7, #24
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	08013b88 	.word	0x08013b88

0800fba4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b086      	sub	sp, #24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
 800fbb0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fbb2:	8c3b      	ldrh	r3, [r7, #32]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7f4 f9a9 	bl	8003f0c <lwip_htons>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fbbe:	210e      	movs	r1, #14
 800fbc0:	68b8      	ldr	r0, [r7, #8]
 800fbc2:	f7f5 fc31 	bl	8005428 <pbuf_add_header>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d125      	bne.n	800fc18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	8afa      	ldrh	r2, [r7, #22]
 800fbd6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	2206      	movs	r2, #6
 800fbdc:	6839      	ldr	r1, [r7, #0]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 f85a 	bl	800fc98 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	3306      	adds	r3, #6
 800fbe8:	2206      	movs	r2, #6
 800fbea:	6879      	ldr	r1, [r7, #4]
 800fbec:	4618      	mov	r0, r3
 800fbee:	f000 f853 	bl	800fc98 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbf8:	2b06      	cmp	r3, #6
 800fbfa:	d006      	beq.n	800fc0a <ethernet_output+0x66>
 800fbfc:	4b0a      	ldr	r3, [pc, #40]	; (800fc28 <ethernet_output+0x84>)
 800fbfe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fc02:	490a      	ldr	r1, [pc, #40]	; (800fc2c <ethernet_output+0x88>)
 800fc04:	480a      	ldr	r0, [pc, #40]	; (800fc30 <ethernet_output+0x8c>)
 800fc06:	f000 f85d 	bl	800fcc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	699b      	ldr	r3, [r3, #24]
 800fc0e:	68b9      	ldr	r1, [r7, #8]
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	4798      	blx	r3
 800fc14:	4603      	mov	r3, r0
 800fc16:	e002      	b.n	800fc1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fc18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fc1a:	f06f 0301 	mvn.w	r3, #1
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3718      	adds	r7, #24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	080139fc 	.word	0x080139fc
 800fc2c:	08013a34 	.word	0x08013a34
 800fc30:	08013a68 	.word	0x08013a68

0800fc34 <__libc_init_array>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	4d0d      	ldr	r5, [pc, #52]	; (800fc6c <__libc_init_array+0x38>)
 800fc38:	4c0d      	ldr	r4, [pc, #52]	; (800fc70 <__libc_init_array+0x3c>)
 800fc3a:	1b64      	subs	r4, r4, r5
 800fc3c:	10a4      	asrs	r4, r4, #2
 800fc3e:	2600      	movs	r6, #0
 800fc40:	42a6      	cmp	r6, r4
 800fc42:	d109      	bne.n	800fc58 <__libc_init_array+0x24>
 800fc44:	4d0b      	ldr	r5, [pc, #44]	; (800fc74 <__libc_init_array+0x40>)
 800fc46:	4c0c      	ldr	r4, [pc, #48]	; (800fc78 <__libc_init_array+0x44>)
 800fc48:	f001 f856 	bl	8010cf8 <_init>
 800fc4c:	1b64      	subs	r4, r4, r5
 800fc4e:	10a4      	asrs	r4, r4, #2
 800fc50:	2600      	movs	r6, #0
 800fc52:	42a6      	cmp	r6, r4
 800fc54:	d105      	bne.n	800fc62 <__libc_init_array+0x2e>
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc5c:	4798      	blx	r3
 800fc5e:	3601      	adds	r6, #1
 800fc60:	e7ee      	b.n	800fc40 <__libc_init_array+0xc>
 800fc62:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc66:	4798      	blx	r3
 800fc68:	3601      	adds	r6, #1
 800fc6a:	e7f2      	b.n	800fc52 <__libc_init_array+0x1e>
 800fc6c:	08013cec 	.word	0x08013cec
 800fc70:	08013cec 	.word	0x08013cec
 800fc74:	08013cec 	.word	0x08013cec
 800fc78:	08013cf0 	.word	0x08013cf0

0800fc7c <memcmp>:
 800fc7c:	b530      	push	{r4, r5, lr}
 800fc7e:	3901      	subs	r1, #1
 800fc80:	2400      	movs	r4, #0
 800fc82:	42a2      	cmp	r2, r4
 800fc84:	d101      	bne.n	800fc8a <memcmp+0xe>
 800fc86:	2000      	movs	r0, #0
 800fc88:	e005      	b.n	800fc96 <memcmp+0x1a>
 800fc8a:	5d03      	ldrb	r3, [r0, r4]
 800fc8c:	3401      	adds	r4, #1
 800fc8e:	5d0d      	ldrb	r5, [r1, r4]
 800fc90:	42ab      	cmp	r3, r5
 800fc92:	d0f6      	beq.n	800fc82 <memcmp+0x6>
 800fc94:	1b58      	subs	r0, r3, r5
 800fc96:	bd30      	pop	{r4, r5, pc}

0800fc98 <memcpy>:
 800fc98:	440a      	add	r2, r1
 800fc9a:	4291      	cmp	r1, r2
 800fc9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fca0:	d100      	bne.n	800fca4 <memcpy+0xc>
 800fca2:	4770      	bx	lr
 800fca4:	b510      	push	{r4, lr}
 800fca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcae:	4291      	cmp	r1, r2
 800fcb0:	d1f9      	bne.n	800fca6 <memcpy+0xe>
 800fcb2:	bd10      	pop	{r4, pc}

0800fcb4 <memset>:
 800fcb4:	4402      	add	r2, r0
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d100      	bne.n	800fcbe <memset+0xa>
 800fcbc:	4770      	bx	lr
 800fcbe:	f803 1b01 	strb.w	r1, [r3], #1
 800fcc2:	e7f9      	b.n	800fcb8 <memset+0x4>

0800fcc4 <iprintf>:
 800fcc4:	b40f      	push	{r0, r1, r2, r3}
 800fcc6:	4b0a      	ldr	r3, [pc, #40]	; (800fcf0 <iprintf+0x2c>)
 800fcc8:	b513      	push	{r0, r1, r4, lr}
 800fcca:	681c      	ldr	r4, [r3, #0]
 800fccc:	b124      	cbz	r4, 800fcd8 <iprintf+0x14>
 800fcce:	69a3      	ldr	r3, [r4, #24]
 800fcd0:	b913      	cbnz	r3, 800fcd8 <iprintf+0x14>
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f000 f8c4 	bl	800fe60 <__sinit>
 800fcd8:	ab05      	add	r3, sp, #20
 800fcda:	9a04      	ldr	r2, [sp, #16]
 800fcdc:	68a1      	ldr	r1, [r4, #8]
 800fcde:	9301      	str	r3, [sp, #4]
 800fce0:	4620      	mov	r0, r4
 800fce2:	f000 fa4b 	bl	801017c <_vfiprintf_r>
 800fce6:	b002      	add	sp, #8
 800fce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcec:	b004      	add	sp, #16
 800fcee:	4770      	bx	lr
 800fcf0:	20000018 	.word	0x20000018

0800fcf4 <rand>:
 800fcf4:	4b17      	ldr	r3, [pc, #92]	; (800fd54 <rand+0x60>)
 800fcf6:	b510      	push	{r4, lr}
 800fcf8:	681c      	ldr	r4, [r3, #0]
 800fcfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fcfc:	b9b3      	cbnz	r3, 800fd2c <rand+0x38>
 800fcfe:	2018      	movs	r0, #24
 800fd00:	f000 f960 	bl	800ffc4 <malloc>
 800fd04:	63a0      	str	r0, [r4, #56]	; 0x38
 800fd06:	b928      	cbnz	r0, 800fd14 <rand+0x20>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <rand+0x64>)
 800fd0c:	4813      	ldr	r0, [pc, #76]	; (800fd5c <rand+0x68>)
 800fd0e:	214e      	movs	r1, #78	; 0x4e
 800fd10:	f000 f830 	bl	800fd74 <__assert_func>
 800fd14:	4a12      	ldr	r2, [pc, #72]	; (800fd60 <rand+0x6c>)
 800fd16:	4b13      	ldr	r3, [pc, #76]	; (800fd64 <rand+0x70>)
 800fd18:	e9c0 2300 	strd	r2, r3, [r0]
 800fd1c:	4b12      	ldr	r3, [pc, #72]	; (800fd68 <rand+0x74>)
 800fd1e:	6083      	str	r3, [r0, #8]
 800fd20:	230b      	movs	r3, #11
 800fd22:	8183      	strh	r3, [r0, #12]
 800fd24:	2201      	movs	r2, #1
 800fd26:	2300      	movs	r3, #0
 800fd28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fd2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fd2e:	480f      	ldr	r0, [pc, #60]	; (800fd6c <rand+0x78>)
 800fd30:	690a      	ldr	r2, [r1, #16]
 800fd32:	694b      	ldr	r3, [r1, #20]
 800fd34:	4c0e      	ldr	r4, [pc, #56]	; (800fd70 <rand+0x7c>)
 800fd36:	4350      	muls	r0, r2
 800fd38:	fb04 0003 	mla	r0, r4, r3, r0
 800fd3c:	fba2 3404 	umull	r3, r4, r2, r4
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	4404      	add	r4, r0
 800fd44:	f144 0000 	adc.w	r0, r4, #0
 800fd48:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800fd4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fd50:	bd10      	pop	{r4, pc}
 800fd52:	bf00      	nop
 800fd54:	20000018 	.word	0x20000018
 800fd58:	08013b9c 	.word	0x08013b9c
 800fd5c:	08013bb3 	.word	0x08013bb3
 800fd60:	abcd330e 	.word	0xabcd330e
 800fd64:	e66d1234 	.word	0xe66d1234
 800fd68:	0005deec 	.word	0x0005deec
 800fd6c:	5851f42d 	.word	0x5851f42d
 800fd70:	4c957f2d 	.word	0x4c957f2d

0800fd74 <__assert_func>:
 800fd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd76:	4614      	mov	r4, r2
 800fd78:	461a      	mov	r2, r3
 800fd7a:	4b09      	ldr	r3, [pc, #36]	; (800fda0 <__assert_func+0x2c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4605      	mov	r5, r0
 800fd80:	68d8      	ldr	r0, [r3, #12]
 800fd82:	b14c      	cbz	r4, 800fd98 <__assert_func+0x24>
 800fd84:	4b07      	ldr	r3, [pc, #28]	; (800fda4 <__assert_func+0x30>)
 800fd86:	9100      	str	r1, [sp, #0]
 800fd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd8c:	4906      	ldr	r1, [pc, #24]	; (800fda8 <__assert_func+0x34>)
 800fd8e:	462b      	mov	r3, r5
 800fd90:	f000 f8e4 	bl	800ff5c <fiprintf>
 800fd94:	f000 fddc 	bl	8010950 <abort>
 800fd98:	4b04      	ldr	r3, [pc, #16]	; (800fdac <__assert_func+0x38>)
 800fd9a:	461c      	mov	r4, r3
 800fd9c:	e7f3      	b.n	800fd86 <__assert_func+0x12>
 800fd9e:	bf00      	nop
 800fda0:	20000018 	.word	0x20000018
 800fda4:	08013c12 	.word	0x08013c12
 800fda8:	08013c1f 	.word	0x08013c1f
 800fdac:	08013c4d 	.word	0x08013c4d

0800fdb0 <std>:
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	e9c0 3300 	strd	r3, r3, [r0]
 800fdba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdbe:	6083      	str	r3, [r0, #8]
 800fdc0:	8181      	strh	r1, [r0, #12]
 800fdc2:	6643      	str	r3, [r0, #100]	; 0x64
 800fdc4:	81c2      	strh	r2, [r0, #14]
 800fdc6:	6183      	str	r3, [r0, #24]
 800fdc8:	4619      	mov	r1, r3
 800fdca:	2208      	movs	r2, #8
 800fdcc:	305c      	adds	r0, #92	; 0x5c
 800fdce:	f7ff ff71 	bl	800fcb4 <memset>
 800fdd2:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <std+0x38>)
 800fdd4:	6263      	str	r3, [r4, #36]	; 0x24
 800fdd6:	4b05      	ldr	r3, [pc, #20]	; (800fdec <std+0x3c>)
 800fdd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdda:	4b05      	ldr	r3, [pc, #20]	; (800fdf0 <std+0x40>)
 800fddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdde:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <std+0x44>)
 800fde0:	6224      	str	r4, [r4, #32]
 800fde2:	6323      	str	r3, [r4, #48]	; 0x30
 800fde4:	bd10      	pop	{r4, pc}
 800fde6:	bf00      	nop
 800fde8:	08010725 	.word	0x08010725
 800fdec:	08010747 	.word	0x08010747
 800fdf0:	0801077f 	.word	0x0801077f
 800fdf4:	080107a3 	.word	0x080107a3

0800fdf8 <_cleanup_r>:
 800fdf8:	4901      	ldr	r1, [pc, #4]	; (800fe00 <_cleanup_r+0x8>)
 800fdfa:	f000 b8c1 	b.w	800ff80 <_fwalk_reent>
 800fdfe:	bf00      	nop
 800fe00:	08010a8d 	.word	0x08010a8d

0800fe04 <__sfmoreglue>:
 800fe04:	b570      	push	{r4, r5, r6, lr}
 800fe06:	1e4a      	subs	r2, r1, #1
 800fe08:	2568      	movs	r5, #104	; 0x68
 800fe0a:	4355      	muls	r5, r2
 800fe0c:	460e      	mov	r6, r1
 800fe0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe12:	f000 f92f 	bl	8010074 <_malloc_r>
 800fe16:	4604      	mov	r4, r0
 800fe18:	b140      	cbz	r0, 800fe2c <__sfmoreglue+0x28>
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	e9c0 1600 	strd	r1, r6, [r0]
 800fe20:	300c      	adds	r0, #12
 800fe22:	60a0      	str	r0, [r4, #8]
 800fe24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe28:	f7ff ff44 	bl	800fcb4 <memset>
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	bd70      	pop	{r4, r5, r6, pc}

0800fe30 <__sfp_lock_acquire>:
 800fe30:	4801      	ldr	r0, [pc, #4]	; (800fe38 <__sfp_lock_acquire+0x8>)
 800fe32:	f000 b8c5 	b.w	800ffc0 <__retarget_lock_acquire_recursive>
 800fe36:	bf00      	nop
 800fe38:	2000699c 	.word	0x2000699c

0800fe3c <__sfp_lock_release>:
 800fe3c:	4801      	ldr	r0, [pc, #4]	; (800fe44 <__sfp_lock_release+0x8>)
 800fe3e:	f000 b8c0 	b.w	800ffc2 <__retarget_lock_release_recursive>
 800fe42:	bf00      	nop
 800fe44:	2000699c 	.word	0x2000699c

0800fe48 <__sinit_lock_acquire>:
 800fe48:	4801      	ldr	r0, [pc, #4]	; (800fe50 <__sinit_lock_acquire+0x8>)
 800fe4a:	f000 b8b9 	b.w	800ffc0 <__retarget_lock_acquire_recursive>
 800fe4e:	bf00      	nop
 800fe50:	20006997 	.word	0x20006997

0800fe54 <__sinit_lock_release>:
 800fe54:	4801      	ldr	r0, [pc, #4]	; (800fe5c <__sinit_lock_release+0x8>)
 800fe56:	f000 b8b4 	b.w	800ffc2 <__retarget_lock_release_recursive>
 800fe5a:	bf00      	nop
 800fe5c:	20006997 	.word	0x20006997

0800fe60 <__sinit>:
 800fe60:	b510      	push	{r4, lr}
 800fe62:	4604      	mov	r4, r0
 800fe64:	f7ff fff0 	bl	800fe48 <__sinit_lock_acquire>
 800fe68:	69a3      	ldr	r3, [r4, #24]
 800fe6a:	b11b      	cbz	r3, 800fe74 <__sinit+0x14>
 800fe6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe70:	f7ff bff0 	b.w	800fe54 <__sinit_lock_release>
 800fe74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe78:	6523      	str	r3, [r4, #80]	; 0x50
 800fe7a:	4b13      	ldr	r3, [pc, #76]	; (800fec8 <__sinit+0x68>)
 800fe7c:	4a13      	ldr	r2, [pc, #76]	; (800fecc <__sinit+0x6c>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe82:	42a3      	cmp	r3, r4
 800fe84:	bf04      	itt	eq
 800fe86:	2301      	moveq	r3, #1
 800fe88:	61a3      	streq	r3, [r4, #24]
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f000 f820 	bl	800fed0 <__sfp>
 800fe90:	6060      	str	r0, [r4, #4]
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 f81c 	bl	800fed0 <__sfp>
 800fe98:	60a0      	str	r0, [r4, #8]
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f000 f818 	bl	800fed0 <__sfp>
 800fea0:	2200      	movs	r2, #0
 800fea2:	60e0      	str	r0, [r4, #12]
 800fea4:	2104      	movs	r1, #4
 800fea6:	6860      	ldr	r0, [r4, #4]
 800fea8:	f7ff ff82 	bl	800fdb0 <std>
 800feac:	68a0      	ldr	r0, [r4, #8]
 800feae:	2201      	movs	r2, #1
 800feb0:	2109      	movs	r1, #9
 800feb2:	f7ff ff7d 	bl	800fdb0 <std>
 800feb6:	68e0      	ldr	r0, [r4, #12]
 800feb8:	2202      	movs	r2, #2
 800feba:	2112      	movs	r1, #18
 800febc:	f7ff ff78 	bl	800fdb0 <std>
 800fec0:	2301      	movs	r3, #1
 800fec2:	61a3      	str	r3, [r4, #24]
 800fec4:	e7d2      	b.n	800fe6c <__sinit+0xc>
 800fec6:	bf00      	nop
 800fec8:	08013b98 	.word	0x08013b98
 800fecc:	0800fdf9 	.word	0x0800fdf9

0800fed0 <__sfp>:
 800fed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed2:	4607      	mov	r7, r0
 800fed4:	f7ff ffac 	bl	800fe30 <__sfp_lock_acquire>
 800fed8:	4b1e      	ldr	r3, [pc, #120]	; (800ff54 <__sfp+0x84>)
 800feda:	681e      	ldr	r6, [r3, #0]
 800fedc:	69b3      	ldr	r3, [r6, #24]
 800fede:	b913      	cbnz	r3, 800fee6 <__sfp+0x16>
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7ff ffbd 	bl	800fe60 <__sinit>
 800fee6:	3648      	adds	r6, #72	; 0x48
 800fee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800feec:	3b01      	subs	r3, #1
 800feee:	d503      	bpl.n	800fef8 <__sfp+0x28>
 800fef0:	6833      	ldr	r3, [r6, #0]
 800fef2:	b30b      	cbz	r3, 800ff38 <__sfp+0x68>
 800fef4:	6836      	ldr	r6, [r6, #0]
 800fef6:	e7f7      	b.n	800fee8 <__sfp+0x18>
 800fef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fefc:	b9d5      	cbnz	r5, 800ff34 <__sfp+0x64>
 800fefe:	4b16      	ldr	r3, [pc, #88]	; (800ff58 <__sfp+0x88>)
 800ff00:	60e3      	str	r3, [r4, #12]
 800ff02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff06:	6665      	str	r5, [r4, #100]	; 0x64
 800ff08:	f000 f859 	bl	800ffbe <__retarget_lock_init_recursive>
 800ff0c:	f7ff ff96 	bl	800fe3c <__sfp_lock_release>
 800ff10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff18:	6025      	str	r5, [r4, #0]
 800ff1a:	61a5      	str	r5, [r4, #24]
 800ff1c:	2208      	movs	r2, #8
 800ff1e:	4629      	mov	r1, r5
 800ff20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff24:	f7ff fec6 	bl	800fcb4 <memset>
 800ff28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff30:	4620      	mov	r0, r4
 800ff32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff34:	3468      	adds	r4, #104	; 0x68
 800ff36:	e7d9      	b.n	800feec <__sfp+0x1c>
 800ff38:	2104      	movs	r1, #4
 800ff3a:	4638      	mov	r0, r7
 800ff3c:	f7ff ff62 	bl	800fe04 <__sfmoreglue>
 800ff40:	4604      	mov	r4, r0
 800ff42:	6030      	str	r0, [r6, #0]
 800ff44:	2800      	cmp	r0, #0
 800ff46:	d1d5      	bne.n	800fef4 <__sfp+0x24>
 800ff48:	f7ff ff78 	bl	800fe3c <__sfp_lock_release>
 800ff4c:	230c      	movs	r3, #12
 800ff4e:	603b      	str	r3, [r7, #0]
 800ff50:	e7ee      	b.n	800ff30 <__sfp+0x60>
 800ff52:	bf00      	nop
 800ff54:	08013b98 	.word	0x08013b98
 800ff58:	ffff0001 	.word	0xffff0001

0800ff5c <fiprintf>:
 800ff5c:	b40e      	push	{r1, r2, r3}
 800ff5e:	b503      	push	{r0, r1, lr}
 800ff60:	4601      	mov	r1, r0
 800ff62:	ab03      	add	r3, sp, #12
 800ff64:	4805      	ldr	r0, [pc, #20]	; (800ff7c <fiprintf+0x20>)
 800ff66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff6a:	6800      	ldr	r0, [r0, #0]
 800ff6c:	9301      	str	r3, [sp, #4]
 800ff6e:	f000 f905 	bl	801017c <_vfiprintf_r>
 800ff72:	b002      	add	sp, #8
 800ff74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff78:	b003      	add	sp, #12
 800ff7a:	4770      	bx	lr
 800ff7c:	20000018 	.word	0x20000018

0800ff80 <_fwalk_reent>:
 800ff80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff84:	4606      	mov	r6, r0
 800ff86:	4688      	mov	r8, r1
 800ff88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff8c:	2700      	movs	r7, #0
 800ff8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff92:	f1b9 0901 	subs.w	r9, r9, #1
 800ff96:	d505      	bpl.n	800ffa4 <_fwalk_reent+0x24>
 800ff98:	6824      	ldr	r4, [r4, #0]
 800ff9a:	2c00      	cmp	r4, #0
 800ff9c:	d1f7      	bne.n	800ff8e <_fwalk_reent+0xe>
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa4:	89ab      	ldrh	r3, [r5, #12]
 800ffa6:	2b01      	cmp	r3, #1
 800ffa8:	d907      	bls.n	800ffba <_fwalk_reent+0x3a>
 800ffaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	d003      	beq.n	800ffba <_fwalk_reent+0x3a>
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	47c0      	blx	r8
 800ffb8:	4307      	orrs	r7, r0
 800ffba:	3568      	adds	r5, #104	; 0x68
 800ffbc:	e7e9      	b.n	800ff92 <_fwalk_reent+0x12>

0800ffbe <__retarget_lock_init_recursive>:
 800ffbe:	4770      	bx	lr

0800ffc0 <__retarget_lock_acquire_recursive>:
 800ffc0:	4770      	bx	lr

0800ffc2 <__retarget_lock_release_recursive>:
 800ffc2:	4770      	bx	lr

0800ffc4 <malloc>:
 800ffc4:	4b02      	ldr	r3, [pc, #8]	; (800ffd0 <malloc+0xc>)
 800ffc6:	4601      	mov	r1, r0
 800ffc8:	6818      	ldr	r0, [r3, #0]
 800ffca:	f000 b853 	b.w	8010074 <_malloc_r>
 800ffce:	bf00      	nop
 800ffd0:	20000018 	.word	0x20000018

0800ffd4 <_free_r>:
 800ffd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ffd6:	2900      	cmp	r1, #0
 800ffd8:	d048      	beq.n	801006c <_free_r+0x98>
 800ffda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffde:	9001      	str	r0, [sp, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f1a1 0404 	sub.w	r4, r1, #4
 800ffe6:	bfb8      	it	lt
 800ffe8:	18e4      	addlt	r4, r4, r3
 800ffea:	f000 fe01 	bl	8010bf0 <__malloc_lock>
 800ffee:	4a20      	ldr	r2, [pc, #128]	; (8010070 <_free_r+0x9c>)
 800fff0:	9801      	ldr	r0, [sp, #4]
 800fff2:	6813      	ldr	r3, [r2, #0]
 800fff4:	4615      	mov	r5, r2
 800fff6:	b933      	cbnz	r3, 8010006 <_free_r+0x32>
 800fff8:	6063      	str	r3, [r4, #4]
 800fffa:	6014      	str	r4, [r2, #0]
 800fffc:	b003      	add	sp, #12
 800fffe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010002:	f000 bdfb 	b.w	8010bfc <__malloc_unlock>
 8010006:	42a3      	cmp	r3, r4
 8010008:	d90b      	bls.n	8010022 <_free_r+0x4e>
 801000a:	6821      	ldr	r1, [r4, #0]
 801000c:	1862      	adds	r2, r4, r1
 801000e:	4293      	cmp	r3, r2
 8010010:	bf04      	itt	eq
 8010012:	681a      	ldreq	r2, [r3, #0]
 8010014:	685b      	ldreq	r3, [r3, #4]
 8010016:	6063      	str	r3, [r4, #4]
 8010018:	bf04      	itt	eq
 801001a:	1852      	addeq	r2, r2, r1
 801001c:	6022      	streq	r2, [r4, #0]
 801001e:	602c      	str	r4, [r5, #0]
 8010020:	e7ec      	b.n	800fffc <_free_r+0x28>
 8010022:	461a      	mov	r2, r3
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	b10b      	cbz	r3, 801002c <_free_r+0x58>
 8010028:	42a3      	cmp	r3, r4
 801002a:	d9fa      	bls.n	8010022 <_free_r+0x4e>
 801002c:	6811      	ldr	r1, [r2, #0]
 801002e:	1855      	adds	r5, r2, r1
 8010030:	42a5      	cmp	r5, r4
 8010032:	d10b      	bne.n	801004c <_free_r+0x78>
 8010034:	6824      	ldr	r4, [r4, #0]
 8010036:	4421      	add	r1, r4
 8010038:	1854      	adds	r4, r2, r1
 801003a:	42a3      	cmp	r3, r4
 801003c:	6011      	str	r1, [r2, #0]
 801003e:	d1dd      	bne.n	800fffc <_free_r+0x28>
 8010040:	681c      	ldr	r4, [r3, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	6053      	str	r3, [r2, #4]
 8010046:	4421      	add	r1, r4
 8010048:	6011      	str	r1, [r2, #0]
 801004a:	e7d7      	b.n	800fffc <_free_r+0x28>
 801004c:	d902      	bls.n	8010054 <_free_r+0x80>
 801004e:	230c      	movs	r3, #12
 8010050:	6003      	str	r3, [r0, #0]
 8010052:	e7d3      	b.n	800fffc <_free_r+0x28>
 8010054:	6825      	ldr	r5, [r4, #0]
 8010056:	1961      	adds	r1, r4, r5
 8010058:	428b      	cmp	r3, r1
 801005a:	bf04      	itt	eq
 801005c:	6819      	ldreq	r1, [r3, #0]
 801005e:	685b      	ldreq	r3, [r3, #4]
 8010060:	6063      	str	r3, [r4, #4]
 8010062:	bf04      	itt	eq
 8010064:	1949      	addeq	r1, r1, r5
 8010066:	6021      	streq	r1, [r4, #0]
 8010068:	6054      	str	r4, [r2, #4]
 801006a:	e7c7      	b.n	800fffc <_free_r+0x28>
 801006c:	b003      	add	sp, #12
 801006e:	bd30      	pop	{r4, r5, pc}
 8010070:	20000220 	.word	0x20000220

08010074 <_malloc_r>:
 8010074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010076:	1ccd      	adds	r5, r1, #3
 8010078:	f025 0503 	bic.w	r5, r5, #3
 801007c:	3508      	adds	r5, #8
 801007e:	2d0c      	cmp	r5, #12
 8010080:	bf38      	it	cc
 8010082:	250c      	movcc	r5, #12
 8010084:	2d00      	cmp	r5, #0
 8010086:	4606      	mov	r6, r0
 8010088:	db01      	blt.n	801008e <_malloc_r+0x1a>
 801008a:	42a9      	cmp	r1, r5
 801008c:	d903      	bls.n	8010096 <_malloc_r+0x22>
 801008e:	230c      	movs	r3, #12
 8010090:	6033      	str	r3, [r6, #0]
 8010092:	2000      	movs	r0, #0
 8010094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010096:	f000 fdab 	bl	8010bf0 <__malloc_lock>
 801009a:	4921      	ldr	r1, [pc, #132]	; (8010120 <_malloc_r+0xac>)
 801009c:	680a      	ldr	r2, [r1, #0]
 801009e:	4614      	mov	r4, r2
 80100a0:	b99c      	cbnz	r4, 80100ca <_malloc_r+0x56>
 80100a2:	4f20      	ldr	r7, [pc, #128]	; (8010124 <_malloc_r+0xb0>)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	b923      	cbnz	r3, 80100b2 <_malloc_r+0x3e>
 80100a8:	4621      	mov	r1, r4
 80100aa:	4630      	mov	r0, r6
 80100ac:	f000 fb2a 	bl	8010704 <_sbrk_r>
 80100b0:	6038      	str	r0, [r7, #0]
 80100b2:	4629      	mov	r1, r5
 80100b4:	4630      	mov	r0, r6
 80100b6:	f000 fb25 	bl	8010704 <_sbrk_r>
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	d123      	bne.n	8010106 <_malloc_r+0x92>
 80100be:	230c      	movs	r3, #12
 80100c0:	6033      	str	r3, [r6, #0]
 80100c2:	4630      	mov	r0, r6
 80100c4:	f000 fd9a 	bl	8010bfc <__malloc_unlock>
 80100c8:	e7e3      	b.n	8010092 <_malloc_r+0x1e>
 80100ca:	6823      	ldr	r3, [r4, #0]
 80100cc:	1b5b      	subs	r3, r3, r5
 80100ce:	d417      	bmi.n	8010100 <_malloc_r+0x8c>
 80100d0:	2b0b      	cmp	r3, #11
 80100d2:	d903      	bls.n	80100dc <_malloc_r+0x68>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	441c      	add	r4, r3
 80100d8:	6025      	str	r5, [r4, #0]
 80100da:	e004      	b.n	80100e6 <_malloc_r+0x72>
 80100dc:	6863      	ldr	r3, [r4, #4]
 80100de:	42a2      	cmp	r2, r4
 80100e0:	bf0c      	ite	eq
 80100e2:	600b      	streq	r3, [r1, #0]
 80100e4:	6053      	strne	r3, [r2, #4]
 80100e6:	4630      	mov	r0, r6
 80100e8:	f000 fd88 	bl	8010bfc <__malloc_unlock>
 80100ec:	f104 000b 	add.w	r0, r4, #11
 80100f0:	1d23      	adds	r3, r4, #4
 80100f2:	f020 0007 	bic.w	r0, r0, #7
 80100f6:	1ac2      	subs	r2, r0, r3
 80100f8:	d0cc      	beq.n	8010094 <_malloc_r+0x20>
 80100fa:	1a1b      	subs	r3, r3, r0
 80100fc:	50a3      	str	r3, [r4, r2]
 80100fe:	e7c9      	b.n	8010094 <_malloc_r+0x20>
 8010100:	4622      	mov	r2, r4
 8010102:	6864      	ldr	r4, [r4, #4]
 8010104:	e7cc      	b.n	80100a0 <_malloc_r+0x2c>
 8010106:	1cc4      	adds	r4, r0, #3
 8010108:	f024 0403 	bic.w	r4, r4, #3
 801010c:	42a0      	cmp	r0, r4
 801010e:	d0e3      	beq.n	80100d8 <_malloc_r+0x64>
 8010110:	1a21      	subs	r1, r4, r0
 8010112:	4630      	mov	r0, r6
 8010114:	f000 faf6 	bl	8010704 <_sbrk_r>
 8010118:	3001      	adds	r0, #1
 801011a:	d1dd      	bne.n	80100d8 <_malloc_r+0x64>
 801011c:	e7cf      	b.n	80100be <_malloc_r+0x4a>
 801011e:	bf00      	nop
 8010120:	20000220 	.word	0x20000220
 8010124:	20000224 	.word	0x20000224

08010128 <__sfputc_r>:
 8010128:	6893      	ldr	r3, [r2, #8]
 801012a:	3b01      	subs	r3, #1
 801012c:	2b00      	cmp	r3, #0
 801012e:	b410      	push	{r4}
 8010130:	6093      	str	r3, [r2, #8]
 8010132:	da08      	bge.n	8010146 <__sfputc_r+0x1e>
 8010134:	6994      	ldr	r4, [r2, #24]
 8010136:	42a3      	cmp	r3, r4
 8010138:	db01      	blt.n	801013e <__sfputc_r+0x16>
 801013a:	290a      	cmp	r1, #10
 801013c:	d103      	bne.n	8010146 <__sfputc_r+0x1e>
 801013e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010142:	f000 bb33 	b.w	80107ac <__swbuf_r>
 8010146:	6813      	ldr	r3, [r2, #0]
 8010148:	1c58      	adds	r0, r3, #1
 801014a:	6010      	str	r0, [r2, #0]
 801014c:	7019      	strb	r1, [r3, #0]
 801014e:	4608      	mov	r0, r1
 8010150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010154:	4770      	bx	lr

08010156 <__sfputs_r>:
 8010156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010158:	4606      	mov	r6, r0
 801015a:	460f      	mov	r7, r1
 801015c:	4614      	mov	r4, r2
 801015e:	18d5      	adds	r5, r2, r3
 8010160:	42ac      	cmp	r4, r5
 8010162:	d101      	bne.n	8010168 <__sfputs_r+0x12>
 8010164:	2000      	movs	r0, #0
 8010166:	e007      	b.n	8010178 <__sfputs_r+0x22>
 8010168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801016c:	463a      	mov	r2, r7
 801016e:	4630      	mov	r0, r6
 8010170:	f7ff ffda 	bl	8010128 <__sfputc_r>
 8010174:	1c43      	adds	r3, r0, #1
 8010176:	d1f3      	bne.n	8010160 <__sfputs_r+0xa>
 8010178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801017c <_vfiprintf_r>:
 801017c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010180:	460d      	mov	r5, r1
 8010182:	b09d      	sub	sp, #116	; 0x74
 8010184:	4614      	mov	r4, r2
 8010186:	4698      	mov	r8, r3
 8010188:	4606      	mov	r6, r0
 801018a:	b118      	cbz	r0, 8010194 <_vfiprintf_r+0x18>
 801018c:	6983      	ldr	r3, [r0, #24]
 801018e:	b90b      	cbnz	r3, 8010194 <_vfiprintf_r+0x18>
 8010190:	f7ff fe66 	bl	800fe60 <__sinit>
 8010194:	4b89      	ldr	r3, [pc, #548]	; (80103bc <_vfiprintf_r+0x240>)
 8010196:	429d      	cmp	r5, r3
 8010198:	d11b      	bne.n	80101d2 <_vfiprintf_r+0x56>
 801019a:	6875      	ldr	r5, [r6, #4]
 801019c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801019e:	07d9      	lsls	r1, r3, #31
 80101a0:	d405      	bmi.n	80101ae <_vfiprintf_r+0x32>
 80101a2:	89ab      	ldrh	r3, [r5, #12]
 80101a4:	059a      	lsls	r2, r3, #22
 80101a6:	d402      	bmi.n	80101ae <_vfiprintf_r+0x32>
 80101a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101aa:	f7ff ff09 	bl	800ffc0 <__retarget_lock_acquire_recursive>
 80101ae:	89ab      	ldrh	r3, [r5, #12]
 80101b0:	071b      	lsls	r3, r3, #28
 80101b2:	d501      	bpl.n	80101b8 <_vfiprintf_r+0x3c>
 80101b4:	692b      	ldr	r3, [r5, #16]
 80101b6:	b9eb      	cbnz	r3, 80101f4 <_vfiprintf_r+0x78>
 80101b8:	4629      	mov	r1, r5
 80101ba:	4630      	mov	r0, r6
 80101bc:	f000 fb5a 	bl	8010874 <__swsetup_r>
 80101c0:	b1c0      	cbz	r0, 80101f4 <_vfiprintf_r+0x78>
 80101c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101c4:	07dc      	lsls	r4, r3, #31
 80101c6:	d50e      	bpl.n	80101e6 <_vfiprintf_r+0x6a>
 80101c8:	f04f 30ff 	mov.w	r0, #4294967295
 80101cc:	b01d      	add	sp, #116	; 0x74
 80101ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d2:	4b7b      	ldr	r3, [pc, #492]	; (80103c0 <_vfiprintf_r+0x244>)
 80101d4:	429d      	cmp	r5, r3
 80101d6:	d101      	bne.n	80101dc <_vfiprintf_r+0x60>
 80101d8:	68b5      	ldr	r5, [r6, #8]
 80101da:	e7df      	b.n	801019c <_vfiprintf_r+0x20>
 80101dc:	4b79      	ldr	r3, [pc, #484]	; (80103c4 <_vfiprintf_r+0x248>)
 80101de:	429d      	cmp	r5, r3
 80101e0:	bf08      	it	eq
 80101e2:	68f5      	ldreq	r5, [r6, #12]
 80101e4:	e7da      	b.n	801019c <_vfiprintf_r+0x20>
 80101e6:	89ab      	ldrh	r3, [r5, #12]
 80101e8:	0598      	lsls	r0, r3, #22
 80101ea:	d4ed      	bmi.n	80101c8 <_vfiprintf_r+0x4c>
 80101ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101ee:	f7ff fee8 	bl	800ffc2 <__retarget_lock_release_recursive>
 80101f2:	e7e9      	b.n	80101c8 <_vfiprintf_r+0x4c>
 80101f4:	2300      	movs	r3, #0
 80101f6:	9309      	str	r3, [sp, #36]	; 0x24
 80101f8:	2320      	movs	r3, #32
 80101fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010202:	2330      	movs	r3, #48	; 0x30
 8010204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80103c8 <_vfiprintf_r+0x24c>
 8010208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801020c:	f04f 0901 	mov.w	r9, #1
 8010210:	4623      	mov	r3, r4
 8010212:	469a      	mov	sl, r3
 8010214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010218:	b10a      	cbz	r2, 801021e <_vfiprintf_r+0xa2>
 801021a:	2a25      	cmp	r2, #37	; 0x25
 801021c:	d1f9      	bne.n	8010212 <_vfiprintf_r+0x96>
 801021e:	ebba 0b04 	subs.w	fp, sl, r4
 8010222:	d00b      	beq.n	801023c <_vfiprintf_r+0xc0>
 8010224:	465b      	mov	r3, fp
 8010226:	4622      	mov	r2, r4
 8010228:	4629      	mov	r1, r5
 801022a:	4630      	mov	r0, r6
 801022c:	f7ff ff93 	bl	8010156 <__sfputs_r>
 8010230:	3001      	adds	r0, #1
 8010232:	f000 80aa 	beq.w	801038a <_vfiprintf_r+0x20e>
 8010236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010238:	445a      	add	r2, fp
 801023a:	9209      	str	r2, [sp, #36]	; 0x24
 801023c:	f89a 3000 	ldrb.w	r3, [sl]
 8010240:	2b00      	cmp	r3, #0
 8010242:	f000 80a2 	beq.w	801038a <_vfiprintf_r+0x20e>
 8010246:	2300      	movs	r3, #0
 8010248:	f04f 32ff 	mov.w	r2, #4294967295
 801024c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010250:	f10a 0a01 	add.w	sl, sl, #1
 8010254:	9304      	str	r3, [sp, #16]
 8010256:	9307      	str	r3, [sp, #28]
 8010258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801025c:	931a      	str	r3, [sp, #104]	; 0x68
 801025e:	4654      	mov	r4, sl
 8010260:	2205      	movs	r2, #5
 8010262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010266:	4858      	ldr	r0, [pc, #352]	; (80103c8 <_vfiprintf_r+0x24c>)
 8010268:	f7ef ffb2 	bl	80001d0 <memchr>
 801026c:	9a04      	ldr	r2, [sp, #16]
 801026e:	b9d8      	cbnz	r0, 80102a8 <_vfiprintf_r+0x12c>
 8010270:	06d1      	lsls	r1, r2, #27
 8010272:	bf44      	itt	mi
 8010274:	2320      	movmi	r3, #32
 8010276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801027a:	0713      	lsls	r3, r2, #28
 801027c:	bf44      	itt	mi
 801027e:	232b      	movmi	r3, #43	; 0x2b
 8010280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010284:	f89a 3000 	ldrb.w	r3, [sl]
 8010288:	2b2a      	cmp	r3, #42	; 0x2a
 801028a:	d015      	beq.n	80102b8 <_vfiprintf_r+0x13c>
 801028c:	9a07      	ldr	r2, [sp, #28]
 801028e:	4654      	mov	r4, sl
 8010290:	2000      	movs	r0, #0
 8010292:	f04f 0c0a 	mov.w	ip, #10
 8010296:	4621      	mov	r1, r4
 8010298:	f811 3b01 	ldrb.w	r3, [r1], #1
 801029c:	3b30      	subs	r3, #48	; 0x30
 801029e:	2b09      	cmp	r3, #9
 80102a0:	d94e      	bls.n	8010340 <_vfiprintf_r+0x1c4>
 80102a2:	b1b0      	cbz	r0, 80102d2 <_vfiprintf_r+0x156>
 80102a4:	9207      	str	r2, [sp, #28]
 80102a6:	e014      	b.n	80102d2 <_vfiprintf_r+0x156>
 80102a8:	eba0 0308 	sub.w	r3, r0, r8
 80102ac:	fa09 f303 	lsl.w	r3, r9, r3
 80102b0:	4313      	orrs	r3, r2
 80102b2:	9304      	str	r3, [sp, #16]
 80102b4:	46a2      	mov	sl, r4
 80102b6:	e7d2      	b.n	801025e <_vfiprintf_r+0xe2>
 80102b8:	9b03      	ldr	r3, [sp, #12]
 80102ba:	1d19      	adds	r1, r3, #4
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	9103      	str	r1, [sp, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	bfbb      	ittet	lt
 80102c4:	425b      	neglt	r3, r3
 80102c6:	f042 0202 	orrlt.w	r2, r2, #2
 80102ca:	9307      	strge	r3, [sp, #28]
 80102cc:	9307      	strlt	r3, [sp, #28]
 80102ce:	bfb8      	it	lt
 80102d0:	9204      	strlt	r2, [sp, #16]
 80102d2:	7823      	ldrb	r3, [r4, #0]
 80102d4:	2b2e      	cmp	r3, #46	; 0x2e
 80102d6:	d10c      	bne.n	80102f2 <_vfiprintf_r+0x176>
 80102d8:	7863      	ldrb	r3, [r4, #1]
 80102da:	2b2a      	cmp	r3, #42	; 0x2a
 80102dc:	d135      	bne.n	801034a <_vfiprintf_r+0x1ce>
 80102de:	9b03      	ldr	r3, [sp, #12]
 80102e0:	1d1a      	adds	r2, r3, #4
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	9203      	str	r2, [sp, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	bfb8      	it	lt
 80102ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80102ee:	3402      	adds	r4, #2
 80102f0:	9305      	str	r3, [sp, #20]
 80102f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80103d8 <_vfiprintf_r+0x25c>
 80102f6:	7821      	ldrb	r1, [r4, #0]
 80102f8:	2203      	movs	r2, #3
 80102fa:	4650      	mov	r0, sl
 80102fc:	f7ef ff68 	bl	80001d0 <memchr>
 8010300:	b140      	cbz	r0, 8010314 <_vfiprintf_r+0x198>
 8010302:	2340      	movs	r3, #64	; 0x40
 8010304:	eba0 000a 	sub.w	r0, r0, sl
 8010308:	fa03 f000 	lsl.w	r0, r3, r0
 801030c:	9b04      	ldr	r3, [sp, #16]
 801030e:	4303      	orrs	r3, r0
 8010310:	3401      	adds	r4, #1
 8010312:	9304      	str	r3, [sp, #16]
 8010314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010318:	482c      	ldr	r0, [pc, #176]	; (80103cc <_vfiprintf_r+0x250>)
 801031a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801031e:	2206      	movs	r2, #6
 8010320:	f7ef ff56 	bl	80001d0 <memchr>
 8010324:	2800      	cmp	r0, #0
 8010326:	d03f      	beq.n	80103a8 <_vfiprintf_r+0x22c>
 8010328:	4b29      	ldr	r3, [pc, #164]	; (80103d0 <_vfiprintf_r+0x254>)
 801032a:	bb1b      	cbnz	r3, 8010374 <_vfiprintf_r+0x1f8>
 801032c:	9b03      	ldr	r3, [sp, #12]
 801032e:	3307      	adds	r3, #7
 8010330:	f023 0307 	bic.w	r3, r3, #7
 8010334:	3308      	adds	r3, #8
 8010336:	9303      	str	r3, [sp, #12]
 8010338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801033a:	443b      	add	r3, r7
 801033c:	9309      	str	r3, [sp, #36]	; 0x24
 801033e:	e767      	b.n	8010210 <_vfiprintf_r+0x94>
 8010340:	fb0c 3202 	mla	r2, ip, r2, r3
 8010344:	460c      	mov	r4, r1
 8010346:	2001      	movs	r0, #1
 8010348:	e7a5      	b.n	8010296 <_vfiprintf_r+0x11a>
 801034a:	2300      	movs	r3, #0
 801034c:	3401      	adds	r4, #1
 801034e:	9305      	str	r3, [sp, #20]
 8010350:	4619      	mov	r1, r3
 8010352:	f04f 0c0a 	mov.w	ip, #10
 8010356:	4620      	mov	r0, r4
 8010358:	f810 2b01 	ldrb.w	r2, [r0], #1
 801035c:	3a30      	subs	r2, #48	; 0x30
 801035e:	2a09      	cmp	r2, #9
 8010360:	d903      	bls.n	801036a <_vfiprintf_r+0x1ee>
 8010362:	2b00      	cmp	r3, #0
 8010364:	d0c5      	beq.n	80102f2 <_vfiprintf_r+0x176>
 8010366:	9105      	str	r1, [sp, #20]
 8010368:	e7c3      	b.n	80102f2 <_vfiprintf_r+0x176>
 801036a:	fb0c 2101 	mla	r1, ip, r1, r2
 801036e:	4604      	mov	r4, r0
 8010370:	2301      	movs	r3, #1
 8010372:	e7f0      	b.n	8010356 <_vfiprintf_r+0x1da>
 8010374:	ab03      	add	r3, sp, #12
 8010376:	9300      	str	r3, [sp, #0]
 8010378:	462a      	mov	r2, r5
 801037a:	4b16      	ldr	r3, [pc, #88]	; (80103d4 <_vfiprintf_r+0x258>)
 801037c:	a904      	add	r1, sp, #16
 801037e:	4630      	mov	r0, r6
 8010380:	f3af 8000 	nop.w
 8010384:	4607      	mov	r7, r0
 8010386:	1c78      	adds	r0, r7, #1
 8010388:	d1d6      	bne.n	8010338 <_vfiprintf_r+0x1bc>
 801038a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801038c:	07d9      	lsls	r1, r3, #31
 801038e:	d405      	bmi.n	801039c <_vfiprintf_r+0x220>
 8010390:	89ab      	ldrh	r3, [r5, #12]
 8010392:	059a      	lsls	r2, r3, #22
 8010394:	d402      	bmi.n	801039c <_vfiprintf_r+0x220>
 8010396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010398:	f7ff fe13 	bl	800ffc2 <__retarget_lock_release_recursive>
 801039c:	89ab      	ldrh	r3, [r5, #12]
 801039e:	065b      	lsls	r3, r3, #25
 80103a0:	f53f af12 	bmi.w	80101c8 <_vfiprintf_r+0x4c>
 80103a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103a6:	e711      	b.n	80101cc <_vfiprintf_r+0x50>
 80103a8:	ab03      	add	r3, sp, #12
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	462a      	mov	r2, r5
 80103ae:	4b09      	ldr	r3, [pc, #36]	; (80103d4 <_vfiprintf_r+0x258>)
 80103b0:	a904      	add	r1, sp, #16
 80103b2:	4630      	mov	r0, r6
 80103b4:	f000 f880 	bl	80104b8 <_printf_i>
 80103b8:	e7e4      	b.n	8010384 <_vfiprintf_r+0x208>
 80103ba:	bf00      	nop
 80103bc:	08013c70 	.word	0x08013c70
 80103c0:	08013c90 	.word	0x08013c90
 80103c4:	08013c50 	.word	0x08013c50
 80103c8:	08013cb0 	.word	0x08013cb0
 80103cc:	08013cba 	.word	0x08013cba
 80103d0:	00000000 	.word	0x00000000
 80103d4:	08010157 	.word	0x08010157
 80103d8:	08013cb6 	.word	0x08013cb6

080103dc <_printf_common>:
 80103dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103e0:	4616      	mov	r6, r2
 80103e2:	4699      	mov	r9, r3
 80103e4:	688a      	ldr	r2, [r1, #8]
 80103e6:	690b      	ldr	r3, [r1, #16]
 80103e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80103ec:	4293      	cmp	r3, r2
 80103ee:	bfb8      	it	lt
 80103f0:	4613      	movlt	r3, r2
 80103f2:	6033      	str	r3, [r6, #0]
 80103f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80103f8:	4607      	mov	r7, r0
 80103fa:	460c      	mov	r4, r1
 80103fc:	b10a      	cbz	r2, 8010402 <_printf_common+0x26>
 80103fe:	3301      	adds	r3, #1
 8010400:	6033      	str	r3, [r6, #0]
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	0699      	lsls	r1, r3, #26
 8010406:	bf42      	ittt	mi
 8010408:	6833      	ldrmi	r3, [r6, #0]
 801040a:	3302      	addmi	r3, #2
 801040c:	6033      	strmi	r3, [r6, #0]
 801040e:	6825      	ldr	r5, [r4, #0]
 8010410:	f015 0506 	ands.w	r5, r5, #6
 8010414:	d106      	bne.n	8010424 <_printf_common+0x48>
 8010416:	f104 0a19 	add.w	sl, r4, #25
 801041a:	68e3      	ldr	r3, [r4, #12]
 801041c:	6832      	ldr	r2, [r6, #0]
 801041e:	1a9b      	subs	r3, r3, r2
 8010420:	42ab      	cmp	r3, r5
 8010422:	dc26      	bgt.n	8010472 <_printf_common+0x96>
 8010424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010428:	1e13      	subs	r3, r2, #0
 801042a:	6822      	ldr	r2, [r4, #0]
 801042c:	bf18      	it	ne
 801042e:	2301      	movne	r3, #1
 8010430:	0692      	lsls	r2, r2, #26
 8010432:	d42b      	bmi.n	801048c <_printf_common+0xb0>
 8010434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010438:	4649      	mov	r1, r9
 801043a:	4638      	mov	r0, r7
 801043c:	47c0      	blx	r8
 801043e:	3001      	adds	r0, #1
 8010440:	d01e      	beq.n	8010480 <_printf_common+0xa4>
 8010442:	6823      	ldr	r3, [r4, #0]
 8010444:	68e5      	ldr	r5, [r4, #12]
 8010446:	6832      	ldr	r2, [r6, #0]
 8010448:	f003 0306 	and.w	r3, r3, #6
 801044c:	2b04      	cmp	r3, #4
 801044e:	bf08      	it	eq
 8010450:	1aad      	subeq	r5, r5, r2
 8010452:	68a3      	ldr	r3, [r4, #8]
 8010454:	6922      	ldr	r2, [r4, #16]
 8010456:	bf0c      	ite	eq
 8010458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801045c:	2500      	movne	r5, #0
 801045e:	4293      	cmp	r3, r2
 8010460:	bfc4      	itt	gt
 8010462:	1a9b      	subgt	r3, r3, r2
 8010464:	18ed      	addgt	r5, r5, r3
 8010466:	2600      	movs	r6, #0
 8010468:	341a      	adds	r4, #26
 801046a:	42b5      	cmp	r5, r6
 801046c:	d11a      	bne.n	80104a4 <_printf_common+0xc8>
 801046e:	2000      	movs	r0, #0
 8010470:	e008      	b.n	8010484 <_printf_common+0xa8>
 8010472:	2301      	movs	r3, #1
 8010474:	4652      	mov	r2, sl
 8010476:	4649      	mov	r1, r9
 8010478:	4638      	mov	r0, r7
 801047a:	47c0      	blx	r8
 801047c:	3001      	adds	r0, #1
 801047e:	d103      	bne.n	8010488 <_printf_common+0xac>
 8010480:	f04f 30ff 	mov.w	r0, #4294967295
 8010484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010488:	3501      	adds	r5, #1
 801048a:	e7c6      	b.n	801041a <_printf_common+0x3e>
 801048c:	18e1      	adds	r1, r4, r3
 801048e:	1c5a      	adds	r2, r3, #1
 8010490:	2030      	movs	r0, #48	; 0x30
 8010492:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010496:	4422      	add	r2, r4
 8010498:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801049c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80104a0:	3302      	adds	r3, #2
 80104a2:	e7c7      	b.n	8010434 <_printf_common+0x58>
 80104a4:	2301      	movs	r3, #1
 80104a6:	4622      	mov	r2, r4
 80104a8:	4649      	mov	r1, r9
 80104aa:	4638      	mov	r0, r7
 80104ac:	47c0      	blx	r8
 80104ae:	3001      	adds	r0, #1
 80104b0:	d0e6      	beq.n	8010480 <_printf_common+0xa4>
 80104b2:	3601      	adds	r6, #1
 80104b4:	e7d9      	b.n	801046a <_printf_common+0x8e>
	...

080104b8 <_printf_i>:
 80104b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104bc:	460c      	mov	r4, r1
 80104be:	4691      	mov	r9, r2
 80104c0:	7e27      	ldrb	r7, [r4, #24]
 80104c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80104c4:	2f78      	cmp	r7, #120	; 0x78
 80104c6:	4680      	mov	r8, r0
 80104c8:	469a      	mov	sl, r3
 80104ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80104ce:	d807      	bhi.n	80104e0 <_printf_i+0x28>
 80104d0:	2f62      	cmp	r7, #98	; 0x62
 80104d2:	d80a      	bhi.n	80104ea <_printf_i+0x32>
 80104d4:	2f00      	cmp	r7, #0
 80104d6:	f000 80d8 	beq.w	801068a <_printf_i+0x1d2>
 80104da:	2f58      	cmp	r7, #88	; 0x58
 80104dc:	f000 80a3 	beq.w	8010626 <_printf_i+0x16e>
 80104e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80104e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80104e8:	e03a      	b.n	8010560 <_printf_i+0xa8>
 80104ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80104ee:	2b15      	cmp	r3, #21
 80104f0:	d8f6      	bhi.n	80104e0 <_printf_i+0x28>
 80104f2:	a001      	add	r0, pc, #4	; (adr r0, 80104f8 <_printf_i+0x40>)
 80104f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80104f8:	08010551 	.word	0x08010551
 80104fc:	08010565 	.word	0x08010565
 8010500:	080104e1 	.word	0x080104e1
 8010504:	080104e1 	.word	0x080104e1
 8010508:	080104e1 	.word	0x080104e1
 801050c:	080104e1 	.word	0x080104e1
 8010510:	08010565 	.word	0x08010565
 8010514:	080104e1 	.word	0x080104e1
 8010518:	080104e1 	.word	0x080104e1
 801051c:	080104e1 	.word	0x080104e1
 8010520:	080104e1 	.word	0x080104e1
 8010524:	08010671 	.word	0x08010671
 8010528:	08010595 	.word	0x08010595
 801052c:	08010653 	.word	0x08010653
 8010530:	080104e1 	.word	0x080104e1
 8010534:	080104e1 	.word	0x080104e1
 8010538:	08010693 	.word	0x08010693
 801053c:	080104e1 	.word	0x080104e1
 8010540:	08010595 	.word	0x08010595
 8010544:	080104e1 	.word	0x080104e1
 8010548:	080104e1 	.word	0x080104e1
 801054c:	0801065b 	.word	0x0801065b
 8010550:	680b      	ldr	r3, [r1, #0]
 8010552:	1d1a      	adds	r2, r3, #4
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	600a      	str	r2, [r1, #0]
 8010558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801055c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010560:	2301      	movs	r3, #1
 8010562:	e0a3      	b.n	80106ac <_printf_i+0x1f4>
 8010564:	6825      	ldr	r5, [r4, #0]
 8010566:	6808      	ldr	r0, [r1, #0]
 8010568:	062e      	lsls	r6, r5, #24
 801056a:	f100 0304 	add.w	r3, r0, #4
 801056e:	d50a      	bpl.n	8010586 <_printf_i+0xce>
 8010570:	6805      	ldr	r5, [r0, #0]
 8010572:	600b      	str	r3, [r1, #0]
 8010574:	2d00      	cmp	r5, #0
 8010576:	da03      	bge.n	8010580 <_printf_i+0xc8>
 8010578:	232d      	movs	r3, #45	; 0x2d
 801057a:	426d      	negs	r5, r5
 801057c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010580:	485e      	ldr	r0, [pc, #376]	; (80106fc <_printf_i+0x244>)
 8010582:	230a      	movs	r3, #10
 8010584:	e019      	b.n	80105ba <_printf_i+0x102>
 8010586:	f015 0f40 	tst.w	r5, #64	; 0x40
 801058a:	6805      	ldr	r5, [r0, #0]
 801058c:	600b      	str	r3, [r1, #0]
 801058e:	bf18      	it	ne
 8010590:	b22d      	sxthne	r5, r5
 8010592:	e7ef      	b.n	8010574 <_printf_i+0xbc>
 8010594:	680b      	ldr	r3, [r1, #0]
 8010596:	6825      	ldr	r5, [r4, #0]
 8010598:	1d18      	adds	r0, r3, #4
 801059a:	6008      	str	r0, [r1, #0]
 801059c:	0628      	lsls	r0, r5, #24
 801059e:	d501      	bpl.n	80105a4 <_printf_i+0xec>
 80105a0:	681d      	ldr	r5, [r3, #0]
 80105a2:	e002      	b.n	80105aa <_printf_i+0xf2>
 80105a4:	0669      	lsls	r1, r5, #25
 80105a6:	d5fb      	bpl.n	80105a0 <_printf_i+0xe8>
 80105a8:	881d      	ldrh	r5, [r3, #0]
 80105aa:	4854      	ldr	r0, [pc, #336]	; (80106fc <_printf_i+0x244>)
 80105ac:	2f6f      	cmp	r7, #111	; 0x6f
 80105ae:	bf0c      	ite	eq
 80105b0:	2308      	moveq	r3, #8
 80105b2:	230a      	movne	r3, #10
 80105b4:	2100      	movs	r1, #0
 80105b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80105ba:	6866      	ldr	r6, [r4, #4]
 80105bc:	60a6      	str	r6, [r4, #8]
 80105be:	2e00      	cmp	r6, #0
 80105c0:	bfa2      	ittt	ge
 80105c2:	6821      	ldrge	r1, [r4, #0]
 80105c4:	f021 0104 	bicge.w	r1, r1, #4
 80105c8:	6021      	strge	r1, [r4, #0]
 80105ca:	b90d      	cbnz	r5, 80105d0 <_printf_i+0x118>
 80105cc:	2e00      	cmp	r6, #0
 80105ce:	d04d      	beq.n	801066c <_printf_i+0x1b4>
 80105d0:	4616      	mov	r6, r2
 80105d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80105d6:	fb03 5711 	mls	r7, r3, r1, r5
 80105da:	5dc7      	ldrb	r7, [r0, r7]
 80105dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105e0:	462f      	mov	r7, r5
 80105e2:	42bb      	cmp	r3, r7
 80105e4:	460d      	mov	r5, r1
 80105e6:	d9f4      	bls.n	80105d2 <_printf_i+0x11a>
 80105e8:	2b08      	cmp	r3, #8
 80105ea:	d10b      	bne.n	8010604 <_printf_i+0x14c>
 80105ec:	6823      	ldr	r3, [r4, #0]
 80105ee:	07df      	lsls	r7, r3, #31
 80105f0:	d508      	bpl.n	8010604 <_printf_i+0x14c>
 80105f2:	6923      	ldr	r3, [r4, #16]
 80105f4:	6861      	ldr	r1, [r4, #4]
 80105f6:	4299      	cmp	r1, r3
 80105f8:	bfde      	ittt	le
 80105fa:	2330      	movle	r3, #48	; 0x30
 80105fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010600:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010604:	1b92      	subs	r2, r2, r6
 8010606:	6122      	str	r2, [r4, #16]
 8010608:	f8cd a000 	str.w	sl, [sp]
 801060c:	464b      	mov	r3, r9
 801060e:	aa03      	add	r2, sp, #12
 8010610:	4621      	mov	r1, r4
 8010612:	4640      	mov	r0, r8
 8010614:	f7ff fee2 	bl	80103dc <_printf_common>
 8010618:	3001      	adds	r0, #1
 801061a:	d14c      	bne.n	80106b6 <_printf_i+0x1fe>
 801061c:	f04f 30ff 	mov.w	r0, #4294967295
 8010620:	b004      	add	sp, #16
 8010622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010626:	4835      	ldr	r0, [pc, #212]	; (80106fc <_printf_i+0x244>)
 8010628:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	680e      	ldr	r6, [r1, #0]
 8010630:	061f      	lsls	r7, r3, #24
 8010632:	f856 5b04 	ldr.w	r5, [r6], #4
 8010636:	600e      	str	r6, [r1, #0]
 8010638:	d514      	bpl.n	8010664 <_printf_i+0x1ac>
 801063a:	07d9      	lsls	r1, r3, #31
 801063c:	bf44      	itt	mi
 801063e:	f043 0320 	orrmi.w	r3, r3, #32
 8010642:	6023      	strmi	r3, [r4, #0]
 8010644:	b91d      	cbnz	r5, 801064e <_printf_i+0x196>
 8010646:	6823      	ldr	r3, [r4, #0]
 8010648:	f023 0320 	bic.w	r3, r3, #32
 801064c:	6023      	str	r3, [r4, #0]
 801064e:	2310      	movs	r3, #16
 8010650:	e7b0      	b.n	80105b4 <_printf_i+0xfc>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	f043 0320 	orr.w	r3, r3, #32
 8010658:	6023      	str	r3, [r4, #0]
 801065a:	2378      	movs	r3, #120	; 0x78
 801065c:	4828      	ldr	r0, [pc, #160]	; (8010700 <_printf_i+0x248>)
 801065e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010662:	e7e3      	b.n	801062c <_printf_i+0x174>
 8010664:	065e      	lsls	r6, r3, #25
 8010666:	bf48      	it	mi
 8010668:	b2ad      	uxthmi	r5, r5
 801066a:	e7e6      	b.n	801063a <_printf_i+0x182>
 801066c:	4616      	mov	r6, r2
 801066e:	e7bb      	b.n	80105e8 <_printf_i+0x130>
 8010670:	680b      	ldr	r3, [r1, #0]
 8010672:	6826      	ldr	r6, [r4, #0]
 8010674:	6960      	ldr	r0, [r4, #20]
 8010676:	1d1d      	adds	r5, r3, #4
 8010678:	600d      	str	r5, [r1, #0]
 801067a:	0635      	lsls	r5, r6, #24
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	d501      	bpl.n	8010684 <_printf_i+0x1cc>
 8010680:	6018      	str	r0, [r3, #0]
 8010682:	e002      	b.n	801068a <_printf_i+0x1d2>
 8010684:	0671      	lsls	r1, r6, #25
 8010686:	d5fb      	bpl.n	8010680 <_printf_i+0x1c8>
 8010688:	8018      	strh	r0, [r3, #0]
 801068a:	2300      	movs	r3, #0
 801068c:	6123      	str	r3, [r4, #16]
 801068e:	4616      	mov	r6, r2
 8010690:	e7ba      	b.n	8010608 <_printf_i+0x150>
 8010692:	680b      	ldr	r3, [r1, #0]
 8010694:	1d1a      	adds	r2, r3, #4
 8010696:	600a      	str	r2, [r1, #0]
 8010698:	681e      	ldr	r6, [r3, #0]
 801069a:	6862      	ldr	r2, [r4, #4]
 801069c:	2100      	movs	r1, #0
 801069e:	4630      	mov	r0, r6
 80106a0:	f7ef fd96 	bl	80001d0 <memchr>
 80106a4:	b108      	cbz	r0, 80106aa <_printf_i+0x1f2>
 80106a6:	1b80      	subs	r0, r0, r6
 80106a8:	6060      	str	r0, [r4, #4]
 80106aa:	6863      	ldr	r3, [r4, #4]
 80106ac:	6123      	str	r3, [r4, #16]
 80106ae:	2300      	movs	r3, #0
 80106b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106b4:	e7a8      	b.n	8010608 <_printf_i+0x150>
 80106b6:	6923      	ldr	r3, [r4, #16]
 80106b8:	4632      	mov	r2, r6
 80106ba:	4649      	mov	r1, r9
 80106bc:	4640      	mov	r0, r8
 80106be:	47d0      	blx	sl
 80106c0:	3001      	adds	r0, #1
 80106c2:	d0ab      	beq.n	801061c <_printf_i+0x164>
 80106c4:	6823      	ldr	r3, [r4, #0]
 80106c6:	079b      	lsls	r3, r3, #30
 80106c8:	d413      	bmi.n	80106f2 <_printf_i+0x23a>
 80106ca:	68e0      	ldr	r0, [r4, #12]
 80106cc:	9b03      	ldr	r3, [sp, #12]
 80106ce:	4298      	cmp	r0, r3
 80106d0:	bfb8      	it	lt
 80106d2:	4618      	movlt	r0, r3
 80106d4:	e7a4      	b.n	8010620 <_printf_i+0x168>
 80106d6:	2301      	movs	r3, #1
 80106d8:	4632      	mov	r2, r6
 80106da:	4649      	mov	r1, r9
 80106dc:	4640      	mov	r0, r8
 80106de:	47d0      	blx	sl
 80106e0:	3001      	adds	r0, #1
 80106e2:	d09b      	beq.n	801061c <_printf_i+0x164>
 80106e4:	3501      	adds	r5, #1
 80106e6:	68e3      	ldr	r3, [r4, #12]
 80106e8:	9903      	ldr	r1, [sp, #12]
 80106ea:	1a5b      	subs	r3, r3, r1
 80106ec:	42ab      	cmp	r3, r5
 80106ee:	dcf2      	bgt.n	80106d6 <_printf_i+0x21e>
 80106f0:	e7eb      	b.n	80106ca <_printf_i+0x212>
 80106f2:	2500      	movs	r5, #0
 80106f4:	f104 0619 	add.w	r6, r4, #25
 80106f8:	e7f5      	b.n	80106e6 <_printf_i+0x22e>
 80106fa:	bf00      	nop
 80106fc:	08013cc1 	.word	0x08013cc1
 8010700:	08013cd2 	.word	0x08013cd2

08010704 <_sbrk_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4d06      	ldr	r5, [pc, #24]	; (8010720 <_sbrk_r+0x1c>)
 8010708:	2300      	movs	r3, #0
 801070a:	4604      	mov	r4, r0
 801070c:	4608      	mov	r0, r1
 801070e:	602b      	str	r3, [r5, #0]
 8010710:	f7f0 fb3a 	bl	8000d88 <_sbrk>
 8010714:	1c43      	adds	r3, r0, #1
 8010716:	d102      	bne.n	801071e <_sbrk_r+0x1a>
 8010718:	682b      	ldr	r3, [r5, #0]
 801071a:	b103      	cbz	r3, 801071e <_sbrk_r+0x1a>
 801071c:	6023      	str	r3, [r4, #0]
 801071e:	bd38      	pop	{r3, r4, r5, pc}
 8010720:	20006990 	.word	0x20006990

08010724 <__sread>:
 8010724:	b510      	push	{r4, lr}
 8010726:	460c      	mov	r4, r1
 8010728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801072c:	f000 fa6c 	bl	8010c08 <_read_r>
 8010730:	2800      	cmp	r0, #0
 8010732:	bfab      	itete	ge
 8010734:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010736:	89a3      	ldrhlt	r3, [r4, #12]
 8010738:	181b      	addge	r3, r3, r0
 801073a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801073e:	bfac      	ite	ge
 8010740:	6563      	strge	r3, [r4, #84]	; 0x54
 8010742:	81a3      	strhlt	r3, [r4, #12]
 8010744:	bd10      	pop	{r4, pc}

08010746 <__swrite>:
 8010746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801074a:	461f      	mov	r7, r3
 801074c:	898b      	ldrh	r3, [r1, #12]
 801074e:	05db      	lsls	r3, r3, #23
 8010750:	4605      	mov	r5, r0
 8010752:	460c      	mov	r4, r1
 8010754:	4616      	mov	r6, r2
 8010756:	d505      	bpl.n	8010764 <__swrite+0x1e>
 8010758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801075c:	2302      	movs	r3, #2
 801075e:	2200      	movs	r2, #0
 8010760:	f000 f9d0 	bl	8010b04 <_lseek_r>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801076a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801076e:	81a3      	strh	r3, [r4, #12]
 8010770:	4632      	mov	r2, r6
 8010772:	463b      	mov	r3, r7
 8010774:	4628      	mov	r0, r5
 8010776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801077a:	f000 b869 	b.w	8010850 <_write_r>

0801077e <__sseek>:
 801077e:	b510      	push	{r4, lr}
 8010780:	460c      	mov	r4, r1
 8010782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010786:	f000 f9bd 	bl	8010b04 <_lseek_r>
 801078a:	1c43      	adds	r3, r0, #1
 801078c:	89a3      	ldrh	r3, [r4, #12]
 801078e:	bf15      	itete	ne
 8010790:	6560      	strne	r0, [r4, #84]	; 0x54
 8010792:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010796:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801079a:	81a3      	strheq	r3, [r4, #12]
 801079c:	bf18      	it	ne
 801079e:	81a3      	strhne	r3, [r4, #12]
 80107a0:	bd10      	pop	{r4, pc}

080107a2 <__sclose>:
 80107a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107a6:	f000 b8db 	b.w	8010960 <_close_r>
	...

080107ac <__swbuf_r>:
 80107ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ae:	460e      	mov	r6, r1
 80107b0:	4614      	mov	r4, r2
 80107b2:	4605      	mov	r5, r0
 80107b4:	b118      	cbz	r0, 80107be <__swbuf_r+0x12>
 80107b6:	6983      	ldr	r3, [r0, #24]
 80107b8:	b90b      	cbnz	r3, 80107be <__swbuf_r+0x12>
 80107ba:	f7ff fb51 	bl	800fe60 <__sinit>
 80107be:	4b21      	ldr	r3, [pc, #132]	; (8010844 <__swbuf_r+0x98>)
 80107c0:	429c      	cmp	r4, r3
 80107c2:	d12b      	bne.n	801081c <__swbuf_r+0x70>
 80107c4:	686c      	ldr	r4, [r5, #4]
 80107c6:	69a3      	ldr	r3, [r4, #24]
 80107c8:	60a3      	str	r3, [r4, #8]
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	071a      	lsls	r2, r3, #28
 80107ce:	d52f      	bpl.n	8010830 <__swbuf_r+0x84>
 80107d0:	6923      	ldr	r3, [r4, #16]
 80107d2:	b36b      	cbz	r3, 8010830 <__swbuf_r+0x84>
 80107d4:	6923      	ldr	r3, [r4, #16]
 80107d6:	6820      	ldr	r0, [r4, #0]
 80107d8:	1ac0      	subs	r0, r0, r3
 80107da:	6963      	ldr	r3, [r4, #20]
 80107dc:	b2f6      	uxtb	r6, r6
 80107de:	4283      	cmp	r3, r0
 80107e0:	4637      	mov	r7, r6
 80107e2:	dc04      	bgt.n	80107ee <__swbuf_r+0x42>
 80107e4:	4621      	mov	r1, r4
 80107e6:	4628      	mov	r0, r5
 80107e8:	f000 f950 	bl	8010a8c <_fflush_r>
 80107ec:	bb30      	cbnz	r0, 801083c <__swbuf_r+0x90>
 80107ee:	68a3      	ldr	r3, [r4, #8]
 80107f0:	3b01      	subs	r3, #1
 80107f2:	60a3      	str	r3, [r4, #8]
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	1c5a      	adds	r2, r3, #1
 80107f8:	6022      	str	r2, [r4, #0]
 80107fa:	701e      	strb	r6, [r3, #0]
 80107fc:	6963      	ldr	r3, [r4, #20]
 80107fe:	3001      	adds	r0, #1
 8010800:	4283      	cmp	r3, r0
 8010802:	d004      	beq.n	801080e <__swbuf_r+0x62>
 8010804:	89a3      	ldrh	r3, [r4, #12]
 8010806:	07db      	lsls	r3, r3, #31
 8010808:	d506      	bpl.n	8010818 <__swbuf_r+0x6c>
 801080a:	2e0a      	cmp	r6, #10
 801080c:	d104      	bne.n	8010818 <__swbuf_r+0x6c>
 801080e:	4621      	mov	r1, r4
 8010810:	4628      	mov	r0, r5
 8010812:	f000 f93b 	bl	8010a8c <_fflush_r>
 8010816:	b988      	cbnz	r0, 801083c <__swbuf_r+0x90>
 8010818:	4638      	mov	r0, r7
 801081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801081c:	4b0a      	ldr	r3, [pc, #40]	; (8010848 <__swbuf_r+0x9c>)
 801081e:	429c      	cmp	r4, r3
 8010820:	d101      	bne.n	8010826 <__swbuf_r+0x7a>
 8010822:	68ac      	ldr	r4, [r5, #8]
 8010824:	e7cf      	b.n	80107c6 <__swbuf_r+0x1a>
 8010826:	4b09      	ldr	r3, [pc, #36]	; (801084c <__swbuf_r+0xa0>)
 8010828:	429c      	cmp	r4, r3
 801082a:	bf08      	it	eq
 801082c:	68ec      	ldreq	r4, [r5, #12]
 801082e:	e7ca      	b.n	80107c6 <__swbuf_r+0x1a>
 8010830:	4621      	mov	r1, r4
 8010832:	4628      	mov	r0, r5
 8010834:	f000 f81e 	bl	8010874 <__swsetup_r>
 8010838:	2800      	cmp	r0, #0
 801083a:	d0cb      	beq.n	80107d4 <__swbuf_r+0x28>
 801083c:	f04f 37ff 	mov.w	r7, #4294967295
 8010840:	e7ea      	b.n	8010818 <__swbuf_r+0x6c>
 8010842:	bf00      	nop
 8010844:	08013c70 	.word	0x08013c70
 8010848:	08013c90 	.word	0x08013c90
 801084c:	08013c50 	.word	0x08013c50

08010850 <_write_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4d07      	ldr	r5, [pc, #28]	; (8010870 <_write_r+0x20>)
 8010854:	4604      	mov	r4, r0
 8010856:	4608      	mov	r0, r1
 8010858:	4611      	mov	r1, r2
 801085a:	2200      	movs	r2, #0
 801085c:	602a      	str	r2, [r5, #0]
 801085e:	461a      	mov	r2, r3
 8010860:	f7f0 fa41 	bl	8000ce6 <_write>
 8010864:	1c43      	adds	r3, r0, #1
 8010866:	d102      	bne.n	801086e <_write_r+0x1e>
 8010868:	682b      	ldr	r3, [r5, #0]
 801086a:	b103      	cbz	r3, 801086e <_write_r+0x1e>
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	bd38      	pop	{r3, r4, r5, pc}
 8010870:	20006990 	.word	0x20006990

08010874 <__swsetup_r>:
 8010874:	4b32      	ldr	r3, [pc, #200]	; (8010940 <__swsetup_r+0xcc>)
 8010876:	b570      	push	{r4, r5, r6, lr}
 8010878:	681d      	ldr	r5, [r3, #0]
 801087a:	4606      	mov	r6, r0
 801087c:	460c      	mov	r4, r1
 801087e:	b125      	cbz	r5, 801088a <__swsetup_r+0x16>
 8010880:	69ab      	ldr	r3, [r5, #24]
 8010882:	b913      	cbnz	r3, 801088a <__swsetup_r+0x16>
 8010884:	4628      	mov	r0, r5
 8010886:	f7ff faeb 	bl	800fe60 <__sinit>
 801088a:	4b2e      	ldr	r3, [pc, #184]	; (8010944 <__swsetup_r+0xd0>)
 801088c:	429c      	cmp	r4, r3
 801088e:	d10f      	bne.n	80108b0 <__swsetup_r+0x3c>
 8010890:	686c      	ldr	r4, [r5, #4]
 8010892:	89a3      	ldrh	r3, [r4, #12]
 8010894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010898:	0719      	lsls	r1, r3, #28
 801089a:	d42c      	bmi.n	80108f6 <__swsetup_r+0x82>
 801089c:	06dd      	lsls	r5, r3, #27
 801089e:	d411      	bmi.n	80108c4 <__swsetup_r+0x50>
 80108a0:	2309      	movs	r3, #9
 80108a2:	6033      	str	r3, [r6, #0]
 80108a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80108a8:	81a3      	strh	r3, [r4, #12]
 80108aa:	f04f 30ff 	mov.w	r0, #4294967295
 80108ae:	e03e      	b.n	801092e <__swsetup_r+0xba>
 80108b0:	4b25      	ldr	r3, [pc, #148]	; (8010948 <__swsetup_r+0xd4>)
 80108b2:	429c      	cmp	r4, r3
 80108b4:	d101      	bne.n	80108ba <__swsetup_r+0x46>
 80108b6:	68ac      	ldr	r4, [r5, #8]
 80108b8:	e7eb      	b.n	8010892 <__swsetup_r+0x1e>
 80108ba:	4b24      	ldr	r3, [pc, #144]	; (801094c <__swsetup_r+0xd8>)
 80108bc:	429c      	cmp	r4, r3
 80108be:	bf08      	it	eq
 80108c0:	68ec      	ldreq	r4, [r5, #12]
 80108c2:	e7e6      	b.n	8010892 <__swsetup_r+0x1e>
 80108c4:	0758      	lsls	r0, r3, #29
 80108c6:	d512      	bpl.n	80108ee <__swsetup_r+0x7a>
 80108c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108ca:	b141      	cbz	r1, 80108de <__swsetup_r+0x6a>
 80108cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108d0:	4299      	cmp	r1, r3
 80108d2:	d002      	beq.n	80108da <__swsetup_r+0x66>
 80108d4:	4630      	mov	r0, r6
 80108d6:	f7ff fb7d 	bl	800ffd4 <_free_r>
 80108da:	2300      	movs	r3, #0
 80108dc:	6363      	str	r3, [r4, #52]	; 0x34
 80108de:	89a3      	ldrh	r3, [r4, #12]
 80108e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108e4:	81a3      	strh	r3, [r4, #12]
 80108e6:	2300      	movs	r3, #0
 80108e8:	6063      	str	r3, [r4, #4]
 80108ea:	6923      	ldr	r3, [r4, #16]
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	89a3      	ldrh	r3, [r4, #12]
 80108f0:	f043 0308 	orr.w	r3, r3, #8
 80108f4:	81a3      	strh	r3, [r4, #12]
 80108f6:	6923      	ldr	r3, [r4, #16]
 80108f8:	b94b      	cbnz	r3, 801090e <__swsetup_r+0x9a>
 80108fa:	89a3      	ldrh	r3, [r4, #12]
 80108fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010904:	d003      	beq.n	801090e <__swsetup_r+0x9a>
 8010906:	4621      	mov	r1, r4
 8010908:	4630      	mov	r0, r6
 801090a:	f000 f931 	bl	8010b70 <__smakebuf_r>
 801090e:	89a0      	ldrh	r0, [r4, #12]
 8010910:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010914:	f010 0301 	ands.w	r3, r0, #1
 8010918:	d00a      	beq.n	8010930 <__swsetup_r+0xbc>
 801091a:	2300      	movs	r3, #0
 801091c:	60a3      	str	r3, [r4, #8]
 801091e:	6963      	ldr	r3, [r4, #20]
 8010920:	425b      	negs	r3, r3
 8010922:	61a3      	str	r3, [r4, #24]
 8010924:	6923      	ldr	r3, [r4, #16]
 8010926:	b943      	cbnz	r3, 801093a <__swsetup_r+0xc6>
 8010928:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801092c:	d1ba      	bne.n	80108a4 <__swsetup_r+0x30>
 801092e:	bd70      	pop	{r4, r5, r6, pc}
 8010930:	0781      	lsls	r1, r0, #30
 8010932:	bf58      	it	pl
 8010934:	6963      	ldrpl	r3, [r4, #20]
 8010936:	60a3      	str	r3, [r4, #8]
 8010938:	e7f4      	b.n	8010924 <__swsetup_r+0xb0>
 801093a:	2000      	movs	r0, #0
 801093c:	e7f7      	b.n	801092e <__swsetup_r+0xba>
 801093e:	bf00      	nop
 8010940:	20000018 	.word	0x20000018
 8010944:	08013c70 	.word	0x08013c70
 8010948:	08013c90 	.word	0x08013c90
 801094c:	08013c50 	.word	0x08013c50

08010950 <abort>:
 8010950:	b508      	push	{r3, lr}
 8010952:	2006      	movs	r0, #6
 8010954:	f000 f992 	bl	8010c7c <raise>
 8010958:	2001      	movs	r0, #1
 801095a:	f7f0 f99d 	bl	8000c98 <_exit>
	...

08010960 <_close_r>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4d06      	ldr	r5, [pc, #24]	; (801097c <_close_r+0x1c>)
 8010964:	2300      	movs	r3, #0
 8010966:	4604      	mov	r4, r0
 8010968:	4608      	mov	r0, r1
 801096a:	602b      	str	r3, [r5, #0]
 801096c:	f7f0 f9d7 	bl	8000d1e <_close>
 8010970:	1c43      	adds	r3, r0, #1
 8010972:	d102      	bne.n	801097a <_close_r+0x1a>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	b103      	cbz	r3, 801097a <_close_r+0x1a>
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	bd38      	pop	{r3, r4, r5, pc}
 801097c:	20006990 	.word	0x20006990

08010980 <__sflush_r>:
 8010980:	898a      	ldrh	r2, [r1, #12]
 8010982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010986:	4605      	mov	r5, r0
 8010988:	0710      	lsls	r0, r2, #28
 801098a:	460c      	mov	r4, r1
 801098c:	d458      	bmi.n	8010a40 <__sflush_r+0xc0>
 801098e:	684b      	ldr	r3, [r1, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	dc05      	bgt.n	80109a0 <__sflush_r+0x20>
 8010994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010996:	2b00      	cmp	r3, #0
 8010998:	dc02      	bgt.n	80109a0 <__sflush_r+0x20>
 801099a:	2000      	movs	r0, #0
 801099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109a2:	2e00      	cmp	r6, #0
 80109a4:	d0f9      	beq.n	801099a <__sflush_r+0x1a>
 80109a6:	2300      	movs	r3, #0
 80109a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109ac:	682f      	ldr	r7, [r5, #0]
 80109ae:	602b      	str	r3, [r5, #0]
 80109b0:	d032      	beq.n	8010a18 <__sflush_r+0x98>
 80109b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	075a      	lsls	r2, r3, #29
 80109b8:	d505      	bpl.n	80109c6 <__sflush_r+0x46>
 80109ba:	6863      	ldr	r3, [r4, #4]
 80109bc:	1ac0      	subs	r0, r0, r3
 80109be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109c0:	b10b      	cbz	r3, 80109c6 <__sflush_r+0x46>
 80109c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109c4:	1ac0      	subs	r0, r0, r3
 80109c6:	2300      	movs	r3, #0
 80109c8:	4602      	mov	r2, r0
 80109ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109cc:	6a21      	ldr	r1, [r4, #32]
 80109ce:	4628      	mov	r0, r5
 80109d0:	47b0      	blx	r6
 80109d2:	1c43      	adds	r3, r0, #1
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	d106      	bne.n	80109e6 <__sflush_r+0x66>
 80109d8:	6829      	ldr	r1, [r5, #0]
 80109da:	291d      	cmp	r1, #29
 80109dc:	d82c      	bhi.n	8010a38 <__sflush_r+0xb8>
 80109de:	4a2a      	ldr	r2, [pc, #168]	; (8010a88 <__sflush_r+0x108>)
 80109e0:	40ca      	lsrs	r2, r1
 80109e2:	07d6      	lsls	r6, r2, #31
 80109e4:	d528      	bpl.n	8010a38 <__sflush_r+0xb8>
 80109e6:	2200      	movs	r2, #0
 80109e8:	6062      	str	r2, [r4, #4]
 80109ea:	04d9      	lsls	r1, r3, #19
 80109ec:	6922      	ldr	r2, [r4, #16]
 80109ee:	6022      	str	r2, [r4, #0]
 80109f0:	d504      	bpl.n	80109fc <__sflush_r+0x7c>
 80109f2:	1c42      	adds	r2, r0, #1
 80109f4:	d101      	bne.n	80109fa <__sflush_r+0x7a>
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	b903      	cbnz	r3, 80109fc <__sflush_r+0x7c>
 80109fa:	6560      	str	r0, [r4, #84]	; 0x54
 80109fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109fe:	602f      	str	r7, [r5, #0]
 8010a00:	2900      	cmp	r1, #0
 8010a02:	d0ca      	beq.n	801099a <__sflush_r+0x1a>
 8010a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a08:	4299      	cmp	r1, r3
 8010a0a:	d002      	beq.n	8010a12 <__sflush_r+0x92>
 8010a0c:	4628      	mov	r0, r5
 8010a0e:	f7ff fae1 	bl	800ffd4 <_free_r>
 8010a12:	2000      	movs	r0, #0
 8010a14:	6360      	str	r0, [r4, #52]	; 0x34
 8010a16:	e7c1      	b.n	801099c <__sflush_r+0x1c>
 8010a18:	6a21      	ldr	r1, [r4, #32]
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	4628      	mov	r0, r5
 8010a1e:	47b0      	blx	r6
 8010a20:	1c41      	adds	r1, r0, #1
 8010a22:	d1c7      	bne.n	80109b4 <__sflush_r+0x34>
 8010a24:	682b      	ldr	r3, [r5, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d0c4      	beq.n	80109b4 <__sflush_r+0x34>
 8010a2a:	2b1d      	cmp	r3, #29
 8010a2c:	d001      	beq.n	8010a32 <__sflush_r+0xb2>
 8010a2e:	2b16      	cmp	r3, #22
 8010a30:	d101      	bne.n	8010a36 <__sflush_r+0xb6>
 8010a32:	602f      	str	r7, [r5, #0]
 8010a34:	e7b1      	b.n	801099a <__sflush_r+0x1a>
 8010a36:	89a3      	ldrh	r3, [r4, #12]
 8010a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a3c:	81a3      	strh	r3, [r4, #12]
 8010a3e:	e7ad      	b.n	801099c <__sflush_r+0x1c>
 8010a40:	690f      	ldr	r7, [r1, #16]
 8010a42:	2f00      	cmp	r7, #0
 8010a44:	d0a9      	beq.n	801099a <__sflush_r+0x1a>
 8010a46:	0793      	lsls	r3, r2, #30
 8010a48:	680e      	ldr	r6, [r1, #0]
 8010a4a:	bf08      	it	eq
 8010a4c:	694b      	ldreq	r3, [r1, #20]
 8010a4e:	600f      	str	r7, [r1, #0]
 8010a50:	bf18      	it	ne
 8010a52:	2300      	movne	r3, #0
 8010a54:	eba6 0807 	sub.w	r8, r6, r7
 8010a58:	608b      	str	r3, [r1, #8]
 8010a5a:	f1b8 0f00 	cmp.w	r8, #0
 8010a5e:	dd9c      	ble.n	801099a <__sflush_r+0x1a>
 8010a60:	6a21      	ldr	r1, [r4, #32]
 8010a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a64:	4643      	mov	r3, r8
 8010a66:	463a      	mov	r2, r7
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b0      	blx	r6
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	dc06      	bgt.n	8010a7e <__sflush_r+0xfe>
 8010a70:	89a3      	ldrh	r3, [r4, #12]
 8010a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a76:	81a3      	strh	r3, [r4, #12]
 8010a78:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7c:	e78e      	b.n	801099c <__sflush_r+0x1c>
 8010a7e:	4407      	add	r7, r0
 8010a80:	eba8 0800 	sub.w	r8, r8, r0
 8010a84:	e7e9      	b.n	8010a5a <__sflush_r+0xda>
 8010a86:	bf00      	nop
 8010a88:	20400001 	.word	0x20400001

08010a8c <_fflush_r>:
 8010a8c:	b538      	push	{r3, r4, r5, lr}
 8010a8e:	690b      	ldr	r3, [r1, #16]
 8010a90:	4605      	mov	r5, r0
 8010a92:	460c      	mov	r4, r1
 8010a94:	b913      	cbnz	r3, 8010a9c <_fflush_r+0x10>
 8010a96:	2500      	movs	r5, #0
 8010a98:	4628      	mov	r0, r5
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	b118      	cbz	r0, 8010aa6 <_fflush_r+0x1a>
 8010a9e:	6983      	ldr	r3, [r0, #24]
 8010aa0:	b90b      	cbnz	r3, 8010aa6 <_fflush_r+0x1a>
 8010aa2:	f7ff f9dd 	bl	800fe60 <__sinit>
 8010aa6:	4b14      	ldr	r3, [pc, #80]	; (8010af8 <_fflush_r+0x6c>)
 8010aa8:	429c      	cmp	r4, r3
 8010aaa:	d11b      	bne.n	8010ae4 <_fflush_r+0x58>
 8010aac:	686c      	ldr	r4, [r5, #4]
 8010aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d0ef      	beq.n	8010a96 <_fflush_r+0xa>
 8010ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ab8:	07d0      	lsls	r0, r2, #31
 8010aba:	d404      	bmi.n	8010ac6 <_fflush_r+0x3a>
 8010abc:	0599      	lsls	r1, r3, #22
 8010abe:	d402      	bmi.n	8010ac6 <_fflush_r+0x3a>
 8010ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ac2:	f7ff fa7d 	bl	800ffc0 <__retarget_lock_acquire_recursive>
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	4621      	mov	r1, r4
 8010aca:	f7ff ff59 	bl	8010980 <__sflush_r>
 8010ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ad0:	07da      	lsls	r2, r3, #31
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	d4e0      	bmi.n	8010a98 <_fflush_r+0xc>
 8010ad6:	89a3      	ldrh	r3, [r4, #12]
 8010ad8:	059b      	lsls	r3, r3, #22
 8010ada:	d4dd      	bmi.n	8010a98 <_fflush_r+0xc>
 8010adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ade:	f7ff fa70 	bl	800ffc2 <__retarget_lock_release_recursive>
 8010ae2:	e7d9      	b.n	8010a98 <_fflush_r+0xc>
 8010ae4:	4b05      	ldr	r3, [pc, #20]	; (8010afc <_fflush_r+0x70>)
 8010ae6:	429c      	cmp	r4, r3
 8010ae8:	d101      	bne.n	8010aee <_fflush_r+0x62>
 8010aea:	68ac      	ldr	r4, [r5, #8]
 8010aec:	e7df      	b.n	8010aae <_fflush_r+0x22>
 8010aee:	4b04      	ldr	r3, [pc, #16]	; (8010b00 <_fflush_r+0x74>)
 8010af0:	429c      	cmp	r4, r3
 8010af2:	bf08      	it	eq
 8010af4:	68ec      	ldreq	r4, [r5, #12]
 8010af6:	e7da      	b.n	8010aae <_fflush_r+0x22>
 8010af8:	08013c70 	.word	0x08013c70
 8010afc:	08013c90 	.word	0x08013c90
 8010b00:	08013c50 	.word	0x08013c50

08010b04 <_lseek_r>:
 8010b04:	b538      	push	{r3, r4, r5, lr}
 8010b06:	4d07      	ldr	r5, [pc, #28]	; (8010b24 <_lseek_r+0x20>)
 8010b08:	4604      	mov	r4, r0
 8010b0a:	4608      	mov	r0, r1
 8010b0c:	4611      	mov	r1, r2
 8010b0e:	2200      	movs	r2, #0
 8010b10:	602a      	str	r2, [r5, #0]
 8010b12:	461a      	mov	r2, r3
 8010b14:	f7f0 f92a 	bl	8000d6c <_lseek>
 8010b18:	1c43      	adds	r3, r0, #1
 8010b1a:	d102      	bne.n	8010b22 <_lseek_r+0x1e>
 8010b1c:	682b      	ldr	r3, [r5, #0]
 8010b1e:	b103      	cbz	r3, 8010b22 <_lseek_r+0x1e>
 8010b20:	6023      	str	r3, [r4, #0]
 8010b22:	bd38      	pop	{r3, r4, r5, pc}
 8010b24:	20006990 	.word	0x20006990

08010b28 <__swhatbuf_r>:
 8010b28:	b570      	push	{r4, r5, r6, lr}
 8010b2a:	460e      	mov	r6, r1
 8010b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b30:	2900      	cmp	r1, #0
 8010b32:	b096      	sub	sp, #88	; 0x58
 8010b34:	4614      	mov	r4, r2
 8010b36:	461d      	mov	r5, r3
 8010b38:	da07      	bge.n	8010b4a <__swhatbuf_r+0x22>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	602b      	str	r3, [r5, #0]
 8010b3e:	89b3      	ldrh	r3, [r6, #12]
 8010b40:	061a      	lsls	r2, r3, #24
 8010b42:	d410      	bmi.n	8010b66 <__swhatbuf_r+0x3e>
 8010b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b48:	e00e      	b.n	8010b68 <__swhatbuf_r+0x40>
 8010b4a:	466a      	mov	r2, sp
 8010b4c:	f000 f8b2 	bl	8010cb4 <_fstat_r>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	dbf2      	blt.n	8010b3a <__swhatbuf_r+0x12>
 8010b54:	9a01      	ldr	r2, [sp, #4]
 8010b56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b5e:	425a      	negs	r2, r3
 8010b60:	415a      	adcs	r2, r3
 8010b62:	602a      	str	r2, [r5, #0]
 8010b64:	e7ee      	b.n	8010b44 <__swhatbuf_r+0x1c>
 8010b66:	2340      	movs	r3, #64	; 0x40
 8010b68:	2000      	movs	r0, #0
 8010b6a:	6023      	str	r3, [r4, #0]
 8010b6c:	b016      	add	sp, #88	; 0x58
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}

08010b70 <__smakebuf_r>:
 8010b70:	898b      	ldrh	r3, [r1, #12]
 8010b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b74:	079d      	lsls	r5, r3, #30
 8010b76:	4606      	mov	r6, r0
 8010b78:	460c      	mov	r4, r1
 8010b7a:	d507      	bpl.n	8010b8c <__smakebuf_r+0x1c>
 8010b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b80:	6023      	str	r3, [r4, #0]
 8010b82:	6123      	str	r3, [r4, #16]
 8010b84:	2301      	movs	r3, #1
 8010b86:	6163      	str	r3, [r4, #20]
 8010b88:	b002      	add	sp, #8
 8010b8a:	bd70      	pop	{r4, r5, r6, pc}
 8010b8c:	ab01      	add	r3, sp, #4
 8010b8e:	466a      	mov	r2, sp
 8010b90:	f7ff ffca 	bl	8010b28 <__swhatbuf_r>
 8010b94:	9900      	ldr	r1, [sp, #0]
 8010b96:	4605      	mov	r5, r0
 8010b98:	4630      	mov	r0, r6
 8010b9a:	f7ff fa6b 	bl	8010074 <_malloc_r>
 8010b9e:	b948      	cbnz	r0, 8010bb4 <__smakebuf_r+0x44>
 8010ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ba4:	059a      	lsls	r2, r3, #22
 8010ba6:	d4ef      	bmi.n	8010b88 <__smakebuf_r+0x18>
 8010ba8:	f023 0303 	bic.w	r3, r3, #3
 8010bac:	f043 0302 	orr.w	r3, r3, #2
 8010bb0:	81a3      	strh	r3, [r4, #12]
 8010bb2:	e7e3      	b.n	8010b7c <__smakebuf_r+0xc>
 8010bb4:	4b0d      	ldr	r3, [pc, #52]	; (8010bec <__smakebuf_r+0x7c>)
 8010bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010bb8:	89a3      	ldrh	r3, [r4, #12]
 8010bba:	6020      	str	r0, [r4, #0]
 8010bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bc0:	81a3      	strh	r3, [r4, #12]
 8010bc2:	9b00      	ldr	r3, [sp, #0]
 8010bc4:	6163      	str	r3, [r4, #20]
 8010bc6:	9b01      	ldr	r3, [sp, #4]
 8010bc8:	6120      	str	r0, [r4, #16]
 8010bca:	b15b      	cbz	r3, 8010be4 <__smakebuf_r+0x74>
 8010bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	f000 f881 	bl	8010cd8 <_isatty_r>
 8010bd6:	b128      	cbz	r0, 8010be4 <__smakebuf_r+0x74>
 8010bd8:	89a3      	ldrh	r3, [r4, #12]
 8010bda:	f023 0303 	bic.w	r3, r3, #3
 8010bde:	f043 0301 	orr.w	r3, r3, #1
 8010be2:	81a3      	strh	r3, [r4, #12]
 8010be4:	89a0      	ldrh	r0, [r4, #12]
 8010be6:	4305      	orrs	r5, r0
 8010be8:	81a5      	strh	r5, [r4, #12]
 8010bea:	e7cd      	b.n	8010b88 <__smakebuf_r+0x18>
 8010bec:	0800fdf9 	.word	0x0800fdf9

08010bf0 <__malloc_lock>:
 8010bf0:	4801      	ldr	r0, [pc, #4]	; (8010bf8 <__malloc_lock+0x8>)
 8010bf2:	f7ff b9e5 	b.w	800ffc0 <__retarget_lock_acquire_recursive>
 8010bf6:	bf00      	nop
 8010bf8:	20006998 	.word	0x20006998

08010bfc <__malloc_unlock>:
 8010bfc:	4801      	ldr	r0, [pc, #4]	; (8010c04 <__malloc_unlock+0x8>)
 8010bfe:	f7ff b9e0 	b.w	800ffc2 <__retarget_lock_release_recursive>
 8010c02:	bf00      	nop
 8010c04:	20006998 	.word	0x20006998

08010c08 <_read_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4d07      	ldr	r5, [pc, #28]	; (8010c28 <_read_r+0x20>)
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	4608      	mov	r0, r1
 8010c10:	4611      	mov	r1, r2
 8010c12:	2200      	movs	r2, #0
 8010c14:	602a      	str	r2, [r5, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	f7f0 f848 	bl	8000cac <_read>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d102      	bne.n	8010c26 <_read_r+0x1e>
 8010c20:	682b      	ldr	r3, [r5, #0]
 8010c22:	b103      	cbz	r3, 8010c26 <_read_r+0x1e>
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	bd38      	pop	{r3, r4, r5, pc}
 8010c28:	20006990 	.word	0x20006990

08010c2c <_raise_r>:
 8010c2c:	291f      	cmp	r1, #31
 8010c2e:	b538      	push	{r3, r4, r5, lr}
 8010c30:	4604      	mov	r4, r0
 8010c32:	460d      	mov	r5, r1
 8010c34:	d904      	bls.n	8010c40 <_raise_r+0x14>
 8010c36:	2316      	movs	r3, #22
 8010c38:	6003      	str	r3, [r0, #0]
 8010c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c3e:	bd38      	pop	{r3, r4, r5, pc}
 8010c40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010c42:	b112      	cbz	r2, 8010c4a <_raise_r+0x1e>
 8010c44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c48:	b94b      	cbnz	r3, 8010c5e <_raise_r+0x32>
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f000 f830 	bl	8010cb0 <_getpid_r>
 8010c50:	462a      	mov	r2, r5
 8010c52:	4601      	mov	r1, r0
 8010c54:	4620      	mov	r0, r4
 8010c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c5a:	f000 b817 	b.w	8010c8c <_kill_r>
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d00a      	beq.n	8010c78 <_raise_r+0x4c>
 8010c62:	1c59      	adds	r1, r3, #1
 8010c64:	d103      	bne.n	8010c6e <_raise_r+0x42>
 8010c66:	2316      	movs	r3, #22
 8010c68:	6003      	str	r3, [r0, #0]
 8010c6a:	2001      	movs	r0, #1
 8010c6c:	e7e7      	b.n	8010c3e <_raise_r+0x12>
 8010c6e:	2400      	movs	r4, #0
 8010c70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010c74:	4628      	mov	r0, r5
 8010c76:	4798      	blx	r3
 8010c78:	2000      	movs	r0, #0
 8010c7a:	e7e0      	b.n	8010c3e <_raise_r+0x12>

08010c7c <raise>:
 8010c7c:	4b02      	ldr	r3, [pc, #8]	; (8010c88 <raise+0xc>)
 8010c7e:	4601      	mov	r1, r0
 8010c80:	6818      	ldr	r0, [r3, #0]
 8010c82:	f7ff bfd3 	b.w	8010c2c <_raise_r>
 8010c86:	bf00      	nop
 8010c88:	20000018 	.word	0x20000018

08010c8c <_kill_r>:
 8010c8c:	b538      	push	{r3, r4, r5, lr}
 8010c8e:	4d07      	ldr	r5, [pc, #28]	; (8010cac <_kill_r+0x20>)
 8010c90:	2300      	movs	r3, #0
 8010c92:	4604      	mov	r4, r0
 8010c94:	4608      	mov	r0, r1
 8010c96:	4611      	mov	r1, r2
 8010c98:	602b      	str	r3, [r5, #0]
 8010c9a:	f7ef ffeb 	bl	8000c74 <_kill>
 8010c9e:	1c43      	adds	r3, r0, #1
 8010ca0:	d102      	bne.n	8010ca8 <_kill_r+0x1c>
 8010ca2:	682b      	ldr	r3, [r5, #0]
 8010ca4:	b103      	cbz	r3, 8010ca8 <_kill_r+0x1c>
 8010ca6:	6023      	str	r3, [r4, #0]
 8010ca8:	bd38      	pop	{r3, r4, r5, pc}
 8010caa:	bf00      	nop
 8010cac:	20006990 	.word	0x20006990

08010cb0 <_getpid_r>:
 8010cb0:	f7ef bfd8 	b.w	8000c64 <_getpid>

08010cb4 <_fstat_r>:
 8010cb4:	b538      	push	{r3, r4, r5, lr}
 8010cb6:	4d07      	ldr	r5, [pc, #28]	; (8010cd4 <_fstat_r+0x20>)
 8010cb8:	2300      	movs	r3, #0
 8010cba:	4604      	mov	r4, r0
 8010cbc:	4608      	mov	r0, r1
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	602b      	str	r3, [r5, #0]
 8010cc2:	f7f0 f838 	bl	8000d36 <_fstat>
 8010cc6:	1c43      	adds	r3, r0, #1
 8010cc8:	d102      	bne.n	8010cd0 <_fstat_r+0x1c>
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	b103      	cbz	r3, 8010cd0 <_fstat_r+0x1c>
 8010cce:	6023      	str	r3, [r4, #0]
 8010cd0:	bd38      	pop	{r3, r4, r5, pc}
 8010cd2:	bf00      	nop
 8010cd4:	20006990 	.word	0x20006990

08010cd8 <_isatty_r>:
 8010cd8:	b538      	push	{r3, r4, r5, lr}
 8010cda:	4d06      	ldr	r5, [pc, #24]	; (8010cf4 <_isatty_r+0x1c>)
 8010cdc:	2300      	movs	r3, #0
 8010cde:	4604      	mov	r4, r0
 8010ce0:	4608      	mov	r0, r1
 8010ce2:	602b      	str	r3, [r5, #0]
 8010ce4:	f7f0 f837 	bl	8000d56 <_isatty>
 8010ce8:	1c43      	adds	r3, r0, #1
 8010cea:	d102      	bne.n	8010cf2 <_isatty_r+0x1a>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	b103      	cbz	r3, 8010cf2 <_isatty_r+0x1a>
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	bd38      	pop	{r3, r4, r5, pc}
 8010cf4:	20006990 	.word	0x20006990

08010cf8 <_init>:
 8010cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfa:	bf00      	nop
 8010cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cfe:	bc08      	pop	{r3}
 8010d00:	469e      	mov	lr, r3
 8010d02:	4770      	bx	lr

08010d04 <_fini>:
 8010d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d06:	bf00      	nop
 8010d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d0a:	bc08      	pop	{r3}
 8010d0c:	469e      	mov	lr, r3
 8010d0e:	4770      	bx	lr
