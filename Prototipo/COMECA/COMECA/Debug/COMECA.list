
COMECA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ec8  08011e98  08011e98  00021e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d60  08014d60  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08014d60  08014d60  00024d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d68  08014d68  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d68  08014d68  00024d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d6c  08014d6c  00024d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08014d70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b04  20000098  08014e08  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008b9c  08014e08  00038b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000323c4  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eb5  00000000  00000000  0006248c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00068348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001790  00000000  00000000  00069ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d9cf  00000000  00000000  0006b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028173  00000000  00000000  00098c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2bc2  00000000  00000000  000c0dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a397c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c74  00000000  00000000  001a39d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011e80 	.word	0x08011e80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08011e80 	.word	0x08011e80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <getCaliperNumberGivenClockPin>:
static GPIO_TypeDef * CAL_DATA_PORT_MAPPING[NUMBER_OF_CALIPERS] = {GPIOE, GPIOB, GPIOA, GPIOE};
static uint16_t CAL_DATA_PIN_MAPPING[NUMBER_OF_CALIPERS] = {GPIO_PIN_11, GPIO_PIN_1, GPIO_PIN_0, GPIO_PIN_4};

static uint16_t CAL_CLK_MAPPING[NUMBER_OF_CALIPERS] = {CAL1_CLK_Pin, CAL2_CLK_Pin, CAL3_CLK_Pin, CAL4_CLK_Pin};

int getCaliperNumberGivenClockPin(uint16_t CLK_Pin){
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	int i;
	for(i=0; i<NUMBER_OF_CALIPERS; i++) { if(CAL_CLK_MAPPING[i] == CLK_Pin){ break; } }
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e009      	b.n	80005ac <getCaliperNumberGivenClockPin+0x24>
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <getCaliperNumberGivenClockPin+0x3c>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a0:	88fa      	ldrh	r2, [r7, #6]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d006      	beq.n	80005b4 <getCaliperNumberGivenClockPin+0x2c>
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	ddf2      	ble.n	8000598 <getCaliperNumberGivenClockPin+0x10>
 80005b2:	e000      	b.n	80005b6 <getCaliperNumberGivenClockPin+0x2e>
 80005b4:	bf00      	nop
	return i;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000018 	.word	0x20000018

080005c8 <getCaliperData>:

bool getCaliperData(caliper_number curr_caliper){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(CAL_DATA_PORT_MAPPING[curr_caliper],CAL_DATA_PIN_MAPPING[curr_caliper]);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <getCaliperData+0x38>)
 80005d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4909      	ldr	r1, [pc, #36]	; (8000604 <getCaliperData+0x3c>)
 80005de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4610      	mov	r0, r2
 80005e6:	f004 fcf5 	bl	8004fd4 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	20000010 	.word	0x20000010

08000608 <processBit>:

void processBit(caliper_number curr_caliper){
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].bit.index == 0){digimatic[curr_caliper].frame.data = 0;}
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	492a      	ldr	r1, [pc, #168]	; (80006c0 <processBit+0xb8>)
 8000616:	4613      	mov	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4413      	add	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	440b      	add	r3, r1
 8000620:	330e      	adds	r3, #14
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d109      	bne.n	800063c <processBit+0x34>
 8000628:	79fa      	ldrb	r2, [r7, #7]
 800062a:	4925      	ldr	r1, [pc, #148]	; (80006c0 <processBit+0xb8>)
 800062c:	4613      	mov	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	440b      	add	r3, r1
 8000636:	3311      	adds	r3, #17
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

	uint8_t read_bit = getCaliperData(curr_caliper);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffc2 	bl	80005c8 <getCaliperData>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]

	digimatic[curr_caliper].frame.data |= read_bit << digimatic[curr_caliper].bit.index;
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	491d      	ldr	r1, [pc, #116]	; (80006c0 <processBit+0xb8>)
 800064c:	4613      	mov	r3, r2
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	440b      	add	r3, r1
 8000656:	3311      	adds	r3, #17
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b259      	sxtb	r1, r3
 800065c:	7bf8      	ldrb	r0, [r7, #15]
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	4c17      	ldr	r4, [pc, #92]	; (80006c0 <processBit+0xb8>)
 8000662:	4613      	mov	r3, r2
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	4413      	add	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4423      	add	r3, r4
 800066c:	330e      	adds	r3, #14
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	fa00 f303 	lsl.w	r3, r0, r3
 8000674:	b25b      	sxtb	r3, r3
 8000676:	430b      	orrs	r3, r1
 8000678:	b25b      	sxtb	r3, r3
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	b2d8      	uxtb	r0, r3
 800067e:	4910      	ldr	r1, [pc, #64]	; (80006c0 <processBit+0xb8>)
 8000680:	4613      	mov	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	4413      	add	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	440b      	add	r3, r1
 800068a:	3311      	adds	r3, #17
 800068c:	4602      	mov	r2, r0
 800068e:	701a      	strb	r2, [r3, #0]

	digimatic[curr_caliper].bit.index++;
 8000690:	79fa      	ldrb	r2, [r7, #7]
 8000692:	490b      	ldr	r1, [pc, #44]	; (80006c0 <processBit+0xb8>)
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	440b      	add	r3, r1
 800069e:	330e      	adds	r3, #14
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	b2d8      	uxtb	r0, r3
 80006a6:	4906      	ldr	r1, [pc, #24]	; (80006c0 <processBit+0xb8>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	440b      	add	r3, r1
 80006b2:	330e      	adds	r3, #14
 80006b4:	4602      	mov	r2, r0
 80006b6:	701a      	strb	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	200000b4 	.word	0x200000b4

080006c4 <onRisingEdgeOfReqSignal>:


void onRisingEdgeOfReqSignal(caliper_number curr_caliper){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	digimatic[curr_caliper].caliper_state = START;
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <onRisingEdgeOfReqSignal+0x28>)
 80006d2:	4613      	mov	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	440b      	add	r3, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	200000b4 	.word	0x200000b4

080006f0 <onRisingEdgeOfClockSignal>:


void onRisingEdgeOfClockSignal(caliper_number curr_caliper){
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].caliper_state != IDLE && digimatic[curr_caliper].caliper_state != FINISHED){
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	4951      	ldr	r1, [pc, #324]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80006fe:	4613      	mov	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4413      	add	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	440b      	add	r3, r1
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 8095 	beq.w	800083a <onRisingEdgeOfClockSignal+0x14a>
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	494c      	ldr	r1, [pc, #304]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4413      	add	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	440b      	add	r3, r1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	f000 808a 	beq.w	800083a <onRisingEdgeOfClockSignal+0x14a>
		digimatic[curr_caliper].caliper_state = GETTING_FRAMES; // this doesn't change unless its last frame (implemented below)
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	4946      	ldr	r1, [pc, #280]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800072a:	4613      	mov	r3, r2
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	440b      	add	r3, r1
 8000734:	2202      	movs	r2, #2
 8000736:	701a      	strb	r2, [r3, #0]
		if(digimatic[curr_caliper].frame.index == 0){
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	4942      	ldr	r1, [pc, #264]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800073c:	4613      	mov	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	4413      	add	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	440b      	add	r3, r1
 8000746:	3310      	adds	r3, #16
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10c      	bne.n	8000768 <onRisingEdgeOfClockSignal+0x78>
			memset(&digimatic[curr_caliper].frames, 0, NUMBER_OF_FRAMES*sizeof(digimatic[curr_caliper].frames[0]));
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	4413      	add	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800075a:	4413      	add	r3, r2
 800075c:	3301      	adds	r3, #1
 800075e:	220d      	movs	r2, #13
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f010 f950 	bl	8010a08 <memset>
		}

		processBit(curr_caliper);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff4c 	bl	8000608 <processBit>

		if(digimatic[curr_caliper].bit.index == BITS_PER_FRAME){ // tengo un frame guardado en digimatic.frame.data
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	4934      	ldr	r1, [pc, #208]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000774:	4613      	mov	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	440b      	add	r3, r1
 800077e:	330e      	adds	r3, #14
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d13b      	bne.n	80007fe <onRisingEdgeOfClockSignal+0x10e>
			digimatic[curr_caliper].frames[digimatic[curr_caliper].frame.index] = digimatic[curr_caliper].frame.data; // lo guardo en el array
 8000786:	79f9      	ldrb	r1, [r7, #7]
 8000788:	79fa      	ldrb	r2, [r7, #7]
 800078a:	79f8      	ldrb	r0, [r7, #7]
 800078c:	4c2d      	ldr	r4, [pc, #180]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800078e:	4603      	mov	r3, r0
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4403      	add	r3, r0
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4423      	add	r3, r4
 8000798:	3310      	adds	r3, #16
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461c      	mov	r4, r3
 800079e:	4829      	ldr	r0, [pc, #164]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007a0:	460b      	mov	r3, r1
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4403      	add	r3, r0
 80007aa:	3311      	adds	r3, #17
 80007ac:	7818      	ldrb	r0, [r3, #0]
 80007ae:	4925      	ldr	r1, [pc, #148]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	440b      	add	r3, r1
 80007ba:	4423      	add	r3, r4
 80007bc:	3301      	adds	r3, #1
 80007be:	4602      	mov	r2, r0
 80007c0:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].frame.index++; // avanzo en array
 80007c2:	79fa      	ldrb	r2, [r7, #7]
 80007c4:	491f      	ldr	r1, [pc, #124]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	440b      	add	r3, r1
 80007d0:	3310      	adds	r3, #16
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	491a      	ldr	r1, [pc, #104]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	440b      	add	r3, r1
 80007e4:	3310      	adds	r3, #16
 80007e6:	4602      	mov	r2, r0
 80007e8:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].bit.index = 0; // reinicio el index de bit
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4915      	ldr	r1, [pc, #84]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	440b      	add	r3, r1
 80007f8:	330e      	adds	r3, #14
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
		}

		if(digimatic[curr_caliper].frame.index == NUMBER_OF_FRAMES){
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	4910      	ldr	r1, [pc, #64]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	440b      	add	r3, r1
 800080c:	3310      	adds	r3, #16
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b0d      	cmp	r3, #13
 8000812:	d112      	bne.n	800083a <onRisingEdgeOfClockSignal+0x14a>
			digimatic[curr_caliper].frame.index = 0;
 8000814:	79fa      	ldrb	r2, [r7, #7]
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000818:	4613      	mov	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	440b      	add	r3, r1
 8000822:	3310      	adds	r3, #16
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].caliper_state = FINISHED;
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	4906      	ldr	r1, [pc, #24]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	440b      	add	r3, r1
 8000836:	2203      	movs	r2, #3
 8000838:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	bf00      	nop
 8000844:	200000b4 	.word	0x200000b4

08000848 <json_hexadecimal_digit>:
                         bytes). */
  size_t error;
};

json_weak int json_hexadecimal_digit(const char c);
int json_hexadecimal_digit(const char c) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ('0' <= c && c <= '9') {
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b2f      	cmp	r3, #47	; 0x2f
 8000856:	d905      	bls.n	8000864 <json_hexadecimal_digit+0x1c>
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b39      	cmp	r3, #57	; 0x39
 800085c:	d802      	bhi.n	8000864 <json_hexadecimal_digit+0x1c>
    return c - '0';
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	3b30      	subs	r3, #48	; 0x30
 8000862:	e013      	b.n	800088c <json_hexadecimal_digit+0x44>
  }
  if ('a' <= c && c <= 'f') {
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	2b60      	cmp	r3, #96	; 0x60
 8000868:	d905      	bls.n	8000876 <json_hexadecimal_digit+0x2e>
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b66      	cmp	r3, #102	; 0x66
 800086e:	d802      	bhi.n	8000876 <json_hexadecimal_digit+0x2e>
    return c - 'a' + 10;
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	3b57      	subs	r3, #87	; 0x57
 8000874:	e00a      	b.n	800088c <json_hexadecimal_digit+0x44>
  }
  if ('A' <= c && c <= 'F') {
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d905      	bls.n	8000888 <json_hexadecimal_digit+0x40>
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	2b46      	cmp	r3, #70	; 0x46
 8000880:	d802      	bhi.n	8000888 <json_hexadecimal_digit+0x40>
    return c - 'A' + 10;
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	3b37      	subs	r3, #55	; 0x37
 8000886:	e001      	b.n	800088c <json_hexadecimal_digit+0x44>
  }
  return -1;
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <json_hexadecimal_value>:

json_weak int json_hexadecimal_value(const char *c, const unsigned long size,
                                     unsigned long *result);
int json_hexadecimal_value(const char *c, const unsigned long size,
                           unsigned long *result) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  const char *p;
  int digit;

  if (size > sizeof(unsigned long) * 2) {
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d901      	bls.n	80008ae <json_hexadecimal_value+0x16>
    return 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e02a      	b.n	8000904 <json_hexadecimal_value+0x6c>
  }

  *result = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
  for (p = c; (unsigned long)(p - c) < size; ++p) {
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e01c      	b.n	80008f4 <json_hexadecimal_value+0x5c>
    *result <<= 4;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	011a      	lsls	r2, r3, #4
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
    digit = json_hexadecimal_digit(*p);
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ffbd 	bl	8000848 <json_hexadecimal_digit>
 80008ce:	6138      	str	r0, [r7, #16]
    if (digit < 0 || digit > 15) {
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db02      	blt.n	80008dc <json_hexadecimal_value+0x44>
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	dd01      	ble.n	80008e0 <json_hexadecimal_value+0x48>
      return 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	e011      	b.n	8000904 <json_hexadecimal_value+0x6c>
    }
    *result |= (unsigned char)digit;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	431a      	orrs	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	601a      	str	r2, [r3, #0]
  for (p = c; (unsigned long)(p - c) < size; ++p) {
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4293      	cmp	r3, r2
 8000900:	d8db      	bhi.n	80008ba <json_hexadecimal_value+0x22>
  }
  return 1;
 8000902:	2301      	movs	r3, #1
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <json_skip_whitespace>:

json_weak int json_skip_whitespace(struct json_parse_state_s *state);
int json_skip_whitespace(struct json_parse_state_s *state) {
 800090c:	b480      	push	{r7}
 800090e:	b087      	sub	sp, #28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  size_t offset = state->offset;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	613b      	str	r3, [r7, #16]
  const char *const src = state->src;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]

  /* the only valid whitespace according to ECMA-404 is ' ', '\n', '\r' and
   * '\t'. */
  switch (src[offset]) {
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	4413      	add	r3, r2
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	3b09      	subs	r3, #9
 8000930:	2b17      	cmp	r3, #23
 8000932:	bf8c      	ite	hi
 8000934:	2201      	movhi	r2, #1
 8000936:	2200      	movls	r2, #0
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	2a00      	cmp	r2, #0
 800093c:	d10a      	bne.n	8000954 <json_skip_whitespace+0x48>
 800093e:	2201      	movs	r2, #1
 8000940:	409a      	lsls	r2, r3
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <json_skip_whitespace+0x108>)
 8000944:	4013      	ands	r3, r2
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf14      	ite	ne
 800094a:	2301      	movne	r3, #1
 800094c:	2300      	moveq	r3, #0
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <json_skip_whitespace+0x4c>
  default:
    return 0;
 8000954:	2300      	movs	r3, #0
 8000956:	e057      	b.n	8000a08 <json_skip_whitespace+0xfc>
  case ' ':
  case '\r':
  case '\t':
  case '\n':
    break;
 8000958:	bf00      	nop
 800095a:	e000      	b.n	800095e <json_skip_whitespace+0x52>
  }

  do {
 800095c:	bf00      	nop
    switch (src[offset]) {
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	3b09      	subs	r3, #9
 8000968:	2b17      	cmp	r3, #23
 800096a:	d833      	bhi.n	80009d4 <json_skip_whitespace+0xc8>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <json_skip_whitespace+0x68>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	080009f1 	.word	0x080009f1
 8000978:	080009df 	.word	0x080009df
 800097c:	080009d5 	.word	0x080009d5
 8000980:	080009d5 	.word	0x080009d5
 8000984:	080009f1 	.word	0x080009f1
 8000988:	080009d5 	.word	0x080009d5
 800098c:	080009d5 	.word	0x080009d5
 8000990:	080009d5 	.word	0x080009d5
 8000994:	080009d5 	.word	0x080009d5
 8000998:	080009d5 	.word	0x080009d5
 800099c:	080009d5 	.word	0x080009d5
 80009a0:	080009d5 	.word	0x080009d5
 80009a4:	080009d5 	.word	0x080009d5
 80009a8:	080009d5 	.word	0x080009d5
 80009ac:	080009d5 	.word	0x080009d5
 80009b0:	080009d5 	.word	0x080009d5
 80009b4:	080009d5 	.word	0x080009d5
 80009b8:	080009d5 	.word	0x080009d5
 80009bc:	080009d5 	.word	0x080009d5
 80009c0:	080009d5 	.word	0x080009d5
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009d5 	.word	0x080009d5
 80009cc:	080009d5 	.word	0x080009d5
 80009d0:	080009f1 	.word	0x080009f1
    default:
      /* Update offset. */
      state->offset = offset;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	609a      	str	r2, [r3, #8]
      return 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	e014      	b.n	8000a08 <json_skip_whitespace+0xfc>
    case ' ':
    case '\r':
    case '\t':
      break;
    case '\n':
      state->line_no++;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	621a      	str	r2, [r3, #32]
      state->line_offset = offset;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
      break;
 80009ee:	e000      	b.n	80009f2 <json_skip_whitespace+0xe6>
      break;
 80009f0:	bf00      	nop
    }

    offset++;
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  } while (offset < size);
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d3ad      	bcc.n	800095c <json_skip_whitespace+0x50>

  /* Update offset. */
  state->offset = offset;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	609a      	str	r2, [r3, #8]
  return 1;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	371c      	adds	r7, #28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	00800013 	.word	0x00800013

08000a18 <json_skip_c_style_comments>:

json_weak int json_skip_c_style_comments(struct json_parse_state_s *state);
int json_skip_c_style_comments(struct json_parse_state_s *state) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* do we have a comment?. */
  if ('/' == state->src[state->offset]) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b2f      	cmp	r3, #47	; 0x2f
 8000a2e:	d17d      	bne.n	8000b2c <json_skip_c_style_comments+0x114>
    /* skip '/'. */
    state->offset++;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	609a      	str	r2, [r3, #8]

    if ('/' == state->src[state->offset]) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	4413      	add	r3, r2
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b2f      	cmp	r3, #47	; 0x2f
 8000a48:	d12b      	bne.n	8000aa2 <json_skip_c_style_comments+0x8a>
      /* we had a comment of the form //. */

      /* skip second '/'. */
      state->offset++;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	609a      	str	r2, [r3, #8]

      while (state->offset < state->size) {
 8000a54:	e01d      	b.n	8000a92 <json_skip_c_style_comments+0x7a>
        switch (state->src[state->offset]) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b0a      	cmp	r3, #10
 8000a64:	d005      	beq.n	8000a72 <json_skip_c_style_comments+0x5a>
        default:
          /* skip the character in the comment. */
          state->offset++;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
          break;
 8000a70:	e00f      	b.n	8000a92 <json_skip_c_style_comments+0x7a>
        case '\n':
          /* if we have a newline, our comment has ended! Skip the newline. */
          state->offset++;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	609a      	str	r2, [r3, #8]

          /* we entered a newline, so move our line info forward. */
          state->line_no++;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	621a      	str	r2, [r3, #32]
          state->line_offset = state->offset;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
          return 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e04d      	b.n	8000b2e <json_skip_c_style_comments+0x116>
      while (state->offset < state->size) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3db      	bcc.n	8000a56 <json_skip_c_style_comments+0x3e>
        }
      }

      /* we reached the end of the JSON file! */
      return 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e045      	b.n	8000b2e <json_skip_c_style_comments+0x116>
    } else if ('*' == state->src[state->offset]) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b2a      	cmp	r3, #42	; 0x2a
 8000ab0:	d13c      	bne.n	8000b2c <json_skip_c_style_comments+0x114>
      /* we had a comment in the C-style long form. */

      /* skip '*'. */
      state->offset++;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	609a      	str	r2, [r3, #8]

      while (state->offset + 1 < state->size) {
 8000abc:	e02d      	b.n	8000b1a <json_skip_c_style_comments+0x102>
        if (('*' == state->src[state->offset]) &&
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b2a      	cmp	r3, #42	; 0x2a
 8000acc:	d10f      	bne.n	8000aee <json_skip_c_style_comments+0xd6>
            ('/' == state->src[state->offset + 1])) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
        if (('*' == state->src[state->offset]) &&
 8000adc:	2b2f      	cmp	r3, #47	; 0x2f
 8000ade:	d106      	bne.n	8000aee <json_skip_c_style_comments+0xd6>
          /* we reached the end of our comment! */
          state->offset += 2;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	1c9a      	adds	r2, r3, #2
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
          return 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e01f      	b.n	8000b2e <json_skip_c_style_comments+0x116>
        } else if ('\n' == state->src[state->offset]) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	4413      	add	r3, r2
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	d108      	bne.n	8000b10 <json_skip_c_style_comments+0xf8>
          /* we entered a newline, so move our line info forward. */
          state->line_no++;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	621a      	str	r2, [r3, #32]
          state->line_offset = state->offset;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* skip character within comment. */
        state->offset++;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	609a      	str	r2, [r3, #8]
      while (state->offset + 1 < state->size) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d3ca      	bcc.n	8000abe <json_skip_c_style_comments+0xa6>
      }

      /* Comment wasn't ended correctly which is a failure. */
      return 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <json_skip_c_style_comments+0x116>
    }
  }

  /* we didn't have any comment, which is ok too! */
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <json_skip_all_skippables>:

json_weak int json_skip_all_skippables(struct json_parse_state_s *state);
int json_skip_all_skippables(struct json_parse_state_s *state) {
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  /* skip all whitespace and other skippables until there are none left. note
   * that the previous version suffered from read past errors should. the
   * stream end on json_skip_c_style_comments eg. '{"a" ' with comments flag.
   */

  int did_consume = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  const size_t size = state->size;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	60bb      	str	r3, [r7, #8]

  if (json_parse_flags_allow_c_style_comments & state->flags_bitset) {
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	f003 0320 	and.w	r3, r3, #32
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d022      	beq.n	8000b9e <json_skip_all_skippables+0x64>
    do {
      if (state->offset == size) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	68ba      	ldr	r2, [r7, #8]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d104      	bne.n	8000b6c <json_skip_all_skippables+0x32>
        state->error = json_parse_error_premature_end_of_buffer;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2207      	movs	r2, #7
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e034      	b.n	8000bd6 <json_skip_all_skippables+0x9c>
      }

      did_consume = json_skip_whitespace(state);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fecd 	bl	800090c <json_skip_whitespace>
 8000b72:	60f8      	str	r0, [r7, #12]

      /* This should really be checked on access, not in front of every call.
       */
      if (state->offset == size) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	68ba      	ldr	r2, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d104      	bne.n	8000b88 <json_skip_all_skippables+0x4e>
        state->error = json_parse_error_premature_end_of_buffer;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2207      	movs	r2, #7
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e026      	b.n	8000bd6 <json_skip_all_skippables+0x9c>
      }

      did_consume |= json_skip_c_style_comments(state);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff45 	bl	8000a18 <json_skip_c_style_comments>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
    } while (0 != did_consume);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1dd      	bne.n	8000b58 <json_skip_all_skippables+0x1e>
 8000b9c:	e010      	b.n	8000bc0 <json_skip_all_skippables+0x86>
  } else {
    do {
      if (state->offset == size) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d104      	bne.n	8000bb2 <json_skip_all_skippables+0x78>
        state->error = json_parse_error_premature_end_of_buffer;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2207      	movs	r2, #7
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e011      	b.n	8000bd6 <json_skip_all_skippables+0x9c>
      }

      did_consume = json_skip_whitespace(state);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff feaa 	bl	800090c <json_skip_whitespace>
 8000bb8:	60f8      	str	r0, [r7, #12]
    } while (0 != did_consume);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1ee      	bne.n	8000b9e <json_skip_all_skippables+0x64>
  }

  if (state->offset == size) {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d104      	bne.n	8000bd4 <json_skip_all_skippables+0x9a>
    state->error = json_parse_error_premature_end_of_buffer;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2207      	movs	r2, #7
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <json_skip_all_skippables+0x9c>
  }

  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <json_get_string_size>:
json_weak int json_get_value_size(struct json_parse_state_s *state,
                                  int is_global_object);

json_weak int json_get_string_size(struct json_parse_state_s *state,
                                   size_t is_key);
int json_get_string_size(struct json_parse_state_s *state, size_t is_key) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  size_t offset = state->offset;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  const size_t size = state->size;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	623b      	str	r3, [r7, #32]
  size_t data_size = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  const char *const src = state->src;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	61fb      	str	r3, [r7, #28]
  const int is_single_quote = '\'' == src[offset];
 8000c00:	69fa      	ldr	r2, [r7, #28]
 8000c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b27      	cmp	r3, #39	; 0x27
 8000c0a:	bf0c      	ite	eq
 8000c0c:	2301      	moveq	r3, #1
 8000c0e:	2300      	movne	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	61bb      	str	r3, [r7, #24]
  const char quote_to_use = is_single_quote ? '\'' : '"';
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <json_get_string_size+0x3e>
 8000c1a:	2327      	movs	r3, #39	; 0x27
 8000c1c:	e000      	b.n	8000c20 <json_get_string_size+0x40>
 8000c1e:	2322      	movs	r3, #34	; 0x22
 8000c20:	75fb      	strb	r3, [r7, #23]
  const size_t flags_bitset = state->flags_bitset;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	613b      	str	r3, [r7, #16]
  unsigned long codepoint;
  unsigned long high_surrogate = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24

  if ((json_parse_flags_allow_location_information & flags_bitset) != 0 &&
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d009      	beq.n	8000c4a <json_get_string_size+0x6a>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <json_get_string_size+0x6a>
      is_key != 0) {
    state->dom_size += sizeof(struct json_string_ex_s);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f103 0214 	add.w	r2, r3, #20
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	619a      	str	r2, [r3, #24]
 8000c48:	e005      	b.n	8000c56 <json_get_string_size+0x76>
  } else {
    state->dom_size += sizeof(struct json_string_s);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	f103 0208 	add.w	r2, r3, #8
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	619a      	str	r2, [r3, #24]
  }

  if ('"' != src[offset]) {
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b22      	cmp	r3, #34	; 0x22
 8000c60:	d00f      	beq.n	8000c82 <json_get_string_size+0xa2>
    /* if we are allowed single quoted strings check for that too. */
    if (!((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <json_get_string_size+0x92>
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d107      	bne.n	8000c82 <json_get_string_size+0xa2>
          is_single_quote)) {
      state->error = json_parse_error_expected_opening_quote;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2203      	movs	r2, #3
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c7c:	609a      	str	r2, [r3, #8]
      return 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e151      	b.n	8000f26 <json_get_string_size+0x346>
    }
  }

  /* skip leading '"' or '\''. */
  offset++;
 8000c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c84:	3301      	adds	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c

  while ((offset < size) && (quote_to_use != src[offset])) {
 8000c88:	e122      	b.n	8000ed0 <json_get_string_size+0x2f0>
    /* add space for the character. */
    data_size++;
 8000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28

    switch (src[offset]) {
 8000c90:	69fa      	ldr	r2, [r7, #28]
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <json_get_string_size+0xc0>
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	d107      	bne.n	8000cb0 <json_get_string_size+0xd0>
    default:
      break;
    case '\0':
    case '\t':
      state->error = json_parse_error_invalid_string;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000caa:	609a      	str	r2, [r3, #8]
      return 1;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e13a      	b.n	8000f26 <json_get_string_size+0x346>
      break;
 8000cb0:	bf00      	nop
    }

    if ('\\' == src[offset]) {
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b5c      	cmp	r3, #92	; 0x5c
 8000cbc:	f040 80e8 	bne.w	8000e90 <json_get_string_size+0x2b0>
      /* skip reverse solidus character. */
      offset++;
 8000cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (offset == size) {
 8000cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d107      	bne.n	8000cde <json_get_string_size+0xfe>
        state->error = json_parse_error_premature_end_of_buffer;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cd8:	609a      	str	r2, [r3, #8]
        return 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e123      	b.n	8000f26 <json_get_string_size+0x346>
      }

      switch (src[offset]) {
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce2:	4413      	add	r3, r2
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b75      	cmp	r3, #117	; 0x75
 8000ce8:	dc40      	bgt.n	8000d6c <json_get_string_size+0x18c>
 8000cea:	2b5c      	cmp	r3, #92	; 0x5c
 8000cec:	da04      	bge.n	8000cf8 <json_get_string_size+0x118>
 8000cee:	2b22      	cmp	r3, #34	; 0x22
 8000cf0:	d044      	beq.n	8000d7c <json_get_string_size+0x19c>
 8000cf2:	2b2f      	cmp	r3, #47	; 0x2f
 8000cf4:	d042      	beq.n	8000d7c <json_get_string_size+0x19c>
 8000cf6:	e039      	b.n	8000d6c <json_get_string_size+0x18c>
 8000cf8:	3b5c      	subs	r3, #92	; 0x5c
 8000cfa:	2b19      	cmp	r3, #25
 8000cfc:	d836      	bhi.n	8000d6c <json_get_string_size+0x18c>
 8000cfe:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <json_get_string_size+0x124>)
 8000d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d04:	08000d7d 	.word	0x08000d7d
 8000d08:	08000d6d 	.word	0x08000d6d
 8000d0c:	08000d6d 	.word	0x08000d6d
 8000d10:	08000d6d 	.word	0x08000d6d
 8000d14:	08000d6d 	.word	0x08000d6d
 8000d18:	08000d6d 	.word	0x08000d6d
 8000d1c:	08000d7d 	.word	0x08000d7d
 8000d20:	08000d6d 	.word	0x08000d6d
 8000d24:	08000d6d 	.word	0x08000d6d
 8000d28:	08000d6d 	.word	0x08000d6d
 8000d2c:	08000d7d 	.word	0x08000d7d
 8000d30:	08000d6d 	.word	0x08000d6d
 8000d34:	08000d6d 	.word	0x08000d6d
 8000d38:	08000d6d 	.word	0x08000d6d
 8000d3c:	08000d6d 	.word	0x08000d6d
 8000d40:	08000d6d 	.word	0x08000d6d
 8000d44:	08000d6d 	.word	0x08000d6d
 8000d48:	08000d6d 	.word	0x08000d6d
 8000d4c:	08000d7d 	.word	0x08000d7d
 8000d50:	08000d6d 	.word	0x08000d6d
 8000d54:	08000d6d 	.word	0x08000d6d
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000d7d 	.word	0x08000d7d
 8000d60:	08000d6d 	.word	0x08000d6d
 8000d64:	08000d7d 	.word	0x08000d7d
 8000d68:	08000d85 	.word	0x08000d85
      default:
        state->error = json_parse_error_invalid_string_escape_sequence;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d76:	609a      	str	r2, [r3, #8]
        return 1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e0d4      	b.n	8000f26 <json_get_string_size+0x346>
      case 'f':
      case 'n':
      case 'r':
      case 't':
        /* all valid characters! */
        offset++;
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	3301      	adds	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000d82:	e0a5      	b.n	8000ed0 <json_get_string_size+0x2f0>
      case 'u':
        if (!(offset + 5 < size)) {
 8000d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d86:	3305      	adds	r3, #5
 8000d88:	6a3a      	ldr	r2, [r7, #32]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d807      	bhi.n	8000d9e <json_get_string_size+0x1be>
          /* invalid escaped unicode sequence! */
          state->error = json_parse_error_invalid_string_escape_sequence;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2204      	movs	r2, #4
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d98:	609a      	str	r2, [r3, #8]
          return 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0c3      	b.n	8000f26 <json_get_string_size+0x346>
        }

        codepoint = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
        if (!json_hexadecimal_value(&src[offset + 1], 4, &codepoint)) {
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	3301      	adds	r3, #1
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	4413      	add	r3, r2
 8000daa:	f107 020c 	add.w	r2, r7, #12
 8000dae:	2104      	movs	r1, #4
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fd71 	bl	8000898 <json_hexadecimal_value>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d107      	bne.n	8000dcc <json_get_string_size+0x1ec>
          /* escaped unicode sequences must contain 4 hexadecimal digits! */
          state->error = json_parse_error_invalid_string_escape_sequence;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dc6:	609a      	str	r2, [r3, #8]
          return 1;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e0ac      	b.n	8000f26 <json_get_string_size+0x346>
         * Note: the high and low surrogate halves used by UTF-16 (U+D800
         * through U+DFFF) and code points not encodable by UTF-16 (those after
         * U+10FFFF) are not legal Unicode values, and their UTF-8 encoding must
         * be treated as an invalid byte sequence. */

        if (high_surrogate != 0) {
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d015      	beq.n	8000dfe <json_get_string_size+0x21e>
          /* we previously read the high half of the \uxxxx\uxxxx pair, so now
           * we expect the low half. */
          if (codepoint >= 0xdc00 &&
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8000dd8:	d309      	bcc.n	8000dee <json_get_string_size+0x20e>
              codepoint <= 0xdfff) { /* low surrogate range. */
 8000dda:	68fb      	ldr	r3, [r7, #12]
          if (codepoint >= 0xdc00 &&
 8000ddc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000de0:	d205      	bcs.n	8000dee <json_get_string_size+0x20e>
            data_size += 3;
 8000de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000de4:	3303      	adds	r3, #3
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
            high_surrogate = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
 8000dec:	e04b      	b.n	8000e86 <json_get_string_size+0x2a6>
          } else {
            state->error = json_parse_error_invalid_string_escape_sequence;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2204      	movs	r2, #4
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
            state->offset = offset;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000df8:	609a      	str	r2, [r3, #8]
            return 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e093      	b.n	8000f26 <json_get_string_size+0x346>
          }
        } else if (codepoint <= 0x7f) {
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b7f      	cmp	r3, #127	; 0x7f
 8000e02:	d940      	bls.n	8000e86 <json_get_string_size+0x2a6>
          data_size += 0;
        } else if (codepoint <= 0x7ff) {
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e0a:	d203      	bcs.n	8000e14 <json_get_string_size+0x234>
          data_size += 1;
 8000e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0e:	3301      	adds	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e12:	e038      	b.n	8000e86 <json_get_string_size+0x2a6>
        } else if (codepoint >= 0xd800 &&
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8000e1a:	d321      	bcc.n	8000e60 <json_get_string_size+0x280>
                   codepoint <= 0xdbff) { /* high surrogate range. */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
        } else if (codepoint >= 0xd800 &&
 8000e1e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8000e22:	d21d      	bcs.n	8000e60 <json_get_string_size+0x280>
          /* The codepoint is the first half of a "utf-16 surrogate pair". so we
           * need the other half for it to be valid: \uHHHH\uLLLL. */
          if (offset + 11 > size || '\\' != src[offset + 5] ||
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	330b      	adds	r3, #11
 8000e28:	6a3a      	ldr	r2, [r7, #32]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d30d      	bcc.n	8000e4a <json_get_string_size+0x26a>
 8000e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e30:	3305      	adds	r3, #5
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b5c      	cmp	r3, #92	; 0x5c
 8000e3a:	d106      	bne.n	8000e4a <json_get_string_size+0x26a>
              'u' != src[offset + 6]) {
 8000e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3e:	3306      	adds	r3, #6
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	4413      	add	r3, r2
 8000e44:	781b      	ldrb	r3, [r3, #0]
          if (offset + 11 > size || '\\' != src[offset + 5] ||
 8000e46:	2b75      	cmp	r3, #117	; 0x75
 8000e48:	d007      	beq.n	8000e5a <json_get_string_size+0x27a>
            state->error = json_parse_error_invalid_string_escape_sequence;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	629a      	str	r2, [r3, #40]	; 0x28
            state->offset = offset;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e54:	609a      	str	r2, [r3, #8]
            return 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e065      	b.n	8000f26 <json_get_string_size+0x346>
          }
          high_surrogate = codepoint;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5e:	e012      	b.n	8000e86 <json_get_string_size+0x2a6>
        } else if (codepoint >= 0xd800 &&
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8000e66:	d30b      	bcc.n	8000e80 <json_get_string_size+0x2a0>
                   codepoint <= 0xdfff) { /* low surrogate range. */
 8000e68:	68fb      	ldr	r3, [r7, #12]
        } else if (codepoint >= 0xd800 &&
 8000e6a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8000e6e:	d207      	bcs.n	8000e80 <json_get_string_size+0x2a0>
          /* we did not read the other half before. */
          state->error = json_parse_error_invalid_string_escape_sequence;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2204      	movs	r2, #4
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e7a:	609a      	str	r2, [r3, #8]
          return 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e052      	b.n	8000f26 <json_get_string_size+0x346>
        } else {
          data_size += 2;
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	3302      	adds	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        /* escaped codepoints after 0xffff are supported in json through utf-16
         * surrogate pairs: \uD83D\uDD25 for U+1F525. */

        offset += 5;
 8000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e88:	3305      	adds	r3, #5
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8000e8c:	bf00      	nop
 8000e8e:	e01f      	b.n	8000ed0 <json_get_string_size+0x2f0>
      }
    } else if (('\r' == src[offset]) || ('\n' == src[offset])) {
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b0d      	cmp	r3, #13
 8000e9a:	d005      	beq.n	8000ea8 <json_get_string_size+0x2c8>
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b0a      	cmp	r3, #10
 8000ea6:	d110      	bne.n	8000eca <json_get_string_size+0x2ea>
      if (!(json_parse_flags_allow_multi_line_strings & flags_bitset)) {
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d107      	bne.n	8000ec2 <json_get_string_size+0x2e2>
        /* invalid escaped unicode sequence! */
        state->error = json_parse_error_invalid_string_escape_sequence;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ebc:	609a      	str	r2, [r3, #8]
        return 1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e031      	b.n	8000f26 <json_get_string_size+0x346>
      }

      offset++;
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ec8:	e002      	b.n	8000ed0 <json_get_string_size+0x2f0>
    } else {
      /* skip character (valid part of sequence). */
      offset++;
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	3301      	adds	r3, #1
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  while ((offset < size) && (quote_to_use != src[offset])) {
 8000ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d207      	bcs.n	8000ee8 <json_get_string_size+0x308>
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	7dfa      	ldrb	r2, [r7, #23]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	f47f aed1 	bne.w	8000c8a <json_get_string_size+0xaa>
    }
  }

  /* If the offset is equal to the size, we had a non-terminated string! */
  if (offset == size) {
 8000ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d108      	bne.n	8000f02 <json_get_string_size+0x322>
    state->error = json_parse_error_premature_end_of_buffer;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
    state->offset = offset - 1;
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	609a      	str	r2, [r3, #8]
    return 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e011      	b.n	8000f26 <json_get_string_size+0x346>
  }

  /* skip trailing '"' or '\''. */
  offset++;
 8000f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f04:	3301      	adds	r3, #1
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* add enough space to store the string. */
  state->data_size += data_size;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69da      	ldr	r2, [r3, #28]
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	441a      	add	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	61da      	str	r2, [r3, #28]

  /* one more byte for null terminator ending the string! */
  state->data_size++;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	61da      	str	r2, [r3, #28]

  /* update offset. */
  state->offset = offset;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f22:	609a      	str	r2, [r3, #8]

  return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3730      	adds	r7, #48	; 0x30
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop

08000f30 <is_valid_unquoted_key_char>:

json_weak int is_valid_unquoted_key_char(const char c);
int is_valid_unquoted_key_char(const char c) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  return (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') ||
          ('A' <= c && c <= 'Z') || ('_' == c));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b2f      	cmp	r3, #47	; 0x2f
 8000f3e:	d902      	bls.n	8000f46 <is_valid_unquoted_key_char+0x16>
  return (('0' <= c && c <= '9') || ('a' <= c && c <= 'z') ||
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b39      	cmp	r3, #57	; 0x39
 8000f44:	d90e      	bls.n	8000f64 <is_valid_unquoted_key_char+0x34>
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b60      	cmp	r3, #96	; 0x60
 8000f4a:	d902      	bls.n	8000f52 <is_valid_unquoted_key_char+0x22>
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b7a      	cmp	r3, #122	; 0x7a
 8000f50:	d908      	bls.n	8000f64 <is_valid_unquoted_key_char+0x34>
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b40      	cmp	r3, #64	; 0x40
 8000f56:	d902      	bls.n	8000f5e <is_valid_unquoted_key_char+0x2e>
          ('A' <= c && c <= 'Z') || ('_' == c));
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b5a      	cmp	r3, #90	; 0x5a
 8000f5c:	d902      	bls.n	8000f64 <is_valid_unquoted_key_char+0x34>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b5f      	cmp	r3, #95	; 0x5f
 8000f62:	d101      	bne.n	8000f68 <is_valid_unquoted_key_char+0x38>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <is_valid_unquoted_key_char+0x3a>
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <json_get_key_size>:

json_weak int json_get_key_size(struct json_parse_state_s *state);
int json_get_key_size(struct json_parse_state_s *state) {
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b088      	sub	sp, #32
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	617b      	str	r3, [r7, #20]

  if (json_parse_flags_allow_unquoted_keys & flags_bitset) {
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d059      	beq.n	8001042 <json_get_key_size+0xcc>
    size_t offset = state->offset;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61fb      	str	r3, [r7, #28]
    const size_t size = state->size;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]
    const char *const src = state->src;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
    size_t data_size = state->data_size;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	61bb      	str	r3, [r7, #24]

    /* if we are allowing unquoted keys, first grok for a quote... */
    if ('"' == src[offset]) {
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b22      	cmp	r3, #34	; 0x22
 8000fb0:	d105      	bne.n	8000fbe <json_get_key_size+0x48>
      /* ... if we got a comma, just parse the key as a string as normal. */
      return json_get_string_size(state, 1);
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fe13 	bl	8000be0 <json_get_string_size>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e046      	b.n	800104c <json_get_key_size+0xd6>
    } else if ((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d011      	beq.n	8000fec <json_get_key_size+0x76>
               ('\'' == src[offset])) {
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
    } else if ((json_parse_flags_allow_single_quoted_strings & flags_bitset) &&
 8000fd0:	2b27      	cmp	r3, #39	; 0x27
 8000fd2:	d10b      	bne.n	8000fec <json_get_key_size+0x76>
      /* ... if we got a comma, just parse the key as a string as normal. */
      return json_get_string_size(state, 1);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fe02 	bl	8000be0 <json_get_string_size>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	e035      	b.n	800104c <json_get_key_size+0xd6>
    } else {
      while ((offset < size) && is_valid_unquoted_key_char(src[offset])) {
        offset++;
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
        data_size++;
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	61bb      	str	r3, [r7, #24]
      while ((offset < size) && is_valid_unquoted_key_char(src[offset])) {
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d209      	bcs.n	8001008 <json_get_key_size+0x92>
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff97 	bl	8000f30 <is_valid_unquoted_key_char>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1eb      	bne.n	8000fe0 <json_get_key_size+0x6a>
      }

      /* one more byte for null terminator ending the string! */
      data_size++;
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	3301      	adds	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]

      if (json_parse_flags_allow_location_information & flags_bitset) {
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001014:	2b00      	cmp	r3, #0
 8001016:	d006      	beq.n	8001026 <json_get_key_size+0xb0>
        state->dom_size += sizeof(struct json_string_ex_s);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f103 0214 	add.w	r2, r3, #20
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
 8001024:	e005      	b.n	8001032 <json_get_key_size+0xbc>
      } else {
        state->dom_size += sizeof(struct json_string_s);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f103 0208 	add.w	r2, r3, #8
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
      }

      /* update offset. */
      state->offset = offset;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	609a      	str	r2, [r3, #8]

      /* update data_size. */
      state->data_size = data_size;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	61da      	str	r2, [r3, #28]

      return 0;
 800103e:	2300      	movs	r3, #0
 8001040:	e004      	b.n	800104c <json_get_key_size+0xd6>
    }
  } else {
    /* we are only allowed to have quoted keys, so just parse a string! */
    return json_get_string_size(state, 1);
 8001042:	2101      	movs	r1, #1
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fdcb 	bl	8000be0 <json_get_string_size>
 800104a:	4603      	mov	r3, r0
  }
}
 800104c:	4618      	mov	r0, r3
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <json_get_object_size>:

json_weak int json_get_object_size(struct json_parse_state_s *state,
                                   int is_global_object);
int json_get_object_size(struct json_parse_state_s *state,
                         int is_global_object) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	61bb      	str	r3, [r7, #24]
  const char *const src = state->src;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	613b      	str	r3, [r7, #16]
  size_t elements = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  int allow_comma = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  int found_closing_brace = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]

  if (is_global_object) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00f      	beq.n	80010a2 <json_get_object_size+0x4e>
    /* if we found an opening '{' of an object, we actually have a normal JSON
     * object at the root of the DOM... */
    if (!json_skip_all_skippables(state) && '{' == state->src[state->offset]) {
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fd59 	bl	8000b3a <json_skip_all_skippables>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <json_get_object_size+0x4e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b7b      	cmp	r3, #123	; 0x7b
 800109c:	d101      	bne.n	80010a2 <json_get_object_size+0x4e>
      /* . and we don't actually have a global object after all! */
      is_global_object = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
    }
  }

  if (!is_global_object) {
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d110      	bne.n	80010ca <json_get_object_size+0x76>
    if ('{' != src[state->offset]) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b7b      	cmp	r3, #123	; 0x7b
 80010b4:	d004      	beq.n	80010c0 <json_get_object_size+0x6c>
      state->error = json_parse_error_unknown;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	220b      	movs	r2, #11
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0e5      	b.n	800128c <json_get_object_size+0x238>
    }

    /* skip leading '{'. */
    state->offset++;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  }

  state->dom_size += sizeof(struct json_object_s);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f103 0208 	add.w	r2, r3, #8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]

  if ((state->offset == size) && !is_global_object) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d107      	bne.n	80010f0 <json_get_object_size+0x9c>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d104      	bne.n	80010f0 <json_get_object_size+0x9c>
    state->error = json_parse_error_premature_end_of_buffer;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2207      	movs	r2, #7
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0cd      	b.n	800128c <json_get_object_size+0x238>
  }

  do {
    if (!is_global_object) {
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d119      	bne.n	800112a <json_get_object_size+0xd6>
      if (json_skip_all_skippables(state)) {
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fd1f 	bl	8000b3a <json_skip_all_skippables>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d004      	beq.n	800110c <json_get_object_size+0xb8>
        state->error = json_parse_error_premature_end_of_buffer;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2207      	movs	r2, #7
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001108:	2301      	movs	r3, #1
 800110a:	e0bf      	b.n	800128c <json_get_object_size+0x238>
      }

      if ('}' == src[state->offset]) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b7d      	cmp	r3, #125	; 0x7d
 8001118:	d10e      	bne.n	8001138 <json_get_object_size+0xe4>
        /* skip trailing '}'. */
        state->offset++;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]

        found_closing_brace = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]

        /* finished the object! */
        break;
 8001128:	e095      	b.n	8001256 <json_get_object_size+0x202>
      }
    } else {
      /* we don't require brackets, so that means the object ends when the input
       * stream ends! */
      if (json_skip_all_skippables(state)) {
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fd05 	bl	8000b3a <json_skip_all_skippables>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 808e 	bne.w	8001254 <json_get_object_size+0x200>
        break;
      }
    }

    /* if we parsed at least once element previously, grok for a comma. */
    if (allow_comma) {
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d02b      	beq.n	8001196 <json_get_object_size+0x142>
      if (',' == src[state->offset]) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4413      	add	r3, r2
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b2c      	cmp	r3, #44	; 0x2c
 800114a:	d107      	bne.n	800115c <json_get_object_size+0x108>
        /* skip comma. */
        state->offset++;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	e00c      	b.n	8001176 <json_get_object_size+0x122>
      } else if (json_parse_flags_allow_no_commas & flags_bitset) {
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <json_get_object_size+0x118>
        /* we don't require a comma, and we didn't find one, which is ok! */
        allow_comma = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
 800116a:	e004      	b.n	8001176 <json_get_object_size+0x122>
      } else {
        /* otherwise we are required to have a comma, and we found none. */
        state->error = json_parse_error_expected_comma_or_closing_bracket;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001172:	2301      	movs	r3, #1
 8001174:	e08a      	b.n	800128c <json_get_object_size+0x238>
      }

      if (json_parse_flags_allow_trailing_comma & flags_bitset) {
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d161      	bne.n	8001244 <json_get_object_size+0x1f0>
        continue;
      } else {
        if (json_skip_all_skippables(state)) {
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fcda 	bl	8000b3a <json_skip_all_skippables>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d004      	beq.n	8001196 <json_get_object_size+0x142>
          state->error = json_parse_error_premature_end_of_buffer;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2207      	movs	r2, #7
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
          return 1;
 8001192:	2301      	movs	r3, #1
 8001194:	e07a      	b.n	800128c <json_get_object_size+0x238>
        }
      }
    }

    if (json_get_key_size(state)) {
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff feed 	bl	8000f76 <json_get_key_size>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <json_get_object_size+0x158>
      /* key parsing failed! */
      state->error = json_parse_error_invalid_string;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2208      	movs	r2, #8
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e06f      	b.n	800128c <json_get_object_size+0x238>
    }

    if (json_skip_all_skippables(state)) {
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff fcc4 	bl	8000b3a <json_skip_all_skippables>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <json_get_object_size+0x16e>
      state->error = json_parse_error_premature_end_of_buffer;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2207      	movs	r2, #7
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	e064      	b.n	800128c <json_get_object_size+0x238>
    }

    if (json_parse_flags_allow_equals_in_object & flags_bitset) {
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d010      	beq.n	80011ee <json_get_object_size+0x19a>
      const char current = src[state->offset];
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4413      	add	r3, r2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	73fb      	strb	r3, [r7, #15]
      if ((':' != current) && ('=' != current)) {
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b3a      	cmp	r3, #58	; 0x3a
 80011dc:	d013      	beq.n	8001206 <json_get_object_size+0x1b2>
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b3d      	cmp	r3, #61	; 0x3d
 80011e2:	d010      	beq.n	8001206 <json_get_object_size+0x1b2>
        state->error = json_parse_error_expected_colon;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2202      	movs	r2, #2
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e04e      	b.n	800128c <json_get_object_size+0x238>
      }
    } else {
      if (':' != src[state->offset]) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b3a      	cmp	r3, #58	; 0x3a
 80011fa:	d004      	beq.n	8001206 <json_get_object_size+0x1b2>
        state->error = json_parse_error_expected_colon;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e042      	b.n	800128c <json_get_object_size+0x238>
      }
    }

    /* skip colon. */
    state->offset++;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	1c5a      	adds	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]

    if (json_skip_all_skippables(state)) {
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fc92 	bl	8000b3a <json_skip_all_skippables>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <json_get_object_size+0x1d2>
      state->error = json_parse_error_premature_end_of_buffer;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2207      	movs	r2, #7
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001222:	2301      	movs	r3, #1
 8001224:	e032      	b.n	800128c <json_get_object_size+0x238>
    }

    if (json_get_value_size(state, /* is_global_object = */ 0)) {
 8001226:	2100      	movs	r1, #0
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fb43 	bl	80018b4 <json_get_value_size>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <json_get_object_size+0x1e4>
      /* value parsing failed! */
      return 1;
 8001234:	2301      	movs	r3, #1
 8001236:	e029      	b.n	800128c <json_get_object_size+0x238>
    }

    /* successfully parsed a name/value pair! */
    elements++;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	3301      	adds	r3, #1
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    allow_comma = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
 8001242:	e000      	b.n	8001246 <json_get_object_size+0x1f2>
        continue;
 8001244:	bf00      	nop
  } while (state->offset < size);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	f63f af4f 	bhi.w	80010f0 <json_get_object_size+0x9c>
 8001252:	e000      	b.n	8001256 <json_get_object_size+0x202>
        break;
 8001254:	bf00      	nop

  if ((state->offset == size) && !is_global_object && !found_closing_brace) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d10a      	bne.n	8001276 <json_get_object_size+0x222>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d107      	bne.n	8001276 <json_get_object_size+0x222>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d104      	bne.n	8001276 <json_get_object_size+0x222>
    state->error = json_parse_error_premature_end_of_buffer;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2207      	movs	r2, #7
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 8001272:	2301      	movs	r3, #1
 8001274:	e00a      	b.n	800128c <json_get_object_size+0x238>
  }

  state->dom_size += sizeof(struct json_object_element_s) * elements;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6999      	ldr	r1, [r3, #24]
 800127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	18ca      	adds	r2, r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]

  return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <json_get_array_size>:

json_weak int json_get_array_size(struct json_parse_state_s *state);
int json_get_array_size(struct json_parse_state_s *state) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	617b      	str	r3, [r7, #20]
  size_t elements = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  int allow_comma = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  const char *const src = state->src;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
  const size_t size = state->size;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  if ('[' != src[state->offset]) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b5b      	cmp	r3, #91	; 0x5b
 80012c2:	d004      	beq.n	80012ce <json_get_array_size+0x3a>
    /* expected array to begin with leading '['. */
    state->error = json_parse_error_unknown;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	220b      	movs	r2, #11
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
    return 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e071      	b.n	80013b2 <json_get_array_size+0x11e>
  }

  /* skip leading '['. */
  state->offset++;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]

  state->dom_size += sizeof(struct json_array_s);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f103 0208 	add.w	r2, r3, #8
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]

  while (state->offset < size) {
 80012e4:	e05c      	b.n	80013a0 <json_get_array_size+0x10c>
    if (json_skip_all_skippables(state)) {
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fc27 	bl	8000b3a <json_skip_all_skippables>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <json_get_array_size+0x68>
      state->error = json_parse_error_premature_end_of_buffer;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2207      	movs	r2, #7
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e05a      	b.n	80013b2 <json_get_array_size+0x11e>
    }

    if (']' == src[state->offset]) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b5d      	cmp	r3, #93	; 0x5d
 8001308:	d10d      	bne.n	8001326 <json_get_array_size+0x92>
      /* skip trailing ']'. */
      state->offset++;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]

      state->dom_size += sizeof(struct json_array_element_s) * elements;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	441a      	add	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]

      /* finished the object! */
      return 0;
 8001322:	2300      	movs	r3, #0
 8001324:	e045      	b.n	80013b2 <json_get_array_size+0x11e>
    }

    /* if we parsed at least once element previously, grok for a comma. */
    if (allow_comma) {
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d02b      	beq.n	8001384 <json_get_array_size+0xf0>
      if (',' == src[state->offset]) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b2c      	cmp	r3, #44	; 0x2c
 8001338:	d107      	bne.n	800134a <json_get_array_size+0xb6>
        /* skip comma. */
        state->offset++;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	e009      	b.n	800135e <json_get_array_size+0xca>
      } else if (!(json_parse_flags_allow_no_commas & flags_bitset)) {
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	2b00      	cmp	r3, #0
 8001352:	d104      	bne.n	800135e <json_get_array_size+0xca>
        state->error = json_parse_error_expected_comma_or_closing_bracket;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 800135a:	2301      	movs	r3, #1
 800135c:	e029      	b.n	80013b2 <json_get_array_size+0x11e>
      }

      if (json_parse_flags_allow_trailing_comma & flags_bitset) {
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <json_get_array_size+0xda>
        allow_comma = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
        continue;
 800136c:	e018      	b.n	80013a0 <json_get_array_size+0x10c>
      } else {
        if (json_skip_all_skippables(state)) {
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fbe3 	bl	8000b3a <json_skip_all_skippables>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <json_get_array_size+0xf0>
          state->error = json_parse_error_premature_end_of_buffer;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2207      	movs	r2, #7
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
          return 1;
 8001380:	2301      	movs	r3, #1
 8001382:	e016      	b.n	80013b2 <json_get_array_size+0x11e>
        }
      }
    }

    if (json_get_value_size(state, /* is_global_object = */ 0)) {
 8001384:	2100      	movs	r1, #0
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fa94 	bl	80018b4 <json_get_value_size>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <json_get_array_size+0x102>
      /* value parsing failed! */
      return 1;
 8001392:	2301      	movs	r3, #1
 8001394:	e00d      	b.n	80013b2 <json_get_array_size+0x11e>
    }

    /* successfully parsed an array element! */
    elements++;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3301      	adds	r3, #1
 800139a:	61fb      	str	r3, [r7, #28]
    allow_comma = 1;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  while (state->offset < size) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d89d      	bhi.n	80012e6 <json_get_array_size+0x52>
  }

  /* we consumed the entire input before finding the closing ']' of the array!
   */
  state->error = json_parse_error_premature_end_of_buffer;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2207      	movs	r2, #7
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
  return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <json_get_number_size>:

json_weak int json_get_number_size(struct json_parse_state_s *state);
int json_get_number_size(struct json_parse_state_s *state) {
 80013bc:	b480      	push	{r7}
 80013be:	b095      	sub	sp, #84	; 0x54
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t offset = state->offset;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  const size_t size = state->size;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  int had_leading_digits = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64bb      	str	r3, [r7, #72]	; 0x48
  const char *const src = state->src;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	627b      	str	r3, [r7, #36]	; 0x24

  state->dom_size += sizeof(struct json_number_s);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f103 0208 	add.w	r2, r3, #8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]

  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d04a      	beq.n	800148c <json_get_number_size+0xd0>
      (offset + 1 < size) && ('0' == src[offset]) &&
 80013f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013f8:	3301      	adds	r3, #1
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 80013fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d945      	bls.n	800148c <json_get_number_size+0xd0>
      (offset + 1 < size) && ('0' == src[offset]) &&
 8001400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b30      	cmp	r3, #48	; 0x30
 800140a:	d13f      	bne.n	800148c <json_get_number_size+0xd0>
      (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 800140c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800140e:	3301      	adds	r3, #1
 8001410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
      (offset + 1 < size) && ('0' == src[offset]) &&
 8001416:	2b78      	cmp	r3, #120	; 0x78
 8001418:	d006      	beq.n	8001428 <json_get_number_size+0x6c>
      (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 800141a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800141c:	3301      	adds	r3, #1
 800141e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b58      	cmp	r3, #88	; 0x58
 8001426:	d131      	bne.n	800148c <json_get_number_size+0xd0>
    /* skip the leading 0x that identifies a hexadecimal number. */
    offset += 2;
 8001428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800142a:	3302      	adds	r3, #2
 800142c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* consume hexadecimal digits. */
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 800142e:	e002      	b.n	8001436 <json_get_number_size+0x7a>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
      offset++;
 8001430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001432:	3301      	adds	r3, #1
 8001434:	64fb      	str	r3, [r7, #76]	; 0x4c
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 8001436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	429a      	cmp	r2, r3
 800143c:	f080 81a3 	bcs.w	8001786 <json_get_number_size+0x3ca>
 8001440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b2f      	cmp	r3, #47	; 0x2f
 800144a:	d905      	bls.n	8001458 <json_get_number_size+0x9c>
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b39      	cmp	r3, #57	; 0x39
 8001456:	d9eb      	bls.n	8001430 <json_get_number_size+0x74>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
    while ((offset < size) && (('0' <= src[offset] && src[offset] <= '9') ||
 8001460:	2b60      	cmp	r3, #96	; 0x60
 8001462:	d905      	bls.n	8001470 <json_get_number_size+0xb4>
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 8001464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b66      	cmp	r3, #102	; 0x66
 800146e:	d9df      	bls.n	8001430 <json_get_number_size+0x74>
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
                               ('a' <= src[offset] && src[offset] <= 'f') ||
 8001478:	2b40      	cmp	r3, #64	; 0x40
 800147a:	f240 8184 	bls.w	8001786 <json_get_number_size+0x3ca>
                               ('A' <= src[offset] && src[offset] <= 'F'))) {
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b46      	cmp	r3, #70	; 0x46
 8001488:	d9d2      	bls.n	8001430 <json_get_number_size+0x74>
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 800148a:	e17c      	b.n	8001786 <json_get_number_size+0x3ca>
    }
  } else {
    int found_sign = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
    int inf_or_nan = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	643b      	str	r3, [r7, #64]	; 0x40

    if ((offset < size) &&
 8001494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001498:	429a      	cmp	r2, r3
 800149a:	d215      	bcs.n	80014c8 <json_get_number_size+0x10c>
        (('-' == src[offset]) ||
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
    if ((offset < size) &&
 80014a4:	2b2d      	cmp	r3, #45	; 0x2d
 80014a6:	d00a      	beq.n	80014be <json_get_number_size+0x102>
         ((json_parse_flags_allow_leading_plus_sign & flags_bitset) &&
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (('-' == src[offset]) ||
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00a      	beq.n	80014c8 <json_get_number_size+0x10c>
          ('+' == src[offset])))) {
 80014b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
         ((json_parse_flags_allow_leading_plus_sign & flags_bitset) &&
 80014ba:	2b2b      	cmp	r3, #43	; 0x2b
 80014bc:	d104      	bne.n	80014c8 <json_get_number_size+0x10c>
      /* skip valid leading '-' or '+'. */
      offset++;
 80014be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c0:	3301      	adds	r3, #1
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      found_sign = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (json_parse_flags_allow_inf_and_nan & flags_bitset) {
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d061      	beq.n	8001596 <json_get_number_size+0x1da>
      const char inf[9] = "Infinity";
 80014d2:	4a78      	ldr	r2, [pc, #480]	; (80016b4 <json_get_number_size+0x2f8>)
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014da:	c303      	stmia	r3!, {r0, r1}
 80014dc:	701a      	strb	r2, [r3, #0]
      const size_t inf_strlen = sizeof(inf) - 1;
 80014de:	2308      	movs	r3, #8
 80014e0:	623b      	str	r3, [r7, #32]
      const char nan[4] = "NaN";
 80014e2:	4b75      	ldr	r3, [pc, #468]	; (80016b8 <json_get_number_size+0x2fc>)
 80014e4:	60fb      	str	r3, [r7, #12]
      const size_t nan_strlen = sizeof(nan) - 1;
 80014e6:	2303      	movs	r3, #3
 80014e8:	61fb      	str	r3, [r7, #28]

      if (offset + inf_strlen < size) {
 80014ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	4413      	add	r3, r2
 80014f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d924      	bls.n	8001540 <json_get_number_size+0x184>
        int found = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        size_t i;
        for (i = 0; i < inf_strlen; i++) {
 80014fa:	2300      	movs	r3, #0
 80014fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80014fe:	e012      	b.n	8001526 <json_get_number_size+0x16a>
          if (inf[i] != src[offset + i]) {
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001506:	4413      	add	r3, r2
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800150e:	440b      	add	r3, r1
 8001510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001512:	440b      	add	r3, r1
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d002      	beq.n	8001520 <json_get_number_size+0x164>
            found = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
 800151e:	e006      	b.n	800152e <json_get_number_size+0x172>
        for (i = 0; i < inf_strlen; i++) {
 8001520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001522:	3301      	adds	r3, #1
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
 8001526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3e8      	bcc.n	8001500 <json_get_number_size+0x144>
          }
        }

        if (found) {
 800152e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <json_get_number_size+0x184>
          /* We found our special 'Infinity' keyword! */
          offset += inf_strlen;
 8001534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	4413      	add	r3, r2
 800153a:	64fb      	str	r3, [r7, #76]	; 0x4c

          inf_or_nan = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }

      if (offset + nan_strlen < size) {
 8001540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001548:	429a      	cmp	r2, r3
 800154a:	d924      	bls.n	8001596 <json_get_number_size+0x1da>
        int found = 1;
 800154c:	2301      	movs	r3, #1
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
        size_t i;
        for (i = 0; i < nan_strlen; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
 8001554:	e012      	b.n	800157c <json_get_number_size+0x1c0>
          if (nan[i] != src[offset + i]) {
 8001556:	f107 020c 	add.w	r2, r7, #12
 800155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155c:	4413      	add	r3, r2
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001564:	440b      	add	r3, r1
 8001566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001568:	440b      	add	r3, r1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d002      	beq.n	8001576 <json_get_number_size+0x1ba>
            found = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8001574:	e006      	b.n	8001584 <json_get_number_size+0x1c8>
        for (i = 0; i < nan_strlen; i++) {
 8001576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001578:	3301      	adds	r3, #1
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
 800157c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3e8      	bcc.n	8001556 <json_get_number_size+0x19a>
          }
        }

        if (found) {
 8001584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001586:	2b00      	cmp	r3, #0
 8001588:	d005      	beq.n	8001596 <json_get_number_size+0x1da>
          /* We found our special 'NaN' keyword! */
          offset += nan_strlen;
 800158a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	64fb      	str	r3, [r7, #76]	; 0x4c

          inf_or_nan = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	643b      	str	r3, [r7, #64]	; 0x40
        }
      }
    }

    if (found_sign && !inf_or_nan && (offset < size) &&
 8001596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001598:	2b00      	cmp	r3, #0
 800159a:	d025      	beq.n	80015e8 <json_get_number_size+0x22c>
 800159c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d122      	bne.n	80015e8 <json_get_number_size+0x22c>
 80015a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d21e      	bcs.n	80015e8 <json_get_number_size+0x22c>
        !('0' <= src[offset] && src[offset] <= '9')) {
 80015aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
    if (found_sign && !inf_or_nan && (offset < size) &&
 80015b2:	2b2f      	cmp	r3, #47	; 0x2f
 80015b4:	d905      	bls.n	80015c2 <json_get_number_size+0x206>
        !('0' <= src[offset] && src[offset] <= '9')) {
 80015b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b39      	cmp	r3, #57	; 0x39
 80015c0:	d912      	bls.n	80015e8 <json_get_number_size+0x22c>
      /* check if we are allowing leading '.'. */
      if (!(json_parse_flags_allow_leading_or_trailing_decimal_point &
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <json_get_number_size+0x21c>
            flags_bitset) ||
          ('.' != src[offset])) {
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
            flags_bitset) ||
 80015d4:	2b2e      	cmp	r3, #46	; 0x2e
 80015d6:	d007      	beq.n	80015e8 <json_get_number_size+0x22c>
        /* a leading '-' must be immediately followed by any digit! */
        state->error = json_parse_error_invalid_number_format;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2205      	movs	r2, #5
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015e2:	609a      	str	r2, [r3, #8]
        return 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e15f      	b.n	80018a8 <json_get_number_size+0x4ec>
      }
    }

    if ((offset < size) && ('0' == src[offset])) {
 80015e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d227      	bcs.n	8001640 <json_get_number_size+0x284>
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b30      	cmp	r3, #48	; 0x30
 80015fa:	d121      	bne.n	8001640 <json_get_number_size+0x284>
      /* skip valid '0'. */
      offset++;
 80015fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fe:	3301      	adds	r3, #1
 8001600:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* we need to record whether we had any leading digits for checks later.
       */
      had_leading_digits = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	64bb      	str	r3, [r7, #72]	; 0x48

      if ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 8001606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	429a      	cmp	r2, r3
 800160c:	d218      	bcs.n	8001640 <json_get_number_size+0x284>
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b2f      	cmp	r3, #47	; 0x2f
 8001618:	d912      	bls.n	8001640 <json_get_number_size+0x284>
 800161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b39      	cmp	r3, #57	; 0x39
 8001624:	d80c      	bhi.n	8001640 <json_get_number_size+0x284>
        /* a leading '0' must not be immediately followed by any digit! */
        state->error = json_parse_error_invalid_number_format;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2205      	movs	r2, #5
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001630:	609a      	str	r2, [r3, #8]
        return 1;
 8001632:	2301      	movs	r3, #1
 8001634:	e138      	b.n	80018a8 <json_get_number_size+0x4ec>
      }
    }

    /* the main digits of our number next. */
    while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
      offset++;
 8001636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001638:	3301      	adds	r3, #1
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* we need to record whether we had any leading digits for checks later.
       */
      had_leading_digits = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
    while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 8001640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	429a      	cmp	r2, r3
 8001646:	d20b      	bcs.n	8001660 <json_get_number_size+0x2a4>
 8001648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b2f      	cmp	r3, #47	; 0x2f
 8001652:	d905      	bls.n	8001660 <json_get_number_size+0x2a4>
 8001654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b39      	cmp	r3, #57	; 0x39
 800165e:	d9ea      	bls.n	8001636 <json_get_number_size+0x27a>
    }

    if ((offset < size) && ('.' == src[offset])) {
 8001660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001664:	429a      	cmp	r2, r3
 8001666:	d23c      	bcs.n	80016e2 <json_get_number_size+0x326>
 8001668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b2e      	cmp	r3, #46	; 0x2e
 8001672:	d136      	bne.n	80016e2 <json_get_number_size+0x326>
      offset++;
 8001674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001676:	3301      	adds	r3, #1
 8001678:	64fb      	str	r3, [r7, #76]	; 0x4c

      if (!('0' <= src[offset] && src[offset] <= '9')) {
 800167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b2f      	cmp	r3, #47	; 0x2f
 8001684:	d905      	bls.n	8001692 <json_get_number_size+0x2d6>
 8001686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b39      	cmp	r3, #57	; 0x39
 8001690:	d917      	bls.n	80016c2 <json_get_number_size+0x306>
        if (!(json_parse_flags_allow_leading_or_trailing_decimal_point &
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <json_get_number_size+0x2e6>
              flags_bitset) ||
 800169c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <json_get_number_size+0x306>
            !had_leading_digits) {
          /* a decimal point must be followed by at least one digit. */
          state->error = json_parse_error_invalid_number_format;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
          state->offset = offset;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016ac:	609a      	str	r2, [r3, #8]
          return 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0fa      	b.n	80018a8 <json_get_number_size+0x4ec>
 80016b2:	bf00      	nop
 80016b4:	08011e98 	.word	0x08011e98
 80016b8:	004e614e 	.word	0x004e614e
        }
      }

      /* a decimal point can be followed by more digits of course! */
      while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
        offset++;
 80016bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016be:	3301      	adds	r3, #1
 80016c0:	64fb      	str	r3, [r7, #76]	; 0x4c
      while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9')) {
 80016c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d20b      	bcs.n	80016e2 <json_get_number_size+0x326>
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b2f      	cmp	r3, #47	; 0x2f
 80016d4:	d905      	bls.n	80016e2 <json_get_number_size+0x326>
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b39      	cmp	r3, #57	; 0x39
 80016e0:	d9ec      	bls.n	80016bc <json_get_number_size+0x300>
      }
    }

    if ((offset < size) && ('e' == src[offset] || 'E' == src[offset])) {
 80016e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d24e      	bcs.n	8001788 <json_get_number_size+0x3cc>
 80016ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b65      	cmp	r3, #101	; 0x65
 80016f4:	d005      	beq.n	8001702 <json_get_number_size+0x346>
 80016f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b45      	cmp	r3, #69	; 0x45
 8001700:	d142      	bne.n	8001788 <json_get_number_size+0x3cc>
      /* our number has an exponent! Skip 'e' or 'E'. */
      offset++;
 8001702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001704:	3301      	adds	r3, #1
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c

      if ((offset < size) && ('-' == src[offset] || '+' == src[offset])) {
 8001708:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	429a      	cmp	r2, r3
 800170e:	d20e      	bcs.n	800172e <json_get_number_size+0x372>
 8001710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001714:	4413      	add	r3, r2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b2d      	cmp	r3, #45	; 0x2d
 800171a:	d005      	beq.n	8001728 <json_get_number_size+0x36c>
 800171c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b2b      	cmp	r3, #43	; 0x2b
 8001726:	d102      	bne.n	800172e <json_get_number_size+0x372>
        /* skip optional '-' or '+'. */
        offset++;
 8001728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172a:	3301      	adds	r3, #1
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      if ((offset < size) && !('0' <= src[offset] && src[offset] <= '9')) {
 800172e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001732:	429a      	cmp	r2, r3
 8001734:	d213      	bcs.n	800175e <json_get_number_size+0x3a2>
 8001736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800173a:	4413      	add	r3, r2
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b2f      	cmp	r3, #47	; 0x2f
 8001740:	d905      	bls.n	800174e <json_get_number_size+0x392>
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b39      	cmp	r3, #57	; 0x39
 800174c:	d907      	bls.n	800175e <json_get_number_size+0x3a2>
        /* an exponent must have at least one digit! */
        state->error = json_parse_error_invalid_number_format;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2205      	movs	r2, #5
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
        state->offset = offset;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001758:	609a      	str	r2, [r3, #8]
        return 1;
 800175a:	2301      	movs	r3, #1
 800175c:	e0a4      	b.n	80018a8 <json_get_number_size+0x4ec>
      }

      /* consume exponent digits. */
      do {
        offset++;
 800175e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001760:	3301      	adds	r3, #1
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
      } while ((offset < size) && ('0' <= src[offset] && src[offset] <= '9'));
 8001764:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	429a      	cmp	r2, r3
 800176a:	d20d      	bcs.n	8001788 <json_get_number_size+0x3cc>
 800176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b2f      	cmp	r3, #47	; 0x2f
 8001776:	d907      	bls.n	8001788 <json_get_number_size+0x3cc>
 8001778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b39      	cmp	r3, #57	; 0x39
 8001782:	d9ec      	bls.n	800175e <json_get_number_size+0x3a2>
 8001784:	e000      	b.n	8001788 <json_get_number_size+0x3cc>
  if ((json_parse_flags_allow_hexadecimal_numbers & flags_bitset) &&
 8001786:	bf00      	nop
    }
  }

  if (offset < size) {
 8001788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	429a      	cmp	r2, r3
 800178e:	d274      	bcs.n	800187a <json_get_number_size+0x4be>
    switch (src[offset]) {
 8001790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b7d      	cmp	r3, #125	; 0x7d
 800179a:	d070      	beq.n	800187e <json_get_number_size+0x4c2>
 800179c:	2b7d      	cmp	r3, #125	; 0x7d
 800179e:	dc64      	bgt.n	800186a <json_get_number_size+0x4ae>
 80017a0:	2b5d      	cmp	r3, #93	; 0x5d
 80017a2:	d06c      	beq.n	800187e <json_get_number_size+0x4c2>
 80017a4:	2b5d      	cmp	r3, #93	; 0x5d
 80017a6:	dc60      	bgt.n	800186a <json_get_number_size+0x4ae>
 80017a8:	2b2c      	cmp	r3, #44	; 0x2c
 80017aa:	dc4f      	bgt.n	800184c <json_get_number_size+0x490>
 80017ac:	2b09      	cmp	r3, #9
 80017ae:	db5c      	blt.n	800186a <json_get_number_size+0x4ae>
 80017b0:	3b09      	subs	r3, #9
 80017b2:	2b23      	cmp	r3, #35	; 0x23
 80017b4:	d859      	bhi.n	800186a <json_get_number_size+0x4ae>
 80017b6:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <json_get_number_size+0x400>)
 80017b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017bc:	0800187f 	.word	0x0800187f
 80017c0:	0800187f 	.word	0x0800187f
 80017c4:	0800186b 	.word	0x0800186b
 80017c8:	0800186b 	.word	0x0800186b
 80017cc:	0800187f 	.word	0x0800187f
 80017d0:	0800186b 	.word	0x0800186b
 80017d4:	0800186b 	.word	0x0800186b
 80017d8:	0800186b 	.word	0x0800186b
 80017dc:	0800186b 	.word	0x0800186b
 80017e0:	0800186b 	.word	0x0800186b
 80017e4:	0800186b 	.word	0x0800186b
 80017e8:	0800186b 	.word	0x0800186b
 80017ec:	0800186b 	.word	0x0800186b
 80017f0:	0800186b 	.word	0x0800186b
 80017f4:	0800186b 	.word	0x0800186b
 80017f8:	0800186b 	.word	0x0800186b
 80017fc:	0800186b 	.word	0x0800186b
 8001800:	0800186b 	.word	0x0800186b
 8001804:	0800186b 	.word	0x0800186b
 8001808:	0800186b 	.word	0x0800186b
 800180c:	0800186b 	.word	0x0800186b
 8001810:	0800186b 	.word	0x0800186b
 8001814:	0800186b 	.word	0x0800186b
 8001818:	0800187f 	.word	0x0800187f
 800181c:	0800186b 	.word	0x0800186b
 8001820:	0800186b 	.word	0x0800186b
 8001824:	0800186b 	.word	0x0800186b
 8001828:	0800186b 	.word	0x0800186b
 800182c:	0800186b 	.word	0x0800186b
 8001830:	0800186b 	.word	0x0800186b
 8001834:	0800186b 	.word	0x0800186b
 8001838:	0800186b 	.word	0x0800186b
 800183c:	0800186b 	.word	0x0800186b
 8001840:	0800186b 	.word	0x0800186b
 8001844:	0800186b 	.word	0x0800186b
 8001848:	0800187f 	.word	0x0800187f
 800184c:	2b3d      	cmp	r3, #61	; 0x3d
 800184e:	d10c      	bne.n	800186a <json_get_number_size+0x4ae>
    case ',':
    case ']':
      /* all of the above are ok. */
      break;
    case '=':
      if (json_parse_flags_allow_equals_in_object & flags_bitset) {
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d113      	bne.n	8001882 <json_get_number_size+0x4c6>
        break;
      }

      state->error = json_parse_error_invalid_number_format;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2205      	movs	r2, #5
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001864:	609a      	str	r2, [r3, #8]
      return 1;
 8001866:	2301      	movs	r3, #1
 8001868:	e01e      	b.n	80018a8 <json_get_number_size+0x4ec>
    default:
      state->error = json_parse_error_invalid_number_format;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2205      	movs	r2, #5
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
      state->offset = offset;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001874:	609a      	str	r2, [r3, #8]
      return 1;
 8001876:	2301      	movs	r3, #1
 8001878:	e016      	b.n	80018a8 <json_get_number_size+0x4ec>
    }
  }
 800187a:	bf00      	nop
 800187c:	e002      	b.n	8001884 <json_get_number_size+0x4c8>
      break;
 800187e:	bf00      	nop
 8001880:	e000      	b.n	8001884 <json_get_number_size+0x4c8>
        break;
 8001882:	bf00      	nop

  state->data_size += offset - state->offset;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800188e:	1acb      	subs	r3, r1, r3
 8001890:	441a      	add	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	61da      	str	r2, [r3, #28]

  /* one more byte for null terminator ending the number string! */
  state->data_size++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	61da      	str	r2, [r3, #28]

  /* update offset. */
  state->offset = offset;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018a4:	609a      	str	r2, [r3, #8]

  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3754      	adds	r7, #84	; 0x54
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <json_get_value_size>:

json_weak int json_get_value_size(struct json_parse_state_s *state,
                                  int is_global_object);
int json_get_value_size(struct json_parse_state_s *state,
                        int is_global_object) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	617b      	str	r3, [r7, #20]
  const char *const src = state->src;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
  size_t offset;
  const size_t size = state->size;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60fb      	str	r3, [r7, #12]

  if (json_parse_flags_allow_location_information & flags_bitset) {
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <json_get_value_size+0x34>
    state->dom_size += sizeof(struct json_value_ex_s);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f103 0214 	add.w	r2, r3, #20
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	619a      	str	r2, [r3, #24]
 80018e6:	e005      	b.n	80018f4 <json_get_value_size+0x40>
  } else {
    state->dom_size += sizeof(struct json_value_s);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f103 0208 	add.w	r2, r3, #8
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }

  if (is_global_object) {
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d005      	beq.n	8001906 <json_get_value_size+0x52>
    return json_get_object_size(state, /* is_global_object = */ 1);
 80018fa:	2101      	movs	r1, #1
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fba9 	bl	8001054 <json_get_object_size>
 8001902:	4603      	mov	r3, r0
 8001904:	e1c6      	b.n	8001c94 <json_get_value_size+0x3e0>
  } else {
    if (json_skip_all_skippables(state)) {
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff f917 	bl	8000b3a <json_skip_all_skippables>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <json_get_value_size+0x68>
      state->error = json_parse_error_premature_end_of_buffer;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2207      	movs	r2, #7
 8001916:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001918:	2301      	movs	r3, #1
 800191a:	e1bb      	b.n	8001c94 <json_get_value_size+0x3e0>
    }

    /* can cache offset now. */
    offset = state->offset;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	60bb      	str	r3, [r7, #8]

    switch (src[offset]) {
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4413      	add	r3, r2
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b5b      	cmp	r3, #91	; 0x5b
 800192c:	dc7e      	bgt.n	8001a2c <json_get_value_size+0x178>
 800192e:	2b22      	cmp	r3, #34	; 0x22
 8001930:	f2c0 80c3 	blt.w	8001aba <json_get_value_size+0x206>
 8001934:	3b22      	subs	r3, #34	; 0x22
 8001936:	2b39      	cmp	r3, #57	; 0x39
 8001938:	f200 80bf 	bhi.w	8001aba <json_get_value_size+0x206>
 800193c:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <json_get_value_size+0x90>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001a33 	.word	0x08001a33
 8001948:	08001abb 	.word	0x08001abb
 800194c:	08001abb 	.word	0x08001abb
 8001950:	08001abb 	.word	0x08001abb
 8001954:	08001abb 	.word	0x08001abb
 8001958:	08001a3f 	.word	0x08001a3f
 800195c:	08001abb 	.word	0x08001abb
 8001960:	08001abb 	.word	0x08001abb
 8001964:	08001abb 	.word	0x08001abb
 8001968:	08001a7f 	.word	0x08001a7f
 800196c:	08001abb 	.word	0x08001abb
 8001970:	08001a75 	.word	0x08001a75
 8001974:	08001a9d 	.word	0x08001a9d
 8001978:	08001abb 	.word	0x08001abb
 800197c:	08001a75 	.word	0x08001a75
 8001980:	08001a75 	.word	0x08001a75
 8001984:	08001a75 	.word	0x08001a75
 8001988:	08001a75 	.word	0x08001a75
 800198c:	08001a75 	.word	0x08001a75
 8001990:	08001a75 	.word	0x08001a75
 8001994:	08001a75 	.word	0x08001a75
 8001998:	08001a75 	.word	0x08001a75
 800199c:	08001a75 	.word	0x08001a75
 80019a0:	08001a75 	.word	0x08001a75
 80019a4:	08001abb 	.word	0x08001abb
 80019a8:	08001abb 	.word	0x08001abb
 80019ac:	08001abb 	.word	0x08001abb
 80019b0:	08001abb 	.word	0x08001abb
 80019b4:	08001abb 	.word	0x08001abb
 80019b8:	08001abb 	.word	0x08001abb
 80019bc:	08001abb 	.word	0x08001abb
 80019c0:	08001abb 	.word	0x08001abb
 80019c4:	08001abb 	.word	0x08001abb
 80019c8:	08001abb 	.word	0x08001abb
 80019cc:	08001abb 	.word	0x08001abb
 80019d0:	08001abb 	.word	0x08001abb
 80019d4:	08001abb 	.word	0x08001abb
 80019d8:	08001abb 	.word	0x08001abb
 80019dc:	08001abb 	.word	0x08001abb
 80019e0:	08001abb 	.word	0x08001abb
 80019e4:	08001abb 	.word	0x08001abb
 80019e8:	08001abb 	.word	0x08001abb
 80019ec:	08001abb 	.word	0x08001abb
 80019f0:	08001abb 	.word	0x08001abb
 80019f4:	08001abb 	.word	0x08001abb
 80019f8:	08001abb 	.word	0x08001abb
 80019fc:	08001abb 	.word	0x08001abb
 8001a00:	08001abb 	.word	0x08001abb
 8001a04:	08001abb 	.word	0x08001abb
 8001a08:	08001abb 	.word	0x08001abb
 8001a0c:	08001abb 	.word	0x08001abb
 8001a10:	08001abb 	.word	0x08001abb
 8001a14:	08001abb 	.word	0x08001abb
 8001a18:	08001abb 	.word	0x08001abb
 8001a1c:	08001abb 	.word	0x08001abb
 8001a20:	08001abb 	.word	0x08001abb
 8001a24:	08001abb 	.word	0x08001abb
 8001a28:	08001a6b 	.word	0x08001a6b
 8001a2c:	2b7b      	cmp	r3, #123	; 0x7b
 8001a2e:	d016      	beq.n	8001a5e <json_get_value_size+0x1aa>
 8001a30:	e043      	b.n	8001aba <json_get_value_size+0x206>
    case '"':
      return json_get_string_size(state, 0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff f8d3 	bl	8000be0 <json_get_string_size>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	e12a      	b.n	8001c94 <json_get_value_size+0x3e0>
    case '\'':
      if (json_parse_flags_allow_single_quoted_strings & flags_bitset) {
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <json_get_value_size+0x1a0>
        return json_get_string_size(state, 0);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff f8c8 	bl	8000be0 <json_get_string_size>
 8001a50:	4603      	mov	r3, r0
 8001a52:	e11f      	b.n	8001c94 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_value;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2206      	movs	r2, #6
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e11a      	b.n	8001c94 <json_get_value_size+0x3e0>
      }
    case '{':
      return json_get_object_size(state, /* is_global_object = */ 0);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff faf7 	bl	8001054 <json_get_object_size>
 8001a66:	4603      	mov	r3, r0
 8001a68:	e114      	b.n	8001c94 <json_get_value_size+0x3e0>
    case '[':
      return json_get_array_size(state);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fc12 	bl	8001294 <json_get_array_size>
 8001a70:	4603      	mov	r3, r0
 8001a72:	e10f      	b.n	8001c94 <json_get_value_size+0x3e0>
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      return json_get_number_size(state);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff fca1 	bl	80013bc <json_get_number_size>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	e10a      	b.n	8001c94 <json_get_value_size+0x3e0>
    case '+':
      if (json_parse_flags_allow_leading_plus_sign & flags_bitset) {
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <json_get_value_size+0x1de>
        return json_get_number_size(state);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fc97 	bl	80013bc <json_get_number_size>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	e100      	b.n	8001c94 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_number_format;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2205      	movs	r2, #5
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0fb      	b.n	8001c94 <json_get_value_size+0x3e0>
      }
    case '.':
      if (json_parse_flags_allow_leading_or_trailing_decimal_point &
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <json_get_value_size+0x1fc>
          flags_bitset) {
        return json_get_number_size(state);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fc88 	bl	80013bc <json_get_number_size>
 8001aac:	4603      	mov	r3, r0
 8001aae:	e0f1      	b.n	8001c94 <json_get_value_size+0x3e0>
      } else {
        /* invalid value! */
        state->error = json_parse_error_invalid_number_format;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
        return 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e0ec      	b.n	8001c94 <json_get_value_size+0x3e0>
      }
    default:
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	3304      	adds	r3, #4
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d321      	bcc.n	8001b08 <json_get_value_size+0x254>
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b74      	cmp	r3, #116	; 0x74
 8001ace:	d11b      	bne.n	8001b08 <json_get_value_size+0x254>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 8001ada:	2b72      	cmp	r3, #114	; 0x72
 8001adc:	d114      	bne.n	8001b08 <json_get_value_size+0x254>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b75      	cmp	r3, #117	; 0x75
 8001aea:	d10d      	bne.n	8001b08 <json_get_value_size+0x254>
          'e' == src[offset + 3]) {
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3303      	adds	r3, #3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8001af6:	2b65      	cmp	r3, #101	; 0x65
 8001af8:	d106      	bne.n	8001b08 <json_get_value_size+0x254>
        state->offset += 4;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	1d1a      	adds	r2, r3, #4
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	609a      	str	r2, [r3, #8]
        return 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e0c5      	b.n	8001c94 <json_get_value_size+0x3e0>
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	3305      	adds	r3, #5
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d328      	bcc.n	8001b64 <json_get_value_size+0x2b0>
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4413      	add	r3, r2
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b66      	cmp	r3, #102	; 0x66
 8001b1c:	d122      	bne.n	8001b64 <json_get_value_size+0x2b0>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	3301      	adds	r3, #1
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8001b28:	2b61      	cmp	r3, #97	; 0x61
 8001b2a:	d11b      	bne.n	8001b64 <json_get_value_size+0x2b0>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b6c      	cmp	r3, #108	; 0x6c
 8001b38:	d114      	bne.n	8001b64 <json_get_value_size+0x2b0>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	3303      	adds	r3, #3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4413      	add	r3, r2
 8001b42:	781b      	ldrb	r3, [r3, #0]
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8001b44:	2b73      	cmp	r3, #115	; 0x73
 8001b46:	d10d      	bne.n	8001b64 <json_get_value_size+0x2b0>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b65      	cmp	r3, #101	; 0x65
 8001b54:	d106      	bne.n	8001b64 <json_get_value_size+0x2b0>
        state->offset += 5;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	1d5a      	adds	r2, r3, #5
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
        return 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e097      	b.n	8001c94 <json_get_value_size+0x3e0>
      } else if ((offset + 4) <= size && 'n' == state->src[offset + 0] &&
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	3304      	adds	r3, #4
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d325      	bcc.n	8001bba <json_get_value_size+0x306>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4413      	add	r3, r2
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b6e      	cmp	r3, #110	; 0x6e
 8001b7a:	d11e      	bne.n	8001bba <json_get_value_size+0x306>
                 'u' == state->src[offset + 1] &&
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3301      	adds	r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 4) <= size && 'n' == state->src[offset + 0] &&
 8001b88:	2b75      	cmp	r3, #117	; 0x75
 8001b8a:	d116      	bne.n	8001bba <json_get_value_size+0x306>
                 'l' == state->src[offset + 2] &&
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	3302      	adds	r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
                 'u' == state->src[offset + 1] &&
 8001b98:	2b6c      	cmp	r3, #108	; 0x6c
 8001b9a:	d10e      	bne.n	8001bba <json_get_value_size+0x306>
                 'l' == state->src[offset + 3]) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3303      	adds	r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
                 'l' == state->src[offset + 2] &&
 8001ba8:	2b6c      	cmp	r3, #108	; 0x6c
 8001baa:	d106      	bne.n	8001bba <json_get_value_size+0x306>
        state->offset += 4;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	1d1a      	adds	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
        return 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e06c      	b.n	8001c94 <json_get_value_size+0x3e0>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01d      	beq.n	8001c00 <json_get_value_size+0x34c>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3303      	adds	r3, #3
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d318      	bcc.n	8001c00 <json_get_value_size+0x34c>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b4e      	cmp	r3, #78	; 0x4e
 8001bd8:	d112      	bne.n	8001c00 <json_get_value_size+0x34c>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4413      	add	r3, r2
 8001be2:	781b      	ldrb	r3, [r3, #0]
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8001be4:	2b61      	cmp	r3, #97	; 0x61
 8001be6:	d10b      	bne.n	8001c00 <json_get_value_size+0x34c>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	3302      	adds	r3, #2
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b4e      	cmp	r3, #78	; 0x4e
 8001bf4:	d104      	bne.n	8001c00 <json_get_value_size+0x34c>
        return json_get_number_size(state);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fbe0 	bl	80013bc <json_get_number_size>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	e049      	b.n	8001c94 <json_get_value_size+0x3e0>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d040      	beq.n	8001c8c <json_get_value_size+0x3d8>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3308      	adds	r3, #8
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d33b      	bcc.n	8001c8c <json_get_value_size+0x3d8>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b49      	cmp	r3, #73	; 0x49
 8001c1e:	d135      	bne.n	8001c8c <json_get_value_size+0x3d8>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	3301      	adds	r3, #1
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	781b      	ldrb	r3, [r3, #0]
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8001c2a:	2b6e      	cmp	r3, #110	; 0x6e
 8001c2c:	d12e      	bne.n	8001c8c <json_get_value_size+0x3d8>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3302      	adds	r3, #2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b66      	cmp	r3, #102	; 0x66
 8001c3a:	d127      	bne.n	8001c8c <json_get_value_size+0x3d8>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	781b      	ldrb	r3, [r3, #0]
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8001c46:	2b69      	cmp	r3, #105	; 0x69
 8001c48:	d120      	bne.n	8001c8c <json_get_value_size+0x3d8>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b6e      	cmp	r3, #110	; 0x6e
 8001c56:	d119      	bne.n	8001c8c <json_get_value_size+0x3d8>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3305      	adds	r3, #5
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8001c62:	2b69      	cmp	r3, #105	; 0x69
 8001c64:	d112      	bne.n	8001c8c <json_get_value_size+0x3d8>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3306      	adds	r3, #6
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b74      	cmp	r3, #116	; 0x74
 8001c72:	d10b      	bne.n	8001c8c <json_get_value_size+0x3d8>
                 'y' == src[offset + 7]) {
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	3307      	adds	r3, #7
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8001c7e:	2b79      	cmp	r3, #121	; 0x79
 8001c80:	d104      	bne.n	8001c8c <json_get_value_size+0x3d8>
        return json_get_number_size(state);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fb9a 	bl	80013bc <json_get_number_size>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	e003      	b.n	8001c94 <json_get_value_size+0x3e0>
      }

      /* invalid value! */
      state->error = json_parse_error_invalid_value;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2206      	movs	r2, #6
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28
      return 1;
 8001c92:	2301      	movs	r3, #1
    }
  }
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <json_parse_string>:
                                struct json_value_s *value);

json_weak void json_parse_string(struct json_parse_state_s *state,
                                 struct json_string_s *string);
void json_parse_string(struct json_parse_state_s *state,
                       struct json_string_s *string) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  size_t offset = state->offset;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
  size_t bytes_written = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
  const char *const src = state->src;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
  const char quote_to_use = '\'' == src[offset] ? '\'' : '"';
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b27      	cmp	r3, #39	; 0x27
 8001cc0:	d101      	bne.n	8001cc6 <json_parse_string+0x2a>
 8001cc2:	2327      	movs	r3, #39	; 0x27
 8001cc4:	e000      	b.n	8001cc8 <json_parse_string+0x2c>
 8001cc6:	2322      	movs	r3, #34	; 0x22
 8001cc8:	75fb      	strb	r3, [r7, #23]
  char *data = state->data;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	613b      	str	r3, [r7, #16]
  unsigned long high_surrogate = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  unsigned long codepoint;

  string->string = data;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]

  /* skip leading '"' or '\''. */
  offset++;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24

  while (quote_to_use != src[offset]) {
 8001ce0:	e18f      	b.n	8002002 <json_parse_string+0x366>
    if ('\\' == src[offset]) {
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	4413      	add	r3, r2
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b5c      	cmp	r3, #92	; 0x5c
 8001cec:	f040 817d 	bne.w	8001fea <json_parse_string+0x34e>
      /* skip the reverse solidus. */
      offset++;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24

      switch (src[offset++]) {
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	627a      	str	r2, [r7, #36]	; 0x24
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b75      	cmp	r3, #117	; 0x75
 8001d04:	f300 819c 	bgt.w	8002040 <json_parse_string+0x3a4>
 8001d08:	2b5c      	cmp	r3, #92	; 0x5c
 8001d0a:	da12      	bge.n	8001d32 <json_parse_string+0x96>
 8001d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8001d0e:	f000 811a 	beq.w	8001f46 <json_parse_string+0x2aa>
 8001d12:	2b2f      	cmp	r3, #47	; 0x2f
 8001d14:	f300 8194 	bgt.w	8002040 <json_parse_string+0x3a4>
 8001d18:	2b22      	cmp	r3, #34	; 0x22
 8001d1a:	f000 8104 	beq.w	8001f26 <json_parse_string+0x28a>
 8001d1e:	2b22      	cmp	r3, #34	; 0x22
 8001d20:	f300 818e 	bgt.w	8002040 <json_parse_string+0x3a4>
 8001d24:	2b0a      	cmp	r3, #10
 8001d26:	f000 8156 	beq.w	8001fd6 <json_parse_string+0x33a>
 8001d2a:	2b0d      	cmp	r3, #13
 8001d2c:	f000 813b 	beq.w	8001fa6 <json_parse_string+0x30a>
      default:
        return; /* we cannot ever reach here. */
 8001d30:	e186      	b.n	8002040 <json_parse_string+0x3a4>
 8001d32:	3b5c      	subs	r3, #92	; 0x5c
 8001d34:	2b19      	cmp	r3, #25
 8001d36:	f200 8183 	bhi.w	8002040 <json_parse_string+0x3a4>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <json_parse_string+0xa4>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001f37 	.word	0x08001f37
 8001d44:	08002041 	.word	0x08002041
 8001d48:	08002041 	.word	0x08002041
 8001d4c:	08002041 	.word	0x08002041
 8001d50:	08002041 	.word	0x08002041
 8001d54:	08002041 	.word	0x08002041
 8001d58:	08001f57 	.word	0x08001f57
 8001d5c:	08002041 	.word	0x08002041
 8001d60:	08002041 	.word	0x08002041
 8001d64:	08002041 	.word	0x08002041
 8001d68:	08001f67 	.word	0x08001f67
 8001d6c:	08002041 	.word	0x08002041
 8001d70:	08002041 	.word	0x08002041
 8001d74:	08002041 	.word	0x08002041
 8001d78:	08002041 	.word	0x08002041
 8001d7c:	08002041 	.word	0x08002041
 8001d80:	08002041 	.word	0x08002041
 8001d84:	08002041 	.word	0x08002041
 8001d88:	08001f77 	.word	0x08001f77
 8001d8c:	08002041 	.word	0x08002041
 8001d90:	08002041 	.word	0x08002041
 8001d94:	08002041 	.word	0x08002041
 8001d98:	08001f87 	.word	0x08001f87
 8001d9c:	08002041 	.word	0x08002041
 8001da0:	08001f97 	.word	0x08001f97
 8001da4:	08001da9 	.word	0x08001da9
      case 'u': {
        codepoint = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
        if (!json_hexadecimal_value(&src[offset], 4, &codepoint)) {
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	4413      	add	r3, r2
 8001db2:	f107 0208 	add.w	r2, r7, #8
 8001db6:	2104      	movs	r1, #4
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fd6d 	bl	8000898 <json_hexadecimal_value>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 813f 	beq.w	8002044 <json_parse_string+0x3a8>
          return; /* this shouldn't happen as the value was already validated.
                   */
        }

        offset += 4;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	3304      	adds	r3, #4
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24

        if (codepoint <= 0x7fu) {
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd0:	d808      	bhi.n	8001de4 <json_parse_string+0x148>
          data[bytes_written++] = (char)codepoint; /* 0xxxxxxx. */
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	623a      	str	r2, [r7, #32]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
          data[bytes_written++] =
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
          data[bytes_written++] =
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
        }
      } break;
 8001de2:	e10e      	b.n	8002002 <json_parse_string+0x366>
        } else if (codepoint <= 0x7ffu) {
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dea:	d21a      	bcs.n	8001e22 <json_parse_string+0x186>
              (char)(0xc0u | (codepoint >> 6)); /* 110xxxxx. */
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	099b      	lsrs	r3, r3, #6
 8001df0:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	6239      	str	r1, [r7, #32]
 8001df8:	6939      	ldr	r1, [r7, #16]
 8001dfa:	440b      	add	r3, r1
              (char)(0xc0u | (codepoint >> 6)); /* 110xxxxx. */
 8001dfc:	f062 023f 	orn	r2, r2, #63	; 0x3f
 8001e00:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001e02:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e0c:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	6239      	str	r1, [r7, #32]
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8001e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e1c:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001e1e:	701a      	strb	r2, [r3, #0]
      } break;
 8001e20:	e0ef      	b.n	8002002 <json_parse_string+0x366>
        } else if (codepoint >= 0xd800 &&
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001e28:	d306      	bcc.n	8001e38 <json_parse_string+0x19c>
                   codepoint <= 0xdbff) { /* high surrogate. */
 8001e2a:	68bb      	ldr	r3, [r7, #8]
        } else if (codepoint >= 0xd800 &&
 8001e2c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001e30:	d202      	bcs.n	8001e38 <json_parse_string+0x19c>
          high_surrogate = codepoint;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	61fb      	str	r3, [r7, #28]
          continue; /* we need the low half to form a complete codepoint. */
 8001e36:	e0e4      	b.n	8002002 <json_parse_string+0x366>
        } else if (codepoint >= 0xdc00 &&
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001e3e:	d348      	bcc.n	8001ed2 <json_parse_string+0x236>
                   codepoint <= 0xdfff) { /* low surrogate. */
 8001e40:	68bb      	ldr	r3, [r7, #8]
        } else if (codepoint >= 0xdc00 &&
 8001e42:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001e46:	d244      	bcs.n	8001ed2 <json_parse_string+0x236>
          const unsigned long surrogate_offset =
 8001e48:	4b80      	ldr	r3, [pc, #512]	; (800204c <json_parse_string+0x3b0>)
 8001e4a:	60fb      	str	r3, [r7, #12]
          codepoint = (high_surrogate << 10) + codepoint + surrogate_offset;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	029a      	lsls	r2, r3, #10
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	441a      	add	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4413      	add	r3, r2
 8001e58:	60bb      	str	r3, [r7, #8]
          high_surrogate = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
              (char)(0xF0u | (codepoint >> 18)); /* 11110xxx. */
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	0c9b      	lsrs	r3, r3, #18
 8001e62:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	6239      	str	r1, [r7, #32]
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	440b      	add	r3, r1
              (char)(0xF0u | (codepoint >> 18)); /* 11110xxx. */
 8001e6e:	f062 020f 	orn	r2, r2, #15
 8001e72:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001e74:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 12) & 0x3fu)); /* 10xxxxxx. */
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	0b1b      	lsrs	r3, r3, #12
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e80:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	1c59      	adds	r1, r3, #1
 8001e86:	6239      	str	r1, [r7, #32]
 8001e88:	6939      	ldr	r1, [r7, #16]
 8001e8a:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 12) & 0x3fu)); /* 10xxxxxx. */
 8001e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e90:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001e92:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	099b      	lsrs	r3, r3, #6
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e9e:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	1c59      	adds	r1, r3, #1
 8001ea4:	6239      	str	r1, [r7, #32]
 8001ea6:	6939      	ldr	r1, [r7, #16]
 8001ea8:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8001eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001eae:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001eb0:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eba:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	1c59      	adds	r1, r3, #1
 8001ec0:	6239      	str	r1, [r7, #32]
 8001ec2:	6939      	ldr	r1, [r7, #16]
 8001ec4:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8001ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001eca:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001ecc:	701a      	strb	r2, [r3, #0]
                   codepoint <= 0xdfff) { /* low surrogate. */
 8001ece:	bf00      	nop
      } break;
 8001ed0:	e097      	b.n	8002002 <json_parse_string+0x366>
              (char)(0xe0u | (codepoint >> 12)); /* 1110xxxx. */
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	0b1b      	lsrs	r3, r3, #12
 8001ed6:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
 8001eda:	1c59      	adds	r1, r3, #1
 8001edc:	6239      	str	r1, [r7, #32]
 8001ede:	6939      	ldr	r1, [r7, #16]
 8001ee0:	440b      	add	r3, r1
              (char)(0xe0u | (codepoint >> 12)); /* 1110xxxx. */
 8001ee2:	f062 021f 	orn	r2, r2, #31
 8001ee6:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001ee8:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef4:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	6239      	str	r1, [r7, #32]
 8001efc:	6939      	ldr	r1, [r7, #16]
 8001efe:	440b      	add	r3, r1
              (char)(0x80u | ((codepoint >> 6) & 0x3fu)); /* 10xxxxxx. */
 8001f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f04:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001f06:	701a      	strb	r2, [r3, #0]
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f10:	b2da      	uxtb	r2, r3
          data[bytes_written++] =
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	1c59      	adds	r1, r3, #1
 8001f16:	6239      	str	r1, [r7, #32]
 8001f18:	6939      	ldr	r1, [r7, #16]
 8001f1a:	440b      	add	r3, r1
              (char)(0x80u | (codepoint & 0x3fu)); /* 10xxxxxx. */
 8001f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001f20:	b2d2      	uxtb	r2, r2
          data[bytes_written++] =
 8001f22:	701a      	strb	r2, [r3, #0]
      } break;
 8001f24:	e06d      	b.n	8002002 <json_parse_string+0x366>
      case '"':
        data[bytes_written++] = '"';
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	623a      	str	r2, [r7, #32]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	2222      	movs	r2, #34	; 0x22
 8001f32:	701a      	strb	r2, [r3, #0]
        break;
 8001f34:	e065      	b.n	8002002 <json_parse_string+0x366>
      case '\\':
        data[bytes_written++] = '\\';
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	623a      	str	r2, [r7, #32]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	225c      	movs	r2, #92	; 0x5c
 8001f42:	701a      	strb	r2, [r3, #0]
        break;
 8001f44:	e05d      	b.n	8002002 <json_parse_string+0x366>
      case '/':
        data[bytes_written++] = '/';
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	623a      	str	r2, [r7, #32]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	222f      	movs	r2, #47	; 0x2f
 8001f52:	701a      	strb	r2, [r3, #0]
        break;
 8001f54:	e055      	b.n	8002002 <json_parse_string+0x366>
      case 'b':
        data[bytes_written++] = '\b';
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	623a      	str	r2, [r7, #32]
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	2208      	movs	r2, #8
 8001f62:	701a      	strb	r2, [r3, #0]
        break;
 8001f64:	e04d      	b.n	8002002 <json_parse_string+0x366>
      case 'f':
        data[bytes_written++] = '\f';
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	623a      	str	r2, [r7, #32]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	220c      	movs	r2, #12
 8001f72:	701a      	strb	r2, [r3, #0]
        break;
 8001f74:	e045      	b.n	8002002 <json_parse_string+0x366>
      case 'n':
        data[bytes_written++] = '\n';
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	623a      	str	r2, [r7, #32]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	220a      	movs	r2, #10
 8001f82:	701a      	strb	r2, [r3, #0]
        break;
 8001f84:	e03d      	b.n	8002002 <json_parse_string+0x366>
      case 'r':
        data[bytes_written++] = '\r';
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	623a      	str	r2, [r7, #32]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	220d      	movs	r2, #13
 8001f92:	701a      	strb	r2, [r3, #0]
        break;
 8001f94:	e035      	b.n	8002002 <json_parse_string+0x366>
      case 't':
        data[bytes_written++] = '\t';
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	623a      	str	r2, [r7, #32]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	2209      	movs	r2, #9
 8001fa2:	701a      	strb	r2, [r3, #0]
        break;
 8001fa4:	e02d      	b.n	8002002 <json_parse_string+0x366>
      case '\r':
        data[bytes_written++] = '\r';
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	623a      	str	r2, [r7, #32]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	220d      	movs	r2, #13
 8001fb2:	701a      	strb	r2, [r3, #0]

        /* check if we have a "\r\n" sequence. */
        if ('\n' == src[offset]) {
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	4413      	add	r3, r2
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b0a      	cmp	r3, #10
 8001fbe:	d112      	bne.n	8001fe6 <json_parse_string+0x34a>
          data[bytes_written++] = '\n';
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	623a      	str	r2, [r7, #32]
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4413      	add	r3, r2
 8001fca:	220a      	movs	r2, #10
 8001fcc:	701a      	strb	r2, [r3, #0]
          offset++;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
        }

        break;
 8001fd4:	e007      	b.n	8001fe6 <json_parse_string+0x34a>
      case '\n':
        data[bytes_written++] = '\n';
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	623a      	str	r2, [r7, #32]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	701a      	strb	r2, [r3, #0]
        break;
 8001fe4:	e00d      	b.n	8002002 <json_parse_string+0x366>
        break;
 8001fe6:	bf00      	nop
 8001fe8:	e00b      	b.n	8002002 <json_parse_string+0x366>
      }
    } else {
      /* copy the character. */
      data[bytes_written++] = src[offset++];
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	627a      	str	r2, [r7, #36]	; 0x24
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	6239      	str	r1, [r7, #32]
 8001ffa:	6939      	ldr	r1, [r7, #16]
 8001ffc:	440b      	add	r3, r1
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	701a      	strb	r2, [r3, #0]
  while (quote_to_use != src[offset]) {
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	7dfa      	ldrb	r2, [r7, #23]
 800200c:	429a      	cmp	r2, r3
 800200e:	f47f ae68 	bne.w	8001ce2 <json_parse_string+0x46>
    }
  }

  /* skip trailing '"' or '\''. */
  offset++;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	; 0x24

  /* record the size of the string. */
  string->string_size = bytes_written;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	6a3a      	ldr	r2, [r7, #32]
 800201c:	605a      	str	r2, [r3, #4]

  /* add null terminator to string. */
  data[bytes_written++] = '\0';
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	623a      	str	r2, [r7, #32]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]

  /* move data along. */
  state->data += bytes_written;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	441a      	add	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	611a      	str	r2, [r3, #16]

  /* update offset. */
  state->offset = offset;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	e002      	b.n	8002046 <json_parse_string+0x3aa>
        return; /* we cannot ever reach here. */
 8002040:	bf00      	nop
 8002042:	e000      	b.n	8002046 <json_parse_string+0x3aa>
          return; /* this shouldn't happen as the value was already validated.
 8002044:	bf00      	nop
}
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	fca02400 	.word	0xfca02400

08002050 <json_parse_key>:

json_weak void json_parse_key(struct json_parse_state_s *state,
                              struct json_string_s *string);
void json_parse_key(struct json_parse_state_s *state,
                    struct json_string_s *string) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  if (json_parse_flags_allow_unquoted_keys & state->flags_bitset) {
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d04a      	beq.n	80020fc <json_parse_key+0xac>
    const char *const src = state->src;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60fb      	str	r3, [r7, #12]
    char *const data = state->data;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	60bb      	str	r3, [r7, #8]
    size_t offset = state->offset;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	617b      	str	r3, [r7, #20]

    /* if we are allowing unquoted keys, check for quoted anyway... */
    if (('"' == src[offset]) || ('\'' == src[offset])) {
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b22      	cmp	r3, #34	; 0x22
 8002082:	d005      	beq.n	8002090 <json_parse_key+0x40>
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	4413      	add	r3, r2
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b27      	cmp	r3, #39	; 0x27
 800208e:	d104      	bne.n	800209a <json_parse_key+0x4a>
      /* ... if we got a quote, just parse the key as a string as normal. */
      json_parse_string(state, string);
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fe02 	bl	8001c9c <json_parse_string>
    }
  } else {
    /* we are only allowed to have quoted keys, so just parse a string! */
    json_parse_string(state, string);
  }
}
 8002098:	e034      	b.n	8002104 <json_parse_key+0xb4>
      size_t size = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
      string->string = state->data;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]
      while (is_valid_unquoted_key_char(src[offset])) {
 80020a6:	e00b      	b.n	80020c0 <json_parse_key+0x70>
        data[size++] = src[offset++];
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	617a      	str	r2, [r7, #20]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	441a      	add	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1c59      	adds	r1, r3, #1
 80020b6:	6139      	str	r1, [r7, #16]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	440b      	add	r3, r1
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	701a      	strb	r2, [r3, #0]
      while (is_valid_unquoted_key_char(src[offset])) {
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe ff31 	bl	8000f30 <is_valid_unquoted_key_char>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e9      	bne.n	80020a8 <json_parse_key+0x58>
      data[size] = '\0';
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
      string->string_size = size++;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	613a      	str	r2, [r7, #16]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	6053      	str	r3, [r2, #4]
      state->data += size;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	441a      	add	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	611a      	str	r2, [r3, #16]
      state->offset = offset;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	609a      	str	r2, [r3, #8]
}
 80020fa:	e003      	b.n	8002104 <json_parse_key+0xb4>
    json_parse_string(state, string);
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fdcc 	bl	8001c9c <json_parse_string>
}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <json_parse_object>:

json_weak void json_parse_object(struct json_parse_state_s *state,
                                 int is_global_object,
                                 struct json_object_s *object);
void json_parse_object(struct json_parse_state_s *state, int is_global_object,
                       struct json_object_s *object) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b090      	sub	sp, #64	; 0x40
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  const size_t size = state->size;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
  const char *const src = state->src;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	623b      	str	r3, [r7, #32]
  size_t elements = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	63fb      	str	r3, [r7, #60]	; 0x3c
  int allow_comma = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
  struct json_object_element_s *previous = json_null;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	; 0x34

  if (is_global_object) {
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <json_parse_object+0x42>
    /* if we skipped some whitespace, and then found an opening '{' of an. */
    /* object, we actually have a normal JSON object at the root of the DOM...
     */
    if ('{' == src[state->offset]) {
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	6a3a      	ldr	r2, [r7, #32]
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b7b      	cmp	r3, #123	; 0x7b
 8002148:	d101      	bne.n	800214e <json_parse_object+0x42>
      /* . and we don't actually have a global object after all! */
      is_global_object = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
    }
  }

  if (!is_global_object) {
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <json_parse_object+0x52>
    /* skip leading '{'. */
    state->offset++;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	609a      	str	r2, [r3, #8]
  }

  (void)json_skip_all_skippables(state);
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7fe fceb 	bl	8000b3a <json_skip_all_skippables>

  /* reset elements. */
  elements = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (state->offset < size) {
 8002168:	e0b7      	b.n	80022da <json_parse_object+0x1ce>
    struct json_object_element_s *element = json_null;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
    struct json_string_s *string = json_null;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
    struct json_value_s *value = json_null;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (!is_global_object) {
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10f      	bne.n	800219c <json_parse_object+0x90>
      (void)json_skip_all_skippables(state);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7fe fcdc 	bl	8000b3a <json_skip_all_skippables>

      if ('}' == src[state->offset]) {
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	6a3a      	ldr	r2, [r7, #32]
 8002188:	4413      	add	r3, r2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b7d      	cmp	r3, #125	; 0x7d
 800218e:	d10c      	bne.n	80021aa <json_parse_object+0x9e>
        /* skip trailing '}'. */
        state->offset++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	609a      	str	r2, [r3, #8]

        /* finished the object! */
        break;
 800219a:	e0a6      	b.n	80022ea <json_parse_object+0x1de>
      }
    } else {
      if (json_skip_all_skippables(state)) {
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7fe fccc 	bl	8000b3a <json_skip_all_skippables>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 809f 	bne.w	80022e8 <json_parse_object+0x1dc>
        break;
      }
    }

    /* if we parsed at least one element previously, grok for a comma. */
    if (allow_comma) {
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <json_parse_object+0xc2>
      if (',' == src[state->offset]) {
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	6a3a      	ldr	r2, [r7, #32]
 80021b6:	4413      	add	r3, r2
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b2c      	cmp	r3, #44	; 0x2c
 80021bc:	d107      	bne.n	80021ce <json_parse_object+0xc2>
        /* skip comma. */
        state->offset++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	63bb      	str	r3, [r7, #56]	; 0x38
        continue;
 80021cc:	e085      	b.n	80022da <json_parse_object+0x1ce>
      }
    }

    element = (struct json_object_element_s *)state->dom;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	61fb      	str	r3, [r7, #28]

    state->dom += sizeof(struct json_object_element_s);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f103 020c 	add.w	r2, r3, #12
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	615a      	str	r2, [r3, #20]

    if (json_null == previous) {
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <json_parse_object+0xe2>
      /* this is our first element, so record it in our object. */
      object->start = element;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e002      	b.n	80021f4 <json_parse_object+0xe8>
    } else {
      previous->next = element;
 80021ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f0:	69fa      	ldr	r2, [r7, #28]
 80021f2:	609a      	str	r2, [r3, #8]
    }

    previous = element;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34

    if (json_parse_flags_allow_location_information & flags_bitset) {
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01a      	beq.n	8002238 <json_parse_object+0x12c>
      struct json_string_ex_s *string_ex =
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	61bb      	str	r3, [r7, #24]
          (struct json_string_ex_s *)state->dom;
      state->dom += sizeof(struct json_string_ex_s);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f103 0214 	add.w	r2, r3, #20
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	615a      	str	r2, [r3, #20]

      string_ex->offset = state->offset;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	609a      	str	r2, [r3, #8]
      string_ex->line_no = state->line_no;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1a      	ldr	r2, [r3, #32]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	60da      	str	r2, [r3, #12]
      string_ex->row_no = state->offset - state->line_offset;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	1ad2      	subs	r2, r2, r3
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	611a      	str	r2, [r3, #16]

      string = &(string_ex->string);
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
 8002236:	e008      	b.n	800224a <json_parse_object+0x13e>
    } else {
      string = (struct json_string_s *)state->dom;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
      state->dom += sizeof(struct json_string_s);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f103 0208 	add.w	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	615a      	str	r2, [r3, #20]
    }

    element->name = string;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224e:	601a      	str	r2, [r3, #0]

    (void)json_parse_key(state, string);
 8002250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff fefc 	bl	8002050 <json_parse_key>

    (void)json_skip_all_skippables(state);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7fe fc6e 	bl	8000b3a <json_skip_all_skippables>

    /* skip colon or equals. */
    state->offset++;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]

    (void)json_skip_all_skippables(state);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7fe fc66 	bl	8000b3a <json_skip_all_skippables>

    if (json_parse_flags_allow_location_information & flags_bitset) {
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01a      	beq.n	80022ae <json_parse_object+0x1a2>
      struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state->dom;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	617b      	str	r3, [r7, #20]
      state->dom += sizeof(struct json_value_ex_s);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f103 0214 	add.w	r2, r3, #20
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	615a      	str	r2, [r3, #20]

      value_ex->offset = state->offset;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	609a      	str	r2, [r3, #8]
      value_ex->line_no = state->line_no;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6a1a      	ldr	r2, [r3, #32]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	60da      	str	r2, [r3, #12]
      value_ex->row_no = state->offset - state->line_offset;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	1ad2      	subs	r2, r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	611a      	str	r2, [r3, #16]

      value = &(value_ex->value);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ac:	e008      	b.n	80022c0 <json_parse_object+0x1b4>
    } else {
      value = (struct json_value_s *)state->dom;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      state->dom += sizeof(struct json_value_s);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	f103 0208 	add.w	r2, r3, #8
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	615a      	str	r2, [r3, #20]
    }

    element->value = value;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c4:	605a      	str	r2, [r3, #4]

    json_parse_value(state, /* is_global_object = */ 0, value);
 80022c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c8:	2100      	movs	r1, #0
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa06 	bl	80026dc <json_parse_value>

    /* successfully parsed a name/value pair! */
    elements++;
 80022d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d2:	3301      	adds	r3, #1
 80022d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    allow_comma = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
  while (state->offset < size) {
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e0:	429a      	cmp	r2, r3
 80022e2:	f63f af42 	bhi.w	800216a <json_parse_object+0x5e>
 80022e6:	e000      	b.n	80022ea <json_parse_object+0x1de>
        break;
 80022e8:	bf00      	nop
  }

  /* if we had at least one element, end the linked list. */
  if (previous) {
 80022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <json_parse_object+0x1ea>
    previous->next = json_null;
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	2200      	movs	r2, #0
 80022f4:	609a      	str	r2, [r3, #8]
  }

  if (0 == elements) {
 80022f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <json_parse_object+0x1f6>
    object->start = json_null;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
  }

  object->length = elements;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002306:	605a      	str	r2, [r3, #4]
}
 8002308:	bf00      	nop
 800230a:	3740      	adds	r7, #64	; 0x40
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <json_parse_array>:

json_weak void json_parse_array(struct json_parse_state_s *state,
                                struct json_array_s *array);
void json_parse_array(struct json_parse_state_s *state,
                      struct json_array_s *array) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  const char *const src = state->src;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]
  const size_t size = state->size;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
  size_t elements = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  int allow_comma = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  struct json_array_element_s *previous = json_null;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]

  /* skip leading '['. */
  state->offset++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]

  (void)json_skip_all_skippables(state);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe fbfc 	bl	8000b3a <json_skip_all_skippables>

  /* reset elements. */
  elements = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24

  do {
    struct json_array_element_s *element = json_null;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
    struct json_value_s *value = json_null;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]

    (void)json_skip_all_skippables(state);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fbf3 	bl	8000b3a <json_skip_all_skippables>

    if (']' == src[state->offset]) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b5d      	cmp	r3, #93	; 0x5d
 8002360:	d105      	bne.n	800236e <json_parse_array+0x5e>
      /* skip trailing ']'. */
      state->offset++;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	609a      	str	r2, [r3, #8]

      /* finished the array! */
      break;
 800236c:	e062      	b.n	8002434 <json_parse_array+0x124>
    }

    /* if we parsed at least one element previously, grok for a comma. */
    if (allow_comma) {
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <json_parse_array+0x82>
      if (',' == src[state->offset]) {
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	4413      	add	r3, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b2c      	cmp	r3, #44	; 0x2c
 8002380:	d107      	bne.n	8002392 <json_parse_array+0x82>
        /* skip comma. */
        state->offset++;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
        allow_comma = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
        continue;
 8002390:	e04b      	b.n	800242a <json_parse_array+0x11a>
      }
    }

    element = (struct json_array_element_s *)state->dom;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	60fb      	str	r3, [r7, #12]

    state->dom += sizeof(struct json_array_element_s);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f103 0208 	add.w	r2, r3, #8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	615a      	str	r2, [r3, #20]

    if (json_null == previous) {
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <json_parse_array+0xa2>
      /* this is our first element, so record it in our array. */
      array->start = element;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e002      	b.n	80023b8 <json_parse_array+0xa8>
    } else {
      previous->next = element;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	605a      	str	r2, [r3, #4]
    }

    previous = element;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	61fb      	str	r3, [r7, #28]

    if (json_parse_flags_allow_location_information & state->flags_bitset) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01a      	beq.n	80023fe <json_parse_array+0xee>
      struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state->dom;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	60bb      	str	r3, [r7, #8]
      state->dom += sizeof(struct json_value_ex_s);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f103 0214 	add.w	r2, r3, #20
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	615a      	str	r2, [r3, #20]

      value_ex->offset = state->offset;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	609a      	str	r2, [r3, #8]
      value_ex->line_no = state->line_no;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	60da      	str	r2, [r3, #12]
      value_ex->row_no = state->offset - state->line_offset;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1ad2      	subs	r2, r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	611a      	str	r2, [r3, #16]

      value = &(value_ex->value);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e008      	b.n	8002410 <json_parse_array+0x100>
    } else {
      value = (struct json_value_s *)state->dom;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	61bb      	str	r3, [r7, #24]
      state->dom += sizeof(struct json_value_s);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f103 0208 	add.w	r2, r3, #8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	615a      	str	r2, [r3, #20]
    }

    element->value = value;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	601a      	str	r2, [r3, #0]

    json_parse_value(state, /* is_global_object = */ 0, value);
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	2100      	movs	r1, #0
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f95e 	bl	80026dc <json_parse_value>

    /* successfully parsed an array element! */
    elements++;
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	3301      	adds	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
    allow_comma = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	623b      	str	r3, [r7, #32]
  } while (state->offset < size);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d888      	bhi.n	8002346 <json_parse_array+0x36>

  /* end the linked list. */
  if (previous) {
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <json_parse_array+0x130>
    previous->next = json_null;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2200      	movs	r2, #0
 800243e:	605a      	str	r2, [r3, #4]
  }

  if (0 == elements) {
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <json_parse_array+0x13c>
    array->start = json_null;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
  }

  array->length = elements;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	605a      	str	r2, [r3, #4]
}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <json_parse_number>:

json_weak void json_parse_number(struct json_parse_state_s *state,
                                 struct json_number_s *number);
void json_parse_number(struct json_parse_state_s *state,
                       struct json_number_s *number) {
 800245c:	b480      	push	{r7}
 800245e:	b08f      	sub	sp, #60	; 0x3c
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  const size_t flags_bitset = state->flags_bitset;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	623b      	str	r3, [r7, #32]
  size_t offset = state->offset;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
  const size_t size = state->size;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61fb      	str	r3, [r7, #28]
  size_t bytes_written = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
  const char *const src = state->src;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
  char *data = state->data;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	617b      	str	r3, [r7, #20]

  number->number = data;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	601a      	str	r2, [r3, #0]

  if (json_parse_flags_allow_hexadecimal_numbers & flags_bitset) {
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80b4 	beq.w	8002602 <json_parse_number+0x1a6>
    if (('0' == src[offset]) &&
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b30      	cmp	r3, #48	; 0x30
 80024a4:	f040 80ad 	bne.w	8002602 <json_parse_number+0x1a6>
        (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	3301      	adds	r3, #1
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
    if (('0' == src[offset]) &&
 80024b2:	2b78      	cmp	r3, #120	; 0x78
 80024b4:	d014      	beq.n	80024e0 <json_parse_number+0x84>
        (('x' == src[offset + 1]) || ('X' == src[offset + 1]))) {
 80024b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b8:	3301      	adds	r3, #1
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4413      	add	r3, r2
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b58      	cmp	r3, #88	; 0x58
 80024c2:	f040 809e 	bne.w	8002602 <json_parse_number+0x1a6>
      /* consume hexadecimal digits. */
      while ((offset < size) &&
 80024c6:	e00b      	b.n	80024e0 <json_parse_number+0x84>
             (('0' <= src[offset] && src[offset] <= '9') ||
              ('a' <= src[offset] && src[offset] <= 'f') ||
              ('A' <= src[offset] && src[offset] <= 'F') ||
              ('x' == src[offset]) || ('X' == src[offset]))) {
        data[bytes_written++] = src[offset++];
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	637a      	str	r2, [r7, #52]	; 0x34
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	441a      	add	r2, r3
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	1c59      	adds	r1, r3, #1
 80024d6:	6339      	str	r1, [r7, #48]	; 0x30
 80024d8:	6979      	ldr	r1, [r7, #20]
 80024da:	440b      	add	r3, r1
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	701a      	strb	r2, [r3, #0]
      while ((offset < size) &&
 80024e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f080 808c 	bcs.w	8002602 <json_parse_number+0x1a6>
             (('0' <= src[offset] && src[offset] <= '9') ||
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
      while ((offset < size) &&
 80024f2:	2b2f      	cmp	r3, #47	; 0x2f
 80024f4:	d905      	bls.n	8002502 <json_parse_number+0xa6>
             (('0' <= src[offset] && src[offset] <= '9') ||
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b39      	cmp	r3, #57	; 0x39
 8002500:	d9e2      	bls.n	80024c8 <json_parse_number+0x6c>
              ('a' <= src[offset] && src[offset] <= 'f') ||
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	4413      	add	r3, r2
 8002508:	781b      	ldrb	r3, [r3, #0]
             (('0' <= src[offset] && src[offset] <= '9') ||
 800250a:	2b60      	cmp	r3, #96	; 0x60
 800250c:	d905      	bls.n	800251a <json_parse_number+0xbe>
              ('a' <= src[offset] && src[offset] <= 'f') ||
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b66      	cmp	r3, #102	; 0x66
 8002518:	d9d6      	bls.n	80024c8 <json_parse_number+0x6c>
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
              ('a' <= src[offset] && src[offset] <= 'f') ||
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d905      	bls.n	8002532 <json_parse_number+0xd6>
              ('A' <= src[offset] && src[offset] <= 'F') ||
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	4413      	add	r3, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b46      	cmp	r3, #70	; 0x46
 8002530:	d9ca      	bls.n	80024c8 <json_parse_number+0x6c>
              ('x' == src[offset]) || ('X' == src[offset]))) {
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
              ('A' <= src[offset] && src[offset] <= 'F') ||
 800253a:	2b78      	cmp	r3, #120	; 0x78
 800253c:	d0c4      	beq.n	80024c8 <json_parse_number+0x6c>
              ('x' == src[offset]) || ('X' == src[offset]))) {
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b58      	cmp	r3, #88	; 0x58
 8002548:	d0be      	beq.n	80024c8 <json_parse_number+0x6c>
      }
    }
  }

  while (offset < size) {
 800254a:	e05a      	b.n	8002602 <json_parse_number+0x1a6>
    int end = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (src[offset]) {
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	4413      	add	r3, r2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b45      	cmp	r3, #69	; 0x45
 800255a:	dc3d      	bgt.n	80025d8 <json_parse_number+0x17c>
 800255c:	2b2b      	cmp	r3, #43	; 0x2b
 800255e:	db4a      	blt.n	80025f6 <json_parse_number+0x19a>
 8002560:	3b2b      	subs	r3, #43	; 0x2b
 8002562:	2b1a      	cmp	r3, #26
 8002564:	d847      	bhi.n	80025f6 <json_parse_number+0x19a>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <json_parse_number+0x110>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	080025dd 	.word	0x080025dd
 8002570:	080025f7 	.word	0x080025f7
 8002574:	080025dd 	.word	0x080025dd
 8002578:	080025dd 	.word	0x080025dd
 800257c:	080025f7 	.word	0x080025f7
 8002580:	080025dd 	.word	0x080025dd
 8002584:	080025dd 	.word	0x080025dd
 8002588:	080025dd 	.word	0x080025dd
 800258c:	080025dd 	.word	0x080025dd
 8002590:	080025dd 	.word	0x080025dd
 8002594:	080025dd 	.word	0x080025dd
 8002598:	080025dd 	.word	0x080025dd
 800259c:	080025dd 	.word	0x080025dd
 80025a0:	080025dd 	.word	0x080025dd
 80025a4:	080025dd 	.word	0x080025dd
 80025a8:	080025f7 	.word	0x080025f7
 80025ac:	080025f7 	.word	0x080025f7
 80025b0:	080025f7 	.word	0x080025f7
 80025b4:	080025f7 	.word	0x080025f7
 80025b8:	080025f7 	.word	0x080025f7
 80025bc:	080025f7 	.word	0x080025f7
 80025c0:	080025f7 	.word	0x080025f7
 80025c4:	080025f7 	.word	0x080025f7
 80025c8:	080025f7 	.word	0x080025f7
 80025cc:	080025f7 	.word	0x080025f7
 80025d0:	080025f7 	.word	0x080025f7
 80025d4:	080025dd 	.word	0x080025dd
 80025d8:	2b65      	cmp	r3, #101	; 0x65
 80025da:	d10c      	bne.n	80025f6 <json_parse_number+0x19a>
    case '.':
    case 'e':
    case 'E':
    case '+':
    case '-':
      data[bytes_written++] = src[offset++];
 80025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	637a      	str	r2, [r7, #52]	; 0x34
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	441a      	add	r2, r3
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	1c59      	adds	r1, r3, #1
 80025ea:	6339      	str	r1, [r7, #48]	; 0x30
 80025ec:	6979      	ldr	r1, [r7, #20]
 80025ee:	440b      	add	r3, r1
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	701a      	strb	r2, [r3, #0]
      break;
 80025f4:	e002      	b.n	80025fc <json_parse_number+0x1a0>
    default:
      end = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80025fa:	bf00      	nop
    }

    if (0 != end) {
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d104      	bne.n	800260c <json_parse_number+0x1b0>
  while (offset < size) {
 8002602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3a0      	bcc.n	800254c <json_parse_number+0xf0>
 800260a:	e000      	b.n	800260e <json_parse_number+0x1b2>
      break;
 800260c:	bf00      	nop
    }
  }

  if (json_parse_flags_allow_inf_and_nan & flags_bitset) {
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d047      	beq.n	80026a8 <json_parse_number+0x24c>
    const size_t inf_strlen = 8; /* = strlen("Infinity");. */
 8002618:	2308      	movs	r3, #8
 800261a:	613b      	str	r3, [r7, #16]
    const size_t nan_strlen = 3; /* = strlen("NaN");. */
 800261c:	2303      	movs	r3, #3
 800261e:	60fb      	str	r3, [r7, #12]

    if (offset + inf_strlen < size) {
 8002620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	429a      	cmp	r2, r3
 800262a:	d91b      	bls.n	8002664 <json_parse_number+0x208>
      if ('I' == src[offset]) {
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b49      	cmp	r3, #73	; 0x49
 8002636:	d115      	bne.n	8002664 <json_parse_number+0x208>
        size_t i;
        /* We found our special 'Infinity' keyword! */
        for (i = 0; i < inf_strlen; i++) {
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
 800263c:	e00e      	b.n	800265c <json_parse_number+0x200>
          data[bytes_written++] = src[offset++];
 800263e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	637a      	str	r2, [r7, #52]	; 0x34
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	441a      	add	r2, r3
 8002648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264a:	1c59      	adds	r1, r3, #1
 800264c:	6339      	str	r1, [r7, #48]	; 0x30
 800264e:	6979      	ldr	r1, [r7, #20]
 8002650:	440b      	add	r3, r1
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < inf_strlen; i++) {
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	3301      	adds	r3, #1
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
 800265c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d3ec      	bcc.n	800263e <json_parse_number+0x1e2>
        }
      }
    }

    if (offset + nan_strlen < size) {
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	429a      	cmp	r2, r3
 800266e:	d91b      	bls.n	80026a8 <json_parse_number+0x24c>
      if ('N' == src[offset]) {
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b4e      	cmp	r3, #78	; 0x4e
 800267a:	d115      	bne.n	80026a8 <json_parse_number+0x24c>
        size_t i;
        /* We found our special 'NaN' keyword! */
        for (i = 0; i < nan_strlen; i++) {
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	e00e      	b.n	80026a0 <json_parse_number+0x244>
          data[bytes_written++] = src[offset++];
 8002682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	637a      	str	r2, [r7, #52]	; 0x34
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	441a      	add	r2, r3
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	6339      	str	r1, [r7, #48]	; 0x30
 8002692:	6979      	ldr	r1, [r7, #20]
 8002694:	440b      	add	r3, r1
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nan_strlen; i++) {
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3301      	adds	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3ec      	bcc.n	8002682 <json_parse_number+0x226>
      }
    }
  }

  /* record the size of the number. */
  number->number_size = bytes_written;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ac:	605a      	str	r2, [r3, #4]
  /* add null terminator to number string. */
  data[bytes_written++] = '\0';
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	633a      	str	r2, [r7, #48]	; 0x30
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4413      	add	r3, r2
 80026b8:	2200      	movs	r2, #0
 80026ba:	701a      	strb	r2, [r3, #0]
  /* move data along. */
  state->data += bytes_written;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	441a      	add	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	611a      	str	r2, [r3, #16]
  /* update offset. */
  state->offset = offset;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026cc:	609a      	str	r2, [r3, #8]
}
 80026ce:	bf00      	nop
 80026d0:	373c      	adds	r7, #60	; 0x3c
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <json_parse_value>:

json_weak void json_parse_value(struct json_parse_state_s *state,
                                int is_global_object,
                                struct json_value_s *value);
void json_parse_value(struct json_parse_state_s *state, int is_global_object,
                      struct json_value_s *value) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  const size_t flags_bitset = state->flags_bitset;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61fb      	str	r3, [r7, #28]
  const char *const src = state->src;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
  const size_t size = state->size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	617b      	str	r3, [r7, #20]
  size_t offset;

  (void)json_skip_all_skippables(state);
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7fe fa1d 	bl	8000b3a <json_skip_all_skippables>

  /* cache offset now. */
  offset = state->offset;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]

  if (is_global_object) {
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d014      	beq.n	8002736 <json_parse_value+0x5a>
    value->type = json_type_object;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	605a      	str	r2, [r3, #4]
    value->payload = state->dom;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
    state->dom += sizeof(struct json_object_s);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f103 0208 	add.w	r2, r3, #8
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	615a      	str	r2, [r3, #20]
    json_parse_object(state, /* is_global_object = */ 1,
                      (struct json_object_s *)value->payload);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
    json_parse_object(state, /* is_global_object = */ 1,
 800272a:	461a      	mov	r2, r3
 800272c:	2101      	movs	r1, #1
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff fcec 	bl	800210c <json_parse_object>
        json_parse_number(state, (struct json_number_s *)value->payload);
      }
      break;
    }
  }
}
 8002734:	e1eb      	b.n	8002b0e <json_parse_value+0x432>
    switch (src[offset]) {
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b5b      	cmp	r3, #91	; 0x5b
 8002740:	dc7e      	bgt.n	8002840 <json_parse_value+0x164>
 8002742:	2b22      	cmp	r3, #34	; 0x22
 8002744:	f2c0 80d0 	blt.w	80028e8 <json_parse_value+0x20c>
 8002748:	3b22      	subs	r3, #34	; 0x22
 800274a:	2b39      	cmp	r3, #57	; 0x39
 800274c:	f200 80cc 	bhi.w	80028e8 <json_parse_value+0x20c>
 8002750:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <json_parse_value+0x7c>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002847 	.word	0x08002847
 800275c:	080028e9 	.word	0x080028e9
 8002760:	080028e9 	.word	0x080028e9
 8002764:	080028e9 	.word	0x080028e9
 8002768:	080028e9 	.word	0x080028e9
 800276c:	08002847 	.word	0x08002847
 8002770:	080028e9 	.word	0x080028e9
 8002774:	080028e9 	.word	0x080028e9
 8002778:	080028e9 	.word	0x080028e9
 800277c:	080028c1 	.word	0x080028c1
 8002780:	080028e9 	.word	0x080028e9
 8002784:	080028c1 	.word	0x080028c1
 8002788:	080028c1 	.word	0x080028c1
 800278c:	080028e9 	.word	0x080028e9
 8002790:	080028c1 	.word	0x080028c1
 8002794:	080028c1 	.word	0x080028c1
 8002798:	080028c1 	.word	0x080028c1
 800279c:	080028c1 	.word	0x080028c1
 80027a0:	080028c1 	.word	0x080028c1
 80027a4:	080028c1 	.word	0x080028c1
 80027a8:	080028c1 	.word	0x080028c1
 80027ac:	080028c1 	.word	0x080028c1
 80027b0:	080028c1 	.word	0x080028c1
 80027b4:	080028c1 	.word	0x080028c1
 80027b8:	080028e9 	.word	0x080028e9
 80027bc:	080028e9 	.word	0x080028e9
 80027c0:	080028e9 	.word	0x080028e9
 80027c4:	080028e9 	.word	0x080028e9
 80027c8:	080028e9 	.word	0x080028e9
 80027cc:	080028e9 	.word	0x080028e9
 80027d0:	080028e9 	.word	0x080028e9
 80027d4:	080028e9 	.word	0x080028e9
 80027d8:	080028e9 	.word	0x080028e9
 80027dc:	080028e9 	.word	0x080028e9
 80027e0:	080028e9 	.word	0x080028e9
 80027e4:	080028e9 	.word	0x080028e9
 80027e8:	080028e9 	.word	0x080028e9
 80027ec:	080028e9 	.word	0x080028e9
 80027f0:	080028e9 	.word	0x080028e9
 80027f4:	080028e9 	.word	0x080028e9
 80027f8:	080028e9 	.word	0x080028e9
 80027fc:	080028e9 	.word	0x080028e9
 8002800:	080028e9 	.word	0x080028e9
 8002804:	080028e9 	.word	0x080028e9
 8002808:	080028e9 	.word	0x080028e9
 800280c:	080028e9 	.word	0x080028e9
 8002810:	080028e9 	.word	0x080028e9
 8002814:	080028e9 	.word	0x080028e9
 8002818:	080028e9 	.word	0x080028e9
 800281c:	080028e9 	.word	0x080028e9
 8002820:	080028e9 	.word	0x080028e9
 8002824:	080028e9 	.word	0x080028e9
 8002828:	080028e9 	.word	0x080028e9
 800282c:	080028e9 	.word	0x080028e9
 8002830:	080028e9 	.word	0x080028e9
 8002834:	080028e9 	.word	0x080028e9
 8002838:	080028e9 	.word	0x080028e9
 800283c:	08002899 	.word	0x08002899
 8002840:	2b7b      	cmp	r3, #123	; 0x7b
 8002842:	d014      	beq.n	800286e <json_parse_value+0x192>
 8002844:	e050      	b.n	80028e8 <json_parse_value+0x20c>
      value->type = json_type_string;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_string_s);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f103 0208 	add.w	r2, r3, #8
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	615a      	str	r2, [r3, #20]
      json_parse_string(state, (struct json_string_s *)value->payload);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7ff fa18 	bl	8001c9c <json_parse_string>
      break;
 800286c:	e14f      	b.n	8002b0e <json_parse_value+0x432>
      value->type = json_type_object;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_object_s);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f103 0208 	add.w	r2, r3, #8
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	615a      	str	r2, [r3, #20]
                        (struct json_object_s *)value->payload);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
      json_parse_object(state, /* is_global_object = */ 0,
 800288c:	461a      	mov	r2, r3
 800288e:	2100      	movs	r1, #0
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f7ff fc3b 	bl	800210c <json_parse_object>
      break;
 8002896:	e13a      	b.n	8002b0e <json_parse_value+0x432>
      value->type = json_type_array;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_array_s);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f103 0208 	add.w	r2, r3, #8
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	615a      	str	r2, [r3, #20]
      json_parse_array(state, (struct json_array_s *)value->payload);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fd29 	bl	8002310 <json_parse_array>
      break;
 80028be:	e126      	b.n	8002b0e <json_parse_value+0x432>
      value->type = json_type_number;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	605a      	str	r2, [r3, #4]
      value->payload = state->dom;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	601a      	str	r2, [r3, #0]
      state->dom += sizeof(struct json_number_s);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f103 0208 	add.w	r2, r3, #8
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	615a      	str	r2, [r3, #20]
      json_parse_number(state, (struct json_number_s *)value->payload);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff fdbb 	bl	800245c <json_parse_number>
      break;
 80028e6:	e112      	b.n	8002b0e <json_parse_value+0x432>
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3304      	adds	r3, #4
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d326      	bcc.n	8002940 <json_parse_value+0x264>
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b74      	cmp	r3, #116	; 0x74
 80028fc:	d120      	bne.n	8002940 <json_parse_value+0x264>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	3301      	adds	r3, #1
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4413      	add	r3, r2
 8002906:	781b      	ldrb	r3, [r3, #0]
      if ((offset + 4) <= size && 't' == src[offset + 0] &&
 8002908:	2b72      	cmp	r3, #114	; 0x72
 800290a:	d119      	bne.n	8002940 <json_parse_value+0x264>
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	3302      	adds	r3, #2
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b75      	cmp	r3, #117	; 0x75
 8002918:	d112      	bne.n	8002940 <json_parse_value+0x264>
          'e' == src[offset + 3]) {
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	3303      	adds	r3, #3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	781b      	ldrb	r3, [r3, #0]
          'r' == src[offset + 1] && 'u' == src[offset + 2] &&
 8002924:	2b65      	cmp	r3, #101	; 0x65
 8002926:	d10b      	bne.n	8002940 <json_parse_value+0x264>
        value->type = json_type_true;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
        state->offset += 4;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	1d1a      	adds	r2, r3, #4
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	e0e5      	b.n	8002b0c <json_parse_value+0x430>
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	3305      	adds	r3, #5
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	429a      	cmp	r2, r3
 8002948:	d32d      	bcc.n	80029a6 <json_parse_value+0x2ca>
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b66      	cmp	r3, #102	; 0x66
 8002954:	d127      	bne.n	80029a6 <json_parse_value+0x2ca>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	3301      	adds	r3, #1
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 5) <= size && 'f' == src[offset + 0] &&
 8002960:	2b61      	cmp	r3, #97	; 0x61
 8002962:	d120      	bne.n	80029a6 <json_parse_value+0x2ca>
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	3302      	adds	r3, #2
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b6c      	cmp	r3, #108	; 0x6c
 8002970:	d119      	bne.n	80029a6 <json_parse_value+0x2ca>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	3303      	adds	r3, #3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	781b      	ldrb	r3, [r3, #0]
                 'a' == src[offset + 1] && 'l' == src[offset + 2] &&
 800297c:	2b73      	cmp	r3, #115	; 0x73
 800297e:	d112      	bne.n	80029a6 <json_parse_value+0x2ca>
                 's' == src[offset + 3] && 'e' == src[offset + 4]) {
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	3304      	adds	r3, #4
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b65      	cmp	r3, #101	; 0x65
 800298c:	d10b      	bne.n	80029a6 <json_parse_value+0x2ca>
        value->type = json_type_false;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2205      	movs	r2, #5
 8002992:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
        state->offset += 5;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	1d5a      	adds	r2, r3, #5
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e0b2      	b.n	8002b0c <json_parse_value+0x430>
      } else if ((offset + 4) <= size && 'n' == src[offset + 0] &&
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	3304      	adds	r3, #4
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d326      	bcc.n	80029fe <json_parse_value+0x322>
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b6e      	cmp	r3, #110	; 0x6e
 80029ba:	d120      	bne.n	80029fe <json_parse_value+0x322>
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	3301      	adds	r3, #1
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
      } else if ((offset + 4) <= size && 'n' == src[offset + 0] &&
 80029c6:	2b75      	cmp	r3, #117	; 0x75
 80029c8:	d119      	bne.n	80029fe <json_parse_value+0x322>
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	3302      	adds	r3, #2
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b6c      	cmp	r3, #108	; 0x6c
 80029d6:	d112      	bne.n	80029fe <json_parse_value+0x322>
                 'l' == src[offset + 3]) {
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3303      	adds	r3, #3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
                 'u' == src[offset + 1] && 'l' == src[offset + 2] &&
 80029e2:	2b6c      	cmp	r3, #108	; 0x6c
 80029e4:	d10b      	bne.n	80029fe <json_parse_value+0x322>
        value->type = json_type_null;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2206      	movs	r2, #6
 80029ea:	605a      	str	r2, [r3, #4]
        value->payload = json_null;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
        state->offset += 4;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	1d1a      	adds	r2, r3, #4
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e086      	b.n	8002b0c <json_parse_value+0x430>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02c      	beq.n	8002a62 <json_parse_value+0x386>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	3303      	adds	r3, #3
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d327      	bcc.n	8002a62 <json_parse_value+0x386>
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b4e      	cmp	r3, #78	; 0x4e
 8002a1c:	d121      	bne.n	8002a62 <json_parse_value+0x386>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	3301      	adds	r3, #1
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
                 (offset + 3) <= size && 'N' == src[offset + 0] &&
 8002a28:	2b61      	cmp	r3, #97	; 0x61
 8002a2a:	d11a      	bne.n	8002a62 <json_parse_value+0x386>
                 'a' == src[offset + 1] && 'N' == src[offset + 2]) {
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b4e      	cmp	r3, #78	; 0x4e
 8002a38:	d113      	bne.n	8002a62 <json_parse_value+0x386>
        value->type = json_type_number;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	605a      	str	r2, [r3, #4]
        value->payload = state->dom;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	601a      	str	r2, [r3, #0]
        state->dom += sizeof(struct json_number_s);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f103 0208 	add.w	r2, r3, #8
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	615a      	str	r2, [r3, #20]
        json_parse_number(state, (struct json_number_s *)value->payload);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7ff fcfe 	bl	800245c <json_parse_number>
 8002a60:	e054      	b.n	8002b0c <json_parse_value+0x430>
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d04f      	beq.n	8002b0c <json_parse_value+0x430>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	3308      	adds	r3, #8
      } else if ((json_parse_flags_allow_inf_and_nan & flags_bitset) &&
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d34a      	bcc.n	8002b0c <json_parse_value+0x430>
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b49      	cmp	r3, #73	; 0x49
 8002a80:	d144      	bne.n	8002b0c <json_parse_value+0x430>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	3301      	adds	r3, #1
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
                 (offset + 8) <= size && 'I' == src[offset + 0] &&
 8002a8c:	2b6e      	cmp	r3, #110	; 0x6e
 8002a8e:	d13d      	bne.n	8002b0c <json_parse_value+0x430>
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	3302      	adds	r3, #2
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b66      	cmp	r3, #102	; 0x66
 8002a9c:	d136      	bne.n	8002b0c <json_parse_value+0x430>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
                 'n' == src[offset + 1] && 'f' == src[offset + 2] &&
 8002aa8:	2b69      	cmp	r3, #105	; 0x69
 8002aaa:	d12f      	bne.n	8002b0c <json_parse_value+0x430>
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b6e      	cmp	r3, #110	; 0x6e
 8002ab8:	d128      	bne.n	8002b0c <json_parse_value+0x430>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	3305      	adds	r3, #5
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 3] && 'n' == src[offset + 4] &&
 8002ac4:	2b69      	cmp	r3, #105	; 0x69
 8002ac6:	d121      	bne.n	8002b0c <json_parse_value+0x430>
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	3306      	adds	r3, #6
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4413      	add	r3, r2
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b74      	cmp	r3, #116	; 0x74
 8002ad4:	d11a      	bne.n	8002b0c <json_parse_value+0x430>
                 'y' == src[offset + 7]) {
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	3307      	adds	r3, #7
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	781b      	ldrb	r3, [r3, #0]
                 'i' == src[offset + 5] && 't' == src[offset + 6] &&
 8002ae0:	2b79      	cmp	r3, #121	; 0x79
 8002ae2:	d113      	bne.n	8002b0c <json_parse_value+0x430>
        value->type = json_type_number;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	605a      	str	r2, [r3, #4]
        value->payload = state->dom;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
        state->dom += sizeof(struct json_number_s);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f103 0208 	add.w	r2, r3, #8
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	615a      	str	r2, [r3, #20]
        json_parse_number(state, (struct json_number_s *)value->payload);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4619      	mov	r1, r3
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff fca9 	bl	800245c <json_parse_number>
      break;
 8002b0a:	e7ff      	b.n	8002b0c <json_parse_value+0x430>
 8002b0c:	bf00      	nop
}
 8002b0e:	bf00      	nop
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop

08002b18 <json_parse_ex>:

struct json_value_s *
json_parse_ex(const void *src, size_t src_size, size_t flags_bitset,
              void *(*alloc_func_ptr)(void *user_data, size_t size),
              void *user_data, struct json_parse_result_s *result) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b094      	sub	sp, #80	; 0x50
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
  void *allocation;
  struct json_value_s *value;
  size_t total_size;
  int input_error;

  if (result) {
 8002b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <json_parse_ex+0x2c>
    result->error = json_parse_error_none;
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
    result->error_offset = 0;
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
    result->error_line_no = 0;
 8002b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
    result->error_row_no = 0;
 8002b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b40:	2200      	movs	r2, #0
 8002b42:	60da      	str	r2, [r3, #12]
  }

  if (json_null == src) {
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <json_parse_ex+0x36>
    /* invalid src pointer was null! */
    return json_null;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e09a      	b.n	8002c84 <json_parse_ex+0x16c>
  }

  state.src = (const char *)src;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	613b      	str	r3, [r7, #16]
  state.size = src_size;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	617b      	str	r3, [r7, #20]
  state.offset = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
  state.line_no = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
  state.line_offset = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
  state.error = json_parse_error_none;
 8002b62:	2300      	movs	r3, #0
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
  state.dom_size = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
  state.data_size = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  state.flags_bitset = flags_bitset;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	61fb      	str	r3, [r7, #28]

  input_error = json_get_value_size(
      &state, (int)(json_parse_flags_allow_global_object & state.flags_bitset));
 8002b72:	69fb      	ldr	r3, [r7, #28]
  input_error = json_get_value_size(
 8002b74:	f003 0204 	and.w	r2, r3, #4
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fe98 	bl	80018b4 <json_get_value_size>
 8002b84:	6478      	str	r0, [r7, #68]	; 0x44

  if (0 == input_error) {
 8002b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10c      	bne.n	8002ba6 <json_parse_ex+0x8e>
    json_skip_all_skippables(&state);
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd ffd2 	bl	8000b3a <json_skip_all_skippables>

    if (state.offset != state.size) {
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d003      	beq.n	8002ba6 <json_parse_ex+0x8e>
      /* our parsing didn't have an error, but there are characters remaining in
       * the input that weren't part of the JSON! */

      state.error = json_parse_error_unexpected_trailing_characters;
 8002b9e:	230a      	movs	r3, #10
 8002ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      input_error = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  if (input_error) {
 8002ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d012      	beq.n	8002bd2 <json_parse_ex+0xba>
    /* parsing value's size failed (most likely an invalid JSON DOM!). */
    if (result) {
 8002bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <json_parse_ex+0xb6>
      result->error = state.error;
 8002bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb6:	601a      	str	r2, [r3, #0]
      result->error_offset = state.offset;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bbc:	605a      	str	r2, [r3, #4]
      result->error_line_no = state.line_no;
 8002bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc2:	609a      	str	r2, [r3, #8]
      result->error_row_no = state.offset - state.line_offset;
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	1ad2      	subs	r2, r2, r3
 8002bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bcc:	60da      	str	r2, [r3, #12]
    }
    return json_null;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e058      	b.n	8002c84 <json_parse_ex+0x16c>
  }

  /* our total allocation is the combination of the dom and data sizes (we. */
  /* first encode the structure of the JSON, and then the data referenced by. */
  /* the JSON values). */
  total_size = state.dom_size + state.data_size;
 8002bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	4413      	add	r3, r2
 8002bd8:	643b      	str	r3, [r7, #64]	; 0x40

  if (json_null == alloc_func_ptr) {
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <json_parse_ex+0xd4>
    allocation = malloc(total_size);
 8002be0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002be2:	f00d fed3 	bl	801098c <malloc>
 8002be6:	4603      	mov	r3, r0
 8002be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bea:	e004      	b.n	8002bf6 <json_parse_ex+0xde>
  } else {
    allocation = alloc_func_ptr(user_data, total_size);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bf0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002bf2:	4798      	blx	r3
 8002bf4:	64f8      	str	r0, [r7, #76]	; 0x4c
  }

  if (json_null == allocation) {
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d110      	bne.n	8002c1e <json_parse_ex+0x106>
    /* malloc failed! */
    if (result) {
 8002bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00b      	beq.n	8002c1a <json_parse_ex+0x102>
      result->error = json_parse_error_allocator_failed;
 8002c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c04:	2209      	movs	r2, #9
 8002c06:	601a      	str	r2, [r3, #0]
      result->error_offset = 0;
 8002c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	605a      	str	r2, [r3, #4]
      result->error_line_no = 0;
 8002c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
      result->error_row_no = 0;
 8002c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]
    }

    return json_null;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e032      	b.n	8002c84 <json_parse_ex+0x16c>
  }

  /* reset offset so we can reuse it. */
  state.offset = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]

  /* reset the line information so we can reuse it. */
  state.line_no = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
  state.line_offset = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34

  state.dom = (char *)allocation;
 8002c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  state.data = state.dom + state.dom_size;
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	4413      	add	r3, r2
 8002c34:	623b      	str	r3, [r7, #32]

  if (json_parse_flags_allow_location_information & state.flags_bitset) {
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <json_parse_ex+0x14e>
    struct json_value_ex_s *value_ex = (struct json_value_ex_s *)state.dom;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    state.dom += sizeof(struct json_value_ex_s);
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	3314      	adds	r3, #20
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24

    value_ex->offset = state.offset;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4e:	609a      	str	r2, [r3, #8]
    value_ex->line_no = state.line_no;
 8002c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c54:	60da      	str	r2, [r3, #12]
    value_ex->row_no = state.offset - state.line_offset;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	1ad2      	subs	r2, r2, r3
 8002c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5e:	611a      	str	r2, [r3, #16]

    value = &(value_ex->value);
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c64:	e004      	b.n	8002c70 <json_parse_ex+0x158>
  } else {
    value = (struct json_value_s *)state.dom;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	64bb      	str	r3, [r7, #72]	; 0x48
    state.dom += sizeof(struct json_value_s);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  json_parse_value(
      &state, (int)(json_parse_flags_allow_global_object & state.flags_bitset),
 8002c70:	69fb      	ldr	r3, [r7, #28]
  json_parse_value(
 8002c72:	f003 0104 	and.w	r1, r3, #4
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fd2d 	bl	80026dc <json_parse_value>
      value);

  return (struct json_value_s *)allocation;
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3750      	adds	r7, #80	; 0x50
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <json_parse>:

struct json_value_s *json_parse(const void *src, size_t src_size) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  return json_parse_ex(src, src_size, json_parse_flags_default, json_null,
 8002c96:	2300      	movs	r3, #0
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	6839      	ldr	r1, [r7, #0]
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff37 	bl	8002b18 <json_parse_ex>
 8002caa:	4603      	mov	r3, r0
                       json_null, json_null);
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <json_value_as_number>:
  }

  return (struct json_string_s *)value->payload;
}

struct json_number_s *json_value_as_number(struct json_value_s *const value) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if (value->type != json_type_number) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <json_value_as_number+0x14>
    return json_null;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e001      	b.n	8002ccc <json_value_as_number+0x18>
  }

  return (struct json_number_s *)value->payload;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <ETHonMessageReceived>:
void caliperManager(char* data){
	return;
}


void ETHonMessageReceived(message_t json){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	463b      	mov	r3, r7
 8002ce0:	e883 0003 	stmia.w	r3, {r0, r1}

	struct json_value_s* root = json_parse(json.msg, json.len);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ffce 	bl	8002c8c <json_parse>
 8002cf0:	6178      	str	r0, [r7, #20]
	assert(root);
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d105      	bne.n	8002d04 <ETHonMessageReceived+0x2c>
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <ETHonMessageReceived+0xe0>)
 8002cfa:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <ETHonMessageReceived+0xe4>)
 8002cfc:	2115      	movs	r1, #21
 8002cfe:	4830      	ldr	r0, [pc, #192]	; (8002dc0 <ETHonMessageReceived+0xe8>)
 8002d00:	f00d fdec 	bl	80108dc <__assert_func>
	assert(root->type == json_type_object);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d005      	beq.n	8002d18 <ETHonMessageReceived+0x40>
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <ETHonMessageReceived+0xec>)
 8002d0e:	4a2b      	ldr	r2, [pc, #172]	; (8002dbc <ETHonMessageReceived+0xe4>)
 8002d10:	2116      	movs	r1, #22
 8002d12:	482b      	ldr	r0, [pc, #172]	; (8002dc0 <ETHonMessageReceived+0xe8>)
 8002d14:	f00d fde2 	bl	80108dc <__assert_func>

	struct json_object_s* object = (struct json_object_s*)root->payload;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	613b      	str	r3, [r7, #16]
	assert(object);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <ETHonMessageReceived+0x58>
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <ETHonMessageReceived+0xf0>)
 8002d26:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <ETHonMessageReceived+0xe4>)
 8002d28:	2119      	movs	r1, #25
 8002d2a:	4825      	ldr	r0, [pc, #148]	; (8002dc0 <ETHonMessageReceived+0xe8>)
 8002d2c:	f00d fdd6 	bl	80108dc <__assert_func>

	struct json_object_element_s* frameType = object->start;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]

	assert(0 == strcmp(frameType->name->string, "frameType"));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4923      	ldr	r1, [pc, #140]	; (8002dcc <ETHonMessageReceived+0xf4>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fa46 	bl	80001d0 <strcmp>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <ETHonMessageReceived+0x7e>
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <ETHonMessageReceived+0xf8>)
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <ETHonMessageReceived+0xe4>)
 8002d4e:	211d      	movs	r1, #29
 8002d50:	481b      	ldr	r0, [pc, #108]	; (8002dc0 <ETHonMessageReceived+0xe8>)
 8002d52:	f00d fdc3 	bl	80108dc <__assert_func>
	assert(frameType->value->type == json_type_string);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <ETHonMessageReceived+0x94>
 8002d60:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <ETHonMessageReceived+0xfc>)
 8002d62:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <ETHonMessageReceived+0xe4>)
 8002d64:	211e      	movs	r1, #30
 8002d66:	4816      	ldr	r0, [pc, #88]	; (8002dc0 <ETHonMessageReceived+0xe8>)
 8002d68:	f00d fdb8 	bl	80108dc <__assert_func>

	struct json_string_s* frameTypeValue = (struct json_string_s*)frameType->value->payload;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60bb      	str	r3, [r7, #8]

	if(strcmp(frameTypeValue->string, "READ_ANALOG_IN") == 0){
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4917      	ldr	r1, [pc, #92]	; (8002dd8 <ETHonMessageReceived+0x100>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fa28 	bl	80001d0 <strcmp>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <ETHonMessageReceived+0xb8>
		AnalogInManager(json);
 8002d86:	463b      	mov	r3, r7
 8002d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d8c:	f000 f84a 	bl	8002e24 <AnalogInManager>
	}

	if(strcmp(frameTypeValue->string, "DIGITAL_OUT") == 0){
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4911      	ldr	r1, [pc, #68]	; (8002ddc <ETHonMessageReceived+0x104>)
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fa1a 	bl	80001d0 <strcmp>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <ETHonMessageReceived+0xd6>
		DigitalOutManager(json);
 8002da2:	463b      	mov	r3, r7
 8002da4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002da8:	f000 f8a6 	bl	8002ef8 <DigitalOutManager>
	}


	return;
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
}
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	08011ec8 	.word	0x08011ec8
 8002dbc:	08014a08 	.word	0x08014a08
 8002dc0:	08011ed0 	.word	0x08011ed0
 8002dc4:	08011ee8 	.word	0x08011ee8
 8002dc8:	08011f08 	.word	0x08011f08
 8002dcc:	08011f10 	.word	0x08011f10
 8002dd0:	08011f1c 	.word	0x08011f1c
 8002dd4:	08011f50 	.word	0x08011f50
 8002dd8:	08011f7c 	.word	0x08011f7c
 8002ddc:	08011f8c 	.word	0x08011f8c

08002de0 <ETHsendMessage>:

void ETHsendMessage(message_t message){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	463b      	mov	r3, r7
 8002de8:	e883 0003 	stmia.w	r3, {r0, r1}
	udpClient_custom_string(message);
 8002dec:	463b      	mov	r3, r7
 8002dee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002df2:	f000 fc01 	bl	80035f8 <udpClient_custom_string>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <readAdc>:

int readAdc(void){
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
	return 0;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <analogValidate>:

bool analogValidate(uint32_t analogData){
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	return false;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <AnalogInManager>:

void AnalogInManager(message_t json){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0a8      	sub	sp, #160	; 0xa0
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	463b      	mov	r3, r7
 8002e2c:	e883 0003 	stmia.w	r3, {r0, r1}
	int receivedData = readAdc();
 8002e30:	f7ff ffe5 	bl	8002dfe <readAdc>
 8002e34:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    if(analogValidate(receivedData)){ // si es valido
 8002e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ffe6 	bl	8002e0e <analogValidate>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d03b      	beq.n	8002ec0 <AnalogInManager+0x9c>

		struct json_value_s* root = json_parse(json.msg, json.len);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff1c 	bl	8002c8c <json_parse>
 8002e54:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		struct json_object_s* object = (struct json_object_s*)root->payload;
 8002e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		struct json_object_element_s* frameType = object->start;
 8002e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		struct json_object_element_s* inputNumber = frameType->next->value;
 8002e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		struct json_number_s* extracted = json_value_as_number(inputNumber);
 8002e78:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002e7c:	f7ff ff1a 	bl	8002cb4 <json_value_as_number>
 8002e80:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		int inputNum = atoi(extracted->number);
 8002e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f00d fd44 	bl	8010918 <atoi>
 8002e90:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

		char str2send[100];
		int len = sprintf(str2send,"{\"frameType\": \"MEASURED_ANALOG_IN\",\"inputNumber\": %d, \"analogData\": %d}", inputNum, receivedData);
 8002e94:	f107 0008 	add.w	r0, r7, #8
 8002e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ea0:	4913      	ldr	r1, [pc, #76]	; (8002ef0 <AnalogInManager+0xcc>)
 8002ea2:	f00e f9b9 	bl	8011218 <siprintf>
 8002ea6:	67f8      	str	r0, [r7, #124]	; 0x7c
		message_t msg2send;
		msg2send.msg = str2send;
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	677b      	str	r3, [r7, #116]	; 0x74
		msg2send.len = len;
 8002eae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eb0:	67bb      	str	r3, [r7, #120]	; 0x78

		ETHsendMessage(msg2send);
 8002eb2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002eb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002eba:	f7ff ff91 	bl	8002de0 <ETHsendMessage>
		msg2send.msg = str2send;
		msg2send.len = len;

		ETHsendMessage(msg2send);
    }
}
 8002ebe:	e013      	b.n	8002ee8 <AnalogInManager+0xc4>
		int len = sprintf(str2send,"{\"frameType\": \"RETRY_ANALOG_IN\"}");
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	490b      	ldr	r1, [pc, #44]	; (8002ef4 <AnalogInManager+0xd0>)
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f00e f9a6 	bl	8011218 <siprintf>
 8002ecc:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		msg2send.msg = str2send;
 8002ed0:	f107 0308 	add.w	r3, r7, #8
 8002ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
		msg2send.len = len;
 8002ed6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eda:	673b      	str	r3, [r7, #112]	; 0x70
		ETHsendMessage(msg2send);
 8002edc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ee4:	f7ff ff7c 	bl	8002de0 <ETHsendMessage>
}
 8002ee8:	bf00      	nop
 8002eea:	37a0      	adds	r7, #160	; 0xa0
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	08011f98 	.word	0x08011f98
 8002ef4:	08011fe0 	.word	0x08011fe0

08002ef8 <DigitalOutManager>:

void DigitalOutManager(message_t json){
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	463b      	mov	r3, r7
 8002f00:	e883 0003 	stmia.w	r3, {r0, r1}
//	if(memcmp(rx_data,"ON", 2)){
////		HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PIN_SET);
//	} else {
////		HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PIN_RESET);
//	}
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f14:	f000 fbf4 	bl	8003700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f18:	f000 f810 	bl	8002f3c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f1c:	f000 f8a2 	bl	8003064 <MX_GPIO_Init>
  MX_TIM14_Init();
 8002f20:	f000 f87c 	bl	800301c <MX_TIM14_Init>
  MX_LWIP_Init();
 8002f24:	f002 ffe6 	bl	8005ef4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpClient_connect();
 8002f28:	f000 fb30 	bl	800358c <udpClient_connect>
  HAL_TIM_Base_Start_IT(&htim14);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <main+0x28>)
 8002f2e:	f002 fd8d 	bl	8005a4c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8002f32:	f003 f911 	bl	8006158 <MX_LWIP_Process>
 8002f36:	e7fc      	b.n	8002f32 <main+0x22>
 8002f38:	20000278 	.word	0x20000278

08002f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b094      	sub	sp, #80	; 0x50
 8002f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f42:	f107 0320 	add.w	r3, r7, #32
 8002f46:	2230      	movs	r2, #48	; 0x30
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f00d fd5c 	bl	8010a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <SystemClock_Config+0xd8>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <SystemClock_Config+0xd8>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <SystemClock_Config+0xd8>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	4b25      	ldr	r3, [pc, #148]	; (8003018 <SystemClock_Config+0xdc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a24      	ldr	r2, [pc, #144]	; (8003018 <SystemClock_Config+0xdc>)
 8002f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <SystemClock_Config+0xdc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002fac:	230c      	movs	r3, #12
 8002fae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002fb0:	2360      	movs	r3, #96	; 0x60
 8002fb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fb8:	2304      	movs	r3, #4
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fbc:	f107 0320 	add.w	r3, r7, #32
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 f86b 	bl	800509c <HAL_RCC_OscConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fcc:	f000 f942 	bl	8003254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 facc 	bl	800558c <HAL_RCC_ClockConfig>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ffa:	f000 f92b 	bl	8003254 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8002ffe:	2200      	movs	r2, #0
 8003000:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8003004:	2000      	movs	r0, #0
 8003006:	f002 fba7 	bl	8005758 <HAL_RCC_MCOConfig>
}
 800300a:	bf00      	nop
 800300c:	3750      	adds	r7, #80	; 0x50
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000

0800301c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_TIM14_Init+0x40>)
 8003022:	4a0f      	ldr	r2, [pc, #60]	; (8003060 <MX_TIM14_Init+0x44>)
 8003024:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1;
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <MX_TIM14_Init+0x40>)
 8003028:	f240 321f 	movw	r2, #799	; 0x31f
 800302c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <MX_TIM14_Init+0x40>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9375 - 1;
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <MX_TIM14_Init+0x40>)
 8003036:	f242 429e 	movw	r2, #9374	; 0x249e
 800303a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <MX_TIM14_Init+0x40>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_TIM14_Init+0x40>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003048:	4804      	ldr	r0, [pc, #16]	; (800305c <MX_TIM14_Init+0x40>)
 800304a:	f002 fcaf 	bl	80059ac <HAL_TIM_Base_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8003054:	f000 f8fe 	bl	8003254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20000278 	.word	0x20000278
 8003060:	40002000 	.word	0x40002000

08003064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <MX_GPIO_Init+0x188>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <MX_GPIO_Init+0x188>)
 8003084:	f043 0310 	orr.w	r3, r3, #16
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b58      	ldr	r3, [pc, #352]	; (80031ec <MX_GPIO_Init+0x188>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b54      	ldr	r3, [pc, #336]	; (80031ec <MX_GPIO_Init+0x188>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a53      	ldr	r2, [pc, #332]	; (80031ec <MX_GPIO_Init+0x188>)
 80030a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <MX_GPIO_Init+0x188>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4b4d      	ldr	r3, [pc, #308]	; (80031ec <MX_GPIO_Init+0x188>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a4c      	ldr	r2, [pc, #304]	; (80031ec <MX_GPIO_Init+0x188>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <MX_GPIO_Init+0x188>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b46      	ldr	r3, [pc, #280]	; (80031ec <MX_GPIO_Init+0x188>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a45      	ldr	r2, [pc, #276]	; (80031ec <MX_GPIO_Init+0x188>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b43      	ldr	r3, [pc, #268]	; (80031ec <MX_GPIO_Init+0x188>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <MX_GPIO_Init+0x188>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a3e      	ldr	r2, [pc, #248]	; (80031ec <MX_GPIO_Init+0x188>)
 80030f4:	f043 0302 	orr.w	r3, r3, #2
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b3c      	ldr	r3, [pc, #240]	; (80031ec <MX_GPIO_Init+0x188>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin, GPIO_PIN_RESET);
 8003106:	2200      	movs	r2, #0
 8003108:	f242 01c1 	movw	r1, #8385	; 0x20c1
 800310c:	4838      	ldr	r0, [pc, #224]	; (80031f0 <MX_GPIO_Init+0x18c>)
 800310e:	f001 ff79 	bl	8005004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAL4_CLK_Pin CAL2_CLK_Pin CAL1_CLK_Pin */
  GPIO_InitStruct.Pin = CAL4_CLK_Pin|CAL2_CLK_Pin|CAL1_CLK_Pin;
 8003112:	f248 2304 	movw	r3, #33284	; 0x8204
 8003116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003118:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800311c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800311e:	2301      	movs	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003122:	f107 0314 	add.w	r3, r7, #20
 8003126:	4619      	mov	r1, r3
 8003128:	4831      	ldr	r0, [pc, #196]	; (80031f0 <MX_GPIO_Init+0x18c>)
 800312a:	f001 fdb7 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL4_DATA_Pin CAL1_DATA_Pin */
  GPIO_InitStruct.Pin = CAL4_DATA_Pin|CAL1_DATA_Pin;
 800312e:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8003132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003138:	2301      	movs	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	482b      	ldr	r0, [pc, #172]	; (80031f0 <MX_GPIO_Init+0x18c>)
 8003144:	f001 fdaa 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL3_REQ_Pin CAL2_REQ_Pin CAL1_REQ_Pin CAL4_REQ_Pin */
  GPIO_InitStruct.Pin = CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin;
 8003148:	f242 03c1 	movw	r3, #8385	; 0x20c1
 800314c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800314e:	2311      	movs	r3, #17
 8003150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4823      	ldr	r0, [pc, #140]	; (80031f0 <MX_GPIO_Init+0x18c>)
 8003162:	f001 fd9b 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_CLK_Pin */
  GPIO_InitStruct.Pin = CAL3_CLK_Pin;
 8003166:	2308      	movs	r3, #8
 8003168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800316a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800316e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003170:	2301      	movs	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL3_CLK_GPIO_Port, &GPIO_InitStruct);
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4619      	mov	r1, r3
 800317a:	481e      	ldr	r0, [pc, #120]	; (80031f4 <MX_GPIO_Init+0x190>)
 800317c:	f001 fd8e 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_DATA_Pin */
  GPIO_InitStruct.Pin = CAL3_DATA_Pin;
 8003180:	2301      	movs	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003188:	2301      	movs	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL3_DATA_GPIO_Port, &GPIO_InitStruct);
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4619      	mov	r1, r3
 8003192:	4819      	ldr	r0, [pc, #100]	; (80031f8 <MX_GPIO_Init+0x194>)
 8003194:	f001 fd82 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL2_DATA_Pin */
  GPIO_InitStruct.Pin = CAL2_DATA_Pin;
 8003198:	2302      	movs	r3, #2
 800319a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL2_DATA_GPIO_Port, &GPIO_InitStruct);
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	4619      	mov	r1, r3
 80031aa:	4814      	ldr	r0, [pc, #80]	; (80031fc <MX_GPIO_Init+0x198>)
 80031ac:	f001 fd76 	bl	8004c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	480a      	ldr	r0, [pc, #40]	; (80031f8 <MX_GPIO_Init+0x194>)
 80031ce:	f001 fd65 	bl	8004c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031d2:	2200      	movs	r2, #0
 80031d4:	2100      	movs	r1, #0
 80031d6:	2028      	movs	r0, #40	; 0x28
 80031d8:	f000 fc03 	bl	80039e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031dc:	2028      	movs	r0, #40	; 0x28
 80031de:	f000 fc1c 	bl	8003a1a <HAL_NVIC_EnableIRQ>

}
 80031e2:	bf00      	nop
 80031e4:	3728      	adds	r7, #40	; 0x28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40020400 	.word	0x40020400

08003200 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	if(htim  == &htim14){
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d107      	bne.n	8003220 <HAL_TIM_PeriodElapsedCallback+0x20>
		// todo: esta funcion va a cambiar cuando hagamos las pruebas finales, porque es solo un ejemplo.
		HAL_GPIO_TogglePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin); // periodicamente tenemos un request, en teoria setteado cada 93.75ms, empieza bajo
 8003210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003214:	4805      	ldr	r0, [pc, #20]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003216:	f001 ff0e 	bl	8005036 <HAL_GPIO_TogglePin>
		onRisingEdgeOfReqSignal(CALIPER_1); // prendo el flag de poder empezar a leer los bits
 800321a:	2000      	movs	r0, #0
 800321c:	f7fd fa52 	bl	80006c4 <onRisingEdgeOfReqSignal>
	}
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000278 	.word	0x20000278
 800322c:	40021000 	.word	0x40021000

08003230 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
	onRisingEdgeOfClockSignal(getCaliperNumberGivenClockPin(GPIO_Pin)); // aca se realiza la lectura de los bits y se va guardando en el buffer
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f9a3 	bl	8000588 <getCaliperNumberGivenClockPin>
 8003242:	4603      	mov	r3, r0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fa52 	bl	80006f0 <onRisingEdgeOfClockSignal>
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003258:	b672      	cpsid	i
}
 800325a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800325c:	e7fe      	b.n	800325c <Error_Handler+0x8>
	...

08003260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_MspInit+0x4c>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <HAL_MspInit+0x4c>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <HAL_MspInit+0x4c>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_MspInit+0x4c>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_MspInit+0x4c>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_MspInit+0x4c>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_TIM_Base_MspInit+0x48>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d115      	bne.n	80032ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_TIM_Base_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <HAL_TIM_Base_MspInit+0x4c>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_TIM_Base_MspInit+0x4c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	202d      	movs	r0, #45	; 0x2d
 80032e4:	f000 fb7d 	bl	80039e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80032e8:	202d      	movs	r0, #45	; 0x2d
 80032ea:	f000 fb96 	bl	8003a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40002000 	.word	0x40002000
 80032fc:	40023800 	.word	0x40023800

08003300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003304:	e7fe      	b.n	8003304 <NMI_Handler+0x4>

08003306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800330a:	e7fe      	b.n	800330a <HardFault_Handler+0x4>

0800330c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003310:	e7fe      	b.n	8003310 <MemManage_Handler+0x4>

08003312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003312:	b480      	push	{r7}
 8003314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003316:	e7fe      	b.n	8003316 <BusFault_Handler+0x4>

08003318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800331c:	e7fe      	b.n	800331c <UsageFault_Handler+0x4>

0800331e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334c:	f000 fa2a 	bl	80037a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003358:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800335c:	f001 fe86 	bl	800506c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}

08003364 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800336a:	f002 fbdf 	bl	8005b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000278 	.word	0x20000278

08003378 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
	return 1;
 800337c:	2301      	movs	r3, #1
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_kill>:

int _kill(int pid, int sig)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <_kill+0x20>)
 8003394:	2216      	movs	r2, #22
 8003396:	601a      	str	r2, [r3, #0]
	return -1;
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	20008b8c 	.word	0x20008b8c

080033ac <_exit>:

void _exit (int status)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ffe5 	bl	8003388 <_kill>
	while (1) {}		/* Make sure we hang here */
 80033be:	e7fe      	b.n	80033be <_exit+0x12>

080033c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e00a      	b.n	80033e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033d2:	f3af 8000 	nop.w
 80033d6:	4601      	mov	r1, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	60ba      	str	r2, [r7, #8]
 80033de:	b2ca      	uxtb	r2, r1
 80033e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3301      	adds	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	dbf0      	blt.n	80033d2 <_read+0x12>
	}

return len;
 80033f0:	687b      	ldr	r3, [r7, #4]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	e009      	b.n	8003420 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	60ba      	str	r2, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	3301      	adds	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	dbf1      	blt.n	800340c <_write+0x12>
	}
	return len;
 8003428:	687b      	ldr	r3, [r7, #4]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <_close>:

int _close(int file)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
	return -1;
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800345a:	605a      	str	r2, [r3, #4]
	return 0;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <_isatty>:

int _isatty(int file)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
	return 1;
 8003472:	2301      	movs	r3, #1
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
	return 0;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <_sbrk+0x5c>)
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <_sbrk+0x60>)
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <_sbrk+0x64>)
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <_sbrk+0x68>)
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <_sbrk+0x64>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d205      	bcs.n	80034d8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <_sbrk+0x6c>)
 80034ce:	220c      	movs	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e009      	b.n	80034ec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	4a06      	ldr	r2, [pc, #24]	; (8003500 <_sbrk+0x64>)
 80034e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	20020000 	.word	0x20020000
 80034fc:	00000400 	.word	0x00000400
 8003500:	200000fc 	.word	0x200000fc
 8003504:	20008ba0 	.word	0x20008ba0
 8003508:	20008b8c 	.word	0x20008b8c

0800350c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <SystemInit+0x20>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	4a05      	ldr	r2, [pc, #20]	; (800352c <SystemInit+0x20>)
 8003518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800351c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <udpClient_send_first_message>:
struct udp_pcb *upcb;
char buffer[100];
message_t message;

static void udpClient_send_first_message(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b09c      	sub	sp, #112	; 0x70
 8003534:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "Success on Initializing UDP Client");
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	4912      	ldr	r1, [pc, #72]	; (8003584 <udpClient_send_first_message+0x54>)
 800353a:	4618      	mov	r0, r3
 800353c:	f00d fe6c 	bl	8011218 <siprintf>
 8003540:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8003542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003544:	b29b      	uxth	r3, r3
 8003546:	f44f 7220 	mov.w	r2, #640	; 0x280
 800354a:	4619      	mov	r1, r3
 800354c:	2036      	movs	r0, #54	; 0x36
 800354e:	f004 f947 	bl	80077e0 <pbuf_alloc>
 8003552:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8003554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <udpClient_send_first_message+0x4a>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 800355a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355c:	b29a      	uxth	r2, r3
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	4619      	mov	r1, r3
 8003562:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003564:	f004 fe8c 	bl	8008280 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <udpClient_send_first_message+0x58>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800356e:	4618      	mov	r0, r3
 8003570:	f00a fbae 	bl	800dcd0 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8003574:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003576:	f004 fc17 	bl	8007da8 <pbuf_free>
  }
}
 800357a:	bf00      	nop
 800357c:	3770      	adds	r7, #112	; 0x70
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	08012004 	.word	0x08012004
 8003588:	200002c0 	.word	0x200002c0

0800358c <udpClient_connect>:


void udpClient_connect(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8003592:	f00a fe9d 	bl	800e2d0 <udp_new>
 8003596:	4603      	mov	r3, r0
 8003598:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <udpClient_connect+0x5c>)
 800359a:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 0, 111);
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <udpClient_connect+0x60>)
 800359e:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <udpClient_connect+0x5c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f107 0108 	add.w	r1, r7, #8
 80035a8:	2208      	movs	r2, #8
 80035aa:	4618      	mov	r0, r3
 80035ac:	f00a fd7a 	bl	800e0a4 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 0, 25);
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <udpClient_connect+0x64>)
 80035b2:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <udpClient_connect+0x5c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1d39      	adds	r1, r7, #4
 80035ba:	2207      	movs	r2, #7
 80035bc:	4618      	mov	r0, r3
 80035be:	f00a fdf9 	bl	800e1b4 <udp_connect>
 80035c2:	4603      	mov	r3, r0
 80035c4:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <udpClient_connect+0x54>
	{
//		/* 2. Send message to server */
		udpClient_send_first_message ();
 80035ce:	f7ff ffaf 	bl	8003530 <udpClient_send_first_message>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <udpClient_connect+0x5c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	4906      	ldr	r1, [pc, #24]	; (80035f4 <udpClient_connect+0x68>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f00a fe58 	bl	800e290 <udp_recv>
	}
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200002c0 	.word	0x200002c0
 80035ec:	6f00a8c0 	.word	0x6f00a8c0
 80035f0:	1900a8c0 	.word	0x1900a8c0
 80035f4:	0800365d 	.word	0x0800365d

080035f8 <udpClient_custom_string>:


void udpClient_custom_string(message_t message)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b09e      	sub	sp, #120	; 0x78
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	463b      	mov	r3, r7
 8003600:	e883 0003 	stmia.w	r3, {r0, r1}
  struct pbuf *txBuf;
  char data[100];

	/* Copy the message data to the txBuf */
  strncpy (data, message.msg, message.len);
 8003604:	6839      	ldr	r1, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	4618      	mov	r0, r3
 800360e:	f00d fe23 	bl	8011258 <strncpy>
  int len = message.len;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	677b      	str	r3, [r7, #116]	; 0x74

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8003616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003618:	b29b      	uxth	r3, r3
 800361a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800361e:	4619      	mov	r1, r3
 8003620:	2036      	movs	r0, #54	; 0x36
 8003622:	f004 f8dd 	bl	80077e0 <pbuf_alloc>
 8003626:	6738      	str	r0, [r7, #112]	; 0x70

  if (txBuf != NULL)
 8003628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800362a:	2b00      	cmp	r3, #0
 800362c:	d010      	beq.n	8003650 <udpClient_custom_string+0x58>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 800362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003630:	b29a      	uxth	r2, r3
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	4619      	mov	r1, r3
 8003638:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800363a:	f004 fe21 	bl	8008280 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <udpClient_custom_string+0x60>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003644:	4618      	mov	r0, r3
 8003646:	f00a fb43 	bl	800dcd0 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 800364a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800364c:	f004 fbac 	bl	8007da8 <pbuf_free>
  }
}
 8003650:	bf00      	nop
 8003652:	3778      	adds	r7, #120	; 0x78
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200002c0 	.word	0x200002c0

0800365c <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	895b      	ldrh	r3, [r3, #10]
 8003672:	461a      	mov	r2, r3
 8003674:	480b      	ldr	r0, [pc, #44]	; (80036a4 <udp_receive_callback+0x48>)
 8003676:	f00d fdef 	bl	8011258 <strncpy>

	// store the Ethernet Message
	message.msg = buffer;
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <udp_receive_callback+0x4c>)
 800367c:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <udp_receive_callback+0x48>)
 800367e:	601a      	str	r2, [r3, #0]
	message.len = p-> len;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	895b      	ldrh	r3, [r3, #10]
 8003684:	461a      	mov	r2, r3
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <udp_receive_callback+0x4c>)
 8003688:	605a      	str	r2, [r3, #4]

	// process the received message
	ETHonMessageReceived(message);
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <udp_receive_callback+0x4c>)
 800368c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003690:	f7ff fb22 	bl	8002cd8 <ETHonMessageReceived>

	/* Free receive pbuf */
	pbuf_free(p);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f004 fb87 	bl	8007da8 <pbuf_free>
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200002cc 	.word	0x200002cc
 80036a8:	200002c4 	.word	0x200002c4

080036ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80036ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036b0:	480d      	ldr	r0, [pc, #52]	; (80036e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80036b2:	490e      	ldr	r1, [pc, #56]	; (80036ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036b8:	e002      	b.n	80036c0 <LoopCopyDataInit>

080036ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036be:	3304      	adds	r3, #4

080036c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c4:	d3f9      	bcc.n	80036ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036c8:	4c0b      	ldr	r4, [pc, #44]	; (80036f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036cc:	e001      	b.n	80036d2 <LoopFillZerobss>

080036ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d0:	3204      	adds	r2, #4

080036d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d4:	d3fb      	bcc.n	80036ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036d6:	f7ff ff19 	bl	800350c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036da:	f00d f933 	bl	8010944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036de:	f7ff fc17 	bl	8002f10 <main>
  bx  lr    
 80036e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80036e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036ec:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80036f0:	08014d70 	.word	0x08014d70
  ldr r2, =_sbss
 80036f4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80036f8:	20008b9c 	.word	0x20008b9c

080036fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036fc:	e7fe      	b.n	80036fc <ADC_IRQHandler>
	...

08003700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_Init+0x40>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <HAL_Init+0x40>)
 800370a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_Init+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <HAL_Init+0x40>)
 8003716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800371a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_Init+0x40>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a07      	ldr	r2, [pc, #28]	; (8003740 <HAL_Init+0x40>)
 8003722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003728:	2003      	movs	r0, #3
 800372a:	f000 f94f 	bl	80039cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800372e:	2000      	movs	r0, #0
 8003730:	f000 f808 	bl	8003744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003734:	f7ff fd94 	bl	8003260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00

08003744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800374c:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_InitTick+0x54>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_InitTick+0x58>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4619      	mov	r1, r3
 8003756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800375a:	fbb3 f3f1 	udiv	r3, r3, r1
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f967 	bl	8003a36 <HAL_SYSTICK_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e00e      	b.n	8003790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b0f      	cmp	r3, #15
 8003776:	d80a      	bhi.n	800378e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003778:	2200      	movs	r2, #0
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	f000 f92f 	bl	80039e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003784:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <HAL_InitTick+0x5c>)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	20000020 	.word	0x20000020
 800379c:	20000028 	.word	0x20000028
 80037a0:	20000024 	.word	0x20000024

080037a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_IncTick+0x20>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_IncTick+0x24>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4413      	add	r3, r2
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <HAL_IncTick+0x24>)
 80037b6:	6013      	str	r3, [r2, #0]
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000028 	.word	0x20000028
 80037c8:	20000330 	.word	0x20000330

080037cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return uwTick;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_GetTick+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000330 	.word	0x20000330

080037e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037ec:	f7ff ffee 	bl	80037cc <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d005      	beq.n	800380a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_Delay+0x44>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800380a:	bf00      	nop
 800380c:	f7ff ffde 	bl	80037cc <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	429a      	cmp	r2, r3
 800381a:	d8f7      	bhi.n	800380c <HAL_Delay+0x28>
  {
  }
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000028 	.word	0x20000028

0800382c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <__NVIC_SetPriorityGrouping+0x44>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <__NVIC_SetPriorityGrouping+0x44>)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	60d3      	str	r3, [r2, #12]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <__NVIC_GetPriorityGrouping+0x18>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	f003 0307 	and.w	r3, r3, #7
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	db0b      	blt.n	80038ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	4907      	ldr	r1, [pc, #28]	; (80038c8 <__NVIC_EnableIRQ+0x38>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2001      	movs	r0, #1
 80038b2:	fa00 f202 	lsl.w	r2, r0, r2
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000e100 	.word	0xe000e100

080038cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	6039      	str	r1, [r7, #0]
 80038d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db0a      	blt.n	80038f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	490c      	ldr	r1, [pc, #48]	; (8003918 <__NVIC_SetPriority+0x4c>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	440b      	add	r3, r1
 80038f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f4:	e00a      	b.n	800390c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4908      	ldr	r1, [pc, #32]	; (800391c <__NVIC_SetPriority+0x50>)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	3b04      	subs	r3, #4
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	440b      	add	r3, r1
 800390a:	761a      	strb	r2, [r3, #24]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000e100 	.word	0xe000e100
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f1c3 0307 	rsb	r3, r3, #7
 800393a:	2b04      	cmp	r3, #4
 800393c:	bf28      	it	cs
 800393e:	2304      	movcs	r3, #4
 8003940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3304      	adds	r3, #4
 8003946:	2b06      	cmp	r3, #6
 8003948:	d902      	bls.n	8003950 <NVIC_EncodePriority+0x30>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3b03      	subs	r3, #3
 800394e:	e000      	b.n	8003952 <NVIC_EncodePriority+0x32>
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	401a      	ands	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003968:	f04f 31ff 	mov.w	r1, #4294967295
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	43d9      	mvns	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	4313      	orrs	r3, r2
         );
}
 800397a:	4618      	mov	r0, r3
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3b01      	subs	r3, #1
 8003994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003998:	d301      	bcc.n	800399e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399a:	2301      	movs	r3, #1
 800399c:	e00f      	b.n	80039be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <SysTick_Config+0x40>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a6:	210f      	movs	r1, #15
 80039a8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ac:	f7ff ff8e 	bl	80038cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <SysTick_Config+0x40>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <SysTick_Config+0x40>)
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	e000e010 	.word	0xe000e010

080039cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ff29 	bl	800382c <__NVIC_SetPriorityGrouping>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b086      	sub	sp, #24
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
 80039ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f4:	f7ff ff3e 	bl	8003874 <__NVIC_GetPriorityGrouping>
 80039f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	6978      	ldr	r0, [r7, #20]
 8003a00:	f7ff ff8e 	bl	8003920 <NVIC_EncodePriority>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff5d 	bl	80038cc <__NVIC_SetPriority>
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff31 	bl	8003890 <__NVIC_EnableIRQ>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff ffa2 	bl	8003988 <SysTick_Config>
 8003a44:	4603      	mov	r3, r0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003a60:	4baa      	ldr	r3, [pc, #680]	; (8003d0c <HAL_ETH_Init+0x2bc>)
 8003a62:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e183      	b.n	8003d7e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f002 fb70 	bl	8006170 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	4b9e      	ldr	r3, [pc, #632]	; (8003d10 <HAL_ETH_Init+0x2c0>)
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	4a9d      	ldr	r2, [pc, #628]	; (8003d10 <HAL_ETH_Init+0x2c0>)
 8003a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa0:	4b9b      	ldr	r3, [pc, #620]	; (8003d10 <HAL_ETH_Init+0x2c0>)
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003aac:	4b99      	ldr	r3, [pc, #612]	; (8003d14 <HAL_ETH_Init+0x2c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a98      	ldr	r2, [pc, #608]	; (8003d14 <HAL_ETH_Init+0x2c4>)
 8003ab2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ab6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003ab8:	4b96      	ldr	r3, [pc, #600]	; (8003d14 <HAL_ETH_Init+0x2c4>)
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4994      	ldr	r1, [pc, #592]	; (8003d14 <HAL_ETH_Init+0x2c4>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003adc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003ade:	f7ff fe75 	bl	80037cc <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003ae4:	e011      	b.n	8003b0a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003ae6:	f7ff fe71 	bl	80037cc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003af4:	d909      	bls.n	8003b0a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e139      	b.n	8003d7e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e4      	bne.n	8003ae6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f023 031c 	bic.w	r3, r3, #28
 8003b2a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b2c:	f001 ff32 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 8003b30:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4a78      	ldr	r2, [pc, #480]	; (8003d18 <HAL_ETH_Init+0x2c8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d908      	bls.n	8003b4c <HAL_ETH_Init+0xfc>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	4a77      	ldr	r2, [pc, #476]	; (8003d1c <HAL_ETH_Init+0x2cc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d804      	bhi.n	8003b4c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f043 0308 	orr.w	r3, r3, #8
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	e027      	b.n	8003b9c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4a73      	ldr	r2, [pc, #460]	; (8003d1c <HAL_ETH_Init+0x2cc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d908      	bls.n	8003b66 <HAL_ETH_Init+0x116>
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4a6d      	ldr	r2, [pc, #436]	; (8003d0c <HAL_ETH_Init+0x2bc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d204      	bcs.n	8003b66 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f043 030c 	orr.w	r3, r3, #12
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	e01a      	b.n	8003b9c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4a68      	ldr	r2, [pc, #416]	; (8003d0c <HAL_ETH_Init+0x2bc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d303      	bcc.n	8003b76 <HAL_ETH_Init+0x126>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4a6b      	ldr	r2, [pc, #428]	; (8003d20 <HAL_ETH_Init+0x2d0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d911      	bls.n	8003b9a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4a69      	ldr	r2, [pc, #420]	; (8003d20 <HAL_ETH_Init+0x2d0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d908      	bls.n	8003b90 <HAL_ETH_Init+0x140>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	4a68      	ldr	r2, [pc, #416]	; (8003d24 <HAL_ETH_Init+0x2d4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d804      	bhi.n	8003b90 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e005      	b.n	8003b9c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e000      	b.n	8003b9c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003b9a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69fa      	ldr	r2, [r7, #28]
 8003ba2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003ba4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ba8:	2100      	movs	r1, #0
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fb98 	bl	80042e0 <HAL_ETH_WritePHYRegister>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003bba:	6939      	ldr	r1, [r7, #16]
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fd4d 	bl	800465c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0d7      	b.n	8003d7e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003bce:	20ff      	movs	r0, #255	; 0xff
 8003bd0:	f7ff fe08 	bl	80037e4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a5 	beq.w	8003d28 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bde:	f7ff fdf5 	bl	80037cc <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	461a      	mov	r2, r3
 8003bea:	2101      	movs	r1, #1
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fb0f 	bl	8004210 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003bf2:	f7ff fdeb 	bl	80037cc <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d90f      	bls.n	8003c24 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003c08:	6939      	ldr	r1, [r7, #16]
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fd26 	bl	800465c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0ac      	b.n	8003d7e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0da      	beq.n	8003be4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003c2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c32:	2100      	movs	r1, #0
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb53 	bl	80042e0 <HAL_ETH_WritePHYRegister>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003c44:	6939      	ldr	r1, [r7, #16]
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fd08 	bl	800465c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003c54:	2301      	movs	r3, #1
 8003c56:	e092      	b.n	8003d7e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c58:	f7ff fdb8 	bl	80037cc <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	461a      	mov	r2, r3
 8003c64:	2101      	movs	r1, #1
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fad2 	bl	8004210 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003c6c:	f7ff fdae 	bl	80037cc <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d90f      	bls.n	8003c9e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fce9 	bl	800465c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e06f      	b.n	8003d7e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0da      	beq.n	8003c5e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003ca8:	f107 030c 	add.w	r3, r7, #12
 8003cac:	461a      	mov	r2, r3
 8003cae:	211f      	movs	r1, #31
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 faad 	bl	8004210 <HAL_ETH_ReadPHYRegister>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fcca 	bl	800465c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e054      	b.n	8003d7e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	e002      	b.n	8003cee <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
 8003cfe:	e035      	b.n	8003d6c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	e030      	b.n	8003d6c <HAL_ETH_Init+0x31c>
 8003d0a:	bf00      	nop
 8003d0c:	03938700 	.word	0x03938700
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40013800 	.word	0x40013800
 8003d18:	01312cff 	.word	0x01312cff
 8003d1c:	02160ebf 	.word	0x02160ebf
 8003d20:	05f5e0ff 	.word	0x05f5e0ff
 8003d24:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	08db      	lsrs	r3, r3, #3
 8003d2e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2100      	movs	r1, #0
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 facd 	bl	80042e0 <HAL_ETH_WritePHYRegister>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00b      	beq.n	8003d64 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003d50:	6939      	ldr	r1, [r7, #16]
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fc82 	bl	800465c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e00c      	b.n	8003d7e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003d64:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003d68:	f7ff fd3c 	bl	80037e4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003d6c:	6939      	ldr	r1, [r7, #16]
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fc74 	bl	800465c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop

08003d88 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_ETH_DMATxDescListInit+0x20>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e052      	b.n	8003e4e <HAL_ETH_DMATxDescListInit+0xc6>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
 8003dc2:	e030      	b.n	8003e26 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	015b      	lsls	r3, r3, #5
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4413      	add	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dd4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d208      	bcs.n	8003e1a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	015b      	lsls	r3, r3, #5
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	4413      	add	r3, r2
 8003e12:	461a      	mov	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	e002      	b.n	8003e20 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3301      	adds	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d3ca      	bcc.n	8003dc4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e38:	3310      	adds	r3, #16
 8003e3a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b087      	sub	sp, #28
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_ETH_DMARxDescListInit+0x20>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e056      	b.n	8003f28 <HAL_ETH_DMARxDescListInit+0xce>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e034      	b.n	8003f00 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	015b      	lsls	r3, r3, #5
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ea6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003eae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d208      	bcs.n	8003ef4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	015b      	lsls	r3, r3, #5
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	4413      	add	r3, r2
 8003eec:	461a      	mov	r2, r3
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	e002      	b.n	8003efa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3301      	adds	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d3c6      	bcc.n	8003e96 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f12:	330c      	adds	r3, #12
 8003f14:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_ETH_TransmitFrame+0x24>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e0cd      	b.n	80040f4 <HAL_ETH_TransmitFrame+0x1c0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0b8      	b.n	80040f4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da09      	bge.n	8003fa0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2212      	movs	r2, #18
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0a9      	b.n	80040f4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d915      	bls.n	8003fd6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4a54      	ldr	r2, [pc, #336]	; (8004100 <HAL_ETH_TransmitFrame+0x1cc>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	0a9b      	lsrs	r3, r3, #10
 8003fb4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4b51      	ldr	r3, [pc, #324]	; (8004100 <HAL_ETH_TransmitFrame+0x1cc>)
 8003fba:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbe:	0a9b      	lsrs	r3, r3, #10
 8003fc0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e001      	b.n	8003fda <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d11c      	bne.n	800401a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003fee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003ffa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800400a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	62da      	str	r2, [r3, #44]	; 0x2c
 8004018:	e04b      	b.n	80040b2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e044      	b.n	80040aa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800402e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d107      	bne.n	8004046 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004044:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800404e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	3b01      	subs	r3, #1
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d116      	bne.n	8004088 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004068:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_ETH_TransmitFrame+0x1d0>)
 800406e:	fb02 f203 	mul.w	r2, r2, r3
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	4413      	add	r3, r2
 8004076:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800407a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004086:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004096:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	3301      	adds	r3, #1
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d3b6      	bcc.n	8004020 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	3314      	adds	r3, #20
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ce:	3314      	adds	r3, #20
 80040d0:	2204      	movs	r2, #4
 80040d2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	3304      	adds	r3, #4
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	ac02b00b 	.word	0xac02b00b
 8004104:	fffffa0c 	.word	0xfffffa0c

08004108 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_ETH_GetReceivedFrame+0x1a>
 800411e:	2302      	movs	r3, #2
 8004120:	e070      	b.n	8004204 <HAL_ETH_GetReceivedFrame+0xfc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2202      	movs	r2, #2
 800412e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	db5a      	blt.n	80041f2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d030      	beq.n	80041ac <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004158:	2b01      	cmp	r3, #1
 800415a:	d103      	bne.n	8004164 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004178:	3b04      	subs	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e02b      	b.n	8004204 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
 80041da:	e00a      	b.n	80041f2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	461a      	mov	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	460b      	mov	r3, r1
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b82      	cmp	r3, #130	; 0x82
 8004230:	d101      	bne.n	8004236 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	e050      	b.n	80042d8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2282      	movs	r2, #130	; 0x82
 800423a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 031c 	and.w	r3, r3, #28
 800424c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8a1b      	ldrh	r3, [r3, #16]
 8004252:	02db      	lsls	r3, r3, #11
 8004254:	b29b      	uxth	r3, r3
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800425c:	897b      	ldrh	r3, [r7, #10]
 800425e:	019b      	lsls	r3, r3, #6
 8004260:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 0302 	bic.w	r3, r3, #2
 8004270:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004282:	f7ff faa3 	bl	80037cc <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004288:	e015      	b.n	80042b6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800428a:	f7ff fa9f 	bl	80037cc <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004298:	d309      	bcc.n	80042ae <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e014      	b.n	80042d8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e4      	bne.n	800428a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	460b      	mov	r3, r1
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b42      	cmp	r3, #66	; 0x42
 8004300:	d101      	bne.n	8004306 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
 8004304:	e04e      	b.n	80043a4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2242      	movs	r2, #66	; 0x42
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f003 031c 	and.w	r3, r3, #28
 800431c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8a1b      	ldrh	r3, [r3, #16]
 8004322:	02db      	lsls	r3, r3, #11
 8004324:	b29b      	uxth	r3, r3
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	019b      	lsls	r3, r3, #6
 8004330:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800435c:	f7ff fa36 	bl	80037cc <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004362:	e015      	b.n	8004390 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004364:	f7ff fa32 	bl	80037cc <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004372:	d309      	bcc.n	8004388 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e00d      	b.n	80043a4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e4      	bne.n	8004364 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d101      	bne.n	80043c2 <HAL_ETH_Start+0x16>
 80043be:	2302      	movs	r3, #2
 80043c0:	e01f      	b.n	8004402 <HAL_ETH_Start+0x56>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fb44 	bl	8004a60 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fb7b 	bl	8004ad4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fc12 	bl	8004c08 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fbaf 	bl	8004b48 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fbdc 	bl	8004ba8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_ETH_Stop+0x16>
 800441c:	2302      	movs	r3, #2
 800441e:	e01f      	b.n	8004460 <HAL_ETH_Stop+0x56>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fba1 	bl	8004b78 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fbce 	bl	8004bd8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fb66 	bl	8004b0e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fbe0 	bl	8004c08 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fb26 	bl	8004a9a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_ETH_ConfigMAC+0x1c>
 8004480:	2302      	movs	r3, #2
 8004482:	e0e4      	b.n	800464e <HAL_ETH_ConfigMAC+0x1e6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80b1 	beq.w	80045fe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4b6c      	ldr	r3, [pc, #432]	; (8004658 <HAL_ETH_ConfigMAC+0x1f0>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80044b4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80044ba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80044c0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80044c6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80044cc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80044d2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80044d8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80044de:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80044e4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80044ea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80044f0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80044f6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800450e:	2001      	movs	r0, #1
 8004510:	f7ff f968 	bl	80037e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004524:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800452a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004530:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004536:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800453c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004542:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800454e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004550:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800455a:	2001      	movs	r0, #1
 800455c:	f7ff f942 	bl	80037e4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004570:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800457a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	f64f 7341 	movw	r3, #65345	; 0xff41
 800458a:	4013      	ands	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004592:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8004598:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800459e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80045a4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80045aa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80045b0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80045c8:	2001      	movs	r0, #1
 80045ca:	f7ff f90b 	bl	80037e4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7ff f8f8 	bl	80037e4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	61da      	str	r2, [r3, #28]
 80045fc:	e01e      	b.n	800463c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800460c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800462e:	2001      	movs	r0, #1
 8004630:	f7ff f8d8 	bl	80037e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	ff20810f 	.word	0xff20810f

0800465c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b0b0      	sub	sp, #192	; 0xc0
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004678:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004680:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004682:	2300      	movs	r3, #0
 8004684:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8004686:	2300      	movs	r3, #0
 8004688:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800468a:	2300      	movs	r3, #0
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800468e:	2300      	movs	r3, #0
 8004690:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004692:	2300      	movs	r3, #0
 8004694:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004696:	2300      	movs	r3, #0
 8004698:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d103      	bne.n	80046aa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80046a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a6:	663b      	str	r3, [r7, #96]	; 0x60
 80046a8:	e001      	b.n	80046ae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80046ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046b2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80046b8:	2300      	movs	r3, #0
 80046ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80046c8:	2340      	movs	r3, #64	; 0x40
 80046ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80046de:	2300      	movs	r3, #0
 80046e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800471a:	2300      	movs	r3, #0
 800471c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8004720:	2300      	movs	r3, #0
 8004722:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004730:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004734:	4bac      	ldr	r3, [pc, #688]	; (80049e8 <ETH_MACDMAConfig+0x38c>)
 8004736:	4013      	ands	r3, r2
 8004738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800473c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004740:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004744:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004748:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800474e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004752:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8004756:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800475c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800475e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004760:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004764:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8004766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004768:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800476a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800476c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800476e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004770:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004772:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004784:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004790:	2001      	movs	r0, #1
 8004792:	f7ff f827 	bl	80037e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800479e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80047a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80047a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80047a4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80047a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80047a8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80047aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80047ae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80047b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80047b4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80047b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80047ba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80047bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80047c0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80047c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80047cc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80047ce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80047da:	2001      	movs	r0, #1
 80047dc:	f7ff f802 	bl	80037e4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047e8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80047f2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80047fc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004808:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800480c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004810:	4013      	ands	r3, r2
 8004812:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004816:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800481a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800481c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004820:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004826:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800482c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800482e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004832:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004838:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800483a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800484c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004858:	2001      	movs	r0, #1
 800485a:	f7fe ffc3 	bl	80037e4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004866:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004868:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800486c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004882:	2001      	movs	r0, #1
 8004884:	f7fe ffae 	bl	80037e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004890:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800489a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80048a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048a4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80048b2:	2300      	movs	r3, #0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80048b6:	2304      	movs	r3, #4
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80048ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048be:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80048c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80048c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80048cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80048d2:	2380      	movs	r3, #128	; 0x80
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80048da:	2300      	movs	r3, #0
 80048dc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e6:	3318      	adds	r3, #24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80048ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048f2:	4b3e      	ldr	r3, [pc, #248]	; (80049ec <ETH_MACDMAConfig+0x390>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048fa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80048fc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80048fe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004900:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004902:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004904:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004906:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004908:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800490a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800490c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800490e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004910:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004912:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004916:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800491a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800491c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492e:	3318      	adds	r3, #24
 8004930:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004934:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	3318      	adds	r3, #24
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004946:	2001      	movs	r0, #1
 8004948:	f7fe ff4c 	bl	80037e4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	3318      	adds	r3, #24
 8004956:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800495a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800495c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004960:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004964:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004968:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800496c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800496e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004970:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004972:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004976:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004984:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004994:	2001      	movs	r0, #1
 8004996:	f7fe ff25 	bl	80037e4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049a6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10f      	bne.n	80049d0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b8:	331c      	adds	r3, #28
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049cc:	331c      	adds	r3, #28
 80049ce:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	461a      	mov	r2, r3
 80049d6:	2100      	movs	r1, #0
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f809 	bl	80049f0 <ETH_MACAddressConfig>
}
 80049de:	bf00      	nop
 80049e0:	37c0      	adds	r7, #192	; 0xc0
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	ff20810f 	.word	0xff20810f
 80049ec:	f8de3f23 	.word	0xf8de3f23

080049f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3305      	adds	r3, #5
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	3204      	adds	r2, #4
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <ETH_MACAddressConfig+0x68>)
 8004a12:	4413      	add	r3, r2
 8004a14:	461a      	mov	r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3303      	adds	r3, #3
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	061a      	lsls	r2, r3, #24
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3302      	adds	r3, #2
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	4313      	orrs	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	7812      	ldrb	r2, [r2, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <ETH_MACAddressConfig+0x6c>)
 8004a42:	4413      	add	r3, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40028040 	.word	0x40028040
 8004a5c:	40028044 	.word	0x40028044

08004a60 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004a84:	2001      	movs	r0, #1
 8004a86:	f000 f8e9 	bl	8004c5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0208 	bic.w	r2, r2, #8
 8004ab4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004abe:	2001      	movs	r0, #1
 8004ac0:	f000 f8cc 	bl	8004c5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0204 	orr.w	r2, r2, #4
 8004aee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004af8:	2001      	movs	r0, #1
 8004afa:	f000 f8af 	bl	8004c5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0204 	bic.w	r2, r2, #4
 8004b28:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004b32:	2001      	movs	r0, #1
 8004b34:	f000 f892 	bl	8004c5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]
}
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b58:	3318      	adds	r3, #24
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b68:	3318      	adds	r3, #24
 8004b6a:	601a      	str	r2, [r3, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b88:	3318      	adds	r3, #24
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b98:	3318      	adds	r3, #24
 8004b9a:	601a      	str	r2, [r3, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb8:	3318      	adds	r3, #24
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0202 	orr.w	r2, r2, #2
 8004bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc8:	3318      	adds	r3, #24
 8004bca:	601a      	str	r2, [r3, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be8:	3318      	adds	r3, #24
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0202 	bic.w	r2, r2, #2
 8004bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf8:	3318      	adds	r3, #24
 8004bfa:	601a      	str	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2c:	3318      	adds	r3, #24
 8004c2e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c38:	3318      	adds	r3, #24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004c3e:	2001      	movs	r0, #1
 8004c40:	f000 f80c 	bl	8004c5c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4e:	3318      	adds	r3, #24
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c64:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <ETH_Delay+0x38>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a0b      	ldr	r2, [pc, #44]	; (8004c98 <ETH_Delay+0x3c>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	0a5b      	lsrs	r3, r3, #9
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004c78:	bf00      	nop
  } 
  while (Delay --);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	60fa      	str	r2, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f9      	bne.n	8004c78 <ETH_Delay+0x1c>
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20000020 	.word	0x20000020
 8004c98:	10624dd3 	.word	0x10624dd3

08004c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	; 0x24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	e16b      	b.n	8004f90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004cb8:	2201      	movs	r2, #1
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	f040 815a 	bne.w	8004f8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f003 0303 	and.w	r3, r3, #3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d005      	beq.n	8004cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d130      	bne.n	8004d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	2203      	movs	r2, #3
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d24:	2201      	movs	r2, #1
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	091b      	lsrs	r3, r3, #4
 8004d3a:	f003 0201 	and.w	r2, r3, #1
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d017      	beq.n	8004d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	2203      	movs	r2, #3
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d123      	bne.n	8004de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	08da      	lsrs	r2, r3, #3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3208      	adds	r2, #8
 8004da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	220f      	movs	r2, #15
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	08da      	lsrs	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3208      	adds	r2, #8
 8004dda:	69b9      	ldr	r1, [r7, #24]
 8004ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	2203      	movs	r2, #3
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	43db      	mvns	r3, r3
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	4013      	ands	r3, r2
 8004df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0203 	and.w	r2, r3, #3
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80b4 	beq.w	8004f8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	4b60      	ldr	r3, [pc, #384]	; (8004fa8 <HAL_GPIO_Init+0x30c>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	4a5f      	ldr	r2, [pc, #380]	; (8004fa8 <HAL_GPIO_Init+0x30c>)
 8004e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e30:	6453      	str	r3, [r2, #68]	; 0x44
 8004e32:	4b5d      	ldr	r3, [pc, #372]	; (8004fa8 <HAL_GPIO_Init+0x30c>)
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e3e:	4a5b      	ldr	r2, [pc, #364]	; (8004fac <HAL_GPIO_Init+0x310>)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	3302      	adds	r3, #2
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	220f      	movs	r2, #15
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a52      	ldr	r2, [pc, #328]	; (8004fb0 <HAL_GPIO_Init+0x314>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d02b      	beq.n	8004ec2 <HAL_GPIO_Init+0x226>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a51      	ldr	r2, [pc, #324]	; (8004fb4 <HAL_GPIO_Init+0x318>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d025      	beq.n	8004ebe <HAL_GPIO_Init+0x222>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a50      	ldr	r2, [pc, #320]	; (8004fb8 <HAL_GPIO_Init+0x31c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01f      	beq.n	8004eba <HAL_GPIO_Init+0x21e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a4f      	ldr	r2, [pc, #316]	; (8004fbc <HAL_GPIO_Init+0x320>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d019      	beq.n	8004eb6 <HAL_GPIO_Init+0x21a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a4e      	ldr	r2, [pc, #312]	; (8004fc0 <HAL_GPIO_Init+0x324>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d013      	beq.n	8004eb2 <HAL_GPIO_Init+0x216>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a4d      	ldr	r2, [pc, #308]	; (8004fc4 <HAL_GPIO_Init+0x328>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00d      	beq.n	8004eae <HAL_GPIO_Init+0x212>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a4c      	ldr	r2, [pc, #304]	; (8004fc8 <HAL_GPIO_Init+0x32c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <HAL_GPIO_Init+0x20e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a4b      	ldr	r2, [pc, #300]	; (8004fcc <HAL_GPIO_Init+0x330>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_GPIO_Init+0x20a>
 8004ea2:	2307      	movs	r3, #7
 8004ea4:	e00e      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	e00c      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004eaa:	2306      	movs	r3, #6
 8004eac:	e00a      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004eae:	2305      	movs	r3, #5
 8004eb0:	e008      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004eb2:	2304      	movs	r3, #4
 8004eb4:	e006      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e004      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e002      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <HAL_GPIO_Init+0x228>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	f002 0203 	and.w	r2, r2, #3
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	4093      	lsls	r3, r2
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ed4:	4935      	ldr	r1, [pc, #212]	; (8004fac <HAL_GPIO_Init+0x310>)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	3302      	adds	r3, #2
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f06:	4a32      	ldr	r2, [pc, #200]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f0c:	4b30      	ldr	r3, [pc, #192]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f36:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	43db      	mvns	r3, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4013      	ands	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f60:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f84:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <HAL_GPIO_Init+0x334>)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	f67f ae90 	bls.w	8004cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3724      	adds	r7, #36	; 0x24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40013800 	.word	0x40013800
 8004fb0:	40020000 	.word	0x40020000
 8004fb4:	40020400 	.word	0x40020400
 8004fb8:	40020800 	.word	0x40020800
 8004fbc:	40020c00 	.word	0x40020c00
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40021400 	.word	0x40021400
 8004fc8:	40021800 	.word	0x40021800
 8004fcc:	40021c00 	.word	0x40021c00
 8004fd0:	40013c00 	.word	0x40013c00

08004fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	460b      	mov	r3, r1
 8004fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	887b      	ldrh	r3, [r7, #2]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
 8004ff0:	e001      	b.n	8004ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	807b      	strh	r3, [r7, #2]
 8005010:	4613      	mov	r3, r2
 8005012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005014:	787b      	ldrb	r3, [r7, #1]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800501a:	887a      	ldrh	r2, [r7, #2]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005020:	e003      	b.n	800502a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005022:	887b      	ldrh	r3, [r7, #2]
 8005024:	041a      	lsls	r2, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	619a      	str	r2, [r3, #24]
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005048:	887a      	ldrh	r2, [r7, #2]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4013      	ands	r3, r2
 800504e:	041a      	lsls	r2, r3, #16
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	43d9      	mvns	r1, r3
 8005054:	887b      	ldrh	r3, [r7, #2]
 8005056:	400b      	ands	r3, r1
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]
}
 800505e:	bf00      	nop
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005078:	695a      	ldr	r2, [r3, #20]
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d006      	beq.n	8005090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005082:	4a05      	ldr	r2, [pc, #20]	; (8005098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005088:	88fb      	ldrh	r3, [r7, #6]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fe f8d0 	bl	8003230 <HAL_GPIO_EXTI_Callback>
  }
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40013c00 	.word	0x40013c00

0800509c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e264      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d075      	beq.n	80051a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ba:	4ba3      	ldr	r3, [pc, #652]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d00c      	beq.n	80050e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c6:	4ba0      	ldr	r3, [pc, #640]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d112      	bne.n	80050f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d2:	4b9d      	ldr	r3, [pc, #628]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050de:	d10b      	bne.n	80050f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	4b99      	ldr	r3, [pc, #612]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d05b      	beq.n	80051a4 <HAL_RCC_OscConfig+0x108>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d157      	bne.n	80051a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e23f      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d106      	bne.n	8005110 <HAL_RCC_OscConfig+0x74>
 8005102:	4b91      	ldr	r3, [pc, #580]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a90      	ldr	r2, [pc, #576]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e01d      	b.n	800514c <HAL_RCC_OscConfig+0xb0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0x98>
 800511a:	4b8b      	ldr	r3, [pc, #556]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a8a      	ldr	r2, [pc, #552]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b88      	ldr	r3, [pc, #544]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a87      	ldr	r2, [pc, #540]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e00b      	b.n	800514c <HAL_RCC_OscConfig+0xb0>
 8005134:	4b84      	ldr	r3, [pc, #528]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a83      	ldr	r2, [pc, #524]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 800513a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	4b81      	ldr	r3, [pc, #516]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a80      	ldr	r2, [pc, #512]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7fe fb3a 	bl	80037cc <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800515c:	f7fe fb36 	bl	80037cc <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e204      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	4b76      	ldr	r3, [pc, #472]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0xc0>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fe fb26 	bl	80037cc <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005184:	f7fe fb22 	bl	80037cc <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	; 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e1f0      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	4b6c      	ldr	r3, [pc, #432]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0xe8>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d063      	beq.n	800527a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051b2:	4b65      	ldr	r3, [pc, #404]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051be:	4b62      	ldr	r3, [pc, #392]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d11c      	bne.n	8005204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d116      	bne.n	8005204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d6:	4b5c      	ldr	r3, [pc, #368]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RCC_OscConfig+0x152>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e1c4      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ee:	4b56      	ldr	r3, [pc, #344]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4952      	ldr	r1, [pc, #328]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	e03a      	b.n	800527a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800520c:	4b4f      	ldr	r3, [pc, #316]	; (800534c <HAL_RCC_OscConfig+0x2b0>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005212:	f7fe fadb 	bl	80037cc <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800521a:	f7fe fad7 	bl	80037cc <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e1a5      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	4b46      	ldr	r3, [pc, #280]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005238:	4b43      	ldr	r3, [pc, #268]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4940      	ldr	r1, [pc, #256]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]
 800524c:	e015      	b.n	800527a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524e:	4b3f      	ldr	r3, [pc, #252]	; (800534c <HAL_RCC_OscConfig+0x2b0>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fe faba 	bl	80037cc <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800525c:	f7fe fab6 	bl	80037cc <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e184      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	4b36      	ldr	r3, [pc, #216]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d030      	beq.n	80052e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d016      	beq.n	80052bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528e:	4b30      	ldr	r3, [pc, #192]	; (8005350 <HAL_RCC_OscConfig+0x2b4>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fe fa9a 	bl	80037cc <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800529c:	f7fe fa96 	bl	80037cc <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e164      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x200>
 80052ba:	e015      	b.n	80052e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052bc:	4b24      	ldr	r3, [pc, #144]	; (8005350 <HAL_RCC_OscConfig+0x2b4>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c2:	f7fe fa83 	bl	80037cc <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ca:	f7fe fa7f 	bl	80037cc <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e14d      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052dc:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80052de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f0      	bne.n	80052ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 80a0 	beq.w	8005436 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052fa:	4b13      	ldr	r3, [pc, #76]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10f      	bne.n	8005326 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	4a0e      	ldr	r2, [pc, #56]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005314:	6413      	str	r3, [r2, #64]	; 0x40
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_RCC_OscConfig+0x2ac>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005326:	4b0b      	ldr	r3, [pc, #44]	; (8005354 <HAL_RCC_OscConfig+0x2b8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d121      	bne.n	8005376 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005332:	4b08      	ldr	r3, [pc, #32]	; (8005354 <HAL_RCC_OscConfig+0x2b8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a07      	ldr	r2, [pc, #28]	; (8005354 <HAL_RCC_OscConfig+0x2b8>)
 8005338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800533e:	f7fe fa45 	bl	80037cc <HAL_GetTick>
 8005342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	e011      	b.n	800536a <HAL_RCC_OscConfig+0x2ce>
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	42470000 	.word	0x42470000
 8005350:	42470e80 	.word	0x42470e80
 8005354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005358:	f7fe fa38 	bl	80037cc <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b02      	cmp	r3, #2
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e106      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536a:	4b85      	ldr	r3, [pc, #532]	; (8005580 <HAL_RCC_OscConfig+0x4e4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f0      	beq.n	8005358 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d106      	bne.n	800538c <HAL_RCC_OscConfig+0x2f0>
 800537e:	4b81      	ldr	r3, [pc, #516]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 8005380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005382:	4a80      	ldr	r2, [pc, #512]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	6713      	str	r3, [r2, #112]	; 0x70
 800538a:	e01c      	b.n	80053c6 <HAL_RCC_OscConfig+0x32a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b05      	cmp	r3, #5
 8005392:	d10c      	bne.n	80053ae <HAL_RCC_OscConfig+0x312>
 8005394:	4b7b      	ldr	r3, [pc, #492]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a7a      	ldr	r2, [pc, #488]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	6713      	str	r3, [r2, #112]	; 0x70
 80053a0:	4b78      	ldr	r3, [pc, #480]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	4a77      	ldr	r2, [pc, #476]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	6713      	str	r3, [r2, #112]	; 0x70
 80053ac:	e00b      	b.n	80053c6 <HAL_RCC_OscConfig+0x32a>
 80053ae:	4b75      	ldr	r3, [pc, #468]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a74      	ldr	r2, [pc, #464]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ba:	4b72      	ldr	r3, [pc, #456]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	4a71      	ldr	r2, [pc, #452]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80053c0:	f023 0304 	bic.w	r3, r3, #4
 80053c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d015      	beq.n	80053fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ce:	f7fe f9fd 	bl	80037cc <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d4:	e00a      	b.n	80053ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d6:	f7fe f9f9 	bl	80037cc <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e0c5      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ec:	4b65      	ldr	r3, [pc, #404]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0ee      	beq.n	80053d6 <HAL_RCC_OscConfig+0x33a>
 80053f8:	e014      	b.n	8005424 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fa:	f7fe f9e7 	bl	80037cc <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005400:	e00a      	b.n	8005418 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005402:	f7fe f9e3 	bl	80037cc <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e0af      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005418:	4b5a      	ldr	r3, [pc, #360]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 800541a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ee      	bne.n	8005402 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005424:	7dfb      	ldrb	r3, [r7, #23]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d105      	bne.n	8005436 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800542a:	4b56      	ldr	r3, [pc, #344]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	4a55      	ldr	r2, [pc, #340]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 8005430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 809b 	beq.w	8005576 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005440:	4b50      	ldr	r3, [pc, #320]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 030c 	and.w	r3, r3, #12
 8005448:	2b08      	cmp	r3, #8
 800544a:	d05c      	beq.n	8005506 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d141      	bne.n	80054d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005454:	4b4c      	ldr	r3, [pc, #304]	; (8005588 <HAL_RCC_OscConfig+0x4ec>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545a:	f7fe f9b7 	bl	80037cc <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005462:	f7fe f9b3 	bl	80037cc <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e081      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005474:	4b43      	ldr	r3, [pc, #268]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f0      	bne.n	8005462 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69da      	ldr	r2, [r3, #28]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	019b      	lsls	r3, r3, #6
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	3b01      	subs	r3, #1
 800549a:	041b      	lsls	r3, r3, #16
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	061b      	lsls	r3, r3, #24
 80054a4:	4937      	ldr	r1, [pc, #220]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054aa:	4b37      	ldr	r3, [pc, #220]	; (8005588 <HAL_RCC_OscConfig+0x4ec>)
 80054ac:	2201      	movs	r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b0:	f7fe f98c 	bl	80037cc <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b8:	f7fe f988 	bl	80037cc <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e056      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ca:	4b2e      	ldr	r3, [pc, #184]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCC_OscConfig+0x41c>
 80054d6:	e04e      	b.n	8005576 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d8:	4b2b      	ldr	r3, [pc, #172]	; (8005588 <HAL_RCC_OscConfig+0x4ec>)
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fe f975 	bl	80037cc <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fe f971 	bl	80037cc <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e03f      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f8:	4b22      	ldr	r3, [pc, #136]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f0      	bne.n	80054e6 <HAL_RCC_OscConfig+0x44a>
 8005504:	e037      	b.n	8005576 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e032      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <HAL_RCC_OscConfig+0x4e8>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d028      	beq.n	8005572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d121      	bne.n	8005572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005538:	429a      	cmp	r2, r3
 800553a:	d11a      	bne.n	8005572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005542:	4013      	ands	r3, r2
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005548:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800554a:	4293      	cmp	r3, r2
 800554c:	d111      	bne.n	8005572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	3b01      	subs	r3, #1
 800555c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800555e:	429a      	cmp	r2, r3
 8005560:	d107      	bne.n	8005572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800556e:	429a      	cmp	r2, r3
 8005570:	d001      	beq.n	8005576 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40007000 	.word	0x40007000
 8005584:	40023800 	.word	0x40023800
 8005588:	42470060 	.word	0x42470060

0800558c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0cc      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055a0:	4b68      	ldr	r3, [pc, #416]	; (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d90c      	bls.n	80055c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ae:	4b65      	ldr	r3, [pc, #404]	; (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b6:	4b63      	ldr	r3, [pc, #396]	; (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d001      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0b8      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d020      	beq.n	8005616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055e0:	4b59      	ldr	r3, [pc, #356]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	4a58      	ldr	r2, [pc, #352]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0308 	and.w	r3, r3, #8
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f8:	4b53      	ldr	r3, [pc, #332]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a52      	ldr	r2, [pc, #328]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005604:	4b50      	ldr	r3, [pc, #320]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	494d      	ldr	r1, [pc, #308]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d044      	beq.n	80056ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d107      	bne.n	800563a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800562a:	4b47      	ldr	r3, [pc, #284]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d119      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e07f      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b02      	cmp	r3, #2
 8005640:	d003      	beq.n	800564a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005646:	2b03      	cmp	r3, #3
 8005648:	d107      	bne.n	800565a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564a:	4b3f      	ldr	r3, [pc, #252]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e06f      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800565a:	4b3b      	ldr	r3, [pc, #236]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e067      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800566a:	4b37      	ldr	r3, [pc, #220]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f023 0203 	bic.w	r2, r3, #3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4934      	ldr	r1, [pc, #208]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	4313      	orrs	r3, r2
 800567a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800567c:	f7fe f8a6 	bl	80037cc <HAL_GetTick>
 8005680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005682:	e00a      	b.n	800569a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005684:	f7fe f8a2 	bl	80037cc <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e04f      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	4b2b      	ldr	r3, [pc, #172]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 020c 	and.w	r2, r3, #12
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d1eb      	bne.n	8005684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ac:	4b25      	ldr	r3, [pc, #148]	; (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d20c      	bcs.n	80056d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b22      	ldr	r3, [pc, #136]	; (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b20      	ldr	r3, [pc, #128]	; (8005744 <HAL_RCC_ClockConfig+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e032      	b.n	800573a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e0:	4b19      	ldr	r3, [pc, #100]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4916      	ldr	r1, [pc, #88]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056fe:	4b12      	ldr	r3, [pc, #72]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	490e      	ldr	r1, [pc, #56]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005712:	f000 f889 	bl	8005828 <HAL_RCC_GetSysClockFreq>
 8005716:	4602      	mov	r2, r0
 8005718:	4b0b      	ldr	r3, [pc, #44]	; (8005748 <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	490a      	ldr	r1, [pc, #40]	; (800574c <HAL_RCC_ClockConfig+0x1c0>)
 8005724:	5ccb      	ldrb	r3, [r1, r3]
 8005726:	fa22 f303 	lsr.w	r3, r2, r3
 800572a:	4a09      	ldr	r2, [pc, #36]	; (8005750 <HAL_RCC_ClockConfig+0x1c4>)
 800572c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <HAL_RCC_ClockConfig+0x1c8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe f806 	bl	8003744 <HAL_InitTick>

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	40023c00 	.word	0x40023c00
 8005748:	40023800 	.word	0x40023800
 800574c:	08014a20 	.word	0x08014a20
 8005750:	20000020 	.word	0x20000020
 8005754:	20000024 	.word	0x20000024

08005758 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08c      	sub	sp, #48	; 0x30
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d129      	bne.n	80057be <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	4b2b      	ldr	r3, [pc, #172]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	4a2a      	ldr	r2, [pc, #168]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6313      	str	r3, [r2, #48]	; 0x30
 800577a:	4b28      	ldr	r3, [pc, #160]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800578a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2302      	movs	r3, #2
 800578e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005790:	2303      	movs	r3, #3
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005794:	2300      	movs	r3, #0
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005798:	2300      	movs	r3, #0
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	4619      	mov	r1, r3
 80057a2:	481f      	ldr	r0, [pc, #124]	; (8005820 <HAL_RCC_MCOConfig+0xc8>)
 80057a4:	f7ff fa7a 	bl	8004c9c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80057a8:	4b1c      	ldr	r3, [pc, #112]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	430b      	orrs	r3, r1
 80057b6:	4919      	ldr	r1, [pc, #100]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80057bc:	e029      	b.n	8005812 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	4b16      	ldr	r3, [pc, #88]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 80057c8:	f043 0304 	orr.w	r3, r3, #4
 80057cc:	6313      	str	r3, [r2, #48]	; 0x30
 80057ce:	4b13      	ldr	r3, [pc, #76]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80057da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e0:	2302      	movs	r3, #2
 80057e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e4:	2303      	movs	r3, #3
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80057f0:	f107 031c 	add.w	r3, r7, #28
 80057f4:	4619      	mov	r1, r3
 80057f6:	480b      	ldr	r0, [pc, #44]	; (8005824 <HAL_RCC_MCOConfig+0xcc>)
 80057f8:	f7ff fa50 	bl	8004c9c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80057fc:	4b07      	ldr	r3, [pc, #28]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	00d9      	lsls	r1, r3, #3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	430b      	orrs	r3, r1
 800580c:	4903      	ldr	r1, [pc, #12]	; (800581c <HAL_RCC_MCOConfig+0xc4>)
 800580e:	4313      	orrs	r3, r2
 8005810:	608b      	str	r3, [r1, #8]
}
 8005812:	bf00      	nop
 8005814:	3730      	adds	r7, #48	; 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800
 8005820:	40020000 	.word	0x40020000
 8005824:	40020800 	.word	0x40020800

08005828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005828:	b5b0      	push	{r4, r5, r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800582e:	2100      	movs	r1, #0
 8005830:	6079      	str	r1, [r7, #4]
 8005832:	2100      	movs	r1, #0
 8005834:	60f9      	str	r1, [r7, #12]
 8005836:	2100      	movs	r1, #0
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800583a:	2100      	movs	r1, #0
 800583c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800583e:	4952      	ldr	r1, [pc, #328]	; (8005988 <HAL_RCC_GetSysClockFreq+0x160>)
 8005840:	6889      	ldr	r1, [r1, #8]
 8005842:	f001 010c 	and.w	r1, r1, #12
 8005846:	2908      	cmp	r1, #8
 8005848:	d00d      	beq.n	8005866 <HAL_RCC_GetSysClockFreq+0x3e>
 800584a:	2908      	cmp	r1, #8
 800584c:	f200 8094 	bhi.w	8005978 <HAL_RCC_GetSysClockFreq+0x150>
 8005850:	2900      	cmp	r1, #0
 8005852:	d002      	beq.n	800585a <HAL_RCC_GetSysClockFreq+0x32>
 8005854:	2904      	cmp	r1, #4
 8005856:	d003      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0x38>
 8005858:	e08e      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800585a:	4b4c      	ldr	r3, [pc, #304]	; (800598c <HAL_RCC_GetSysClockFreq+0x164>)
 800585c:	60bb      	str	r3, [r7, #8]
       break;
 800585e:	e08e      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005860:	4b4b      	ldr	r3, [pc, #300]	; (8005990 <HAL_RCC_GetSysClockFreq+0x168>)
 8005862:	60bb      	str	r3, [r7, #8]
      break;
 8005864:	e08b      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005866:	4948      	ldr	r1, [pc, #288]	; (8005988 <HAL_RCC_GetSysClockFreq+0x160>)
 8005868:	6849      	ldr	r1, [r1, #4]
 800586a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800586e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005870:	4945      	ldr	r1, [pc, #276]	; (8005988 <HAL_RCC_GetSysClockFreq+0x160>)
 8005872:	6849      	ldr	r1, [r1, #4]
 8005874:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005878:	2900      	cmp	r1, #0
 800587a:	d024      	beq.n	80058c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800587c:	4942      	ldr	r1, [pc, #264]	; (8005988 <HAL_RCC_GetSysClockFreq+0x160>)
 800587e:	6849      	ldr	r1, [r1, #4]
 8005880:	0989      	lsrs	r1, r1, #6
 8005882:	4608      	mov	r0, r1
 8005884:	f04f 0100 	mov.w	r1, #0
 8005888:	f240 14ff 	movw	r4, #511	; 0x1ff
 800588c:	f04f 0500 	mov.w	r5, #0
 8005890:	ea00 0204 	and.w	r2, r0, r4
 8005894:	ea01 0305 	and.w	r3, r1, r5
 8005898:	493d      	ldr	r1, [pc, #244]	; (8005990 <HAL_RCC_GetSysClockFreq+0x168>)
 800589a:	fb01 f003 	mul.w	r0, r1, r3
 800589e:	2100      	movs	r1, #0
 80058a0:	fb01 f102 	mul.w	r1, r1, r2
 80058a4:	1844      	adds	r4, r0, r1
 80058a6:	493a      	ldr	r1, [pc, #232]	; (8005990 <HAL_RCC_GetSysClockFreq+0x168>)
 80058a8:	fba2 0101 	umull	r0, r1, r2, r1
 80058ac:	1863      	adds	r3, r4, r1
 80058ae:	4619      	mov	r1, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	f7fa fcea 	bl	8000290 <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4613      	mov	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	e04a      	b.n	800595c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c6:	4b30      	ldr	r3, [pc, #192]	; (8005988 <HAL_RCC_GetSysClockFreq+0x160>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	099b      	lsrs	r3, r3, #6
 80058cc:	461a      	mov	r2, r3
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058d6:	f04f 0100 	mov.w	r1, #0
 80058da:	ea02 0400 	and.w	r4, r2, r0
 80058de:	ea03 0501 	and.w	r5, r3, r1
 80058e2:	4620      	mov	r0, r4
 80058e4:	4629      	mov	r1, r5
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	f04f 0300 	mov.w	r3, #0
 80058ee:	014b      	lsls	r3, r1, #5
 80058f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058f4:	0142      	lsls	r2, r0, #5
 80058f6:	4610      	mov	r0, r2
 80058f8:	4619      	mov	r1, r3
 80058fa:	1b00      	subs	r0, r0, r4
 80058fc:	eb61 0105 	sbc.w	r1, r1, r5
 8005900:	f04f 0200 	mov.w	r2, #0
 8005904:	f04f 0300 	mov.w	r3, #0
 8005908:	018b      	lsls	r3, r1, #6
 800590a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800590e:	0182      	lsls	r2, r0, #6
 8005910:	1a12      	subs	r2, r2, r0
 8005912:	eb63 0301 	sbc.w	r3, r3, r1
 8005916:	f04f 0000 	mov.w	r0, #0
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	00d9      	lsls	r1, r3, #3
 8005920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005924:	00d0      	lsls	r0, r2, #3
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	1912      	adds	r2, r2, r4
 800592c:	eb45 0303 	adc.w	r3, r5, r3
 8005930:	f04f 0000 	mov.w	r0, #0
 8005934:	f04f 0100 	mov.w	r1, #0
 8005938:	0299      	lsls	r1, r3, #10
 800593a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800593e:	0290      	lsls	r0, r2, #10
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	461a      	mov	r2, r3
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	f7fa fc9e 	bl	8000290 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4613      	mov	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800595c:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <HAL_RCC_GetSysClockFreq+0x160>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	3301      	adds	r3, #1
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	fbb2 f3f3 	udiv	r3, r2, r3
 8005974:	60bb      	str	r3, [r7, #8]
      break;
 8005976:	e002      	b.n	800597e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <HAL_RCC_GetSysClockFreq+0x164>)
 800597a:	60bb      	str	r3, [r7, #8]
      break;
 800597c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800597e:	68bb      	ldr	r3, [r7, #8]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bdb0      	pop	{r4, r5, r7, pc}
 8005988:	40023800 	.word	0x40023800
 800598c:	00f42400 	.word	0x00f42400
 8005990:	017d7840 	.word	0x017d7840

08005994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005998:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800599a:	681b      	ldr	r3, [r3, #0]
}
 800599c:	4618      	mov	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000020 	.word	0x20000020

080059ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e041      	b.n	8005a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fd fc6c 	bl	80032b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	4610      	mov	r0, r2
 80059ec:	f000 f9ce 	bl	8005d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d001      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e04e      	b.n	8005b02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <HAL_TIM_Base_Start_IT+0xc4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d022      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x80>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d01d      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x80>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x80>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <HAL_TIM_Base_Start_IT+0xcc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x80>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x80>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1b      	ldr	r2, [pc, #108]	; (8005b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x80>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_TIM_Base_Start_IT+0x80>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a18      	ldr	r2, [pc, #96]	; (8005b28 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d111      	bne.n	8005af0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	d010      	beq.n	8005b00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aee:	e007      	b.n	8005b00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40001800 	.word	0x40001800

08005b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d122      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d11b      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0202 	mvn.w	r2, #2
 8005b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f8ee 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f8e0 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f8f1 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0204 	mvn.w	r2, #4
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8c4 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f8b6 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f8c7 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b08      	cmp	r3, #8
 8005be8:	d122      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d11b      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0208 	mvn.w	r2, #8
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2204      	movs	r2, #4
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f89a 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f88c 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f89d 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d122      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0210 	mvn.w	r2, #16
 8005c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2208      	movs	r2, #8
 8005c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f870 	bl	8005d50 <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f862 	bl	8005d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f873 	bl	8005d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10e      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d107      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0201 	mvn.w	r2, #1
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fd faa8 	bl	8003200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b80      	cmp	r3, #128	; 0x80
 8005cbc:	d10e      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d107      	bne.n	8005cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f902 	bl	8005ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d10e      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d107      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f838 	bl	8005d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d10e      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d107      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0220 	mvn.w	r2, #32
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8cc 	bl	8005ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a40      	ldr	r2, [pc, #256]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d00f      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3d      	ldr	r2, [pc, #244]	; (8005ea4 <TIM_Base_SetConfig+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a3c      	ldr	r2, [pc, #240]	; (8005ea8 <TIM_Base_SetConfig+0x11c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3b      	ldr	r2, [pc, #236]	; (8005eac <TIM_Base_SetConfig+0x120>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3a      	ldr	r2, [pc, #232]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d108      	bne.n	8005dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d02b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d027      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2c      	ldr	r2, [pc, #176]	; (8005ea4 <TIM_Base_SetConfig+0x118>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d023      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <TIM_Base_SetConfig+0x11c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01f      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <TIM_Base_SetConfig+0x120>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d017      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <TIM_Base_SetConfig+0x128>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <TIM_Base_SetConfig+0x12c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <TIM_Base_SetConfig+0x130>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <TIM_Base_SetConfig+0x134>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a24      	ldr	r2, [pc, #144]	; (8005ec4 <TIM_Base_SetConfig+0x138>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <TIM_Base_SetConfig+0x13c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_Base_SetConfig+0xf8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a0c      	ldr	r2, [pc, #48]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d103      	bne.n	8005e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	615a      	str	r2, [r3, #20]
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800
 8005ec0:	40001800 	.word	0x40001800
 8005ec4:	40001c00 	.word	0x40001c00
 8005ec8:	40002000 	.word	0x40002000

08005ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005efa:	4b8d      	ldr	r3, [pc, #564]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005efc:	22c0      	movs	r2, #192	; 0xc0
 8005efe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005f00:	4b8b      	ldr	r3, [pc, #556]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f02:	22a8      	movs	r2, #168	; 0xa8
 8005f04:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005f06:	4b8a      	ldr	r3, [pc, #552]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8005f0c:	4b88      	ldr	r3, [pc, #544]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f0e:	226f      	movs	r2, #111	; 0x6f
 8005f10:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005f12:	4b88      	ldr	r3, [pc, #544]	; (8006134 <MX_LWIP_Init+0x240>)
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005f18:	4b86      	ldr	r3, [pc, #536]	; (8006134 <MX_LWIP_Init+0x240>)
 8005f1a:	22ff      	movs	r2, #255	; 0xff
 8005f1c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005f1e:	4b85      	ldr	r3, [pc, #532]	; (8006134 <MX_LWIP_Init+0x240>)
 8005f20:	22ff      	movs	r2, #255	; 0xff
 8005f22:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005f24:	4b83      	ldr	r3, [pc, #524]	; (8006134 <MX_LWIP_Init+0x240>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005f2a:	4b83      	ldr	r3, [pc, #524]	; (8006138 <MX_LWIP_Init+0x244>)
 8005f2c:	22c0      	movs	r2, #192	; 0xc0
 8005f2e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005f30:	4b81      	ldr	r3, [pc, #516]	; (8006138 <MX_LWIP_Init+0x244>)
 8005f32:	22a8      	movs	r2, #168	; 0xa8
 8005f34:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005f36:	4b80      	ldr	r3, [pc, #512]	; (8006138 <MX_LWIP_Init+0x244>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005f3c:	4b7e      	ldr	r3, [pc, #504]	; (8006138 <MX_LWIP_Init+0x244>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005f42:	f000 fcab 	bl	800689c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005f46:	4b7a      	ldr	r3, [pc, #488]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	061a      	lsls	r2, r3, #24
 8005f4c:	4b78      	ldr	r3, [pc, #480]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	431a      	orrs	r2, r3
 8005f54:	4b76      	ldr	r3, [pc, #472]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f56:	789b      	ldrb	r3, [r3, #2]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	4a74      	ldr	r2, [pc, #464]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f5e:	78d2      	ldrb	r2, [r2, #3]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	061a      	lsls	r2, r3, #24
 8005f64:	4b72      	ldr	r3, [pc, #456]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	0619      	lsls	r1, r3, #24
 8005f6a:	4b71      	ldr	r3, [pc, #452]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	4319      	orrs	r1, r3
 8005f72:	4b6f      	ldr	r3, [pc, #444]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f74:	789b      	ldrb	r3, [r3, #2]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	496d      	ldr	r1, [pc, #436]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f7c:	78c9      	ldrb	r1, [r1, #3]
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f86:	431a      	orrs	r2, r3
 8005f88:	4b69      	ldr	r3, [pc, #420]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	0619      	lsls	r1, r3, #24
 8005f8e:	4b68      	ldr	r3, [pc, #416]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	041b      	lsls	r3, r3, #16
 8005f94:	4319      	orrs	r1, r3
 8005f96:	4b66      	ldr	r3, [pc, #408]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005f98:	789b      	ldrb	r3, [r3, #2]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	430b      	orrs	r3, r1
 8005f9e:	4964      	ldr	r1, [pc, #400]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005fa0:	78c9      	ldrb	r1, [r1, #3]
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005faa:	431a      	orrs	r2, r3
 8005fac:	4b60      	ldr	r3, [pc, #384]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	0619      	lsls	r1, r3, #24
 8005fb2:	4b5f      	ldr	r3, [pc, #380]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	4319      	orrs	r1, r3
 8005fba:	4b5d      	ldr	r3, [pc, #372]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005fbc:	789b      	ldrb	r3, [r3, #2]
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	495b      	ldr	r1, [pc, #364]	; (8006130 <MX_LWIP_Init+0x23c>)
 8005fc4:	78c9      	ldrb	r1, [r1, #3]
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	0e1b      	lsrs	r3, r3, #24
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	4a5b      	ldr	r2, [pc, #364]	; (800613c <MX_LWIP_Init+0x248>)
 8005fce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005fd0:	4b58      	ldr	r3, [pc, #352]	; (8006134 <MX_LWIP_Init+0x240>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	061a      	lsls	r2, r3, #24
 8005fd6:	4b57      	ldr	r3, [pc, #348]	; (8006134 <MX_LWIP_Init+0x240>)
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	041b      	lsls	r3, r3, #16
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	4b55      	ldr	r3, [pc, #340]	; (8006134 <MX_LWIP_Init+0x240>)
 8005fe0:	789b      	ldrb	r3, [r3, #2]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	4a53      	ldr	r2, [pc, #332]	; (8006134 <MX_LWIP_Init+0x240>)
 8005fe8:	78d2      	ldrb	r2, [r2, #3]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	061a      	lsls	r2, r3, #24
 8005fee:	4b51      	ldr	r3, [pc, #324]	; (8006134 <MX_LWIP_Init+0x240>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	0619      	lsls	r1, r3, #24
 8005ff4:	4b4f      	ldr	r3, [pc, #316]	; (8006134 <MX_LWIP_Init+0x240>)
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	041b      	lsls	r3, r3, #16
 8005ffa:	4319      	orrs	r1, r3
 8005ffc:	4b4d      	ldr	r3, [pc, #308]	; (8006134 <MX_LWIP_Init+0x240>)
 8005ffe:	789b      	ldrb	r3, [r3, #2]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	430b      	orrs	r3, r1
 8006004:	494b      	ldr	r1, [pc, #300]	; (8006134 <MX_LWIP_Init+0x240>)
 8006006:	78c9      	ldrb	r1, [r1, #3]
 8006008:	430b      	orrs	r3, r1
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006010:	431a      	orrs	r2, r3
 8006012:	4b48      	ldr	r3, [pc, #288]	; (8006134 <MX_LWIP_Init+0x240>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	0619      	lsls	r1, r3, #24
 8006018:	4b46      	ldr	r3, [pc, #280]	; (8006134 <MX_LWIP_Init+0x240>)
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	4319      	orrs	r1, r3
 8006020:	4b44      	ldr	r3, [pc, #272]	; (8006134 <MX_LWIP_Init+0x240>)
 8006022:	789b      	ldrb	r3, [r3, #2]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	430b      	orrs	r3, r1
 8006028:	4942      	ldr	r1, [pc, #264]	; (8006134 <MX_LWIP_Init+0x240>)
 800602a:	78c9      	ldrb	r1, [r1, #3]
 800602c:	430b      	orrs	r3, r1
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006034:	431a      	orrs	r2, r3
 8006036:	4b3f      	ldr	r3, [pc, #252]	; (8006134 <MX_LWIP_Init+0x240>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	0619      	lsls	r1, r3, #24
 800603c:	4b3d      	ldr	r3, [pc, #244]	; (8006134 <MX_LWIP_Init+0x240>)
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	041b      	lsls	r3, r3, #16
 8006042:	4319      	orrs	r1, r3
 8006044:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <MX_LWIP_Init+0x240>)
 8006046:	789b      	ldrb	r3, [r3, #2]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	430b      	orrs	r3, r1
 800604c:	4939      	ldr	r1, [pc, #228]	; (8006134 <MX_LWIP_Init+0x240>)
 800604e:	78c9      	ldrb	r1, [r1, #3]
 8006050:	430b      	orrs	r3, r1
 8006052:	0e1b      	lsrs	r3, r3, #24
 8006054:	4313      	orrs	r3, r2
 8006056:	4a3a      	ldr	r2, [pc, #232]	; (8006140 <MX_LWIP_Init+0x24c>)
 8006058:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800605a:	4b37      	ldr	r3, [pc, #220]	; (8006138 <MX_LWIP_Init+0x244>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	061a      	lsls	r2, r3, #24
 8006060:	4b35      	ldr	r3, [pc, #212]	; (8006138 <MX_LWIP_Init+0x244>)
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	431a      	orrs	r2, r3
 8006068:	4b33      	ldr	r3, [pc, #204]	; (8006138 <MX_LWIP_Init+0x244>)
 800606a:	789b      	ldrb	r3, [r3, #2]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	4313      	orrs	r3, r2
 8006070:	4a31      	ldr	r2, [pc, #196]	; (8006138 <MX_LWIP_Init+0x244>)
 8006072:	78d2      	ldrb	r2, [r2, #3]
 8006074:	4313      	orrs	r3, r2
 8006076:	061a      	lsls	r2, r3, #24
 8006078:	4b2f      	ldr	r3, [pc, #188]	; (8006138 <MX_LWIP_Init+0x244>)
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	0619      	lsls	r1, r3, #24
 800607e:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <MX_LWIP_Init+0x244>)
 8006080:	785b      	ldrb	r3, [r3, #1]
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	4319      	orrs	r1, r3
 8006086:	4b2c      	ldr	r3, [pc, #176]	; (8006138 <MX_LWIP_Init+0x244>)
 8006088:	789b      	ldrb	r3, [r3, #2]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	430b      	orrs	r3, r1
 800608e:	492a      	ldr	r1, [pc, #168]	; (8006138 <MX_LWIP_Init+0x244>)
 8006090:	78c9      	ldrb	r1, [r1, #3]
 8006092:	430b      	orrs	r3, r1
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800609a:	431a      	orrs	r2, r3
 800609c:	4b26      	ldr	r3, [pc, #152]	; (8006138 <MX_LWIP_Init+0x244>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	0619      	lsls	r1, r3, #24
 80060a2:	4b25      	ldr	r3, [pc, #148]	; (8006138 <MX_LWIP_Init+0x244>)
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	4319      	orrs	r1, r3
 80060aa:	4b23      	ldr	r3, [pc, #140]	; (8006138 <MX_LWIP_Init+0x244>)
 80060ac:	789b      	ldrb	r3, [r3, #2]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	430b      	orrs	r3, r1
 80060b2:	4921      	ldr	r1, [pc, #132]	; (8006138 <MX_LWIP_Init+0x244>)
 80060b4:	78c9      	ldrb	r1, [r1, #3]
 80060b6:	430b      	orrs	r3, r1
 80060b8:	0a1b      	lsrs	r3, r3, #8
 80060ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80060be:	431a      	orrs	r2, r3
 80060c0:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <MX_LWIP_Init+0x244>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	0619      	lsls	r1, r3, #24
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <MX_LWIP_Init+0x244>)
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	4319      	orrs	r1, r3
 80060ce:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <MX_LWIP_Init+0x244>)
 80060d0:	789b      	ldrb	r3, [r3, #2]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	430b      	orrs	r3, r1
 80060d6:	4918      	ldr	r1, [pc, #96]	; (8006138 <MX_LWIP_Init+0x244>)
 80060d8:	78c9      	ldrb	r1, [r1, #3]
 80060da:	430b      	orrs	r3, r1
 80060dc:	0e1b      	lsrs	r3, r3, #24
 80060de:	4313      	orrs	r3, r2
 80060e0:	4a18      	ldr	r2, [pc, #96]	; (8006144 <MX_LWIP_Init+0x250>)
 80060e2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80060e4:	4b18      	ldr	r3, [pc, #96]	; (8006148 <MX_LWIP_Init+0x254>)
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	4b18      	ldr	r3, [pc, #96]	; (800614c <MX_LWIP_Init+0x258>)
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	2300      	movs	r3, #0
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	4b14      	ldr	r3, [pc, #80]	; (8006144 <MX_LWIP_Init+0x250>)
 80060f2:	4a13      	ldr	r2, [pc, #76]	; (8006140 <MX_LWIP_Init+0x24c>)
 80060f4:	4911      	ldr	r1, [pc, #68]	; (800613c <MX_LWIP_Init+0x248>)
 80060f6:	4816      	ldr	r0, [pc, #88]	; (8006150 <MX_LWIP_Init+0x25c>)
 80060f8:	f001 f876 	bl	80071e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80060fc:	4814      	ldr	r0, [pc, #80]	; (8006150 <MX_LWIP_Init+0x25c>)
 80060fe:	f001 fa25 	bl	800754c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006102:	4b13      	ldr	r3, [pc, #76]	; (8006150 <MX_LWIP_Init+0x25c>)
 8006104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006108:	089b      	lsrs	r3, r3, #2
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006114:	480e      	ldr	r0, [pc, #56]	; (8006150 <MX_LWIP_Init+0x25c>)
 8006116:	f001 fa29 	bl	800756c <netif_set_up>
 800611a:	e002      	b.n	8006122 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800611c:	480c      	ldr	r0, [pc, #48]	; (8006150 <MX_LWIP_Init+0x25c>)
 800611e:	f001 fa91 	bl	8007644 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006122:	490c      	ldr	r1, [pc, #48]	; (8006154 <MX_LWIP_Init+0x260>)
 8006124:	480a      	ldr	r0, [pc, #40]	; (8006150 <MX_LWIP_Init+0x25c>)
 8006126:	f001 fabf 	bl	80076a8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000378 	.word	0x20000378
 8006134:	20000374 	.word	0x20000374
 8006138:	20000334 	.word	0x20000334
 800613c:	20000370 	.word	0x20000370
 8006140:	2000037c 	.word	0x2000037c
 8006144:	20000380 	.word	0x20000380
 8006148:	08010731 	.word	0x08010731
 800614c:	080066c9 	.word	0x080066c9
 8006150:	20000338 	.word	0x20000338
 8006154:	08006735 	.word	0x08006735

08006158 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800615c:	4803      	ldr	r0, [pc, #12]	; (800616c <MX_LWIP_Process+0x14>)
 800615e:	f000 fa93 	bl	8006688 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8006162:	f007 fbb1 	bl	800d8c8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000338 	.word	0x20000338

08006170 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	; 0x38
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a46      	ldr	r2, [pc, #280]	; (80062a8 <HAL_ETH_MspInit+0x138>)
 800618e:	4293      	cmp	r3, r2
 8006190:	f040 8085 	bne.w	800629e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006194:	2300      	movs	r3, #0
 8006196:	623b      	str	r3, [r7, #32]
 8006198:	4b44      	ldr	r3, [pc, #272]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 800619a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619c:	4a43      	ldr	r2, [pc, #268]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 800619e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061a2:	6313      	str	r3, [r2, #48]	; 0x30
 80061a4:	4b41      	ldr	r3, [pc, #260]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ac:	623b      	str	r3, [r7, #32]
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	4b3d      	ldr	r3, [pc, #244]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	4a3c      	ldr	r2, [pc, #240]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061be:	6313      	str	r3, [r2, #48]	; 0x30
 80061c0:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	2300      	movs	r3, #0
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	4b36      	ldr	r3, [pc, #216]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	4a35      	ldr	r2, [pc, #212]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061da:	6313      	str	r3, [r2, #48]	; 0x30
 80061dc:	4b33      	ldr	r3, [pc, #204]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	4b2f      	ldr	r3, [pc, #188]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	4a2e      	ldr	r2, [pc, #184]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061f2:	f043 0304 	orr.w	r3, r3, #4
 80061f6:	6313      	str	r3, [r2, #48]	; 0x30
 80061f8:	4b2c      	ldr	r3, [pc, #176]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	617b      	str	r3, [r7, #20]
 8006202:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006204:	2300      	movs	r3, #0
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	4b28      	ldr	r3, [pc, #160]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	4a27      	ldr	r2, [pc, #156]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6313      	str	r3, [r2, #48]	; 0x30
 8006214:	4b25      	ldr	r3, [pc, #148]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	4b21      	ldr	r3, [pc, #132]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	4a20      	ldr	r2, [pc, #128]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 800622a:	f043 0302 	orr.w	r3, r3, #2
 800622e:	6313      	str	r3, [r2, #48]	; 0x30
 8006230:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <HAL_ETH_MspInit+0x13c>)
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800623c:	2332      	movs	r3, #50	; 0x32
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006240:	2302      	movs	r3, #2
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006244:	2300      	movs	r3, #0
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006248:	2303      	movs	r3, #3
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800624c:	230b      	movs	r3, #11
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006254:	4619      	mov	r1, r3
 8006256:	4816      	ldr	r0, [pc, #88]	; (80062b0 <HAL_ETH_MspInit+0x140>)
 8006258:	f7fe fd20 	bl	8004c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800625c:	2386      	movs	r3, #134	; 0x86
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006260:	2302      	movs	r3, #2
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006264:	2300      	movs	r3, #0
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006268:	2303      	movs	r3, #3
 800626a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800626c:	230b      	movs	r3, #11
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006274:	4619      	mov	r1, r3
 8006276:	480f      	ldr	r0, [pc, #60]	; (80062b4 <HAL_ETH_MspInit+0x144>)
 8006278:	f7fe fd10 	bl	8004c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800627c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006282:	2302      	movs	r3, #2
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006286:	2300      	movs	r3, #0
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800628a:	2303      	movs	r3, #3
 800628c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800628e:	230b      	movs	r3, #11
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006296:	4619      	mov	r1, r3
 8006298:	4807      	ldr	r0, [pc, #28]	; (80062b8 <HAL_ETH_MspInit+0x148>)
 800629a:	f7fe fcff 	bl	8004c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800629e:	bf00      	nop
 80062a0:	3738      	adds	r7, #56	; 0x38
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40028000 	.word	0x40028000
 80062ac:	40023800 	.word	0x40023800
 80062b0:	40020800 	.word	0x40020800
 80062b4:	40020000 	.word	0x40020000
 80062b8:	40020400 	.word	0x40020400

080062bc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80062c4:	4b41      	ldr	r3, [pc, #260]	; (80063cc <low_level_init+0x110>)
 80062c6:	4a42      	ldr	r2, [pc, #264]	; (80063d0 <low_level_init+0x114>)
 80062c8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80062ca:	4b40      	ldr	r3, [pc, #256]	; (80063cc <low_level_init+0x110>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80062d0:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <low_level_init+0x110>)
 80062d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062d6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80062d8:	4b3c      	ldr	r3, [pc, #240]	; (80063cc <low_level_init+0x110>)
 80062da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062de:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 80062e0:	4b3a      	ldr	r3, [pc, #232]	; (80063cc <low_level_init+0x110>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80062e6:	2300      	movs	r3, #0
 80062e8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80062ee:	23e1      	movs	r3, #225	; 0xe1
 80062f0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80062f2:	2300      	movs	r3, #0
 80062f4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80062f6:	2300      	movs	r3, #0
 80062f8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80062fa:	2300      	movs	r3, #0
 80062fc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80062fe:	4a33      	ldr	r2, [pc, #204]	; (80063cc <low_level_init+0x110>)
 8006300:	f107 0308 	add.w	r3, r7, #8
 8006304:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006306:	4b31      	ldr	r3, [pc, #196]	; (80063cc <low_level_init+0x110>)
 8006308:	2200      	movs	r2, #0
 800630a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800630c:	4b2f      	ldr	r3, [pc, #188]	; (80063cc <low_level_init+0x110>)
 800630e:	2200      	movs	r2, #0
 8006310:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006312:	4b2e      	ldr	r3, [pc, #184]	; (80063cc <low_level_init+0x110>)
 8006314:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006318:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800631a:	482c      	ldr	r0, [pc, #176]	; (80063cc <low_level_init+0x110>)
 800631c:	f7fd fb98 	bl	8003a50 <HAL_ETH_Init>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d108      	bne.n	800633c <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006330:	f043 0304 	orr.w	r3, r3, #4
 8006334:	b2da      	uxtb	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800633c:	2304      	movs	r3, #4
 800633e:	4a25      	ldr	r2, [pc, #148]	; (80063d4 <low_level_init+0x118>)
 8006340:	4925      	ldr	r1, [pc, #148]	; (80063d8 <low_level_init+0x11c>)
 8006342:	4822      	ldr	r0, [pc, #136]	; (80063cc <low_level_init+0x110>)
 8006344:	f7fd fd20 	bl	8003d88 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006348:	2304      	movs	r3, #4
 800634a:	4a24      	ldr	r2, [pc, #144]	; (80063dc <low_level_init+0x120>)
 800634c:	4924      	ldr	r1, [pc, #144]	; (80063e0 <low_level_init+0x124>)
 800634e:	481f      	ldr	r0, [pc, #124]	; (80063cc <low_level_init+0x110>)
 8006350:	f7fd fd83 	bl	8003e5a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2206      	movs	r2, #6
 8006358:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800635c:	4b1b      	ldr	r3, [pc, #108]	; (80063cc <low_level_init+0x110>)
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	781a      	ldrb	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006368:	4b18      	ldr	r3, [pc, #96]	; (80063cc <low_level_init+0x110>)
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	785a      	ldrb	r2, [r3, #1]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006374:	4b15      	ldr	r3, [pc, #84]	; (80063cc <low_level_init+0x110>)
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	789a      	ldrb	r2, [r3, #2]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006380:	4b12      	ldr	r3, [pc, #72]	; (80063cc <low_level_init+0x110>)
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	78da      	ldrb	r2, [r3, #3]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <low_level_init+0x110>)
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	791a      	ldrb	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <low_level_init+0x110>)
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	795a      	ldrb	r2, [r3, #5]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063b2:	f043 030a 	orr.w	r3, r3, #10
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80063be:	4803      	ldr	r0, [pc, #12]	; (80063cc <low_level_init+0x110>)
 80063c0:	f7fd fff4 	bl	80043ac <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20001c54 	.word	0x20001c54
 80063d0:	40028000 	.word	0x40028000
 80063d4:	20001c9c 	.word	0x20001c9c
 80063d8:	20000384 	.word	0x20000384
 80063dc:	20000404 	.word	0x20000404
 80063e0:	20001bd4 	.word	0x20001bd4

080063e4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80063ee:	4b4b      	ldr	r3, [pc, #300]	; (800651c <low_level_output+0x138>)
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006406:	4b45      	ldr	r3, [pc, #276]	; (800651c <low_level_output+0x138>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	e05a      	b.n	80064cc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da03      	bge.n	8006426 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800641e:	23f8      	movs	r3, #248	; 0xf8
 8006420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006424:	e05c      	b.n	80064e0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	895b      	ldrh	r3, [r3, #10]
 800642a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006430:	e02f      	b.n	8006492 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	18d0      	adds	r0, r2, r3
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	18d1      	adds	r1, r2, r3
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006446:	3304      	adds	r3, #4
 8006448:	461a      	mov	r2, r3
 800644a:	f00a fab5 	bl	80109b8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da03      	bge.n	8006464 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800645c:	23f8      	movs	r3, #248	; 0xf8
 800645e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006462:	e03d      	b.n	80064e0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006474:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006480:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800648c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4413      	add	r3, r2
 8006498:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800649c:	4293      	cmp	r3, r2
 800649e:	d8c8      	bhi.n	8006432 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	18d0      	adds	r0, r2, r3
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4413      	add	r3, r2
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	4619      	mov	r1, r3
 80064b2:	f00a fa81 	bl	80109b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1a1      	bne.n	8006416 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80064d2:	6979      	ldr	r1, [r7, #20]
 80064d4:	4811      	ldr	r0, [pc, #68]	; (800651c <low_level_output+0x138>)
 80064d6:	f7fd fd2d 	bl	8003f34 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80064e0:	4b0e      	ldr	r3, [pc, #56]	; (800651c <low_level_output+0x138>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064e8:	3314      	adds	r3, #20
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00d      	beq.n	8006510 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <low_level_output+0x138>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064fc:	3314      	adds	r3, #20
 80064fe:	2220      	movs	r2, #32
 8006500:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <low_level_output+0x138>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650a:	3304      	adds	r3, #4
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006510:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006514:	4618      	mov	r0, r3
 8006516:	3728      	adds	r7, #40	; 0x28
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20001c54 	.word	0x20001c54

08006520 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800652c:	2300      	movs	r3, #0
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8006544:	484f      	ldr	r0, [pc, #316]	; (8006684 <low_level_input+0x164>)
 8006546:	f7fd fddf 	bl	8004108 <HAL_ETH_GetReceivedFrame>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <low_level_input+0x34>

    return NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	e092      	b.n	800667a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006554:	4b4b      	ldr	r3, [pc, #300]	; (8006684 <low_level_input+0x164>)
 8006556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006558:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800655a:	4b4a      	ldr	r3, [pc, #296]	; (8006684 <low_level_input+0x164>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006566:	89fb      	ldrh	r3, [r7, #14]
 8006568:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800656c:	4619      	mov	r1, r3
 800656e:	2000      	movs	r0, #0
 8006570:	f001 f936 	bl	80077e0 <pbuf_alloc>
 8006574:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d04b      	beq.n	8006614 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800657c:	4b41      	ldr	r3, [pc, #260]	; (8006684 <low_level_input+0x164>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
 800658a:	e040      	b.n	800660e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	895b      	ldrh	r3, [r3, #10]
 8006590:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006596:	e021      	b.n	80065dc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	18d0      	adds	r0, r2, r3
 80065a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	18d1      	adds	r1, r2, r3
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80065ac:	3304      	adds	r3, #4
 80065ae:	461a      	mov	r2, r3
 80065b0:	f00a fa02 	bl	80109b8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80065ca:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80065d6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d8d6      	bhi.n	8006598 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	18d0      	adds	r0, r2, r3
 80065f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	4413      	add	r3, r2
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4619      	mov	r1, r3
 80065fc:	f00a f9dc 	bl	80109b8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1bb      	bne.n	800658c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006614:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <low_level_input+0x164>)
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	e00b      	b.n	8006638 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	3301      	adds	r3, #1
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <low_level_input+0x164>)
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d3ee      	bcc.n	8006620 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006642:	4b10      	ldr	r3, [pc, #64]	; (8006684 <low_level_input+0x164>)
 8006644:	2200      	movs	r2, #0
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <low_level_input+0x164>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006650:	3314      	adds	r3, #20
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800665c:	4b09      	ldr	r3, [pc, #36]	; (8006684 <low_level_input+0x164>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006664:	3314      	adds	r3, #20
 8006666:	2280      	movs	r2, #128	; 0x80
 8006668:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <low_level_input+0x164>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006672:	3308      	adds	r3, #8
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800667a:	4618      	mov	r0, r3
 800667c:	3730      	adds	r7, #48	; 0x30
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20001c54 	.word	0x20001c54

08006688 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff ff45 	bl	8006520 <low_level_input>
 8006696:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d010      	beq.n	80066c0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	4798      	blx	r3
 80066a8:	4603      	mov	r3, r0
 80066aa:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80066ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d006      	beq.n	80066c2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f001 fb77 	bl	8007da8 <pbuf_free>
    p = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e000      	b.n	80066c2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80066c0:	bf00      	nop
  }
}
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <ethernetif_init+0x1c>
 80066d6:	4b0e      	ldr	r3, [pc, #56]	; (8006710 <ethernetif_init+0x48>)
 80066d8:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80066dc:	490d      	ldr	r1, [pc, #52]	; (8006714 <ethernetif_init+0x4c>)
 80066de:	480e      	ldr	r0, [pc, #56]	; (8006718 <ethernetif_init+0x50>)
 80066e0:	f00a fd32 	bl	8011148 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2273      	movs	r2, #115	; 0x73
 80066e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2274      	movs	r2, #116	; 0x74
 80066f0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a09      	ldr	r2, [pc, #36]	; (800671c <ethernetif_init+0x54>)
 80066f8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a08      	ldr	r2, [pc, #32]	; (8006720 <ethernetif_init+0x58>)
 80066fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff fddb 	bl	80062bc <low_level_init>

  return ERR_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	08012028 	.word	0x08012028
 8006714:	08012044 	.word	0x08012044
 8006718:	08012054 	.word	0x08012054
 800671c:	0800ebf9 	.word	0x0800ebf9
 8006720:	080063e5 	.word	0x080063e5

08006724 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006728:	f7fd f850 	bl	80037cc <HAL_GetTick>
 800672c:	4603      	mov	r3, r0
}
 800672e:	4618      	mov	r0, r3
 8006730:	bd80      	pop	{r7, pc}
	...

08006734 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d05d      	beq.n	8006812 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006756:	4b34      	ldr	r3, [pc, #208]	; (8006828 <ethernetif_update_config+0xf4>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d03f      	beq.n	80067de <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800675e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006762:	2100      	movs	r1, #0
 8006764:	4830      	ldr	r0, [pc, #192]	; (8006828 <ethernetif_update_config+0xf4>)
 8006766:	f7fd fdbb 	bl	80042e0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800676a:	f7fd f82f 	bl	80037cc <HAL_GetTick>
 800676e:	4603      	mov	r3, r0
 8006770:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006772:	f107 0308 	add.w	r3, r7, #8
 8006776:	461a      	mov	r2, r3
 8006778:	2101      	movs	r1, #1
 800677a:	482b      	ldr	r0, [pc, #172]	; (8006828 <ethernetif_update_config+0xf4>)
 800677c:	f7fd fd48 	bl	8004210 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006780:	f7fd f824 	bl	80037cc <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800678e:	d828      	bhi.n	80067e2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0eb      	beq.n	8006772 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800679a:	f107 0308 	add.w	r3, r7, #8
 800679e:	461a      	mov	r2, r3
 80067a0:	211f      	movs	r1, #31
 80067a2:	4821      	ldr	r0, [pc, #132]	; (8006828 <ethernetif_update_config+0xf4>)
 80067a4:	f7fd fd34 	bl	8004210 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80067b2:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <ethernetif_update_config+0xf4>)
 80067b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b8:	60da      	str	r2, [r3, #12]
 80067ba:	e002      	b.n	80067c2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <ethernetif_update_config+0xf4>)
 80067be:	2200      	movs	r2, #0
 80067c0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80067cc:	4b16      	ldr	r3, [pc, #88]	; (8006828 <ethernetif_update_config+0xf4>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	609a      	str	r2, [r3, #8]
 80067d2:	e016      	b.n	8006802 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <ethernetif_update_config+0xf4>)
 80067d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067da:	609a      	str	r2, [r3, #8]
 80067dc:	e011      	b.n	8006802 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <ethernetif_update_config+0xb0>
          goto error;
 80067e2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80067e4:	4b10      	ldr	r3, [pc, #64]	; (8006828 <ethernetif_update_config+0xf4>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	08db      	lsrs	r3, r3, #3
 80067ea:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80067ec:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <ethernetif_update_config+0xf4>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	085b      	lsrs	r3, r3, #1
 80067f2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80067f4:	4313      	orrs	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	2100      	movs	r1, #0
 80067fc:	480a      	ldr	r0, [pc, #40]	; (8006828 <ethernetif_update_config+0xf4>)
 80067fe:	f7fd fd6f 	bl	80042e0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006802:	2100      	movs	r1, #0
 8006804:	4808      	ldr	r0, [pc, #32]	; (8006828 <ethernetif_update_config+0xf4>)
 8006806:	f7fd fe2f 	bl	8004468 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800680a:	4807      	ldr	r0, [pc, #28]	; (8006828 <ethernetif_update_config+0xf4>)
 800680c:	f7fd fdce 	bl	80043ac <HAL_ETH_Start>
 8006810:	e002      	b.n	8006818 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006812:	4805      	ldr	r0, [pc, #20]	; (8006828 <ethernetif_update_config+0xf4>)
 8006814:	f7fd fdf9 	bl	800440a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f807 	bl	800682c <ethernetif_notify_conn_changed>
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20001c54 	.word	0x20001c54

0800682c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	b21a      	sxth	r2, r3
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	0a1b      	lsrs	r3, r3, #8
 8006854:	b29b      	uxth	r3, r3
 8006856:	b21b      	sxth	r3, r3
 8006858:	4313      	orrs	r3, r2
 800685a:	b21b      	sxth	r3, r3
 800685c:	b29b      	uxth	r3, r3
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	061a      	lsls	r2, r3, #24
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	0a1b      	lsrs	r3, r3, #8
 8006884:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	0e1b      	lsrs	r3, r3, #24
 800688e:	4313      	orrs	r3, r2
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80068a6:	f000 f8d5 	bl	8006a54 <mem_init>
  memp_init();
 80068aa:	f000 fbdb 	bl	8007064 <memp_init>
  pbuf_init();
  netif_init();
 80068ae:	f000 fc93 	bl	80071d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80068b2:	f007 f84b 	bl	800d94c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80068b6:	f001 fda7 	bl	8008408 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80068ba:	f006 ffbd 	bl	800d838 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <ptr_to_mem+0x20>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	4413      	add	r3, r2
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000100 	.word	0x20000100

080068ec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <mem_to_ptr+0x20>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	b29b      	uxth	r3, r3
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000100 	.word	0x20000100

08006910 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006910:	b590      	push	{r4, r7, lr}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006918:	4b45      	ldr	r3, [pc, #276]	; (8006a30 <plug_holes+0x120>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	429a      	cmp	r2, r3
 8006920:	d206      	bcs.n	8006930 <plug_holes+0x20>
 8006922:	4b44      	ldr	r3, [pc, #272]	; (8006a34 <plug_holes+0x124>)
 8006924:	f240 12df 	movw	r2, #479	; 0x1df
 8006928:	4943      	ldr	r1, [pc, #268]	; (8006a38 <plug_holes+0x128>)
 800692a:	4844      	ldr	r0, [pc, #272]	; (8006a3c <plug_holes+0x12c>)
 800692c:	f00a fc0c 	bl	8011148 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006930:	4b43      	ldr	r3, [pc, #268]	; (8006a40 <plug_holes+0x130>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	429a      	cmp	r2, r3
 8006938:	d306      	bcc.n	8006948 <plug_holes+0x38>
 800693a:	4b3e      	ldr	r3, [pc, #248]	; (8006a34 <plug_holes+0x124>)
 800693c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006940:	4940      	ldr	r1, [pc, #256]	; (8006a44 <plug_holes+0x134>)
 8006942:	483e      	ldr	r0, [pc, #248]	; (8006a3c <plug_holes+0x12c>)
 8006944:	f00a fc00 	bl	8011148 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	791b      	ldrb	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d006      	beq.n	800695e <plug_holes+0x4e>
 8006950:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <plug_holes+0x124>)
 8006952:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006956:	493c      	ldr	r1, [pc, #240]	; (8006a48 <plug_holes+0x138>)
 8006958:	4838      	ldr	r0, [pc, #224]	; (8006a3c <plug_holes+0x12c>)
 800695a:	f00a fbf5 	bl	8011148 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006966:	d906      	bls.n	8006976 <plug_holes+0x66>
 8006968:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <plug_holes+0x124>)
 800696a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800696e:	4937      	ldr	r1, [pc, #220]	; (8006a4c <plug_holes+0x13c>)
 8006970:	4832      	ldr	r0, [pc, #200]	; (8006a3c <plug_holes+0x12c>)
 8006972:	f00a fbe9 	bl	8011148 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff ffa4 	bl	80068c8 <ptr_to_mem>
 8006980:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d024      	beq.n	80069d4 <plug_holes+0xc4>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	791b      	ldrb	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d120      	bne.n	80069d4 <plug_holes+0xc4>
 8006992:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <plug_holes+0x130>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	429a      	cmp	r2, r3
 800699a:	d01b      	beq.n	80069d4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800699c:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <plug_holes+0x140>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d102      	bne.n	80069ac <plug_holes+0x9c>
      lfree = mem;
 80069a6:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <plug_holes+0x140>)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	881a      	ldrh	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80069bc:	d00a      	beq.n	80069d4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff ff80 	bl	80068c8 <ptr_to_mem>
 80069c8:	4604      	mov	r4, r0
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7ff ff8e 	bl	80068ec <mem_to_ptr>
 80069d0:	4603      	mov	r3, r0
 80069d2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	885b      	ldrh	r3, [r3, #2]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff75 	bl	80068c8 <ptr_to_mem>
 80069de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d01f      	beq.n	8006a28 <plug_holes+0x118>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	791b      	ldrb	r3, [r3, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d11b      	bne.n	8006a28 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80069f0:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <plug_holes+0x140>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d102      	bne.n	8006a00 <plug_holes+0xf0>
      lfree = pmem;
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <plug_holes+0x140>)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	881a      	ldrh	r2, [r3, #0]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a10:	d00a      	beq.n	8006a28 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff ff56 	bl	80068c8 <ptr_to_mem>
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	68b8      	ldr	r0, [r7, #8]
 8006a20:	f7ff ff64 	bl	80068ec <mem_to_ptr>
 8006a24:	4603      	mov	r3, r0
 8006a26:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd90      	pop	{r4, r7, pc}
 8006a30:	20000100 	.word	0x20000100
 8006a34:	0801207c 	.word	0x0801207c
 8006a38:	080120ac 	.word	0x080120ac
 8006a3c:	080120c4 	.word	0x080120c4
 8006a40:	20000104 	.word	0x20000104
 8006a44:	080120ec 	.word	0x080120ec
 8006a48:	08012108 	.word	0x08012108
 8006a4c:	08012124 	.word	0x08012124
 8006a50:	20000108 	.word	0x20000108

08006a54 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006a5a:	4b18      	ldr	r3, [pc, #96]	; (8006abc <mem_init+0x68>)
 8006a5c:	3303      	adds	r3, #3
 8006a5e:	f023 0303 	bic.w	r3, r3, #3
 8006a62:	461a      	mov	r2, r3
 8006a64:	4b16      	ldr	r3, [pc, #88]	; (8006ac0 <mem_init+0x6c>)
 8006a66:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <mem_init+0x6c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006a74:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006a82:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8006a86:	f7ff ff1f 	bl	80068c8 <ptr_to_mem>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4a0d      	ldr	r2, [pc, #52]	; (8006ac4 <mem_init+0x70>)
 8006a8e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <mem_init+0x70>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2201      	movs	r2, #1
 8006a96:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <mem_init+0x70>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006aa0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006aa2:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <mem_init+0x70>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006aaa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <mem_init+0x6c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a05      	ldr	r2, [pc, #20]	; (8006ac8 <mem_init+0x74>)
 8006ab2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20003484 	.word	0x20003484
 8006ac0:	20000100 	.word	0x20000100
 8006ac4:	20000104 	.word	0x20000104
 8006ac8:	20000108 	.word	0x20000108

08006acc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff ff09 	bl	80068ec <mem_to_ptr>
 8006ada:	4603      	mov	r3, r0
 8006adc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff fef0 	bl	80068c8 <ptr_to_mem>
 8006ae8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	885b      	ldrh	r3, [r3, #2]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff feea 	bl	80068c8 <ptr_to_mem>
 8006af4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006afe:	d818      	bhi.n	8006b32 <mem_link_valid+0x66>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	885b      	ldrh	r3, [r3, #2]
 8006b04:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006b08:	d813      	bhi.n	8006b32 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b0e:	8afa      	ldrh	r2, [r7, #22]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d004      	beq.n	8006b1e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	8afa      	ldrh	r2, [r7, #22]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d109      	bne.n	8006b32 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006b1e:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <mem_link_valid+0x74>)
 8006b20:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d006      	beq.n	8006b36 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	885b      	ldrh	r3, [r3, #2]
 8006b2c:	8afa      	ldrh	r2, [r7, #22]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d001      	beq.n	8006b36 <mem_link_valid+0x6a>
    return 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <mem_link_valid+0x6c>
  }
  return 1;
 8006b36:	2301      	movs	r3, #1
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3718      	adds	r7, #24
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20000104 	.word	0x20000104

08006b44 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d04c      	beq.n	8006bec <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006b5c:	4b25      	ldr	r3, [pc, #148]	; (8006bf4 <mem_free+0xb0>)
 8006b5e:	f240 2273 	movw	r2, #627	; 0x273
 8006b62:	4925      	ldr	r1, [pc, #148]	; (8006bf8 <mem_free+0xb4>)
 8006b64:	4825      	ldr	r0, [pc, #148]	; (8006bfc <mem_free+0xb8>)
 8006b66:	f00a faef 	bl	8011148 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006b6a:	e040      	b.n	8006bee <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3b08      	subs	r3, #8
 8006b70:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006b72:	4b23      	ldr	r3, [pc, #140]	; (8006c00 <mem_free+0xbc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d306      	bcc.n	8006b8a <mem_free+0x46>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f103 020c 	add.w	r2, r3, #12
 8006b82:	4b20      	ldr	r3, [pc, #128]	; (8006c04 <mem_free+0xc0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d907      	bls.n	8006b9a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006b8a:	4b1a      	ldr	r3, [pc, #104]	; (8006bf4 <mem_free+0xb0>)
 8006b8c:	f240 227f 	movw	r2, #639	; 0x27f
 8006b90:	491d      	ldr	r1, [pc, #116]	; (8006c08 <mem_free+0xc4>)
 8006b92:	481a      	ldr	r0, [pc, #104]	; (8006bfc <mem_free+0xb8>)
 8006b94:	f00a fad8 	bl	8011148 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006b98:	e029      	b.n	8006bee <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	791b      	ldrb	r3, [r3, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d107      	bne.n	8006bb2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006ba2:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <mem_free+0xb0>)
 8006ba4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006ba8:	4918      	ldr	r1, [pc, #96]	; (8006c0c <mem_free+0xc8>)
 8006baa:	4814      	ldr	r0, [pc, #80]	; (8006bfc <mem_free+0xb8>)
 8006bac:	f00a facc 	bl	8011148 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006bb0:	e01d      	b.n	8006bee <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff ff8a 	bl	8006acc <mem_link_valid>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006bbe:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <mem_free+0xb0>)
 8006bc0:	f240 2295 	movw	r2, #661	; 0x295
 8006bc4:	4912      	ldr	r1, [pc, #72]	; (8006c10 <mem_free+0xcc>)
 8006bc6:	480d      	ldr	r0, [pc, #52]	; (8006bfc <mem_free+0xb8>)
 8006bc8:	f00a fabe 	bl	8011148 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006bcc:	e00f      	b.n	8006bee <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006bd4:	4b0f      	ldr	r3, [pc, #60]	; (8006c14 <mem_free+0xd0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d202      	bcs.n	8006be4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006bde:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <mem_free+0xd0>)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fe93 	bl	8006910 <plug_holes>
 8006bea:	e000      	b.n	8006bee <mem_free+0xaa>
    return;
 8006bec:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	0801207c 	.word	0x0801207c
 8006bf8:	08012150 	.word	0x08012150
 8006bfc:	080120c4 	.word	0x080120c4
 8006c00:	20000100 	.word	0x20000100
 8006c04:	20000104 	.word	0x20000104
 8006c08:	08012174 	.word	0x08012174
 8006c0c:	08012190 	.word	0x08012190
 8006c10:	080121b8 	.word	0x080121b8
 8006c14:	20000108 	.word	0x20000108

08006c18 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006c24:	887b      	ldrh	r3, [r7, #2]
 8006c26:	3303      	adds	r3, #3
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006c30:	8bfb      	ldrh	r3, [r7, #30]
 8006c32:	2b0b      	cmp	r3, #11
 8006c34:	d801      	bhi.n	8006c3a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006c36:	230c      	movs	r3, #12
 8006c38:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006c3a:	8bfb      	ldrh	r3, [r7, #30]
 8006c3c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006c40:	d803      	bhi.n	8006c4a <mem_trim+0x32>
 8006c42:	8bfa      	ldrh	r2, [r7, #30]
 8006c44:	887b      	ldrh	r3, [r7, #2]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d201      	bcs.n	8006c4e <mem_trim+0x36>
    return NULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e0cc      	b.n	8006de8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006c4e:	4b68      	ldr	r3, [pc, #416]	; (8006df0 <mem_trim+0x1d8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d304      	bcc.n	8006c62 <mem_trim+0x4a>
 8006c58:	4b66      	ldr	r3, [pc, #408]	; (8006df4 <mem_trim+0x1dc>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d306      	bcc.n	8006c70 <mem_trim+0x58>
 8006c62:	4b65      	ldr	r3, [pc, #404]	; (8006df8 <mem_trim+0x1e0>)
 8006c64:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006c68:	4964      	ldr	r1, [pc, #400]	; (8006dfc <mem_trim+0x1e4>)
 8006c6a:	4865      	ldr	r0, [pc, #404]	; (8006e00 <mem_trim+0x1e8>)
 8006c6c:	f00a fa6c 	bl	8011148 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006c70:	4b5f      	ldr	r3, [pc, #380]	; (8006df0 <mem_trim+0x1d8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d304      	bcc.n	8006c84 <mem_trim+0x6c>
 8006c7a:	4b5e      	ldr	r3, [pc, #376]	; (8006df4 <mem_trim+0x1dc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d301      	bcc.n	8006c88 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	e0af      	b.n	8006de8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3b08      	subs	r3, #8
 8006c8c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006c8e:	69b8      	ldr	r0, [r7, #24]
 8006c90:	f7ff fe2c 	bl	80068ec <mem_to_ptr>
 8006c94:	4603      	mov	r3, r0
 8006c96:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	881a      	ldrh	r2, [r3, #0]
 8006c9c:	8afb      	ldrh	r3, [r7, #22]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b08      	subs	r3, #8
 8006ca4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006ca6:	8bfa      	ldrh	r2, [r7, #30]
 8006ca8:	8abb      	ldrh	r3, [r7, #20]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d906      	bls.n	8006cbc <mem_trim+0xa4>
 8006cae:	4b52      	ldr	r3, [pc, #328]	; (8006df8 <mem_trim+0x1e0>)
 8006cb0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006cb4:	4953      	ldr	r1, [pc, #332]	; (8006e04 <mem_trim+0x1ec>)
 8006cb6:	4852      	ldr	r0, [pc, #328]	; (8006e00 <mem_trim+0x1e8>)
 8006cb8:	f00a fa46 	bl	8011148 <iprintf>
  if (newsize > size) {
 8006cbc:	8bfa      	ldrh	r2, [r7, #30]
 8006cbe:	8abb      	ldrh	r3, [r7, #20]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d901      	bls.n	8006cc8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e08f      	b.n	8006de8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006cc8:	8bfa      	ldrh	r2, [r7, #30]
 8006cca:	8abb      	ldrh	r3, [r7, #20]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d101      	bne.n	8006cd4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	e089      	b.n	8006de8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fdf5 	bl	80068c8 <ptr_to_mem>
 8006cde:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	791b      	ldrb	r3, [r3, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d13f      	bne.n	8006d68 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006cf0:	d106      	bne.n	8006d00 <mem_trim+0xe8>
 8006cf2:	4b41      	ldr	r3, [pc, #260]	; (8006df8 <mem_trim+0x1e0>)
 8006cf4:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006cf8:	4943      	ldr	r1, [pc, #268]	; (8006e08 <mem_trim+0x1f0>)
 8006cfa:	4841      	ldr	r0, [pc, #260]	; (8006e00 <mem_trim+0x1e8>)
 8006cfc:	f00a fa24 	bl	8011148 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d06:	8afa      	ldrh	r2, [r7, #22]
 8006d08:	8bfb      	ldrh	r3, [r7, #30]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3308      	adds	r3, #8
 8006d10:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006d12:	4b3e      	ldr	r3, [pc, #248]	; (8006e0c <mem_trim+0x1f4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d106      	bne.n	8006d2a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006d1c:	89fb      	ldrh	r3, [r7, #14]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fdd2 	bl	80068c8 <ptr_to_mem>
 8006d24:	4603      	mov	r3, r0
 8006d26:	4a39      	ldr	r2, [pc, #228]	; (8006e0c <mem_trim+0x1f4>)
 8006d28:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006d2a:	89fb      	ldrh	r3, [r7, #14]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fdcb 	bl	80068c8 <ptr_to_mem>
 8006d32:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2200      	movs	r2, #0
 8006d38:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	89ba      	ldrh	r2, [r7, #12]
 8006d3e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	8afa      	ldrh	r2, [r7, #22]
 8006d44:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	89fa      	ldrh	r2, [r7, #14]
 8006d4a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006d54:	d047      	beq.n	8006de6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fdb4 	bl	80068c8 <ptr_to_mem>
 8006d60:	4602      	mov	r2, r0
 8006d62:	89fb      	ldrh	r3, [r7, #14]
 8006d64:	8053      	strh	r3, [r2, #2]
 8006d66:	e03e      	b.n	8006de6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006d68:	8bfb      	ldrh	r3, [r7, #30]
 8006d6a:	f103 0214 	add.w	r2, r3, #20
 8006d6e:	8abb      	ldrh	r3, [r7, #20]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d838      	bhi.n	8006de6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d74:	8afa      	ldrh	r2, [r7, #22]
 8006d76:	8bfb      	ldrh	r3, [r7, #30]
 8006d78:	4413      	add	r3, r2
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006d88:	d106      	bne.n	8006d98 <mem_trim+0x180>
 8006d8a:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <mem_trim+0x1e0>)
 8006d8c:	f240 3216 	movw	r2, #790	; 0x316
 8006d90:	491d      	ldr	r1, [pc, #116]	; (8006e08 <mem_trim+0x1f0>)
 8006d92:	481b      	ldr	r0, [pc, #108]	; (8006e00 <mem_trim+0x1e8>)
 8006d94:	f00a f9d8 	bl	8011148 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006d98:	89fb      	ldrh	r3, [r7, #14]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fd94 	bl	80068c8 <ptr_to_mem>
 8006da0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006da2:	4b1a      	ldr	r3, [pc, #104]	; (8006e0c <mem_trim+0x1f4>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d202      	bcs.n	8006db2 <mem_trim+0x19a>
      lfree = mem2;
 8006dac:	4a17      	ldr	r2, [pc, #92]	; (8006e0c <mem_trim+0x1f4>)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2200      	movs	r2, #0
 8006db6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	881a      	ldrh	r2, [r3, #0]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	8afa      	ldrh	r2, [r7, #22]
 8006dc4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	89fa      	ldrh	r2, [r7, #14]
 8006dca:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006dd4:	d007      	beq.n	8006de6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fd74 	bl	80068c8 <ptr_to_mem>
 8006de0:	4602      	mov	r2, r0
 8006de2:	89fb      	ldrh	r3, [r7, #14]
 8006de4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006de6:	687b      	ldr	r3, [r7, #4]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20000100 	.word	0x20000100
 8006df4:	20000104 	.word	0x20000104
 8006df8:	0801207c 	.word	0x0801207c
 8006dfc:	080121ec 	.word	0x080121ec
 8006e00:	080120c4 	.word	0x080120c4
 8006e04:	08012204 	.word	0x08012204
 8006e08:	08012224 	.word	0x08012224
 8006e0c:	20000108 	.word	0x20000108

08006e10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <mem_malloc+0x14>
    return NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	e0d9      	b.n	8006fd8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	3303      	adds	r3, #3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006e30:	8bbb      	ldrh	r3, [r7, #28]
 8006e32:	2b0b      	cmp	r3, #11
 8006e34:	d801      	bhi.n	8006e3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006e36:	230c      	movs	r3, #12
 8006e38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006e3a:	8bbb      	ldrh	r3, [r7, #28]
 8006e3c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006e40:	d803      	bhi.n	8006e4a <mem_malloc+0x3a>
 8006e42:	8bba      	ldrh	r2, [r7, #28]
 8006e44:	88fb      	ldrh	r3, [r7, #6]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d201      	bcs.n	8006e4e <mem_malloc+0x3e>
    return NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e0c4      	b.n	8006fd8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e4e:	4b64      	ldr	r3, [pc, #400]	; (8006fe0 <mem_malloc+0x1d0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fd4a 	bl	80068ec <mem_to_ptr>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	83fb      	strh	r3, [r7, #30]
 8006e5c:	e0b4      	b.n	8006fc8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006e5e:	8bfb      	ldrh	r3, [r7, #30]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff fd31 	bl	80068c8 <ptr_to_mem>
 8006e66:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	791b      	ldrb	r3, [r3, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f040 80a4 	bne.w	8006fba <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	8bfb      	ldrh	r3, [r7, #30]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	f1a3 0208 	sub.w	r2, r3, #8
 8006e80:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006e82:	429a      	cmp	r2, r3
 8006e84:	f0c0 8099 	bcc.w	8006fba <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	8bfb      	ldrh	r3, [r7, #30]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f1a3 0208 	sub.w	r2, r3, #8
 8006e96:	8bbb      	ldrh	r3, [r7, #28]
 8006e98:	3314      	adds	r3, #20
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d333      	bcc.n	8006f06 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006e9e:	8bfa      	ldrh	r2, [r7, #30]
 8006ea0:	8bbb      	ldrh	r3, [r7, #28]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006eaa:	8a7b      	ldrh	r3, [r7, #18]
 8006eac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006eb0:	d106      	bne.n	8006ec0 <mem_malloc+0xb0>
 8006eb2:	4b4c      	ldr	r3, [pc, #304]	; (8006fe4 <mem_malloc+0x1d4>)
 8006eb4:	f240 3287 	movw	r2, #903	; 0x387
 8006eb8:	494b      	ldr	r1, [pc, #300]	; (8006fe8 <mem_malloc+0x1d8>)
 8006eba:	484c      	ldr	r0, [pc, #304]	; (8006fec <mem_malloc+0x1dc>)
 8006ebc:	f00a f944 	bl	8011148 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006ec0:	8a7b      	ldrh	r3, [r7, #18]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fd00 	bl	80068c8 <ptr_to_mem>
 8006ec8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	881a      	ldrh	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8bfa      	ldrh	r2, [r7, #30]
 8006edc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	8a7a      	ldrh	r2, [r7, #18]
 8006ee2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006ef2:	d00b      	beq.n	8006f0c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fce5 	bl	80068c8 <ptr_to_mem>
 8006efe:	4602      	mov	r2, r0
 8006f00:	8a7b      	ldrh	r3, [r7, #18]
 8006f02:	8053      	strh	r3, [r2, #2]
 8006f04:	e002      	b.n	8006f0c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006f0c:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <mem_malloc+0x1d0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d127      	bne.n	8006f66 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006f16:	4b32      	ldr	r3, [pc, #200]	; (8006fe0 <mem_malloc+0x1d0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006f1c:	e005      	b.n	8006f2a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fcd0 	bl	80068c8 <ptr_to_mem>
 8006f28:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	791b      	ldrb	r3, [r3, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <mem_malloc+0x12c>
 8006f32:	4b2f      	ldr	r3, [pc, #188]	; (8006ff0 <mem_malloc+0x1e0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d1f0      	bne.n	8006f1e <mem_malloc+0x10e>
          }
          lfree = cur;
 8006f3c:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <mem_malloc+0x1d0>)
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006f42:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <mem_malloc+0x1d0>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <mem_malloc+0x1e0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d00b      	beq.n	8006f66 <mem_malloc+0x156>
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <mem_malloc+0x1d0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	791b      	ldrb	r3, [r3, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d006      	beq.n	8006f66 <mem_malloc+0x156>
 8006f58:	4b22      	ldr	r3, [pc, #136]	; (8006fe4 <mem_malloc+0x1d4>)
 8006f5a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006f5e:	4925      	ldr	r1, [pc, #148]	; (8006ff4 <mem_malloc+0x1e4>)
 8006f60:	4822      	ldr	r0, [pc, #136]	; (8006fec <mem_malloc+0x1dc>)
 8006f62:	f00a f8f1 	bl	8011148 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006f66:	8bba      	ldrh	r2, [r7, #28]
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <mem_malloc+0x1e0>)
 8006f70:	6812      	ldr	r2, [r2, #0]
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d906      	bls.n	8006f84 <mem_malloc+0x174>
 8006f76:	4b1b      	ldr	r3, [pc, #108]	; (8006fe4 <mem_malloc+0x1d4>)
 8006f78:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006f7c:	491e      	ldr	r1, [pc, #120]	; (8006ff8 <mem_malloc+0x1e8>)
 8006f7e:	481b      	ldr	r0, [pc, #108]	; (8006fec <mem_malloc+0x1dc>)
 8006f80:	f00a f8e2 	bl	8011148 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d006      	beq.n	8006f9c <mem_malloc+0x18c>
 8006f8e:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <mem_malloc+0x1d4>)
 8006f90:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006f94:	4919      	ldr	r1, [pc, #100]	; (8006ffc <mem_malloc+0x1ec>)
 8006f96:	4815      	ldr	r0, [pc, #84]	; (8006fec <mem_malloc+0x1dc>)
 8006f98:	f00a f8d6 	bl	8011148 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <mem_malloc+0x1a4>
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <mem_malloc+0x1d4>)
 8006fa8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006fac:	4914      	ldr	r1, [pc, #80]	; (8007000 <mem_malloc+0x1f0>)
 8006fae:	480f      	ldr	r0, [pc, #60]	; (8006fec <mem_malloc+0x1dc>)
 8006fb0:	f00a f8ca 	bl	8011148 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	e00e      	b.n	8006fd8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006fba:	8bfb      	ldrh	r3, [r7, #30]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff fc83 	bl	80068c8 <ptr_to_mem>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006fc8:	8bfa      	ldrh	r2, [r7, #30]
 8006fca:	8bbb      	ldrh	r3, [r7, #28]
 8006fcc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	f4ff af44 	bcc.w	8006e5e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3720      	adds	r7, #32
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000108 	.word	0x20000108
 8006fe4:	0801207c 	.word	0x0801207c
 8006fe8:	08012224 	.word	0x08012224
 8006fec:	080120c4 	.word	0x080120c4
 8006ff0:	20000104 	.word	0x20000104
 8006ff4:	08012238 	.word	0x08012238
 8006ff8:	08012254 	.word	0x08012254
 8006ffc:	08012284 	.word	0x08012284
 8007000:	080122b4 	.word	0x080122b4

08007004 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	3303      	adds	r3, #3
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	e011      	b.n	800704a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4413      	add	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	885b      	ldrh	r3, [r3, #2]
 800704e:	461a      	mov	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4293      	cmp	r3, r2
 8007054:	dbe7      	blt.n	8007026 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800706a:	2300      	movs	r3, #0
 800706c:	80fb      	strh	r3, [r7, #6]
 800706e:	e009      	b.n	8007084 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	4a08      	ldr	r2, [pc, #32]	; (8007094 <memp_init+0x30>)
 8007074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff ffc3 	bl	8007004 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	3301      	adds	r3, #1
 8007082:	80fb      	strh	r3, [r7, #6]
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	2b08      	cmp	r3, #8
 8007088:	d9f2      	bls.n	8007070 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	08014a9c 	.word	0x08014a9c

08007098 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d012      	beq.n	80070d4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <do_memp_malloc_pool+0x38>
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <do_memp_malloc_pool+0x48>)
 80070c4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80070c8:	4906      	ldr	r1, [pc, #24]	; (80070e4 <do_memp_malloc_pool+0x4c>)
 80070ca:	4807      	ldr	r0, [pc, #28]	; (80070e8 <do_memp_malloc_pool+0x50>)
 80070cc:	f00a f83c 	bl	8011148 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	e000      	b.n	80070d6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	080122d8 	.word	0x080122d8
 80070e4:	08012308 	.word	0x08012308
 80070e8:	0801232c 	.word	0x0801232c

080070ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d908      	bls.n	800710e <memp_malloc+0x22>
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <memp_malloc+0x3c>)
 80070fe:	f240 1257 	movw	r2, #343	; 0x157
 8007102:	490a      	ldr	r1, [pc, #40]	; (800712c <memp_malloc+0x40>)
 8007104:	480a      	ldr	r0, [pc, #40]	; (8007130 <memp_malloc+0x44>)
 8007106:	f00a f81f 	bl	8011148 <iprintf>
 800710a:	2300      	movs	r3, #0
 800710c:	e008      	b.n	8007120 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	4a08      	ldr	r2, [pc, #32]	; (8007134 <memp_malloc+0x48>)
 8007112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff ffbe 	bl	8007098 <do_memp_malloc_pool>
 800711c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800711e:	68fb      	ldr	r3, [r7, #12]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	080122d8 	.word	0x080122d8
 800712c:	08012368 	.word	0x08012368
 8007130:	0801232c 	.word	0x0801232c
 8007134:	08014a9c 	.word	0x08014a9c

08007138 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d006      	beq.n	800715a <do_memp_free_pool+0x22>
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <do_memp_free_pool+0x40>)
 800714e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007152:	490a      	ldr	r1, [pc, #40]	; (800717c <do_memp_free_pool+0x44>)
 8007154:	480a      	ldr	r0, [pc, #40]	; (8007180 <do_memp_free_pool+0x48>)
 8007156:	f009 fff7 	bl	8011148 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	080122d8 	.word	0x080122d8
 800717c:	08012388 	.word	0x08012388
 8007180:	0801232c 	.word	0x0801232c

08007184 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b08      	cmp	r3, #8
 8007194:	d907      	bls.n	80071a6 <memp_free+0x22>
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <memp_free+0x44>)
 8007198:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800719c:	490b      	ldr	r1, [pc, #44]	; (80071cc <memp_free+0x48>)
 800719e:	480c      	ldr	r0, [pc, #48]	; (80071d0 <memp_free+0x4c>)
 80071a0:	f009 ffd2 	bl	8011148 <iprintf>
 80071a4:	e00c      	b.n	80071c0 <memp_free+0x3c>

  if (mem == NULL) {
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <memp_free+0x50>)
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff ffbe 	bl	8007138 <do_memp_free_pool>
 80071bc:	e000      	b.n	80071c0 <memp_free+0x3c>
    return;
 80071be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	080122d8 	.word	0x080122d8
 80071cc:	080123a8 	.word	0x080123a8
 80071d0:	0801232c 	.word	0x0801232c
 80071d4:	08014a9c 	.word	0x08014a9c

080071d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80071d8:	b480      	push	{r7}
 80071da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80071dc:	bf00      	nop
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d108      	bne.n	800720e <netif_add+0x26>
 80071fc:	4b57      	ldr	r3, [pc, #348]	; (800735c <netif_add+0x174>)
 80071fe:	f240 1227 	movw	r2, #295	; 0x127
 8007202:	4957      	ldr	r1, [pc, #348]	; (8007360 <netif_add+0x178>)
 8007204:	4857      	ldr	r0, [pc, #348]	; (8007364 <netif_add+0x17c>)
 8007206:	f009 ff9f 	bl	8011148 <iprintf>
 800720a:	2300      	movs	r3, #0
 800720c:	e0a2      	b.n	8007354 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <netif_add+0x3e>
 8007214:	4b51      	ldr	r3, [pc, #324]	; (800735c <netif_add+0x174>)
 8007216:	f44f 7294 	mov.w	r2, #296	; 0x128
 800721a:	4953      	ldr	r1, [pc, #332]	; (8007368 <netif_add+0x180>)
 800721c:	4851      	ldr	r0, [pc, #324]	; (8007364 <netif_add+0x17c>)
 800721e:	f009 ff93 	bl	8011148 <iprintf>
 8007222:	2300      	movs	r3, #0
 8007224:	e096      	b.n	8007354 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800722c:	4b4f      	ldr	r3, [pc, #316]	; (800736c <netif_add+0x184>)
 800722e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007236:	4b4d      	ldr	r3, [pc, #308]	; (800736c <netif_add+0x184>)
 8007238:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007240:	4b4a      	ldr	r3, [pc, #296]	; (800736c <netif_add+0x184>)
 8007242:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4a45      	ldr	r2, [pc, #276]	; (8007370 <netif_add+0x188>)
 800725a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a3a      	ldr	r2, [r7, #32]
 8007274:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8007276:	4b3f      	ldr	r3, [pc, #252]	; (8007374 <netif_add+0x18c>)
 8007278:	781a      	ldrb	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007284:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f913 	bl	80074b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	4798      	blx	r3
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <netif_add+0xba>
    return NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	e058      	b.n	8007354 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072a8:	2bff      	cmp	r3, #255	; 0xff
 80072aa:	d103      	bne.n	80072b4 <netif_add+0xcc>
        netif->num = 0;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80072b8:	4b2f      	ldr	r3, [pc, #188]	; (8007378 <netif_add+0x190>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	e02b      	b.n	8007318 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d106      	bne.n	80072d6 <netif_add+0xee>
 80072c8:	4b24      	ldr	r3, [pc, #144]	; (800735c <netif_add+0x174>)
 80072ca:	f240 128b 	movw	r2, #395	; 0x18b
 80072ce:	492b      	ldr	r1, [pc, #172]	; (800737c <netif_add+0x194>)
 80072d0:	4824      	ldr	r0, [pc, #144]	; (8007364 <netif_add+0x17c>)
 80072d2:	f009 ff39 	bl	8011148 <iprintf>
        num_netifs++;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	3301      	adds	r3, #1
 80072da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2bff      	cmp	r3, #255	; 0xff
 80072e0:	dd06      	ble.n	80072f0 <netif_add+0x108>
 80072e2:	4b1e      	ldr	r3, [pc, #120]	; (800735c <netif_add+0x174>)
 80072e4:	f240 128d 	movw	r2, #397	; 0x18d
 80072e8:	4925      	ldr	r1, [pc, #148]	; (8007380 <netif_add+0x198>)
 80072ea:	481e      	ldr	r0, [pc, #120]	; (8007364 <netif_add+0x17c>)
 80072ec:	f009 ff2c 	bl	8011148 <iprintf>
        if (netif2->num == netif->num) {
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d108      	bne.n	8007312 <netif_add+0x12a>
          netif->num++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007306:	3301      	adds	r3, #1
 8007308:	b2da      	uxtb	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8007310:	e005      	b.n	800731e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1d0      	bne.n	80072c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1be      	bne.n	80072a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800732a:	2bfe      	cmp	r3, #254	; 0xfe
 800732c:	d103      	bne.n	8007336 <netif_add+0x14e>
    netif_num = 0;
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <netif_add+0x18c>)
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	e006      	b.n	8007344 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800733c:	3301      	adds	r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <netif_add+0x18c>)
 8007342:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007344:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <netif_add+0x190>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800734c:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <netif_add+0x190>)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007352:	68fb      	ldr	r3, [r7, #12]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	080123c4 	.word	0x080123c4
 8007360:	08012458 	.word	0x08012458
 8007364:	08012414 	.word	0x08012414
 8007368:	08012474 	.word	0x08012474
 800736c:	08014b00 	.word	0x08014b00
 8007370:	080076cb 	.word	0x080076cb
 8007374:	20000130 	.word	0x20000130
 8007378:	20008b60 	.word	0x20008b60
 800737c:	08012498 	.word	0x08012498
 8007380:	080124ac 	.word	0x080124ac

08007384 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 fb81 	bl	8009a98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f006 ffb1 	bl	800e300 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <netif_do_set_ipaddr+0x20>
 80073ba:	4b1d      	ldr	r3, [pc, #116]	; (8007430 <netif_do_set_ipaddr+0x88>)
 80073bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80073c0:	491c      	ldr	r1, [pc, #112]	; (8007434 <netif_do_set_ipaddr+0x8c>)
 80073c2:	481d      	ldr	r0, [pc, #116]	; (8007438 <netif_do_set_ipaddr+0x90>)
 80073c4:	f009 fec0 	bl	8011148 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <netif_do_set_ipaddr+0x34>
 80073ce:	4b18      	ldr	r3, [pc, #96]	; (8007430 <netif_do_set_ipaddr+0x88>)
 80073d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80073d4:	4917      	ldr	r1, [pc, #92]	; (8007434 <netif_do_set_ipaddr+0x8c>)
 80073d6:	4818      	ldr	r0, [pc, #96]	; (8007438 <netif_do_set_ipaddr+0x90>)
 80073d8:	f009 feb6 	bl	8011148 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3304      	adds	r3, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d01c      	beq.n	8007424 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3304      	adds	r3, #4
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80073fa:	f107 0314 	add.w	r3, r7, #20
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7ff ffbf 	bl	8007384 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <netif_do_set_ipaddr+0x6a>
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	e000      	b.n	8007414 <netif_do_set_ipaddr+0x6c>
 8007412:	2300      	movs	r3, #0
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007418:	2101      	movs	r1, #1
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f8d2 	bl	80075c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	080123c4 	.word	0x080123c4
 8007434:	080124dc 	.word	0x080124dc
 8007438:	08012414 	.word	0x08012414

0800743c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3308      	adds	r3, #8
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d00a      	beq.n	800746c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <netif_do_set_netmask+0x26>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	e000      	b.n	8007464 <netif_do_set_netmask+0x28>
 8007462:	2300      	movs	r3, #0
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	330c      	adds	r3, #12
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d00a      	beq.n	80074aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <netif_do_set_gw+0x26>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	e000      	b.n	80074a2 <netif_do_set_gw+0x28>
 80074a0:	2300      	movs	r3, #0
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80074d4:	4b1c      	ldr	r3, [pc, #112]	; (8007548 <netif_set_addr+0x90>)
 80074d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80074de:	4b1a      	ldr	r3, [pc, #104]	; (8007548 <netif_set_addr+0x90>)
 80074e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80074e8:	4b17      	ldr	r3, [pc, #92]	; (8007548 <netif_set_addr+0x90>)
 80074ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <netif_set_addr+0x42>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <netif_set_addr+0x46>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <netif_set_addr+0x48>
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d006      	beq.n	8007516 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007508:	f107 0310 	add.w	r3, r7, #16
 800750c:	461a      	mov	r2, r3
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7ff ff49 	bl	80073a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007516:	69fa      	ldr	r2, [r7, #28]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff ff8e 	bl	800743c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff ffa8 	bl	800747a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d106      	bne.n	800753e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007530:	f107 0310 	add.w	r3, r7, #16
 8007534:	461a      	mov	r2, r3
 8007536:	68b9      	ldr	r1, [r7, #8]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f7ff ff35 	bl	80073a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800753e:	bf00      	nop
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	08014b00 	.word	0x08014b00

0800754c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007554:	4a04      	ldr	r2, [pc, #16]	; (8007568 <netif_set_default+0x1c>)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20008b64 	.word	0x20008b64

0800756c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d107      	bne.n	800758a <netif_set_up+0x1e>
 800757a:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <netif_set_up+0x4c>)
 800757c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007580:	490e      	ldr	r1, [pc, #56]	; (80075bc <netif_set_up+0x50>)
 8007582:	480f      	ldr	r0, [pc, #60]	; (80075c0 <netif_set_up+0x54>)
 8007584:	f009 fde0 	bl	8011148 <iprintf>
 8007588:	e013      	b.n	80075b2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10c      	bne.n	80075b2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80075aa:	2103      	movs	r1, #3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f809 	bl	80075c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	080123c4 	.word	0x080123c4
 80075bc:	0801254c 	.word	0x0801254c
 80075c0:	08012414 	.word	0x08012414

080075c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <netif_issue_reports+0x20>
 80075d6:	4b18      	ldr	r3, [pc, #96]	; (8007638 <netif_issue_reports+0x74>)
 80075d8:	f240 326d 	movw	r2, #877	; 0x36d
 80075dc:	4917      	ldr	r1, [pc, #92]	; (800763c <netif_issue_reports+0x78>)
 80075de:	4818      	ldr	r0, [pc, #96]	; (8007640 <netif_issue_reports+0x7c>)
 80075e0:	f009 fdb2 	bl	8011148 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01e      	beq.n	8007630 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d017      	beq.n	8007630 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d013      	beq.n	8007632 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3304      	adds	r3, #4
 800760e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00e      	beq.n	8007632 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800761a:	f003 0308 	and.w	r3, r3, #8
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f007 fdd3 	bl	800f1d4 <etharp_request>
 800762e:	e000      	b.n	8007632 <netif_issue_reports+0x6e>
    return;
 8007630:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	080123c4 	.word	0x080123c4
 800763c:	08012568 	.word	0x08012568
 8007640:	08012414 	.word	0x08012414

08007644 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d107      	bne.n	8007662 <netif_set_down+0x1e>
 8007652:	4b12      	ldr	r3, [pc, #72]	; (800769c <netif_set_down+0x58>)
 8007654:	f240 329b 	movw	r2, #923	; 0x39b
 8007658:	4911      	ldr	r1, [pc, #68]	; (80076a0 <netif_set_down+0x5c>)
 800765a:	4812      	ldr	r0, [pc, #72]	; (80076a4 <netif_set_down+0x60>)
 800765c:	f009 fd74 	bl	8011148 <iprintf>
 8007660:	e019      	b.n	8007696 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d012      	beq.n	8007696 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007676:	f023 0301 	bic.w	r3, r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007688:	f003 0308 	and.w	r3, r3, #8
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f007 f95d 	bl	800e950 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	080123c4 	.word	0x080123c4
 80076a0:	0801258c 	.word	0x0801258c
 80076a4:	08012414 	.word	0x08012414

080076a8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	61da      	str	r2, [r3, #28]
  }
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80076d6:	f06f 030b 	mvn.w	r3, #11
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
	...

080076e8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d013      	beq.n	8007720 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <netif_get_by_index+0x48>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e00c      	b.n	800771a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007706:	3301      	adds	r3, #1
 8007708:	b2db      	uxtb	r3, r3
 800770a:	79fa      	ldrb	r2, [r7, #7]
 800770c:	429a      	cmp	r2, r3
 800770e:	d101      	bne.n	8007714 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	e006      	b.n	8007722 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1ef      	bne.n	8007700 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20008b60 	.word	0x20008b60

08007734 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800773a:	4b0c      	ldr	r3, [pc, #48]	; (800776c <pbuf_free_ooseq+0x38>)
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <pbuf_free_ooseq+0x3c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e00a      	b.n	800775e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f002 f9df 	bl	8009b14 <tcp_free_ooseq>
      return;
 8007756:	e005      	b.n	8007764 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1f1      	bne.n	8007748 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20008b68 	.word	0x20008b68
 8007770:	20008b70 	.word	0x20008b70

08007774 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007778:	4b03      	ldr	r3, [pc, #12]	; (8007788 <pbuf_pool_is_empty+0x14>)
 800777a:	2201      	movs	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800777e:	bf00      	nop
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20008b68 	.word	0x20008b68

0800778c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	4611      	mov	r1, r2
 8007798:	461a      	mov	r2, r3
 800779a:	460b      	mov	r3, r1
 800779c:	80fb      	strh	r3, [r7, #6]
 800779e:	4613      	mov	r3, r2
 80077a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	88fa      	ldrh	r2, [r7, #6]
 80077b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	88ba      	ldrh	r2, [r7, #4]
 80077b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80077ba:	8b3b      	ldrh	r3, [r7, #24]
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	7f3a      	ldrb	r2, [r7, #28]
 80077c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2201      	movs	r2, #1
 80077cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	73da      	strb	r2, [r3, #15]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08c      	sub	sp, #48	; 0x30
 80077e4:	af02      	add	r7, sp, #8
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
 80077ea:	460b      	mov	r3, r1
 80077ec:	80bb      	strh	r3, [r7, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80077f6:	887b      	ldrh	r3, [r7, #2]
 80077f8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80077fc:	d07f      	beq.n	80078fe <pbuf_alloc+0x11e>
 80077fe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8007802:	f300 80c8 	bgt.w	8007996 <pbuf_alloc+0x1b6>
 8007806:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800780a:	d010      	beq.n	800782e <pbuf_alloc+0x4e>
 800780c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8007810:	f300 80c1 	bgt.w	8007996 <pbuf_alloc+0x1b6>
 8007814:	2b01      	cmp	r3, #1
 8007816:	d002      	beq.n	800781e <pbuf_alloc+0x3e>
 8007818:	2b41      	cmp	r3, #65	; 0x41
 800781a:	f040 80bc 	bne.w	8007996 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800781e:	887a      	ldrh	r2, [r7, #2]
 8007820:	88bb      	ldrh	r3, [r7, #4]
 8007822:	4619      	mov	r1, r3
 8007824:	2000      	movs	r0, #0
 8007826:	f000 f8d1 	bl	80079cc <pbuf_alloc_reference>
 800782a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800782c:	e0bd      	b.n	80079aa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007836:	88bb      	ldrh	r3, [r7, #4]
 8007838:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800783a:	2008      	movs	r0, #8
 800783c:	f7ff fc56 	bl	80070ec <memp_malloc>
 8007840:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007848:	f7ff ff94 	bl	8007774 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007854:	f000 faa8 	bl	8007da8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	e0a7      	b.n	80079ac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800785c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800785e:	3303      	adds	r3, #3
 8007860:	b29b      	uxth	r3, r3
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	b29b      	uxth	r3, r3
 8007868:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800786c:	b29b      	uxth	r3, r3
 800786e:	8b7a      	ldrh	r2, [r7, #26]
 8007870:	4293      	cmp	r3, r2
 8007872:	bf28      	it	cs
 8007874:	4613      	movcs	r3, r2
 8007876:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800787a:	3310      	adds	r3, #16
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4413      	add	r3, r2
 8007880:	3303      	adds	r3, #3
 8007882:	f023 0303 	bic.w	r3, r3, #3
 8007886:	4618      	mov	r0, r3
 8007888:	89f9      	ldrh	r1, [r7, #14]
 800788a:	8b7a      	ldrh	r2, [r7, #26]
 800788c:	2300      	movs	r3, #0
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	887b      	ldrh	r3, [r7, #2]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	460b      	mov	r3, r1
 8007896:	4601      	mov	r1, r0
 8007898:	6938      	ldr	r0, [r7, #16]
 800789a:	f7ff ff77 	bl	800778c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d006      	beq.n	80078b8 <pbuf_alloc+0xd8>
 80078aa:	4b42      	ldr	r3, [pc, #264]	; (80079b4 <pbuf_alloc+0x1d4>)
 80078ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078b0:	4941      	ldr	r1, [pc, #260]	; (80079b8 <pbuf_alloc+0x1d8>)
 80078b2:	4842      	ldr	r0, [pc, #264]	; (80079bc <pbuf_alloc+0x1dc>)
 80078b4:	f009 fc48 	bl	8011148 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80078b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078ba:	3303      	adds	r3, #3
 80078bc:	f023 0303 	bic.w	r3, r3, #3
 80078c0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80078c4:	d106      	bne.n	80078d4 <pbuf_alloc+0xf4>
 80078c6:	4b3b      	ldr	r3, [pc, #236]	; (80079b4 <pbuf_alloc+0x1d4>)
 80078c8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80078cc:	493c      	ldr	r1, [pc, #240]	; (80079c0 <pbuf_alloc+0x1e0>)
 80078ce:	483b      	ldr	r0, [pc, #236]	; (80079bc <pbuf_alloc+0x1dc>)
 80078d0:	f009 fc3a 	bl	8011148 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
 80078de:	e002      	b.n	80078e6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80078ea:	8b7a      	ldrh	r2, [r7, #26]
 80078ec:	89fb      	ldrh	r3, [r7, #14]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80078f6:	8b7b      	ldrh	r3, [r7, #26]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d19e      	bne.n	800783a <pbuf_alloc+0x5a>
      break;
 80078fc:	e055      	b.n	80079aa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80078fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007900:	3303      	adds	r3, #3
 8007902:	b29b      	uxth	r3, r3
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	b29a      	uxth	r2, r3
 800790a:	88bb      	ldrh	r3, [r7, #4]
 800790c:	3303      	adds	r3, #3
 800790e:	b29b      	uxth	r3, r3
 8007910:	f023 0303 	bic.w	r3, r3, #3
 8007914:	b29b      	uxth	r3, r3
 8007916:	4413      	add	r3, r2
 8007918:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800791a:	8b3b      	ldrh	r3, [r7, #24]
 800791c:	3310      	adds	r3, #16
 800791e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007920:	8b3a      	ldrh	r2, [r7, #24]
 8007922:	88bb      	ldrh	r3, [r7, #4]
 8007924:	3303      	adds	r3, #3
 8007926:	f023 0303 	bic.w	r3, r3, #3
 800792a:	429a      	cmp	r2, r3
 800792c:	d306      	bcc.n	800793c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800792e:	8afa      	ldrh	r2, [r7, #22]
 8007930:	88bb      	ldrh	r3, [r7, #4]
 8007932:	3303      	adds	r3, #3
 8007934:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007938:	429a      	cmp	r2, r3
 800793a:	d201      	bcs.n	8007940 <pbuf_alloc+0x160>
        return NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	e035      	b.n	80079ac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007940:	8afb      	ldrh	r3, [r7, #22]
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff fa64 	bl	8006e10 <mem_malloc>
 8007948:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <pbuf_alloc+0x174>
        return NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	e02b      	b.n	80079ac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007956:	3310      	adds	r3, #16
 8007958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800795a:	4413      	add	r3, r2
 800795c:	3303      	adds	r3, #3
 800795e:	f023 0303 	bic.w	r3, r3, #3
 8007962:	4618      	mov	r0, r3
 8007964:	88b9      	ldrh	r1, [r7, #4]
 8007966:	88ba      	ldrh	r2, [r7, #4]
 8007968:	2300      	movs	r3, #0
 800796a:	9301      	str	r3, [sp, #4]
 800796c:	887b      	ldrh	r3, [r7, #2]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	460b      	mov	r3, r1
 8007972:	4601      	mov	r1, r0
 8007974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007976:	f7ff ff09 	bl	800778c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f003 0303 	and.w	r3, r3, #3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <pbuf_alloc+0x1c8>
 8007986:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <pbuf_alloc+0x1d4>)
 8007988:	f44f 7291 	mov.w	r2, #290	; 0x122
 800798c:	490d      	ldr	r1, [pc, #52]	; (80079c4 <pbuf_alloc+0x1e4>)
 800798e:	480b      	ldr	r0, [pc, #44]	; (80079bc <pbuf_alloc+0x1dc>)
 8007990:	f009 fbda 	bl	8011148 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007994:	e008      	b.n	80079a8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <pbuf_alloc+0x1d4>)
 8007998:	f240 1227 	movw	r2, #295	; 0x127
 800799c:	490a      	ldr	r1, [pc, #40]	; (80079c8 <pbuf_alloc+0x1e8>)
 800799e:	4807      	ldr	r0, [pc, #28]	; (80079bc <pbuf_alloc+0x1dc>)
 80079a0:	f009 fbd2 	bl	8011148 <iprintf>
      return NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e001      	b.n	80079ac <pbuf_alloc+0x1cc>
      break;
 80079a8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3728      	adds	r7, #40	; 0x28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	080125f4 	.word	0x080125f4
 80079b8:	08012624 	.word	0x08012624
 80079bc:	08012654 	.word	0x08012654
 80079c0:	0801267c 	.word	0x0801267c
 80079c4:	080126b0 	.word	0x080126b0
 80079c8:	080126dc 	.word	0x080126dc

080079cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	807b      	strh	r3, [r7, #2]
 80079d8:	4613      	mov	r3, r2
 80079da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80079dc:	883b      	ldrh	r3, [r7, #0]
 80079de:	2b41      	cmp	r3, #65	; 0x41
 80079e0:	d009      	beq.n	80079f6 <pbuf_alloc_reference+0x2a>
 80079e2:	883b      	ldrh	r3, [r7, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d006      	beq.n	80079f6 <pbuf_alloc_reference+0x2a>
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <pbuf_alloc_reference+0x5c>)
 80079ea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80079ee:	490f      	ldr	r1, [pc, #60]	; (8007a2c <pbuf_alloc_reference+0x60>)
 80079f0:	480f      	ldr	r0, [pc, #60]	; (8007a30 <pbuf_alloc_reference+0x64>)
 80079f2:	f009 fba9 	bl	8011148 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80079f6:	2007      	movs	r0, #7
 80079f8:	f7ff fb78 	bl	80070ec <memp_malloc>
 80079fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d101      	bne.n	8007a08 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	e00b      	b.n	8007a20 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007a08:	8879      	ldrh	r1, [r7, #2]
 8007a0a:	887a      	ldrh	r2, [r7, #2]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	883b      	ldrh	r3, [r7, #0]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	460b      	mov	r3, r1
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff feb7 	bl	800778c <pbuf_init_alloced_pbuf>
  return p;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	080125f4 	.word	0x080125f4
 8007a2c:	080126f8 	.word	0x080126f8
 8007a30:	08012654 	.word	0x08012654

08007a34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af02      	add	r7, sp, #8
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
 8007a40:	460b      	mov	r3, r1
 8007a42:	81bb      	strh	r3, [r7, #12]
 8007a44:	4613      	mov	r3, r2
 8007a46:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007a4c:	8a7b      	ldrh	r3, [r7, #18]
 8007a4e:	3303      	adds	r3, #3
 8007a50:	f023 0203 	bic.w	r2, r3, #3
 8007a54:	89bb      	ldrh	r3, [r7, #12]
 8007a56:	441a      	add	r2, r3
 8007a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d901      	bls.n	8007a62 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e018      	b.n	8007a94 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d007      	beq.n	8007a78 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007a68:	8a7b      	ldrh	r3, [r7, #18]
 8007a6a:	3303      	adds	r3, #3
 8007a6c:	f023 0303 	bic.w	r3, r3, #3
 8007a70:	6a3a      	ldr	r2, [r7, #32]
 8007a72:	4413      	add	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	e001      	b.n	8007a7c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	89b9      	ldrh	r1, [r7, #12]
 8007a80:	89ba      	ldrh	r2, [r7, #12]
 8007a82:	2302      	movs	r3, #2
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	897b      	ldrh	r3, [r7, #10]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	6979      	ldr	r1, [r7, #20]
 8007a8e:	f7ff fe7d 	bl	800778c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007a92:	687b      	ldr	r3, [r7, #4]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <pbuf_realloc+0x20>
 8007aae:	4b3a      	ldr	r3, [pc, #232]	; (8007b98 <pbuf_realloc+0xfc>)
 8007ab0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007ab4:	4939      	ldr	r1, [pc, #228]	; (8007b9c <pbuf_realloc+0x100>)
 8007ab6:	483a      	ldr	r0, [pc, #232]	; (8007ba0 <pbuf_realloc+0x104>)
 8007ab8:	f009 fb46 	bl	8011148 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	891b      	ldrh	r3, [r3, #8]
 8007ac0:	887a      	ldrh	r2, [r7, #2]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d263      	bcs.n	8007b8e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	891a      	ldrh	r2, [r3, #8]
 8007aca:	887b      	ldrh	r3, [r7, #2]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007ad0:	887b      	ldrh	r3, [r7, #2]
 8007ad2:	817b      	strh	r3, [r7, #10]
  q = p;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007ad8:	e018      	b.n	8007b0c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	895b      	ldrh	r3, [r3, #10]
 8007ade:	897a      	ldrh	r2, [r7, #10]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	891a      	ldrh	r2, [r3, #8]
 8007ae8:	893b      	ldrh	r3, [r7, #8]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d106      	bne.n	8007b0c <pbuf_realloc+0x70>
 8007afe:	4b26      	ldr	r3, [pc, #152]	; (8007b98 <pbuf_realloc+0xfc>)
 8007b00:	f240 12af 	movw	r2, #431	; 0x1af
 8007b04:	4927      	ldr	r1, [pc, #156]	; (8007ba4 <pbuf_realloc+0x108>)
 8007b06:	4826      	ldr	r0, [pc, #152]	; (8007ba0 <pbuf_realloc+0x104>)
 8007b08:	f009 fb1e 	bl	8011148 <iprintf>
  while (rem_len > q->len) {
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	895b      	ldrh	r3, [r3, #10]
 8007b10:	897a      	ldrh	r2, [r7, #10]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d8e1      	bhi.n	8007ada <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	7b1b      	ldrb	r3, [r3, #12]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d121      	bne.n	8007b66 <pbuf_realloc+0xca>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	895b      	ldrh	r3, [r3, #10]
 8007b26:	897a      	ldrh	r2, [r7, #10]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d01c      	beq.n	8007b66 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	7b5b      	ldrb	r3, [r3, #13]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d116      	bne.n	8007b66 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	897b      	ldrh	r3, [r7, #10]
 8007b44:	4413      	add	r3, r2
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7ff f864 	bl	8006c18 <mem_trim>
 8007b50:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <pbuf_realloc+0xca>
 8007b58:	4b0f      	ldr	r3, [pc, #60]	; (8007b98 <pbuf_realloc+0xfc>)
 8007b5a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007b5e:	4912      	ldr	r1, [pc, #72]	; (8007ba8 <pbuf_realloc+0x10c>)
 8007b60:	480f      	ldr	r0, [pc, #60]	; (8007ba0 <pbuf_realloc+0x104>)
 8007b62:	f009 faf1 	bl	8011148 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	897a      	ldrh	r2, [r7, #10]
 8007b6a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	895a      	ldrh	r2, [r3, #10]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f911 	bl	8007da8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	e000      	b.n	8007b90 <pbuf_realloc+0xf4>
    return;
 8007b8e:	bf00      	nop

}
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	080125f4 	.word	0x080125f4
 8007b9c:	0801270c 	.word	0x0801270c
 8007ba0:	08012654 	.word	0x08012654
 8007ba4:	08012724 	.word	0x08012724
 8007ba8:	0801273c 	.word	0x0801273c

08007bac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d106      	bne.n	8007bce <pbuf_add_header_impl+0x22>
 8007bc0:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <pbuf_add_header_impl+0xc4>)
 8007bc2:	f240 12df 	movw	r2, #479	; 0x1df
 8007bc6:	492b      	ldr	r1, [pc, #172]	; (8007c74 <pbuf_add_header_impl+0xc8>)
 8007bc8:	482b      	ldr	r0, [pc, #172]	; (8007c78 <pbuf_add_header_impl+0xcc>)
 8007bca:	f009 fabd 	bl	8011148 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <pbuf_add_header_impl+0x30>
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bda:	d301      	bcc.n	8007be0 <pbuf_add_header_impl+0x34>
    return 1;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e043      	b.n	8007c68 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <pbuf_add_header_impl+0x3e>
    return 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e03e      	b.n	8007c68 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	891a      	ldrh	r2, [r3, #8]
 8007bf2:	8a7b      	ldrh	r3, [r7, #18]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	8a7a      	ldrh	r2, [r7, #18]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d901      	bls.n	8007c02 <pbuf_add_header_impl+0x56>
    return 1;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e032      	b.n	8007c68 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	7b1b      	ldrb	r3, [r3, #12]
 8007c06:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007c08:	8a3b      	ldrh	r3, [r7, #16]
 8007c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00c      	beq.n	8007c2c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	425b      	negs	r3, r3
 8007c1a:	4413      	add	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3310      	adds	r3, #16
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d20d      	bcs.n	8007c44 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e01d      	b.n	8007c68 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d006      	beq.n	8007c40 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	425b      	negs	r3, r3
 8007c3a:	4413      	add	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e001      	b.n	8007c44 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e011      	b.n	8007c68 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	895a      	ldrh	r2, [r3, #10]
 8007c4e:	8a7b      	ldrh	r3, [r7, #18]
 8007c50:	4413      	add	r3, r2
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	891a      	ldrh	r2, [r3, #8]
 8007c5c:	8a7b      	ldrh	r3, [r7, #18]
 8007c5e:	4413      	add	r3, r2
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	811a      	strh	r2, [r3, #8]


  return 0;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	080125f4 	.word	0x080125f4
 8007c74:	08012758 	.word	0x08012758
 8007c78:	08012654 	.word	0x08012654

08007c7c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007c86:	2200      	movs	r2, #0
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff ff8e 	bl	8007bac <pbuf_add_header_impl>
 8007c90:	4603      	mov	r3, r0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d106      	bne.n	8007cba <pbuf_remove_header+0x1e>
 8007cac:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <pbuf_remove_header+0x94>)
 8007cae:	f240 224b 	movw	r2, #587	; 0x24b
 8007cb2:	4920      	ldr	r1, [pc, #128]	; (8007d34 <pbuf_remove_header+0x98>)
 8007cb4:	4820      	ldr	r0, [pc, #128]	; (8007d38 <pbuf_remove_header+0x9c>)
 8007cb6:	f009 fa47 	bl	8011148 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <pbuf_remove_header+0x2c>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc6:	d301      	bcc.n	8007ccc <pbuf_remove_header+0x30>
    return 1;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e02c      	b.n	8007d26 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <pbuf_remove_header+0x3a>
    return 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e027      	b.n	8007d26 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	895b      	ldrh	r3, [r3, #10]
 8007cde:	89fa      	ldrh	r2, [r7, #14]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d908      	bls.n	8007cf6 <pbuf_remove_header+0x5a>
 8007ce4:	4b12      	ldr	r3, [pc, #72]	; (8007d30 <pbuf_remove_header+0x94>)
 8007ce6:	f240 2255 	movw	r2, #597	; 0x255
 8007cea:	4914      	ldr	r1, [pc, #80]	; (8007d3c <pbuf_remove_header+0xa0>)
 8007cec:	4812      	ldr	r0, [pc, #72]	; (8007d38 <pbuf_remove_header+0x9c>)
 8007cee:	f009 fa2b 	bl	8011148 <iprintf>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e017      	b.n	8007d26 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	441a      	add	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	895a      	ldrh	r2, [r3, #10]
 8007d0c:	89fb      	ldrh	r3, [r7, #14]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	891a      	ldrh	r2, [r3, #8]
 8007d1a:	89fb      	ldrh	r3, [r7, #14]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	080125f4 	.word	0x080125f4
 8007d34:	08012758 	.word	0x08012758
 8007d38:	08012654 	.word	0x08012654
 8007d3c:	08012764 	.word	0x08012764

08007d40 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	807b      	strh	r3, [r7, #2]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007d50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	da08      	bge.n	8007d6a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007d58:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d5c:	425b      	negs	r3, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff9b 	bl	8007c9c <pbuf_remove_header>
 8007d66:	4603      	mov	r3, r0
 8007d68:	e007      	b.n	8007d7a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007d6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d6e:	787a      	ldrb	r2, [r7, #1]
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ff1a 	bl	8007bac <pbuf_add_header_impl>
 8007d78:	4603      	mov	r3, r0
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007d8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d92:	2201      	movs	r2, #1
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f7ff ffd2 	bl	8007d40 <pbuf_header_impl>
 8007d9c:	4603      	mov	r3, r0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <pbuf_free+0x22>
 8007dbc:	4b38      	ldr	r3, [pc, #224]	; (8007ea0 <pbuf_free+0xf8>)
 8007dbe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007dc2:	4938      	ldr	r1, [pc, #224]	; (8007ea4 <pbuf_free+0xfc>)
 8007dc4:	4838      	ldr	r0, [pc, #224]	; (8007ea8 <pbuf_free+0x100>)
 8007dc6:	f009 f9bf 	bl	8011148 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e063      	b.n	8007e96 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007dd2:	e05c      	b.n	8007e8e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7b9b      	ldrb	r3, [r3, #14]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <pbuf_free+0x42>
 8007ddc:	4b30      	ldr	r3, [pc, #192]	; (8007ea0 <pbuf_free+0xf8>)
 8007dde:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007de2:	4932      	ldr	r1, [pc, #200]	; (8007eac <pbuf_free+0x104>)
 8007de4:	4830      	ldr	r0, [pc, #192]	; (8007ea8 <pbuf_free+0x100>)
 8007de6:	f009 f9af 	bl	8011148 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7b9b      	ldrb	r3, [r3, #14]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	739a      	strb	r2, [r3, #14]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	7b9b      	ldrb	r3, [r3, #14]
 8007dfa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007dfc:	7dbb      	ldrb	r3, [r7, #22]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d143      	bne.n	8007e8a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7b1b      	ldrb	r3, [r3, #12]
 8007e0c:	f003 030f 	and.w	r3, r3, #15
 8007e10:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	7b5b      	ldrb	r3, [r3, #13]
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d011      	beq.n	8007e42 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <pbuf_free+0x90>
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <pbuf_free+0xf8>)
 8007e2c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007e30:	491f      	ldr	r1, [pc, #124]	; (8007eb0 <pbuf_free+0x108>)
 8007e32:	481d      	ldr	r0, [pc, #116]	; (8007ea8 <pbuf_free+0x100>)
 8007e34:	f009 f988 	bl	8011148 <iprintf>
        pc->custom_free_function(p);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
 8007e40:	e01d      	b.n	8007e7e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d104      	bne.n	8007e52 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	2008      	movs	r0, #8
 8007e4c:	f7ff f99a 	bl	8007184 <memp_free>
 8007e50:	e015      	b.n	8007e7e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d104      	bne.n	8007e62 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	2007      	movs	r0, #7
 8007e5c:	f7ff f992 	bl	8007184 <memp_free>
 8007e60:	e00d      	b.n	8007e7e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <pbuf_free+0xc8>
          mem_free(p);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fe fe6b 	bl	8006b44 <mem_free>
 8007e6e:	e006      	b.n	8007e7e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <pbuf_free+0xf8>)
 8007e72:	f240 320f 	movw	r2, #783	; 0x30f
 8007e76:	490f      	ldr	r1, [pc, #60]	; (8007eb4 <pbuf_free+0x10c>)
 8007e78:	480b      	ldr	r0, [pc, #44]	; (8007ea8 <pbuf_free+0x100>)
 8007e7a:	f009 f965 	bl	8011148 <iprintf>
        }
      }
      count++;
 8007e7e:	7dfb      	ldrb	r3, [r7, #23]
 8007e80:	3301      	adds	r3, #1
 8007e82:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	e001      	b.n	8007e8e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d19f      	bne.n	8007dd4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	080125f4 	.word	0x080125f4
 8007ea4:	08012758 	.word	0x08012758
 8007ea8:	08012654 	.word	0x08012654
 8007eac:	08012784 	.word	0x08012784
 8007eb0:	0801279c 	.word	0x0801279c
 8007eb4:	080127c0 	.word	0x080127c0

08007eb8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007ec4:	e005      	b.n	8007ed2 <pbuf_clen+0x1a>
    ++len;
 8007ec6:	89fb      	ldrh	r3, [r7, #14]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f6      	bne.n	8007ec6 <pbuf_clen+0xe>
  }
  return len;
 8007ed8:	89fb      	ldrh	r3, [r7, #14]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d010      	beq.n	8007f18 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7b9b      	ldrb	r3, [r3, #14]
 8007efa:	3301      	adds	r3, #1
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	7b9b      	ldrb	r3, [r3, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <pbuf_ref+0x30>
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <pbuf_ref+0x38>)
 8007f0c:	f240 3242 	movw	r2, #834	; 0x342
 8007f10:	4904      	ldr	r1, [pc, #16]	; (8007f24 <pbuf_ref+0x3c>)
 8007f12:	4805      	ldr	r0, [pc, #20]	; (8007f28 <pbuf_ref+0x40>)
 8007f14:	f009 f918 	bl	8011148 <iprintf>
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	080125f4 	.word	0x080125f4
 8007f24:	080127d4 	.word	0x080127d4
 8007f28:	08012654 	.word	0x08012654

08007f2c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <pbuf_cat+0x16>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d107      	bne.n	8007f52 <pbuf_cat+0x26>
 8007f42:	4b20      	ldr	r3, [pc, #128]	; (8007fc4 <pbuf_cat+0x98>)
 8007f44:	f240 3259 	movw	r2, #857	; 0x359
 8007f48:	491f      	ldr	r1, [pc, #124]	; (8007fc8 <pbuf_cat+0x9c>)
 8007f4a:	4820      	ldr	r0, [pc, #128]	; (8007fcc <pbuf_cat+0xa0>)
 8007f4c:	f009 f8fc 	bl	8011148 <iprintf>
 8007f50:	e034      	b.n	8007fbc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e00a      	b.n	8007f6e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	891a      	ldrh	r2, [r3, #8]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	891b      	ldrh	r3, [r3, #8]
 8007f60:	4413      	add	r3, r2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f0      	bne.n	8007f58 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	891a      	ldrh	r2, [r3, #8]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	895b      	ldrh	r3, [r3, #10]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d006      	beq.n	8007f90 <pbuf_cat+0x64>
 8007f82:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <pbuf_cat+0x98>)
 8007f84:	f240 3262 	movw	r2, #866	; 0x362
 8007f88:	4911      	ldr	r1, [pc, #68]	; (8007fd0 <pbuf_cat+0xa4>)
 8007f8a:	4810      	ldr	r0, [pc, #64]	; (8007fcc <pbuf_cat+0xa0>)
 8007f8c:	f009 f8dc 	bl	8011148 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d006      	beq.n	8007fa6 <pbuf_cat+0x7a>
 8007f98:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <pbuf_cat+0x98>)
 8007f9a:	f240 3263 	movw	r2, #867	; 0x363
 8007f9e:	490d      	ldr	r1, [pc, #52]	; (8007fd4 <pbuf_cat+0xa8>)
 8007fa0:	480a      	ldr	r0, [pc, #40]	; (8007fcc <pbuf_cat+0xa0>)
 8007fa2:	f009 f8d1 	bl	8011148 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	891a      	ldrh	r2, [r3, #8]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	891b      	ldrh	r3, [r3, #8]
 8007fae:	4413      	add	r3, r2
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	080125f4 	.word	0x080125f4
 8007fc8:	080127e8 	.word	0x080127e8
 8007fcc:	08012654 	.word	0x08012654
 8007fd0:	08012820 	.word	0x08012820
 8007fd4:	08012850 	.word	0x08012850

08007fd8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ffa1 	bl	8007f2c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007fea:	6838      	ldr	r0, [r7, #0]
 8007fec:	f7ff ff7c 	bl	8007ee8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	2300      	movs	r3, #0
 8008008:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <pbuf_copy+0x2a>
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <pbuf_copy+0x2a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	891a      	ldrh	r2, [r3, #8]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	891b      	ldrh	r3, [r3, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	d209      	bcs.n	8008036 <pbuf_copy+0x3e>
 8008022:	4b57      	ldr	r3, [pc, #348]	; (8008180 <pbuf_copy+0x188>)
 8008024:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008028:	4956      	ldr	r1, [pc, #344]	; (8008184 <pbuf_copy+0x18c>)
 800802a:	4857      	ldr	r0, [pc, #348]	; (8008188 <pbuf_copy+0x190>)
 800802c:	f009 f88c 	bl	8011148 <iprintf>
 8008030:	f06f 030f 	mvn.w	r3, #15
 8008034:	e09f      	b.n	8008176 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	895b      	ldrh	r3, [r3, #10]
 800803a:	461a      	mov	r2, r3
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	895b      	ldrh	r3, [r3, #10]
 8008044:	4619      	mov	r1, r3
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	1acb      	subs	r3, r1, r3
 800804a:	429a      	cmp	r2, r3
 800804c:	d306      	bcc.n	800805c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	895b      	ldrh	r3, [r3, #10]
 8008052:	461a      	mov	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	e005      	b.n	8008068 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	895b      	ldrh	r3, [r3, #10]
 8008060:	461a      	mov	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	18d0      	adds	r0, r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4413      	add	r3, r2
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4619      	mov	r1, r3
 800807c:	f008 fc9c 	bl	80109b8 <memcpy>
    offset_to += len;
 8008080:	697a      	ldr	r2, [r7, #20]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4413      	add	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	895b      	ldrh	r3, [r3, #10]
 8008094:	461a      	mov	r2, r3
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	4293      	cmp	r3, r2
 800809a:	d906      	bls.n	80080aa <pbuf_copy+0xb2>
 800809c:	4b38      	ldr	r3, [pc, #224]	; (8008180 <pbuf_copy+0x188>)
 800809e:	f240 32d9 	movw	r2, #985	; 0x3d9
 80080a2:	493a      	ldr	r1, [pc, #232]	; (800818c <pbuf_copy+0x194>)
 80080a4:	4838      	ldr	r0, [pc, #224]	; (8008188 <pbuf_copy+0x190>)
 80080a6:	f009 f84f 	bl	8011148 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	895b      	ldrh	r3, [r3, #10]
 80080ae:	461a      	mov	r2, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d906      	bls.n	80080c4 <pbuf_copy+0xcc>
 80080b6:	4b32      	ldr	r3, [pc, #200]	; (8008180 <pbuf_copy+0x188>)
 80080b8:	f240 32da 	movw	r2, #986	; 0x3da
 80080bc:	4934      	ldr	r1, [pc, #208]	; (8008190 <pbuf_copy+0x198>)
 80080be:	4832      	ldr	r0, [pc, #200]	; (8008188 <pbuf_copy+0x190>)
 80080c0:	f009 f842 	bl	8011148 <iprintf>
    if (offset_from >= p_from->len) {
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	895b      	ldrh	r3, [r3, #10]
 80080c8:	461a      	mov	r2, r3
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d304      	bcc.n	80080da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	895b      	ldrh	r3, [r3, #10]
 80080de:	461a      	mov	r2, r3
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d114      	bne.n	8008110 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10c      	bne.n	8008110 <pbuf_copy+0x118>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <pbuf_copy+0x118>
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <pbuf_copy+0x188>)
 80080fe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008102:	4924      	ldr	r1, [pc, #144]	; (8008194 <pbuf_copy+0x19c>)
 8008104:	4820      	ldr	r0, [pc, #128]	; (8008188 <pbuf_copy+0x190>)
 8008106:	f009 f81f 	bl	8011148 <iprintf>
 800810a:	f06f 030f 	mvn.w	r3, #15
 800810e:	e032      	b.n	8008176 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d013      	beq.n	800813e <pbuf_copy+0x146>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	895a      	ldrh	r2, [r3, #10]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	891b      	ldrh	r3, [r3, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	d10d      	bne.n	800813e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d009      	beq.n	800813e <pbuf_copy+0x146>
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <pbuf_copy+0x188>)
 800812c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008130:	4919      	ldr	r1, [pc, #100]	; (8008198 <pbuf_copy+0x1a0>)
 8008132:	4815      	ldr	r0, [pc, #84]	; (8008188 <pbuf_copy+0x190>)
 8008134:	f009 f808 	bl	8011148 <iprintf>
 8008138:	f06f 0305 	mvn.w	r3, #5
 800813c:	e01b      	b.n	8008176 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d013      	beq.n	800816c <pbuf_copy+0x174>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	895a      	ldrh	r2, [r3, #10]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	891b      	ldrh	r3, [r3, #8]
 800814c:	429a      	cmp	r2, r3
 800814e:	d10d      	bne.n	800816c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <pbuf_copy+0x174>
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <pbuf_copy+0x188>)
 800815a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800815e:	490e      	ldr	r1, [pc, #56]	; (8008198 <pbuf_copy+0x1a0>)
 8008160:	4809      	ldr	r0, [pc, #36]	; (8008188 <pbuf_copy+0x190>)
 8008162:	f008 fff1 	bl	8011148 <iprintf>
 8008166:	f06f 0305 	mvn.w	r3, #5
 800816a:	e004      	b.n	8008176 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f47f af61 	bne.w	8008036 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	080125f4 	.word	0x080125f4
 8008184:	0801289c 	.word	0x0801289c
 8008188:	08012654 	.word	0x08012654
 800818c:	080128cc 	.word	0x080128cc
 8008190:	080128e4 	.word	0x080128e4
 8008194:	08012900 	.word	0x08012900
 8008198:	08012910 	.word	0x08012910

0800819c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	4611      	mov	r1, r2
 80081a8:	461a      	mov	r2, r3
 80081aa:	460b      	mov	r3, r1
 80081ac:	80fb      	strh	r3, [r7, #6]
 80081ae:	4613      	mov	r3, r2
 80081b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d108      	bne.n	80081d2 <pbuf_copy_partial+0x36>
 80081c0:	4b2b      	ldr	r3, [pc, #172]	; (8008270 <pbuf_copy_partial+0xd4>)
 80081c2:	f240 420a 	movw	r2, #1034	; 0x40a
 80081c6:	492b      	ldr	r1, [pc, #172]	; (8008274 <pbuf_copy_partial+0xd8>)
 80081c8:	482b      	ldr	r0, [pc, #172]	; (8008278 <pbuf_copy_partial+0xdc>)
 80081ca:	f008 ffbd 	bl	8011148 <iprintf>
 80081ce:	2300      	movs	r3, #0
 80081d0:	e04a      	b.n	8008268 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d108      	bne.n	80081ea <pbuf_copy_partial+0x4e>
 80081d8:	4b25      	ldr	r3, [pc, #148]	; (8008270 <pbuf_copy_partial+0xd4>)
 80081da:	f240 420b 	movw	r2, #1035	; 0x40b
 80081de:	4927      	ldr	r1, [pc, #156]	; (800827c <pbuf_copy_partial+0xe0>)
 80081e0:	4825      	ldr	r0, [pc, #148]	; (8008278 <pbuf_copy_partial+0xdc>)
 80081e2:	f008 ffb1 	bl	8011148 <iprintf>
 80081e6:	2300      	movs	r3, #0
 80081e8:	e03e      	b.n	8008268 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	e034      	b.n	800825a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80081f0:	88bb      	ldrh	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00a      	beq.n	800820c <pbuf_copy_partial+0x70>
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	895b      	ldrh	r3, [r3, #10]
 80081fa:	88ba      	ldrh	r2, [r7, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d305      	bcc.n	800820c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	895b      	ldrh	r3, [r3, #10]
 8008204:	88ba      	ldrh	r2, [r7, #4]
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	80bb      	strh	r3, [r7, #4]
 800820a:	e023      	b.n	8008254 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	895a      	ldrh	r2, [r3, #10]
 8008210:	88bb      	ldrh	r3, [r7, #4]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008216:	8b3a      	ldrh	r2, [r7, #24]
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	429a      	cmp	r2, r3
 800821c:	d901      	bls.n	8008222 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800821e:	88fb      	ldrh	r3, [r7, #6]
 8008220:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008222:	8b7b      	ldrh	r3, [r7, #26]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	18d0      	adds	r0, r2, r3
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	88bb      	ldrh	r3, [r7, #4]
 800822e:	4413      	add	r3, r2
 8008230:	8b3a      	ldrh	r2, [r7, #24]
 8008232:	4619      	mov	r1, r3
 8008234:	f008 fbc0 	bl	80109b8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008238:	8afa      	ldrh	r2, [r7, #22]
 800823a:	8b3b      	ldrh	r3, [r7, #24]
 800823c:	4413      	add	r3, r2
 800823e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008240:	8b7a      	ldrh	r2, [r7, #26]
 8008242:	8b3b      	ldrh	r3, [r7, #24]
 8008244:	4413      	add	r3, r2
 8008246:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008248:	88fa      	ldrh	r2, [r7, #6]
 800824a:	8b3b      	ldrh	r3, [r7, #24]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	61fb      	str	r3, [r7, #28]
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <pbuf_copy_partial+0xca>
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1c4      	bne.n	80081f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008266:	8afb      	ldrh	r3, [r7, #22]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	080125f4 	.word	0x080125f4
 8008274:	0801293c 	.word	0x0801293c
 8008278:	08012654 	.word	0x08012654
 800827c:	0801295c 	.word	0x0801295c

08008280 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800828e:	88fb      	ldrh	r3, [r7, #6]
 8008290:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d109      	bne.n	80082b0 <pbuf_take+0x30>
 800829c:	4b3a      	ldr	r3, [pc, #232]	; (8008388 <pbuf_take+0x108>)
 800829e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80082a2:	493a      	ldr	r1, [pc, #232]	; (800838c <pbuf_take+0x10c>)
 80082a4:	483a      	ldr	r0, [pc, #232]	; (8008390 <pbuf_take+0x110>)
 80082a6:	f008 ff4f 	bl	8011148 <iprintf>
 80082aa:	f06f 030f 	mvn.w	r3, #15
 80082ae:	e067      	b.n	8008380 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d109      	bne.n	80082ca <pbuf_take+0x4a>
 80082b6:	4b34      	ldr	r3, [pc, #208]	; (8008388 <pbuf_take+0x108>)
 80082b8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80082bc:	4935      	ldr	r1, [pc, #212]	; (8008394 <pbuf_take+0x114>)
 80082be:	4834      	ldr	r0, [pc, #208]	; (8008390 <pbuf_take+0x110>)
 80082c0:	f008 ff42 	bl	8011148 <iprintf>
 80082c4:	f06f 030f 	mvn.w	r3, #15
 80082c8:	e05a      	b.n	8008380 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	891b      	ldrh	r3, [r3, #8]
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d909      	bls.n	80082e8 <pbuf_take+0x68>
 80082d4:	4b2c      	ldr	r3, [pc, #176]	; (8008388 <pbuf_take+0x108>)
 80082d6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80082da:	492f      	ldr	r1, [pc, #188]	; (8008398 <pbuf_take+0x118>)
 80082dc:	482c      	ldr	r0, [pc, #176]	; (8008390 <pbuf_take+0x110>)
 80082de:	f008 ff33 	bl	8011148 <iprintf>
 80082e2:	f04f 33ff 	mov.w	r3, #4294967295
 80082e6:	e04b      	b.n	8008380 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <pbuf_take+0x7e>
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <pbuf_take+0x7e>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	891b      	ldrh	r3, [r3, #8]
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d902      	bls.n	8008304 <pbuf_take+0x84>
    return ERR_ARG;
 80082fe:	f06f 030f 	mvn.w	r3, #15
 8008302:	e03d      	b.n	8008380 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	61fb      	str	r3, [r7, #28]
 8008308:	e028      	b.n	800835c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d106      	bne.n	800831e <pbuf_take+0x9e>
 8008310:	4b1d      	ldr	r3, [pc, #116]	; (8008388 <pbuf_take+0x108>)
 8008312:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008316:	4921      	ldr	r1, [pc, #132]	; (800839c <pbuf_take+0x11c>)
 8008318:	481d      	ldr	r0, [pc, #116]	; (8008390 <pbuf_take+0x110>)
 800831a:	f008 ff15 	bl	8011148 <iprintf>
    buf_copy_len = total_copy_len;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	895b      	ldrh	r3, [r3, #10]
 8008326:	461a      	mov	r2, r3
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	4293      	cmp	r3, r2
 800832c:	d902      	bls.n	8008334 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	895b      	ldrh	r3, [r3, #10]
 8008332:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	6858      	ldr	r0, [r3, #4]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4413      	add	r3, r2
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	4619      	mov	r1, r3
 8008342:	f008 fb39 	bl	80109b8 <memcpy>
    total_copy_len -= buf_copy_len;
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	4413      	add	r3, r2
 8008354:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1d3      	bne.n	800830a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <pbuf_take+0xf0>
 8008368:	88fb      	ldrh	r3, [r7, #6]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	429a      	cmp	r2, r3
 800836e:	d006      	beq.n	800837e <pbuf_take+0xfe>
 8008370:	4b05      	ldr	r3, [pc, #20]	; (8008388 <pbuf_take+0x108>)
 8008372:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8008376:	490a      	ldr	r1, [pc, #40]	; (80083a0 <pbuf_take+0x120>)
 8008378:	4805      	ldr	r0, [pc, #20]	; (8008390 <pbuf_take+0x110>)
 800837a:	f008 fee5 	bl	8011148 <iprintf>
  return ERR_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	080125f4 	.word	0x080125f4
 800838c:	080129cc 	.word	0x080129cc
 8008390:	08012654 	.word	0x08012654
 8008394:	080129e4 	.word	0x080129e4
 8008398:	08012a00 	.word	0x08012a00
 800839c:	08012a20 	.word	0x08012a20
 80083a0:	08012a38 	.word	0x08012a38

080083a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	603a      	str	r2, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
 80083b0:	460b      	mov	r3, r1
 80083b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	8919      	ldrh	r1, [r3, #8]
 80083b8:	88ba      	ldrh	r2, [r7, #4]
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff fa0f 	bl	80077e0 <pbuf_alloc>
 80083c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <pbuf_clone+0x2a>
    return NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e011      	b.n	80083f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f7ff fe11 	bl	8007ff8 <pbuf_copy>
 80083d6:	4603      	mov	r3, r0
 80083d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80083da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d006      	beq.n	80083f0 <pbuf_clone+0x4c>
 80083e2:	4b06      	ldr	r3, [pc, #24]	; (80083fc <pbuf_clone+0x58>)
 80083e4:	f240 5224 	movw	r2, #1316	; 0x524
 80083e8:	4905      	ldr	r1, [pc, #20]	; (8008400 <pbuf_clone+0x5c>)
 80083ea:	4806      	ldr	r0, [pc, #24]	; (8008404 <pbuf_clone+0x60>)
 80083ec:	f008 feac 	bl	8011148 <iprintf>
  return q;
 80083f0:	68fb      	ldr	r3, [r7, #12]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	080125f4 	.word	0x080125f4
 8008400:	08012a68 	.word	0x08012a68
 8008404:	08012654 	.word	0x08012654

08008408 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800840c:	f008 feb4 	bl	8011178 <rand>
 8008410:	4603      	mov	r3, r0
 8008412:	b29b      	uxth	r3, r3
 8008414:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008418:	b29b      	uxth	r3, r3
 800841a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800841e:	b29a      	uxth	r2, r3
 8008420:	4b01      	ldr	r3, [pc, #4]	; (8008428 <tcp_init+0x20>)
 8008422:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008424:	bf00      	nop
 8008426:	bd80      	pop	{r7, pc}
 8008428:	2000002a 	.word	0x2000002a

0800842c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	7d1b      	ldrb	r3, [r3, #20]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d105      	bne.n	8008448 <tcp_free+0x1c>
 800843c:	4b06      	ldr	r3, [pc, #24]	; (8008458 <tcp_free+0x2c>)
 800843e:	22d4      	movs	r2, #212	; 0xd4
 8008440:	4906      	ldr	r1, [pc, #24]	; (800845c <tcp_free+0x30>)
 8008442:	4807      	ldr	r0, [pc, #28]	; (8008460 <tcp_free+0x34>)
 8008444:	f008 fe80 	bl	8011148 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	2001      	movs	r0, #1
 800844c:	f7fe fe9a 	bl	8007184 <memp_free>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	08012af4 	.word	0x08012af4
 800845c:	08012b24 	.word	0x08012b24
 8008460:	08012b38 	.word	0x08012b38

08008464 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	7d1b      	ldrb	r3, [r3, #20]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d105      	bne.n	8008480 <tcp_free_listen+0x1c>
 8008474:	4b06      	ldr	r3, [pc, #24]	; (8008490 <tcp_free_listen+0x2c>)
 8008476:	22df      	movs	r2, #223	; 0xdf
 8008478:	4906      	ldr	r1, [pc, #24]	; (8008494 <tcp_free_listen+0x30>)
 800847a:	4807      	ldr	r0, [pc, #28]	; (8008498 <tcp_free_listen+0x34>)
 800847c:	f008 fe64 	bl	8011148 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	2002      	movs	r0, #2
 8008484:	f7fe fe7e 	bl	8007184 <memp_free>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	08012af4 	.word	0x08012af4
 8008494:	08012b60 	.word	0x08012b60
 8008498:	08012b38 	.word	0x08012b38

0800849c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80084a0:	f000 fea2 	bl	80091e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <tcp_tmr+0x28>)
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	3301      	adds	r3, #1
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	4b05      	ldr	r3, [pc, #20]	; (80084c4 <tcp_tmr+0x28>)
 80084ae:	701a      	strb	r2, [r3, #0]
 80084b0:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <tcp_tmr+0x28>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80084bc:	f000 fb54 	bl	8008b68 <tcp_slowtmr>
  }
}
 80084c0:	bf00      	nop
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000131 	.word	0x20000131

080084c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <tcp_remove_listener+0x1c>
 80084d8:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <tcp_remove_listener+0x48>)
 80084da:	22ff      	movs	r2, #255	; 0xff
 80084dc:	490d      	ldr	r1, [pc, #52]	; (8008514 <tcp_remove_listener+0x4c>)
 80084de:	480e      	ldr	r0, [pc, #56]	; (8008518 <tcp_remove_listener+0x50>)
 80084e0:	f008 fe32 	bl	8011148 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	e00a      	b.n	8008500 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d102      	bne.n	80084fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f1      	bne.n	80084ea <tcp_remove_listener+0x22>
    }
  }
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	08012af4 	.word	0x08012af4
 8008514:	08012b7c 	.word	0x08012b7c
 8008518:	08012b38 	.word	0x08012b38

0800851c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <tcp_listen_closed+0x1c>
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <tcp_listen_closed+0x60>)
 800852c:	f240 1211 	movw	r2, #273	; 0x111
 8008530:	4913      	ldr	r1, [pc, #76]	; (8008580 <tcp_listen_closed+0x64>)
 8008532:	4814      	ldr	r0, [pc, #80]	; (8008584 <tcp_listen_closed+0x68>)
 8008534:	f008 fe08 	bl	8011148 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	7d1b      	ldrb	r3, [r3, #20]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d006      	beq.n	800854e <tcp_listen_closed+0x32>
 8008540:	4b0e      	ldr	r3, [pc, #56]	; (800857c <tcp_listen_closed+0x60>)
 8008542:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008546:	4910      	ldr	r1, [pc, #64]	; (8008588 <tcp_listen_closed+0x6c>)
 8008548:	480e      	ldr	r0, [pc, #56]	; (8008584 <tcp_listen_closed+0x68>)
 800854a:	f008 fdfd 	bl	8011148 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800854e:	2301      	movs	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e00b      	b.n	800856c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008554:	4a0d      	ldr	r2, [pc, #52]	; (800858c <tcp_listen_closed+0x70>)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff ffb1 	bl	80084c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b03      	cmp	r3, #3
 8008570:	d9f0      	bls.n	8008554 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008572:	bf00      	nop
 8008574:	bf00      	nop
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	08012af4 	.word	0x08012af4
 8008580:	08012ba4 	.word	0x08012ba4
 8008584:	08012b38 	.word	0x08012b38
 8008588:	08012bb0 	.word	0x08012bb0
 800858c:	08014ad8 	.word	0x08014ad8

08008590 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008590:	b5b0      	push	{r4, r5, r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af04      	add	r7, sp, #16
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <tcp_close_shutdown+0x20>
 80085a2:	4b63      	ldr	r3, [pc, #396]	; (8008730 <tcp_close_shutdown+0x1a0>)
 80085a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80085a8:	4962      	ldr	r1, [pc, #392]	; (8008734 <tcp_close_shutdown+0x1a4>)
 80085aa:	4863      	ldr	r0, [pc, #396]	; (8008738 <tcp_close_shutdown+0x1a8>)
 80085ac:	f008 fdcc 	bl	8011148 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d066      	beq.n	8008684 <tcp_close_shutdown+0xf4>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7d1b      	ldrb	r3, [r3, #20]
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d003      	beq.n	80085c6 <tcp_close_shutdown+0x36>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	7d1b      	ldrb	r3, [r3, #20]
 80085c2:	2b07      	cmp	r3, #7
 80085c4:	d15e      	bne.n	8008684 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d104      	bne.n	80085d8 <tcp_close_shutdown+0x48>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80085d6:	d055      	beq.n	8008684 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8b5b      	ldrh	r3, [r3, #26]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d106      	bne.n	80085f2 <tcp_close_shutdown+0x62>
 80085e4:	4b52      	ldr	r3, [pc, #328]	; (8008730 <tcp_close_shutdown+0x1a0>)
 80085e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80085ea:	4954      	ldr	r1, [pc, #336]	; (800873c <tcp_close_shutdown+0x1ac>)
 80085ec:	4852      	ldr	r0, [pc, #328]	; (8008738 <tcp_close_shutdown+0x1a8>)
 80085ee:	f008 fdab 	bl	8011148 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80085fa:	687d      	ldr	r5, [r7, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	8ad2      	ldrh	r2, [r2, #22]
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	8b09      	ldrh	r1, [r1, #24]
 8008608:	9102      	str	r1, [sp, #8]
 800860a:	9201      	str	r2, [sp, #4]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	462b      	mov	r3, r5
 8008610:	4622      	mov	r2, r4
 8008612:	4601      	mov	r1, r0
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f004 fe8d 	bl	800d334 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 f8c6 	bl	80097ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008620:	4b47      	ldr	r3, [pc, #284]	; (8008740 <tcp_close_shutdown+0x1b0>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d105      	bne.n	8008636 <tcp_close_shutdown+0xa6>
 800862a:	4b45      	ldr	r3, [pc, #276]	; (8008740 <tcp_close_shutdown+0x1b0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	4a43      	ldr	r2, [pc, #268]	; (8008740 <tcp_close_shutdown+0x1b0>)
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	e013      	b.n	800865e <tcp_close_shutdown+0xce>
 8008636:	4b42      	ldr	r3, [pc, #264]	; (8008740 <tcp_close_shutdown+0x1b0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e00c      	b.n	8008658 <tcp_close_shutdown+0xc8>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d104      	bne.n	8008652 <tcp_close_shutdown+0xc2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	60da      	str	r2, [r3, #12]
 8008650:	e005      	b.n	800865e <tcp_close_shutdown+0xce>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1ef      	bne.n	800863e <tcp_close_shutdown+0xae>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	60da      	str	r2, [r3, #12]
 8008664:	4b37      	ldr	r3, [pc, #220]	; (8008744 <tcp_close_shutdown+0x1b4>)
 8008666:	2201      	movs	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800866a:	4b37      	ldr	r3, [pc, #220]	; (8008748 <tcp_close_shutdown+0x1b8>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d102      	bne.n	800867a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008674:	f003 fd5a 	bl	800c12c <tcp_trigger_input_pcb_close>
 8008678:	e002      	b.n	8008680 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7ff fed6 	bl	800842c <tcp_free>
      }
      return ERR_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	e050      	b.n	8008726 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7d1b      	ldrb	r3, [r3, #20]
 8008688:	2b02      	cmp	r3, #2
 800868a:	d03b      	beq.n	8008704 <tcp_close_shutdown+0x174>
 800868c:	2b02      	cmp	r3, #2
 800868e:	dc44      	bgt.n	800871a <tcp_close_shutdown+0x18a>
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <tcp_close_shutdown+0x10a>
 8008694:	2b01      	cmp	r3, #1
 8008696:	d02a      	beq.n	80086ee <tcp_close_shutdown+0x15e>
 8008698:	e03f      	b.n	800871a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8adb      	ldrh	r3, [r3, #22]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d021      	beq.n	80086e6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80086a2:	4b2a      	ldr	r3, [pc, #168]	; (800874c <tcp_close_shutdown+0x1bc>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d105      	bne.n	80086b8 <tcp_close_shutdown+0x128>
 80086ac:	4b27      	ldr	r3, [pc, #156]	; (800874c <tcp_close_shutdown+0x1bc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	4a26      	ldr	r2, [pc, #152]	; (800874c <tcp_close_shutdown+0x1bc>)
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	e013      	b.n	80086e0 <tcp_close_shutdown+0x150>
 80086b8:	4b24      	ldr	r3, [pc, #144]	; (800874c <tcp_close_shutdown+0x1bc>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	e00c      	b.n	80086da <tcp_close_shutdown+0x14a>
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d104      	bne.n	80086d4 <tcp_close_shutdown+0x144>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	60da      	str	r2, [r3, #12]
 80086d2:	e005      	b.n	80086e0 <tcp_close_shutdown+0x150>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1ef      	bne.n	80086c0 <tcp_close_shutdown+0x130>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7ff fea0 	bl	800842c <tcp_free>
      break;
 80086ec:	e01a      	b.n	8008724 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff ff14 	bl	800851c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4816      	ldr	r0, [pc, #88]	; (8008750 <tcp_close_shutdown+0x1c0>)
 80086f8:	f001 f8a8 	bl	800984c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff feb1 	bl	8008464 <tcp_free_listen>
      break;
 8008702:	e00f      	b.n	8008724 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	480e      	ldr	r0, [pc, #56]	; (8008740 <tcp_close_shutdown+0x1b0>)
 8008708:	f001 f8a0 	bl	800984c <tcp_pcb_remove>
 800870c:	4b0d      	ldr	r3, [pc, #52]	; (8008744 <tcp_close_shutdown+0x1b4>)
 800870e:	2201      	movs	r2, #1
 8008710:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff fe8a 	bl	800842c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008718:	e004      	b.n	8008724 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f81a 	bl	8008754 <tcp_close_shutdown_fin>
 8008720:	4603      	mov	r3, r0
 8008722:	e000      	b.n	8008726 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bdb0      	pop	{r4, r5, r7, pc}
 800872e:	bf00      	nop
 8008730:	08012af4 	.word	0x08012af4
 8008734:	08012bc8 	.word	0x08012bc8
 8008738:	08012b38 	.word	0x08012b38
 800873c:	08012be8 	.word	0x08012be8
 8008740:	20008b70 	.word	0x20008b70
 8008744:	20008b6c 	.word	0x20008b6c
 8008748:	20008b84 	.word	0x20008b84
 800874c:	20008b7c 	.word	0x20008b7c
 8008750:	20008b78 	.word	0x20008b78

08008754 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <tcp_close_shutdown_fin+0x1c>
 8008762:	4b2e      	ldr	r3, [pc, #184]	; (800881c <tcp_close_shutdown_fin+0xc8>)
 8008764:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008768:	492d      	ldr	r1, [pc, #180]	; (8008820 <tcp_close_shutdown_fin+0xcc>)
 800876a:	482e      	ldr	r0, [pc, #184]	; (8008824 <tcp_close_shutdown_fin+0xd0>)
 800876c:	f008 fcec 	bl	8011148 <iprintf>

  switch (pcb->state) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7d1b      	ldrb	r3, [r3, #20]
 8008774:	2b07      	cmp	r3, #7
 8008776:	d020      	beq.n	80087ba <tcp_close_shutdown_fin+0x66>
 8008778:	2b07      	cmp	r3, #7
 800877a:	dc2b      	bgt.n	80087d4 <tcp_close_shutdown_fin+0x80>
 800877c:	2b03      	cmp	r3, #3
 800877e:	d002      	beq.n	8008786 <tcp_close_shutdown_fin+0x32>
 8008780:	2b04      	cmp	r3, #4
 8008782:	d00d      	beq.n	80087a0 <tcp_close_shutdown_fin+0x4c>
 8008784:	e026      	b.n	80087d4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f003 fee2 	bl	800c550 <tcp_send_fin>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11f      	bne.n	80087d8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2205      	movs	r2, #5
 800879c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800879e:	e01b      	b.n	80087d8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f003 fed5 	bl	800c550 <tcp_send_fin>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80087aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d114      	bne.n	80087dc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2205      	movs	r2, #5
 80087b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80087b8:	e010      	b.n	80087dc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f003 fec8 	bl	800c550 <tcp_send_fin>
 80087c0:	4603      	mov	r3, r0
 80087c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80087c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d109      	bne.n	80087e0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2209      	movs	r2, #9
 80087d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80087d2:	e005      	b.n	80087e0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e01c      	b.n	8008812 <tcp_close_shutdown_fin+0xbe>
      break;
 80087d8:	bf00      	nop
 80087da:	e002      	b.n	80087e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80087dc:	bf00      	nop
 80087de:	e000      	b.n	80087e2 <tcp_close_shutdown_fin+0x8e>
      break;
 80087e0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80087e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f003 ffee 	bl	800c7cc <tcp_output>
 80087f0:	e00d      	b.n	800880e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80087f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fa:	d108      	bne.n	800880e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8b5b      	ldrh	r3, [r3, #26]
 8008800:	f043 0308 	orr.w	r3, r3, #8
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	e001      	b.n	8008812 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800880e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	08012af4 	.word	0x08012af4
 8008820:	08012ba4 	.word	0x08012ba4
 8008824:	08012b38 	.word	0x08012b38

08008828 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d109      	bne.n	800884a <tcp_close+0x22>
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <tcp_close+0x4c>)
 8008838:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800883c:	490e      	ldr	r1, [pc, #56]	; (8008878 <tcp_close+0x50>)
 800883e:	480f      	ldr	r0, [pc, #60]	; (800887c <tcp_close+0x54>)
 8008840:	f008 fc82 	bl	8011148 <iprintf>
 8008844:	f06f 030f 	mvn.w	r3, #15
 8008848:	e00f      	b.n	800886a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7d1b      	ldrb	r3, [r3, #20]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d006      	beq.n	8008860 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	8b5b      	ldrh	r3, [r3, #26]
 8008856:	f043 0310 	orr.w	r3, r3, #16
 800885a:	b29a      	uxth	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008860:	2101      	movs	r1, #1
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fe94 	bl	8008590 <tcp_close_shutdown>
 8008868:	4603      	mov	r3, r0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	08012af4 	.word	0x08012af4
 8008878:	08012c04 	.word	0x08012c04
 800887c:	08012b38 	.word	0x08012b38

08008880 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08e      	sub	sp, #56	; 0x38
 8008884:	af04      	add	r7, sp, #16
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d107      	bne.n	80088a0 <tcp_abandon+0x20>
 8008890:	4b52      	ldr	r3, [pc, #328]	; (80089dc <tcp_abandon+0x15c>)
 8008892:	f240 223d 	movw	r2, #573	; 0x23d
 8008896:	4952      	ldr	r1, [pc, #328]	; (80089e0 <tcp_abandon+0x160>)
 8008898:	4852      	ldr	r0, [pc, #328]	; (80089e4 <tcp_abandon+0x164>)
 800889a:	f008 fc55 	bl	8011148 <iprintf>
 800889e:	e099      	b.n	80089d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	7d1b      	ldrb	r3, [r3, #20]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d106      	bne.n	80088b6 <tcp_abandon+0x36>
 80088a8:	4b4c      	ldr	r3, [pc, #304]	; (80089dc <tcp_abandon+0x15c>)
 80088aa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80088ae:	494e      	ldr	r1, [pc, #312]	; (80089e8 <tcp_abandon+0x168>)
 80088b0:	484c      	ldr	r0, [pc, #304]	; (80089e4 <tcp_abandon+0x164>)
 80088b2:	f008 fc49 	bl	8011148 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	7d1b      	ldrb	r3, [r3, #20]
 80088ba:	2b0a      	cmp	r3, #10
 80088bc:	d107      	bne.n	80088ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	484a      	ldr	r0, [pc, #296]	; (80089ec <tcp_abandon+0x16c>)
 80088c2:	f000 ffc3 	bl	800984c <tcp_pcb_remove>
    tcp_free(pcb);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff fdb0 	bl	800842c <tcp_free>
 80088cc:	e082      	b.n	80089d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7d1b      	ldrb	r3, [r3, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d126      	bne.n	8008946 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	8adb      	ldrh	r3, [r3, #22]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d02e      	beq.n	800895e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008900:	4b3b      	ldr	r3, [pc, #236]	; (80089f0 <tcp_abandon+0x170>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d105      	bne.n	8008916 <tcp_abandon+0x96>
 800890a:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <tcp_abandon+0x170>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4a37      	ldr	r2, [pc, #220]	; (80089f0 <tcp_abandon+0x170>)
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e013      	b.n	800893e <tcp_abandon+0xbe>
 8008916:	4b36      	ldr	r3, [pc, #216]	; (80089f0 <tcp_abandon+0x170>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	61fb      	str	r3, [r7, #28]
 800891c:	e00c      	b.n	8008938 <tcp_abandon+0xb8>
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d104      	bne.n	8008932 <tcp_abandon+0xb2>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	60da      	str	r2, [r3, #12]
 8008930:	e005      	b.n	800893e <tcp_abandon+0xbe>
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	61fb      	str	r3, [r7, #28]
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1ef      	bne.n	800891e <tcp_abandon+0x9e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	60da      	str	r2, [r3, #12]
 8008944:	e00b      	b.n	800895e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	8adb      	ldrh	r3, [r3, #22]
 800894e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	4828      	ldr	r0, [pc, #160]	; (80089f4 <tcp_abandon+0x174>)
 8008954:	f000 ff7a 	bl	800984c <tcp_pcb_remove>
 8008958:	4b27      	ldr	r3, [pc, #156]	; (80089f8 <tcp_abandon+0x178>)
 800895a:	2201      	movs	r2, #1
 800895c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008962:	2b00      	cmp	r3, #0
 8008964:	d004      	beq.n	8008970 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fd1c 	bl	80093a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d004      	beq.n	8008982 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897c:	4618      	mov	r0, r3
 800897e:	f000 fd13 	bl	80093a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008986:	2b00      	cmp	r3, #0
 8008988:	d004      	beq.n	8008994 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fd0a 	bl	80093a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00e      	beq.n	80089b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800899a:	6879      	ldr	r1, [r7, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	8b12      	ldrh	r2, [r2, #24]
 80089a4:	9202      	str	r2, [sp, #8]
 80089a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80089a8:	9201      	str	r2, [sp, #4]
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	460b      	mov	r3, r1
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	69b9      	ldr	r1, [r7, #24]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f004 fcbe 	bl	800d334 <tcp_rst>
    }
    last_state = pcb->state;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	7d1b      	ldrb	r3, [r3, #20]
 80089bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7ff fd34 	bl	800842c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <tcp_abandon+0x154>
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f06f 010c 	mvn.w	r1, #12
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	4798      	blx	r3
  }
}
 80089d4:	3728      	adds	r7, #40	; 0x28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	08012af4 	.word	0x08012af4
 80089e0:	08012c38 	.word	0x08012c38
 80089e4:	08012b38 	.word	0x08012b38
 80089e8:	08012c54 	.word	0x08012c54
 80089ec:	20008b80 	.word	0x20008b80
 80089f0:	20008b7c 	.word	0x20008b7c
 80089f4:	20008b70 	.word	0x20008b70
 80089f8:	20008b6c 	.word	0x20008b6c

080089fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008a04:	2101      	movs	r1, #1
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ff3a 	bl	8008880 <tcp_abandon>
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <tcp_update_rcv_ann_wnd+0x1c>
 8008a22:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <tcp_update_rcv_ann_wnd+0xa4>)
 8008a24:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008a28:	4924      	ldr	r1, [pc, #144]	; (8008abc <tcp_update_rcv_ann_wnd+0xa8>)
 8008a2a:	4825      	ldr	r0, [pc, #148]	; (8008ac0 <tcp_update_rcv_ann_wnd+0xac>)
 8008a2c:	f008 fb8c 	bl	8011148 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8008a38:	4413      	add	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008a44:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008a48:	bf28      	it	cs
 8008a4a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008a4e:	b292      	uxth	r2, r2
 8008a50:	4413      	add	r3, r2
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	db08      	blt.n	8008a6c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	e020      	b.n	8008aae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	dd03      	ble.n	8008a82 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a80:	e014      	b.n	8008aac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a94:	d306      	bcc.n	8008aa4 <tcp_update_rcv_ann_wnd+0x90>
 8008a96:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <tcp_update_rcv_ann_wnd+0xa4>)
 8008a98:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008a9c:	4909      	ldr	r1, [pc, #36]	; (8008ac4 <tcp_update_rcv_ann_wnd+0xb0>)
 8008a9e:	4808      	ldr	r0, [pc, #32]	; (8008ac0 <tcp_update_rcv_ann_wnd+0xac>)
 8008aa0:	f008 fb52 	bl	8011148 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008aac:	2300      	movs	r3, #0
  }
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08012af4 	.word	0x08012af4
 8008abc:	08012d50 	.word	0x08012d50
 8008ac0:	08012b38 	.word	0x08012b38
 8008ac4:	08012d74 	.word	0x08012d74

08008ac8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d107      	bne.n	8008aea <tcp_recved+0x22>
 8008ada:	4b1f      	ldr	r3, [pc, #124]	; (8008b58 <tcp_recved+0x90>)
 8008adc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008ae0:	491e      	ldr	r1, [pc, #120]	; (8008b5c <tcp_recved+0x94>)
 8008ae2:	481f      	ldr	r0, [pc, #124]	; (8008b60 <tcp_recved+0x98>)
 8008ae4:	f008 fb30 	bl	8011148 <iprintf>
 8008ae8:	e032      	b.n	8008b50 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	7d1b      	ldrb	r3, [r3, #20]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d106      	bne.n	8008b00 <tcp_recved+0x38>
 8008af2:	4b19      	ldr	r3, [pc, #100]	; (8008b58 <tcp_recved+0x90>)
 8008af4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008af8:	491a      	ldr	r1, [pc, #104]	; (8008b64 <tcp_recved+0x9c>)
 8008afa:	4819      	ldr	r0, [pc, #100]	; (8008b60 <tcp_recved+0x98>)
 8008afc:	f008 fb24 	bl	8011148 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b04:	887b      	ldrh	r3, [r7, #2]
 8008b06:	4413      	add	r3, r2
 8008b08:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008b0a:	89fb      	ldrh	r3, [r7, #14]
 8008b0c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008b10:	d804      	bhi.n	8008b1c <tcp_recved+0x54>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b16:	89fa      	ldrh	r2, [r7, #14]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d204      	bcs.n	8008b26 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008b22:	851a      	strh	r2, [r3, #40]	; 0x28
 8008b24:	e002      	b.n	8008b2c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	89fa      	ldrh	r2, [r7, #14]
 8008b2a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ff71 	bl	8008a14 <tcp_update_rcv_ann_wnd>
 8008b32:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008b3a:	d309      	bcc.n	8008b50 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8b5b      	ldrh	r3, [r3, #26]
 8008b40:	f043 0302 	orr.w	r3, r3, #2
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f003 fe3e 	bl	800c7cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	08012af4 	.word	0x08012af4
 8008b5c:	08012d90 	.word	0x08012d90
 8008b60:	08012b38 	.word	0x08012b38
 8008b64:	08012da8 	.word	0x08012da8

08008b68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008b68:	b5b0      	push	{r4, r5, r7, lr}
 8008b6a:	b090      	sub	sp, #64	; 0x40
 8008b6c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008b74:	4b94      	ldr	r3, [pc, #592]	; (8008dc8 <tcp_slowtmr+0x260>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a93      	ldr	r2, [pc, #588]	; (8008dc8 <tcp_slowtmr+0x260>)
 8008b7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008b7e:	4b93      	ldr	r3, [pc, #588]	; (8008dcc <tcp_slowtmr+0x264>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	3301      	adds	r3, #1
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4b91      	ldr	r3, [pc, #580]	; (8008dcc <tcp_slowtmr+0x264>)
 8008b88:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008b8e:	4b90      	ldr	r3, [pc, #576]	; (8008dd0 <tcp_slowtmr+0x268>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008b94:	e29f      	b.n	80090d6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	7d1b      	ldrb	r3, [r3, #20]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d106      	bne.n	8008bac <tcp_slowtmr+0x44>
 8008b9e:	4b8d      	ldr	r3, [pc, #564]	; (8008dd4 <tcp_slowtmr+0x26c>)
 8008ba0:	f240 42be 	movw	r2, #1214	; 0x4be
 8008ba4:	498c      	ldr	r1, [pc, #560]	; (8008dd8 <tcp_slowtmr+0x270>)
 8008ba6:	488d      	ldr	r0, [pc, #564]	; (8008ddc <tcp_slowtmr+0x274>)
 8008ba8:	f008 face 	bl	8011148 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	7d1b      	ldrb	r3, [r3, #20]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d106      	bne.n	8008bc2 <tcp_slowtmr+0x5a>
 8008bb4:	4b87      	ldr	r3, [pc, #540]	; (8008dd4 <tcp_slowtmr+0x26c>)
 8008bb6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008bba:	4989      	ldr	r1, [pc, #548]	; (8008de0 <tcp_slowtmr+0x278>)
 8008bbc:	4887      	ldr	r0, [pc, #540]	; (8008ddc <tcp_slowtmr+0x274>)
 8008bbe:	f008 fac3 	bl	8011148 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc4:	7d1b      	ldrb	r3, [r3, #20]
 8008bc6:	2b0a      	cmp	r3, #10
 8008bc8:	d106      	bne.n	8008bd8 <tcp_slowtmr+0x70>
 8008bca:	4b82      	ldr	r3, [pc, #520]	; (8008dd4 <tcp_slowtmr+0x26c>)
 8008bcc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008bd0:	4984      	ldr	r1, [pc, #528]	; (8008de4 <tcp_slowtmr+0x27c>)
 8008bd2:	4882      	ldr	r0, [pc, #520]	; (8008ddc <tcp_slowtmr+0x274>)
 8008bd4:	f008 fab8 	bl	8011148 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	7f9a      	ldrb	r2, [r3, #30]
 8008bdc:	4b7b      	ldr	r3, [pc, #492]	; (8008dcc <tcp_slowtmr+0x264>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d105      	bne.n	8008bf0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008bee:	e272      	b.n	80090d6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008bf0:	4b76      	ldr	r3, [pc, #472]	; (8008dcc <tcp_slowtmr+0x264>)
 8008bf2:	781a      	ldrb	r2, [r3, #0]
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	7d1b      	ldrb	r3, [r3, #20]
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d10a      	bne.n	8008c22 <tcp_slowtmr+0xba>
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c12:	2b05      	cmp	r3, #5
 8008c14:	d905      	bls.n	8008c22 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c20:	e11e      	b.n	8008e60 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c28:	2b0b      	cmp	r3, #11
 8008c2a:	d905      	bls.n	8008c38 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c30:	3301      	adds	r3, #1
 8008c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c36:	e113      	b.n	8008e60 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d075      	beq.n	8008d2e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d006      	beq.n	8008c58 <tcp_slowtmr+0xf0>
 8008c4a:	4b62      	ldr	r3, [pc, #392]	; (8008dd4 <tcp_slowtmr+0x26c>)
 8008c4c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008c50:	4965      	ldr	r1, [pc, #404]	; (8008de8 <tcp_slowtmr+0x280>)
 8008c52:	4862      	ldr	r0, [pc, #392]	; (8008ddc <tcp_slowtmr+0x274>)
 8008c54:	f008 fa78 	bl	8011148 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d106      	bne.n	8008c6e <tcp_slowtmr+0x106>
 8008c60:	4b5c      	ldr	r3, [pc, #368]	; (8008dd4 <tcp_slowtmr+0x26c>)
 8008c62:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008c66:	4961      	ldr	r1, [pc, #388]	; (8008dec <tcp_slowtmr+0x284>)
 8008c68:	485c      	ldr	r0, [pc, #368]	; (8008ddc <tcp_slowtmr+0x274>)
 8008c6a:	f008 fa6d 	bl	8011148 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008c74:	2b0b      	cmp	r3, #11
 8008c76:	d905      	bls.n	8008c84 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c82:	e0ed      	b.n	8008e60 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	4a58      	ldr	r2, [pc, #352]	; (8008df0 <tcp_slowtmr+0x288>)
 8008c8e:	5cd3      	ldrb	r3, [r2, r3]
 8008c90:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008c98:	7c7a      	ldrb	r2, [r7, #17]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d907      	bls.n	8008cae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008cb4:	7c7a      	ldrb	r2, [r7, #17]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	f200 80d2 	bhi.w	8008e60 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d108      	bne.n	8008cdc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ccc:	f004 fc26 	bl	800d51c <tcp_zero_window_probe>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d014      	beq.n	8008d00 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	623b      	str	r3, [r7, #32]
 8008cda:	e011      	b.n	8008d00 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ce6:	f003 faeb 	bl	800c2c0 <tcp_split_unsent_seg>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d107      	bne.n	8008d00 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cf2:	f003 fd6b 	bl	800c7cc <tcp_output>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 80ac 	beq.w	8008e60 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d16:	2b06      	cmp	r3, #6
 8008d18:	f200 80a2 	bhi.w	8008e60 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008d22:	3301      	adds	r3, #1
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008d2c:	e098      	b.n	8008e60 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	db0f      	blt.n	8008d58 <tcp_slowtmr+0x1f0>
 8008d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d008      	beq.n	8008d58 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3301      	adds	r3, #1
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	b21a      	sxth	r2, r3
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008d64:	429a      	cmp	r2, r3
 8008d66:	db7b      	blt.n	8008e60 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d6a:	f004 f821 	bl	800cdb0 <tcp_rexmit_rto_prepare>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d007      	beq.n	8008d84 <tcp_slowtmr+0x21c>
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d171      	bne.n	8008e60 <tcp_slowtmr+0x2f8>
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d06d      	beq.n	8008e60 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d86:	7d1b      	ldrb	r3, [r3, #20]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d03a      	beq.n	8008e02 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d92:	2b0c      	cmp	r3, #12
 8008d94:	bf28      	it	cs
 8008d96:	230c      	movcs	r3, #12
 8008d98:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008da0:	10db      	asrs	r3, r3, #3
 8008da2:	b21b      	sxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008dac:	4413      	add	r3, r2
 8008dae:	7efa      	ldrb	r2, [r7, #27]
 8008db0:	4910      	ldr	r1, [pc, #64]	; (8008df4 <tcp_slowtmr+0x28c>)
 8008db2:	5c8a      	ldrb	r2, [r1, r2]
 8008db4:	4093      	lsls	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	dc1a      	bgt.n	8008df8 <tcp_slowtmr+0x290>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	b21a      	sxth	r2, r3
 8008dc6:	e019      	b.n	8008dfc <tcp_slowtmr+0x294>
 8008dc8:	20008b74 	.word	0x20008b74
 8008dcc:	20000132 	.word	0x20000132
 8008dd0:	20008b70 	.word	0x20008b70
 8008dd4:	08012af4 	.word	0x08012af4
 8008dd8:	08012e38 	.word	0x08012e38
 8008ddc:	08012b38 	.word	0x08012b38
 8008de0:	08012e64 	.word	0x08012e64
 8008de4:	08012e90 	.word	0x08012e90
 8008de8:	08012ec0 	.word	0x08012ec0
 8008dec:	08012ef4 	.word	0x08012ef4
 8008df0:	08014ad0 	.word	0x08014ad0
 8008df4:	08014ac0 	.word	0x08014ac0
 8008df8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	2200      	movs	r2, #0
 8008e06:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008e14:	4293      	cmp	r3, r2
 8008e16:	bf28      	it	cs
 8008e18:	4613      	movcs	r3, r2
 8008e1a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008e1c:	8a7b      	ldrh	r3, [r7, #18]
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d206      	bcs.n	8008e48 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e5c:	f004 f818 	bl	800ce90 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	7d1b      	ldrb	r3, [r3, #20]
 8008e64:	2b06      	cmp	r3, #6
 8008e66:	d111      	bne.n	8008e8c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6a:	8b5b      	ldrh	r3, [r3, #26]
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00b      	beq.n	8008e8c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e74:	4b9d      	ldr	r3, [pc, #628]	; (80090ec <tcp_slowtmr+0x584>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b28      	cmp	r3, #40	; 0x28
 8008e80:	d904      	bls.n	8008e8c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e86:	3301      	adds	r3, #1
 8008e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	7a5b      	ldrb	r3, [r3, #9]
 8008e90:	f003 0308 	and.w	r3, r3, #8
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d04c      	beq.n	8008f32 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008e9c:	2b04      	cmp	r3, #4
 8008e9e:	d003      	beq.n	8008ea8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008ea4:	2b07      	cmp	r3, #7
 8008ea6:	d144      	bne.n	8008f32 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ea8:	4b90      	ldr	r3, [pc, #576]	; (80090ec <tcp_slowtmr+0x584>)
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eb8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008ebc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008ec0:	498b      	ldr	r1, [pc, #556]	; (80090f0 <tcp_slowtmr+0x588>)
 8008ec2:	fba1 1303 	umull	r1, r3, r1, r3
 8008ec6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d90a      	bls.n	8008ee2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008eda:	3301      	adds	r3, #1
 8008edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008ee0:	e027      	b.n	8008f32 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ee2:	4b82      	ldr	r3, [pc, #520]	; (80090ec <tcp_slowtmr+0x584>)
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008ef8:	4618      	mov	r0, r3
 8008efa:	4b7e      	ldr	r3, [pc, #504]	; (80090f4 <tcp_slowtmr+0x58c>)
 8008efc:	fb03 f300 	mul.w	r3, r3, r0
 8008f00:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008f02:	497b      	ldr	r1, [pc, #492]	; (80090f0 <tcp_slowtmr+0x588>)
 8008f04:	fba1 1303 	umull	r1, r3, r1, r3
 8008f08:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d911      	bls.n	8008f32 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008f0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f10:	f004 fac4 	bl	800d49c <tcp_keepalive>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008f1a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d107      	bne.n	8008f32 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008f28:	3301      	adds	r3, #1
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d011      	beq.n	8008f5e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008f3a:	4b6c      	ldr	r3, [pc, #432]	; (80090ec <tcp_slowtmr+0x584>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	440b      	add	r3, r1
 8008f52:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f5a:	f000 fddb 	bl	8009b14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	7d1b      	ldrb	r3, [r3, #20]
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d10b      	bne.n	8008f7e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f66:	4b61      	ldr	r3, [pc, #388]	; (80090ec <tcp_slowtmr+0x584>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	2b28      	cmp	r3, #40	; 0x28
 8008f72:	d904      	bls.n	8008f7e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f78:	3301      	adds	r3, #1
 8008f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f80:	7d1b      	ldrb	r3, [r3, #20]
 8008f82:	2b09      	cmp	r3, #9
 8008f84:	d10b      	bne.n	8008f9e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008f86:	4b59      	ldr	r3, [pc, #356]	; (80090ec <tcp_slowtmr+0x584>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2bf0      	cmp	r3, #240	; 0xf0
 8008f92:	d904      	bls.n	8008f9e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f98:	3301      	adds	r3, #1
 8008f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d060      	beq.n	8009068 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fac:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fb0:	f000 fbfc 	bl	80097ac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d010      	beq.n	8008fdc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008fba:	4b4f      	ldr	r3, [pc, #316]	; (80090f8 <tcp_slowtmr+0x590>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d106      	bne.n	8008fd2 <tcp_slowtmr+0x46a>
 8008fc4:	4b4d      	ldr	r3, [pc, #308]	; (80090fc <tcp_slowtmr+0x594>)
 8008fc6:	f240 526d 	movw	r2, #1389	; 0x56d
 8008fca:	494d      	ldr	r1, [pc, #308]	; (8009100 <tcp_slowtmr+0x598>)
 8008fcc:	484d      	ldr	r0, [pc, #308]	; (8009104 <tcp_slowtmr+0x59c>)
 8008fce:	f008 f8bb 	bl	8011148 <iprintf>
        prev->next = pcb->next;
 8008fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	e00f      	b.n	8008ffc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008fdc:	4b46      	ldr	r3, [pc, #280]	; (80090f8 <tcp_slowtmr+0x590>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d006      	beq.n	8008ff4 <tcp_slowtmr+0x48c>
 8008fe6:	4b45      	ldr	r3, [pc, #276]	; (80090fc <tcp_slowtmr+0x594>)
 8008fe8:	f240 5271 	movw	r2, #1393	; 0x571
 8008fec:	4946      	ldr	r1, [pc, #280]	; (8009108 <tcp_slowtmr+0x5a0>)
 8008fee:	4845      	ldr	r0, [pc, #276]	; (8009104 <tcp_slowtmr+0x59c>)
 8008ff0:	f008 f8aa 	bl	8011148 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	4a3f      	ldr	r2, [pc, #252]	; (80090f8 <tcp_slowtmr+0x590>)
 8008ffa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009000:	2b00      	cmp	r3, #0
 8009002:	d013      	beq.n	800902c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800900c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	3304      	adds	r3, #4
 8009012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009014:	8ad2      	ldrh	r2, [r2, #22]
 8009016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009018:	8b09      	ldrh	r1, [r1, #24]
 800901a:	9102      	str	r1, [sp, #8]
 800901c:	9201      	str	r2, [sp, #4]
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462b      	mov	r3, r5
 8009022:	4622      	mov	r2, r4
 8009024:	4601      	mov	r1, r0
 8009026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009028:	f004 f984 	bl	800d334 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	7d1b      	ldrb	r3, [r3, #20]
 8009036:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009042:	6838      	ldr	r0, [r7, #0]
 8009044:	f7ff f9f2 	bl	800842c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009048:	4b30      	ldr	r3, [pc, #192]	; (800910c <tcp_slowtmr+0x5a4>)
 800904a:	2200      	movs	r2, #0
 800904c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d004      	beq.n	800905e <tcp_slowtmr+0x4f6>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f06f 010c 	mvn.w	r1, #12
 800905a:	68b8      	ldr	r0, [r7, #8]
 800905c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800905e:	4b2b      	ldr	r3, [pc, #172]	; (800910c <tcp_slowtmr+0x5a4>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d037      	beq.n	80090d6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009066:	e590      	b.n	8008b8a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	7f1b      	ldrb	r3, [r3, #28]
 8009076:	3301      	adds	r3, #1
 8009078:	b2da      	uxtb	r2, r3
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800907e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009080:	7f1a      	ldrb	r2, [r3, #28]
 8009082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009084:	7f5b      	ldrb	r3, [r3, #29]
 8009086:	429a      	cmp	r2, r3
 8009088:	d325      	bcc.n	80090d6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	2200      	movs	r2, #0
 800908e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009090:	4b1e      	ldr	r3, [pc, #120]	; (800910c <tcp_slowtmr+0x5a4>)
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <tcp_slowtmr+0x550>
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090a8:	6912      	ldr	r2, [r2, #16]
 80090aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ac:	4610      	mov	r0, r2
 80090ae:	4798      	blx	r3
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80090b6:	e002      	b.n	80090be <tcp_slowtmr+0x556>
 80090b8:	2300      	movs	r3, #0
 80090ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80090be:	4b13      	ldr	r3, [pc, #76]	; (800910c <tcp_slowtmr+0x5a4>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d000      	beq.n	80090c8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80090c6:	e560      	b.n	8008b8a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80090c8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80090d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d2:	f003 fb7b 	bl	800c7cc <tcp_output>
  while (pcb != NULL) {
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f47f ad5c 	bne.w	8008b96 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80090e2:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <tcp_slowtmr+0x5a8>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80090e8:	e067      	b.n	80091ba <tcp_slowtmr+0x652>
 80090ea:	bf00      	nop
 80090ec:	20008b74 	.word	0x20008b74
 80090f0:	10624dd3 	.word	0x10624dd3
 80090f4:	000124f8 	.word	0x000124f8
 80090f8:	20008b70 	.word	0x20008b70
 80090fc:	08012af4 	.word	0x08012af4
 8009100:	08012f2c 	.word	0x08012f2c
 8009104:	08012b38 	.word	0x08012b38
 8009108:	08012f58 	.word	0x08012f58
 800910c:	20008b6c 	.word	0x20008b6c
 8009110:	20008b80 	.word	0x20008b80
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	7d1b      	ldrb	r3, [r3, #20]
 8009118:	2b0a      	cmp	r3, #10
 800911a:	d006      	beq.n	800912a <tcp_slowtmr+0x5c2>
 800911c:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <tcp_slowtmr+0x664>)
 800911e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009122:	492b      	ldr	r1, [pc, #172]	; (80091d0 <tcp_slowtmr+0x668>)
 8009124:	482b      	ldr	r0, [pc, #172]	; (80091d4 <tcp_slowtmr+0x66c>)
 8009126:	f008 f80f 	bl	8011148 <iprintf>
    pcb_remove = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009130:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <tcp_slowtmr+0x670>)
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2bf0      	cmp	r3, #240	; 0xf0
 800913c:	d904      	bls.n	8009148 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800913e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009142:	3301      	adds	r3, #1
 8009144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800914c:	2b00      	cmp	r3, #0
 800914e:	d02f      	beq.n	80091b0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009152:	f000 fb2b 	bl	80097ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	d010      	beq.n	800917e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800915c:	4b1f      	ldr	r3, [pc, #124]	; (80091dc <tcp_slowtmr+0x674>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009162:	429a      	cmp	r2, r3
 8009164:	d106      	bne.n	8009174 <tcp_slowtmr+0x60c>
 8009166:	4b19      	ldr	r3, [pc, #100]	; (80091cc <tcp_slowtmr+0x664>)
 8009168:	f240 52af 	movw	r2, #1455	; 0x5af
 800916c:	491c      	ldr	r1, [pc, #112]	; (80091e0 <tcp_slowtmr+0x678>)
 800916e:	4819      	ldr	r0, [pc, #100]	; (80091d4 <tcp_slowtmr+0x66c>)
 8009170:	f007 ffea 	bl	8011148 <iprintf>
        prev->next = pcb->next;
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	60da      	str	r2, [r3, #12]
 800917c:	e00f      	b.n	800919e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800917e:	4b17      	ldr	r3, [pc, #92]	; (80091dc <tcp_slowtmr+0x674>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009184:	429a      	cmp	r2, r3
 8009186:	d006      	beq.n	8009196 <tcp_slowtmr+0x62e>
 8009188:	4b10      	ldr	r3, [pc, #64]	; (80091cc <tcp_slowtmr+0x664>)
 800918a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800918e:	4915      	ldr	r1, [pc, #84]	; (80091e4 <tcp_slowtmr+0x67c>)
 8009190:	4810      	ldr	r0, [pc, #64]	; (80091d4 <tcp_slowtmr+0x66c>)
 8009192:	f007 ffd9 	bl	8011148 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	4a10      	ldr	r2, [pc, #64]	; (80091dc <tcp_slowtmr+0x674>)
 800919c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80091a8:	69f8      	ldr	r0, [r7, #28]
 80091aa:	f7ff f93f 	bl	800842c <tcp_free>
 80091ae:	e004      	b.n	80091ba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1a9      	bne.n	8009114 <tcp_slowtmr+0x5ac>
    }
  }
}
 80091c0:	bf00      	nop
 80091c2:	bf00      	nop
 80091c4:	3730      	adds	r7, #48	; 0x30
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bdb0      	pop	{r4, r5, r7, pc}
 80091ca:	bf00      	nop
 80091cc:	08012af4 	.word	0x08012af4
 80091d0:	08012f84 	.word	0x08012f84
 80091d4:	08012b38 	.word	0x08012b38
 80091d8:	20008b74 	.word	0x20008b74
 80091dc:	20008b80 	.word	0x20008b80
 80091e0:	08012fb4 	.word	0x08012fb4
 80091e4:	08012fdc 	.word	0x08012fdc

080091e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80091ee:	4b2d      	ldr	r3, [pc, #180]	; (80092a4 <tcp_fasttmr+0xbc>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	4b2b      	ldr	r3, [pc, #172]	; (80092a4 <tcp_fasttmr+0xbc>)
 80091f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80091fa:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <tcp_fasttmr+0xc0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009200:	e048      	b.n	8009294 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	7f9a      	ldrb	r2, [r3, #30]
 8009206:	4b27      	ldr	r3, [pc, #156]	; (80092a4 <tcp_fasttmr+0xbc>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d03f      	beq.n	800928e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800920e:	4b25      	ldr	r3, [pc, #148]	; (80092a4 <tcp_fasttmr+0xbc>)
 8009210:	781a      	ldrb	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	8b5b      	ldrh	r3, [r3, #26]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d010      	beq.n	8009244 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	8b5b      	ldrh	r3, [r3, #26]
 8009226:	f043 0302 	orr.w	r3, r3, #2
 800922a:	b29a      	uxth	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f003 facb 	bl	800c7cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8b5b      	ldrh	r3, [r3, #26]
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	b29a      	uxth	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	8b5b      	ldrh	r3, [r3, #26]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8b5b      	ldrh	r3, [r3, #26]
 8009254:	f023 0308 	bic.w	r3, r3, #8
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff fa78 	bl	8008754 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009272:	4b0e      	ldr	r3, [pc, #56]	; (80092ac <tcp_fasttmr+0xc4>)
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f819 	bl	80092b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800927e:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <tcp_fasttmr+0xc4>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d000      	beq.n	8009288 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009286:	e7b8      	b.n	80091fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	607b      	str	r3, [r7, #4]
 800928c:	e002      	b.n	8009294 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1b3      	bne.n	8009202 <tcp_fasttmr+0x1a>
    }
  }
}
 800929a:	bf00      	nop
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20000132 	.word	0x20000132
 80092a8:	20008b70 	.word	0x20008b70
 80092ac:	20008b6c 	.word	0x20008b6c

080092b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <tcp_process_refused_data+0x22>
 80092be:	4b37      	ldr	r3, [pc, #220]	; (800939c <tcp_process_refused_data+0xec>)
 80092c0:	f240 6209 	movw	r2, #1545	; 0x609
 80092c4:	4936      	ldr	r1, [pc, #216]	; (80093a0 <tcp_process_refused_data+0xf0>)
 80092c6:	4837      	ldr	r0, [pc, #220]	; (80093a4 <tcp_process_refused_data+0xf4>)
 80092c8:	f007 ff3e 	bl	8011148 <iprintf>
 80092cc:	f06f 030f 	mvn.w	r3, #15
 80092d0:	e060      	b.n	8009394 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092d6:	7b5b      	ldrb	r3, [r3, #13]
 80092d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <tcp_process_refused_data+0x58>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6918      	ldr	r0, [r3, #16]
 80092fa:	2300      	movs	r3, #0
 80092fc:	68ba      	ldr	r2, [r7, #8]
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	47a0      	blx	r4
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]
 8009306:	e007      	b.n	8009318 <tcp_process_refused_data+0x68>
 8009308:	2300      	movs	r3, #0
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	6879      	ldr	r1, [r7, #4]
 800930e:	2000      	movs	r0, #0
 8009310:	f000 f8a4 	bl	800945c <tcp_recv_null>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d12a      	bne.n	8009376 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d033      	beq.n	8009392 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009332:	d005      	beq.n	8009340 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009338:	3301      	adds	r3, #1
 800933a:	b29a      	uxth	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00b      	beq.n	8009362 <tcp_process_refused_data+0xb2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6918      	ldr	r0, [r3, #16]
 8009354:	2300      	movs	r3, #0
 8009356:	2200      	movs	r2, #0
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	47a0      	blx	r4
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
 8009360:	e001      	b.n	8009366 <tcp_process_refused_data+0xb6>
 8009362:	2300      	movs	r3, #0
 8009364:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800936a:	f113 0f0d 	cmn.w	r3, #13
 800936e:	d110      	bne.n	8009392 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009370:	f06f 030c 	mvn.w	r3, #12
 8009374:	e00e      	b.n	8009394 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800937a:	f113 0f0d 	cmn.w	r3, #13
 800937e:	d102      	bne.n	8009386 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009380:	f06f 030c 	mvn.w	r3, #12
 8009384:	e006      	b.n	8009394 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800938c:	f06f 0304 	mvn.w	r3, #4
 8009390:	e000      	b.n	8009394 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3714      	adds	r7, #20
 8009398:	46bd      	mov	sp, r7
 800939a:	bd90      	pop	{r4, r7, pc}
 800939c:	08012af4 	.word	0x08012af4
 80093a0:	08013004 	.word	0x08013004
 80093a4:	08012b38 	.word	0x08012b38

080093a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80093b0:	e007      	b.n	80093c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f80a 	bl	80093d2 <tcp_seg_free>
    seg = next;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f4      	bne.n	80093b2 <tcp_segs_free+0xa>
  }
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b082      	sub	sp, #8
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00c      	beq.n	80093fa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fcdb 	bl	8007da8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80093f2:	6879      	ldr	r1, [r7, #4]
 80093f4:	2003      	movs	r0, #3
 80093f6:	f7fd fec5 	bl	8007184 <memp_free>
  }
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d106      	bne.n	8009420 <tcp_seg_copy+0x1c>
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <tcp_seg_copy+0x4c>)
 8009414:	f240 6282 	movw	r2, #1666	; 0x682
 8009418:	490e      	ldr	r1, [pc, #56]	; (8009454 <tcp_seg_copy+0x50>)
 800941a:	480f      	ldr	r0, [pc, #60]	; (8009458 <tcp_seg_copy+0x54>)
 800941c:	f007 fe94 	bl	8011148 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009420:	2003      	movs	r0, #3
 8009422:	f7fd fe63 	bl	80070ec <memp_malloc>
 8009426:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <tcp_seg_copy+0x2e>
    return NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	e00a      	b.n	8009448 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009432:	2210      	movs	r2, #16
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f007 fabe 	bl	80109b8 <memcpy>
  pbuf_ref(cseg->p);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fd51 	bl	8007ee8 <pbuf_ref>
  return cseg;
 8009446:	68fb      	ldr	r3, [r7, #12]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	08012af4 	.word	0x08012af4
 8009454:	08013048 	.word	0x08013048
 8009458:	08012b38 	.word	0x08012b38

0800945c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
 8009468:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d109      	bne.n	8009484 <tcp_recv_null+0x28>
 8009470:	4b12      	ldr	r3, [pc, #72]	; (80094bc <tcp_recv_null+0x60>)
 8009472:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009476:	4912      	ldr	r1, [pc, #72]	; (80094c0 <tcp_recv_null+0x64>)
 8009478:	4812      	ldr	r0, [pc, #72]	; (80094c4 <tcp_recv_null+0x68>)
 800947a:	f007 fe65 	bl	8011148 <iprintf>
 800947e:	f06f 030f 	mvn.w	r3, #15
 8009482:	e016      	b.n	80094b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d009      	beq.n	800949e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	891b      	ldrh	r3, [r3, #8]
 800948e:	4619      	mov	r1, r3
 8009490:	68b8      	ldr	r0, [r7, #8]
 8009492:	f7ff fb19 	bl	8008ac8 <tcp_recved>
    pbuf_free(p);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7fe fc86 	bl	8007da8 <pbuf_free>
 800949c:	e008      	b.n	80094b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800949e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d104      	bne.n	80094b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80094a6:	68b8      	ldr	r0, [r7, #8]
 80094a8:	f7ff f9be 	bl	8008828 <tcp_close>
 80094ac:	4603      	mov	r3, r0
 80094ae:	e000      	b.n	80094b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	08012af4 	.word	0x08012af4
 80094c0:	08013064 	.word	0x08013064
 80094c4:	08012b38 	.word	0x08012b38

080094c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80094d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	db01      	blt.n	80094de <tcp_kill_prio+0x16>
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	e000      	b.n	80094e0 <tcp_kill_prio+0x18>
 80094de:	237f      	movs	r3, #127	; 0x7f
 80094e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d034      	beq.n	8009552 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80094e8:	7afb      	ldrb	r3, [r7, #11]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094f6:	4b19      	ldr	r3, [pc, #100]	; (800955c <tcp_kill_prio+0x94>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	e01f      	b.n	800953e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	7d5b      	ldrb	r3, [r3, #21]
 8009502:	7afa      	ldrb	r2, [r7, #11]
 8009504:	429a      	cmp	r2, r3
 8009506:	d80c      	bhi.n	8009522 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800950c:	7afa      	ldrb	r2, [r7, #11]
 800950e:	429a      	cmp	r2, r3
 8009510:	d112      	bne.n	8009538 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009512:	4b13      	ldr	r3, [pc, #76]	; (8009560 <tcp_kill_prio+0x98>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	429a      	cmp	r2, r3
 8009520:	d80a      	bhi.n	8009538 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <tcp_kill_prio+0x98>)
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	7d5b      	ldrb	r3, [r3, #21]
 8009536:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1dc      	bne.n	80094fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d004      	beq.n	8009554 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800954a:	6938      	ldr	r0, [r7, #16]
 800954c:	f7ff fa56 	bl	80089fc <tcp_abort>
 8009550:	e000      	b.n	8009554 <tcp_kill_prio+0x8c>
    return;
 8009552:	bf00      	nop
  }
}
 8009554:	3718      	adds	r7, #24
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20008b70 	.word	0x20008b70
 8009560:	20008b74 	.word	0x20008b74

08009564 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	2b08      	cmp	r3, #8
 8009572:	d009      	beq.n	8009588 <tcp_kill_state+0x24>
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b09      	cmp	r3, #9
 8009578:	d006      	beq.n	8009588 <tcp_kill_state+0x24>
 800957a:	4b1a      	ldr	r3, [pc, #104]	; (80095e4 <tcp_kill_state+0x80>)
 800957c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009580:	4919      	ldr	r1, [pc, #100]	; (80095e8 <tcp_kill_state+0x84>)
 8009582:	481a      	ldr	r0, [pc, #104]	; (80095ec <tcp_kill_state+0x88>)
 8009584:	f007 fde0 	bl	8011148 <iprintf>

  inactivity = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800958c:	2300      	movs	r3, #0
 800958e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009590:	4b17      	ldr	r3, [pc, #92]	; (80095f0 <tcp_kill_state+0x8c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	e017      	b.n	80095c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	7d1b      	ldrb	r3, [r3, #20]
 800959c:	79fa      	ldrb	r2, [r7, #7]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d10f      	bne.n	80095c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <tcp_kill_state+0x90>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d807      	bhi.n	80095c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <tcp_kill_state+0x90>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	617b      	str	r3, [r7, #20]
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e4      	bne.n	8009598 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d003      	beq.n	80095dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80095d4:	2100      	movs	r1, #0
 80095d6:	6938      	ldr	r0, [r7, #16]
 80095d8:	f7ff f952 	bl	8008880 <tcp_abandon>
  }
}
 80095dc:	bf00      	nop
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	08012af4 	.word	0x08012af4
 80095e8:	08013080 	.word	0x08013080
 80095ec:	08012b38 	.word	0x08012b38
 80095f0:	20008b70 	.word	0x20008b70
 80095f4:	20008b74 	.word	0x20008b74

080095f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009606:	4b12      	ldr	r3, [pc, #72]	; (8009650 <tcp_kill_timewait+0x58>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	e012      	b.n	8009634 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <tcp_kill_timewait+0x5c>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	429a      	cmp	r2, r3
 800961c:	d807      	bhi.n	800962e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <tcp_kill_timewait+0x5c>)
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e9      	bne.n	800960e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009640:	68b8      	ldr	r0, [r7, #8]
 8009642:	f7ff f9db 	bl	80089fc <tcp_abort>
  }
}
 8009646:	bf00      	nop
 8009648:	3710      	adds	r7, #16
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20008b80 	.word	0x20008b80
 8009654:	20008b74 	.word	0x20008b74

08009658 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800965e:	4b10      	ldr	r3, [pc, #64]	; (80096a0 <tcp_handle_closepend+0x48>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009664:	e014      	b.n	8009690 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8b5b      	ldrh	r3, [r3, #26]
 8009670:	f003 0308 	and.w	r3, r3, #8
 8009674:	2b00      	cmp	r3, #0
 8009676:	d009      	beq.n	800968c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	8b5b      	ldrh	r3, [r3, #26]
 800967c:	f023 0308 	bic.w	r3, r3, #8
 8009680:	b29a      	uxth	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff f864 	bl	8008754 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e7      	bne.n	8009666 <tcp_handle_closepend+0xe>
  }
}
 8009696:	bf00      	nop
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20008b70 	.word	0x20008b70

080096a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	4603      	mov	r3, r0
 80096ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80096ae:	2001      	movs	r0, #1
 80096b0:	f7fd fd1c 	bl	80070ec <memp_malloc>
 80096b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d126      	bne.n	800970a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80096bc:	f7ff ffcc 	bl	8009658 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80096c0:	f7ff ff9a 	bl	80095f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80096c4:	2001      	movs	r0, #1
 80096c6:	f7fd fd11 	bl	80070ec <memp_malloc>
 80096ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d11b      	bne.n	800970a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80096d2:	2009      	movs	r0, #9
 80096d4:	f7ff ff46 	bl	8009564 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80096d8:	2001      	movs	r0, #1
 80096da:	f7fd fd07 	bl	80070ec <memp_malloc>
 80096de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d111      	bne.n	800970a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80096e6:	2008      	movs	r0, #8
 80096e8:	f7ff ff3c 	bl	8009564 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80096ec:	2001      	movs	r0, #1
 80096ee:	f7fd fcfd 	bl	80070ec <memp_malloc>
 80096f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d107      	bne.n	800970a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fee3 	bl	80094c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009702:	2001      	movs	r0, #1
 8009704:	f7fd fcf2 	bl	80070ec <memp_malloc>
 8009708:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d03f      	beq.n	8009790 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009710:	229c      	movs	r2, #156	; 0x9c
 8009712:	2100      	movs	r1, #0
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	f007 f977 	bl	8010a08 <memset>
    pcb->prio = prio;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	79fa      	ldrb	r2, [r7, #7]
 800971e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009726:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009730:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	22ff      	movs	r2, #255	; 0xff
 800973e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009746:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2206      	movs	r2, #6
 800974c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2206      	movs	r2, #6
 8009754:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800975c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2201      	movs	r2, #1
 8009762:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009766:	4b0d      	ldr	r3, [pc, #52]	; (800979c <tcp_alloc+0xf8>)
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800976e:	4b0c      	ldr	r3, [pc, #48]	; (80097a0 <tcp_alloc+0xfc>)
 8009770:	781a      	ldrb	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800977c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a08      	ldr	r2, [pc, #32]	; (80097a4 <tcp_alloc+0x100>)
 8009784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4a07      	ldr	r2, [pc, #28]	; (80097a8 <tcp_alloc+0x104>)
 800978c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009790:	68fb      	ldr	r3, [r7, #12]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20008b74 	.word	0x20008b74
 80097a0:	20000132 	.word	0x20000132
 80097a4:	0800945d 	.word	0x0800945d
 80097a8:	006ddd00 	.word	0x006ddd00

080097ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d107      	bne.n	80097ca <tcp_pcb_purge+0x1e>
 80097ba:	4b21      	ldr	r3, [pc, #132]	; (8009840 <tcp_pcb_purge+0x94>)
 80097bc:	f640 0251 	movw	r2, #2129	; 0x851
 80097c0:	4920      	ldr	r1, [pc, #128]	; (8009844 <tcp_pcb_purge+0x98>)
 80097c2:	4821      	ldr	r0, [pc, #132]	; (8009848 <tcp_pcb_purge+0x9c>)
 80097c4:	f007 fcc0 	bl	8011148 <iprintf>
 80097c8:	e037      	b.n	800983a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	7d1b      	ldrb	r3, [r3, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d033      	beq.n	800983a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80097d6:	2b0a      	cmp	r3, #10
 80097d8:	d02f      	beq.n	800983a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d02b      	beq.n	800983a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d007      	beq.n	80097fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fada 	bl	8007da8 <pbuf_free>
      pcb->refused_data = NULL;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f986 	bl	8009b14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800980e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009814:	4618      	mov	r0, r3
 8009816:	f7ff fdc7 	bl	80093a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fdc2 	bl	80093a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	66da      	str	r2, [r3, #108]	; 0x6c
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	08012af4 	.word	0x08012af4
 8009844:	08013140 	.word	0x08013140
 8009848:	08012b38 	.word	0x08012b38

0800984c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <tcp_pcb_remove+0x1e>
 800985c:	4b3e      	ldr	r3, [pc, #248]	; (8009958 <tcp_pcb_remove+0x10c>)
 800985e:	f640 0283 	movw	r2, #2179	; 0x883
 8009862:	493e      	ldr	r1, [pc, #248]	; (800995c <tcp_pcb_remove+0x110>)
 8009864:	483e      	ldr	r0, [pc, #248]	; (8009960 <tcp_pcb_remove+0x114>)
 8009866:	f007 fc6f 	bl	8011148 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <tcp_pcb_remove+0x32>
 8009870:	4b39      	ldr	r3, [pc, #228]	; (8009958 <tcp_pcb_remove+0x10c>)
 8009872:	f640 0284 	movw	r2, #2180	; 0x884
 8009876:	493b      	ldr	r1, [pc, #236]	; (8009964 <tcp_pcb_remove+0x118>)
 8009878:	4839      	ldr	r0, [pc, #228]	; (8009960 <tcp_pcb_remove+0x114>)
 800987a:	f007 fc65 	bl	8011148 <iprintf>

  TCP_RMV(pcblist, pcb);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	683a      	ldr	r2, [r7, #0]
 8009884:	429a      	cmp	r2, r3
 8009886:	d105      	bne.n	8009894 <tcp_pcb_remove+0x48>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e013      	b.n	80098bc <tcp_pcb_remove+0x70>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	e00c      	b.n	80098b6 <tcp_pcb_remove+0x6a>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d104      	bne.n	80098b0 <tcp_pcb_remove+0x64>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	60da      	str	r2, [r3, #12]
 80098ae:	e005      	b.n	80098bc <tcp_pcb_remove+0x70>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1ef      	bne.n	800989c <tcp_pcb_remove+0x50>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80098c2:	6838      	ldr	r0, [r7, #0]
 80098c4:	f7ff ff72 	bl	80097ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	7d1b      	ldrb	r3, [r3, #20]
 80098cc:	2b0a      	cmp	r3, #10
 80098ce:	d013      	beq.n	80098f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d00f      	beq.n	80098f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	8b5b      	ldrh	r3, [r3, #26]
 80098dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d009      	beq.n	80098f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	8b5b      	ldrh	r3, [r3, #26]
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80098f2:	6838      	ldr	r0, [r7, #0]
 80098f4:	f002 ff6a 	bl	800c7cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	7d1b      	ldrb	r3, [r3, #20]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d020      	beq.n	8009942 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d006      	beq.n	8009916 <tcp_pcb_remove+0xca>
 8009908:	4b13      	ldr	r3, [pc, #76]	; (8009958 <tcp_pcb_remove+0x10c>)
 800990a:	f640 0293 	movw	r2, #2195	; 0x893
 800990e:	4916      	ldr	r1, [pc, #88]	; (8009968 <tcp_pcb_remove+0x11c>)
 8009910:	4813      	ldr	r0, [pc, #76]	; (8009960 <tcp_pcb_remove+0x114>)
 8009912:	f007 fc19 	bl	8011148 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800991a:	2b00      	cmp	r3, #0
 800991c:	d006      	beq.n	800992c <tcp_pcb_remove+0xe0>
 800991e:	4b0e      	ldr	r3, [pc, #56]	; (8009958 <tcp_pcb_remove+0x10c>)
 8009920:	f640 0294 	movw	r2, #2196	; 0x894
 8009924:	4911      	ldr	r1, [pc, #68]	; (800996c <tcp_pcb_remove+0x120>)
 8009926:	480e      	ldr	r0, [pc, #56]	; (8009960 <tcp_pcb_remove+0x114>)
 8009928:	f007 fc0e 	bl	8011148 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <tcp_pcb_remove+0xf6>
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <tcp_pcb_remove+0x10c>)
 8009936:	f640 0296 	movw	r2, #2198	; 0x896
 800993a:	490d      	ldr	r1, [pc, #52]	; (8009970 <tcp_pcb_remove+0x124>)
 800993c:	4808      	ldr	r0, [pc, #32]	; (8009960 <tcp_pcb_remove+0x114>)
 800993e:	f007 fc03 	bl	8011148 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2200      	movs	r2, #0
 8009946:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2200      	movs	r2, #0
 800994c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800994e:	bf00      	nop
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	08012af4 	.word	0x08012af4
 800995c:	0801315c 	.word	0x0801315c
 8009960:	08012b38 	.word	0x08012b38
 8009964:	08013178 	.word	0x08013178
 8009968:	08013198 	.word	0x08013198
 800996c:	080131b0 	.word	0x080131b0
 8009970:	080131cc 	.word	0x080131cc

08009974 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <tcp_next_iss+0x1c>
 8009982:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <tcp_next_iss+0x38>)
 8009984:	f640 02af 	movw	r2, #2223	; 0x8af
 8009988:	4909      	ldr	r1, [pc, #36]	; (80099b0 <tcp_next_iss+0x3c>)
 800998a:	480a      	ldr	r0, [pc, #40]	; (80099b4 <tcp_next_iss+0x40>)
 800998c:	f007 fbdc 	bl	8011148 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009990:	4b09      	ldr	r3, [pc, #36]	; (80099b8 <tcp_next_iss+0x44>)
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	4b09      	ldr	r3, [pc, #36]	; (80099bc <tcp_next_iss+0x48>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4413      	add	r3, r2
 800999a:	4a07      	ldr	r2, [pc, #28]	; (80099b8 <tcp_next_iss+0x44>)
 800999c:	6013      	str	r3, [r2, #0]
  return iss;
 800999e:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <tcp_next_iss+0x44>)
 80099a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	08012af4 	.word	0x08012af4
 80099b0:	080131e4 	.word	0x080131e4
 80099b4:	08012b38 	.word	0x08012b38
 80099b8:	2000002c 	.word	0x2000002c
 80099bc:	20008b74 	.word	0x20008b74

080099c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	4603      	mov	r3, r0
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d106      	bne.n	80099e2 <tcp_eff_send_mss_netif+0x22>
 80099d4:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <tcp_eff_send_mss_netif+0x68>)
 80099d6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80099da:	4914      	ldr	r1, [pc, #80]	; (8009a2c <tcp_eff_send_mss_netif+0x6c>)
 80099dc:	4814      	ldr	r0, [pc, #80]	; (8009a30 <tcp_eff_send_mss_netif+0x70>)
 80099de:	f007 fbb3 	bl	8011148 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80099e8:	89fb      	ldrh	r3, [r7, #14]
 80099ea:	e019      	b.n	8009a20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80099f2:	8afb      	ldrh	r3, [r7, #22]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d012      	beq.n	8009a1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80099f8:	2328      	movs	r3, #40	; 0x28
 80099fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80099fc:	8afa      	ldrh	r2, [r7, #22]
 80099fe:	8abb      	ldrh	r3, [r7, #20]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d904      	bls.n	8009a0e <tcp_eff_send_mss_netif+0x4e>
 8009a04:	8afa      	ldrh	r2, [r7, #22]
 8009a06:	8abb      	ldrh	r3, [r7, #20]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	e000      	b.n	8009a10 <tcp_eff_send_mss_netif+0x50>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009a12:	8a7a      	ldrh	r2, [r7, #18]
 8009a14:	89fb      	ldrh	r3, [r7, #14]
 8009a16:	4293      	cmp	r3, r2
 8009a18:	bf28      	it	cs
 8009a1a:	4613      	movcs	r3, r2
 8009a1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009a1e:	89fb      	ldrh	r3, [r7, #14]
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	08012af4 	.word	0x08012af4
 8009a2c:	08013200 	.word	0x08013200
 8009a30:	08012b38 	.word	0x08012b38

08009a34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d119      	bne.n	8009a7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009a48:	4b10      	ldr	r3, [pc, #64]	; (8009a8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009a4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009a4e:	4910      	ldr	r1, [pc, #64]	; (8009a90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009a50:	4810      	ldr	r0, [pc, #64]	; (8009a94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009a52:	f007 fb79 	bl	8011148 <iprintf>

  while (pcb != NULL) {
 8009a56:	e011      	b.n	8009a7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d108      	bne.n	8009a76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7fe ffc6 	bl	80089fc <tcp_abort>
      pcb = next;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	e002      	b.n	8009a7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1ea      	bne.n	8009a58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	08012af4 	.word	0x08012af4
 8009a90:	08013228 	.word	0x08013228
 8009a94:	08012b38 	.word	0x08012b38

08009a98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d02a      	beq.n	8009afe <tcp_netif_ip_addr_changed+0x66>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d026      	beq.n	8009afe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009ab0:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <tcp_netif_ip_addr_changed+0x70>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff ffbc 	bl	8009a34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009abc:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <tcp_netif_ip_addr_changed+0x74>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f7ff ffb6 	bl	8009a34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d017      	beq.n	8009afe <tcp_netif_ip_addr_changed+0x66>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d013      	beq.n	8009afe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009ad6:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <tcp_netif_ip_addr_changed+0x78>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	e00c      	b.n	8009af8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d103      	bne.n	8009af2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1ef      	bne.n	8009ade <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009afe:	bf00      	nop
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20008b70 	.word	0x20008b70
 8009b0c:	20008b7c 	.word	0x20008b7c
 8009b10:	20008b78 	.word	0x20008b78

08009b14 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fc3d 	bl	80093a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b08d      	sub	sp, #52	; 0x34
 8009b40:	af04      	add	r7, sp, #16
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d105      	bne.n	8009b58 <tcp_input+0x1c>
 8009b4c:	4b9b      	ldr	r3, [pc, #620]	; (8009dbc <tcp_input+0x280>)
 8009b4e:	2283      	movs	r2, #131	; 0x83
 8009b50:	499b      	ldr	r1, [pc, #620]	; (8009dc0 <tcp_input+0x284>)
 8009b52:	489c      	ldr	r0, [pc, #624]	; (8009dc4 <tcp_input+0x288>)
 8009b54:	f007 faf8 	bl	8011148 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	4a9a      	ldr	r2, [pc, #616]	; (8009dc8 <tcp_input+0x28c>)
 8009b5e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	895b      	ldrh	r3, [r3, #10]
 8009b64:	2b13      	cmp	r3, #19
 8009b66:	f240 83c4 	bls.w	800a2f2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009b6a:	4b98      	ldr	r3, [pc, #608]	; (8009dcc <tcp_input+0x290>)
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	4a97      	ldr	r2, [pc, #604]	; (8009dcc <tcp_input+0x290>)
 8009b70:	6812      	ldr	r2, [r2, #0]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f005 ff61 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f040 83ba 	bne.w	800a2f6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009b82:	4b92      	ldr	r3, [pc, #584]	; (8009dcc <tcp_input+0x290>)
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009b8a:	2be0      	cmp	r3, #224	; 0xe0
 8009b8c:	f000 83b3 	beq.w	800a2f6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009b90:	4b8d      	ldr	r3, [pc, #564]	; (8009dc8 <tcp_input+0x28c>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	899b      	ldrh	r3, [r3, #12]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fc fe51 	bl	8006840 <lwip_htons>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	0b1b      	lsrs	r3, r3, #12
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009baa:	7cbb      	ldrb	r3, [r7, #18]
 8009bac:	2b13      	cmp	r3, #19
 8009bae:	f240 83a4 	bls.w	800a2fa <tcp_input+0x7be>
 8009bb2:	7cbb      	ldrb	r3, [r7, #18]
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	891b      	ldrh	r3, [r3, #8]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	f200 839d 	bhi.w	800a2fa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009bc0:	7cbb      	ldrb	r3, [r7, #18]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	3b14      	subs	r3, #20
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	4b81      	ldr	r3, [pc, #516]	; (8009dd0 <tcp_input+0x294>)
 8009bca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009bcc:	4b81      	ldr	r3, [pc, #516]	; (8009dd4 <tcp_input+0x298>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	895a      	ldrh	r2, [r3, #10]
 8009bd6:	7cbb      	ldrb	r3, [r7, #18]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d309      	bcc.n	8009bf2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009bde:	4b7c      	ldr	r3, [pc, #496]	; (8009dd0 <tcp_input+0x294>)
 8009be0:	881a      	ldrh	r2, [r3, #0]
 8009be2:	4b7d      	ldr	r3, [pc, #500]	; (8009dd8 <tcp_input+0x29c>)
 8009be4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009be6:	7cbb      	ldrb	r3, [r7, #18]
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fe f856 	bl	8007c9c <pbuf_remove_header>
 8009bf0:	e04e      	b.n	8009c90 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d105      	bne.n	8009c06 <tcp_input+0xca>
 8009bfa:	4b70      	ldr	r3, [pc, #448]	; (8009dbc <tcp_input+0x280>)
 8009bfc:	22c2      	movs	r2, #194	; 0xc2
 8009bfe:	4977      	ldr	r1, [pc, #476]	; (8009ddc <tcp_input+0x2a0>)
 8009c00:	4870      	ldr	r0, [pc, #448]	; (8009dc4 <tcp_input+0x288>)
 8009c02:	f007 faa1 	bl	8011148 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009c06:	2114      	movs	r1, #20
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7fe f847 	bl	8007c9c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	895a      	ldrh	r2, [r3, #10]
 8009c12:	4b71      	ldr	r3, [pc, #452]	; (8009dd8 <tcp_input+0x29c>)
 8009c14:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009c16:	4b6e      	ldr	r3, [pc, #440]	; (8009dd0 <tcp_input+0x294>)
 8009c18:	881a      	ldrh	r2, [r3, #0]
 8009c1a:	4b6f      	ldr	r3, [pc, #444]	; (8009dd8 <tcp_input+0x29c>)
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009c22:	4b6d      	ldr	r3, [pc, #436]	; (8009dd8 <tcp_input+0x29c>)
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7fe f837 	bl	8007c9c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	895b      	ldrh	r3, [r3, #10]
 8009c34:	8a3a      	ldrh	r2, [r7, #16]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	f200 8361 	bhi.w	800a2fe <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	4a64      	ldr	r2, [pc, #400]	; (8009dd4 <tcp_input+0x298>)
 8009c44:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	8a3a      	ldrh	r2, [r7, #16]
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe f824 	bl	8007c9c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	891a      	ldrh	r2, [r3, #8]
 8009c58:	8a3b      	ldrh	r3, [r7, #16]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	895b      	ldrh	r3, [r3, #10]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d005      	beq.n	8009c76 <tcp_input+0x13a>
 8009c6a:	4b54      	ldr	r3, [pc, #336]	; (8009dbc <tcp_input+0x280>)
 8009c6c:	22df      	movs	r2, #223	; 0xdf
 8009c6e:	495c      	ldr	r1, [pc, #368]	; (8009de0 <tcp_input+0x2a4>)
 8009c70:	4854      	ldr	r0, [pc, #336]	; (8009dc4 <tcp_input+0x288>)
 8009c72:	f007 fa69 	bl	8011148 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	891a      	ldrh	r2, [r3, #8]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d005      	beq.n	8009c90 <tcp_input+0x154>
 8009c84:	4b4d      	ldr	r3, [pc, #308]	; (8009dbc <tcp_input+0x280>)
 8009c86:	22e0      	movs	r2, #224	; 0xe0
 8009c88:	4956      	ldr	r1, [pc, #344]	; (8009de4 <tcp_input+0x2a8>)
 8009c8a:	484e      	ldr	r0, [pc, #312]	; (8009dc4 <tcp_input+0x288>)
 8009c8c:	f007 fa5c 	bl	8011148 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009c90:	4b4d      	ldr	r3, [pc, #308]	; (8009dc8 <tcp_input+0x28c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4a4b      	ldr	r2, [pc, #300]	; (8009dc8 <tcp_input+0x28c>)
 8009c9a:	6814      	ldr	r4, [r2, #0]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7fc fdcf 	bl	8006840 <lwip_htons>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009ca6:	4b48      	ldr	r3, [pc, #288]	; (8009dc8 <tcp_input+0x28c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	885b      	ldrh	r3, [r3, #2]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	4a46      	ldr	r2, [pc, #280]	; (8009dc8 <tcp_input+0x28c>)
 8009cb0:	6814      	ldr	r4, [r2, #0]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7fc fdc4 	bl	8006840 <lwip_htons>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009cbc:	4b42      	ldr	r3, [pc, #264]	; (8009dc8 <tcp_input+0x28c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	4a41      	ldr	r2, [pc, #260]	; (8009dc8 <tcp_input+0x28c>)
 8009cc4:	6814      	ldr	r4, [r2, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fc fdcf 	bl	800686a <lwip_htonl>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	6863      	ldr	r3, [r4, #4]
 8009cd2:	4a45      	ldr	r2, [pc, #276]	; (8009de8 <tcp_input+0x2ac>)
 8009cd4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009cd6:	4b3c      	ldr	r3, [pc, #240]	; (8009dc8 <tcp_input+0x28c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	4a3a      	ldr	r2, [pc, #232]	; (8009dc8 <tcp_input+0x28c>)
 8009cde:	6814      	ldr	r4, [r2, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fc fdc2 	bl	800686a <lwip_htonl>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	60a3      	str	r3, [r4, #8]
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	4a3f      	ldr	r2, [pc, #252]	; (8009dec <tcp_input+0x2b0>)
 8009cee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009cf0:	4b35      	ldr	r3, [pc, #212]	; (8009dc8 <tcp_input+0x28c>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	89db      	ldrh	r3, [r3, #14]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	4a33      	ldr	r2, [pc, #204]	; (8009dc8 <tcp_input+0x28c>)
 8009cfa:	6814      	ldr	r4, [r2, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fc fd9f 	bl	8006840 <lwip_htons>
 8009d02:	4603      	mov	r3, r0
 8009d04:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009d06:	4b30      	ldr	r3, [pc, #192]	; (8009dc8 <tcp_input+0x28c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	899b      	ldrh	r3, [r3, #12]
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fc fd96 	bl	8006840 <lwip_htons>
 8009d14:	4603      	mov	r3, r0
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	4b34      	ldr	r3, [pc, #208]	; (8009df0 <tcp_input+0x2b4>)
 8009d20:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	891a      	ldrh	r2, [r3, #8]
 8009d26:	4b33      	ldr	r3, [pc, #204]	; (8009df4 <tcp_input+0x2b8>)
 8009d28:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009d2a:	4b31      	ldr	r3, [pc, #196]	; (8009df0 <tcp_input+0x2b4>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	f003 0303 	and.w	r3, r3, #3
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00c      	beq.n	8009d50 <tcp_input+0x214>
    tcplen++;
 8009d36:	4b2f      	ldr	r3, [pc, #188]	; (8009df4 <tcp_input+0x2b8>)
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	4b2d      	ldr	r3, [pc, #180]	; (8009df4 <tcp_input+0x2b8>)
 8009d40:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	891a      	ldrh	r2, [r3, #8]
 8009d46:	4b2b      	ldr	r3, [pc, #172]	; (8009df4 <tcp_input+0x2b8>)
 8009d48:	881b      	ldrh	r3, [r3, #0]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	f200 82d9 	bhi.w	800a302 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d54:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <tcp_input+0x2bc>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	61fb      	str	r3, [r7, #28]
 8009d5a:	e09d      	b.n	8009e98 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	7d1b      	ldrb	r3, [r3, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d105      	bne.n	8009d70 <tcp_input+0x234>
 8009d64:	4b15      	ldr	r3, [pc, #84]	; (8009dbc <tcp_input+0x280>)
 8009d66:	22fb      	movs	r2, #251	; 0xfb
 8009d68:	4924      	ldr	r1, [pc, #144]	; (8009dfc <tcp_input+0x2c0>)
 8009d6a:	4816      	ldr	r0, [pc, #88]	; (8009dc4 <tcp_input+0x288>)
 8009d6c:	f007 f9ec 	bl	8011148 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	7d1b      	ldrb	r3, [r3, #20]
 8009d74:	2b0a      	cmp	r3, #10
 8009d76:	d105      	bne.n	8009d84 <tcp_input+0x248>
 8009d78:	4b10      	ldr	r3, [pc, #64]	; (8009dbc <tcp_input+0x280>)
 8009d7a:	22fc      	movs	r2, #252	; 0xfc
 8009d7c:	4920      	ldr	r1, [pc, #128]	; (8009e00 <tcp_input+0x2c4>)
 8009d7e:	4811      	ldr	r0, [pc, #68]	; (8009dc4 <tcp_input+0x288>)
 8009d80:	f007 f9e2 	bl	8011148 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	7d1b      	ldrb	r3, [r3, #20]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d105      	bne.n	8009d98 <tcp_input+0x25c>
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <tcp_input+0x280>)
 8009d8e:	22fd      	movs	r2, #253	; 0xfd
 8009d90:	491c      	ldr	r1, [pc, #112]	; (8009e04 <tcp_input+0x2c8>)
 8009d92:	480c      	ldr	r0, [pc, #48]	; (8009dc4 <tcp_input+0x288>)
 8009d94:	f007 f9d8 	bl	8011148 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	7a1b      	ldrb	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d033      	beq.n	8009e08 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	7a1a      	ldrb	r2, [r3, #8]
 8009da4:	4b09      	ldr	r3, [pc, #36]	; (8009dcc <tcp_input+0x290>)
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009dac:	3301      	adds	r3, #1
 8009dae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d029      	beq.n	8009e08 <tcp_input+0x2cc>
      prev = pcb;
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	61bb      	str	r3, [r7, #24]
      continue;
 8009db8:	e06b      	b.n	8009e92 <tcp_input+0x356>
 8009dba:	bf00      	nop
 8009dbc:	0801325c 	.word	0x0801325c
 8009dc0:	08013290 	.word	0x08013290
 8009dc4:	080132a8 	.word	0x080132a8
 8009dc8:	20000144 	.word	0x20000144
 8009dcc:	2000346c 	.word	0x2000346c
 8009dd0:	20000148 	.word	0x20000148
 8009dd4:	2000014c 	.word	0x2000014c
 8009dd8:	2000014a 	.word	0x2000014a
 8009ddc:	080132d0 	.word	0x080132d0
 8009de0:	080132e0 	.word	0x080132e0
 8009de4:	080132ec 	.word	0x080132ec
 8009de8:	20000154 	.word	0x20000154
 8009dec:	20000158 	.word	0x20000158
 8009df0:	20000160 	.word	0x20000160
 8009df4:	2000015e 	.word	0x2000015e
 8009df8:	20008b70 	.word	0x20008b70
 8009dfc:	0801330c 	.word	0x0801330c
 8009e00:	08013334 	.word	0x08013334
 8009e04:	08013360 	.word	0x08013360
    }

    if (pcb->remote_port == tcphdr->src &&
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	8b1a      	ldrh	r2, [r3, #24]
 8009e0c:	4b94      	ldr	r3, [pc, #592]	; (800a060 <tcp_input+0x524>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d13a      	bne.n	8009e8e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	8ada      	ldrh	r2, [r3, #22]
 8009e1c:	4b90      	ldr	r3, [pc, #576]	; (800a060 <tcp_input+0x524>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	885b      	ldrh	r3, [r3, #2]
 8009e22:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d132      	bne.n	8009e8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	4b8d      	ldr	r3, [pc, #564]	; (800a064 <tcp_input+0x528>)
 8009e2e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d12c      	bne.n	8009e8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	4b8a      	ldr	r3, [pc, #552]	; (800a064 <tcp_input+0x528>)
 8009e3a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d126      	bne.n	8009e8e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	69fa      	ldr	r2, [r7, #28]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d106      	bne.n	8009e58 <tcp_input+0x31c>
 8009e4a:	4b87      	ldr	r3, [pc, #540]	; (800a068 <tcp_input+0x52c>)
 8009e4c:	f240 120d 	movw	r2, #269	; 0x10d
 8009e50:	4986      	ldr	r1, [pc, #536]	; (800a06c <tcp_input+0x530>)
 8009e52:	4887      	ldr	r0, [pc, #540]	; (800a070 <tcp_input+0x534>)
 8009e54:	f007 f978 	bl	8011148 <iprintf>
      if (prev != NULL) {
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <tcp_input+0x338>
        prev->next = pcb->next;
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	68da      	ldr	r2, [r3, #12]
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009e66:	4b83      	ldr	r3, [pc, #524]	; (800a074 <tcp_input+0x538>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009e6e:	4a81      	ldr	r2, [pc, #516]	; (800a074 <tcp_input+0x538>)
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d111      	bne.n	8009ea2 <tcp_input+0x366>
 8009e7e:	4b7a      	ldr	r3, [pc, #488]	; (800a068 <tcp_input+0x52c>)
 8009e80:	f240 1215 	movw	r2, #277	; 0x115
 8009e84:	497c      	ldr	r1, [pc, #496]	; (800a078 <tcp_input+0x53c>)
 8009e86:	487a      	ldr	r0, [pc, #488]	; (800a070 <tcp_input+0x534>)
 8009e88:	f007 f95e 	bl	8011148 <iprintf>
      break;
 8009e8c:	e009      	b.n	8009ea2 <tcp_input+0x366>
    }
    prev = pcb;
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	61fb      	str	r3, [r7, #28]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f47f af5e 	bne.w	8009d5c <tcp_input+0x220>
 8009ea0:	e000      	b.n	8009ea4 <tcp_input+0x368>
      break;
 8009ea2:	bf00      	nop
  }

  if (pcb == NULL) {
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f040 8095 	bne.w	8009fd6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009eac:	4b73      	ldr	r3, [pc, #460]	; (800a07c <tcp_input+0x540>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	e03f      	b.n	8009f34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	7d1b      	ldrb	r3, [r3, #20]
 8009eb8:	2b0a      	cmp	r3, #10
 8009eba:	d006      	beq.n	8009eca <tcp_input+0x38e>
 8009ebc:	4b6a      	ldr	r3, [pc, #424]	; (800a068 <tcp_input+0x52c>)
 8009ebe:	f240 121f 	movw	r2, #287	; 0x11f
 8009ec2:	496f      	ldr	r1, [pc, #444]	; (800a080 <tcp_input+0x544>)
 8009ec4:	486a      	ldr	r0, [pc, #424]	; (800a070 <tcp_input+0x534>)
 8009ec6:	f007 f93f 	bl	8011148 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	7a1b      	ldrb	r3, [r3, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d009      	beq.n	8009ee6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	7a1a      	ldrb	r2, [r3, #8]
 8009ed6:	4b63      	ldr	r3, [pc, #396]	; (800a064 <tcp_input+0x528>)
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ede:	3301      	adds	r3, #1
 8009ee0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d122      	bne.n	8009f2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	8b1a      	ldrh	r2, [r3, #24]
 8009eea:	4b5d      	ldr	r3, [pc, #372]	; (800a060 <tcp_input+0x524>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d11b      	bne.n	8009f2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	8ada      	ldrh	r2, [r3, #22]
 8009efa:	4b59      	ldr	r3, [pc, #356]	; (800a060 <tcp_input+0x524>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	885b      	ldrh	r3, [r3, #2]
 8009f00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d113      	bne.n	8009f2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	4b56      	ldr	r3, [pc, #344]	; (800a064 <tcp_input+0x528>)
 8009f0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d10d      	bne.n	8009f2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	4b53      	ldr	r3, [pc, #332]	; (800a064 <tcp_input+0x528>)
 8009f18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d107      	bne.n	8009f2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009f1e:	69f8      	ldr	r0, [r7, #28]
 8009f20:	f000 fb54 	bl	800a5cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7fd ff3f 	bl	8007da8 <pbuf_free>
        return;
 8009f2a:	e1f0      	b.n	800a30e <tcp_input+0x7d2>
        continue;
 8009f2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	61fb      	str	r3, [r7, #28]
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1bc      	bne.n	8009eb4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f3e:	4b51      	ldr	r3, [pc, #324]	; (800a084 <tcp_input+0x548>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	e02a      	b.n	8009f9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	7a1b      	ldrb	r3, [r3, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00c      	beq.n	8009f68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	7a1a      	ldrb	r2, [r3, #8]
 8009f52:	4b44      	ldr	r3, [pc, #272]	; (800a064 <tcp_input+0x528>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d002      	beq.n	8009f68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	61bb      	str	r3, [r7, #24]
        continue;
 8009f66:	e016      	b.n	8009f96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	8ada      	ldrh	r2, [r3, #22]
 8009f6c:	4b3c      	ldr	r3, [pc, #240]	; (800a060 <tcp_input+0x524>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	885b      	ldrh	r3, [r3, #2]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d10c      	bne.n	8009f92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	4b39      	ldr	r3, [pc, #228]	; (800a064 <tcp_input+0x528>)
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d00f      	beq.n	8009fa4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <tcp_input+0x46a>
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d009      	beq.n	8009fa6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1d1      	bne.n	8009f46 <tcp_input+0x40a>
 8009fa2:	e000      	b.n	8009fa6 <tcp_input+0x46a>
            break;
 8009fa4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d014      	beq.n	8009fd6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	68da      	ldr	r2, [r3, #12]
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009fba:	4b32      	ldr	r3, [pc, #200]	; (800a084 <tcp_input+0x548>)
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009fc2:	4a30      	ldr	r2, [pc, #192]	; (800a084 <tcp_input+0x548>)
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009fc8:	6978      	ldr	r0, [r7, #20]
 8009fca:	f000 fa01 	bl	800a3d0 <tcp_listen_input>
      }
      pbuf_free(p);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fd feea 	bl	8007da8 <pbuf_free>
      return;
 8009fd4:	e19b      	b.n	800a30e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8160 	beq.w	800a29e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009fde:	4b2a      	ldr	r3, [pc, #168]	; (800a088 <tcp_input+0x54c>)
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	891a      	ldrh	r2, [r3, #8]
 8009fe8:	4b27      	ldr	r3, [pc, #156]	; (800a088 <tcp_input+0x54c>)
 8009fea:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009fec:	4a26      	ldr	r2, [pc, #152]	; (800a088 <tcp_input+0x54c>)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	; (800a060 <tcp_input+0x524>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a24      	ldr	r2, [pc, #144]	; (800a088 <tcp_input+0x54c>)
 8009ff8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009ffa:	4b24      	ldr	r3, [pc, #144]	; (800a08c <tcp_input+0x550>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a000:	4b23      	ldr	r3, [pc, #140]	; (800a090 <tcp_input+0x554>)
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a006:	4b23      	ldr	r3, [pc, #140]	; (800a094 <tcp_input+0x558>)
 800a008:	2200      	movs	r2, #0
 800a00a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a00c:	4b22      	ldr	r3, [pc, #136]	; (800a098 <tcp_input+0x55c>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d006      	beq.n	800a026 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7b5b      	ldrb	r3, [r3, #13]
 800a01c:	f043 0301 	orr.w	r3, r3, #1
 800a020:	b2da      	uxtb	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d038      	beq.n	800a0a0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a02e:	69f8      	ldr	r0, [r7, #28]
 800a030:	f7ff f93e 	bl	80092b0 <tcp_process_refused_data>
 800a034:	4603      	mov	r3, r0
 800a036:	f113 0f0d 	cmn.w	r3, #13
 800a03a:	d007      	beq.n	800a04c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a040:	2b00      	cmp	r3, #0
 800a042:	d02d      	beq.n	800a0a0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a044:	4b15      	ldr	r3, [pc, #84]	; (800a09c <tcp_input+0x560>)
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d029      	beq.n	800a0a0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a050:	2b00      	cmp	r3, #0
 800a052:	f040 8104 	bne.w	800a25e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a056:	69f8      	ldr	r0, [r7, #28]
 800a058:	f003 f9be 	bl	800d3d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a05c:	e0ff      	b.n	800a25e <tcp_input+0x722>
 800a05e:	bf00      	nop
 800a060:	20000144 	.word	0x20000144
 800a064:	2000346c 	.word	0x2000346c
 800a068:	0801325c 	.word	0x0801325c
 800a06c:	08013388 	.word	0x08013388
 800a070:	080132a8 	.word	0x080132a8
 800a074:	20008b70 	.word	0x20008b70
 800a078:	080133b4 	.word	0x080133b4
 800a07c:	20008b80 	.word	0x20008b80
 800a080:	080133e0 	.word	0x080133e0
 800a084:	20008b78 	.word	0x20008b78
 800a088:	20000134 	.word	0x20000134
 800a08c:	20000164 	.word	0x20000164
 800a090:	20000161 	.word	0x20000161
 800a094:	2000015c 	.word	0x2000015c
 800a098:	20000160 	.word	0x20000160
 800a09c:	2000015e 	.word	0x2000015e
      }
    }
    tcp_input_pcb = pcb;
 800a0a0:	4a9c      	ldr	r2, [pc, #624]	; (800a314 <tcp_input+0x7d8>)
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a0a6:	69f8      	ldr	r0, [r7, #28]
 800a0a8:	f000 fb0a 	bl	800a6c0 <tcp_process>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a0b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0b4:	f113 0f0d 	cmn.w	r3, #13
 800a0b8:	f000 80d3 	beq.w	800a262 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800a0bc:	4b96      	ldr	r3, [pc, #600]	; (800a318 <tcp_input+0x7dc>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d015      	beq.n	800a0f4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <tcp_input+0x5a8>
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	6912      	ldr	r2, [r2, #16]
 800a0dc:	f06f 010d 	mvn.w	r1, #13
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a0e4:	69f9      	ldr	r1, [r7, #28]
 800a0e6:	488d      	ldr	r0, [pc, #564]	; (800a31c <tcp_input+0x7e0>)
 800a0e8:	f7ff fbb0 	bl	800984c <tcp_pcb_remove>
        tcp_free(pcb);
 800a0ec:	69f8      	ldr	r0, [r7, #28]
 800a0ee:	f7fe f99d 	bl	800842c <tcp_free>
 800a0f2:	e0c1      	b.n	800a278 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a0f8:	4b89      	ldr	r3, [pc, #548]	; (800a320 <tcp_input+0x7e4>)
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01d      	beq.n	800a13c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a100:	4b87      	ldr	r3, [pc, #540]	; (800a320 <tcp_input+0x7e4>)
 800a102:	881b      	ldrh	r3, [r3, #0]
 800a104:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00a      	beq.n	800a126 <tcp_input+0x5ea>
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a116:	69fa      	ldr	r2, [r7, #28]
 800a118:	6910      	ldr	r0, [r2, #16]
 800a11a:	89fa      	ldrh	r2, [r7, #14]
 800a11c:	69f9      	ldr	r1, [r7, #28]
 800a11e:	4798      	blx	r3
 800a120:	4603      	mov	r3, r0
 800a122:	74fb      	strb	r3, [r7, #19]
 800a124:	e001      	b.n	800a12a <tcp_input+0x5ee>
 800a126:	2300      	movs	r3, #0
 800a128:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a12a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a12e:	f113 0f0d 	cmn.w	r3, #13
 800a132:	f000 8098 	beq.w	800a266 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a136:	4b7a      	ldr	r3, [pc, #488]	; (800a320 <tcp_input+0x7e4>)
 800a138:	2200      	movs	r2, #0
 800a13a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a13c:	69f8      	ldr	r0, [r7, #28]
 800a13e:	f000 f907 	bl	800a350 <tcp_input_delayed_close>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	f040 8090 	bne.w	800a26a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a14a:	4b76      	ldr	r3, [pc, #472]	; (800a324 <tcp_input+0x7e8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d041      	beq.n	800a1d6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <tcp_input+0x62c>
 800a15a:	4b73      	ldr	r3, [pc, #460]	; (800a328 <tcp_input+0x7ec>)
 800a15c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a160:	4972      	ldr	r1, [pc, #456]	; (800a32c <tcp_input+0x7f0>)
 800a162:	4873      	ldr	r0, [pc, #460]	; (800a330 <tcp_input+0x7f4>)
 800a164:	f006 fff0 	bl	8011148 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	8b5b      	ldrh	r3, [r3, #26]
 800a16c:	f003 0310 	and.w	r3, r3, #16
 800a170:	2b00      	cmp	r3, #0
 800a172:	d008      	beq.n	800a186 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a174:	4b6b      	ldr	r3, [pc, #428]	; (800a324 <tcp_input+0x7e8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4618      	mov	r0, r3
 800a17a:	f7fd fe15 	bl	8007da8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a17e:	69f8      	ldr	r0, [r7, #28]
 800a180:	f7fe fc3c 	bl	80089fc <tcp_abort>
            goto aborted;
 800a184:	e078      	b.n	800a278 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00c      	beq.n	800a1aa <tcp_input+0x66e>
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	6918      	ldr	r0, [r3, #16]
 800a19a:	4b62      	ldr	r3, [pc, #392]	; (800a324 <tcp_input+0x7e8>)
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	69f9      	ldr	r1, [r7, #28]
 800a1a2:	47a0      	blx	r4
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	74fb      	strb	r3, [r7, #19]
 800a1a8:	e008      	b.n	800a1bc <tcp_input+0x680>
 800a1aa:	4b5e      	ldr	r3, [pc, #376]	; (800a324 <tcp_input+0x7e8>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	69f9      	ldr	r1, [r7, #28]
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	f7ff f952 	bl	800945c <tcp_recv_null>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a1bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1c0:	f113 0f0d 	cmn.w	r3, #13
 800a1c4:	d053      	beq.n	800a26e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a1c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a1ce:	4b55      	ldr	r3, [pc, #340]	; (800a324 <tcp_input+0x7e8>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a1d6:	4b50      	ldr	r3, [pc, #320]	; (800a318 <tcp_input+0x7dc>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f003 0320 	and.w	r3, r3, #32
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d030      	beq.n	800a244 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d009      	beq.n	800a1fe <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1ee:	7b5a      	ldrb	r2, [r3, #13]
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1f4:	f042 0220 	orr.w	r2, r2, #32
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	735a      	strb	r2, [r3, #13]
 800a1fc:	e022      	b.n	800a244 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a202:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a206:	d005      	beq.n	800a214 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a20c:	3301      	adds	r3, #1
 800a20e:	b29a      	uxth	r2, r3
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <tcp_input+0x6fa>
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	6918      	ldr	r0, [r3, #16]
 800a228:	2300      	movs	r3, #0
 800a22a:	2200      	movs	r2, #0
 800a22c:	69f9      	ldr	r1, [r7, #28]
 800a22e:	47a0      	blx	r4
 800a230:	4603      	mov	r3, r0
 800a232:	74fb      	strb	r3, [r7, #19]
 800a234:	e001      	b.n	800a23a <tcp_input+0x6fe>
 800a236:	2300      	movs	r3, #0
 800a238:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a23a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a23e:	f113 0f0d 	cmn.w	r3, #13
 800a242:	d016      	beq.n	800a272 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a244:	4b33      	ldr	r3, [pc, #204]	; (800a314 <tcp_input+0x7d8>)
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a24a:	69f8      	ldr	r0, [r7, #28]
 800a24c:	f000 f880 	bl	800a350 <tcp_input_delayed_close>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10f      	bne.n	800a276 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a256:	69f8      	ldr	r0, [r7, #28]
 800a258:	f002 fab8 	bl	800c7cc <tcp_output>
 800a25c:	e00c      	b.n	800a278 <tcp_input+0x73c>
        goto aborted;
 800a25e:	bf00      	nop
 800a260:	e00a      	b.n	800a278 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a262:	bf00      	nop
 800a264:	e008      	b.n	800a278 <tcp_input+0x73c>
              goto aborted;
 800a266:	bf00      	nop
 800a268:	e006      	b.n	800a278 <tcp_input+0x73c>
          goto aborted;
 800a26a:	bf00      	nop
 800a26c:	e004      	b.n	800a278 <tcp_input+0x73c>
            goto aborted;
 800a26e:	bf00      	nop
 800a270:	e002      	b.n	800a278 <tcp_input+0x73c>
              goto aborted;
 800a272:	bf00      	nop
 800a274:	e000      	b.n	800a278 <tcp_input+0x73c>
          goto aborted;
 800a276:	bf00      	nop
    tcp_input_pcb = NULL;
 800a278:	4b26      	ldr	r3, [pc, #152]	; (800a314 <tcp_input+0x7d8>)
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a27e:	4b29      	ldr	r3, [pc, #164]	; (800a324 <tcp_input+0x7e8>)
 800a280:	2200      	movs	r2, #0
 800a282:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a284:	4b2b      	ldr	r3, [pc, #172]	; (800a334 <tcp_input+0x7f8>)
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d03f      	beq.n	800a30c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800a28c:	4b29      	ldr	r3, [pc, #164]	; (800a334 <tcp_input+0x7f8>)
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	4618      	mov	r0, r3
 800a292:	f7fd fd89 	bl	8007da8 <pbuf_free>
      inseg.p = NULL;
 800a296:	4b27      	ldr	r3, [pc, #156]	; (800a334 <tcp_input+0x7f8>)
 800a298:	2200      	movs	r2, #0
 800a29a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a29c:	e036      	b.n	800a30c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a29e:	4b26      	ldr	r3, [pc, #152]	; (800a338 <tcp_input+0x7fc>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	899b      	ldrh	r3, [r3, #12]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fc faca 	bl	8006840 <lwip_htons>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d118      	bne.n	800a2ea <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2b8:	4b20      	ldr	r3, [pc, #128]	; (800a33c <tcp_input+0x800>)
 800a2ba:	6819      	ldr	r1, [r3, #0]
 800a2bc:	4b20      	ldr	r3, [pc, #128]	; (800a340 <tcp_input+0x804>)
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4b20      	ldr	r3, [pc, #128]	; (800a344 <tcp_input+0x808>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2c8:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <tcp_input+0x7fc>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2cc:	885b      	ldrh	r3, [r3, #2]
 800a2ce:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2d0:	4a19      	ldr	r2, [pc, #100]	; (800a338 <tcp_input+0x7fc>)
 800a2d2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2d4:	8812      	ldrh	r2, [r2, #0]
 800a2d6:	b292      	uxth	r2, r2
 800a2d8:	9202      	str	r2, [sp, #8]
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	4b1a      	ldr	r3, [pc, #104]	; (800a348 <tcp_input+0x80c>)
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4b1a      	ldr	r3, [pc, #104]	; (800a34c <tcp_input+0x810>)
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f003 f825 	bl	800d334 <tcp_rst>
    pbuf_free(p);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7fd fd5c 	bl	8007da8 <pbuf_free>
  return;
 800a2f0:	e00c      	b.n	800a30c <tcp_input+0x7d0>
    goto dropped;
 800a2f2:	bf00      	nop
 800a2f4:	e006      	b.n	800a304 <tcp_input+0x7c8>
    goto dropped;
 800a2f6:	bf00      	nop
 800a2f8:	e004      	b.n	800a304 <tcp_input+0x7c8>
    goto dropped;
 800a2fa:	bf00      	nop
 800a2fc:	e002      	b.n	800a304 <tcp_input+0x7c8>
      goto dropped;
 800a2fe:	bf00      	nop
 800a300:	e000      	b.n	800a304 <tcp_input+0x7c8>
      goto dropped;
 800a302:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7fd fd4f 	bl	8007da8 <pbuf_free>
 800a30a:	e000      	b.n	800a30e <tcp_input+0x7d2>
  return;
 800a30c:	bf00      	nop
}
 800a30e:	3724      	adds	r7, #36	; 0x24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd90      	pop	{r4, r7, pc}
 800a314:	20008b84 	.word	0x20008b84
 800a318:	20000161 	.word	0x20000161
 800a31c:	20008b70 	.word	0x20008b70
 800a320:	2000015c 	.word	0x2000015c
 800a324:	20000164 	.word	0x20000164
 800a328:	0801325c 	.word	0x0801325c
 800a32c:	08013410 	.word	0x08013410
 800a330:	080132a8 	.word	0x080132a8
 800a334:	20000134 	.word	0x20000134
 800a338:	20000144 	.word	0x20000144
 800a33c:	20000158 	.word	0x20000158
 800a340:	2000015e 	.word	0x2000015e
 800a344:	20000154 	.word	0x20000154
 800a348:	2000347c 	.word	0x2000347c
 800a34c:	20003480 	.word	0x20003480

0800a350 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <tcp_input_delayed_close+0x1c>
 800a35e:	4b17      	ldr	r3, [pc, #92]	; (800a3bc <tcp_input_delayed_close+0x6c>)
 800a360:	f240 225a 	movw	r2, #602	; 0x25a
 800a364:	4916      	ldr	r1, [pc, #88]	; (800a3c0 <tcp_input_delayed_close+0x70>)
 800a366:	4817      	ldr	r0, [pc, #92]	; (800a3c4 <tcp_input_delayed_close+0x74>)
 800a368:	f006 feee 	bl	8011148 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a36c:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <tcp_input_delayed_close+0x78>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 0310 	and.w	r3, r3, #16
 800a374:	2b00      	cmp	r3, #0
 800a376:	d01c      	beq.n	800a3b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	8b5b      	ldrh	r3, [r3, #26]
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10d      	bne.n	800a3a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d008      	beq.n	800a3a0 <tcp_input_delayed_close+0x50>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	6912      	ldr	r2, [r2, #16]
 800a398:	f06f 010e 	mvn.w	r1, #14
 800a39c:	4610      	mov	r0, r2
 800a39e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	480a      	ldr	r0, [pc, #40]	; (800a3cc <tcp_input_delayed_close+0x7c>)
 800a3a4:	f7ff fa52 	bl	800984c <tcp_pcb_remove>
    tcp_free(pcb);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7fe f83f 	bl	800842c <tcp_free>
    return 1;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e000      	b.n	800a3b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	0801325c 	.word	0x0801325c
 800a3c0:	0801342c 	.word	0x0801342c
 800a3c4:	080132a8 	.word	0x080132a8
 800a3c8:	20000161 	.word	0x20000161
 800a3cc:	20008b70 	.word	0x20008b70

0800a3d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b08b      	sub	sp, #44	; 0x2c
 800a3d4:	af04      	add	r7, sp, #16
 800a3d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a3d8:	4b6f      	ldr	r3, [pc, #444]	; (800a598 <tcp_listen_input+0x1c8>)
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f040 80d2 	bne.w	800a58a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d106      	bne.n	800a3fa <tcp_listen_input+0x2a>
 800a3ec:	4b6b      	ldr	r3, [pc, #428]	; (800a59c <tcp_listen_input+0x1cc>)
 800a3ee:	f240 2281 	movw	r2, #641	; 0x281
 800a3f2:	496b      	ldr	r1, [pc, #428]	; (800a5a0 <tcp_listen_input+0x1d0>)
 800a3f4:	486b      	ldr	r0, [pc, #428]	; (800a5a4 <tcp_listen_input+0x1d4>)
 800a3f6:	f006 fea7 	bl	8011148 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a3fa:	4b67      	ldr	r3, [pc, #412]	; (800a598 <tcp_listen_input+0x1c8>)
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	f003 0310 	and.w	r3, r3, #16
 800a402:	2b00      	cmp	r3, #0
 800a404:	d019      	beq.n	800a43a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a406:	4b68      	ldr	r3, [pc, #416]	; (800a5a8 <tcp_listen_input+0x1d8>)
 800a408:	6819      	ldr	r1, [r3, #0]
 800a40a:	4b68      	ldr	r3, [pc, #416]	; (800a5ac <tcp_listen_input+0x1dc>)
 800a40c:	881b      	ldrh	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	4b67      	ldr	r3, [pc, #412]	; (800a5b0 <tcp_listen_input+0x1e0>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a416:	4b67      	ldr	r3, [pc, #412]	; (800a5b4 <tcp_listen_input+0x1e4>)
 800a418:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a41a:	885b      	ldrh	r3, [r3, #2]
 800a41c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a41e:	4a65      	ldr	r2, [pc, #404]	; (800a5b4 <tcp_listen_input+0x1e4>)
 800a420:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a422:	8812      	ldrh	r2, [r2, #0]
 800a424:	b292      	uxth	r2, r2
 800a426:	9202      	str	r2, [sp, #8]
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	4b63      	ldr	r3, [pc, #396]	; (800a5b8 <tcp_listen_input+0x1e8>)
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	4b63      	ldr	r3, [pc, #396]	; (800a5bc <tcp_listen_input+0x1ec>)
 800a430:	4602      	mov	r2, r0
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f002 ff7e 	bl	800d334 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a438:	e0a9      	b.n	800a58e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a43a:	4b57      	ldr	r3, [pc, #348]	; (800a598 <tcp_listen_input+0x1c8>)
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	f000 80a3 	beq.w	800a58e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	7d5b      	ldrb	r3, [r3, #21]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff f929 	bl	80096a4 <tcp_alloc>
 800a452:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d111      	bne.n	800a47e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00a      	beq.n	800a478 <tcp_listen_input+0xa8>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	6910      	ldr	r0, [r2, #16]
 800a46a:	f04f 32ff 	mov.w	r2, #4294967295
 800a46e:	2100      	movs	r1, #0
 800a470:	4798      	blx	r3
 800a472:	4603      	mov	r3, r0
 800a474:	73bb      	strb	r3, [r7, #14]
      return;
 800a476:	e08b      	b.n	800a590 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a478:	23f0      	movs	r3, #240	; 0xf0
 800a47a:	73bb      	strb	r3, [r7, #14]
      return;
 800a47c:	e088      	b.n	800a590 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a47e:	4b50      	ldr	r3, [pc, #320]	; (800a5c0 <tcp_listen_input+0x1f0>)
 800a480:	695a      	ldr	r2, [r3, #20]
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a486:	4b4e      	ldr	r3, [pc, #312]	; (800a5c0 <tcp_listen_input+0x1f0>)
 800a488:	691a      	ldr	r2, [r3, #16]
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	8ada      	ldrh	r2, [r3, #22]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a496:	4b47      	ldr	r3, [pc, #284]	; (800a5b4 <tcp_listen_input+0x1e4>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	881b      	ldrh	r3, [r3, #0]
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a4a8:	4b41      	ldr	r3, [pc, #260]	; (800a5b0 <tcp_listen_input+0x1e0>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a4ba:	6978      	ldr	r0, [r7, #20]
 800a4bc:	f7ff fa5a 	bl	8009974 <tcp_next_iss>
 800a4c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a4da:	4b35      	ldr	r3, [pc, #212]	; (800a5b0 <tcp_listen_input+0x1e0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	1e5a      	subs	r2, r3, #1
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691a      	ldr	r2, [r3, #16]
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	7a5b      	ldrb	r3, [r3, #9]
 800a4f6:	f003 030c 	and.w	r3, r3, #12
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	7a1a      	ldrb	r2, [r3, #8]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a508:	4b2e      	ldr	r3, [pc, #184]	; (800a5c4 <tcp_listen_input+0x1f4>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	60da      	str	r2, [r3, #12]
 800a510:	4a2c      	ldr	r2, [pc, #176]	; (800a5c4 <tcp_listen_input+0x1f4>)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	f003 f8cf 	bl	800d6b8 <tcp_timer_needed>
 800a51a:	4b2b      	ldr	r3, [pc, #172]	; (800a5c8 <tcp_listen_input+0x1f8>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a520:	6978      	ldr	r0, [r7, #20]
 800a522:	f001 fd8d 	bl	800c040 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a526:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <tcp_listen_input+0x1e4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	89db      	ldrh	r3, [r3, #14]
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	3304      	adds	r3, #4
 800a548:	4618      	mov	r0, r3
 800a54a:	f004 ffe1 	bl	800f510 <ip4_route>
 800a54e:	4601      	mov	r1, r0
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	3304      	adds	r3, #4
 800a554:	461a      	mov	r2, r3
 800a556:	4620      	mov	r0, r4
 800a558:	f7ff fa32 	bl	80099c0 <tcp_eff_send_mss_netif>
 800a55c:	4603      	mov	r3, r0
 800a55e:	461a      	mov	r2, r3
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a564:	2112      	movs	r1, #18
 800a566:	6978      	ldr	r0, [r7, #20]
 800a568:	f002 f842 	bl	800c5f0 <tcp_enqueue_flags>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d004      	beq.n	800a582 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a578:	2100      	movs	r1, #0
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f7fe f980 	bl	8008880 <tcp_abandon>
      return;
 800a580:	e006      	b.n	800a590 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a582:	6978      	ldr	r0, [r7, #20]
 800a584:	f002 f922 	bl	800c7cc <tcp_output>
  return;
 800a588:	e001      	b.n	800a58e <tcp_listen_input+0x1be>
    return;
 800a58a:	bf00      	nop
 800a58c:	e000      	b.n	800a590 <tcp_listen_input+0x1c0>
  return;
 800a58e:	bf00      	nop
}
 800a590:	371c      	adds	r7, #28
 800a592:	46bd      	mov	sp, r7
 800a594:	bd90      	pop	{r4, r7, pc}
 800a596:	bf00      	nop
 800a598:	20000160 	.word	0x20000160
 800a59c:	0801325c 	.word	0x0801325c
 800a5a0:	08013454 	.word	0x08013454
 800a5a4:	080132a8 	.word	0x080132a8
 800a5a8:	20000158 	.word	0x20000158
 800a5ac:	2000015e 	.word	0x2000015e
 800a5b0:	20000154 	.word	0x20000154
 800a5b4:	20000144 	.word	0x20000144
 800a5b8:	2000347c 	.word	0x2000347c
 800a5bc:	20003480 	.word	0x20003480
 800a5c0:	2000346c 	.word	0x2000346c
 800a5c4:	20008b70 	.word	0x20008b70
 800a5c8:	20008b6c 	.word	0x20008b6c

0800a5cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af04      	add	r7, sp, #16
 800a5d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a5d4:	4b2f      	ldr	r3, [pc, #188]	; (800a694 <tcp_timewait_input+0xc8>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d153      	bne.n	800a688 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d106      	bne.n	800a5f4 <tcp_timewait_input+0x28>
 800a5e6:	4b2c      	ldr	r3, [pc, #176]	; (800a698 <tcp_timewait_input+0xcc>)
 800a5e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a5ec:	492b      	ldr	r1, [pc, #172]	; (800a69c <tcp_timewait_input+0xd0>)
 800a5ee:	482c      	ldr	r0, [pc, #176]	; (800a6a0 <tcp_timewait_input+0xd4>)
 800a5f0:	f006 fdaa 	bl	8011148 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a5f4:	4b27      	ldr	r3, [pc, #156]	; (800a694 <tcp_timewait_input+0xc8>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	f003 0302 	and.w	r3, r3, #2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d02a      	beq.n	800a656 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a600:	4b28      	ldr	r3, [pc, #160]	; (800a6a4 <tcp_timewait_input+0xd8>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	db2d      	blt.n	800a66a <tcp_timewait_input+0x9e>
 800a60e:	4b25      	ldr	r3, [pc, #148]	; (800a6a4 <tcp_timewait_input+0xd8>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a61a:	440b      	add	r3, r1
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dc23      	bgt.n	800a66a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a622:	4b21      	ldr	r3, [pc, #132]	; (800a6a8 <tcp_timewait_input+0xdc>)
 800a624:	6819      	ldr	r1, [r3, #0]
 800a626:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <tcp_timewait_input+0xe0>)
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	4b1d      	ldr	r3, [pc, #116]	; (800a6a4 <tcp_timewait_input+0xd8>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a632:	4b1f      	ldr	r3, [pc, #124]	; (800a6b0 <tcp_timewait_input+0xe4>)
 800a634:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a636:	885b      	ldrh	r3, [r3, #2]
 800a638:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a63a:	4a1d      	ldr	r2, [pc, #116]	; (800a6b0 <tcp_timewait_input+0xe4>)
 800a63c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a63e:	8812      	ldrh	r2, [r2, #0]
 800a640:	b292      	uxth	r2, r2
 800a642:	9202      	str	r2, [sp, #8]
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	4b1b      	ldr	r3, [pc, #108]	; (800a6b4 <tcp_timewait_input+0xe8>)
 800a648:	9300      	str	r3, [sp, #0]
 800a64a:	4b1b      	ldr	r3, [pc, #108]	; (800a6b8 <tcp_timewait_input+0xec>)
 800a64c:	4602      	mov	r2, r0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f002 fe70 	bl	800d334 <tcp_rst>
      return;
 800a654:	e01b      	b.n	800a68e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a656:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <tcp_timewait_input+0xc8>)
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a662:	4b16      	ldr	r3, [pc, #88]	; (800a6bc <tcp_timewait_input+0xf0>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a66a:	4b10      	ldr	r3, [pc, #64]	; (800a6ac <tcp_timewait_input+0xe0>)
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00c      	beq.n	800a68c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	8b5b      	ldrh	r3, [r3, #26]
 800a676:	f043 0302 	orr.w	r3, r3, #2
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f002 f8a3 	bl	800c7cc <tcp_output>
  }
  return;
 800a686:	e001      	b.n	800a68c <tcp_timewait_input+0xc0>
    return;
 800a688:	bf00      	nop
 800a68a:	e000      	b.n	800a68e <tcp_timewait_input+0xc2>
  return;
 800a68c:	bf00      	nop
}
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20000160 	.word	0x20000160
 800a698:	0801325c 	.word	0x0801325c
 800a69c:	08013474 	.word	0x08013474
 800a6a0:	080132a8 	.word	0x080132a8
 800a6a4:	20000154 	.word	0x20000154
 800a6a8:	20000158 	.word	0x20000158
 800a6ac:	2000015e 	.word	0x2000015e
 800a6b0:	20000144 	.word	0x20000144
 800a6b4:	2000347c 	.word	0x2000347c
 800a6b8:	20003480 	.word	0x20003480
 800a6bc:	20008b74 	.word	0x20008b74

0800a6c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a6c0:	b590      	push	{r4, r7, lr}
 800a6c2:	b08d      	sub	sp, #52	; 0x34
 800a6c4:	af04      	add	r7, sp, #16
 800a6c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d106      	bne.n	800a6e4 <tcp_process+0x24>
 800a6d6:	4ba5      	ldr	r3, [pc, #660]	; (800a96c <tcp_process+0x2ac>)
 800a6d8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a6dc:	49a4      	ldr	r1, [pc, #656]	; (800a970 <tcp_process+0x2b0>)
 800a6de:	48a5      	ldr	r0, [pc, #660]	; (800a974 <tcp_process+0x2b4>)
 800a6e0:	f006 fd32 	bl	8011148 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a6e4:	4ba4      	ldr	r3, [pc, #656]	; (800a978 <tcp_process+0x2b8>)
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d04e      	beq.n	800a78e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7d1b      	ldrb	r3, [r3, #20]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d108      	bne.n	800a70a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a6fc:	4b9f      	ldr	r3, [pc, #636]	; (800a97c <tcp_process+0x2bc>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	429a      	cmp	r2, r3
 800a702:	d123      	bne.n	800a74c <tcp_process+0x8c>
        acceptable = 1;
 800a704:	2301      	movs	r3, #1
 800a706:	76fb      	strb	r3, [r7, #27]
 800a708:	e020      	b.n	800a74c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a70e:	4b9c      	ldr	r3, [pc, #624]	; (800a980 <tcp_process+0x2c0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	d102      	bne.n	800a71c <tcp_process+0x5c>
        acceptable = 1;
 800a716:	2301      	movs	r3, #1
 800a718:	76fb      	strb	r3, [r7, #27]
 800a71a:	e017      	b.n	800a74c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a71c:	4b98      	ldr	r3, [pc, #608]	; (800a980 <tcp_process+0x2c0>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	db10      	blt.n	800a74c <tcp_process+0x8c>
 800a72a:	4b95      	ldr	r3, [pc, #596]	; (800a980 <tcp_process+0x2c0>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a736:	440b      	add	r3, r1
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	dc06      	bgt.n	800a74c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	8b5b      	ldrh	r3, [r3, #26]
 800a742:	f043 0302 	orr.w	r3, r3, #2
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a74c:	7efb      	ldrb	r3, [r7, #27]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d01b      	beq.n	800a78a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	7d1b      	ldrb	r3, [r3, #20]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d106      	bne.n	800a768 <tcp_process+0xa8>
 800a75a:	4b84      	ldr	r3, [pc, #528]	; (800a96c <tcp_process+0x2ac>)
 800a75c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a760:	4988      	ldr	r1, [pc, #544]	; (800a984 <tcp_process+0x2c4>)
 800a762:	4884      	ldr	r0, [pc, #528]	; (800a974 <tcp_process+0x2b4>)
 800a764:	f006 fcf0 	bl	8011148 <iprintf>
      recv_flags |= TF_RESET;
 800a768:	4b87      	ldr	r3, [pc, #540]	; (800a988 <tcp_process+0x2c8>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f043 0308 	orr.w	r3, r3, #8
 800a770:	b2da      	uxtb	r2, r3
 800a772:	4b85      	ldr	r3, [pc, #532]	; (800a988 <tcp_process+0x2c8>)
 800a774:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8b5b      	ldrh	r3, [r3, #26]
 800a77a:	f023 0301 	bic.w	r3, r3, #1
 800a77e:	b29a      	uxth	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a784:	f06f 030d 	mvn.w	r3, #13
 800a788:	e37a      	b.n	800ae80 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e378      	b.n	800ae80 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a78e:	4b7a      	ldr	r3, [pc, #488]	; (800a978 <tcp_process+0x2b8>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	2b00      	cmp	r3, #0
 800a798:	d010      	beq.n	800a7bc <tcp_process+0xfc>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	7d1b      	ldrb	r3, [r3, #20]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d00c      	beq.n	800a7bc <tcp_process+0xfc>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	7d1b      	ldrb	r3, [r3, #20]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d008      	beq.n	800a7bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	8b5b      	ldrh	r3, [r3, #26]
 800a7ae:	f043 0302 	orr.w	r3, r3, #2
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e361      	b.n	800ae80 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	8b5b      	ldrh	r3, [r3, #26]
 800a7c0:	f003 0310 	and.w	r3, r3, #16
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d103      	bne.n	800a7d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a7c8:	4b70      	ldr	r3, [pc, #448]	; (800a98c <tcp_process+0x2cc>)
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 fc2d 	bl	800c040 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	7d1b      	ldrb	r3, [r3, #20]
 800a7ea:	3b02      	subs	r3, #2
 800a7ec:	2b07      	cmp	r3, #7
 800a7ee:	f200 8337 	bhi.w	800ae60 <tcp_process+0x7a0>
 800a7f2:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <tcp_process+0x138>)
 800a7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f8:	0800a819 	.word	0x0800a819
 800a7fc:	0800aa49 	.word	0x0800aa49
 800a800:	0800abc1 	.word	0x0800abc1
 800a804:	0800abeb 	.word	0x0800abeb
 800a808:	0800ad0f 	.word	0x0800ad0f
 800a80c:	0800abc1 	.word	0x0800abc1
 800a810:	0800ad9b 	.word	0x0800ad9b
 800a814:	0800ae2b 	.word	0x0800ae2b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a818:	4b57      	ldr	r3, [pc, #348]	; (800a978 <tcp_process+0x2b8>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	f003 0310 	and.w	r3, r3, #16
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 80e4 	beq.w	800a9ee <tcp_process+0x32e>
 800a826:	4b54      	ldr	r3, [pc, #336]	; (800a978 <tcp_process+0x2b8>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f003 0302 	and.w	r3, r3, #2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 80dd 	beq.w	800a9ee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	4b50      	ldr	r3, [pc, #320]	; (800a97c <tcp_process+0x2bc>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	f040 80d5 	bne.w	800a9ee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a844:	4b4e      	ldr	r3, [pc, #312]	; (800a980 <tcp_process+0x2c0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a856:	4b49      	ldr	r3, [pc, #292]	; (800a97c <tcp_process+0x2bc>)
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a85e:	4b4c      	ldr	r3, [pc, #304]	; (800a990 <tcp_process+0x2d0>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	89db      	ldrh	r3, [r3, #14]
 800a864:	b29a      	uxth	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a878:	4b41      	ldr	r3, [pc, #260]	; (800a980 <tcp_process+0x2c0>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	1e5a      	subs	r2, r3, #1
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2204      	movs	r2, #4
 800a886:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3304      	adds	r3, #4
 800a890:	4618      	mov	r0, r3
 800a892:	f004 fe3d 	bl	800f510 <ip4_route>
 800a896:	4601      	mov	r1, r0
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3304      	adds	r3, #4
 800a89c:	461a      	mov	r2, r3
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f7ff f88e 	bl	80099c0 <tcp_eff_send_mss_netif>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8b0:	009a      	lsls	r2, r3, #2
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8b6:	005b      	lsls	r3, r3, #1
 800a8b8:	f241 111c 	movw	r1, #4380	; 0x111c
 800a8bc:	428b      	cmp	r3, r1
 800a8be:	bf38      	it	cc
 800a8c0:	460b      	movcc	r3, r1
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d204      	bcs.n	800a8d0 <tcp_process+0x210>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	e00d      	b.n	800a8ec <tcp_process+0x22c>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	f241 121c 	movw	r2, #4380	; 0x111c
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d904      	bls.n	800a8e8 <tcp_process+0x228>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	e001      	b.n	800a8ec <tcp_process+0x22c>
 800a8e8:	f241 131c 	movw	r3, #4380	; 0x111c
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <tcp_process+0x24a>
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	; (800a96c <tcp_process+0x2ac>)
 800a8fe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a902:	4924      	ldr	r1, [pc, #144]	; (800a994 <tcp_process+0x2d4>)
 800a904:	481b      	ldr	r0, [pc, #108]	; (800a974 <tcp_process+0x2b4>)
 800a906:	f006 fc1f 	bl	8011148 <iprintf>
        --pcb->snd_queuelen;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a910:	3b01      	subs	r3, #1
 800a912:	b29a      	uxth	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d111      	bne.n	800a94a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a92a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d106      	bne.n	800a940 <tcp_process+0x280>
 800a932:	4b0e      	ldr	r3, [pc, #56]	; (800a96c <tcp_process+0x2ac>)
 800a934:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a938:	4917      	ldr	r1, [pc, #92]	; (800a998 <tcp_process+0x2d8>)
 800a93a:	480e      	ldr	r0, [pc, #56]	; (800a974 <tcp_process+0x2b4>)
 800a93c:	f006 fc04 	bl	8011148 <iprintf>
          pcb->unsent = rseg->next;
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	66da      	str	r2, [r3, #108]	; 0x6c
 800a948:	e003      	b.n	800a952 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a952:	69f8      	ldr	r0, [r7, #28]
 800a954:	f7fe fd3d 	bl	80093d2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d11d      	bne.n	800a99c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a966:	861a      	strh	r2, [r3, #48]	; 0x30
 800a968:	e01f      	b.n	800a9aa <tcp_process+0x2ea>
 800a96a:	bf00      	nop
 800a96c:	0801325c 	.word	0x0801325c
 800a970:	08013494 	.word	0x08013494
 800a974:	080132a8 	.word	0x080132a8
 800a978:	20000160 	.word	0x20000160
 800a97c:	20000158 	.word	0x20000158
 800a980:	20000154 	.word	0x20000154
 800a984:	080134b0 	.word	0x080134b0
 800a988:	20000161 	.word	0x20000161
 800a98c:	20008b74 	.word	0x20008b74
 800a990:	20000144 	.word	0x20000144
 800a994:	080134d0 	.word	0x080134d0
 800a998:	080134e8 	.word	0x080134e8
        } else {
          pcb->rtime = 0;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <tcp_process+0x30a>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6910      	ldr	r0, [r2, #16]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	6879      	ldr	r1, [r7, #4]
 800a9c2:	4798      	blx	r3
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	76bb      	strb	r3, [r7, #26]
 800a9c8:	e001      	b.n	800a9ce <tcp_process+0x30e>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a9ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a9d2:	f113 0f0d 	cmn.w	r3, #13
 800a9d6:	d102      	bne.n	800a9de <tcp_process+0x31e>
          return ERR_ABRT;
 800a9d8:	f06f 030c 	mvn.w	r3, #12
 800a9dc:	e250      	b.n	800ae80 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	8b5b      	ldrh	r3, [r3, #26]
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a9ec:	e23a      	b.n	800ae64 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a9ee:	4b9d      	ldr	r3, [pc, #628]	; (800ac64 <tcp_process+0x5a4>)
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	f003 0310 	and.w	r3, r3, #16
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 8234 	beq.w	800ae64 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9fc:	4b9a      	ldr	r3, [pc, #616]	; (800ac68 <tcp_process+0x5a8>)
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	4b9a      	ldr	r3, [pc, #616]	; (800ac6c <tcp_process+0x5ac>)
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	4b9a      	ldr	r3, [pc, #616]	; (800ac70 <tcp_process+0x5b0>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa0c:	4b99      	ldr	r3, [pc, #612]	; (800ac74 <tcp_process+0x5b4>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa10:	885b      	ldrh	r3, [r3, #2]
 800aa12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800aa14:	4a97      	ldr	r2, [pc, #604]	; (800ac74 <tcp_process+0x5b4>)
 800aa16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa18:	8812      	ldrh	r2, [r2, #0]
 800aa1a:	b292      	uxth	r2, r2
 800aa1c:	9202      	str	r2, [sp, #8]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	4b95      	ldr	r3, [pc, #596]	; (800ac78 <tcp_process+0x5b8>)
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	4b95      	ldr	r3, [pc, #596]	; (800ac7c <tcp_process+0x5bc>)
 800aa26:	4602      	mov	r2, r0
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f002 fc83 	bl	800d334 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa34:	2b05      	cmp	r3, #5
 800aa36:	f200 8215 	bhi.w	800ae64 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f002 fa4d 	bl	800cee0 <tcp_rexmit_rto>
      break;
 800aa46:	e20d      	b.n	800ae64 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800aa48:	4b86      	ldr	r3, [pc, #536]	; (800ac64 <tcp_process+0x5a4>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	f003 0310 	and.w	r3, r3, #16
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80a1 	beq.w	800ab98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa56:	4b84      	ldr	r3, [pc, #528]	; (800ac68 <tcp_process+0x5a8>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	3b01      	subs	r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	db7e      	blt.n	800ab64 <tcp_process+0x4a4>
 800aa66:	4b80      	ldr	r3, [pc, #512]	; (800ac68 <tcp_process+0x5a8>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dc77      	bgt.n	800ab64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2204      	movs	r2, #4
 800aa78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d102      	bne.n	800aa88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800aa82:	23fa      	movs	r3, #250	; 0xfa
 800aa84:	76bb      	strb	r3, [r7, #26]
 800aa86:	e01d      	b.n	800aac4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d106      	bne.n	800aaa0 <tcp_process+0x3e0>
 800aa92:	4b7b      	ldr	r3, [pc, #492]	; (800ac80 <tcp_process+0x5c0>)
 800aa94:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800aa98:	497a      	ldr	r1, [pc, #488]	; (800ac84 <tcp_process+0x5c4>)
 800aa9a:	487b      	ldr	r0, [pc, #492]	; (800ac88 <tcp_process+0x5c8>)
 800aa9c:	f006 fb54 	bl	8011148 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <tcp_process+0x400>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	6910      	ldr	r0, [r2, #16]
 800aab4:	2200      	movs	r2, #0
 800aab6:	6879      	ldr	r1, [r7, #4]
 800aab8:	4798      	blx	r3
 800aaba:	4603      	mov	r3, r0
 800aabc:	76bb      	strb	r3, [r7, #26]
 800aabe:	e001      	b.n	800aac4 <tcp_process+0x404>
 800aac0:	23f0      	movs	r3, #240	; 0xf0
 800aac2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800aac4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00a      	beq.n	800aae2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800aacc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800aad0:	f113 0f0d 	cmn.w	r3, #13
 800aad4:	d002      	beq.n	800aadc <tcp_process+0x41c>
              tcp_abort(pcb);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7fd ff90 	bl	80089fc <tcp_abort>
            }
            return ERR_ABRT;
 800aadc:	f06f 030c 	mvn.w	r3, #12
 800aae0:	e1ce      	b.n	800ae80 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fae0 	bl	800b0a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800aae8:	4b68      	ldr	r3, [pc, #416]	; (800ac8c <tcp_process+0x5cc>)
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d005      	beq.n	800aafc <tcp_process+0x43c>
            recv_acked--;
 800aaf0:	4b66      	ldr	r3, [pc, #408]	; (800ac8c <tcp_process+0x5cc>)
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	4b64      	ldr	r3, [pc, #400]	; (800ac8c <tcp_process+0x5cc>)
 800aafa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab00:	009a      	lsls	r2, r3, #2
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	f241 111c 	movw	r1, #4380	; 0x111c
 800ab0c:	428b      	cmp	r3, r1
 800ab0e:	bf38      	it	cc
 800ab10:	460b      	movcc	r3, r1
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d204      	bcs.n	800ab20 <tcp_process+0x460>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	e00d      	b.n	800ab3c <tcp_process+0x47c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	f241 121c 	movw	r2, #4380	; 0x111c
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d904      	bls.n	800ab38 <tcp_process+0x478>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab32:	005b      	lsls	r3, r3, #1
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	e001      	b.n	800ab3c <tcp_process+0x47c>
 800ab38:	f241 131c 	movw	r3, #4380	; 0x111c
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ab42:	4b53      	ldr	r3, [pc, #332]	; (800ac90 <tcp_process+0x5d0>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	f003 0320 	and.w	r3, r3, #32
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d037      	beq.n	800abbe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8b5b      	ldrh	r3, [r3, #26]
 800ab52:	f043 0302 	orr.w	r3, r3, #2
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2207      	movs	r2, #7
 800ab60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ab62:	e02c      	b.n	800abbe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab64:	4b40      	ldr	r3, [pc, #256]	; (800ac68 <tcp_process+0x5a8>)
 800ab66:	6819      	ldr	r1, [r3, #0]
 800ab68:	4b40      	ldr	r3, [pc, #256]	; (800ac6c <tcp_process+0x5ac>)
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	4b40      	ldr	r3, [pc, #256]	; (800ac70 <tcp_process+0x5b0>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab74:	4b3f      	ldr	r3, [pc, #252]	; (800ac74 <tcp_process+0x5b4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab78:	885b      	ldrh	r3, [r3, #2]
 800ab7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab7c:	4a3d      	ldr	r2, [pc, #244]	; (800ac74 <tcp_process+0x5b4>)
 800ab7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab80:	8812      	ldrh	r2, [r2, #0]
 800ab82:	b292      	uxth	r2, r2
 800ab84:	9202      	str	r2, [sp, #8]
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	4b3b      	ldr	r3, [pc, #236]	; (800ac78 <tcp_process+0x5b8>)
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	4b3b      	ldr	r3, [pc, #236]	; (800ac7c <tcp_process+0x5bc>)
 800ab8e:	4602      	mov	r2, r0
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f002 fbcf 	bl	800d334 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ab96:	e167      	b.n	800ae68 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ab98:	4b32      	ldr	r3, [pc, #200]	; (800ac64 <tcp_process+0x5a4>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 8161 	beq.w	800ae68 <tcp_process+0x7a8>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	1e5a      	subs	r2, r3, #1
 800abac:	4b30      	ldr	r3, [pc, #192]	; (800ac70 <tcp_process+0x5b0>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	f040 8159 	bne.w	800ae68 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f002 f9b4 	bl	800cf24 <tcp_rexmit>
      break;
 800abbc:	e154      	b.n	800ae68 <tcp_process+0x7a8>
 800abbe:	e153      	b.n	800ae68 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fa71 	bl	800b0a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800abc6:	4b32      	ldr	r3, [pc, #200]	; (800ac90 <tcp_process+0x5d0>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	f003 0320 	and.w	r3, r3, #32
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 814c 	beq.w	800ae6c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8b5b      	ldrh	r3, [r3, #26]
 800abd8:	f043 0302 	orr.w	r3, r3, #2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2207      	movs	r2, #7
 800abe6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800abe8:	e140      	b.n	800ae6c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fa5c 	bl	800b0a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800abf0:	4b27      	ldr	r3, [pc, #156]	; (800ac90 <tcp_process+0x5d0>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f003 0320 	and.w	r3, r3, #32
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d071      	beq.n	800ace0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800abfc:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <tcp_process+0x5a4>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	f003 0310 	and.w	r3, r3, #16
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d060      	beq.n	800acca <tcp_process+0x60a>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac0c:	4b16      	ldr	r3, [pc, #88]	; (800ac68 <tcp_process+0x5a8>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d15a      	bne.n	800acca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d156      	bne.n	800acca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	8b5b      	ldrh	r3, [r3, #26]
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7fe fdbe 	bl	80097ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ac30:	4b18      	ldr	r3, [pc, #96]	; (800ac94 <tcp_process+0x5d4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d105      	bne.n	800ac46 <tcp_process+0x586>
 800ac3a:	4b16      	ldr	r3, [pc, #88]	; (800ac94 <tcp_process+0x5d4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	4a14      	ldr	r2, [pc, #80]	; (800ac94 <tcp_process+0x5d4>)
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	e02e      	b.n	800aca4 <tcp_process+0x5e4>
 800ac46:	4b13      	ldr	r3, [pc, #76]	; (800ac94 <tcp_process+0x5d4>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	e027      	b.n	800ac9e <tcp_process+0x5de>
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d11f      	bne.n	800ac98 <tcp_process+0x5d8>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68da      	ldr	r2, [r3, #12]
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	60da      	str	r2, [r3, #12]
 800ac60:	e020      	b.n	800aca4 <tcp_process+0x5e4>
 800ac62:	bf00      	nop
 800ac64:	20000160 	.word	0x20000160
 800ac68:	20000158 	.word	0x20000158
 800ac6c:	2000015e 	.word	0x2000015e
 800ac70:	20000154 	.word	0x20000154
 800ac74:	20000144 	.word	0x20000144
 800ac78:	2000347c 	.word	0x2000347c
 800ac7c:	20003480 	.word	0x20003480
 800ac80:	0801325c 	.word	0x0801325c
 800ac84:	080134fc 	.word	0x080134fc
 800ac88:	080132a8 	.word	0x080132a8
 800ac8c:	2000015c 	.word	0x2000015c
 800ac90:	20000161 	.word	0x20000161
 800ac94:	20008b70 	.word	0x20008b70
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	617b      	str	r3, [r7, #20]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d1d4      	bne.n	800ac4e <tcp_process+0x58e>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	4b77      	ldr	r3, [pc, #476]	; (800ae88 <tcp_process+0x7c8>)
 800acac:	2201      	movs	r2, #1
 800acae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	220a      	movs	r2, #10
 800acb4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800acb6:	4b75      	ldr	r3, [pc, #468]	; (800ae8c <tcp_process+0x7cc>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	60da      	str	r2, [r3, #12]
 800acbe:	4a73      	ldr	r2, [pc, #460]	; (800ae8c <tcp_process+0x7cc>)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6013      	str	r3, [r2, #0]
 800acc4:	f002 fcf8 	bl	800d6b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800acc8:	e0d2      	b.n	800ae70 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	8b5b      	ldrh	r3, [r3, #26]
 800acce:	f043 0302 	orr.w	r3, r3, #2
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2208      	movs	r2, #8
 800acdc:	751a      	strb	r2, [r3, #20]
      break;
 800acde:	e0c7      	b.n	800ae70 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ace0:	4b6b      	ldr	r3, [pc, #428]	; (800ae90 <tcp_process+0x7d0>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f003 0310 	and.w	r3, r3, #16
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 80c1 	beq.w	800ae70 <tcp_process+0x7b0>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800acf2:	4b68      	ldr	r3, [pc, #416]	; (800ae94 <tcp_process+0x7d4>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	f040 80ba 	bne.w	800ae70 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f040 80b5 	bne.w	800ae70 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2206      	movs	r2, #6
 800ad0a:	751a      	strb	r2, [r3, #20]
      break;
 800ad0c:	e0b0      	b.n	800ae70 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f9ca 	bl	800b0a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ad14:	4b60      	ldr	r3, [pc, #384]	; (800ae98 <tcp_process+0x7d8>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 80a9 	beq.w	800ae74 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	8b5b      	ldrh	r3, [r3, #26]
 800ad26:	f043 0302 	orr.w	r3, r3, #2
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7fe fd3b 	bl	80097ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ad36:	4b59      	ldr	r3, [pc, #356]	; (800ae9c <tcp_process+0x7dc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d105      	bne.n	800ad4c <tcp_process+0x68c>
 800ad40:	4b56      	ldr	r3, [pc, #344]	; (800ae9c <tcp_process+0x7dc>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	4a55      	ldr	r2, [pc, #340]	; (800ae9c <tcp_process+0x7dc>)
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	e013      	b.n	800ad74 <tcp_process+0x6b4>
 800ad4c:	4b53      	ldr	r3, [pc, #332]	; (800ae9c <tcp_process+0x7dc>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	613b      	str	r3, [r7, #16]
 800ad52:	e00c      	b.n	800ad6e <tcp_process+0x6ae>
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d104      	bne.n	800ad68 <tcp_process+0x6a8>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	60da      	str	r2, [r3, #12]
 800ad66:	e005      	b.n	800ad74 <tcp_process+0x6b4>
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d1ef      	bne.n	800ad54 <tcp_process+0x694>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	60da      	str	r2, [r3, #12]
 800ad7a:	4b43      	ldr	r3, [pc, #268]	; (800ae88 <tcp_process+0x7c8>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	220a      	movs	r2, #10
 800ad84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ad86:	4b41      	ldr	r3, [pc, #260]	; (800ae8c <tcp_process+0x7cc>)
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	60da      	str	r2, [r3, #12]
 800ad8e:	4a3f      	ldr	r2, [pc, #252]	; (800ae8c <tcp_process+0x7cc>)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	f002 fc90 	bl	800d6b8 <tcp_timer_needed>
      }
      break;
 800ad98:	e06c      	b.n	800ae74 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f984 	bl	800b0a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ada0:	4b3b      	ldr	r3, [pc, #236]	; (800ae90 <tcp_process+0x7d0>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	f003 0310 	and.w	r3, r3, #16
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d065      	beq.n	800ae78 <tcp_process+0x7b8>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adb0:	4b38      	ldr	r3, [pc, #224]	; (800ae94 <tcp_process+0x7d4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d15f      	bne.n	800ae78 <tcp_process+0x7b8>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d15b      	bne.n	800ae78 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7fe fcf3 	bl	80097ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800adc6:	4b35      	ldr	r3, [pc, #212]	; (800ae9c <tcp_process+0x7dc>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d105      	bne.n	800addc <tcp_process+0x71c>
 800add0:	4b32      	ldr	r3, [pc, #200]	; (800ae9c <tcp_process+0x7dc>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	4a31      	ldr	r2, [pc, #196]	; (800ae9c <tcp_process+0x7dc>)
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	e013      	b.n	800ae04 <tcp_process+0x744>
 800addc:	4b2f      	ldr	r3, [pc, #188]	; (800ae9c <tcp_process+0x7dc>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	60fb      	str	r3, [r7, #12]
 800ade2:	e00c      	b.n	800adfe <tcp_process+0x73e>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	429a      	cmp	r2, r3
 800adec:	d104      	bne.n	800adf8 <tcp_process+0x738>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	60da      	str	r2, [r3, #12]
 800adf6:	e005      	b.n	800ae04 <tcp_process+0x744>
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1ef      	bne.n	800ade4 <tcp_process+0x724>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	60da      	str	r2, [r3, #12]
 800ae0a:	4b1f      	ldr	r3, [pc, #124]	; (800ae88 <tcp_process+0x7c8>)
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	220a      	movs	r2, #10
 800ae14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ae16:	4b1d      	ldr	r3, [pc, #116]	; (800ae8c <tcp_process+0x7cc>)
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	60da      	str	r2, [r3, #12]
 800ae1e:	4a1b      	ldr	r2, [pc, #108]	; (800ae8c <tcp_process+0x7cc>)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	f002 fc48 	bl	800d6b8 <tcp_timer_needed>
      }
      break;
 800ae28:	e026      	b.n	800ae78 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f93c 	bl	800b0a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ae30:	4b17      	ldr	r3, [pc, #92]	; (800ae90 <tcp_process+0x7d0>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	f003 0310 	and.w	r3, r3, #16
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01f      	beq.n	800ae7c <tcp_process+0x7bc>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae40:	4b14      	ldr	r3, [pc, #80]	; (800ae94 <tcp_process+0x7d4>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d119      	bne.n	800ae7c <tcp_process+0x7bc>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d115      	bne.n	800ae7c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ae50:	4b11      	ldr	r3, [pc, #68]	; (800ae98 <tcp_process+0x7d8>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	f043 0310 	orr.w	r3, r3, #16
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <tcp_process+0x7d8>)
 800ae5c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ae5e:	e00d      	b.n	800ae7c <tcp_process+0x7bc>
    default:
      break;
 800ae60:	bf00      	nop
 800ae62:	e00c      	b.n	800ae7e <tcp_process+0x7be>
      break;
 800ae64:	bf00      	nop
 800ae66:	e00a      	b.n	800ae7e <tcp_process+0x7be>
      break;
 800ae68:	bf00      	nop
 800ae6a:	e008      	b.n	800ae7e <tcp_process+0x7be>
      break;
 800ae6c:	bf00      	nop
 800ae6e:	e006      	b.n	800ae7e <tcp_process+0x7be>
      break;
 800ae70:	bf00      	nop
 800ae72:	e004      	b.n	800ae7e <tcp_process+0x7be>
      break;
 800ae74:	bf00      	nop
 800ae76:	e002      	b.n	800ae7e <tcp_process+0x7be>
      break;
 800ae78:	bf00      	nop
 800ae7a:	e000      	b.n	800ae7e <tcp_process+0x7be>
      break;
 800ae7c:	bf00      	nop
  }
  return ERR_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3724      	adds	r7, #36	; 0x24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd90      	pop	{r4, r7, pc}
 800ae88:	20008b6c 	.word	0x20008b6c
 800ae8c:	20008b80 	.word	0x20008b80
 800ae90:	20000160 	.word	0x20000160
 800ae94:	20000158 	.word	0x20000158
 800ae98:	20000161 	.word	0x20000161
 800ae9c:	20008b70 	.word	0x20008b70

0800aea0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800aea0:	b590      	push	{r4, r7, lr}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <tcp_oos_insert_segment+0x1e>
 800aeb0:	4b3b      	ldr	r3, [pc, #236]	; (800afa0 <tcp_oos_insert_segment+0x100>)
 800aeb2:	f240 421f 	movw	r2, #1055	; 0x41f
 800aeb6:	493b      	ldr	r1, [pc, #236]	; (800afa4 <tcp_oos_insert_segment+0x104>)
 800aeb8:	483b      	ldr	r0, [pc, #236]	; (800afa8 <tcp_oos_insert_segment+0x108>)
 800aeba:	f006 f945 	bl	8011148 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	899b      	ldrh	r3, [r3, #12]
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fb fcba 	bl	8006840 <lwip_htons>
 800aecc:	4603      	mov	r3, r0
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d028      	beq.n	800af2a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800aed8:	6838      	ldr	r0, [r7, #0]
 800aeda:	f7fe fa65 	bl	80093a8 <tcp_segs_free>
    next = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	603b      	str	r3, [r7, #0]
 800aee2:	e056      	b.n	800af92 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	899b      	ldrh	r3, [r3, #12]
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fb fca7 	bl	8006840 <lwip_htons>
 800aef2:	4603      	mov	r3, r0
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00d      	beq.n	800af1a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	899b      	ldrh	r3, [r3, #12]
 800af04:	b29c      	uxth	r4, r3
 800af06:	2001      	movs	r0, #1
 800af08:	f7fb fc9a 	bl	8006840 <lwip_htons>
 800af0c:	4603      	mov	r3, r0
 800af0e:	461a      	mov	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	4322      	orrs	r2, r4
 800af16:	b292      	uxth	r2, r2
 800af18:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f7fe fa54 	bl	80093d2 <tcp_seg_free>
    while (next &&
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00e      	beq.n	800af4e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	891b      	ldrh	r3, [r3, #8]
 800af34:	461a      	mov	r2, r3
 800af36:	4b1d      	ldr	r3, [pc, #116]	; (800afac <tcp_oos_insert_segment+0x10c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	441a      	add	r2, r3
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	8909      	ldrh	r1, [r1, #8]
 800af46:	440b      	add	r3, r1
 800af48:	1ad3      	subs	r3, r2, r3
    while (next &&
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	daca      	bge.n	800aee4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01e      	beq.n	800af92 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	891b      	ldrh	r3, [r3, #8]
 800af58:	461a      	mov	r2, r3
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <tcp_oos_insert_segment+0x10c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	441a      	add	r2, r3
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	1ad3      	subs	r3, r2, r3
    if (next &&
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dd12      	ble.n	800af92 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	b29a      	uxth	r2, r3
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <tcp_oos_insert_segment+0x10c>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	891b      	ldrh	r3, [r3, #8]
 800af8a:	4619      	mov	r1, r3
 800af8c:	4610      	mov	r0, r2
 800af8e:	f7fc fd85 	bl	8007a9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	601a      	str	r2, [r3, #0]
}
 800af98:	bf00      	nop
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd90      	pop	{r4, r7, pc}
 800afa0:	0801325c 	.word	0x0801325c
 800afa4:	0801351c 	.word	0x0801351c
 800afa8:	080132a8 	.word	0x080132a8
 800afac:	20000154 	.word	0x20000154

0800afb0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800afb0:	b5b0      	push	{r4, r5, r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800afbe:	e03e      	b.n	800b03e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fc ff72 	bl	8007eb8 <pbuf_clen>
 800afd4:	4603      	mov	r3, r0
 800afd6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800afde:	8a7a      	ldrh	r2, [r7, #18]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d906      	bls.n	800aff2 <tcp_free_acked_segments+0x42>
 800afe4:	4b2a      	ldr	r3, [pc, #168]	; (800b090 <tcp_free_acked_segments+0xe0>)
 800afe6:	f240 4257 	movw	r2, #1111	; 0x457
 800afea:	492a      	ldr	r1, [pc, #168]	; (800b094 <tcp_free_acked_segments+0xe4>)
 800afec:	482a      	ldr	r0, [pc, #168]	; (800b098 <tcp_free_acked_segments+0xe8>)
 800afee:	f006 f8ab 	bl	8011148 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800aff8:	8a7b      	ldrh	r3, [r7, #18]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	891a      	ldrh	r2, [r3, #8]
 800b008:	4b24      	ldr	r3, [pc, #144]	; (800b09c <tcp_free_acked_segments+0xec>)
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	4413      	add	r3, r2
 800b00e:	b29a      	uxth	r2, r3
 800b010:	4b22      	ldr	r3, [pc, #136]	; (800b09c <tcp_free_acked_segments+0xec>)
 800b012:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b014:	6978      	ldr	r0, [r7, #20]
 800b016:	f7fe f9dc 	bl	80093d2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00c      	beq.n	800b03e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d109      	bne.n	800b03e <tcp_free_acked_segments+0x8e>
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <tcp_free_acked_segments+0x8e>
 800b030:	4b17      	ldr	r3, [pc, #92]	; (800b090 <tcp_free_acked_segments+0xe0>)
 800b032:	f240 4261 	movw	r2, #1121	; 0x461
 800b036:	491a      	ldr	r1, [pc, #104]	; (800b0a0 <tcp_free_acked_segments+0xf0>)
 800b038:	4817      	ldr	r0, [pc, #92]	; (800b098 <tcp_free_acked_segments+0xe8>)
 800b03a:	f006 f885 	bl	8011148 <iprintf>
  while (seg_list != NULL &&
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d020      	beq.n	800b086 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fb fc0d 	bl	800686a <lwip_htonl>
 800b050:	4604      	mov	r4, r0
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	891b      	ldrh	r3, [r3, #8]
 800b056:	461d      	mov	r5, r3
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	899b      	ldrh	r3, [r3, #12]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	4618      	mov	r0, r3
 800b062:	f7fb fbed 	bl	8006840 <lwip_htons>
 800b066:	4603      	mov	r3, r0
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	f003 0303 	and.w	r3, r3, #3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <tcp_free_acked_segments+0xc6>
 800b072:	2301      	movs	r3, #1
 800b074:	e000      	b.n	800b078 <tcp_free_acked_segments+0xc8>
 800b076:	2300      	movs	r3, #0
 800b078:	442b      	add	r3, r5
 800b07a:	18e2      	adds	r2, r4, r3
 800b07c:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <tcp_free_acked_segments+0xf4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b082:	2b00      	cmp	r3, #0
 800b084:	dd9c      	ble.n	800afc0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b086:	68bb      	ldr	r3, [r7, #8]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bdb0      	pop	{r4, r5, r7, pc}
 800b090:	0801325c 	.word	0x0801325c
 800b094:	08013544 	.word	0x08013544
 800b098:	080132a8 	.word	0x080132a8
 800b09c:	2000015c 	.word	0x2000015c
 800b0a0:	0801356c 	.word	0x0801356c
 800b0a4:	20000158 	.word	0x20000158

0800b0a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b0a8:	b5b0      	push	{r4, r5, r7, lr}
 800b0aa:	b094      	sub	sp, #80	; 0x50
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <tcp_receive+0x20>
 800b0ba:	4ba6      	ldr	r3, [pc, #664]	; (800b354 <tcp_receive+0x2ac>)
 800b0bc:	f240 427b 	movw	r2, #1147	; 0x47b
 800b0c0:	49a5      	ldr	r1, [pc, #660]	; (800b358 <tcp_receive+0x2b0>)
 800b0c2:	48a6      	ldr	r0, [pc, #664]	; (800b35c <tcp_receive+0x2b4>)
 800b0c4:	f006 f840 	bl	8011148 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	7d1b      	ldrb	r3, [r3, #20]
 800b0cc:	2b03      	cmp	r3, #3
 800b0ce:	d806      	bhi.n	800b0de <tcp_receive+0x36>
 800b0d0:	4ba0      	ldr	r3, [pc, #640]	; (800b354 <tcp_receive+0x2ac>)
 800b0d2:	f240 427c 	movw	r2, #1148	; 0x47c
 800b0d6:	49a2      	ldr	r1, [pc, #648]	; (800b360 <tcp_receive+0x2b8>)
 800b0d8:	48a0      	ldr	r0, [pc, #640]	; (800b35c <tcp_receive+0x2b4>)
 800b0da:	f006 f835 	bl	8011148 <iprintf>

  if (flags & TCP_ACK) {
 800b0de:	4ba1      	ldr	r3, [pc, #644]	; (800b364 <tcp_receive+0x2bc>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	f003 0310 	and.w	r3, r3, #16
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 8263 	beq.w	800b5b2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f8:	4413      	add	r3, r2
 800b0fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b100:	4b99      	ldr	r3, [pc, #612]	; (800b368 <tcp_receive+0x2c0>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	db1b      	blt.n	800b142 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b10e:	4b96      	ldr	r3, [pc, #600]	; (800b368 <tcp_receive+0x2c0>)
 800b110:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b112:	429a      	cmp	r2, r3
 800b114:	d106      	bne.n	800b124 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b11a:	4b94      	ldr	r3, [pc, #592]	; (800b36c <tcp_receive+0x2c4>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	2b00      	cmp	r3, #0
 800b122:	db0e      	blt.n	800b142 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b128:	4b90      	ldr	r3, [pc, #576]	; (800b36c <tcp_receive+0x2c4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d125      	bne.n	800b17c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b130:	4b8f      	ldr	r3, [pc, #572]	; (800b370 <tcp_receive+0x2c8>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	89db      	ldrh	r3, [r3, #14]
 800b136:	b29a      	uxth	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b13e:	429a      	cmp	r2, r3
 800b140:	d91c      	bls.n	800b17c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b142:	4b8b      	ldr	r3, [pc, #556]	; (800b370 <tcp_receive+0x2c8>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	89db      	ldrh	r3, [r3, #14]
 800b148:	b29a      	uxth	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d205      	bcs.n	800b16c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b16c:	4b7e      	ldr	r3, [pc, #504]	; (800b368 <tcp_receive+0x2c0>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b174:	4b7d      	ldr	r3, [pc, #500]	; (800b36c <tcp_receive+0x2c4>)
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b17c:	4b7b      	ldr	r3, [pc, #492]	; (800b36c <tcp_receive+0x2c4>)
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	dc58      	bgt.n	800b23c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b18a:	4b7a      	ldr	r3, [pc, #488]	; (800b374 <tcp_receive+0x2cc>)
 800b18c:	881b      	ldrh	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d14b      	bne.n	800b22a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b19c:	4413      	add	r3, r2
 800b19e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d142      	bne.n	800b22a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	db3d      	blt.n	800b22a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1b2:	4b6e      	ldr	r3, [pc, #440]	; (800b36c <tcp_receive+0x2c4>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d137      	bne.n	800b22a <tcp_receive+0x182>
              found_dupack = 1;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1c4:	2bff      	cmp	r3, #255	; 0xff
 800b1c6:	d007      	beq.n	800b1d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1de:	2b03      	cmp	r3, #3
 800b1e0:	d91b      	bls.n	800b21a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1ec:	4413      	add	r3, r2
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d30a      	bcc.n	800b210 <tcp_receive+0x168>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b204:	4413      	add	r3, r2
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b20e:	e004      	b.n	800b21a <tcp_receive+0x172>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b220:	2b02      	cmp	r3, #2
 800b222:	d902      	bls.n	800b22a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f001 fee9 	bl	800cffc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f040 8160 	bne.w	800b4f2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b23a:	e15a      	b.n	800b4f2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b23c:	4b4b      	ldr	r3, [pc, #300]	; (800b36c <tcp_receive+0x2c4>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	3b01      	subs	r3, #1
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f2c0 814d 	blt.w	800b4e8 <tcp_receive+0x440>
 800b24e:	4b47      	ldr	r3, [pc, #284]	; (800b36c <tcp_receive+0x2c4>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f300 8145 	bgt.w	800b4e8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	8b5b      	ldrh	r3, [r3, #26]
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	d010      	beq.n	800b28c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	8b5b      	ldrh	r3, [r3, #26]
 800b26e:	f023 0304 	bic.w	r3, r3, #4
 800b272:	b29a      	uxth	r2, r3
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b29a:	10db      	asrs	r3, r3, #3
 800b29c:	b21b      	sxth	r3, r3
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	b21a      	sxth	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b2b4:	4b2d      	ldr	r3, [pc, #180]	; (800b36c <tcp_receive+0x2c4>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b2cc:	4b27      	ldr	r3, [pc, #156]	; (800b36c <tcp_receive+0x2c4>)
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	7d1b      	ldrb	r3, [r3, #20]
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	f240 8096 	bls.w	800b40a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d244      	bcs.n	800b378 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	8b5b      	ldrh	r3, [r3, #26]
 800b2f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <tcp_receive+0x256>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e000      	b.n	800b300 <tcp_receive+0x258>
 800b2fe:	2302      	movs	r3, #2
 800b300:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b304:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b308:	b29a      	uxth	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b30e:	fb12 f303 	smulbb	r3, r2, r3
 800b312:	b29b      	uxth	r3, r3
 800b314:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b316:	4293      	cmp	r3, r2
 800b318:	bf28      	it	cs
 800b31a:	4613      	movcs	r3, r2
 800b31c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b324:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b326:	4413      	add	r3, r2
 800b328:	b29a      	uxth	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b330:	429a      	cmp	r2, r3
 800b332:	d309      	bcc.n	800b348 <tcp_receive+0x2a0>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b33a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b33c:	4413      	add	r3, r2
 800b33e:	b29a      	uxth	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b346:	e060      	b.n	800b40a <tcp_receive+0x362>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b34e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b352:	e05a      	b.n	800b40a <tcp_receive+0x362>
 800b354:	0801325c 	.word	0x0801325c
 800b358:	0801358c 	.word	0x0801358c
 800b35c:	080132a8 	.word	0x080132a8
 800b360:	080135a8 	.word	0x080135a8
 800b364:	20000160 	.word	0x20000160
 800b368:	20000154 	.word	0x20000154
 800b36c:	20000158 	.word	0x20000158
 800b370:	20000144 	.word	0x20000144
 800b374:	2000015e 	.word	0x2000015e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b37e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b380:	4413      	add	r3, r2
 800b382:	b29a      	uxth	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d309      	bcc.n	800b3a2 <tcp_receive+0x2fa>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b396:	4413      	add	r3, r2
 800b398:	b29a      	uxth	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b3a0:	e004      	b.n	800b3ac <tcp_receive+0x304>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d326      	bcc.n	800b40a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3dc:	4413      	add	r3, r2
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d30a      	bcc.n	800b400 <tcp_receive+0x358>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3f4:	4413      	add	r3, r2
 800b3f6:	b29a      	uxth	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b3fe:	e004      	b.n	800b40a <tcp_receive+0x362>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b406:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b412:	4a98      	ldr	r2, [pc, #608]	; (800b674 <tcp_receive+0x5cc>)
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff fdcb 	bl	800afb0 <tcp_free_acked_segments>
 800b41a:	4602      	mov	r2, r0
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b428:	4a93      	ldr	r2, [pc, #588]	; (800b678 <tcp_receive+0x5d0>)
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff fdc0 	bl	800afb0 <tcp_free_acked_segments>
 800b430:	4602      	mov	r2, r0
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d104      	bne.n	800b448 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b444:	861a      	strh	r2, [r3, #48]	; 0x30
 800b446:	e002      	b.n	800b44e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2200      	movs	r2, #0
 800b452:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d103      	bne.n	800b464 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b46a:	4b84      	ldr	r3, [pc, #528]	; (800b67c <tcp_receive+0x5d4>)
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	4413      	add	r3, r2
 800b470:	b29a      	uxth	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	8b5b      	ldrh	r3, [r3, #26]
 800b47c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b480:	2b00      	cmp	r3, #0
 800b482:	d035      	beq.n	800b4f0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d118      	bne.n	800b4be <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00c      	beq.n	800b4ae <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fb f9e2 	bl	800686a <lwip_htonl>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	dc20      	bgt.n	800b4f0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	8b5b      	ldrh	r3, [r3, #26]
 800b4b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4bc:	e018      	b.n	800b4f0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fb f9cd 	bl	800686a <lwip_htonl>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	1ae3      	subs	r3, r4, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	dc0b      	bgt.n	800b4f0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	8b5b      	ldrh	r3, [r3, #26]
 800b4dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4e6:	e003      	b.n	800b4f0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 ff75 	bl	800d3d8 <tcp_send_empty_ack>
 800b4ee:	e000      	b.n	800b4f2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b4f0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d05b      	beq.n	800b5b2 <tcp_receive+0x50a>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4fe:	4b60      	ldr	r3, [pc, #384]	; (800b680 <tcp_receive+0x5d8>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	da54      	bge.n	800b5b2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b508:	4b5e      	ldr	r3, [pc, #376]	; (800b684 <tcp_receive+0x5dc>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b512:	b29b      	uxth	r3, r3
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	b29b      	uxth	r3, r3
 800b518:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b51c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b526:	10db      	asrs	r3, r3, #3
 800b528:	b21b      	sxth	r3, r3
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	b29b      	uxth	r3, r3
 800b530:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b540:	4413      	add	r3, r2
 800b542:	b29b      	uxth	r3, r3
 800b544:	b21a      	sxth	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b54a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b54e:	2b00      	cmp	r3, #0
 800b550:	da05      	bge.n	800b55e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800b552:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b556:	425b      	negs	r3, r3
 800b558:	b29b      	uxth	r3, r3
 800b55a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b55e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b568:	109b      	asrs	r3, r3, #2
 800b56a:	b21b      	sxth	r3, r3
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	b29b      	uxth	r3, r3
 800b572:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b582:	4413      	add	r3, r2
 800b584:	b29b      	uxth	r3, r3
 800b586:	b21a      	sxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b592:	10db      	asrs	r3, r3, #3
 800b594:	b21b      	sxth	r3, r3
 800b596:	b29a      	uxth	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	b21a      	sxth	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b5b2:	4b35      	ldr	r3, [pc, #212]	; (800b688 <tcp_receive+0x5e0>)
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 84e1 	beq.w	800bf7e <tcp_receive+0xed6>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7d1b      	ldrb	r3, [r3, #20]
 800b5c0:	2b06      	cmp	r3, #6
 800b5c2:	f200 84dc 	bhi.w	800bf7e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ca:	4b30      	ldr	r3, [pc, #192]	; (800b68c <tcp_receive+0x5e4>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	1ad3      	subs	r3, r2, r3
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f2c0 808e 	blt.w	800b6f4 <tcp_receive+0x64c>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5dc:	4b2a      	ldr	r3, [pc, #168]	; (800b688 <tcp_receive+0x5e0>)
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4b2a      	ldr	r3, [pc, #168]	; (800b68c <tcp_receive+0x5e4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	440b      	add	r3, r1
 800b5e8:	1ad3      	subs	r3, r2, r3
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f300 8081 	bgt.w	800b6f4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b5f2:	4b27      	ldr	r3, [pc, #156]	; (800b690 <tcp_receive+0x5e8>)
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5fc:	4b23      	ldr	r3, [pc, #140]	; (800b68c <tcp_receive+0x5e4>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	1ad3      	subs	r3, r2, r3
 800b602:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b604:	4b22      	ldr	r3, [pc, #136]	; (800b690 <tcp_receive+0x5e8>)
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d106      	bne.n	800b61a <tcp_receive+0x572>
 800b60c:	4b21      	ldr	r3, [pc, #132]	; (800b694 <tcp_receive+0x5ec>)
 800b60e:	f240 5294 	movw	r2, #1428	; 0x594
 800b612:	4921      	ldr	r1, [pc, #132]	; (800b698 <tcp_receive+0x5f0>)
 800b614:	4821      	ldr	r0, [pc, #132]	; (800b69c <tcp_receive+0x5f4>)
 800b616:	f005 fd97 	bl	8011148 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b620:	4293      	cmp	r3, r2
 800b622:	d906      	bls.n	800b632 <tcp_receive+0x58a>
 800b624:	4b1b      	ldr	r3, [pc, #108]	; (800b694 <tcp_receive+0x5ec>)
 800b626:	f240 5295 	movw	r2, #1429	; 0x595
 800b62a:	491d      	ldr	r1, [pc, #116]	; (800b6a0 <tcp_receive+0x5f8>)
 800b62c:	481b      	ldr	r0, [pc, #108]	; (800b69c <tcp_receive+0x5f4>)
 800b62e:	f005 fd8b 	bl	8011148 <iprintf>
      off = (u16_t)off32;
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b638:	4b15      	ldr	r3, [pc, #84]	; (800b690 <tcp_receive+0x5e8>)
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	891b      	ldrh	r3, [r3, #8]
 800b63e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b642:	429a      	cmp	r2, r3
 800b644:	d906      	bls.n	800b654 <tcp_receive+0x5ac>
 800b646:	4b13      	ldr	r3, [pc, #76]	; (800b694 <tcp_receive+0x5ec>)
 800b648:	f240 5297 	movw	r2, #1431	; 0x597
 800b64c:	4915      	ldr	r1, [pc, #84]	; (800b6a4 <tcp_receive+0x5fc>)
 800b64e:	4813      	ldr	r0, [pc, #76]	; (800b69c <tcp_receive+0x5f4>)
 800b650:	f005 fd7a 	bl	8011148 <iprintf>
      inseg.len -= off;
 800b654:	4b0e      	ldr	r3, [pc, #56]	; (800b690 <tcp_receive+0x5e8>)
 800b656:	891a      	ldrh	r2, [r3, #8]
 800b658:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b65c:	1ad3      	subs	r3, r2, r3
 800b65e:	b29a      	uxth	r2, r3
 800b660:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <tcp_receive+0x5e8>)
 800b662:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <tcp_receive+0x5e8>)
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	891a      	ldrh	r2, [r3, #8]
 800b66a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b672:	e029      	b.n	800b6c8 <tcp_receive+0x620>
 800b674:	080135c4 	.word	0x080135c4
 800b678:	080135cc 	.word	0x080135cc
 800b67c:	2000015c 	.word	0x2000015c
 800b680:	20000158 	.word	0x20000158
 800b684:	20008b74 	.word	0x20008b74
 800b688:	2000015e 	.word	0x2000015e
 800b68c:	20000154 	.word	0x20000154
 800b690:	20000134 	.word	0x20000134
 800b694:	0801325c 	.word	0x0801325c
 800b698:	080135d4 	.word	0x080135d4
 800b69c:	080132a8 	.word	0x080132a8
 800b6a0:	080135e4 	.word	0x080135e4
 800b6a4:	080135f4 	.word	0x080135f4
        off -= p->len;
 800b6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6aa:	895b      	ldrh	r3, [r3, #10]
 800b6ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b6ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b6bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6be:	2200      	movs	r2, #0
 800b6c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b6c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b6c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ca:	895b      	ldrh	r3, [r3, #10]
 800b6cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d8e9      	bhi.n	800b6a8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b6d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b6dc:	f7fc fade 	bl	8007c9c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e4:	4a91      	ldr	r2, [pc, #580]	; (800b92c <tcp_receive+0x884>)
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	4b91      	ldr	r3, [pc, #580]	; (800b930 <tcp_receive+0x888>)
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	4a8f      	ldr	r2, [pc, #572]	; (800b92c <tcp_receive+0x884>)
 800b6ee:	6812      	ldr	r2, [r2, #0]
 800b6f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b6f2:	e00d      	b.n	800b710 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b6f4:	4b8d      	ldr	r3, [pc, #564]	; (800b92c <tcp_receive+0x884>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	da06      	bge.n	800b710 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8b5b      	ldrh	r3, [r3, #26]
 800b706:	f043 0302 	orr.w	r3, r3, #2
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b710:	4b86      	ldr	r3, [pc, #536]	; (800b92c <tcp_receive+0x884>)
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f2c0 842a 	blt.w	800bf74 <tcp_receive+0xecc>
 800b720:	4b82      	ldr	r3, [pc, #520]	; (800b92c <tcp_receive+0x884>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b72c:	440b      	add	r3, r1
 800b72e:	1ad3      	subs	r3, r2, r3
 800b730:	3301      	adds	r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	f300 841e 	bgt.w	800bf74 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b73c:	4b7b      	ldr	r3, [pc, #492]	; (800b92c <tcp_receive+0x884>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	f040 829a 	bne.w	800bc7a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b746:	4b7a      	ldr	r3, [pc, #488]	; (800b930 <tcp_receive+0x888>)
 800b748:	891c      	ldrh	r4, [r3, #8]
 800b74a:	4b79      	ldr	r3, [pc, #484]	; (800b930 <tcp_receive+0x888>)
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	899b      	ldrh	r3, [r3, #12]
 800b750:	b29b      	uxth	r3, r3
 800b752:	4618      	mov	r0, r3
 800b754:	f7fb f874 	bl	8006840 <lwip_htons>
 800b758:	4603      	mov	r3, r0
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f003 0303 	and.w	r3, r3, #3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <tcp_receive+0x6c0>
 800b764:	2301      	movs	r3, #1
 800b766:	e000      	b.n	800b76a <tcp_receive+0x6c2>
 800b768:	2300      	movs	r3, #0
 800b76a:	4423      	add	r3, r4
 800b76c:	b29a      	uxth	r2, r3
 800b76e:	4b71      	ldr	r3, [pc, #452]	; (800b934 <tcp_receive+0x88c>)
 800b770:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b776:	4b6f      	ldr	r3, [pc, #444]	; (800b934 <tcp_receive+0x88c>)
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d275      	bcs.n	800b86a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b77e:	4b6c      	ldr	r3, [pc, #432]	; (800b930 <tcp_receive+0x888>)
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	899b      	ldrh	r3, [r3, #12]
 800b784:	b29b      	uxth	r3, r3
 800b786:	4618      	mov	r0, r3
 800b788:	f7fb f85a 	bl	8006840 <lwip_htons>
 800b78c:	4603      	mov	r3, r0
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	2b00      	cmp	r3, #0
 800b796:	d01f      	beq.n	800b7d8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b798:	4b65      	ldr	r3, [pc, #404]	; (800b930 <tcp_receive+0x888>)
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	899b      	ldrh	r3, [r3, #12]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	b21b      	sxth	r3, r3
 800b7a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b7a6:	b21c      	sxth	r4, r3
 800b7a8:	4b61      	ldr	r3, [pc, #388]	; (800b930 <tcp_receive+0x888>)
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	899b      	ldrh	r3, [r3, #12]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fb f845 	bl	8006840 <lwip_htons>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fb f83c 	bl	8006840 <lwip_htons>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	b21b      	sxth	r3, r3
 800b7cc:	4323      	orrs	r3, r4
 800b7ce:	b21a      	sxth	r2, r3
 800b7d0:	4b57      	ldr	r3, [pc, #348]	; (800b930 <tcp_receive+0x888>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	b292      	uxth	r2, r2
 800b7d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b7dc:	4b54      	ldr	r3, [pc, #336]	; (800b930 <tcp_receive+0x888>)
 800b7de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b7e0:	4b53      	ldr	r3, [pc, #332]	; (800b930 <tcp_receive+0x888>)
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	899b      	ldrh	r3, [r3, #12]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fb f829 	bl	8006840 <lwip_htons>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	f003 0302 	and.w	r3, r3, #2
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <tcp_receive+0x75e>
            inseg.len -= 1;
 800b7fa:	4b4d      	ldr	r3, [pc, #308]	; (800b930 <tcp_receive+0x888>)
 800b7fc:	891b      	ldrh	r3, [r3, #8]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	b29a      	uxth	r2, r3
 800b802:	4b4b      	ldr	r3, [pc, #300]	; (800b930 <tcp_receive+0x888>)
 800b804:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b806:	4b4a      	ldr	r3, [pc, #296]	; (800b930 <tcp_receive+0x888>)
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	4a49      	ldr	r2, [pc, #292]	; (800b930 <tcp_receive+0x888>)
 800b80c:	8912      	ldrh	r2, [r2, #8]
 800b80e:	4611      	mov	r1, r2
 800b810:	4618      	mov	r0, r3
 800b812:	f7fc f943 	bl	8007a9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b816:	4b46      	ldr	r3, [pc, #280]	; (800b930 <tcp_receive+0x888>)
 800b818:	891c      	ldrh	r4, [r3, #8]
 800b81a:	4b45      	ldr	r3, [pc, #276]	; (800b930 <tcp_receive+0x888>)
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	899b      	ldrh	r3, [r3, #12]
 800b820:	b29b      	uxth	r3, r3
 800b822:	4618      	mov	r0, r3
 800b824:	f7fb f80c 	bl	8006840 <lwip_htons>
 800b828:	4603      	mov	r3, r0
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d001      	beq.n	800b838 <tcp_receive+0x790>
 800b834:	2301      	movs	r3, #1
 800b836:	e000      	b.n	800b83a <tcp_receive+0x792>
 800b838:	2300      	movs	r3, #0
 800b83a:	4423      	add	r3, r4
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	4b3d      	ldr	r3, [pc, #244]	; (800b934 <tcp_receive+0x88c>)
 800b840:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b842:	4b3c      	ldr	r3, [pc, #240]	; (800b934 <tcp_receive+0x88c>)
 800b844:	881b      	ldrh	r3, [r3, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	4b38      	ldr	r3, [pc, #224]	; (800b92c <tcp_receive+0x884>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	441a      	add	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b856:	440b      	add	r3, r1
 800b858:	429a      	cmp	r2, r3
 800b85a:	d006      	beq.n	800b86a <tcp_receive+0x7c2>
 800b85c:	4b36      	ldr	r3, [pc, #216]	; (800b938 <tcp_receive+0x890>)
 800b85e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b862:	4936      	ldr	r1, [pc, #216]	; (800b93c <tcp_receive+0x894>)
 800b864:	4836      	ldr	r0, [pc, #216]	; (800b940 <tcp_receive+0x898>)
 800b866:	f005 fc6f 	bl	8011148 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 80e7 	beq.w	800ba42 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b874:	4b2e      	ldr	r3, [pc, #184]	; (800b930 <tcp_receive+0x888>)
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	899b      	ldrh	r3, [r3, #12]
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fa ffdf 	bl	8006840 <lwip_htons>
 800b882:	4603      	mov	r3, r0
 800b884:	b2db      	uxtb	r3, r3
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d010      	beq.n	800b8b0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b88e:	e00a      	b.n	800b8a6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b894:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f7fd fd96 	bl	80093d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1f0      	bne.n	800b890 <tcp_receive+0x7e8>
 800b8ae:	e0c8      	b.n	800ba42 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b8b6:	e052      	b.n	800b95e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	899b      	ldrh	r3, [r3, #12]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fa ffbd 	bl	8006840 <lwip_htons>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d03d      	beq.n	800b94e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b8d2:	4b17      	ldr	r3, [pc, #92]	; (800b930 <tcp_receive+0x888>)
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	899b      	ldrh	r3, [r3, #12]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fa ffb0 	bl	8006840 <lwip_htons>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d130      	bne.n	800b94e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b8ec:	4b10      	ldr	r3, [pc, #64]	; (800b930 <tcp_receive+0x888>)
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	899b      	ldrh	r3, [r3, #12]
 800b8f2:	b29c      	uxth	r4, r3
 800b8f4:	2001      	movs	r0, #1
 800b8f6:	f7fa ffa3 	bl	8006840 <lwip_htons>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <tcp_receive+0x888>)
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	4322      	orrs	r2, r4
 800b904:	b292      	uxth	r2, r2
 800b906:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b908:	4b09      	ldr	r3, [pc, #36]	; (800b930 <tcp_receive+0x888>)
 800b90a:	891c      	ldrh	r4, [r3, #8]
 800b90c:	4b08      	ldr	r3, [pc, #32]	; (800b930 <tcp_receive+0x888>)
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	899b      	ldrh	r3, [r3, #12]
 800b912:	b29b      	uxth	r3, r3
 800b914:	4618      	mov	r0, r3
 800b916:	f7fa ff93 	bl	8006840 <lwip_htons>
 800b91a:	4603      	mov	r3, r0
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00e      	beq.n	800b944 <tcp_receive+0x89c>
 800b926:	2301      	movs	r3, #1
 800b928:	e00d      	b.n	800b946 <tcp_receive+0x89e>
 800b92a:	bf00      	nop
 800b92c:	20000154 	.word	0x20000154
 800b930:	20000134 	.word	0x20000134
 800b934:	2000015e 	.word	0x2000015e
 800b938:	0801325c 	.word	0x0801325c
 800b93c:	08013604 	.word	0x08013604
 800b940:	080132a8 	.word	0x080132a8
 800b944:	2300      	movs	r3, #0
 800b946:	4423      	add	r3, r4
 800b948:	b29a      	uxth	r2, r3
 800b94a:	4b98      	ldr	r3, [pc, #608]	; (800bbac <tcp_receive+0xb04>)
 800b94c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b950:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b958:	6938      	ldr	r0, [r7, #16]
 800b95a:	f7fd fd3a 	bl	80093d2 <tcp_seg_free>
            while (next &&
 800b95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00e      	beq.n	800b982 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b964:	4b91      	ldr	r3, [pc, #580]	; (800bbac <tcp_receive+0xb04>)
 800b966:	881b      	ldrh	r3, [r3, #0]
 800b968:	461a      	mov	r2, r3
 800b96a:	4b91      	ldr	r3, [pc, #580]	; (800bbb0 <tcp_receive+0xb08>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	441a      	add	r2, r3
 800b970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b978:	8909      	ldrh	r1, [r1, #8]
 800b97a:	440b      	add	r3, r1
 800b97c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b97e:	2b00      	cmp	r3, #0
 800b980:	da9a      	bge.n	800b8b8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d059      	beq.n	800ba3c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b988:	4b88      	ldr	r3, [pc, #544]	; (800bbac <tcp_receive+0xb04>)
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	461a      	mov	r2, r3
 800b98e:	4b88      	ldr	r3, [pc, #544]	; (800bbb0 <tcp_receive+0xb08>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	441a      	add	r2, r3
 800b994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dd4d      	ble.n	800ba3c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	4b81      	ldr	r3, [pc, #516]	; (800bbb0 <tcp_receive+0xb08>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	4b80      	ldr	r3, [pc, #512]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9b4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b9b6:	4b7f      	ldr	r3, [pc, #508]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	899b      	ldrh	r3, [r3, #12]
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fa ff3e 	bl	8006840 <lwip_htons>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	f003 0302 	and.w	r3, r3, #2
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d005      	beq.n	800b9dc <tcp_receive+0x934>
                inseg.len -= 1;
 800b9d0:	4b78      	ldr	r3, [pc, #480]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9d2:	891b      	ldrh	r3, [r3, #8]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	4b76      	ldr	r3, [pc, #472]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9da:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b9dc:	4b75      	ldr	r3, [pc, #468]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	4a74      	ldr	r2, [pc, #464]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9e2:	8912      	ldrh	r2, [r2, #8]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fc f858 	bl	8007a9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b9ec:	4b71      	ldr	r3, [pc, #452]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9ee:	891c      	ldrh	r4, [r3, #8]
 800b9f0:	4b70      	ldr	r3, [pc, #448]	; (800bbb4 <tcp_receive+0xb0c>)
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	899b      	ldrh	r3, [r3, #12]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fa ff21 	bl	8006840 <lwip_htons>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <tcp_receive+0x966>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e000      	b.n	800ba10 <tcp_receive+0x968>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4423      	add	r3, r4
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	4b65      	ldr	r3, [pc, #404]	; (800bbac <tcp_receive+0xb04>)
 800ba16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ba18:	4b64      	ldr	r3, [pc, #400]	; (800bbac <tcp_receive+0xb04>)
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4b64      	ldr	r3, [pc, #400]	; (800bbb0 <tcp_receive+0xb08>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	441a      	add	r2, r3
 800ba24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d006      	beq.n	800ba3c <tcp_receive+0x994>
 800ba2e:	4b62      	ldr	r3, [pc, #392]	; (800bbb8 <tcp_receive+0xb10>)
 800ba30:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ba34:	4961      	ldr	r1, [pc, #388]	; (800bbbc <tcp_receive+0xb14>)
 800ba36:	4862      	ldr	r0, [pc, #392]	; (800bbc0 <tcp_receive+0xb18>)
 800ba38:	f005 fb86 	bl	8011148 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ba42:	4b5a      	ldr	r3, [pc, #360]	; (800bbac <tcp_receive+0xb04>)
 800ba44:	881b      	ldrh	r3, [r3, #0]
 800ba46:	461a      	mov	r2, r3
 800ba48:	4b59      	ldr	r3, [pc, #356]	; (800bbb0 <tcp_receive+0xb08>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	441a      	add	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba56:	4b55      	ldr	r3, [pc, #340]	; (800bbac <tcp_receive+0xb04>)
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d206      	bcs.n	800ba6c <tcp_receive+0x9c4>
 800ba5e:	4b56      	ldr	r3, [pc, #344]	; (800bbb8 <tcp_receive+0xb10>)
 800ba60:	f240 6207 	movw	r2, #1543	; 0x607
 800ba64:	4957      	ldr	r1, [pc, #348]	; (800bbc4 <tcp_receive+0xb1c>)
 800ba66:	4856      	ldr	r0, [pc, #344]	; (800bbc0 <tcp_receive+0xb18>)
 800ba68:	f005 fb6e 	bl	8011148 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba70:	4b4e      	ldr	r3, [pc, #312]	; (800bbac <tcp_receive+0xb04>)
 800ba72:	881b      	ldrh	r3, [r3, #0]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f7fc ffc9 	bl	8008a14 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ba82:	4b4c      	ldr	r3, [pc, #304]	; (800bbb4 <tcp_receive+0xb0c>)
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	891b      	ldrh	r3, [r3, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d006      	beq.n	800ba9a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ba8c:	4b49      	ldr	r3, [pc, #292]	; (800bbb4 <tcp_receive+0xb0c>)
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4a4d      	ldr	r2, [pc, #308]	; (800bbc8 <tcp_receive+0xb20>)
 800ba92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ba94:	4b47      	ldr	r3, [pc, #284]	; (800bbb4 <tcp_receive+0xb0c>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ba9a:	4b46      	ldr	r3, [pc, #280]	; (800bbb4 <tcp_receive+0xb0c>)
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	899b      	ldrh	r3, [r3, #12]
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fa fecc 	bl	8006840 <lwip_htons>
 800baa8:	4603      	mov	r3, r0
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f000 80b8 	beq.w	800bc26 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bab6:	4b45      	ldr	r3, [pc, #276]	; (800bbcc <tcp_receive+0xb24>)
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	f043 0320 	orr.w	r3, r3, #32
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	4b42      	ldr	r3, [pc, #264]	; (800bbcc <tcp_receive+0xb24>)
 800bac2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bac4:	e0af      	b.n	800bc26 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	4a36      	ldr	r2, [pc, #216]	; (800bbb0 <tcp_receive+0xb08>)
 800bad6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	891b      	ldrh	r3, [r3, #8]
 800badc:	461c      	mov	r4, r3
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	899b      	ldrh	r3, [r3, #12]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fa feaa 	bl	8006840 <lwip_htons>
 800baec:	4603      	mov	r3, r0
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 0303 	and.w	r3, r3, #3
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <tcp_receive+0xa54>
 800baf8:	2301      	movs	r3, #1
 800bafa:	e000      	b.n	800bafe <tcp_receive+0xa56>
 800bafc:	2300      	movs	r3, #0
 800bafe:	191a      	adds	r2, r3, r4
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb04:	441a      	add	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb0e:	461c      	mov	r4, r3
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	891b      	ldrh	r3, [r3, #8]
 800bb14:	461d      	mov	r5, r3
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	899b      	ldrh	r3, [r3, #12]
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fa fe8e 	bl	8006840 <lwip_htons>
 800bb24:	4603      	mov	r3, r0
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	f003 0303 	and.w	r3, r3, #3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <tcp_receive+0xa8c>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e000      	b.n	800bb36 <tcp_receive+0xa8e>
 800bb34:	2300      	movs	r3, #0
 800bb36:	442b      	add	r3, r5
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	d206      	bcs.n	800bb4a <tcp_receive+0xaa2>
 800bb3c:	4b1e      	ldr	r3, [pc, #120]	; (800bbb8 <tcp_receive+0xb10>)
 800bb3e:	f240 622b 	movw	r2, #1579	; 0x62b
 800bb42:	4923      	ldr	r1, [pc, #140]	; (800bbd0 <tcp_receive+0xb28>)
 800bb44:	481e      	ldr	r0, [pc, #120]	; (800bbc0 <tcp_receive+0xb18>)
 800bb46:	f005 faff 	bl	8011148 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	891b      	ldrh	r3, [r3, #8]
 800bb4e:	461c      	mov	r4, r3
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	899b      	ldrh	r3, [r3, #12]
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7fa fe71 	bl	8006840 <lwip_htons>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	f003 0303 	and.w	r3, r3, #3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d001      	beq.n	800bb6e <tcp_receive+0xac6>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e000      	b.n	800bb70 <tcp_receive+0xac8>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	1919      	adds	r1, r3, r4
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bb76:	b28b      	uxth	r3, r1
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7fc ff47 	bl	8008a14 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	891b      	ldrh	r3, [r3, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d028      	beq.n	800bbe2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800bb90:	4b0d      	ldr	r3, [pc, #52]	; (800bbc8 <tcp_receive+0xb20>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d01d      	beq.n	800bbd4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800bb98:	4b0b      	ldr	r3, [pc, #44]	; (800bbc8 <tcp_receive+0xb20>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	4619      	mov	r1, r3
 800bba2:	4610      	mov	r0, r2
 800bba4:	f7fc f9c2 	bl	8007f2c <pbuf_cat>
 800bba8:	e018      	b.n	800bbdc <tcp_receive+0xb34>
 800bbaa:	bf00      	nop
 800bbac:	2000015e 	.word	0x2000015e
 800bbb0:	20000154 	.word	0x20000154
 800bbb4:	20000134 	.word	0x20000134
 800bbb8:	0801325c 	.word	0x0801325c
 800bbbc:	0801363c 	.word	0x0801363c
 800bbc0:	080132a8 	.word	0x080132a8
 800bbc4:	08013678 	.word	0x08013678
 800bbc8:	20000164 	.word	0x20000164
 800bbcc:	20000161 	.word	0x20000161
 800bbd0:	08013698 	.word	0x08013698
            } else {
              recv_data = cseg->p;
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	4a70      	ldr	r2, [pc, #448]	; (800bd9c <tcp_receive+0xcf4>)
 800bbda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	899b      	ldrh	r3, [r3, #12]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fa fe28 	bl	8006840 <lwip_htons>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	f003 0301 	and.w	r3, r3, #1
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00d      	beq.n	800bc18 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800bbfc:	4b68      	ldr	r3, [pc, #416]	; (800bda0 <tcp_receive+0xcf8>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f043 0320 	orr.w	r3, r3, #32
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	4b66      	ldr	r3, [pc, #408]	; (800bda0 <tcp_receive+0xcf8>)
 800bc08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	7d1b      	ldrb	r3, [r3, #20]
 800bc0e:	2b04      	cmp	r3, #4
 800bc10:	d102      	bne.n	800bc18 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2207      	movs	r2, #7
 800bc16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bc20:	68b8      	ldr	r0, [r7, #8]
 800bc22:	f7fd fbd6 	bl	80093d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d008      	beq.n	800bc40 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	f43f af43 	beq.w	800bac6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	8b5b      	ldrh	r3, [r3, #26]
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00e      	beq.n	800bc6a <tcp_receive+0xbc2>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	8b5b      	ldrh	r3, [r3, #26]
 800bc50:	f023 0301 	bic.w	r3, r3, #1
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	835a      	strh	r2, [r3, #26]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	8b5b      	ldrh	r3, [r3, #26]
 800bc5e:	f043 0302 	orr.w	r3, r3, #2
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bc68:	e188      	b.n	800bf7c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	8b5b      	ldrh	r3, [r3, #26]
 800bc6e:	f043 0301 	orr.w	r3, r3, #1
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bc78:	e180      	b.n	800bf7c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d106      	bne.n	800bc90 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bc82:	4848      	ldr	r0, [pc, #288]	; (800bda4 <tcp_receive+0xcfc>)
 800bc84:	f7fd fbbe 	bl	8009404 <tcp_seg_copy>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	675a      	str	r2, [r3, #116]	; 0x74
 800bc8e:	e16d      	b.n	800bf6c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bc90:	2300      	movs	r3, #0
 800bc92:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc98:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc9a:	e157      	b.n	800bf4c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	4b41      	ldr	r3, [pc, #260]	; (800bda8 <tcp_receive+0xd00>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d11d      	bne.n	800bce6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bcaa:	4b3e      	ldr	r3, [pc, #248]	; (800bda4 <tcp_receive+0xcfc>)
 800bcac:	891a      	ldrh	r2, [r3, #8]
 800bcae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb0:	891b      	ldrh	r3, [r3, #8]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	f240 814f 	bls.w	800bf56 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bcb8:	483a      	ldr	r0, [pc, #232]	; (800bda4 <tcp_receive+0xcfc>)
 800bcba:	f7fd fba3 	bl	8009404 <tcp_seg_copy>
 800bcbe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f000 8149 	beq.w	800bf5a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800bcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	e002      	b.n	800bcdc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bcdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bcde:	6978      	ldr	r0, [r7, #20]
 800bce0:	f7ff f8de 	bl	800aea0 <tcp_oos_insert_segment>
                }
                break;
 800bce4:	e139      	b.n	800bf5a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d117      	bne.n	800bd1c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bcec:	4b2e      	ldr	r3, [pc, #184]	; (800bda8 <tcp_receive+0xd00>)
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da57      	bge.n	800bdac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bcfc:	4829      	ldr	r0, [pc, #164]	; (800bda4 <tcp_receive+0xcfc>)
 800bcfe:	f7fd fb81 	bl	8009404 <tcp_seg_copy>
 800bd02:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 8129 	beq.w	800bf5e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	69ba      	ldr	r2, [r7, #24]
 800bd10:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bd12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd14:	69b8      	ldr	r0, [r7, #24]
 800bd16:	f7ff f8c3 	bl	800aea0 <tcp_oos_insert_segment>
                  }
                  break;
 800bd1a:	e120      	b.n	800bf5e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bd1c:	4b22      	ldr	r3, [pc, #136]	; (800bda8 <tcp_receive+0xd00>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	db3e      	blt.n	800bdac <tcp_receive+0xd04>
 800bd2e:	4b1e      	ldr	r3, [pc, #120]	; (800bda8 <tcp_receive+0xd00>)
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	dc35      	bgt.n	800bdac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bd40:	4818      	ldr	r0, [pc, #96]	; (800bda4 <tcp_receive+0xcfc>)
 800bd42:	f7fd fb5f 	bl	8009404 <tcp_seg_copy>
 800bd46:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 8109 	beq.w	800bf62 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800bd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd58:	8912      	ldrh	r2, [r2, #8]
 800bd5a:	441a      	add	r2, r3
 800bd5c:	4b12      	ldr	r3, [pc, #72]	; (800bda8 <tcp_receive+0xd00>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	dd12      	ble.n	800bd8c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800bd66:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <tcp_receive+0xd00>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800bd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7e:	685a      	ldr	r2, [r3, #4]
 800bd80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd82:	891b      	ldrh	r3, [r3, #8]
 800bd84:	4619      	mov	r1, r3
 800bd86:	4610      	mov	r0, r2
 800bd88:	f7fb fe88 	bl	8007a9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800bd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8e:	69fa      	ldr	r2, [r7, #28]
 800bd90:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800bd92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd94:	69f8      	ldr	r0, [r7, #28]
 800bd96:	f7ff f883 	bl	800aea0 <tcp_oos_insert_segment>
                  }
                  break;
 800bd9a:	e0e2      	b.n	800bf62 <tcp_receive+0xeba>
 800bd9c:	20000164 	.word	0x20000164
 800bda0:	20000161 	.word	0x20000161
 800bda4:	20000134 	.word	0x20000134
 800bda8:	20000154 	.word	0x20000154
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800bdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f040 80c6 	bne.w	800bf46 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800bdba:	4b80      	ldr	r3, [pc, #512]	; (800bfbc <tcp_receive+0xf14>)
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f340 80bd 	ble.w	800bf46 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	899b      	ldrh	r3, [r3, #12]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fa fd33 	bl	8006840 <lwip_htons>
 800bdda:	4603      	mov	r3, r0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	f040 80bf 	bne.w	800bf66 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bde8:	4875      	ldr	r0, [pc, #468]	; (800bfc0 <tcp_receive+0xf18>)
 800bdea:	f7fd fb0b 	bl	8009404 <tcp_seg_copy>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 80b6 	beq.w	800bf6a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be06:	8912      	ldrh	r2, [r2, #8]
 800be08:	441a      	add	r2, r3
 800be0a:	4b6c      	ldr	r3, [pc, #432]	; (800bfbc <tcp_receive+0xf14>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	dd12      	ble.n	800be3a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800be14:	4b69      	ldr	r3, [pc, #420]	; (800bfbc <tcp_receive+0xf14>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	b29a      	uxth	r2, r3
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	b29b      	uxth	r3, r3
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	b29a      	uxth	r2, r3
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800be2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be30:	891b      	ldrh	r3, [r3, #8]
 800be32:	4619      	mov	r1, r3
 800be34:	4610      	mov	r0, r2
 800be36:	f7fb fe31 	bl	8007a9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800be3a:	4b62      	ldr	r3, [pc, #392]	; (800bfc4 <tcp_receive+0xf1c>)
 800be3c:	881b      	ldrh	r3, [r3, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	4b5e      	ldr	r3, [pc, #376]	; (800bfbc <tcp_receive+0xf14>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	441a      	add	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800be4e:	440b      	add	r3, r1
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b00      	cmp	r3, #0
 800be54:	f340 8089 	ble.w	800bf6a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	899b      	ldrh	r3, [r3, #12]
 800be60:	b29b      	uxth	r3, r3
 800be62:	4618      	mov	r0, r3
 800be64:	f7fa fcec 	bl	8006840 <lwip_htons>
 800be68:	4603      	mov	r3, r0
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	f003 0301 	and.w	r3, r3, #1
 800be70:	2b00      	cmp	r3, #0
 800be72:	d022      	beq.n	800beba <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800be74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	899b      	ldrh	r3, [r3, #12]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	b21b      	sxth	r3, r3
 800be80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be84:	b21c      	sxth	r4, r3
 800be86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	899b      	ldrh	r3, [r3, #12]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	4618      	mov	r0, r3
 800be92:	f7fa fcd5 	bl	8006840 <lwip_htons>
 800be96:	4603      	mov	r3, r0
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fa fccc 	bl	8006840 <lwip_htons>
 800bea8:	4603      	mov	r3, r0
 800beaa:	b21b      	sxth	r3, r3
 800beac:	4323      	orrs	r3, r4
 800beae:	b21a      	sxth	r2, r3
 800beb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	b292      	uxth	r2, r2
 800beb8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bec4:	4413      	add	r3, r2
 800bec6:	b299      	uxth	r1, r3
 800bec8:	4b3c      	ldr	r3, [pc, #240]	; (800bfbc <tcp_receive+0xf14>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	b29a      	uxth	r2, r3
 800bece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	1a8a      	subs	r2, r1, r2
 800bed4:	b292      	uxth	r2, r2
 800bed6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	891b      	ldrh	r3, [r3, #8]
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7fb fdd8 	bl	8007a9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	891c      	ldrh	r4, [r3, #8]
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	899b      	ldrh	r3, [r3, #12]
 800befa:	b29b      	uxth	r3, r3
 800befc:	4618      	mov	r0, r3
 800befe:	f7fa fc9f 	bl	8006840 <lwip_htons>
 800bf02:	4603      	mov	r3, r0
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	f003 0303 	and.w	r3, r3, #3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <tcp_receive+0xe6a>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e000      	b.n	800bf14 <tcp_receive+0xe6c>
 800bf12:	2300      	movs	r3, #0
 800bf14:	4423      	add	r3, r4
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	4b2a      	ldr	r3, [pc, #168]	; (800bfc4 <tcp_receive+0xf1c>)
 800bf1a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf1c:	4b29      	ldr	r3, [pc, #164]	; (800bfc4 <tcp_receive+0xf1c>)
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	4b26      	ldr	r3, [pc, #152]	; (800bfbc <tcp_receive+0xf14>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	441a      	add	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2c:	6879      	ldr	r1, [r7, #4]
 800bf2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf30:	440b      	add	r3, r1
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d019      	beq.n	800bf6a <tcp_receive+0xec2>
 800bf36:	4b24      	ldr	r3, [pc, #144]	; (800bfc8 <tcp_receive+0xf20>)
 800bf38:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bf3c:	4923      	ldr	r1, [pc, #140]	; (800bfcc <tcp_receive+0xf24>)
 800bf3e:	4824      	ldr	r0, [pc, #144]	; (800bfd0 <tcp_receive+0xf28>)
 800bf40:	f005 f902 	bl	8011148 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bf44:	e011      	b.n	800bf6a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f47f aea4 	bne.w	800bc9c <tcp_receive+0xbf4>
 800bf54:	e00a      	b.n	800bf6c <tcp_receive+0xec4>
                break;
 800bf56:	bf00      	nop
 800bf58:	e008      	b.n	800bf6c <tcp_receive+0xec4>
                break;
 800bf5a:	bf00      	nop
 800bf5c:	e006      	b.n	800bf6c <tcp_receive+0xec4>
                  break;
 800bf5e:	bf00      	nop
 800bf60:	e004      	b.n	800bf6c <tcp_receive+0xec4>
                  break;
 800bf62:	bf00      	nop
 800bf64:	e002      	b.n	800bf6c <tcp_receive+0xec4>
                  break;
 800bf66:	bf00      	nop
 800bf68:	e000      	b.n	800bf6c <tcp_receive+0xec4>
                break;
 800bf6a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f001 fa33 	bl	800d3d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bf72:	e003      	b.n	800bf7c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f001 fa2f 	bl	800d3d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bf7a:	e01a      	b.n	800bfb2 <tcp_receive+0xf0a>
 800bf7c:	e019      	b.n	800bfb2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bf7e:	4b0f      	ldr	r3, [pc, #60]	; (800bfbc <tcp_receive+0xf14>)
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	db0a      	blt.n	800bfa2 <tcp_receive+0xefa>
 800bf8c:	4b0b      	ldr	r3, [pc, #44]	; (800bfbc <tcp_receive+0xf14>)
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	6879      	ldr	r1, [r7, #4]
 800bf96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf98:	440b      	add	r3, r1
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	dd07      	ble.n	800bfb2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	8b5b      	ldrh	r3, [r3, #26]
 800bfa6:	f043 0302 	orr.w	r3, r3, #2
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bfb0:	e7ff      	b.n	800bfb2 <tcp_receive+0xf0a>
 800bfb2:	bf00      	nop
 800bfb4:	3750      	adds	r7, #80	; 0x50
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bdb0      	pop	{r4, r5, r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20000154 	.word	0x20000154
 800bfc0:	20000134 	.word	0x20000134
 800bfc4:	2000015e 	.word	0x2000015e
 800bfc8:	0801325c 	.word	0x0801325c
 800bfcc:	08013604 	.word	0x08013604
 800bfd0:	080132a8 	.word	0x080132a8

0800bfd4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bfda:	4b15      	ldr	r3, [pc, #84]	; (800c030 <tcp_get_next_optbyte+0x5c>)
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	b291      	uxth	r1, r2
 800bfe2:	4a13      	ldr	r2, [pc, #76]	; (800c030 <tcp_get_next_optbyte+0x5c>)
 800bfe4:	8011      	strh	r1, [r2, #0]
 800bfe6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bfe8:	4b12      	ldr	r3, [pc, #72]	; (800c034 <tcp_get_next_optbyte+0x60>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d004      	beq.n	800bffa <tcp_get_next_optbyte+0x26>
 800bff0:	4b11      	ldr	r3, [pc, #68]	; (800c038 <tcp_get_next_optbyte+0x64>)
 800bff2:	881b      	ldrh	r3, [r3, #0]
 800bff4:	88fa      	ldrh	r2, [r7, #6]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d208      	bcs.n	800c00c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bffa:	4b10      	ldr	r3, [pc, #64]	; (800c03c <tcp_get_next_optbyte+0x68>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3314      	adds	r3, #20
 800c000:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c002:	88fb      	ldrh	r3, [r7, #6]
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	4413      	add	r3, r2
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	e00b      	b.n	800c024 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c00c:	88fb      	ldrh	r3, [r7, #6]
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	4b09      	ldr	r3, [pc, #36]	; (800c038 <tcp_get_next_optbyte+0x64>)
 800c012:	881b      	ldrh	r3, [r3, #0]
 800c014:	b2db      	uxtb	r3, r3
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c01a:	4b06      	ldr	r3, [pc, #24]	; (800c034 <tcp_get_next_optbyte+0x60>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	797b      	ldrb	r3, [r7, #5]
 800c020:	4413      	add	r3, r2
 800c022:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c024:	4618      	mov	r0, r3
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	20000150 	.word	0x20000150
 800c034:	2000014c 	.word	0x2000014c
 800c038:	2000014a 	.word	0x2000014a
 800c03c:	20000144 	.word	0x20000144

0800c040 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d106      	bne.n	800c05c <tcp_parseopt+0x1c>
 800c04e:	4b32      	ldr	r3, [pc, #200]	; (800c118 <tcp_parseopt+0xd8>)
 800c050:	f240 727d 	movw	r2, #1917	; 0x77d
 800c054:	4931      	ldr	r1, [pc, #196]	; (800c11c <tcp_parseopt+0xdc>)
 800c056:	4832      	ldr	r0, [pc, #200]	; (800c120 <tcp_parseopt+0xe0>)
 800c058:	f005 f876 	bl	8011148 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c05c:	4b31      	ldr	r3, [pc, #196]	; (800c124 <tcp_parseopt+0xe4>)
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d055      	beq.n	800c110 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c064:	4b30      	ldr	r3, [pc, #192]	; (800c128 <tcp_parseopt+0xe8>)
 800c066:	2200      	movs	r2, #0
 800c068:	801a      	strh	r2, [r3, #0]
 800c06a:	e045      	b.n	800c0f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c06c:	f7ff ffb2 	bl	800bfd4 <tcp_get_next_optbyte>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	2b02      	cmp	r3, #2
 800c078:	d006      	beq.n	800c088 <tcp_parseopt+0x48>
 800c07a:	2b02      	cmp	r3, #2
 800c07c:	dc2b      	bgt.n	800c0d6 <tcp_parseopt+0x96>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d041      	beq.n	800c106 <tcp_parseopt+0xc6>
 800c082:	2b01      	cmp	r3, #1
 800c084:	d127      	bne.n	800c0d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c086:	e037      	b.n	800c0f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c088:	f7ff ffa4 	bl	800bfd4 <tcp_get_next_optbyte>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b04      	cmp	r3, #4
 800c090:	d13b      	bne.n	800c10a <tcp_parseopt+0xca>
 800c092:	4b25      	ldr	r3, [pc, #148]	; (800c128 <tcp_parseopt+0xe8>)
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	3301      	adds	r3, #1
 800c098:	4a22      	ldr	r2, [pc, #136]	; (800c124 <tcp_parseopt+0xe4>)
 800c09a:	8812      	ldrh	r2, [r2, #0]
 800c09c:	4293      	cmp	r3, r2
 800c09e:	da34      	bge.n	800c10a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c0a0:	f7ff ff98 	bl	800bfd4 <tcp_get_next_optbyte>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c0ac:	f7ff ff92 	bl	800bfd4 <tcp_get_next_optbyte>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	89bb      	ldrh	r3, [r7, #12]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c0ba:	89bb      	ldrh	r3, [r7, #12]
 800c0bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c0c0:	d804      	bhi.n	800c0cc <tcp_parseopt+0x8c>
 800c0c2:	89bb      	ldrh	r3, [r7, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d001      	beq.n	800c0cc <tcp_parseopt+0x8c>
 800c0c8:	89ba      	ldrh	r2, [r7, #12]
 800c0ca:	e001      	b.n	800c0d0 <tcp_parseopt+0x90>
 800c0cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c0d4:	e010      	b.n	800c0f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c0d6:	f7ff ff7d 	bl	800bfd4 <tcp_get_next_optbyte>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c0de:	7afb      	ldrb	r3, [r7, #11]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d914      	bls.n	800c10e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c0e4:	7afb      	ldrb	r3, [r7, #11]
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	4b0f      	ldr	r3, [pc, #60]	; (800c128 <tcp_parseopt+0xe8>)
 800c0ea:	881b      	ldrh	r3, [r3, #0]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	3b02      	subs	r3, #2
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <tcp_parseopt+0xe8>)
 800c0f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c0f8:	4b0b      	ldr	r3, [pc, #44]	; (800c128 <tcp_parseopt+0xe8>)
 800c0fa:	881a      	ldrh	r2, [r3, #0]
 800c0fc:	4b09      	ldr	r3, [pc, #36]	; (800c124 <tcp_parseopt+0xe4>)
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	429a      	cmp	r2, r3
 800c102:	d3b3      	bcc.n	800c06c <tcp_parseopt+0x2c>
 800c104:	e004      	b.n	800c110 <tcp_parseopt+0xd0>
          return;
 800c106:	bf00      	nop
 800c108:	e002      	b.n	800c110 <tcp_parseopt+0xd0>
            return;
 800c10a:	bf00      	nop
 800c10c:	e000      	b.n	800c110 <tcp_parseopt+0xd0>
            return;
 800c10e:	bf00      	nop
      }
    }
  }
}
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	0801325c 	.word	0x0801325c
 800c11c:	080136c0 	.word	0x080136c0
 800c120:	080132a8 	.word	0x080132a8
 800c124:	20000148 	.word	0x20000148
 800c128:	20000150 	.word	0x20000150

0800c12c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c12c:	b480      	push	{r7}
 800c12e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c130:	4b05      	ldr	r3, [pc, #20]	; (800c148 <tcp_trigger_input_pcb_close+0x1c>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f043 0310 	orr.w	r3, r3, #16
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	4b03      	ldr	r3, [pc, #12]	; (800c148 <tcp_trigger_input_pcb_close+0x1c>)
 800c13c:	701a      	strb	r2, [r3, #0]
}
 800c13e:	bf00      	nop
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	20000161 	.word	0x20000161

0800c14c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <tcp_route+0x28>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	7a1b      	ldrb	r3, [r3, #8]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d006      	beq.n	800c174 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	7a1b      	ldrb	r3, [r3, #8]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fb fabc 	bl	80076e8 <netif_get_by_index>
 800c170:	4603      	mov	r3, r0
 800c172:	e003      	b.n	800c17c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f003 f9cb 	bl	800f510 <ip4_route>
 800c17a:	4603      	mov	r3, r0
  }
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c184:	b590      	push	{r4, r7, lr}
 800c186:	b087      	sub	sp, #28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	4613      	mov	r3, r2
 800c192:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d105      	bne.n	800c1a6 <tcp_create_segment+0x22>
 800c19a:	4b44      	ldr	r3, [pc, #272]	; (800c2ac <tcp_create_segment+0x128>)
 800c19c:	22a3      	movs	r2, #163	; 0xa3
 800c19e:	4944      	ldr	r1, [pc, #272]	; (800c2b0 <tcp_create_segment+0x12c>)
 800c1a0:	4844      	ldr	r0, [pc, #272]	; (800c2b4 <tcp_create_segment+0x130>)
 800c1a2:	f004 ffd1 	bl	8011148 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d105      	bne.n	800c1b8 <tcp_create_segment+0x34>
 800c1ac:	4b3f      	ldr	r3, [pc, #252]	; (800c2ac <tcp_create_segment+0x128>)
 800c1ae:	22a4      	movs	r2, #164	; 0xa4
 800c1b0:	4941      	ldr	r1, [pc, #260]	; (800c2b8 <tcp_create_segment+0x134>)
 800c1b2:	4840      	ldr	r0, [pc, #256]	; (800c2b4 <tcp_create_segment+0x130>)
 800c1b4:	f004 ffc8 	bl	8011148 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c1b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c1c6:	2003      	movs	r0, #3
 800c1c8:	f7fa ff90 	bl	80070ec <memp_malloc>
 800c1cc:	6138      	str	r0, [r7, #16]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d104      	bne.n	800c1de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c1d4:	68b8      	ldr	r0, [r7, #8]
 800c1d6:	f7fb fde7 	bl	8007da8 <pbuf_free>
    return NULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	e061      	b.n	800c2a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c1e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	68ba      	ldr	r2, [r7, #8]
 800c1f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	891a      	ldrh	r2, [r3, #8]
 800c1f6:	7dfb      	ldrb	r3, [r7, #23]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d205      	bcs.n	800c20a <tcp_create_segment+0x86>
 800c1fe:	4b2b      	ldr	r3, [pc, #172]	; (800c2ac <tcp_create_segment+0x128>)
 800c200:	22b0      	movs	r2, #176	; 0xb0
 800c202:	492e      	ldr	r1, [pc, #184]	; (800c2bc <tcp_create_segment+0x138>)
 800c204:	482b      	ldr	r0, [pc, #172]	; (800c2b4 <tcp_create_segment+0x130>)
 800c206:	f004 ff9f 	bl	8011148 <iprintf>
  seg->len = p->tot_len - optlen;
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	891a      	ldrh	r2, [r3, #8]
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	b29b      	uxth	r3, r3
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	b29a      	uxth	r2, r3
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c21a:	2114      	movs	r1, #20
 800c21c:	68b8      	ldr	r0, [r7, #8]
 800c21e:	f7fb fd2d 	bl	8007c7c <pbuf_add_header>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d004      	beq.n	800c232 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c228:	6938      	ldr	r0, [r7, #16]
 800c22a:	f7fd f8d2 	bl	80093d2 <tcp_seg_free>
    return NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	e037      	b.n	800c2a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8ada      	ldrh	r2, [r3, #22]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	68dc      	ldr	r4, [r3, #12]
 800c244:	4610      	mov	r0, r2
 800c246:	f7fa fafb 	bl	8006840 <lwip_htons>
 800c24a:	4603      	mov	r3, r0
 800c24c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	8b1a      	ldrh	r2, [r3, #24]
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	68dc      	ldr	r4, [r3, #12]
 800c256:	4610      	mov	r0, r2
 800c258:	f7fa faf2 	bl	8006840 <lwip_htons>
 800c25c:	4603      	mov	r3, r0
 800c25e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	68dc      	ldr	r4, [r3, #12]
 800c264:	6838      	ldr	r0, [r7, #0]
 800c266:	f7fa fb00 	bl	800686a <lwip_htonl>
 800c26a:	4603      	mov	r3, r0
 800c26c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c26e:	7dfb      	ldrb	r3, [r7, #23]
 800c270:	089b      	lsrs	r3, r3, #2
 800c272:	b2db      	uxtb	r3, r3
 800c274:	b29b      	uxth	r3, r3
 800c276:	3305      	adds	r3, #5
 800c278:	b29b      	uxth	r3, r3
 800c27a:	031b      	lsls	r3, r3, #12
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	79fb      	ldrb	r3, [r7, #7]
 800c280:	b29b      	uxth	r3, r3
 800c282:	4313      	orrs	r3, r2
 800c284:	b29a      	uxth	r2, r3
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	68dc      	ldr	r4, [r3, #12]
 800c28a:	4610      	mov	r0, r2
 800c28c:	f7fa fad8 	bl	8006840 <lwip_htons>
 800c290:	4603      	mov	r3, r0
 800c292:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	2200      	movs	r2, #0
 800c29a:	749a      	strb	r2, [r3, #18]
 800c29c:	2200      	movs	r2, #0
 800c29e:	74da      	strb	r2, [r3, #19]
  return seg;
 800c2a0:	693b      	ldr	r3, [r7, #16]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	371c      	adds	r7, #28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd90      	pop	{r4, r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	080136dc 	.word	0x080136dc
 800c2b0:	08013710 	.word	0x08013710
 800c2b4:	08013730 	.word	0x08013730
 800c2b8:	08013758 	.word	0x08013758
 800c2bc:	0801377c 	.word	0x0801377c

0800c2c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c2c0:	b590      	push	{r4, r7, lr}
 800c2c2:	b08b      	sub	sp, #44	; 0x2c
 800c2c4:	af02      	add	r7, sp, #8
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	61fb      	str	r3, [r7, #28]
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d106      	bne.n	800c2ec <tcp_split_unsent_seg+0x2c>
 800c2de:	4b95      	ldr	r3, [pc, #596]	; (800c534 <tcp_split_unsent_seg+0x274>)
 800c2e0:	f240 324b 	movw	r2, #843	; 0x34b
 800c2e4:	4994      	ldr	r1, [pc, #592]	; (800c538 <tcp_split_unsent_seg+0x278>)
 800c2e6:	4895      	ldr	r0, [pc, #596]	; (800c53c <tcp_split_unsent_seg+0x27c>)
 800c2e8:	f004 ff2e 	bl	8011148 <iprintf>

  useg = pcb->unsent;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fc:	e116      	b.n	800c52c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c2fe:	887b      	ldrh	r3, [r7, #2]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d109      	bne.n	800c318 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c304:	4b8b      	ldr	r3, [pc, #556]	; (800c534 <tcp_split_unsent_seg+0x274>)
 800c306:	f240 3253 	movw	r2, #851	; 0x353
 800c30a:	498d      	ldr	r1, [pc, #564]	; (800c540 <tcp_split_unsent_seg+0x280>)
 800c30c:	488b      	ldr	r0, [pc, #556]	; (800c53c <tcp_split_unsent_seg+0x27c>)
 800c30e:	f004 ff1b 	bl	8011148 <iprintf>
    return ERR_VAL;
 800c312:	f06f 0305 	mvn.w	r3, #5
 800c316:	e109      	b.n	800c52c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	891b      	ldrh	r3, [r3, #8]
 800c31c:	887a      	ldrh	r2, [r7, #2]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d301      	bcc.n	800c326 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	e102      	b.n	800c52c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c32a:	887a      	ldrh	r2, [r7, #2]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d906      	bls.n	800c33e <tcp_split_unsent_seg+0x7e>
 800c330:	4b80      	ldr	r3, [pc, #512]	; (800c534 <tcp_split_unsent_seg+0x274>)
 800c332:	f240 325b 	movw	r2, #859	; 0x35b
 800c336:	4983      	ldr	r1, [pc, #524]	; (800c544 <tcp_split_unsent_seg+0x284>)
 800c338:	4880      	ldr	r0, [pc, #512]	; (800c53c <tcp_split_unsent_seg+0x27c>)
 800c33a:	f004 ff05 	bl	8011148 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	891b      	ldrh	r3, [r3, #8]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d106      	bne.n	800c354 <tcp_split_unsent_seg+0x94>
 800c346:	4b7b      	ldr	r3, [pc, #492]	; (800c534 <tcp_split_unsent_seg+0x274>)
 800c348:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c34c:	497e      	ldr	r1, [pc, #504]	; (800c548 <tcp_split_unsent_seg+0x288>)
 800c34e:	487b      	ldr	r0, [pc, #492]	; (800c53c <tcp_split_unsent_seg+0x27c>)
 800c350:	f004 fefa 	bl	8011148 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	7a9b      	ldrb	r3, [r3, #10]
 800c358:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	f003 0304 	and.w	r3, r3, #4
 800c364:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	891a      	ldrh	r2, [r3, #8]
 800c36a:	887b      	ldrh	r3, [r7, #2]
 800c36c:	1ad3      	subs	r3, r2, r3
 800c36e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	b29a      	uxth	r2, r3
 800c374:	89bb      	ldrh	r3, [r7, #12]
 800c376:	4413      	add	r3, r2
 800c378:	b29b      	uxth	r3, r3
 800c37a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c37e:	4619      	mov	r1, r3
 800c380:	2036      	movs	r0, #54	; 0x36
 800c382:	f7fb fa2d 	bl	80077e0 <pbuf_alloc>
 800c386:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80b7 	beq.w	800c4fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	891a      	ldrh	r2, [r3, #8]
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	891b      	ldrh	r3, [r3, #8]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	887b      	ldrh	r3, [r7, #2]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	6858      	ldr	r0, [r3, #4]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	685a      	ldr	r2, [r3, #4]
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	18d1      	adds	r1, r2, r3
 800c3b0:	897b      	ldrh	r3, [r7, #10]
 800c3b2:	89ba      	ldrh	r2, [r7, #12]
 800c3b4:	f7fb fef2 	bl	800819c <pbuf_copy_partial>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	89bb      	ldrh	r3, [r7, #12]
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	f040 809f 	bne.w	800c502 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	899b      	ldrh	r3, [r3, #12]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fa fa37 	bl	8006840 <lwip_htons>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c3dc:	2300      	movs	r3, #0
 800c3de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c3e0:	7efb      	ldrb	r3, [r7, #27]
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d007      	beq.n	800c3fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c3ea:	7efb      	ldrb	r3, [r7, #27]
 800c3ec:	f023 0308 	bic.w	r3, r3, #8
 800c3f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c3f2:	7ebb      	ldrb	r3, [r7, #26]
 800c3f4:	f043 0308 	orr.w	r3, r3, #8
 800c3f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c3fa:	7efb      	ldrb	r3, [r7, #27]
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d007      	beq.n	800c414 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c404:	7efb      	ldrb	r3, [r7, #27]
 800c406:	f023 0301 	bic.w	r3, r3, #1
 800c40a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c40c:	7ebb      	ldrb	r3, [r7, #26]
 800c40e:	f043 0301 	orr.w	r3, r3, #1
 800c412:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fa fa25 	bl	800686a <lwip_htonl>
 800c420:	4602      	mov	r2, r0
 800c422:	887b      	ldrh	r3, [r7, #2]
 800c424:	18d1      	adds	r1, r2, r3
 800c426:	7eba      	ldrb	r2, [r7, #26]
 800c428:	7bfb      	ldrb	r3, [r7, #15]
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	460b      	mov	r3, r1
 800c42e:	6939      	ldr	r1, [r7, #16]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff fea7 	bl	800c184 <tcp_create_segment>
 800c436:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d063      	beq.n	800c506 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f7fb fd38 	bl	8007eb8 <pbuf_clen>
 800c448:	4603      	mov	r3, r0
 800c44a:	461a      	mov	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c452:	1a9b      	subs	r3, r3, r2
 800c454:	b29a      	uxth	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	6858      	ldr	r0, [r3, #4]
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	891a      	ldrh	r2, [r3, #8]
 800c466:	89bb      	ldrh	r3, [r7, #12]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	4619      	mov	r1, r3
 800c46e:	f7fb fb15 	bl	8007a9c <pbuf_realloc>
  useg->len -= remainder;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	891a      	ldrh	r2, [r3, #8]
 800c476:	89bb      	ldrh	r3, [r7, #12]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	899b      	ldrh	r3, [r3, #12]
 800c486:	b29c      	uxth	r4, r3
 800c488:	7efb      	ldrb	r3, [r7, #27]
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fa f9d7 	bl	8006840 <lwip_htons>
 800c492:	4603      	mov	r3, r0
 800c494:	461a      	mov	r2, r3
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	4322      	orrs	r2, r4
 800c49c:	b292      	uxth	r2, r2
 800c49e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fb fd07 	bl	8007eb8 <pbuf_clen>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4b4:	4413      	add	r3, r2
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fb fcf8 	bl	8007eb8 <pbuf_clen>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c4d2:	4413      	add	r3, r2
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	69fa      	ldr	r2, [r7, #28]
 800c4e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d103      	bne.n	800c4fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e016      	b.n	800c52c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c4fe:	bf00      	nop
 800c500:	e002      	b.n	800c508 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c502:	bf00      	nop
 800c504:	e000      	b.n	800c508 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c506:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d006      	beq.n	800c51c <tcp_split_unsent_seg+0x25c>
 800c50e:	4b09      	ldr	r3, [pc, #36]	; (800c534 <tcp_split_unsent_seg+0x274>)
 800c510:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c514:	490d      	ldr	r1, [pc, #52]	; (800c54c <tcp_split_unsent_seg+0x28c>)
 800c516:	4809      	ldr	r0, [pc, #36]	; (800c53c <tcp_split_unsent_seg+0x27c>)
 800c518:	f004 fe16 	bl	8011148 <iprintf>
  if (p != NULL) {
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d002      	beq.n	800c528 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c522:	6938      	ldr	r0, [r7, #16]
 800c524:	f7fb fc40 	bl	8007da8 <pbuf_free>
  }

  return ERR_MEM;
 800c528:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3724      	adds	r7, #36	; 0x24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd90      	pop	{r4, r7, pc}
 800c534:	080136dc 	.word	0x080136dc
 800c538:	08013a70 	.word	0x08013a70
 800c53c:	08013730 	.word	0x08013730
 800c540:	08013a94 	.word	0x08013a94
 800c544:	08013ab8 	.word	0x08013ab8
 800c548:	08013ac8 	.word	0x08013ac8
 800c54c:	08013ad8 	.word	0x08013ad8

0800c550 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c550:	b590      	push	{r4, r7, lr}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d106      	bne.n	800c56c <tcp_send_fin+0x1c>
 800c55e:	4b21      	ldr	r3, [pc, #132]	; (800c5e4 <tcp_send_fin+0x94>)
 800c560:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c564:	4920      	ldr	r1, [pc, #128]	; (800c5e8 <tcp_send_fin+0x98>)
 800c566:	4821      	ldr	r0, [pc, #132]	; (800c5ec <tcp_send_fin+0x9c>)
 800c568:	f004 fdee 	bl	8011148 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c570:	2b00      	cmp	r3, #0
 800c572:	d02e      	beq.n	800c5d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c578:	60fb      	str	r3, [r7, #12]
 800c57a:	e002      	b.n	800c582 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1f8      	bne.n	800c57c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	899b      	ldrh	r3, [r3, #12]
 800c590:	b29b      	uxth	r3, r3
 800c592:	4618      	mov	r0, r3
 800c594:	f7fa f954 	bl	8006840 <lwip_htons>
 800c598:	4603      	mov	r3, r0
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d116      	bne.n	800c5d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	68db      	ldr	r3, [r3, #12]
 800c5a8:	899b      	ldrh	r3, [r3, #12]
 800c5aa:	b29c      	uxth	r4, r3
 800c5ac:	2001      	movs	r0, #1
 800c5ae:	f7fa f947 	bl	8006840 <lwip_htons>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	4322      	orrs	r2, r4
 800c5bc:	b292      	uxth	r2, r2
 800c5be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	8b5b      	ldrh	r3, [r3, #26]
 800c5c4:	f043 0320 	orr.w	r3, r3, #32
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	e004      	b.n	800c5dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 f80b 	bl	800c5f0 <tcp_enqueue_flags>
 800c5da:	4603      	mov	r3, r0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3714      	adds	r7, #20
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd90      	pop	{r4, r7, pc}
 800c5e4:	080136dc 	.word	0x080136dc
 800c5e8:	08013ae4 	.word	0x08013ae4
 800c5ec:	08013730 	.word	0x08013730

0800c5f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08a      	sub	sp, #40	; 0x28
 800c5f4:	af02      	add	r7, sp, #8
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c604:	78fb      	ldrb	r3, [r7, #3]
 800c606:	f003 0303 	and.w	r3, r3, #3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d106      	bne.n	800c61c <tcp_enqueue_flags+0x2c>
 800c60e:	4b67      	ldr	r3, [pc, #412]	; (800c7ac <tcp_enqueue_flags+0x1bc>)
 800c610:	f240 4211 	movw	r2, #1041	; 0x411
 800c614:	4966      	ldr	r1, [pc, #408]	; (800c7b0 <tcp_enqueue_flags+0x1c0>)
 800c616:	4867      	ldr	r0, [pc, #412]	; (800c7b4 <tcp_enqueue_flags+0x1c4>)
 800c618:	f004 fd96 	bl	8011148 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d106      	bne.n	800c630 <tcp_enqueue_flags+0x40>
 800c622:	4b62      	ldr	r3, [pc, #392]	; (800c7ac <tcp_enqueue_flags+0x1bc>)
 800c624:	f240 4213 	movw	r2, #1043	; 0x413
 800c628:	4963      	ldr	r1, [pc, #396]	; (800c7b8 <tcp_enqueue_flags+0x1c8>)
 800c62a:	4862      	ldr	r0, [pc, #392]	; (800c7b4 <tcp_enqueue_flags+0x1c4>)
 800c62c:	f004 fd8c 	bl	8011148 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c630:	78fb      	ldrb	r3, [r7, #3]
 800c632:	f003 0302 	and.w	r3, r3, #2
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c63a:	2301      	movs	r3, #1
 800c63c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c63e:	7ffb      	ldrb	r3, [r7, #31]
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f003 0304 	and.w	r3, r3, #4
 800c648:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c64a:	7dfb      	ldrb	r3, [r7, #23]
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c652:	4619      	mov	r1, r3
 800c654:	2036      	movs	r0, #54	; 0x36
 800c656:	f7fb f8c3 	bl	80077e0 <pbuf_alloc>
 800c65a:	6138      	str	r0, [r7, #16]
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d109      	bne.n	800c676 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8b5b      	ldrh	r3, [r3, #26]
 800c666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
 800c674:	e095      	b.n	800c7a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	895a      	ldrh	r2, [r3, #10]
 800c67a:	7dfb      	ldrb	r3, [r7, #23]
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	429a      	cmp	r2, r3
 800c680:	d206      	bcs.n	800c690 <tcp_enqueue_flags+0xa0>
 800c682:	4b4a      	ldr	r3, [pc, #296]	; (800c7ac <tcp_enqueue_flags+0x1bc>)
 800c684:	f240 4239 	movw	r2, #1081	; 0x439
 800c688:	494c      	ldr	r1, [pc, #304]	; (800c7bc <tcp_enqueue_flags+0x1cc>)
 800c68a:	484a      	ldr	r0, [pc, #296]	; (800c7b4 <tcp_enqueue_flags+0x1c4>)
 800c68c:	f004 fd5c 	bl	8011148 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c694:	78fa      	ldrb	r2, [r7, #3]
 800c696:	7ffb      	ldrb	r3, [r7, #31]
 800c698:	9300      	str	r3, [sp, #0]
 800c69a:	460b      	mov	r3, r1
 800c69c:	6939      	ldr	r1, [r7, #16]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7ff fd70 	bl	800c184 <tcp_create_segment>
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d109      	bne.n	800c6c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	8b5b      	ldrh	r3, [r3, #26]
 800c6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c6be:	e070      	b.n	800c7a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	f003 0303 	and.w	r3, r3, #3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d006      	beq.n	800c6da <tcp_enqueue_flags+0xea>
 800c6cc:	4b37      	ldr	r3, [pc, #220]	; (800c7ac <tcp_enqueue_flags+0x1bc>)
 800c6ce:	f240 4242 	movw	r2, #1090	; 0x442
 800c6d2:	493b      	ldr	r1, [pc, #236]	; (800c7c0 <tcp_enqueue_flags+0x1d0>)
 800c6d4:	4837      	ldr	r0, [pc, #220]	; (800c7b4 <tcp_enqueue_flags+0x1c4>)
 800c6d6:	f004 fd37 	bl	8011148 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	891b      	ldrh	r3, [r3, #8]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d006      	beq.n	800c6f0 <tcp_enqueue_flags+0x100>
 800c6e2:	4b32      	ldr	r3, [pc, #200]	; (800c7ac <tcp_enqueue_flags+0x1bc>)
 800c6e4:	f240 4243 	movw	r2, #1091	; 0x443
 800c6e8:	4936      	ldr	r1, [pc, #216]	; (800c7c4 <tcp_enqueue_flags+0x1d4>)
 800c6ea:	4832      	ldr	r0, [pc, #200]	; (800c7b4 <tcp_enqueue_flags+0x1c4>)
 800c6ec:	f004 fd2c 	bl	8011148 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d103      	bne.n	800c700 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800c6fe:	e00d      	b.n	800c71c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c704:	61bb      	str	r3, [r7, #24]
 800c706:	e002      	b.n	800c70e <tcp_enqueue_flags+0x11e>
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	61bb      	str	r3, [r7, #24]
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1f8      	bne.n	800c708 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c724:	78fb      	ldrb	r3, [r7, #3]
 800c726:	f003 0302 	and.w	r3, r3, #2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d104      	bne.n	800c738 <tcp_enqueue_flags+0x148>
 800c72e:	78fb      	ldrb	r3, [r7, #3]
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d004      	beq.n	800c742 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c73c:	1c5a      	adds	r2, r3, #1
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c742:	78fb      	ldrb	r3, [r7, #3]
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d006      	beq.n	800c75a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	8b5b      	ldrh	r3, [r3, #26]
 800c750:	f043 0320 	orr.w	r3, r3, #32
 800c754:	b29a      	uxth	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fb fbaa 	bl	8007eb8 <pbuf_clen>
 800c764:	4603      	mov	r3, r0
 800c766:	461a      	mov	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c76e:	4413      	add	r3, r2
 800c770:	b29a      	uxth	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00e      	beq.n	800c7a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10a      	bne.n	800c7a0 <tcp_enqueue_flags+0x1b0>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <tcp_enqueue_flags+0x1b0>
 800c792:	4b06      	ldr	r3, [pc, #24]	; (800c7ac <tcp_enqueue_flags+0x1bc>)
 800c794:	f240 4265 	movw	r2, #1125	; 0x465
 800c798:	490b      	ldr	r1, [pc, #44]	; (800c7c8 <tcp_enqueue_flags+0x1d8>)
 800c79a:	4806      	ldr	r0, [pc, #24]	; (800c7b4 <tcp_enqueue_flags+0x1c4>)
 800c79c:	f004 fcd4 	bl	8011148 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3720      	adds	r7, #32
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	080136dc 	.word	0x080136dc
 800c7b0:	08013b00 	.word	0x08013b00
 800c7b4:	08013730 	.word	0x08013730
 800c7b8:	08013b58 	.word	0x08013b58
 800c7bc:	08013b78 	.word	0x08013b78
 800c7c0:	08013bb4 	.word	0x08013bb4
 800c7c4:	08013bcc 	.word	0x08013bcc
 800c7c8:	08013bf8 	.word	0x08013bf8

0800c7cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c7cc:	b5b0      	push	{r4, r5, r7, lr}
 800c7ce:	b08a      	sub	sp, #40	; 0x28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d106      	bne.n	800c7e8 <tcp_output+0x1c>
 800c7da:	4b9e      	ldr	r3, [pc, #632]	; (800ca54 <tcp_output+0x288>)
 800c7dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c7e0:	499d      	ldr	r1, [pc, #628]	; (800ca58 <tcp_output+0x28c>)
 800c7e2:	489e      	ldr	r0, [pc, #632]	; (800ca5c <tcp_output+0x290>)
 800c7e4:	f004 fcb0 	bl	8011148 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7d1b      	ldrb	r3, [r3, #20]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d106      	bne.n	800c7fe <tcp_output+0x32>
 800c7f0:	4b98      	ldr	r3, [pc, #608]	; (800ca54 <tcp_output+0x288>)
 800c7f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c7f6:	499a      	ldr	r1, [pc, #616]	; (800ca60 <tcp_output+0x294>)
 800c7f8:	4898      	ldr	r0, [pc, #608]	; (800ca5c <tcp_output+0x290>)
 800c7fa:	f004 fca5 	bl	8011148 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c7fe:	4b99      	ldr	r3, [pc, #612]	; (800ca64 <tcp_output+0x298>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	429a      	cmp	r2, r3
 800c806:	d101      	bne.n	800c80c <tcp_output+0x40>
    return ERR_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	e1ce      	b.n	800cbaa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c818:	4293      	cmp	r3, r2
 800c81a:	bf28      	it	cs
 800c81c:	4613      	movcs	r3, r2
 800c81e:	b29b      	uxth	r3, r3
 800c820:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c826:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10b      	bne.n	800c846 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	8b5b      	ldrh	r3, [r3, #26]
 800c832:	f003 0302 	and.w	r3, r3, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	f000 81aa 	beq.w	800cb90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fdcb 	bl	800d3d8 <tcp_send_empty_ack>
 800c842:	4603      	mov	r3, r0
 800c844:	e1b1      	b.n	800cbaa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c846:	6879      	ldr	r1, [r7, #4]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	3304      	adds	r3, #4
 800c84c:	461a      	mov	r2, r3
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f7ff fc7c 	bl	800c14c <tcp_route>
 800c854:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <tcp_output+0x96>
    return ERR_RTE;
 800c85c:	f06f 0303 	mvn.w	r3, #3
 800c860:	e1a3      	b.n	800cbaa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d003      	beq.n	800c870 <tcp_output+0xa4>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d111      	bne.n	800c894 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <tcp_output+0xb0>
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	3304      	adds	r3, #4
 800c87a:	e000      	b.n	800c87e <tcp_output+0xb2>
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <tcp_output+0xc0>
      return ERR_RTE;
 800c886:	f06f 0303 	mvn.w	r3, #3
 800c88a:	e18e      	b.n	800cbaa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f9 ffe5 	bl	800686a <lwip_htonl>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8a6:	1ad3      	subs	r3, r2, r3
 800c8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8aa:	8912      	ldrh	r2, [r2, #8]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	69ba      	ldr	r2, [r7, #24]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d227      	bcs.n	800c904 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d114      	bne.n	800c8ec <tcp_output+0x120>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d110      	bne.n	800c8ec <tcp_output+0x120>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10b      	bne.n	800c8ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	8b5b      	ldrh	r3, [r3, #26]
 800c8f0:	f003 0302 	and.w	r3, r3, #2
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f000 814d 	beq.w	800cb94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fd6c 	bl	800d3d8 <tcp_send_empty_ack>
 800c900:	4603      	mov	r3, r0
 800c902:	e152      	b.n	800cbaa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c910:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c912:	6a3b      	ldr	r3, [r7, #32]
 800c914:	2b00      	cmp	r3, #0
 800c916:	f000 811c 	beq.w	800cb52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c91a:	e002      	b.n	800c922 <tcp_output+0x156>
 800c91c:	6a3b      	ldr	r3, [r7, #32]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	623b      	str	r3, [r7, #32]
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1f8      	bne.n	800c91c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c92a:	e112      	b.n	800cb52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	68db      	ldr	r3, [r3, #12]
 800c930:	899b      	ldrh	r3, [r3, #12]
 800c932:	b29b      	uxth	r3, r3
 800c934:	4618      	mov	r0, r3
 800c936:	f7f9 ff83 	bl	8006840 <lwip_htons>
 800c93a:	4603      	mov	r3, r0
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	f003 0304 	and.w	r3, r3, #4
 800c942:	2b00      	cmp	r3, #0
 800c944:	d006      	beq.n	800c954 <tcp_output+0x188>
 800c946:	4b43      	ldr	r3, [pc, #268]	; (800ca54 <tcp_output+0x288>)
 800c948:	f240 5236 	movw	r2, #1334	; 0x536
 800c94c:	4946      	ldr	r1, [pc, #280]	; (800ca68 <tcp_output+0x29c>)
 800c94e:	4843      	ldr	r0, [pc, #268]	; (800ca5c <tcp_output+0x290>)
 800c950:	f004 fbfa 	bl	8011148 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01f      	beq.n	800c99c <tcp_output+0x1d0>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	8b5b      	ldrh	r3, [r3, #26]
 800c960:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c964:	2b00      	cmp	r3, #0
 800c966:	d119      	bne.n	800c99c <tcp_output+0x1d0>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00b      	beq.n	800c988 <tcp_output+0x1bc>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d110      	bne.n	800c99c <tcp_output+0x1d0>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c97e:	891a      	ldrh	r2, [r3, #8]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c984:	429a      	cmp	r2, r3
 800c986:	d209      	bcs.n	800c99c <tcp_output+0x1d0>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d004      	beq.n	800c99c <tcp_output+0x1d0>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c998:	2b08      	cmp	r3, #8
 800c99a:	d901      	bls.n	800c9a0 <tcp_output+0x1d4>
 800c99c:	2301      	movs	r3, #1
 800c99e:	e000      	b.n	800c9a2 <tcp_output+0x1d6>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d106      	bne.n	800c9b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	8b5b      	ldrh	r3, [r3, #26]
 800c9aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 80e4 	beq.w	800cb7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	7d1b      	ldrb	r3, [r3, #20]
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d00d      	beq.n	800c9d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	899b      	ldrh	r3, [r3, #12]
 800c9c2:	b29c      	uxth	r4, r3
 800c9c4:	2010      	movs	r0, #16
 800c9c6:	f7f9 ff3b 	bl	8006840 <lwip_htons>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	4322      	orrs	r2, r4
 800c9d4:	b292      	uxth	r2, r2
 800c9d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c9d8:	697a      	ldr	r2, [r7, #20]
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9de:	f000 f909 	bl	800cbf4 <tcp_output_segment>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d009      	beq.n	800ca02 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	8b5b      	ldrh	r3, [r3, #26]
 800c9f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	835a      	strh	r2, [r3, #26]
      return err;
 800c9fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca00:	e0d3      	b.n	800cbaa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	7d1b      	ldrb	r3, [r3, #20]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d006      	beq.n	800ca20 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	8b5b      	ldrh	r3, [r3, #26]
 800ca16:	f023 0303 	bic.w	r3, r3, #3
 800ca1a:	b29a      	uxth	r2, r3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ca20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7f9 ff1f 	bl	800686a <lwip_htonl>
 800ca2c:	4604      	mov	r4, r0
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca30:	891b      	ldrh	r3, [r3, #8]
 800ca32:	461d      	mov	r5, r3
 800ca34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	899b      	ldrh	r3, [r3, #12]
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f7f9 feff 	bl	8006840 <lwip_htons>
 800ca42:	4603      	mov	r3, r0
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f003 0303 	and.w	r3, r3, #3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00e      	beq.n	800ca6c <tcp_output+0x2a0>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e00d      	b.n	800ca6e <tcp_output+0x2a2>
 800ca52:	bf00      	nop
 800ca54:	080136dc 	.word	0x080136dc
 800ca58:	08013c20 	.word	0x08013c20
 800ca5c:	08013730 	.word	0x08013730
 800ca60:	08013c38 	.word	0x08013c38
 800ca64:	20008b84 	.word	0x20008b84
 800ca68:	08013c60 	.word	0x08013c60
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	442b      	add	r3, r5
 800ca70:	4423      	add	r3, r4
 800ca72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	da02      	bge.n	800ca86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ca86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca88:	891b      	ldrh	r3, [r3, #8]
 800ca8a:	461c      	mov	r4, r3
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	899b      	ldrh	r3, [r3, #12]
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7f9 fed3 	bl	8006840 <lwip_htons>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	f003 0303 	and.w	r3, r3, #3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <tcp_output+0x2de>
 800caa6:	2301      	movs	r3, #1
 800caa8:	e000      	b.n	800caac <tcp_output+0x2e0>
 800caaa:	2300      	movs	r3, #0
 800caac:	4423      	add	r3, r4
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d049      	beq.n	800cb46 <tcp_output+0x37a>
      seg->next = NULL;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab4:	2200      	movs	r2, #0
 800cab6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d105      	bne.n	800cacc <tcp_output+0x300>
        pcb->unacked = seg;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800cac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac8:	623b      	str	r3, [r7, #32]
 800caca:	e03f      	b.n	800cb4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f9 fec9 	bl	800686a <lwip_htonl>
 800cad8:	4604      	mov	r4, r0
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7f9 fec2 	bl	800686a <lwip_htonl>
 800cae6:	4603      	mov	r3, r0
 800cae8:	1ae3      	subs	r3, r4, r3
 800caea:	2b00      	cmp	r3, #0
 800caec:	da24      	bge.n	800cb38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3370      	adds	r3, #112	; 0x70
 800caf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800caf4:	e002      	b.n	800cafc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d011      	beq.n	800cb28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cb04:	69fb      	ldr	r3, [r7, #28]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7f9 feac 	bl	800686a <lwip_htonl>
 800cb12:	4604      	mov	r4, r0
 800cb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f9 fea5 	bl	800686a <lwip_htonl>
 800cb20:	4603      	mov	r3, r0
 800cb22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	dbe6      	blt.n	800caf6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb34:	601a      	str	r2, [r3, #0]
 800cb36:	e009      	b.n	800cb4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cb3e:	6a3b      	ldr	r3, [r7, #32]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	623b      	str	r3, [r7, #32]
 800cb44:	e002      	b.n	800cb4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cb46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb48:	f7fc fc43 	bl	80093d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d012      	beq.n	800cb7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7f9 fe83 	bl	800686a <lwip_htonl>
 800cb64:	4602      	mov	r2, r0
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb6e:	8912      	ldrh	r2, [r2, #8]
 800cb70:	4413      	add	r3, r2
  while (seg != NULL &&
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	f4bf aed9 	bcs.w	800c92c <tcp_output+0x160>
 800cb7a:	e000      	b.n	800cb7e <tcp_output+0x3b2>
      break;
 800cb7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d108      	bne.n	800cb98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cb8e:	e004      	b.n	800cb9a <tcp_output+0x3ce>
    goto output_done;
 800cb90:	bf00      	nop
 800cb92:	e002      	b.n	800cb9a <tcp_output+0x3ce>
    goto output_done;
 800cb94:	bf00      	nop
 800cb96:	e000      	b.n	800cb9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cb98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	8b5b      	ldrh	r3, [r3, #26]
 800cb9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3728      	adds	r7, #40	; 0x28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bdb0      	pop	{r4, r5, r7, pc}
 800cbb2:	bf00      	nop

0800cbb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d106      	bne.n	800cbd0 <tcp_output_segment_busy+0x1c>
 800cbc2:	4b09      	ldr	r3, [pc, #36]	; (800cbe8 <tcp_output_segment_busy+0x34>)
 800cbc4:	f240 529a 	movw	r2, #1434	; 0x59a
 800cbc8:	4908      	ldr	r1, [pc, #32]	; (800cbec <tcp_output_segment_busy+0x38>)
 800cbca:	4809      	ldr	r0, [pc, #36]	; (800cbf0 <tcp_output_segment_busy+0x3c>)
 800cbcc:	f004 fabc 	bl	8011148 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	7b9b      	ldrb	r3, [r3, #14]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d001      	beq.n	800cbde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e000      	b.n	800cbe0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	080136dc 	.word	0x080136dc
 800cbec:	08013c78 	.word	0x08013c78
 800cbf0:	08013730 	.word	0x08013730

0800cbf4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cbf4:	b5b0      	push	{r4, r5, r7, lr}
 800cbf6:	b08c      	sub	sp, #48	; 0x30
 800cbf8:	af04      	add	r7, sp, #16
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d106      	bne.n	800cc14 <tcp_output_segment+0x20>
 800cc06:	4b63      	ldr	r3, [pc, #396]	; (800cd94 <tcp_output_segment+0x1a0>)
 800cc08:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cc0c:	4962      	ldr	r1, [pc, #392]	; (800cd98 <tcp_output_segment+0x1a4>)
 800cc0e:	4863      	ldr	r0, [pc, #396]	; (800cd9c <tcp_output_segment+0x1a8>)
 800cc10:	f004 fa9a 	bl	8011148 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <tcp_output_segment+0x34>
 800cc1a:	4b5e      	ldr	r3, [pc, #376]	; (800cd94 <tcp_output_segment+0x1a0>)
 800cc1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cc20:	495f      	ldr	r1, [pc, #380]	; (800cda0 <tcp_output_segment+0x1ac>)
 800cc22:	485e      	ldr	r0, [pc, #376]	; (800cd9c <tcp_output_segment+0x1a8>)
 800cc24:	f004 fa90 	bl	8011148 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <tcp_output_segment+0x48>
 800cc2e:	4b59      	ldr	r3, [pc, #356]	; (800cd94 <tcp_output_segment+0x1a0>)
 800cc30:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cc34:	495b      	ldr	r1, [pc, #364]	; (800cda4 <tcp_output_segment+0x1b0>)
 800cc36:	4859      	ldr	r0, [pc, #356]	; (800cd9c <tcp_output_segment+0x1a8>)
 800cc38:	f004 fa86 	bl	8011148 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7ff ffb9 	bl	800cbb4 <tcp_output_segment_busy>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e09f      	b.n	800cd8c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	68dc      	ldr	r4, [r3, #12]
 800cc54:	4610      	mov	r0, r2
 800cc56:	f7f9 fe08 	bl	800686a <lwip_htonl>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	68dc      	ldr	r4, [r3, #12]
 800cc66:	4610      	mov	r0, r2
 800cc68:	f7f9 fdea 	bl	8006840 <lwip_htons>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cc78:	441a      	add	r2, r3
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	3314      	adds	r3, #20
 800cc84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	7a9b      	ldrb	r3, [r3, #10]
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d015      	beq.n	800ccbe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	3304      	adds	r3, #4
 800cc96:	461a      	mov	r2, r3
 800cc98:	6879      	ldr	r1, [r7, #4]
 800cc9a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cc9e:	f7fc fe8f 	bl	80099c0 <tcp_eff_send_mss_netif>
 800cca2:	4603      	mov	r3, r0
 800cca4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cca6:	8b7b      	ldrh	r3, [r7, #26]
 800cca8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7f9 fddc 	bl	800686a <lwip_htonl>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da02      	bge.n	800ccce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2200      	movs	r2, #0
 800cccc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10c      	bne.n	800ccf0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ccd6:	4b34      	ldr	r3, [pc, #208]	; (800cda8 <tcp_output_segment+0x1b4>)
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7f9 fdc0 	bl	800686a <lwip_htonl>
 800ccea:	4602      	mov	r2, r0
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	68da      	ldr	r2, [r3, #12]
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	8959      	ldrh	r1, [r3, #10]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	8b3a      	ldrh	r2, [r7, #24]
 800cd0a:	1a8a      	subs	r2, r1, r2
 800cd0c:	b292      	uxth	r2, r2
 800cd0e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	8919      	ldrh	r1, [r3, #8]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	8b3a      	ldrh	r2, [r7, #24]
 800cd1c:	1a8a      	subs	r2, r1, r2
 800cd1e:	b292      	uxth	r2, r2
 800cd20:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	68d2      	ldr	r2, [r2, #12]
 800cd2a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	741a      	strb	r2, [r3, #16]
 800cd34:	2200      	movs	r2, #0
 800cd36:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	f103 0214 	add.w	r2, r3, #20
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	7a9b      	ldrb	r3, [r3, #10]
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	f003 0304 	and.w	r3, r3, #4
 800cd4a:	4413      	add	r3, r2
 800cd4c:	69fa      	ldr	r2, [r7, #28]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d006      	beq.n	800cd60 <tcp_output_segment+0x16c>
 800cd52:	4b10      	ldr	r3, [pc, #64]	; (800cd94 <tcp_output_segment+0x1a0>)
 800cd54:	f240 621c 	movw	r2, #1564	; 0x61c
 800cd58:	4914      	ldr	r1, [pc, #80]	; (800cdac <tcp_output_segment+0x1b8>)
 800cd5a:	4810      	ldr	r0, [pc, #64]	; (800cd9c <tcp_output_segment+0x1a8>)
 800cd5c:	f004 f9f4 	bl	8011148 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	6858      	ldr	r0, [r3, #4]
 800cd64:	68b9      	ldr	r1, [r7, #8]
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	1d1c      	adds	r4, r3, #4
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	7add      	ldrb	r5, [r3, #11]
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	7a9b      	ldrb	r3, [r3, #10]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	9202      	str	r2, [sp, #8]
 800cd76:	2206      	movs	r2, #6
 800cd78:	9201      	str	r2, [sp, #4]
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	462b      	mov	r3, r5
 800cd7e:	4622      	mov	r2, r4
 800cd80:	f002 fd84 	bl	800f88c <ip4_output_if>
 800cd84:	4603      	mov	r3, r0
 800cd86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cd88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3720      	adds	r7, #32
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bdb0      	pop	{r4, r5, r7, pc}
 800cd94:	080136dc 	.word	0x080136dc
 800cd98:	08013ca0 	.word	0x08013ca0
 800cd9c:	08013730 	.word	0x08013730
 800cda0:	08013cc0 	.word	0x08013cc0
 800cda4:	08013ce0 	.word	0x08013ce0
 800cda8:	20008b74 	.word	0x20008b74
 800cdac:	08013d04 	.word	0x08013d04

0800cdb0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cdb0:	b5b0      	push	{r4, r5, r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <tcp_rexmit_rto_prepare+0x1c>
 800cdbe:	4b31      	ldr	r3, [pc, #196]	; (800ce84 <tcp_rexmit_rto_prepare+0xd4>)
 800cdc0:	f240 6263 	movw	r2, #1635	; 0x663
 800cdc4:	4930      	ldr	r1, [pc, #192]	; (800ce88 <tcp_rexmit_rto_prepare+0xd8>)
 800cdc6:	4831      	ldr	r0, [pc, #196]	; (800ce8c <tcp_rexmit_rto_prepare+0xdc>)
 800cdc8:	f004 f9be 	bl	8011148 <iprintf>

  if (pcb->unacked == NULL) {
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d102      	bne.n	800cdda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cdd4:	f06f 0305 	mvn.w	r3, #5
 800cdd8:	e050      	b.n	800ce7c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdde:	60fb      	str	r3, [r7, #12]
 800cde0:	e00b      	b.n	800cdfa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff fee6 	bl	800cbb4 <tcp_output_segment_busy>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cdee:	f06f 0305 	mvn.w	r3, #5
 800cdf2:	e043      	b.n	800ce7c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	60fb      	str	r3, [r7, #12]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1ef      	bne.n	800cde2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ce02:	68f8      	ldr	r0, [r7, #12]
 800ce04:	f7ff fed6 	bl	800cbb4 <tcp_output_segment_busy>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ce0e:	f06f 0305 	mvn.w	r3, #5
 800ce12:	e033      	b.n	800ce7c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	8b5b      	ldrh	r3, [r3, #26]
 800ce2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7f9 fd13 	bl	800686a <lwip_htonl>
 800ce44:	4604      	mov	r4, r0
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	891b      	ldrh	r3, [r3, #8]
 800ce4a:	461d      	mov	r5, r3
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	899b      	ldrh	r3, [r3, #12]
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f9 fcf3 	bl	8006840 <lwip_htons>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	f003 0303 	and.w	r3, r3, #3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <tcp_rexmit_rto_prepare+0xba>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e000      	b.n	800ce6c <tcp_rexmit_rto_prepare+0xbc>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	442b      	add	r3, r5
 800ce6e:	18e2      	adds	r2, r4, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bdb0      	pop	{r4, r5, r7, pc}
 800ce84:	080136dc 	.word	0x080136dc
 800ce88:	08013d18 	.word	0x08013d18
 800ce8c:	08013730 	.word	0x08013730

0800ce90 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d106      	bne.n	800ceac <tcp_rexmit_rto_commit+0x1c>
 800ce9e:	4b0d      	ldr	r3, [pc, #52]	; (800ced4 <tcp_rexmit_rto_commit+0x44>)
 800cea0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cea4:	490c      	ldr	r1, [pc, #48]	; (800ced8 <tcp_rexmit_rto_commit+0x48>)
 800cea6:	480d      	ldr	r0, [pc, #52]	; (800cedc <tcp_rexmit_rto_commit+0x4c>)
 800cea8:	f004 f94e 	bl	8011148 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ceb2:	2bff      	cmp	r3, #255	; 0xff
 800ceb4:	d007      	beq.n	800cec6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cebc:	3301      	adds	r3, #1
 800cebe:	b2da      	uxtb	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fc80 	bl	800c7cc <tcp_output>
}
 800cecc:	bf00      	nop
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	080136dc 	.word	0x080136dc
 800ced8:	08013d3c 	.word	0x08013d3c
 800cedc:	08013730 	.word	0x08013730

0800cee0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d106      	bne.n	800cefc <tcp_rexmit_rto+0x1c>
 800ceee:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <tcp_rexmit_rto+0x38>)
 800cef0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cef4:	4909      	ldr	r1, [pc, #36]	; (800cf1c <tcp_rexmit_rto+0x3c>)
 800cef6:	480a      	ldr	r0, [pc, #40]	; (800cf20 <tcp_rexmit_rto+0x40>)
 800cef8:	f004 f926 	bl	8011148 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7ff ff57 	bl	800cdb0 <tcp_rexmit_rto_prepare>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d102      	bne.n	800cf0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7ff ffc1 	bl	800ce90 <tcp_rexmit_rto_commit>
  }
}
 800cf0e:	bf00      	nop
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	080136dc 	.word	0x080136dc
 800cf1c:	08013d60 	.word	0x08013d60
 800cf20:	08013730 	.word	0x08013730

0800cf24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cf24:	b590      	push	{r4, r7, lr}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d106      	bne.n	800cf40 <tcp_rexmit+0x1c>
 800cf32:	4b2f      	ldr	r3, [pc, #188]	; (800cff0 <tcp_rexmit+0xcc>)
 800cf34:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cf38:	492e      	ldr	r1, [pc, #184]	; (800cff4 <tcp_rexmit+0xd0>)
 800cf3a:	482f      	ldr	r0, [pc, #188]	; (800cff8 <tcp_rexmit+0xd4>)
 800cf3c:	f004 f904 	bl	8011148 <iprintf>

  if (pcb->unacked == NULL) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d102      	bne.n	800cf4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cf48:	f06f 0305 	mvn.w	r3, #5
 800cf4c:	e04c      	b.n	800cfe8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cf54:	68b8      	ldr	r0, [r7, #8]
 800cf56:	f7ff fe2d 	bl	800cbb4 <tcp_output_segment_busy>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cf60:	f06f 0305 	mvn.w	r3, #5
 800cf64:	e040      	b.n	800cfe8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	336c      	adds	r3, #108	; 0x6c
 800cf72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf74:	e002      	b.n	800cf7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d011      	beq.n	800cfa8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7f9 fc6c 	bl	800686a <lwip_htonl>
 800cf92:	4604      	mov	r4, r0
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7f9 fc65 	bl	800686a <lwip_htonl>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	dbe6      	blt.n	800cf76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d103      	bne.n	800cfc6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfcc:	2bff      	cmp	r3, #255	; 0xff
 800cfce:	d007      	beq.n	800cfe0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd90      	pop	{r4, r7, pc}
 800cff0:	080136dc 	.word	0x080136dc
 800cff4:	08013d7c 	.word	0x08013d7c
 800cff8:	08013730 	.word	0x08013730

0800cffc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <tcp_rexmit_fast+0x1c>
 800d00a:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <tcp_rexmit_fast+0xb8>)
 800d00c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d010:	4929      	ldr	r1, [pc, #164]	; (800d0b8 <tcp_rexmit_fast+0xbc>)
 800d012:	482a      	ldr	r0, [pc, #168]	; (800d0bc <tcp_rexmit_fast+0xc0>)
 800d014:	f004 f898 	bl	8011148 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d044      	beq.n	800d0aa <tcp_rexmit_fast+0xae>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	8b5b      	ldrh	r3, [r3, #26]
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d13e      	bne.n	800d0aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff ff79 	bl	800cf24 <tcp_rexmit>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d138      	bne.n	800d0aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d044:	4293      	cmp	r3, r2
 800d046:	bf28      	it	cs
 800d048:	4613      	movcs	r3, r2
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	0fda      	lsrs	r2, r3, #31
 800d04e:	4413      	add	r3, r2
 800d050:	105b      	asrs	r3, r3, #1
 800d052:	b29a      	uxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d060:	461a      	mov	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d066:	005b      	lsls	r3, r3, #1
 800d068:	429a      	cmp	r2, r3
 800d06a:	d206      	bcs.n	800d07a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	b29a      	uxth	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d084:	4619      	mov	r1, r3
 800d086:	0049      	lsls	r1, r1, #1
 800d088:	440b      	add	r3, r1
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	4413      	add	r3, r2
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	8b5b      	ldrh	r3, [r3, #26]
 800d09a:	f043 0304 	orr.w	r3, r3, #4
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	080136dc 	.word	0x080136dc
 800d0b8:	08013d94 	.word	0x08013d94
 800d0bc:	08013730 	.word	0x08013730

0800d0c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	607b      	str	r3, [r7, #4]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	817b      	strh	r3, [r7, #10]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d0d2:	897a      	ldrh	r2, [r7, #10]
 800d0d4:	893b      	ldrh	r3, [r7, #8]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	3314      	adds	r3, #20
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	2022      	movs	r0, #34	; 0x22
 800d0e6:	f7fa fb7b 	bl	80077e0 <pbuf_alloc>
 800d0ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d04d      	beq.n	800d18e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d0f2:	897b      	ldrh	r3, [r7, #10]
 800d0f4:	3313      	adds	r3, #19
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	8952      	ldrh	r2, [r2, #10]
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	db06      	blt.n	800d10c <tcp_output_alloc_header_common+0x4c>
 800d0fe:	4b26      	ldr	r3, [pc, #152]	; (800d198 <tcp_output_alloc_header_common+0xd8>)
 800d100:	f240 7223 	movw	r2, #1827	; 0x723
 800d104:	4925      	ldr	r1, [pc, #148]	; (800d19c <tcp_output_alloc_header_common+0xdc>)
 800d106:	4826      	ldr	r0, [pc, #152]	; (800d1a0 <tcp_output_alloc_header_common+0xe0>)
 800d108:	f004 f81e 	bl	8011148 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d112:	8c3b      	ldrh	r3, [r7, #32]
 800d114:	4618      	mov	r0, r3
 800d116:	f7f9 fb93 	bl	8006840 <lwip_htons>
 800d11a:	4603      	mov	r3, r0
 800d11c:	461a      	mov	r2, r3
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d124:	4618      	mov	r0, r3
 800d126:	f7f9 fb8b 	bl	8006840 <lwip_htons>
 800d12a:	4603      	mov	r3, r0
 800d12c:	461a      	mov	r2, r3
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f7f9 fb96 	bl	800686a <lwip_htonl>
 800d13e:	4602      	mov	r2, r0
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d144:	897b      	ldrh	r3, [r7, #10]
 800d146:	089b      	lsrs	r3, r3, #2
 800d148:	b29b      	uxth	r3, r3
 800d14a:	3305      	adds	r3, #5
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	031b      	lsls	r3, r3, #12
 800d150:	b29a      	uxth	r2, r3
 800d152:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d156:	b29b      	uxth	r3, r3
 800d158:	4313      	orrs	r3, r2
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7f9 fb6f 	bl	8006840 <lwip_htons>
 800d162:	4603      	mov	r3, r0
 800d164:	461a      	mov	r2, r3
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d16a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7f9 fb67 	bl	8006840 <lwip_htons>
 800d172:	4603      	mov	r3, r0
 800d174:	461a      	mov	r2, r3
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	2200      	movs	r2, #0
 800d17e:	741a      	strb	r2, [r3, #16]
 800d180:	2200      	movs	r2, #0
 800d182:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	2200      	movs	r2, #0
 800d188:	749a      	strb	r2, [r3, #18]
 800d18a:	2200      	movs	r2, #0
 800d18c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d18e:	697b      	ldr	r3, [r7, #20]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	080136dc 	.word	0x080136dc
 800d19c:	08013db4 	.word	0x08013db4
 800d1a0:	08013730 	.word	0x08013730

0800d1a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d1a4:	b5b0      	push	{r4, r5, r7, lr}
 800d1a6:	b08a      	sub	sp, #40	; 0x28
 800d1a8:	af04      	add	r7, sp, #16
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	607b      	str	r3, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	817b      	strh	r3, [r7, #10]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d106      	bne.n	800d1ca <tcp_output_alloc_header+0x26>
 800d1bc:	4b15      	ldr	r3, [pc, #84]	; (800d214 <tcp_output_alloc_header+0x70>)
 800d1be:	f240 7242 	movw	r2, #1858	; 0x742
 800d1c2:	4915      	ldr	r1, [pc, #84]	; (800d218 <tcp_output_alloc_header+0x74>)
 800d1c4:	4815      	ldr	r0, [pc, #84]	; (800d21c <tcp_output_alloc_header+0x78>)
 800d1c6:	f003 ffbf 	bl	8011148 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	8adb      	ldrh	r3, [r3, #22]
 800d1d2:	68fa      	ldr	r2, [r7, #12]
 800d1d4:	8b12      	ldrh	r2, [r2, #24]
 800d1d6:	68f9      	ldr	r1, [r7, #12]
 800d1d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d1da:	893d      	ldrh	r5, [r7, #8]
 800d1dc:	897c      	ldrh	r4, [r7, #10]
 800d1de:	9103      	str	r1, [sp, #12]
 800d1e0:	2110      	movs	r1, #16
 800d1e2:	9102      	str	r1, [sp, #8]
 800d1e4:	9201      	str	r2, [sp, #4]
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	462a      	mov	r2, r5
 800d1ec:	4621      	mov	r1, r4
 800d1ee:	f7ff ff67 	bl	800d0c0 <tcp_output_alloc_header_common>
 800d1f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d006      	beq.n	800d208 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d202:	441a      	add	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d208:	697b      	ldr	r3, [r7, #20]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3718      	adds	r7, #24
 800d20e:	46bd      	mov	sp, r7
 800d210:	bdb0      	pop	{r4, r5, r7, pc}
 800d212:	bf00      	nop
 800d214:	080136dc 	.word	0x080136dc
 800d218:	08013de4 	.word	0x08013de4
 800d21c:	08013730 	.word	0x08013730

0800d220 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	4611      	mov	r1, r2
 800d22c:	461a      	mov	r2, r3
 800d22e:	460b      	mov	r3, r1
 800d230:	71fb      	strb	r3, [r7, #7]
 800d232:	4613      	mov	r3, r2
 800d234:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <tcp_output_fill_options+0x2e>
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <tcp_output_fill_options+0x70>)
 800d242:	f240 7256 	movw	r2, #1878	; 0x756
 800d246:	4913      	ldr	r1, [pc, #76]	; (800d294 <tcp_output_fill_options+0x74>)
 800d248:	4813      	ldr	r0, [pc, #76]	; (800d298 <tcp_output_fill_options+0x78>)
 800d24a:	f003 ff7d 	bl	8011148 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	3314      	adds	r3, #20
 800d258:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	f103 0214 	add.w	r2, r3, #20
 800d260:	8bfb      	ldrh	r3, [r7, #30]
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4619      	mov	r1, r3
 800d266:	79fb      	ldrb	r3, [r7, #7]
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	f003 0304 	and.w	r3, r3, #4
 800d26e:	440b      	add	r3, r1
 800d270:	4413      	add	r3, r2
 800d272:	697a      	ldr	r2, [r7, #20]
 800d274:	429a      	cmp	r2, r3
 800d276:	d006      	beq.n	800d286 <tcp_output_fill_options+0x66>
 800d278:	4b05      	ldr	r3, [pc, #20]	; (800d290 <tcp_output_fill_options+0x70>)
 800d27a:	f240 7275 	movw	r2, #1909	; 0x775
 800d27e:	4907      	ldr	r1, [pc, #28]	; (800d29c <tcp_output_fill_options+0x7c>)
 800d280:	4805      	ldr	r0, [pc, #20]	; (800d298 <tcp_output_fill_options+0x78>)
 800d282:	f003 ff61 	bl	8011148 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d286:	bf00      	nop
 800d288:	3720      	adds	r7, #32
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	080136dc 	.word	0x080136dc
 800d294:	08013e0c 	.word	0x08013e0c
 800d298:	08013730 	.word	0x08013730
 800d29c:	08013d04 	.word	0x08013d04

0800d2a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08a      	sub	sp, #40	; 0x28
 800d2a4:	af04      	add	r7, sp, #16
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d106      	bne.n	800d2c2 <tcp_output_control_segment+0x22>
 800d2b4:	4b1c      	ldr	r3, [pc, #112]	; (800d328 <tcp_output_control_segment+0x88>)
 800d2b6:	f240 7287 	movw	r2, #1927	; 0x787
 800d2ba:	491c      	ldr	r1, [pc, #112]	; (800d32c <tcp_output_control_segment+0x8c>)
 800d2bc:	481c      	ldr	r0, [pc, #112]	; (800d330 <tcp_output_control_segment+0x90>)
 800d2be:	f003 ff43 	bl	8011148 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	6879      	ldr	r1, [r7, #4]
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f7fe ff40 	bl	800c14c <tcp_route>
 800d2cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d102      	bne.n	800d2da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d2d4:	23fc      	movs	r3, #252	; 0xfc
 800d2d6:	75fb      	strb	r3, [r7, #23]
 800d2d8:	e01c      	b.n	800d314 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d006      	beq.n	800d2ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	7adb      	ldrb	r3, [r3, #11]
 800d2e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	7a9b      	ldrb	r3, [r3, #10]
 800d2ea:	757b      	strb	r3, [r7, #21]
 800d2ec:	e003      	b.n	800d2f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d2ee:	23ff      	movs	r3, #255	; 0xff
 800d2f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d2f6:	7dba      	ldrb	r2, [r7, #22]
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	9302      	str	r3, [sp, #8]
 800d2fc:	2306      	movs	r3, #6
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	7d7b      	ldrb	r3, [r7, #21]
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	4613      	mov	r3, r2
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	6879      	ldr	r1, [r7, #4]
 800d30a:	68b8      	ldr	r0, [r7, #8]
 800d30c:	f002 fabe 	bl	800f88c <ip4_output_if>
 800d310:	4603      	mov	r3, r0
 800d312:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d314:	68b8      	ldr	r0, [r7, #8]
 800d316:	f7fa fd47 	bl	8007da8 <pbuf_free>
  return err;
 800d31a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	080136dc 	.word	0x080136dc
 800d32c:	08013e34 	.word	0x08013e34
 800d330:	08013730 	.word	0x08013730

0800d334 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d334:	b590      	push	{r4, r7, lr}
 800d336:	b08b      	sub	sp, #44	; 0x2c
 800d338:	af04      	add	r7, sp, #16
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d106      	bne.n	800d356 <tcp_rst+0x22>
 800d348:	4b1f      	ldr	r3, [pc, #124]	; (800d3c8 <tcp_rst+0x94>)
 800d34a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d34e:	491f      	ldr	r1, [pc, #124]	; (800d3cc <tcp_rst+0x98>)
 800d350:	481f      	ldr	r0, [pc, #124]	; (800d3d0 <tcp_rst+0x9c>)
 800d352:	f003 fef9 	bl	8011148 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d106      	bne.n	800d36a <tcp_rst+0x36>
 800d35c:	4b1a      	ldr	r3, [pc, #104]	; (800d3c8 <tcp_rst+0x94>)
 800d35e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d362:	491c      	ldr	r1, [pc, #112]	; (800d3d4 <tcp_rst+0xa0>)
 800d364:	481a      	ldr	r0, [pc, #104]	; (800d3d0 <tcp_rst+0x9c>)
 800d366:	f003 feef 	bl	8011148 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d36a:	2300      	movs	r3, #0
 800d36c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d36e:	f246 0308 	movw	r3, #24584	; 0x6008
 800d372:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d374:	7dfb      	ldrb	r3, [r7, #23]
 800d376:	b29c      	uxth	r4, r3
 800d378:	68b8      	ldr	r0, [r7, #8]
 800d37a:	f7f9 fa76 	bl	800686a <lwip_htonl>
 800d37e:	4602      	mov	r2, r0
 800d380:	8abb      	ldrh	r3, [r7, #20]
 800d382:	9303      	str	r3, [sp, #12]
 800d384:	2314      	movs	r3, #20
 800d386:	9302      	str	r3, [sp, #8]
 800d388:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	4613      	mov	r3, r2
 800d392:	2200      	movs	r2, #0
 800d394:	4621      	mov	r1, r4
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7ff fe92 	bl	800d0c0 <tcp_output_alloc_header_common>
 800d39c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00c      	beq.n	800d3be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d3a4:	7dfb      	ldrb	r3, [r7, #23]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	6939      	ldr	r1, [r7, #16]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f7ff ff38 	bl	800d220 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	6939      	ldr	r1, [r7, #16]
 800d3b6:	68f8      	ldr	r0, [r7, #12]
 800d3b8:	f7ff ff72 	bl	800d2a0 <tcp_output_control_segment>
 800d3bc:	e000      	b.n	800d3c0 <tcp_rst+0x8c>
    return;
 800d3be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d3c0:	371c      	adds	r7, #28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd90      	pop	{r4, r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	080136dc 	.word	0x080136dc
 800d3cc:	08013e60 	.word	0x08013e60
 800d3d0:	08013730 	.word	0x08013730
 800d3d4:	08013e7c 	.word	0x08013e7c

0800d3d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d3d8:	b590      	push	{r4, r7, lr}
 800d3da:	b087      	sub	sp, #28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d106      	bne.n	800d3fc <tcp_send_empty_ack+0x24>
 800d3ee:	4b28      	ldr	r3, [pc, #160]	; (800d490 <tcp_send_empty_ack+0xb8>)
 800d3f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d3f4:	4927      	ldr	r1, [pc, #156]	; (800d494 <tcp_send_empty_ack+0xbc>)
 800d3f6:	4828      	ldr	r0, [pc, #160]	; (800d498 <tcp_send_empty_ack+0xc0>)
 800d3f8:	f003 fea6 	bl	8011148 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d3fc:	7dfb      	ldrb	r3, [r7, #23]
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	b2db      	uxtb	r3, r3
 800d402:	f003 0304 	and.w	r3, r3, #4
 800d406:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d408:	7d7b      	ldrb	r3, [r7, #21]
 800d40a:	b29c      	uxth	r4, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d410:	4618      	mov	r0, r3
 800d412:	f7f9 fa2a 	bl	800686a <lwip_htonl>
 800d416:	4603      	mov	r3, r0
 800d418:	2200      	movs	r2, #0
 800d41a:	4621      	mov	r1, r4
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7ff fec1 	bl	800d1a4 <tcp_output_alloc_header>
 800d422:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d109      	bne.n	800d43e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	8b5b      	ldrh	r3, [r3, #26]
 800d42e:	f043 0303 	orr.w	r3, r3, #3
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d438:	f06f 0301 	mvn.w	r3, #1
 800d43c:	e023      	b.n	800d486 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d43e:	7dbb      	ldrb	r3, [r7, #22]
 800d440:	7dfa      	ldrb	r2, [r7, #23]
 800d442:	6939      	ldr	r1, [r7, #16]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7ff feeb 	bl	800d220 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3304      	adds	r3, #4
 800d450:	6939      	ldr	r1, [r7, #16]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff ff24 	bl	800d2a0 <tcp_output_control_segment>
 800d458:	4603      	mov	r3, r0
 800d45a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d007      	beq.n	800d474 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	8b5b      	ldrh	r3, [r3, #26]
 800d468:	f043 0303 	orr.w	r3, r3, #3
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	835a      	strh	r2, [r3, #26]
 800d472:	e006      	b.n	800d482 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	8b5b      	ldrh	r3, [r3, #26]
 800d478:	f023 0303 	bic.w	r3, r3, #3
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d482:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d486:	4618      	mov	r0, r3
 800d488:	371c      	adds	r7, #28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd90      	pop	{r4, r7, pc}
 800d48e:	bf00      	nop
 800d490:	080136dc 	.word	0x080136dc
 800d494:	08013e98 	.word	0x08013e98
 800d498:	08013730 	.word	0x08013730

0800d49c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d49c:	b590      	push	{r4, r7, lr}
 800d49e:	b087      	sub	sp, #28
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d106      	bne.n	800d4bc <tcp_keepalive+0x20>
 800d4ae:	4b18      	ldr	r3, [pc, #96]	; (800d510 <tcp_keepalive+0x74>)
 800d4b0:	f640 0224 	movw	r2, #2084	; 0x824
 800d4b4:	4917      	ldr	r1, [pc, #92]	; (800d514 <tcp_keepalive+0x78>)
 800d4b6:	4818      	ldr	r0, [pc, #96]	; (800d518 <tcp_keepalive+0x7c>)
 800d4b8:	f003 fe46 	bl	8011148 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
 800d4be:	b29c      	uxth	r4, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7f9 f9cf 	bl	800686a <lwip_htonl>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7ff fe66 	bl	800d1a4 <tcp_output_alloc_header>
 800d4d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d102      	bne.n	800d4e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e4:	e010      	b.n	800d508 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d4e6:	7dfb      	ldrb	r3, [r7, #23]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	6939      	ldr	r1, [r7, #16]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f7ff fe97 	bl	800d220 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	3304      	adds	r3, #4
 800d4f8:	6939      	ldr	r1, [r7, #16]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7ff fed0 	bl	800d2a0 <tcp_output_control_segment>
 800d500:	4603      	mov	r3, r0
 800d502:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	371c      	adds	r7, #28
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd90      	pop	{r4, r7, pc}
 800d510:	080136dc 	.word	0x080136dc
 800d514:	08013eb8 	.word	0x08013eb8
 800d518:	08013730 	.word	0x08013730

0800d51c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d51c:	b590      	push	{r4, r7, lr}
 800d51e:	b08b      	sub	sp, #44	; 0x2c
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d524:	2300      	movs	r3, #0
 800d526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d106      	bne.n	800d53e <tcp_zero_window_probe+0x22>
 800d530:	4b4c      	ldr	r3, [pc, #304]	; (800d664 <tcp_zero_window_probe+0x148>)
 800d532:	f640 024f 	movw	r2, #2127	; 0x84f
 800d536:	494c      	ldr	r1, [pc, #304]	; (800d668 <tcp_zero_window_probe+0x14c>)
 800d538:	484c      	ldr	r0, [pc, #304]	; (800d66c <tcp_zero_window_probe+0x150>)
 800d53a:	f003 fe05 	bl	8011148 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d542:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d544:	6a3b      	ldr	r3, [r7, #32]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d101      	bne.n	800d54e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	e086      	b.n	800d65c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d554:	2bff      	cmp	r3, #255	; 0xff
 800d556:	d007      	beq.n	800d568 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d55e:	3301      	adds	r3, #1
 800d560:	b2da      	uxtb	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d568:	6a3b      	ldr	r3, [r7, #32]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	899b      	ldrh	r3, [r3, #12]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	4618      	mov	r0, r3
 800d572:	f7f9 f965 	bl	8006840 <lwip_htons>
 800d576:	4603      	mov	r3, r0
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	f003 0301 	and.w	r3, r3, #1
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d005      	beq.n	800d58e <tcp_zero_window_probe+0x72>
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	891b      	ldrh	r3, [r3, #8]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <tcp_zero_window_probe+0x72>
 800d58a:	2301      	movs	r3, #1
 800d58c:	e000      	b.n	800d590 <tcp_zero_window_probe+0x74>
 800d58e:	2300      	movs	r3, #0
 800d590:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d592:	7ffb      	ldrb	r3, [r7, #31]
 800d594:	2b00      	cmp	r3, #0
 800d596:	bf0c      	ite	eq
 800d598:	2301      	moveq	r3, #1
 800d59a:	2300      	movne	r3, #0
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5a4:	b299      	uxth	r1, r3
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	8bba      	ldrh	r2, [r7, #28]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff fdf8 	bl	800d1a4 <tcp_output_alloc_header>
 800d5b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d102      	bne.n	800d5c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d5c0:	e04c      	b.n	800d65c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d5c8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d011      	beq.n	800d5f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	899b      	ldrh	r3, [r3, #12]
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	b21b      	sxth	r3, r3
 800d5d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5da:	b21c      	sxth	r4, r3
 800d5dc:	2011      	movs	r0, #17
 800d5de:	f7f9 f92f 	bl	8006840 <lwip_htons>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	b21b      	sxth	r3, r3
 800d5e6:	4323      	orrs	r3, r4
 800d5e8:	b21b      	sxth	r3, r3
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	819a      	strh	r2, [r3, #12]
 800d5f0:	e010      	b.n	800d614 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	3314      	adds	r3, #20
 800d5f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	6858      	ldr	r0, [r3, #4]
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	891a      	ldrh	r2, [r3, #8]
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	891b      	ldrh	r3, [r3, #8]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	2201      	movs	r2, #1
 800d60e:	6939      	ldr	r1, [r7, #16]
 800d610:	f7fa fdc4 	bl	800819c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f9 f925 	bl	800686a <lwip_htonl>
 800d620:	4603      	mov	r3, r0
 800d622:	3301      	adds	r3, #1
 800d624:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	da02      	bge.n	800d638 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68fa      	ldr	r2, [r7, #12]
 800d636:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d63c:	2200      	movs	r2, #0
 800d63e:	69b9      	ldr	r1, [r7, #24]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff fded 	bl	800d220 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d646:	687a      	ldr	r2, [r7, #4]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3304      	adds	r3, #4
 800d64c:	69b9      	ldr	r1, [r7, #24]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fe26 	bl	800d2a0 <tcp_output_control_segment>
 800d654:	4603      	mov	r3, r0
 800d656:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d658:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	372c      	adds	r7, #44	; 0x2c
 800d660:	46bd      	mov	sp, r7
 800d662:	bd90      	pop	{r4, r7, pc}
 800d664:	080136dc 	.word	0x080136dc
 800d668:	08013ed4 	.word	0x08013ed4
 800d66c:	08013730 	.word	0x08013730

0800d670 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d678:	f7fa ff10 	bl	800849c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d67c:	4b0a      	ldr	r3, [pc, #40]	; (800d6a8 <tcpip_tcp_timer+0x38>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d103      	bne.n	800d68c <tcpip_tcp_timer+0x1c>
 800d684:	4b09      	ldr	r3, [pc, #36]	; (800d6ac <tcpip_tcp_timer+0x3c>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d005      	beq.n	800d698 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d68c:	2200      	movs	r2, #0
 800d68e:	4908      	ldr	r1, [pc, #32]	; (800d6b0 <tcpip_tcp_timer+0x40>)
 800d690:	20fa      	movs	r0, #250	; 0xfa
 800d692:	f000 f8f3 	bl	800d87c <sys_timeout>
 800d696:	e003      	b.n	800d6a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d698:	4b06      	ldr	r3, [pc, #24]	; (800d6b4 <tcpip_tcp_timer+0x44>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	601a      	str	r2, [r3, #0]
  }
}
 800d69e:	bf00      	nop
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	20008b70 	.word	0x20008b70
 800d6ac:	20008b80 	.word	0x20008b80
 800d6b0:	0800d671 	.word	0x0800d671
 800d6b4:	20000170 	.word	0x20000170

0800d6b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d6bc:	4b0a      	ldr	r3, [pc, #40]	; (800d6e8 <tcp_timer_needed+0x30>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10f      	bne.n	800d6e4 <tcp_timer_needed+0x2c>
 800d6c4:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <tcp_timer_needed+0x34>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d103      	bne.n	800d6d4 <tcp_timer_needed+0x1c>
 800d6cc:	4b08      	ldr	r3, [pc, #32]	; (800d6f0 <tcp_timer_needed+0x38>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d007      	beq.n	800d6e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d6d4:	4b04      	ldr	r3, [pc, #16]	; (800d6e8 <tcp_timer_needed+0x30>)
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d6da:	2200      	movs	r2, #0
 800d6dc:	4905      	ldr	r1, [pc, #20]	; (800d6f4 <tcp_timer_needed+0x3c>)
 800d6de:	20fa      	movs	r0, #250	; 0xfa
 800d6e0:	f000 f8cc 	bl	800d87c <sys_timeout>
  }
}
 800d6e4:	bf00      	nop
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	20000170 	.word	0x20000170
 800d6ec:	20008b70 	.word	0x20008b70
 800d6f0:	20008b80 	.word	0x20008b80
 800d6f4:	0800d671 	.word	0x0800d671

0800d6f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d704:	2006      	movs	r0, #6
 800d706:	f7f9 fcf1 	bl	80070ec <memp_malloc>
 800d70a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d109      	bne.n	800d726 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d151      	bne.n	800d7bc <sys_timeout_abs+0xc4>
 800d718:	4b2a      	ldr	r3, [pc, #168]	; (800d7c4 <sys_timeout_abs+0xcc>)
 800d71a:	22be      	movs	r2, #190	; 0xbe
 800d71c:	492a      	ldr	r1, [pc, #168]	; (800d7c8 <sys_timeout_abs+0xd0>)
 800d71e:	482b      	ldr	r0, [pc, #172]	; (800d7cc <sys_timeout_abs+0xd4>)
 800d720:	f003 fd12 	bl	8011148 <iprintf>
    return;
 800d724:	e04a      	b.n	800d7bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d73e:	4b24      	ldr	r3, [pc, #144]	; (800d7d0 <sys_timeout_abs+0xd8>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d746:	4a22      	ldr	r2, [pc, #136]	; (800d7d0 <sys_timeout_abs+0xd8>)
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	6013      	str	r3, [r2, #0]
    return;
 800d74c:	e037      	b.n	800d7be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	685a      	ldr	r2, [r3, #4]
 800d752:	4b1f      	ldr	r3, [pc, #124]	; (800d7d0 <sys_timeout_abs+0xd8>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	0fdb      	lsrs	r3, r3, #31
 800d75c:	f003 0301 	and.w	r3, r3, #1
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d007      	beq.n	800d776 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d766:	4b1a      	ldr	r3, [pc, #104]	; (800d7d0 <sys_timeout_abs+0xd8>)
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d76e:	4a18      	ldr	r2, [pc, #96]	; (800d7d0 <sys_timeout_abs+0xd8>)
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	e023      	b.n	800d7be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d776:	4b16      	ldr	r3, [pc, #88]	; (800d7d0 <sys_timeout_abs+0xd8>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	617b      	str	r3, [r7, #20]
 800d77c:	e01a      	b.n	800d7b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00b      	beq.n	800d79e <sys_timeout_abs+0xa6>
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	0fdb      	lsrs	r3, r3, #31
 800d794:	f003 0301 	and.w	r3, r3, #1
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d007      	beq.n	800d7ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	601a      	str	r2, [r3, #0]
        break;
 800d7ac:	e007      	b.n	800d7be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	617b      	str	r3, [r7, #20]
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e1      	bne.n	800d77e <sys_timeout_abs+0x86>
 800d7ba:	e000      	b.n	800d7be <sys_timeout_abs+0xc6>
    return;
 800d7bc:	bf00      	nop
      }
    }
  }
}
 800d7be:	3718      	adds	r7, #24
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	08013ef8 	.word	0x08013ef8
 800d7c8:	08013f2c 	.word	0x08013f2c
 800d7cc:	08013f6c 	.word	0x08013f6c
 800d7d0:	20000168 	.word	0x20000168

0800d7d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	4798      	blx	r3

  now = sys_now();
 800d7e6:	f7f8 ff9d 	bl	8006724 <sys_now>
 800d7ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	4b0f      	ldr	r3, [pc, #60]	; (800d830 <lwip_cyclic_timer+0x5c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	0fdb      	lsrs	r3, r3, #31
 800d800:	f003 0301 	and.w	r3, r3, #1
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	4413      	add	r3, r2
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	4907      	ldr	r1, [pc, #28]	; (800d834 <lwip_cyclic_timer+0x60>)
 800d816:	4618      	mov	r0, r3
 800d818:	f7ff ff6e 	bl	800d6f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d81c:	e004      	b.n	800d828 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	4904      	ldr	r1, [pc, #16]	; (800d834 <lwip_cyclic_timer+0x60>)
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f7ff ff68 	bl	800d6f8 <sys_timeout_abs>
}
 800d828:	bf00      	nop
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	2000016c 	.word	0x2000016c
 800d834:	0800d7d5 	.word	0x0800d7d5

0800d838 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d83e:	2301      	movs	r3, #1
 800d840:	607b      	str	r3, [r7, #4]
 800d842:	e00e      	b.n	800d862 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d844:	4a0b      	ldr	r2, [pc, #44]	; (800d874 <sys_timeouts_init+0x3c>)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	00db      	lsls	r3, r3, #3
 800d850:	4a08      	ldr	r2, [pc, #32]	; (800d874 <sys_timeouts_init+0x3c>)
 800d852:	4413      	add	r3, r2
 800d854:	461a      	mov	r2, r3
 800d856:	4908      	ldr	r1, [pc, #32]	; (800d878 <sys_timeouts_init+0x40>)
 800d858:	f000 f810 	bl	800d87c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	3301      	adds	r3, #1
 800d860:	607b      	str	r3, [r7, #4]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b02      	cmp	r3, #2
 800d866:	d9ed      	bls.n	800d844 <sys_timeouts_init+0xc>
  }
}
 800d868:	bf00      	nop
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	08014ae8 	.word	0x08014ae8
 800d878:	0800d7d5 	.word	0x0800d7d5

0800d87c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d88e:	d306      	bcc.n	800d89e <sys_timeout+0x22>
 800d890:	4b0a      	ldr	r3, [pc, #40]	; (800d8bc <sys_timeout+0x40>)
 800d892:	f240 1229 	movw	r2, #297	; 0x129
 800d896:	490a      	ldr	r1, [pc, #40]	; (800d8c0 <sys_timeout+0x44>)
 800d898:	480a      	ldr	r0, [pc, #40]	; (800d8c4 <sys_timeout+0x48>)
 800d89a:	f003 fc55 	bl	8011148 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d89e:	f7f8 ff41 	bl	8006724 <sys_now>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	68b9      	ldr	r1, [r7, #8]
 800d8ae:	6978      	ldr	r0, [r7, #20]
 800d8b0:	f7ff ff22 	bl	800d6f8 <sys_timeout_abs>
#endif
}
 800d8b4:	bf00      	nop
 800d8b6:	3718      	adds	r7, #24
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	08013ef8 	.word	0x08013ef8
 800d8c0:	08013f94 	.word	0x08013f94
 800d8c4:	08013f6c 	.word	0x08013f6c

0800d8c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d8ce:	f7f8 ff29 	bl	8006724 <sys_now>
 800d8d2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d8d4:	4b1a      	ldr	r3, [pc, #104]	; (800d940 <sys_check_timeouts+0x78>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d001      	beq.n	800d8e2 <sys_check_timeouts+0x1a>
 800d8de:	f7f9 ff29 	bl	8007734 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d8e2:	4b18      	ldr	r3, [pc, #96]	; (800d944 <sys_check_timeouts+0x7c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d022      	beq.n	800d934 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	68fa      	ldr	r2, [r7, #12]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	0fdb      	lsrs	r3, r3, #31
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d11a      	bne.n	800d938 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a0f      	ldr	r2, [pc, #60]	; (800d944 <sys_check_timeouts+0x7c>)
 800d908:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	689b      	ldr	r3, [r3, #8]
 800d90e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	4a0b      	ldr	r2, [pc, #44]	; (800d948 <sys_check_timeouts+0x80>)
 800d91c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d91e:	68b9      	ldr	r1, [r7, #8]
 800d920:	2006      	movs	r0, #6
 800d922:	f7f9 fc2f 	bl	8007184 <memp_free>
    if (handler != NULL) {
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d0d3      	beq.n	800d8d4 <sys_check_timeouts+0xc>
      handler(arg);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6838      	ldr	r0, [r7, #0]
 800d930:	4798      	blx	r3
  do {
 800d932:	e7cf      	b.n	800d8d4 <sys_check_timeouts+0xc>
      return;
 800d934:	bf00      	nop
 800d936:	e000      	b.n	800d93a <sys_check_timeouts+0x72>
      return;
 800d938:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20008b68 	.word	0x20008b68
 800d944:	20000168 	.word	0x20000168
 800d948:	2000016c 	.word	0x2000016c

0800d94c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d950:	f003 fc12 	bl	8011178 <rand>
 800d954:	4603      	mov	r3, r0
 800d956:	b29b      	uxth	r3, r3
 800d958:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d962:	b29a      	uxth	r2, r3
 800d964:	4b01      	ldr	r3, [pc, #4]	; (800d96c <udp_init+0x20>)
 800d966:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d968:	bf00      	nop
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	20000030 	.word	0x20000030

0800d970 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d97a:	4b17      	ldr	r3, [pc, #92]	; (800d9d8 <udp_new_port+0x68>)
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	b291      	uxth	r1, r2
 800d982:	4a15      	ldr	r2, [pc, #84]	; (800d9d8 <udp_new_port+0x68>)
 800d984:	8011      	strh	r1, [r2, #0]
 800d986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d103      	bne.n	800d996 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d98e:	4b12      	ldr	r3, [pc, #72]	; (800d9d8 <udp_new_port+0x68>)
 800d990:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d994:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d996:	4b11      	ldr	r3, [pc, #68]	; (800d9dc <udp_new_port+0x6c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	603b      	str	r3, [r7, #0]
 800d99c:	e011      	b.n	800d9c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	8a5a      	ldrh	r2, [r3, #18]
 800d9a2:	4b0d      	ldr	r3, [pc, #52]	; (800d9d8 <udp_new_port+0x68>)
 800d9a4:	881b      	ldrh	r3, [r3, #0]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d108      	bne.n	800d9bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d9aa:	88fb      	ldrh	r3, [r7, #6]
 800d9ac:	3301      	adds	r3, #1
 800d9ae:	80fb      	strh	r3, [r7, #6]
 800d9b0:	88fb      	ldrh	r3, [r7, #6]
 800d9b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9b6:	d3e0      	bcc.n	800d97a <udp_new_port+0xa>
        return 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e007      	b.n	800d9cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	603b      	str	r3, [r7, #0]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d1ea      	bne.n	800d99e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d9c8:	4b03      	ldr	r3, [pc, #12]	; (800d9d8 <udp_new_port+0x68>)
 800d9ca:	881b      	ldrh	r3, [r3, #0]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	370c      	adds	r7, #12
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr
 800d9d8:	20000030 	.word	0x20000030
 800d9dc:	20008b88 	.word	0x20008b88

0800d9e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d105      	bne.n	800da00 <udp_input_local_match+0x20>
 800d9f4:	4b27      	ldr	r3, [pc, #156]	; (800da94 <udp_input_local_match+0xb4>)
 800d9f6:	2287      	movs	r2, #135	; 0x87
 800d9f8:	4927      	ldr	r1, [pc, #156]	; (800da98 <udp_input_local_match+0xb8>)
 800d9fa:	4828      	ldr	r0, [pc, #160]	; (800da9c <udp_input_local_match+0xbc>)
 800d9fc:	f003 fba4 	bl	8011148 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d105      	bne.n	800da12 <udp_input_local_match+0x32>
 800da06:	4b23      	ldr	r3, [pc, #140]	; (800da94 <udp_input_local_match+0xb4>)
 800da08:	2288      	movs	r2, #136	; 0x88
 800da0a:	4925      	ldr	r1, [pc, #148]	; (800daa0 <udp_input_local_match+0xc0>)
 800da0c:	4823      	ldr	r0, [pc, #140]	; (800da9c <udp_input_local_match+0xbc>)
 800da0e:	f003 fb9b 	bl	8011148 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	7a1b      	ldrb	r3, [r3, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00b      	beq.n	800da32 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	7a1a      	ldrb	r2, [r3, #8]
 800da1e:	4b21      	ldr	r3, [pc, #132]	; (800daa4 <udp_input_local_match+0xc4>)
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da26:	3301      	adds	r3, #1
 800da28:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d001      	beq.n	800da32 <udp_input_local_match+0x52>
    return 0;
 800da2e:	2300      	movs	r3, #0
 800da30:	e02b      	b.n	800da8a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800da32:	79fb      	ldrb	r3, [r7, #7]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d018      	beq.n	800da6a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d013      	beq.n	800da66 <udp_input_local_match+0x86>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00f      	beq.n	800da66 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800da46:	4b17      	ldr	r3, [pc, #92]	; (800daa4 <udp_input_local_match+0xc4>)
 800da48:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800da4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4e:	d00a      	beq.n	800da66 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <udp_input_local_match+0xc4>)
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	405a      	eors	r2, r3
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	3308      	adds	r3, #8
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800da62:	2b00      	cmp	r3, #0
 800da64:	d110      	bne.n	800da88 <udp_input_local_match+0xa8>
          return 1;
 800da66:	2301      	movs	r3, #1
 800da68:	e00f      	b.n	800da8a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d009      	beq.n	800da84 <udp_input_local_match+0xa4>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d005      	beq.n	800da84 <udp_input_local_match+0xa4>
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	4b09      	ldr	r3, [pc, #36]	; (800daa4 <udp_input_local_match+0xc4>)
 800da7e:	695b      	ldr	r3, [r3, #20]
 800da80:	429a      	cmp	r2, r3
 800da82:	d101      	bne.n	800da88 <udp_input_local_match+0xa8>
        return 1;
 800da84:	2301      	movs	r3, #1
 800da86:	e000      	b.n	800da8a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	08013fe0 	.word	0x08013fe0
 800da98:	08014010 	.word	0x08014010
 800da9c:	08014034 	.word	0x08014034
 800daa0:	0801405c 	.word	0x0801405c
 800daa4:	2000346c 	.word	0x2000346c

0800daa8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b08d      	sub	sp, #52	; 0x34
 800daac:	af02      	add	r7, sp, #8
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d105      	bne.n	800dac8 <udp_input+0x20>
 800dabc:	4b7c      	ldr	r3, [pc, #496]	; (800dcb0 <udp_input+0x208>)
 800dabe:	22cf      	movs	r2, #207	; 0xcf
 800dac0:	497c      	ldr	r1, [pc, #496]	; (800dcb4 <udp_input+0x20c>)
 800dac2:	487d      	ldr	r0, [pc, #500]	; (800dcb8 <udp_input+0x210>)
 800dac4:	f003 fb40 	bl	8011148 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d105      	bne.n	800dada <udp_input+0x32>
 800dace:	4b78      	ldr	r3, [pc, #480]	; (800dcb0 <udp_input+0x208>)
 800dad0:	22d0      	movs	r2, #208	; 0xd0
 800dad2:	497a      	ldr	r1, [pc, #488]	; (800dcbc <udp_input+0x214>)
 800dad4:	4878      	ldr	r0, [pc, #480]	; (800dcb8 <udp_input+0x210>)
 800dad6:	f003 fb37 	bl	8011148 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	895b      	ldrh	r3, [r3, #10]
 800dade:	2b07      	cmp	r3, #7
 800dae0:	d803      	bhi.n	800daea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7fa f960 	bl	8007da8 <pbuf_free>
    goto end;
 800dae8:	e0de      	b.n	800dca8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800daf0:	4b73      	ldr	r3, [pc, #460]	; (800dcc0 <udp_input+0x218>)
 800daf2:	695b      	ldr	r3, [r3, #20]
 800daf4:	4a72      	ldr	r2, [pc, #456]	; (800dcc0 <udp_input+0x218>)
 800daf6:	6812      	ldr	r2, [r2, #0]
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f001 ff9e 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800db00:	4603      	mov	r3, r0
 800db02:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	881b      	ldrh	r3, [r3, #0]
 800db08:	b29b      	uxth	r3, r3
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7f8 fe98 	bl	8006840 <lwip_htons>
 800db10:	4603      	mov	r3, r0
 800db12:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	885b      	ldrh	r3, [r3, #2]
 800db18:	b29b      	uxth	r3, r3
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f8 fe90 	bl	8006840 <lwip_htons>
 800db20:	4603      	mov	r3, r0
 800db22:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800db24:	2300      	movs	r3, #0
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800db28:	2300      	movs	r3, #0
 800db2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800db2c:	2300      	movs	r3, #0
 800db2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db30:	4b64      	ldr	r3, [pc, #400]	; (800dcc4 <udp_input+0x21c>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	627b      	str	r3, [r7, #36]	; 0x24
 800db36:	e054      	b.n	800dbe2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	8a5b      	ldrh	r3, [r3, #18]
 800db3c:	89fa      	ldrh	r2, [r7, #14]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d14a      	bne.n	800dbd8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800db42:	7cfb      	ldrb	r3, [r7, #19]
 800db44:	461a      	mov	r2, r3
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db4a:	f7ff ff49 	bl	800d9e0 <udp_input_local_match>
 800db4e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800db50:	2b00      	cmp	r3, #0
 800db52:	d041      	beq.n	800dbd8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	7c1b      	ldrb	r3, [r3, #16]
 800db58:	f003 0304 	and.w	r3, r3, #4
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d11d      	bne.n	800db9c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d102      	bne.n	800db6c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	61fb      	str	r3, [r7, #28]
 800db6a:	e017      	b.n	800db9c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800db6c:	7cfb      	ldrb	r3, [r7, #19]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d014      	beq.n	800db9c <udp_input+0xf4>
 800db72:	4b53      	ldr	r3, [pc, #332]	; (800dcc0 <udp_input+0x218>)
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7a:	d10f      	bne.n	800db9c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	3304      	adds	r3, #4
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d008      	beq.n	800db9c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	3304      	adds	r3, #4
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	429a      	cmp	r2, r3
 800db96:	d101      	bne.n	800db9c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	8a9b      	ldrh	r3, [r3, #20]
 800dba0:	8a3a      	ldrh	r2, [r7, #16]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d118      	bne.n	800dbd8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d005      	beq.n	800dbba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	4b43      	ldr	r3, [pc, #268]	; (800dcc0 <udp_input+0x218>)
 800dbb4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d10e      	bne.n	800dbd8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d014      	beq.n	800dbea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800dbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc2:	68da      	ldr	r2, [r3, #12]
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800dbc8:	4b3e      	ldr	r3, [pc, #248]	; (800dcc4 <udp_input+0x21c>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800dbd0:	4a3c      	ldr	r2, [pc, #240]	; (800dcc4 <udp_input+0x21c>)
 800dbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800dbd6:	e008      	b.n	800dbea <udp_input+0x142>
      }
    }

    prev = pcb;
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1a7      	bne.n	800db38 <udp_input+0x90>
 800dbe8:	e000      	b.n	800dbec <udp_input+0x144>
        break;
 800dbea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d101      	bne.n	800dbf6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d002      	beq.n	800dc02 <udp_input+0x15a>
    for_us = 1;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	76fb      	strb	r3, [r7, #27]
 800dc00:	e00a      	b.n	800dc18 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	3304      	adds	r3, #4
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	4b2d      	ldr	r3, [pc, #180]	; (800dcc0 <udp_input+0x218>)
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	bf0c      	ite	eq
 800dc10:	2301      	moveq	r3, #1
 800dc12:	2300      	movne	r3, #0
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dc18:	7efb      	ldrb	r3, [r7, #27]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d041      	beq.n	800dca2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dc1e:	2108      	movs	r1, #8
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7fa f83b 	bl	8007c9c <pbuf_remove_header>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00a      	beq.n	800dc42 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dc2c:	4b20      	ldr	r3, [pc, #128]	; (800dcb0 <udp_input+0x208>)
 800dc2e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dc32:	4925      	ldr	r1, [pc, #148]	; (800dcc8 <udp_input+0x220>)
 800dc34:	4820      	ldr	r0, [pc, #128]	; (800dcb8 <udp_input+0x210>)
 800dc36:	f003 fa87 	bl	8011148 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7fa f8b4 	bl	8007da8 <pbuf_free>
      goto end;
 800dc40:	e032      	b.n	800dca8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d012      	beq.n	800dc6e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d00a      	beq.n	800dc66 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	699c      	ldr	r4, [r3, #24]
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	69d8      	ldr	r0, [r3, #28]
 800dc58:	8a3b      	ldrh	r3, [r7, #16]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	4b1b      	ldr	r3, [pc, #108]	; (800dccc <udp_input+0x224>)
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dc64:	e021      	b.n	800dcaa <udp_input+0x202>
        pbuf_free(p);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7fa f89e 	bl	8007da8 <pbuf_free>
        goto end;
 800dc6c:	e01c      	b.n	800dca8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dc6e:	7cfb      	ldrb	r3, [r7, #19]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d112      	bne.n	800dc9a <udp_input+0x1f2>
 800dc74:	4b12      	ldr	r3, [pc, #72]	; (800dcc0 <udp_input+0x218>)
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc7c:	2be0      	cmp	r3, #224	; 0xe0
 800dc7e:	d00c      	beq.n	800dc9a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dc80:	4b0f      	ldr	r3, [pc, #60]	; (800dcc0 <udp_input+0x218>)
 800dc82:	899b      	ldrh	r3, [r3, #12]
 800dc84:	3308      	adds	r3, #8
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	b21b      	sxth	r3, r3
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7fa f878 	bl	8007d82 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dc92:	2103      	movs	r1, #3
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 fbb1 	bl	800f3fc <icmp_dest_unreach>
      pbuf_free(p);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f7fa f884 	bl	8007da8 <pbuf_free>
  return;
 800dca0:	e003      	b.n	800dcaa <udp_input+0x202>
    pbuf_free(p);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7fa f880 	bl	8007da8 <pbuf_free>
  return;
 800dca8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dcaa:	372c      	adds	r7, #44	; 0x2c
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd90      	pop	{r4, r7, pc}
 800dcb0:	08013fe0 	.word	0x08013fe0
 800dcb4:	08014084 	.word	0x08014084
 800dcb8:	08014034 	.word	0x08014034
 800dcbc:	0801409c 	.word	0x0801409c
 800dcc0:	2000346c 	.word	0x2000346c
 800dcc4:	20008b88 	.word	0x20008b88
 800dcc8:	080140b8 	.word	0x080140b8
 800dccc:	2000347c 	.word	0x2000347c

0800dcd0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d109      	bne.n	800dcf4 <udp_send+0x24>
 800dce0:	4b11      	ldr	r3, [pc, #68]	; (800dd28 <udp_send+0x58>)
 800dce2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800dce6:	4911      	ldr	r1, [pc, #68]	; (800dd2c <udp_send+0x5c>)
 800dce8:	4811      	ldr	r0, [pc, #68]	; (800dd30 <udp_send+0x60>)
 800dcea:	f003 fa2d 	bl	8011148 <iprintf>
 800dcee:	f06f 030f 	mvn.w	r3, #15
 800dcf2:	e015      	b.n	800dd20 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d109      	bne.n	800dd0e <udp_send+0x3e>
 800dcfa:	4b0b      	ldr	r3, [pc, #44]	; (800dd28 <udp_send+0x58>)
 800dcfc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800dd00:	490c      	ldr	r1, [pc, #48]	; (800dd34 <udp_send+0x64>)
 800dd02:	480b      	ldr	r0, [pc, #44]	; (800dd30 <udp_send+0x60>)
 800dd04:	f003 fa20 	bl	8011148 <iprintf>
 800dd08:	f06f 030f 	mvn.w	r3, #15
 800dd0c:	e008      	b.n	800dd20 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	1d1a      	adds	r2, r3, #4
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	8a9b      	ldrh	r3, [r3, #20]
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f80d 	bl	800dd38 <udp_sendto>
 800dd1e:	4603      	mov	r3, r0
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	08013fe0 	.word	0x08013fe0
 800dd2c:	080140d4 	.word	0x080140d4
 800dd30:	08014034 	.word	0x08014034
 800dd34:	080140ec 	.word	0x080140ec

0800dd38 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b088      	sub	sp, #32
 800dd3c:	af02      	add	r7, sp, #8
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
 800dd44:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d109      	bne.n	800dd60 <udp_sendto+0x28>
 800dd4c:	4b23      	ldr	r3, [pc, #140]	; (800dddc <udp_sendto+0xa4>)
 800dd4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dd52:	4923      	ldr	r1, [pc, #140]	; (800dde0 <udp_sendto+0xa8>)
 800dd54:	4823      	ldr	r0, [pc, #140]	; (800dde4 <udp_sendto+0xac>)
 800dd56:	f003 f9f7 	bl	8011148 <iprintf>
 800dd5a:	f06f 030f 	mvn.w	r3, #15
 800dd5e:	e038      	b.n	800ddd2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d109      	bne.n	800dd7a <udp_sendto+0x42>
 800dd66:	4b1d      	ldr	r3, [pc, #116]	; (800dddc <udp_sendto+0xa4>)
 800dd68:	f240 2219 	movw	r2, #537	; 0x219
 800dd6c:	491e      	ldr	r1, [pc, #120]	; (800dde8 <udp_sendto+0xb0>)
 800dd6e:	481d      	ldr	r0, [pc, #116]	; (800dde4 <udp_sendto+0xac>)
 800dd70:	f003 f9ea 	bl	8011148 <iprintf>
 800dd74:	f06f 030f 	mvn.w	r3, #15
 800dd78:	e02b      	b.n	800ddd2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d109      	bne.n	800dd94 <udp_sendto+0x5c>
 800dd80:	4b16      	ldr	r3, [pc, #88]	; (800dddc <udp_sendto+0xa4>)
 800dd82:	f240 221a 	movw	r2, #538	; 0x21a
 800dd86:	4919      	ldr	r1, [pc, #100]	; (800ddec <udp_sendto+0xb4>)
 800dd88:	4816      	ldr	r0, [pc, #88]	; (800dde4 <udp_sendto+0xac>)
 800dd8a:	f003 f9dd 	bl	8011148 <iprintf>
 800dd8e:	f06f 030f 	mvn.w	r3, #15
 800dd92:	e01e      	b.n	800ddd2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	7a1b      	ldrb	r3, [r3, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d006      	beq.n	800ddaa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	7a1b      	ldrb	r3, [r3, #8]
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7f9 fca1 	bl	80076e8 <netif_get_by_index>
 800dda6:	6178      	str	r0, [r7, #20]
 800dda8:	e003      	b.n	800ddb2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f001 fbb0 	bl	800f510 <ip4_route>
 800ddb0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d102      	bne.n	800ddbe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ddb8:	f06f 0303 	mvn.w	r3, #3
 800ddbc:	e009      	b.n	800ddd2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ddbe:	887a      	ldrh	r2, [r7, #2]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	68b9      	ldr	r1, [r7, #8]
 800ddca:	68f8      	ldr	r0, [r7, #12]
 800ddcc:	f000 f810 	bl	800ddf0 <udp_sendto_if>
 800ddd0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3718      	adds	r7, #24
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	08013fe0 	.word	0x08013fe0
 800dde0:	08014104 	.word	0x08014104
 800dde4:	08014034 	.word	0x08014034
 800dde8:	0801411c 	.word	0x0801411c
 800ddec:	08014138 	.word	0x08014138

0800ddf0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b088      	sub	sp, #32
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
 800ddfc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d109      	bne.n	800de18 <udp_sendto_if+0x28>
 800de04:	4b2e      	ldr	r3, [pc, #184]	; (800dec0 <udp_sendto_if+0xd0>)
 800de06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de0a:	492e      	ldr	r1, [pc, #184]	; (800dec4 <udp_sendto_if+0xd4>)
 800de0c:	482e      	ldr	r0, [pc, #184]	; (800dec8 <udp_sendto_if+0xd8>)
 800de0e:	f003 f99b 	bl	8011148 <iprintf>
 800de12:	f06f 030f 	mvn.w	r3, #15
 800de16:	e04f      	b.n	800deb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d109      	bne.n	800de32 <udp_sendto_if+0x42>
 800de1e:	4b28      	ldr	r3, [pc, #160]	; (800dec0 <udp_sendto_if+0xd0>)
 800de20:	f240 2281 	movw	r2, #641	; 0x281
 800de24:	4929      	ldr	r1, [pc, #164]	; (800decc <udp_sendto_if+0xdc>)
 800de26:	4828      	ldr	r0, [pc, #160]	; (800dec8 <udp_sendto_if+0xd8>)
 800de28:	f003 f98e 	bl	8011148 <iprintf>
 800de2c:	f06f 030f 	mvn.w	r3, #15
 800de30:	e042      	b.n	800deb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d109      	bne.n	800de4c <udp_sendto_if+0x5c>
 800de38:	4b21      	ldr	r3, [pc, #132]	; (800dec0 <udp_sendto_if+0xd0>)
 800de3a:	f240 2282 	movw	r2, #642	; 0x282
 800de3e:	4924      	ldr	r1, [pc, #144]	; (800ded0 <udp_sendto_if+0xe0>)
 800de40:	4821      	ldr	r0, [pc, #132]	; (800dec8 <udp_sendto_if+0xd8>)
 800de42:	f003 f981 	bl	8011148 <iprintf>
 800de46:	f06f 030f 	mvn.w	r3, #15
 800de4a:	e035      	b.n	800deb8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800de4c:	6a3b      	ldr	r3, [r7, #32]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d109      	bne.n	800de66 <udp_sendto_if+0x76>
 800de52:	4b1b      	ldr	r3, [pc, #108]	; (800dec0 <udp_sendto_if+0xd0>)
 800de54:	f240 2283 	movw	r2, #643	; 0x283
 800de58:	491e      	ldr	r1, [pc, #120]	; (800ded4 <udp_sendto_if+0xe4>)
 800de5a:	481b      	ldr	r0, [pc, #108]	; (800dec8 <udp_sendto_if+0xd8>)
 800de5c:	f003 f974 	bl	8011148 <iprintf>
 800de60:	f06f 030f 	mvn.w	r3, #15
 800de64:	e028      	b.n	800deb8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d009      	beq.n	800de80 <udp_sendto_if+0x90>
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d005      	beq.n	800de80 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800de7c:	2be0      	cmp	r3, #224	; 0xe0
 800de7e:	d103      	bne.n	800de88 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800de80:	6a3b      	ldr	r3, [r7, #32]
 800de82:	3304      	adds	r3, #4
 800de84:	617b      	str	r3, [r7, #20]
 800de86:	e00b      	b.n	800dea0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	6a3b      	ldr	r3, [r7, #32]
 800de8e:	3304      	adds	r3, #4
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	429a      	cmp	r2, r3
 800de94:	d002      	beq.n	800de9c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800de96:	f06f 0303 	mvn.w	r3, #3
 800de9a:	e00d      	b.n	800deb8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800dea0:	887a      	ldrh	r2, [r7, #2]
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	9301      	str	r3, [sp, #4]
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	4613      	mov	r3, r2
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	68b9      	ldr	r1, [r7, #8]
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 f811 	bl	800ded8 <udp_sendto_if_src>
 800deb6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3718      	adds	r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	08013fe0 	.word	0x08013fe0
 800dec4:	08014154 	.word	0x08014154
 800dec8:	08014034 	.word	0x08014034
 800decc:	08014170 	.word	0x08014170
 800ded0:	0801418c 	.word	0x0801418c
 800ded4:	080141ac 	.word	0x080141ac

0800ded8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08c      	sub	sp, #48	; 0x30
 800dedc:	af04      	add	r7, sp, #16
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d109      	bne.n	800df00 <udp_sendto_if_src+0x28>
 800deec:	4b65      	ldr	r3, [pc, #404]	; (800e084 <udp_sendto_if_src+0x1ac>)
 800deee:	f240 22d1 	movw	r2, #721	; 0x2d1
 800def2:	4965      	ldr	r1, [pc, #404]	; (800e088 <udp_sendto_if_src+0x1b0>)
 800def4:	4865      	ldr	r0, [pc, #404]	; (800e08c <udp_sendto_if_src+0x1b4>)
 800def6:	f003 f927 	bl	8011148 <iprintf>
 800defa:	f06f 030f 	mvn.w	r3, #15
 800defe:	e0bc      	b.n	800e07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d109      	bne.n	800df1a <udp_sendto_if_src+0x42>
 800df06:	4b5f      	ldr	r3, [pc, #380]	; (800e084 <udp_sendto_if_src+0x1ac>)
 800df08:	f240 22d2 	movw	r2, #722	; 0x2d2
 800df0c:	4960      	ldr	r1, [pc, #384]	; (800e090 <udp_sendto_if_src+0x1b8>)
 800df0e:	485f      	ldr	r0, [pc, #380]	; (800e08c <udp_sendto_if_src+0x1b4>)
 800df10:	f003 f91a 	bl	8011148 <iprintf>
 800df14:	f06f 030f 	mvn.w	r3, #15
 800df18:	e0af      	b.n	800e07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d109      	bne.n	800df34 <udp_sendto_if_src+0x5c>
 800df20:	4b58      	ldr	r3, [pc, #352]	; (800e084 <udp_sendto_if_src+0x1ac>)
 800df22:	f240 22d3 	movw	r2, #723	; 0x2d3
 800df26:	495b      	ldr	r1, [pc, #364]	; (800e094 <udp_sendto_if_src+0x1bc>)
 800df28:	4858      	ldr	r0, [pc, #352]	; (800e08c <udp_sendto_if_src+0x1b4>)
 800df2a:	f003 f90d 	bl	8011148 <iprintf>
 800df2e:	f06f 030f 	mvn.w	r3, #15
 800df32:	e0a2      	b.n	800e07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	2b00      	cmp	r3, #0
 800df38:	d109      	bne.n	800df4e <udp_sendto_if_src+0x76>
 800df3a:	4b52      	ldr	r3, [pc, #328]	; (800e084 <udp_sendto_if_src+0x1ac>)
 800df3c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800df40:	4955      	ldr	r1, [pc, #340]	; (800e098 <udp_sendto_if_src+0x1c0>)
 800df42:	4852      	ldr	r0, [pc, #328]	; (800e08c <udp_sendto_if_src+0x1b4>)
 800df44:	f003 f900 	bl	8011148 <iprintf>
 800df48:	f06f 030f 	mvn.w	r3, #15
 800df4c:	e095      	b.n	800e07a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	2b00      	cmp	r3, #0
 800df52:	d109      	bne.n	800df68 <udp_sendto_if_src+0x90>
 800df54:	4b4b      	ldr	r3, [pc, #300]	; (800e084 <udp_sendto_if_src+0x1ac>)
 800df56:	f240 22d5 	movw	r2, #725	; 0x2d5
 800df5a:	4950      	ldr	r1, [pc, #320]	; (800e09c <udp_sendto_if_src+0x1c4>)
 800df5c:	484b      	ldr	r0, [pc, #300]	; (800e08c <udp_sendto_if_src+0x1b4>)
 800df5e:	f003 f8f3 	bl	8011148 <iprintf>
 800df62:	f06f 030f 	mvn.w	r3, #15
 800df66:	e088      	b.n	800e07a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	8a5b      	ldrh	r3, [r3, #18]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d10f      	bne.n	800df90 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800df70:	68f9      	ldr	r1, [r7, #12]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	8a5b      	ldrh	r3, [r3, #18]
 800df76:	461a      	mov	r2, r3
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f000 f893 	bl	800e0a4 <udp_bind>
 800df7e:	4603      	mov	r3, r0
 800df80:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800df82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d002      	beq.n	800df90 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800df8a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800df8e:	e074      	b.n	800e07a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	891b      	ldrh	r3, [r3, #8]
 800df94:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800df98:	4293      	cmp	r3, r2
 800df9a:	d902      	bls.n	800dfa2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800df9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dfa0:	e06b      	b.n	800e07a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800dfa2:	2108      	movs	r1, #8
 800dfa4:	68b8      	ldr	r0, [r7, #8]
 800dfa6:	f7f9 fe69 	bl	8007c7c <pbuf_add_header>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d015      	beq.n	800dfdc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800dfb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfb4:	2108      	movs	r1, #8
 800dfb6:	2022      	movs	r0, #34	; 0x22
 800dfb8:	f7f9 fc12 	bl	80077e0 <pbuf_alloc>
 800dfbc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d102      	bne.n	800dfca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800dfc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc8:	e057      	b.n	800e07a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	891b      	ldrh	r3, [r3, #8]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d006      	beq.n	800dfe0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800dfd2:	68b9      	ldr	r1, [r7, #8]
 800dfd4:	69f8      	ldr	r0, [r7, #28]
 800dfd6:	f7f9 ffff 	bl	8007fd8 <pbuf_chain>
 800dfda:	e001      	b.n	800dfe0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	895b      	ldrh	r3, [r3, #10]
 800dfe4:	2b07      	cmp	r3, #7
 800dfe6:	d806      	bhi.n	800dff6 <udp_sendto_if_src+0x11e>
 800dfe8:	4b26      	ldr	r3, [pc, #152]	; (800e084 <udp_sendto_if_src+0x1ac>)
 800dfea:	f240 320d 	movw	r2, #781	; 0x30d
 800dfee:	492c      	ldr	r1, [pc, #176]	; (800e0a0 <udp_sendto_if_src+0x1c8>)
 800dff0:	4826      	ldr	r0, [pc, #152]	; (800e08c <udp_sendto_if_src+0x1b4>)
 800dff2:	f003 f8a9 	bl	8011148 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	8a5b      	ldrh	r3, [r3, #18]
 800e000:	4618      	mov	r0, r3
 800e002:	f7f8 fc1d 	bl	8006840 <lwip_htons>
 800e006:	4603      	mov	r3, r0
 800e008:	461a      	mov	r2, r3
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800e00e:	887b      	ldrh	r3, [r7, #2]
 800e010:	4618      	mov	r0, r3
 800e012:	f7f8 fc15 	bl	8006840 <lwip_htons>
 800e016:	4603      	mov	r3, r0
 800e018:	461a      	mov	r2, r3
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	2200      	movs	r2, #0
 800e022:	719a      	strb	r2, [r3, #6]
 800e024:	2200      	movs	r2, #0
 800e026:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	891b      	ldrh	r3, [r3, #8]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f8 fc07 	bl	8006840 <lwip_htons>
 800e032:	4603      	mov	r3, r0
 800e034:	461a      	mov	r2, r3
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800e03a:	2311      	movs	r3, #17
 800e03c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	7adb      	ldrb	r3, [r3, #11]
 800e042:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	7a9b      	ldrb	r3, [r3, #10]
 800e048:	7cb9      	ldrb	r1, [r7, #18]
 800e04a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e04c:	9202      	str	r2, [sp, #8]
 800e04e:	7cfa      	ldrb	r2, [r7, #19]
 800e050:	9201      	str	r2, [sp, #4]
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	460b      	mov	r3, r1
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e05a:	69f8      	ldr	r0, [r7, #28]
 800e05c:	f001 fc40 	bl	800f8e0 <ip4_output_if_src>
 800e060:	4603      	mov	r3, r0
 800e062:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800e064:	69fa      	ldr	r2, [r7, #28]
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d004      	beq.n	800e076 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800e06c:	69f8      	ldr	r0, [r7, #28]
 800e06e:	f7f9 fe9b 	bl	8007da8 <pbuf_free>
    q = NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800e076:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3720      	adds	r7, #32
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	08013fe0 	.word	0x08013fe0
 800e088:	080141cc 	.word	0x080141cc
 800e08c:	08014034 	.word	0x08014034
 800e090:	080141ec 	.word	0x080141ec
 800e094:	0801420c 	.word	0x0801420c
 800e098:	08014230 	.word	0x08014230
 800e09c:	08014254 	.word	0x08014254
 800e0a0:	08014278 	.word	0x08014278

0800e0a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800e0b8:	4b39      	ldr	r3, [pc, #228]	; (800e1a0 <udp_bind+0xfc>)
 800e0ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d109      	bne.n	800e0d6 <udp_bind+0x32>
 800e0c2:	4b38      	ldr	r3, [pc, #224]	; (800e1a4 <udp_bind+0x100>)
 800e0c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e0c8:	4937      	ldr	r1, [pc, #220]	; (800e1a8 <udp_bind+0x104>)
 800e0ca:	4838      	ldr	r0, [pc, #224]	; (800e1ac <udp_bind+0x108>)
 800e0cc:	f003 f83c 	bl	8011148 <iprintf>
 800e0d0:	f06f 030f 	mvn.w	r3, #15
 800e0d4:	e060      	b.n	800e198 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e0da:	4b35      	ldr	r3, [pc, #212]	; (800e1b0 <udp_bind+0x10c>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	e009      	b.n	800e0f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d102      	bne.n	800e0f0 <udp_bind+0x4c>
      rebind = 1;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	74fb      	strb	r3, [r7, #19]
      break;
 800e0ee:	e005      	b.n	800e0fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	617b      	str	r3, [r7, #20]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1f2      	bne.n	800e0e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800e0fc:	88fb      	ldrh	r3, [r7, #6]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d109      	bne.n	800e116 <udp_bind+0x72>
    port = udp_new_port();
 800e102:	f7ff fc35 	bl	800d970 <udp_new_port>
 800e106:	4603      	mov	r3, r0
 800e108:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e10a:	88fb      	ldrh	r3, [r7, #6]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d12c      	bne.n	800e16a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800e110:	f06f 0307 	mvn.w	r3, #7
 800e114:	e040      	b.n	800e198 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e116:	4b26      	ldr	r3, [pc, #152]	; (800e1b0 <udp_bind+0x10c>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	617b      	str	r3, [r7, #20]
 800e11c:	e022      	b.n	800e164 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800e11e:	68fa      	ldr	r2, [r7, #12]
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	429a      	cmp	r2, r3
 800e124:	d01b      	beq.n	800e15e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	8a5b      	ldrh	r3, [r3, #18]
 800e12a:	88fa      	ldrh	r2, [r7, #6]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d116      	bne.n	800e15e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e138:	429a      	cmp	r2, r3
 800e13a:	d00d      	beq.n	800e158 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00a      	beq.n	800e158 <udp_bind+0xb4>
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d006      	beq.n	800e158 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e14a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d003      	beq.n	800e158 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800e158:	f06f 0307 	mvn.w	r3, #7
 800e15c:	e01c      	b.n	800e198 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	617b      	str	r3, [r7, #20]
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1d9      	bne.n	800e11e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <udp_bind+0xd2>
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	e000      	b.n	800e178 <udp_bind+0xd4>
 800e176:	2300      	movs	r3, #0
 800e178:	68fa      	ldr	r2, [r7, #12]
 800e17a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	88fa      	ldrh	r2, [r7, #6]
 800e180:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e182:	7cfb      	ldrb	r3, [r7, #19]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e188:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <udp_bind+0x10c>)
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e190:	4a07      	ldr	r2, [pc, #28]	; (800e1b0 <udp_bind+0x10c>)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3718      	adds	r7, #24
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	08014b00 	.word	0x08014b00
 800e1a4:	08013fe0 	.word	0x08013fe0
 800e1a8:	080142a8 	.word	0x080142a8
 800e1ac:	08014034 	.word	0x08014034
 800e1b0:	20008b88 	.word	0x20008b88

0800e1b4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d109      	bne.n	800e1dc <udp_connect+0x28>
 800e1c8:	4b2c      	ldr	r3, [pc, #176]	; (800e27c <udp_connect+0xc8>)
 800e1ca:	f240 4235 	movw	r2, #1077	; 0x435
 800e1ce:	492c      	ldr	r1, [pc, #176]	; (800e280 <udp_connect+0xcc>)
 800e1d0:	482c      	ldr	r0, [pc, #176]	; (800e284 <udp_connect+0xd0>)
 800e1d2:	f002 ffb9 	bl	8011148 <iprintf>
 800e1d6:	f06f 030f 	mvn.w	r3, #15
 800e1da:	e04b      	b.n	800e274 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d109      	bne.n	800e1f6 <udp_connect+0x42>
 800e1e2:	4b26      	ldr	r3, [pc, #152]	; (800e27c <udp_connect+0xc8>)
 800e1e4:	f240 4236 	movw	r2, #1078	; 0x436
 800e1e8:	4927      	ldr	r1, [pc, #156]	; (800e288 <udp_connect+0xd4>)
 800e1ea:	4826      	ldr	r0, [pc, #152]	; (800e284 <udp_connect+0xd0>)
 800e1ec:	f002 ffac 	bl	8011148 <iprintf>
 800e1f0:	f06f 030f 	mvn.w	r3, #15
 800e1f4:	e03e      	b.n	800e274 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	8a5b      	ldrh	r3, [r3, #18]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d10f      	bne.n	800e21e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e1fe:	68f9      	ldr	r1, [r7, #12]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	8a5b      	ldrh	r3, [r3, #18]
 800e204:	461a      	mov	r2, r3
 800e206:	68f8      	ldr	r0, [r7, #12]
 800e208:	f7ff ff4c 	bl	800e0a4 <udp_bind>
 800e20c:	4603      	mov	r3, r0
 800e20e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e210:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <udp_connect+0x6a>
      return err;
 800e218:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e21c:	e02a      	b.n	800e274 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <udp_connect+0x76>
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	e000      	b.n	800e22c <udp_connect+0x78>
 800e22a:	2300      	movs	r3, #0
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	88fa      	ldrh	r2, [r7, #6]
 800e234:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	7c1b      	ldrb	r3, [r3, #16]
 800e23a:	f043 0304 	orr.w	r3, r3, #4
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e244:	4b11      	ldr	r3, [pc, #68]	; (800e28c <udp_connect+0xd8>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	617b      	str	r3, [r7, #20]
 800e24a:	e008      	b.n	800e25e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e24c:	68fa      	ldr	r2, [r7, #12]
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	429a      	cmp	r2, r3
 800e252:	d101      	bne.n	800e258 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e254:	2300      	movs	r3, #0
 800e256:	e00d      	b.n	800e274 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	617b      	str	r3, [r7, #20]
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d1f3      	bne.n	800e24c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e264:	4b09      	ldr	r3, [pc, #36]	; (800e28c <udp_connect+0xd8>)
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e26c:	4a07      	ldr	r2, [pc, #28]	; (800e28c <udp_connect+0xd8>)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	08013fe0 	.word	0x08013fe0
 800e280:	080142c0 	.word	0x080142c0
 800e284:	08014034 	.word	0x08014034
 800e288:	080142dc 	.word	0x080142dc
 800e28c:	20008b88 	.word	0x20008b88

0800e290 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d107      	bne.n	800e2b2 <udp_recv+0x22>
 800e2a2:	4b08      	ldr	r3, [pc, #32]	; (800e2c4 <udp_recv+0x34>)
 800e2a4:	f240 428a 	movw	r2, #1162	; 0x48a
 800e2a8:	4907      	ldr	r1, [pc, #28]	; (800e2c8 <udp_recv+0x38>)
 800e2aa:	4808      	ldr	r0, [pc, #32]	; (800e2cc <udp_recv+0x3c>)
 800e2ac:	f002 ff4c 	bl	8011148 <iprintf>
 800e2b0:	e005      	b.n	800e2be <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	68ba      	ldr	r2, [r7, #8]
 800e2b6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	687a      	ldr	r2, [r7, #4]
 800e2bc:	61da      	str	r2, [r3, #28]
}
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	08013fe0 	.word	0x08013fe0
 800e2c8:	08014314 	.word	0x08014314
 800e2cc:	08014034 	.word	0x08014034

0800e2d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	f7f8 ff08 	bl	80070ec <memp_malloc>
 800e2dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d007      	beq.n	800e2f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e2e4:	2220      	movs	r2, #32
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f002 fb8d 	bl	8010a08 <memset>
    pcb->ttl = UDP_TTL;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	22ff      	movs	r2, #255	; 0xff
 800e2f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e2f4:	687b      	ldr	r3, [r7, #4]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3708      	adds	r7, #8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
	...

0800e300 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01e      	beq.n	800e34e <udp_netif_ip_addr_changed+0x4e>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d01a      	beq.n	800e34e <udp_netif_ip_addr_changed+0x4e>
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d017      	beq.n	800e34e <udp_netif_ip_addr_changed+0x4e>
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d013      	beq.n	800e34e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e326:	4b0d      	ldr	r3, [pc, #52]	; (800e35c <udp_netif_ip_addr_changed+0x5c>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	e00c      	b.n	800e348 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	429a      	cmp	r2, r3
 800e338:	d103      	bne.n	800e342 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d1ef      	bne.n	800e32e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e34e:	bf00      	nop
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	20008b88 	.word	0x20008b88

0800e360 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e368:	4915      	ldr	r1, [pc, #84]	; (800e3c0 <etharp_free_entry+0x60>)
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	4613      	mov	r3, r2
 800e36e:	005b      	lsls	r3, r3, #1
 800e370:	4413      	add	r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	440b      	add	r3, r1
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d013      	beq.n	800e3a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e37c:	4910      	ldr	r1, [pc, #64]	; (800e3c0 <etharp_free_entry+0x60>)
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	4613      	mov	r3, r2
 800e382:	005b      	lsls	r3, r3, #1
 800e384:	4413      	add	r3, r2
 800e386:	00db      	lsls	r3, r3, #3
 800e388:	440b      	add	r3, r1
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7f9 fd0b 	bl	8007da8 <pbuf_free>
    arp_table[i].q = NULL;
 800e392:	490b      	ldr	r1, [pc, #44]	; (800e3c0 <etharp_free_entry+0x60>)
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	4613      	mov	r3, r2
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	4413      	add	r3, r2
 800e39c:	00db      	lsls	r3, r3, #3
 800e39e:	440b      	add	r3, r1
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e3a4:	4906      	ldr	r1, [pc, #24]	; (800e3c0 <etharp_free_entry+0x60>)
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	4413      	add	r3, r2
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	440b      	add	r3, r1
 800e3b2:	3314      	adds	r3, #20
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	20000174 	.word	0x20000174

0800e3c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	607b      	str	r3, [r7, #4]
 800e3ce:	e096      	b.n	800e4fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e3d0:	494f      	ldr	r1, [pc, #316]	; (800e510 <etharp_tmr+0x14c>)
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	005b      	lsls	r3, r3, #1
 800e3d8:	4413      	add	r3, r2
 800e3da:	00db      	lsls	r3, r3, #3
 800e3dc:	440b      	add	r3, r1
 800e3de:	3314      	adds	r3, #20
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e3e4:	78fb      	ldrb	r3, [r7, #3]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f000 8086 	beq.w	800e4f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e3ec:	4948      	ldr	r1, [pc, #288]	; (800e510 <etharp_tmr+0x14c>)
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	440b      	add	r3, r1
 800e3fa:	3312      	adds	r3, #18
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	3301      	adds	r3, #1
 800e400:	b298      	uxth	r0, r3
 800e402:	4943      	ldr	r1, [pc, #268]	; (800e510 <etharp_tmr+0x14c>)
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	4613      	mov	r3, r2
 800e408:	005b      	lsls	r3, r3, #1
 800e40a:	4413      	add	r3, r2
 800e40c:	00db      	lsls	r3, r3, #3
 800e40e:	440b      	add	r3, r1
 800e410:	3312      	adds	r3, #18
 800e412:	4602      	mov	r2, r0
 800e414:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e416:	493e      	ldr	r1, [pc, #248]	; (800e510 <etharp_tmr+0x14c>)
 800e418:	687a      	ldr	r2, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	440b      	add	r3, r1
 800e424:	3312      	adds	r3, #18
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e42c:	d215      	bcs.n	800e45a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e42e:	4938      	ldr	r1, [pc, #224]	; (800e510 <etharp_tmr+0x14c>)
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	4613      	mov	r3, r2
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	4413      	add	r3, r2
 800e438:	00db      	lsls	r3, r3, #3
 800e43a:	440b      	add	r3, r1
 800e43c:	3314      	adds	r3, #20
 800e43e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e440:	2b01      	cmp	r3, #1
 800e442:	d10e      	bne.n	800e462 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e444:	4932      	ldr	r1, [pc, #200]	; (800e510 <etharp_tmr+0x14c>)
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	4613      	mov	r3, r2
 800e44a:	005b      	lsls	r3, r3, #1
 800e44c:	4413      	add	r3, r2
 800e44e:	00db      	lsls	r3, r3, #3
 800e450:	440b      	add	r3, r1
 800e452:	3312      	adds	r3, #18
 800e454:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e456:	2b04      	cmp	r3, #4
 800e458:	d903      	bls.n	800e462 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff ff80 	bl	800e360 <etharp_free_entry>
 800e460:	e04a      	b.n	800e4f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e462:	492b      	ldr	r1, [pc, #172]	; (800e510 <etharp_tmr+0x14c>)
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	4613      	mov	r3, r2
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	4413      	add	r3, r2
 800e46c:	00db      	lsls	r3, r3, #3
 800e46e:	440b      	add	r3, r1
 800e470:	3314      	adds	r3, #20
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	2b03      	cmp	r3, #3
 800e476:	d10a      	bne.n	800e48e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e478:	4925      	ldr	r1, [pc, #148]	; (800e510 <etharp_tmr+0x14c>)
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	4613      	mov	r3, r2
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	4413      	add	r3, r2
 800e482:	00db      	lsls	r3, r3, #3
 800e484:	440b      	add	r3, r1
 800e486:	3314      	adds	r3, #20
 800e488:	2204      	movs	r2, #4
 800e48a:	701a      	strb	r2, [r3, #0]
 800e48c:	e034      	b.n	800e4f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e48e:	4920      	ldr	r1, [pc, #128]	; (800e510 <etharp_tmr+0x14c>)
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	4613      	mov	r3, r2
 800e494:	005b      	lsls	r3, r3, #1
 800e496:	4413      	add	r3, r2
 800e498:	00db      	lsls	r3, r3, #3
 800e49a:	440b      	add	r3, r1
 800e49c:	3314      	adds	r3, #20
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	2b04      	cmp	r3, #4
 800e4a2:	d10a      	bne.n	800e4ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e4a4:	491a      	ldr	r1, [pc, #104]	; (800e510 <etharp_tmr+0x14c>)
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	4413      	add	r3, r2
 800e4ae:	00db      	lsls	r3, r3, #3
 800e4b0:	440b      	add	r3, r1
 800e4b2:	3314      	adds	r3, #20
 800e4b4:	2202      	movs	r2, #2
 800e4b6:	701a      	strb	r2, [r3, #0]
 800e4b8:	e01e      	b.n	800e4f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e4ba:	4915      	ldr	r1, [pc, #84]	; (800e510 <etharp_tmr+0x14c>)
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	005b      	lsls	r3, r3, #1
 800e4c2:	4413      	add	r3, r2
 800e4c4:	00db      	lsls	r3, r3, #3
 800e4c6:	440b      	add	r3, r1
 800e4c8:	3314      	adds	r3, #20
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d113      	bne.n	800e4f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e4d0:	490f      	ldr	r1, [pc, #60]	; (800e510 <etharp_tmr+0x14c>)
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	4413      	add	r3, r2
 800e4da:	00db      	lsls	r3, r3, #3
 800e4dc:	440b      	add	r3, r1
 800e4de:	3308      	adds	r3, #8
 800e4e0:	6818      	ldr	r0, [r3, #0]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	4413      	add	r3, r2
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	4a08      	ldr	r2, [pc, #32]	; (800e510 <etharp_tmr+0x14c>)
 800e4ee:	4413      	add	r3, r2
 800e4f0:	3304      	adds	r3, #4
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	f000 fe6e 	bl	800f1d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	607b      	str	r3, [r7, #4]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b09      	cmp	r3, #9
 800e502:	f77f af65 	ble.w	800e3d0 <etharp_tmr+0xc>
      }
    }
  }
}
 800e506:	bf00      	nop
 800e508:	bf00      	nop
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	20000174 	.word	0x20000174

0800e514 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b08a      	sub	sp, #40	; 0x28
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	460b      	mov	r3, r1
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e522:	230a      	movs	r3, #10
 800e524:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e526:	230a      	movs	r3, #10
 800e528:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e52a:	230a      	movs	r3, #10
 800e52c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e532:	230a      	movs	r3, #10
 800e534:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	83bb      	strh	r3, [r7, #28]
 800e53a:	2300      	movs	r3, #0
 800e53c:	837b      	strh	r3, [r7, #26]
 800e53e:	2300      	movs	r3, #0
 800e540:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e542:	2300      	movs	r3, #0
 800e544:	843b      	strh	r3, [r7, #32]
 800e546:	e0ae      	b.n	800e6a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e54c:	49a6      	ldr	r1, [pc, #664]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e54e:	4613      	mov	r3, r2
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	4413      	add	r3, r2
 800e554:	00db      	lsls	r3, r3, #3
 800e556:	440b      	add	r3, r1
 800e558:	3314      	adds	r3, #20
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e55e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e562:	2b0a      	cmp	r3, #10
 800e564:	d105      	bne.n	800e572 <etharp_find_entry+0x5e>
 800e566:	7dfb      	ldrb	r3, [r7, #23]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d102      	bne.n	800e572 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e56c:	8c3b      	ldrh	r3, [r7, #32]
 800e56e:	847b      	strh	r3, [r7, #34]	; 0x22
 800e570:	e095      	b.n	800e69e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e572:	7dfb      	ldrb	r3, [r7, #23]
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 8092 	beq.w	800e69e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d009      	beq.n	800e594 <etharp_find_entry+0x80>
 800e580:	7dfb      	ldrb	r3, [r7, #23]
 800e582:	2b01      	cmp	r3, #1
 800e584:	d806      	bhi.n	800e594 <etharp_find_entry+0x80>
 800e586:	4b99      	ldr	r3, [pc, #612]	; (800e7ec <etharp_find_entry+0x2d8>)
 800e588:	f240 1223 	movw	r2, #291	; 0x123
 800e58c:	4998      	ldr	r1, [pc, #608]	; (800e7f0 <etharp_find_entry+0x2dc>)
 800e58e:	4899      	ldr	r0, [pc, #612]	; (800e7f4 <etharp_find_entry+0x2e0>)
 800e590:	f002 fdda 	bl	8011148 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d020      	beq.n	800e5dc <etharp_find_entry+0xc8>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6819      	ldr	r1, [r3, #0]
 800e59e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5a2:	4891      	ldr	r0, [pc, #580]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e5a4:	4613      	mov	r3, r2
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	4413      	add	r3, r2
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	4403      	add	r3, r0
 800e5ae:	3304      	adds	r3, #4
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	d112      	bne.n	800e5dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00c      	beq.n	800e5d6 <etharp_find_entry+0xc2>
 800e5bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5c0:	4989      	ldr	r1, [pc, #548]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	005b      	lsls	r3, r3, #1
 800e5c6:	4413      	add	r3, r2
 800e5c8:	00db      	lsls	r3, r3, #3
 800e5ca:	440b      	add	r3, r1
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d102      	bne.n	800e5dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e5d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e5da:	e100      	b.n	800e7de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e5dc:	7dfb      	ldrb	r3, [r7, #23]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d140      	bne.n	800e664 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e5e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5e6:	4980      	ldr	r1, [pc, #512]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	005b      	lsls	r3, r3, #1
 800e5ec:	4413      	add	r3, r2
 800e5ee:	00db      	lsls	r3, r3, #3
 800e5f0:	440b      	add	r3, r1
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d01a      	beq.n	800e62e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e5f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e5fc:	497a      	ldr	r1, [pc, #488]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e5fe:	4613      	mov	r3, r2
 800e600:	005b      	lsls	r3, r3, #1
 800e602:	4413      	add	r3, r2
 800e604:	00db      	lsls	r3, r3, #3
 800e606:	440b      	add	r3, r1
 800e608:	3312      	adds	r3, #18
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	8bba      	ldrh	r2, [r7, #28]
 800e60e:	429a      	cmp	r2, r3
 800e610:	d845      	bhi.n	800e69e <etharp_find_entry+0x18a>
            old_queue = i;
 800e612:	8c3b      	ldrh	r3, [r7, #32]
 800e614:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e616:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e61a:	4973      	ldr	r1, [pc, #460]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e61c:	4613      	mov	r3, r2
 800e61e:	005b      	lsls	r3, r3, #1
 800e620:	4413      	add	r3, r2
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	440b      	add	r3, r1
 800e626:	3312      	adds	r3, #18
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	83bb      	strh	r3, [r7, #28]
 800e62c:	e037      	b.n	800e69e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e62e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e632:	496d      	ldr	r1, [pc, #436]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e634:	4613      	mov	r3, r2
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	4413      	add	r3, r2
 800e63a:	00db      	lsls	r3, r3, #3
 800e63c:	440b      	add	r3, r1
 800e63e:	3312      	adds	r3, #18
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	8b7a      	ldrh	r2, [r7, #26]
 800e644:	429a      	cmp	r2, r3
 800e646:	d82a      	bhi.n	800e69e <etharp_find_entry+0x18a>
            old_pending = i;
 800e648:	8c3b      	ldrh	r3, [r7, #32]
 800e64a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e64c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e650:	4965      	ldr	r1, [pc, #404]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e652:	4613      	mov	r3, r2
 800e654:	005b      	lsls	r3, r3, #1
 800e656:	4413      	add	r3, r2
 800e658:	00db      	lsls	r3, r3, #3
 800e65a:	440b      	add	r3, r1
 800e65c:	3312      	adds	r3, #18
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	837b      	strh	r3, [r7, #26]
 800e662:	e01c      	b.n	800e69e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e664:	7dfb      	ldrb	r3, [r7, #23]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d919      	bls.n	800e69e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e66a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e66e:	495e      	ldr	r1, [pc, #376]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e670:	4613      	mov	r3, r2
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	4413      	add	r3, r2
 800e676:	00db      	lsls	r3, r3, #3
 800e678:	440b      	add	r3, r1
 800e67a:	3312      	adds	r3, #18
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	8b3a      	ldrh	r2, [r7, #24]
 800e680:	429a      	cmp	r2, r3
 800e682:	d80c      	bhi.n	800e69e <etharp_find_entry+0x18a>
            old_stable = i;
 800e684:	8c3b      	ldrh	r3, [r7, #32]
 800e686:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e688:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e68c:	4956      	ldr	r1, [pc, #344]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e68e:	4613      	mov	r3, r2
 800e690:	005b      	lsls	r3, r3, #1
 800e692:	4413      	add	r3, r2
 800e694:	00db      	lsls	r3, r3, #3
 800e696:	440b      	add	r3, r1
 800e698:	3312      	adds	r3, #18
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e69e:	8c3b      	ldrh	r3, [r7, #32]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	843b      	strh	r3, [r7, #32]
 800e6a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e6aa:	2b09      	cmp	r3, #9
 800e6ac:	f77f af4c 	ble.w	800e548 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e6b0:	7afb      	ldrb	r3, [r7, #11]
 800e6b2:	f003 0302 	and.w	r3, r3, #2
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d108      	bne.n	800e6cc <etharp_find_entry+0x1b8>
 800e6ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e6be:	2b0a      	cmp	r3, #10
 800e6c0:	d107      	bne.n	800e6d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e6c2:	7afb      	ldrb	r3, [r7, #11]
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6d0:	e085      	b.n	800e7de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e6d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e6d6:	2b09      	cmp	r3, #9
 800e6d8:	dc02      	bgt.n	800e6e0 <etharp_find_entry+0x1cc>
    i = empty;
 800e6da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6dc:	843b      	strh	r3, [r7, #32]
 800e6de:	e039      	b.n	800e754 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e6e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e6e4:	2b09      	cmp	r3, #9
 800e6e6:	dc14      	bgt.n	800e712 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e6e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e6ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e6f0:	493d      	ldr	r1, [pc, #244]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	005b      	lsls	r3, r3, #1
 800e6f6:	4413      	add	r3, r2
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	440b      	add	r3, r1
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d018      	beq.n	800e734 <etharp_find_entry+0x220>
 800e702:	4b3a      	ldr	r3, [pc, #232]	; (800e7ec <etharp_find_entry+0x2d8>)
 800e704:	f240 126d 	movw	r2, #365	; 0x16d
 800e708:	493b      	ldr	r1, [pc, #236]	; (800e7f8 <etharp_find_entry+0x2e4>)
 800e70a:	483a      	ldr	r0, [pc, #232]	; (800e7f4 <etharp_find_entry+0x2e0>)
 800e70c:	f002 fd1c 	bl	8011148 <iprintf>
 800e710:	e010      	b.n	800e734 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e712:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e716:	2b09      	cmp	r3, #9
 800e718:	dc02      	bgt.n	800e720 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e71a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e71c:	843b      	strh	r3, [r7, #32]
 800e71e:	e009      	b.n	800e734 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e720:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e724:	2b09      	cmp	r3, #9
 800e726:	dc02      	bgt.n	800e72e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e728:	8bfb      	ldrh	r3, [r7, #30]
 800e72a:	843b      	strh	r3, [r7, #32]
 800e72c:	e002      	b.n	800e734 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e72e:	f04f 33ff 	mov.w	r3, #4294967295
 800e732:	e054      	b.n	800e7de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e734:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e738:	2b09      	cmp	r3, #9
 800e73a:	dd06      	ble.n	800e74a <etharp_find_entry+0x236>
 800e73c:	4b2b      	ldr	r3, [pc, #172]	; (800e7ec <etharp_find_entry+0x2d8>)
 800e73e:	f240 127f 	movw	r2, #383	; 0x17f
 800e742:	492e      	ldr	r1, [pc, #184]	; (800e7fc <etharp_find_entry+0x2e8>)
 800e744:	482b      	ldr	r0, [pc, #172]	; (800e7f4 <etharp_find_entry+0x2e0>)
 800e746:	f002 fcff 	bl	8011148 <iprintf>
    etharp_free_entry(i);
 800e74a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff fe06 	bl	800e360 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e754:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e758:	2b09      	cmp	r3, #9
 800e75a:	dd06      	ble.n	800e76a <etharp_find_entry+0x256>
 800e75c:	4b23      	ldr	r3, [pc, #140]	; (800e7ec <etharp_find_entry+0x2d8>)
 800e75e:	f240 1283 	movw	r2, #387	; 0x183
 800e762:	4926      	ldr	r1, [pc, #152]	; (800e7fc <etharp_find_entry+0x2e8>)
 800e764:	4823      	ldr	r0, [pc, #140]	; (800e7f4 <etharp_find_entry+0x2e0>)
 800e766:	f002 fcef 	bl	8011148 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e76a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e76e:	491e      	ldr	r1, [pc, #120]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e770:	4613      	mov	r3, r2
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	4413      	add	r3, r2
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	440b      	add	r3, r1
 800e77a:	3314      	adds	r3, #20
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d006      	beq.n	800e790 <etharp_find_entry+0x27c>
 800e782:	4b1a      	ldr	r3, [pc, #104]	; (800e7ec <etharp_find_entry+0x2d8>)
 800e784:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e788:	491d      	ldr	r1, [pc, #116]	; (800e800 <etharp_find_entry+0x2ec>)
 800e78a:	481a      	ldr	r0, [pc, #104]	; (800e7f4 <etharp_find_entry+0x2e0>)
 800e78c:	f002 fcdc 	bl	8011148 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00b      	beq.n	800e7ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6819      	ldr	r1, [r3, #0]
 800e79e:	4812      	ldr	r0, [pc, #72]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4413      	add	r3, r2
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	4403      	add	r3, r0
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e7ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e7b2:	490d      	ldr	r1, [pc, #52]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	4413      	add	r3, r2
 800e7ba:	00db      	lsls	r3, r3, #3
 800e7bc:	440b      	add	r3, r1
 800e7be:	3312      	adds	r3, #18
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e7c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e7c8:	4907      	ldr	r1, [pc, #28]	; (800e7e8 <etharp_find_entry+0x2d4>)
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	005b      	lsls	r3, r3, #1
 800e7ce:	4413      	add	r3, r2
 800e7d0:	00db      	lsls	r3, r3, #3
 800e7d2:	440b      	add	r3, r1
 800e7d4:	3308      	adds	r3, #8
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e7da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3728      	adds	r7, #40	; 0x28
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20000174 	.word	0x20000174
 800e7ec:	08014344 	.word	0x08014344
 800e7f0:	0801437c 	.word	0x0801437c
 800e7f4:	080143bc 	.word	0x080143bc
 800e7f8:	080143e4 	.word	0x080143e4
 800e7fc:	080143fc 	.word	0x080143fc
 800e800:	08014410 	.word	0x08014410

0800e804 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b088      	sub	sp, #32
 800e808:	af02      	add	r7, sp, #8
 800e80a:	60f8      	str	r0, [r7, #12]
 800e80c:	60b9      	str	r1, [r7, #8]
 800e80e:	607a      	str	r2, [r7, #4]
 800e810:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e818:	2b06      	cmp	r3, #6
 800e81a:	d006      	beq.n	800e82a <etharp_update_arp_entry+0x26>
 800e81c:	4b48      	ldr	r3, [pc, #288]	; (800e940 <etharp_update_arp_entry+0x13c>)
 800e81e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e822:	4948      	ldr	r1, [pc, #288]	; (800e944 <etharp_update_arp_entry+0x140>)
 800e824:	4848      	ldr	r0, [pc, #288]	; (800e948 <etharp_update_arp_entry+0x144>)
 800e826:	f002 fc8f 	bl	8011148 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d012      	beq.n	800e856 <etharp_update_arp_entry+0x52>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00e      	beq.n	800e856 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68f9      	ldr	r1, [r7, #12]
 800e83e:	4618      	mov	r0, r3
 800e840:	f001 f8fc 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800e844:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e846:	2b00      	cmp	r3, #0
 800e848:	d105      	bne.n	800e856 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e852:	2be0      	cmp	r3, #224	; 0xe0
 800e854:	d102      	bne.n	800e85c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e856:	f06f 030f 	mvn.w	r3, #15
 800e85a:	e06c      	b.n	800e936 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e85c:	78fb      	ldrb	r3, [r7, #3]
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	4619      	mov	r1, r3
 800e862:	68b8      	ldr	r0, [r7, #8]
 800e864:	f7ff fe56 	bl	800e514 <etharp_find_entry>
 800e868:	4603      	mov	r3, r0
 800e86a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e86c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e870:	2b00      	cmp	r3, #0
 800e872:	da02      	bge.n	800e87a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e874:	8afb      	ldrh	r3, [r7, #22]
 800e876:	b25b      	sxtb	r3, r3
 800e878:	e05d      	b.n	800e936 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e87a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e87e:	4933      	ldr	r1, [pc, #204]	; (800e94c <etharp_update_arp_entry+0x148>)
 800e880:	4613      	mov	r3, r2
 800e882:	005b      	lsls	r3, r3, #1
 800e884:	4413      	add	r3, r2
 800e886:	00db      	lsls	r3, r3, #3
 800e888:	440b      	add	r3, r1
 800e88a:	3314      	adds	r3, #20
 800e88c:	2202      	movs	r2, #2
 800e88e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e890:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e894:	492d      	ldr	r1, [pc, #180]	; (800e94c <etharp_update_arp_entry+0x148>)
 800e896:	4613      	mov	r3, r2
 800e898:	005b      	lsls	r3, r3, #1
 800e89a:	4413      	add	r3, r2
 800e89c:	00db      	lsls	r3, r3, #3
 800e89e:	440b      	add	r3, r1
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	68fa      	ldr	r2, [r7, #12]
 800e8a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e8a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8aa:	4613      	mov	r3, r2
 800e8ac:	005b      	lsls	r3, r3, #1
 800e8ae:	4413      	add	r3, r2
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	3308      	adds	r3, #8
 800e8b4:	4a25      	ldr	r2, [pc, #148]	; (800e94c <etharp_update_arp_entry+0x148>)
 800e8b6:	4413      	add	r3, r2
 800e8b8:	3304      	adds	r3, #4
 800e8ba:	2206      	movs	r2, #6
 800e8bc:	6879      	ldr	r1, [r7, #4]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f002 f87a 	bl	80109b8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e8c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8c8:	4920      	ldr	r1, [pc, #128]	; (800e94c <etharp_update_arp_entry+0x148>)
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	005b      	lsls	r3, r3, #1
 800e8ce:	4413      	add	r3, r2
 800e8d0:	00db      	lsls	r3, r3, #3
 800e8d2:	440b      	add	r3, r1
 800e8d4:	3312      	adds	r3, #18
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e8da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8de:	491b      	ldr	r1, [pc, #108]	; (800e94c <etharp_update_arp_entry+0x148>)
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	4413      	add	r3, r2
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	440b      	add	r3, r1
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d021      	beq.n	800e934 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e8f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e8f4:	4915      	ldr	r1, [pc, #84]	; (800e94c <etharp_update_arp_entry+0x148>)
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	005b      	lsls	r3, r3, #1
 800e8fa:	4413      	add	r3, r2
 800e8fc:	00db      	lsls	r3, r3, #3
 800e8fe:	440b      	add	r3, r1
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e904:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e908:	4910      	ldr	r1, [pc, #64]	; (800e94c <etharp_update_arp_entry+0x148>)
 800e90a:	4613      	mov	r3, r2
 800e90c:	005b      	lsls	r3, r3, #1
 800e90e:	4413      	add	r3, r2
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	440b      	add	r3, r1
 800e914:	2200      	movs	r2, #0
 800e916:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800e91e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e922:	9300      	str	r3, [sp, #0]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6939      	ldr	r1, [r7, #16]
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f001 ff8f 	bl	801084c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e92e:	6938      	ldr	r0, [r7, #16]
 800e930:	f7f9 fa3a 	bl	8007da8 <pbuf_free>
  }
  return ERR_OK;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3718      	adds	r7, #24
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}
 800e93e:	bf00      	nop
 800e940:	08014344 	.word	0x08014344
 800e944:	0801443c 	.word	0x0801443c
 800e948:	080143bc 	.word	0x080143bc
 800e94c:	20000174 	.word	0x20000174

0800e950 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e958:	2300      	movs	r3, #0
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	e01e      	b.n	800e99c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e95e:	4913      	ldr	r1, [pc, #76]	; (800e9ac <etharp_cleanup_netif+0x5c>)
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	4613      	mov	r3, r2
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	4413      	add	r3, r2
 800e968:	00db      	lsls	r3, r3, #3
 800e96a:	440b      	add	r3, r1
 800e96c:	3314      	adds	r3, #20
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e972:	7afb      	ldrb	r3, [r7, #11]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00e      	beq.n	800e996 <etharp_cleanup_netif+0x46>
 800e978:	490c      	ldr	r1, [pc, #48]	; (800e9ac <etharp_cleanup_netif+0x5c>)
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	4613      	mov	r3, r2
 800e97e:	005b      	lsls	r3, r3, #1
 800e980:	4413      	add	r3, r2
 800e982:	00db      	lsls	r3, r3, #3
 800e984:	440b      	add	r3, r1
 800e986:	3308      	adds	r3, #8
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d102      	bne.n	800e996 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f7ff fce5 	bl	800e360 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	3301      	adds	r3, #1
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b09      	cmp	r3, #9
 800e9a0:	dddd      	ble.n	800e95e <etharp_cleanup_netif+0xe>
    }
  }
}
 800e9a2:	bf00      	nop
 800e9a4:	bf00      	nop
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	20000174 	.word	0x20000174

0800e9b0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e9b0:	b5b0      	push	{r4, r5, r7, lr}
 800e9b2:	b08a      	sub	sp, #40	; 0x28
 800e9b4:	af04      	add	r7, sp, #16
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d107      	bne.n	800e9d0 <etharp_input+0x20>
 800e9c0:	4b3d      	ldr	r3, [pc, #244]	; (800eab8 <etharp_input+0x108>)
 800e9c2:	f240 228a 	movw	r2, #650	; 0x28a
 800e9c6:	493d      	ldr	r1, [pc, #244]	; (800eabc <etharp_input+0x10c>)
 800e9c8:	483d      	ldr	r0, [pc, #244]	; (800eac0 <etharp_input+0x110>)
 800e9ca:	f002 fbbd 	bl	8011148 <iprintf>
 800e9ce:	e06f      	b.n	800eab0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	685b      	ldr	r3, [r3, #4]
 800e9d4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9e0:	d10c      	bne.n	800e9fc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e9e6:	2b06      	cmp	r3, #6
 800e9e8:	d108      	bne.n	800e9fc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e9ee:	2b04      	cmp	r3, #4
 800e9f0:	d104      	bne.n	800e9fc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	885b      	ldrh	r3, [r3, #2]
 800e9f6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e9f8:	2b08      	cmp	r3, #8
 800e9fa:	d003      	beq.n	800ea04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7f9 f9d3 	bl	8007da8 <pbuf_free>
    return;
 800ea02:	e055      	b.n	800eab0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	330e      	adds	r3, #14
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	3318      	adds	r3, #24
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	3304      	adds	r3, #4
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d102      	bne.n	800ea24 <etharp_input+0x74>
    for_us = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	75fb      	strb	r3, [r7, #23]
 800ea22:	e009      	b.n	800ea38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ea24:	68ba      	ldr	r2, [r7, #8]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	bf0c      	ite	eq
 800ea30:	2301      	moveq	r3, #1
 800ea32:	2300      	movne	r3, #0
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	f103 0208 	add.w	r2, r3, #8
 800ea3e:	7dfb      	ldrb	r3, [r7, #23]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <etharp_input+0x98>
 800ea44:	2301      	movs	r3, #1
 800ea46:	e000      	b.n	800ea4a <etharp_input+0x9a>
 800ea48:	2302      	movs	r3, #2
 800ea4a:	f107 010c 	add.w	r1, r7, #12
 800ea4e:	6838      	ldr	r0, [r7, #0]
 800ea50:	f7ff fed8 	bl	800e804 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	88db      	ldrh	r3, [r3, #6]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea5e:	d003      	beq.n	800ea68 <etharp_input+0xb8>
 800ea60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea64:	d01e      	beq.n	800eaa4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ea66:	e020      	b.n	800eaaa <etharp_input+0xfa>
      if (for_us) {
 800ea68:	7dfb      	ldrb	r3, [r7, #23]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d01c      	beq.n	800eaa8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ea84:	693a      	ldr	r2, [r7, #16]
 800ea86:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ea88:	2102      	movs	r1, #2
 800ea8a:	9103      	str	r1, [sp, #12]
 800ea8c:	f107 010c 	add.w	r1, r7, #12
 800ea90:	9102      	str	r1, [sp, #8]
 800ea92:	9201      	str	r2, [sp, #4]
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	462b      	mov	r3, r5
 800ea98:	4622      	mov	r2, r4
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	6838      	ldr	r0, [r7, #0]
 800ea9e:	f000 faeb 	bl	800f078 <etharp_raw>
      break;
 800eaa2:	e001      	b.n	800eaa8 <etharp_input+0xf8>
      break;
 800eaa4:	bf00      	nop
 800eaa6:	e000      	b.n	800eaaa <etharp_input+0xfa>
      break;
 800eaa8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7f9 f97c 	bl	8007da8 <pbuf_free>
}
 800eab0:	3718      	adds	r7, #24
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bdb0      	pop	{r4, r5, r7, pc}
 800eab6:	bf00      	nop
 800eab8:	08014344 	.word	0x08014344
 800eabc:	08014494 	.word	0x08014494
 800eac0:	080143bc 	.word	0x080143bc

0800eac4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af02      	add	r7, sp, #8
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	4613      	mov	r3, r2
 800ead0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ead2:	79fa      	ldrb	r2, [r7, #7]
 800ead4:	4944      	ldr	r1, [pc, #272]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800ead6:	4613      	mov	r3, r2
 800ead8:	005b      	lsls	r3, r3, #1
 800eada:	4413      	add	r3, r2
 800eadc:	00db      	lsls	r3, r3, #3
 800eade:	440b      	add	r3, r1
 800eae0:	3314      	adds	r3, #20
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d806      	bhi.n	800eaf6 <etharp_output_to_arp_index+0x32>
 800eae8:	4b40      	ldr	r3, [pc, #256]	; (800ebec <etharp_output_to_arp_index+0x128>)
 800eaea:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eaee:	4940      	ldr	r1, [pc, #256]	; (800ebf0 <etharp_output_to_arp_index+0x12c>)
 800eaf0:	4840      	ldr	r0, [pc, #256]	; (800ebf4 <etharp_output_to_arp_index+0x130>)
 800eaf2:	f002 fb29 	bl	8011148 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800eaf6:	79fa      	ldrb	r2, [r7, #7]
 800eaf8:	493b      	ldr	r1, [pc, #236]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eafa:	4613      	mov	r3, r2
 800eafc:	005b      	lsls	r3, r3, #1
 800eafe:	4413      	add	r3, r2
 800eb00:	00db      	lsls	r3, r3, #3
 800eb02:	440b      	add	r3, r1
 800eb04:	3314      	adds	r3, #20
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	2b02      	cmp	r3, #2
 800eb0a:	d153      	bne.n	800ebb4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800eb0c:	79fa      	ldrb	r2, [r7, #7]
 800eb0e:	4936      	ldr	r1, [pc, #216]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eb10:	4613      	mov	r3, r2
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	4413      	add	r3, r2
 800eb16:	00db      	lsls	r3, r3, #3
 800eb18:	440b      	add	r3, r1
 800eb1a:	3312      	adds	r3, #18
 800eb1c:	881b      	ldrh	r3, [r3, #0]
 800eb1e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800eb22:	d919      	bls.n	800eb58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800eb24:	79fa      	ldrb	r2, [r7, #7]
 800eb26:	4613      	mov	r3, r2
 800eb28:	005b      	lsls	r3, r3, #1
 800eb2a:	4413      	add	r3, r2
 800eb2c:	00db      	lsls	r3, r3, #3
 800eb2e:	4a2e      	ldr	r2, [pc, #184]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eb30:	4413      	add	r3, r2
 800eb32:	3304      	adds	r3, #4
 800eb34:	4619      	mov	r1, r3
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f000 fb4c 	bl	800f1d4 <etharp_request>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d138      	bne.n	800ebb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eb42:	79fa      	ldrb	r2, [r7, #7]
 800eb44:	4928      	ldr	r1, [pc, #160]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eb46:	4613      	mov	r3, r2
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	4413      	add	r3, r2
 800eb4c:	00db      	lsls	r3, r3, #3
 800eb4e:	440b      	add	r3, r1
 800eb50:	3314      	adds	r3, #20
 800eb52:	2203      	movs	r2, #3
 800eb54:	701a      	strb	r2, [r3, #0]
 800eb56:	e02d      	b.n	800ebb4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800eb58:	79fa      	ldrb	r2, [r7, #7]
 800eb5a:	4923      	ldr	r1, [pc, #140]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eb5c:	4613      	mov	r3, r2
 800eb5e:	005b      	lsls	r3, r3, #1
 800eb60:	4413      	add	r3, r2
 800eb62:	00db      	lsls	r3, r3, #3
 800eb64:	440b      	add	r3, r1
 800eb66:	3312      	adds	r3, #18
 800eb68:	881b      	ldrh	r3, [r3, #0]
 800eb6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800eb6e:	d321      	bcc.n	800ebb4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800eb70:	79fa      	ldrb	r2, [r7, #7]
 800eb72:	4613      	mov	r3, r2
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	4413      	add	r3, r2
 800eb78:	00db      	lsls	r3, r3, #3
 800eb7a:	4a1b      	ldr	r2, [pc, #108]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eb7c:	4413      	add	r3, r2
 800eb7e:	1d19      	adds	r1, r3, #4
 800eb80:	79fa      	ldrb	r2, [r7, #7]
 800eb82:	4613      	mov	r3, r2
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	4413      	add	r3, r2
 800eb88:	00db      	lsls	r3, r3, #3
 800eb8a:	3308      	adds	r3, #8
 800eb8c:	4a16      	ldr	r2, [pc, #88]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eb8e:	4413      	add	r3, r2
 800eb90:	3304      	adds	r3, #4
 800eb92:	461a      	mov	r2, r3
 800eb94:	68f8      	ldr	r0, [r7, #12]
 800eb96:	f000 fafb 	bl	800f190 <etharp_request_dst>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d109      	bne.n	800ebb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eba0:	79fa      	ldrb	r2, [r7, #7]
 800eba2:	4911      	ldr	r1, [pc, #68]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800eba4:	4613      	mov	r3, r2
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	4413      	add	r3, r2
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	440b      	add	r3, r1
 800ebae:	3314      	adds	r3, #20
 800ebb0:	2203      	movs	r2, #3
 800ebb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800ebba:	79fa      	ldrb	r2, [r7, #7]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	4413      	add	r3, r2
 800ebc2:	00db      	lsls	r3, r3, #3
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	4a08      	ldr	r2, [pc, #32]	; (800ebe8 <etharp_output_to_arp_index+0x124>)
 800ebc8:	4413      	add	r3, r2
 800ebca:	3304      	adds	r3, #4
 800ebcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebd0:	9200      	str	r2, [sp, #0]
 800ebd2:	460a      	mov	r2, r1
 800ebd4:	68b9      	ldr	r1, [r7, #8]
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f001 fe38 	bl	801084c <ethernet_output>
 800ebdc:	4603      	mov	r3, r0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	20000174 	.word	0x20000174
 800ebec:	08014344 	.word	0x08014344
 800ebf0:	080144b4 	.word	0x080144b4
 800ebf4:	080143bc 	.word	0x080143bc

0800ebf8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b08a      	sub	sp, #40	; 0x28
 800ebfc:	af02      	add	r7, sp, #8
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d106      	bne.n	800ec1c <etharp_output+0x24>
 800ec0e:	4b73      	ldr	r3, [pc, #460]	; (800eddc <etharp_output+0x1e4>)
 800ec10:	f240 321e 	movw	r2, #798	; 0x31e
 800ec14:	4972      	ldr	r1, [pc, #456]	; (800ede0 <etharp_output+0x1e8>)
 800ec16:	4873      	ldr	r0, [pc, #460]	; (800ede4 <etharp_output+0x1ec>)
 800ec18:	f002 fa96 	bl	8011148 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d106      	bne.n	800ec30 <etharp_output+0x38>
 800ec22:	4b6e      	ldr	r3, [pc, #440]	; (800eddc <etharp_output+0x1e4>)
 800ec24:	f240 321f 	movw	r2, #799	; 0x31f
 800ec28:	496f      	ldr	r1, [pc, #444]	; (800ede8 <etharp_output+0x1f0>)
 800ec2a:	486e      	ldr	r0, [pc, #440]	; (800ede4 <etharp_output+0x1ec>)
 800ec2c:	f002 fa8c 	bl	8011148 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d106      	bne.n	800ec44 <etharp_output+0x4c>
 800ec36:	4b69      	ldr	r3, [pc, #420]	; (800eddc <etharp_output+0x1e4>)
 800ec38:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ec3c:	496b      	ldr	r1, [pc, #428]	; (800edec <etharp_output+0x1f4>)
 800ec3e:	4869      	ldr	r0, [pc, #420]	; (800ede4 <etharp_output+0x1ec>)
 800ec40:	f002 fa82 	bl	8011148 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	68f9      	ldr	r1, [r7, #12]
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f000 fef6 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d002      	beq.n	800ec5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ec56:	4b66      	ldr	r3, [pc, #408]	; (800edf0 <etharp_output+0x1f8>)
 800ec58:	61fb      	str	r3, [r7, #28]
 800ec5a:	e0af      	b.n	800edbc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec64:	2be0      	cmp	r3, #224	; 0xe0
 800ec66:	d118      	bne.n	800ec9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ec70:	235e      	movs	r3, #94	; 0x5e
 800ec72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	3301      	adds	r3, #1
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3302      	adds	r3, #2
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3303      	adds	r3, #3
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ec92:	f107 0310 	add.w	r3, r7, #16
 800ec96:	61fb      	str	r3, [r7, #28]
 800ec98:	e090      	b.n	800edbc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	3304      	adds	r3, #4
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	405a      	eors	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	3308      	adds	r3, #8
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4013      	ands	r3, r2
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d012      	beq.n	800ecd8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ecb8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d00b      	beq.n	800ecd8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	330c      	adds	r3, #12
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d003      	beq.n	800ecd2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	330c      	adds	r3, #12
 800ecce:	61bb      	str	r3, [r7, #24]
 800ecd0:	e002      	b.n	800ecd8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ecd2:	f06f 0303 	mvn.w	r3, #3
 800ecd6:	e07d      	b.n	800edd4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ecd8:	4b46      	ldr	r3, [pc, #280]	; (800edf4 <etharp_output+0x1fc>)
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	4619      	mov	r1, r3
 800ecde:	4a46      	ldr	r2, [pc, #280]	; (800edf8 <etharp_output+0x200>)
 800ece0:	460b      	mov	r3, r1
 800ece2:	005b      	lsls	r3, r3, #1
 800ece4:	440b      	add	r3, r1
 800ece6:	00db      	lsls	r3, r3, #3
 800ece8:	4413      	add	r3, r2
 800ecea:	3314      	adds	r3, #20
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d925      	bls.n	800ed3e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ecf2:	4b40      	ldr	r3, [pc, #256]	; (800edf4 <etharp_output+0x1fc>)
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	4619      	mov	r1, r3
 800ecf8:	4a3f      	ldr	r2, [pc, #252]	; (800edf8 <etharp_output+0x200>)
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	005b      	lsls	r3, r3, #1
 800ecfe:	440b      	add	r3, r1
 800ed00:	00db      	lsls	r3, r3, #3
 800ed02:	4413      	add	r3, r2
 800ed04:	3308      	adds	r3, #8
 800ed06:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d117      	bne.n	800ed3e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	681a      	ldr	r2, [r3, #0]
 800ed12:	4b38      	ldr	r3, [pc, #224]	; (800edf4 <etharp_output+0x1fc>)
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	4618      	mov	r0, r3
 800ed18:	4937      	ldr	r1, [pc, #220]	; (800edf8 <etharp_output+0x200>)
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	005b      	lsls	r3, r3, #1
 800ed1e:	4403      	add	r3, r0
 800ed20:	00db      	lsls	r3, r3, #3
 800ed22:	440b      	add	r3, r1
 800ed24:	3304      	adds	r3, #4
 800ed26:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d108      	bne.n	800ed3e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ed2c:	4b31      	ldr	r3, [pc, #196]	; (800edf4 <etharp_output+0x1fc>)
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	461a      	mov	r2, r3
 800ed32:	68b9      	ldr	r1, [r7, #8]
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f7ff fec5 	bl	800eac4 <etharp_output_to_arp_index>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	e04a      	b.n	800edd4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ed3e:	2300      	movs	r3, #0
 800ed40:	75fb      	strb	r3, [r7, #23]
 800ed42:	e031      	b.n	800eda8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed44:	7dfa      	ldrb	r2, [r7, #23]
 800ed46:	492c      	ldr	r1, [pc, #176]	; (800edf8 <etharp_output+0x200>)
 800ed48:	4613      	mov	r3, r2
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	4413      	add	r3, r2
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	440b      	add	r3, r1
 800ed52:	3314      	adds	r3, #20
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d923      	bls.n	800eda2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ed5a:	7dfa      	ldrb	r2, [r7, #23]
 800ed5c:	4926      	ldr	r1, [pc, #152]	; (800edf8 <etharp_output+0x200>)
 800ed5e:	4613      	mov	r3, r2
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	4413      	add	r3, r2
 800ed64:	00db      	lsls	r3, r3, #3
 800ed66:	440b      	add	r3, r1
 800ed68:	3308      	adds	r3, #8
 800ed6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed6c:	68fa      	ldr	r2, [r7, #12]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d117      	bne.n	800eda2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ed72:	69bb      	ldr	r3, [r7, #24]
 800ed74:	6819      	ldr	r1, [r3, #0]
 800ed76:	7dfa      	ldrb	r2, [r7, #23]
 800ed78:	481f      	ldr	r0, [pc, #124]	; (800edf8 <etharp_output+0x200>)
 800ed7a:	4613      	mov	r3, r2
 800ed7c:	005b      	lsls	r3, r3, #1
 800ed7e:	4413      	add	r3, r2
 800ed80:	00db      	lsls	r3, r3, #3
 800ed82:	4403      	add	r3, r0
 800ed84:	3304      	adds	r3, #4
 800ed86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ed88:	4299      	cmp	r1, r3
 800ed8a:	d10a      	bne.n	800eda2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ed8c:	4a19      	ldr	r2, [pc, #100]	; (800edf4 <etharp_output+0x1fc>)
 800ed8e:	7dfb      	ldrb	r3, [r7, #23]
 800ed90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ed92:	7dfb      	ldrb	r3, [r7, #23]
 800ed94:	461a      	mov	r2, r3
 800ed96:	68b9      	ldr	r1, [r7, #8]
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f7ff fe93 	bl	800eac4 <etharp_output_to_arp_index>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	e018      	b.n	800edd4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
 800eda4:	3301      	adds	r3, #1
 800eda6:	75fb      	strb	r3, [r7, #23]
 800eda8:	7dfb      	ldrb	r3, [r7, #23]
 800edaa:	2b09      	cmp	r3, #9
 800edac:	d9ca      	bls.n	800ed44 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800edae:	68ba      	ldr	r2, [r7, #8]
 800edb0:	69b9      	ldr	r1, [r7, #24]
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f000 f822 	bl	800edfc <etharp_query>
 800edb8:	4603      	mov	r3, r0
 800edba:	e00b      	b.n	800edd4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800edc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	68b9      	ldr	r1, [r7, #8]
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f001 fd3d 	bl	801084c <ethernet_output>
 800edd2:	4603      	mov	r3, r0
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3720      	adds	r7, #32
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	08014344 	.word	0x08014344
 800ede0:	08014494 	.word	0x08014494
 800ede4:	080143bc 	.word	0x080143bc
 800ede8:	080144e4 	.word	0x080144e4
 800edec:	08014484 	.word	0x08014484
 800edf0:	08014b04 	.word	0x08014b04
 800edf4:	20000264 	.word	0x20000264
 800edf8:	20000174 	.word	0x20000174

0800edfc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b08c      	sub	sp, #48	; 0x30
 800ee00:	af02      	add	r7, sp, #8
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	332a      	adds	r3, #42	; 0x2a
 800ee0c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ee0e:	23ff      	movs	r3, #255	; 0xff
 800ee10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	68f9      	ldr	r1, [r7, #12]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f000 fe0c 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10c      	bne.n	800ee44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ee32:	2be0      	cmp	r3, #224	; 0xe0
 800ee34:	d006      	beq.n	800ee44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d102      	bne.n	800ee4a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ee44:	f06f 030f 	mvn.w	r3, #15
 800ee48:	e101      	b.n	800f04e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	2101      	movs	r1, #1
 800ee4e:	68b8      	ldr	r0, [r7, #8]
 800ee50:	f7ff fb60 	bl	800e514 <etharp_find_entry>
 800ee54:	4603      	mov	r3, r0
 800ee56:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ee58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	da02      	bge.n	800ee66 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ee60:	8a7b      	ldrh	r3, [r7, #18]
 800ee62:	b25b      	sxtb	r3, r3
 800ee64:	e0f3      	b.n	800f04e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ee66:	8a7b      	ldrh	r3, [r7, #18]
 800ee68:	2b7e      	cmp	r3, #126	; 0x7e
 800ee6a:	d906      	bls.n	800ee7a <etharp_query+0x7e>
 800ee6c:	4b7a      	ldr	r3, [pc, #488]	; (800f058 <etharp_query+0x25c>)
 800ee6e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ee72:	497a      	ldr	r1, [pc, #488]	; (800f05c <etharp_query+0x260>)
 800ee74:	487a      	ldr	r0, [pc, #488]	; (800f060 <etharp_query+0x264>)
 800ee76:	f002 f967 	bl	8011148 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ee7a:	8a7b      	ldrh	r3, [r7, #18]
 800ee7c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ee7e:	7c7a      	ldrb	r2, [r7, #17]
 800ee80:	4978      	ldr	r1, [pc, #480]	; (800f064 <etharp_query+0x268>)
 800ee82:	4613      	mov	r3, r2
 800ee84:	005b      	lsls	r3, r3, #1
 800ee86:	4413      	add	r3, r2
 800ee88:	00db      	lsls	r3, r3, #3
 800ee8a:	440b      	add	r3, r1
 800ee8c:	3314      	adds	r3, #20
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d115      	bne.n	800eec0 <etharp_query+0xc4>
    is_new_entry = 1;
 800ee94:	2301      	movs	r3, #1
 800ee96:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ee98:	7c7a      	ldrb	r2, [r7, #17]
 800ee9a:	4972      	ldr	r1, [pc, #456]	; (800f064 <etharp_query+0x268>)
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	005b      	lsls	r3, r3, #1
 800eea0:	4413      	add	r3, r2
 800eea2:	00db      	lsls	r3, r3, #3
 800eea4:	440b      	add	r3, r1
 800eea6:	3314      	adds	r3, #20
 800eea8:	2201      	movs	r2, #1
 800eeaa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800eeac:	7c7a      	ldrb	r2, [r7, #17]
 800eeae:	496d      	ldr	r1, [pc, #436]	; (800f064 <etharp_query+0x268>)
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	005b      	lsls	r3, r3, #1
 800eeb4:	4413      	add	r3, r2
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	440b      	add	r3, r1
 800eeba:	3308      	adds	r3, #8
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eec0:	7c7a      	ldrb	r2, [r7, #17]
 800eec2:	4968      	ldr	r1, [pc, #416]	; (800f064 <etharp_query+0x268>)
 800eec4:	4613      	mov	r3, r2
 800eec6:	005b      	lsls	r3, r3, #1
 800eec8:	4413      	add	r3, r2
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	440b      	add	r3, r1
 800eece:	3314      	adds	r3, #20
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d011      	beq.n	800eefa <etharp_query+0xfe>
 800eed6:	7c7a      	ldrb	r2, [r7, #17]
 800eed8:	4962      	ldr	r1, [pc, #392]	; (800f064 <etharp_query+0x268>)
 800eeda:	4613      	mov	r3, r2
 800eedc:	005b      	lsls	r3, r3, #1
 800eede:	4413      	add	r3, r2
 800eee0:	00db      	lsls	r3, r3, #3
 800eee2:	440b      	add	r3, r1
 800eee4:	3314      	adds	r3, #20
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d806      	bhi.n	800eefa <etharp_query+0xfe>
 800eeec:	4b5a      	ldr	r3, [pc, #360]	; (800f058 <etharp_query+0x25c>)
 800eeee:	f240 32cd 	movw	r2, #973	; 0x3cd
 800eef2:	495d      	ldr	r1, [pc, #372]	; (800f068 <etharp_query+0x26c>)
 800eef4:	485a      	ldr	r0, [pc, #360]	; (800f060 <etharp_query+0x264>)
 800eef6:	f002 f927 	bl	8011148 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800eefa:	6a3b      	ldr	r3, [r7, #32]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d102      	bne.n	800ef06 <etharp_query+0x10a>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10c      	bne.n	800ef20 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ef06:	68b9      	ldr	r1, [r7, #8]
 800ef08:	68f8      	ldr	r0, [r7, #12]
 800ef0a:	f000 f963 	bl	800f1d4 <etharp_request>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d102      	bne.n	800ef20 <etharp_query+0x124>
      return result;
 800ef1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ef1e:	e096      	b.n	800f04e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d106      	bne.n	800ef34 <etharp_query+0x138>
 800ef26:	4b4c      	ldr	r3, [pc, #304]	; (800f058 <etharp_query+0x25c>)
 800ef28:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ef2c:	494f      	ldr	r1, [pc, #316]	; (800f06c <etharp_query+0x270>)
 800ef2e:	484c      	ldr	r0, [pc, #304]	; (800f060 <etharp_query+0x264>)
 800ef30:	f002 f90a 	bl	8011148 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ef34:	7c7a      	ldrb	r2, [r7, #17]
 800ef36:	494b      	ldr	r1, [pc, #300]	; (800f064 <etharp_query+0x268>)
 800ef38:	4613      	mov	r3, r2
 800ef3a:	005b      	lsls	r3, r3, #1
 800ef3c:	4413      	add	r3, r2
 800ef3e:	00db      	lsls	r3, r3, #3
 800ef40:	440b      	add	r3, r1
 800ef42:	3314      	adds	r3, #20
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d917      	bls.n	800ef7a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ef4a:	4a49      	ldr	r2, [pc, #292]	; (800f070 <etharp_query+0x274>)
 800ef4c:	7c7b      	ldrb	r3, [r7, #17]
 800ef4e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ef50:	7c7a      	ldrb	r2, [r7, #17]
 800ef52:	4613      	mov	r3, r2
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	4413      	add	r3, r2
 800ef58:	00db      	lsls	r3, r3, #3
 800ef5a:	3308      	adds	r3, #8
 800ef5c:	4a41      	ldr	r2, [pc, #260]	; (800f064 <etharp_query+0x268>)
 800ef5e:	4413      	add	r3, r2
 800ef60:	3304      	adds	r3, #4
 800ef62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef66:	9200      	str	r2, [sp, #0]
 800ef68:	697a      	ldr	r2, [r7, #20]
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	68f8      	ldr	r0, [r7, #12]
 800ef6e:	f001 fc6d 	bl	801084c <ethernet_output>
 800ef72:	4603      	mov	r3, r0
 800ef74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef78:	e067      	b.n	800f04a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ef7a:	7c7a      	ldrb	r2, [r7, #17]
 800ef7c:	4939      	ldr	r1, [pc, #228]	; (800f064 <etharp_query+0x268>)
 800ef7e:	4613      	mov	r3, r2
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	4413      	add	r3, r2
 800ef84:	00db      	lsls	r3, r3, #3
 800ef86:	440b      	add	r3, r1
 800ef88:	3314      	adds	r3, #20
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d15c      	bne.n	800f04a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ef98:	e01c      	b.n	800efd4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	895a      	ldrh	r2, [r3, #10]
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	891b      	ldrh	r3, [r3, #8]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d10a      	bne.n	800efbc <etharp_query+0x1c0>
 800efa6:	69fb      	ldr	r3, [r7, #28]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d006      	beq.n	800efbc <etharp_query+0x1c0>
 800efae:	4b2a      	ldr	r3, [pc, #168]	; (800f058 <etharp_query+0x25c>)
 800efb0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800efb4:	492f      	ldr	r1, [pc, #188]	; (800f074 <etharp_query+0x278>)
 800efb6:	482a      	ldr	r0, [pc, #168]	; (800f060 <etharp_query+0x264>)
 800efb8:	f002 f8c6 	bl	8011148 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	7b1b      	ldrb	r3, [r3, #12]
 800efc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <etharp_query+0x1d2>
        copy_needed = 1;
 800efc8:	2301      	movs	r3, #1
 800efca:	61bb      	str	r3, [r7, #24]
        break;
 800efcc:	e005      	b.n	800efda <etharp_query+0x1de>
      }
      p = p->next;
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d1df      	bne.n	800ef9a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d007      	beq.n	800eff0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800efe6:	200e      	movs	r0, #14
 800efe8:	f7f9 f9dc 	bl	80083a4 <pbuf_clone>
 800efec:	61f8      	str	r0, [r7, #28]
 800efee:	e004      	b.n	800effa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800eff4:	69f8      	ldr	r0, [r7, #28]
 800eff6:	f7f8 ff77 	bl	8007ee8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d021      	beq.n	800f044 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f000:	7c7a      	ldrb	r2, [r7, #17]
 800f002:	4918      	ldr	r1, [pc, #96]	; (800f064 <etharp_query+0x268>)
 800f004:	4613      	mov	r3, r2
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	4413      	add	r3, r2
 800f00a:	00db      	lsls	r3, r3, #3
 800f00c:	440b      	add	r3, r1
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00a      	beq.n	800f02a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f014:	7c7a      	ldrb	r2, [r7, #17]
 800f016:	4913      	ldr	r1, [pc, #76]	; (800f064 <etharp_query+0x268>)
 800f018:	4613      	mov	r3, r2
 800f01a:	005b      	lsls	r3, r3, #1
 800f01c:	4413      	add	r3, r2
 800f01e:	00db      	lsls	r3, r3, #3
 800f020:	440b      	add	r3, r1
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4618      	mov	r0, r3
 800f026:	f7f8 febf 	bl	8007da8 <pbuf_free>
      }
      arp_table[i].q = p;
 800f02a:	7c7a      	ldrb	r2, [r7, #17]
 800f02c:	490d      	ldr	r1, [pc, #52]	; (800f064 <etharp_query+0x268>)
 800f02e:	4613      	mov	r3, r2
 800f030:	005b      	lsls	r3, r3, #1
 800f032:	4413      	add	r3, r2
 800f034:	00db      	lsls	r3, r3, #3
 800f036:	440b      	add	r3, r1
 800f038:	69fa      	ldr	r2, [r7, #28]
 800f03a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f03c:	2300      	movs	r3, #0
 800f03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f042:	e002      	b.n	800f04a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f044:	23ff      	movs	r3, #255	; 0xff
 800f046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f04a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3728      	adds	r7, #40	; 0x28
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	08014344 	.word	0x08014344
 800f05c:	080144f0 	.word	0x080144f0
 800f060:	080143bc 	.word	0x080143bc
 800f064:	20000174 	.word	0x20000174
 800f068:	08014500 	.word	0x08014500
 800f06c:	080144e4 	.word	0x080144e4
 800f070:	20000264 	.word	0x20000264
 800f074:	08014528 	.word	0x08014528

0800f078 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08a      	sub	sp, #40	; 0x28
 800f07c:	af02      	add	r7, sp, #8
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]
 800f084:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f086:	2300      	movs	r3, #0
 800f088:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d106      	bne.n	800f09e <etharp_raw+0x26>
 800f090:	4b3a      	ldr	r3, [pc, #232]	; (800f17c <etharp_raw+0x104>)
 800f092:	f240 4257 	movw	r2, #1111	; 0x457
 800f096:	493a      	ldr	r1, [pc, #232]	; (800f180 <etharp_raw+0x108>)
 800f098:	483a      	ldr	r0, [pc, #232]	; (800f184 <etharp_raw+0x10c>)
 800f09a:	f002 f855 	bl	8011148 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f09e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0a2:	211c      	movs	r1, #28
 800f0a4:	200e      	movs	r0, #14
 800f0a6:	f7f8 fb9b 	bl	80077e0 <pbuf_alloc>
 800f0aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d102      	bne.n	800f0b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f0b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b6:	e05d      	b.n	800f174 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f0b8:	69bb      	ldr	r3, [r7, #24]
 800f0ba:	895b      	ldrh	r3, [r3, #10]
 800f0bc:	2b1b      	cmp	r3, #27
 800f0be:	d806      	bhi.n	800f0ce <etharp_raw+0x56>
 800f0c0:	4b2e      	ldr	r3, [pc, #184]	; (800f17c <etharp_raw+0x104>)
 800f0c2:	f240 4262 	movw	r2, #1122	; 0x462
 800f0c6:	4930      	ldr	r1, [pc, #192]	; (800f188 <etharp_raw+0x110>)
 800f0c8:	482e      	ldr	r0, [pc, #184]	; (800f184 <etharp_raw+0x10c>)
 800f0ca:	f002 f83d 	bl	8011148 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f0d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7f7 fbb2 	bl	8006840 <lwip_htons>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	461a      	mov	r2, r3
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f0ea:	2b06      	cmp	r3, #6
 800f0ec:	d006      	beq.n	800f0fc <etharp_raw+0x84>
 800f0ee:	4b23      	ldr	r3, [pc, #140]	; (800f17c <etharp_raw+0x104>)
 800f0f0:	f240 4269 	movw	r2, #1129	; 0x469
 800f0f4:	4925      	ldr	r1, [pc, #148]	; (800f18c <etharp_raw+0x114>)
 800f0f6:	4823      	ldr	r0, [pc, #140]	; (800f184 <etharp_raw+0x10c>)
 800f0f8:	f002 f826 	bl	8011148 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	3308      	adds	r3, #8
 800f100:	2206      	movs	r2, #6
 800f102:	6839      	ldr	r1, [r7, #0]
 800f104:	4618      	mov	r0, r3
 800f106:	f001 fc57 	bl	80109b8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	3312      	adds	r3, #18
 800f10e:	2206      	movs	r2, #6
 800f110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f112:	4618      	mov	r0, r3
 800f114:	f001 fc50 	bl	80109b8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	330e      	adds	r3, #14
 800f11c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f11e:	6812      	ldr	r2, [r2, #0]
 800f120:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	3318      	adds	r3, #24
 800f126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f128:	6812      	ldr	r2, [r2, #0]
 800f12a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	2200      	movs	r2, #0
 800f130:	701a      	strb	r2, [r3, #0]
 800f132:	2200      	movs	r2, #0
 800f134:	f042 0201 	orr.w	r2, r2, #1
 800f138:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	2200      	movs	r2, #0
 800f13e:	f042 0208 	orr.w	r2, r2, #8
 800f142:	709a      	strb	r2, [r3, #2]
 800f144:	2200      	movs	r2, #0
 800f146:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	2206      	movs	r2, #6
 800f14c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2204      	movs	r2, #4
 800f152:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f154:	f640 0306 	movw	r3, #2054	; 0x806
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	68ba      	ldr	r2, [r7, #8]
 800f15e:	69b9      	ldr	r1, [r7, #24]
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f001 fb73 	bl	801084c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f166:	69b8      	ldr	r0, [r7, #24]
 800f168:	f7f8 fe1e 	bl	8007da8 <pbuf_free>
  p = NULL;
 800f16c:	2300      	movs	r3, #0
 800f16e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f170:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3720      	adds	r7, #32
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	08014344 	.word	0x08014344
 800f180:	08014494 	.word	0x08014494
 800f184:	080143bc 	.word	0x080143bc
 800f188:	08014544 	.word	0x08014544
 800f18c:	08014578 	.word	0x08014578

0800f190 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af04      	add	r7, sp, #16
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	9203      	str	r2, [sp, #12]
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	9202      	str	r2, [sp, #8]
 800f1b4:	4a06      	ldr	r2, [pc, #24]	; (800f1d0 <etharp_request_dst+0x40>)
 800f1b6:	9201      	str	r2, [sp, #4]
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7ff ff5a 	bl	800f078 <etharp_raw>
 800f1c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3710      	adds	r7, #16
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	08014b0c 	.word	0x08014b0c

0800f1d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f1de:	4a05      	ldr	r2, [pc, #20]	; (800f1f4 <etharp_request+0x20>)
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff ffd4 	bl	800f190 <etharp_request_dst>
 800f1e8:	4603      	mov	r3, r0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3708      	adds	r7, #8
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	08014b04 	.word	0x08014b04

0800f1f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08e      	sub	sp, #56	; 0x38
 800f1fc:	af04      	add	r7, sp, #16
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f202:	4b78      	ldr	r3, [pc, #480]	; (800f3e4 <icmp_input+0x1ec>)
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	f003 030f 	and.w	r3, r3, #15
 800f210:	b2db      	uxtb	r3, r3
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	b2db      	uxtb	r3, r3
 800f216:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800f218:	8bfb      	ldrh	r3, [r7, #30]
 800f21a:	2b13      	cmp	r3, #19
 800f21c:	f240 80cf 	bls.w	800f3be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	895b      	ldrh	r3, [r3, #10]
 800f224:	2b03      	cmp	r3, #3
 800f226:	f240 80cc 	bls.w	800f3c2 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f232:	7f7b      	ldrb	r3, [r7, #29]
 800f234:	2b00      	cmp	r3, #0
 800f236:	f000 80bb 	beq.w	800f3b0 <icmp_input+0x1b8>
 800f23a:	2b08      	cmp	r3, #8
 800f23c:	f040 80bb 	bne.w	800f3b6 <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f240:	4b69      	ldr	r3, [pc, #420]	; (800f3e8 <icmp_input+0x1f0>)
 800f242:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f244:	4b67      	ldr	r3, [pc, #412]	; (800f3e4 <icmp_input+0x1ec>)
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f24c:	2be0      	cmp	r3, #224	; 0xe0
 800f24e:	d102      	bne.n	800f256 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	3304      	adds	r3, #4
 800f254:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f256:	4b63      	ldr	r3, [pc, #396]	; (800f3e4 <icmp_input+0x1ec>)
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	4a62      	ldr	r2, [pc, #392]	; (800f3e4 <icmp_input+0x1ec>)
 800f25c:	6812      	ldr	r2, [r2, #0]
 800f25e:	4611      	mov	r1, r2
 800f260:	4618      	mov	r0, r3
 800f262:	f000 fbeb 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	3304      	adds	r3, #4
 800f270:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	891b      	ldrh	r3, [r3, #8]
 800f276:	2b07      	cmp	r3, #7
 800f278:	f240 80a5 	bls.w	800f3c6 <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f27c:	8bfb      	ldrh	r3, [r7, #30]
 800f27e:	330e      	adds	r3, #14
 800f280:	4619      	mov	r1, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7f8 fcfa 	bl	8007c7c <pbuf_add_header>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d04b      	beq.n	800f326 <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	891a      	ldrh	r2, [r3, #8]
 800f292:	8bfb      	ldrh	r3, [r7, #30]
 800f294:	4413      	add	r3, r2
 800f296:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	891b      	ldrh	r3, [r3, #8]
 800f29c:	8b7a      	ldrh	r2, [r7, #26]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	f0c0 8096 	bcc.w	800f3d0 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f2a4:	8b7b      	ldrh	r3, [r7, #26]
 800f2a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	200e      	movs	r0, #14
 800f2ae:	f7f8 fa97 	bl	80077e0 <pbuf_alloc>
 800f2b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	f000 808c 	beq.w	800f3d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	895b      	ldrh	r3, [r3, #10]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	8bfb      	ldrh	r3, [r7, #30]
 800f2c4:	3308      	adds	r3, #8
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d203      	bcs.n	800f2d2 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f2ca:	6978      	ldr	r0, [r7, #20]
 800f2cc:	f7f8 fd6c 	bl	8007da8 <pbuf_free>
          goto icmperr;
 800f2d0:	e081      	b.n	800f3d6 <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	8bfa      	ldrh	r2, [r7, #30]
 800f2d8:	6a39      	ldr	r1, [r7, #32]
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f001 fb6c 	bl	80109b8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f2e0:	8bfb      	ldrh	r3, [r7, #30]
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6978      	ldr	r0, [r7, #20]
 800f2e6:	f7f8 fcd9 	bl	8007c9c <pbuf_remove_header>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d009      	beq.n	800f304 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f2f0:	4b3e      	ldr	r3, [pc, #248]	; (800f3ec <icmp_input+0x1f4>)
 800f2f2:	22b6      	movs	r2, #182	; 0xb6
 800f2f4:	493e      	ldr	r1, [pc, #248]	; (800f3f0 <icmp_input+0x1f8>)
 800f2f6:	483f      	ldr	r0, [pc, #252]	; (800f3f4 <icmp_input+0x1fc>)
 800f2f8:	f001 ff26 	bl	8011148 <iprintf>
          pbuf_free(r);
 800f2fc:	6978      	ldr	r0, [r7, #20]
 800f2fe:	f7f8 fd53 	bl	8007da8 <pbuf_free>
          goto icmperr;
 800f302:	e068      	b.n	800f3d6 <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	6978      	ldr	r0, [r7, #20]
 800f308:	f7f8 fe76 	bl	8007ff8 <pbuf_copy>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d003      	beq.n	800f31a <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f312:	6978      	ldr	r0, [r7, #20]
 800f314:	f7f8 fd48 	bl	8007da8 <pbuf_free>
          goto icmperr;
 800f318:	e05d      	b.n	800f3d6 <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7f8 fd44 	bl	8007da8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	607b      	str	r3, [r7, #4]
 800f324:	e00f      	b.n	800f346 <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f326:	8bfb      	ldrh	r3, [r7, #30]
 800f328:	330e      	adds	r3, #14
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7f8 fcb5 	bl	8007c9c <pbuf_remove_header>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d006      	beq.n	800f346 <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f338:	4b2c      	ldr	r3, [pc, #176]	; (800f3ec <icmp_input+0x1f4>)
 800f33a:	22c7      	movs	r2, #199	; 0xc7
 800f33c:	492e      	ldr	r1, [pc, #184]	; (800f3f8 <icmp_input+0x200>)
 800f33e:	482d      	ldr	r0, [pc, #180]	; (800f3f4 <icmp_input+0x1fc>)
 800f340:	f001 ff02 	bl	8011148 <iprintf>
          goto icmperr;
 800f344:	e047      	b.n	800f3d6 <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f34c:	8bfb      	ldrh	r3, [r7, #30]
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7f8 fc93 	bl	8007c7c <pbuf_add_header>
 800f356:	4603      	mov	r3, r0
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d12b      	bne.n	800f3b4 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f36a:	4b1e      	ldr	r3, [pc, #120]	; (800f3e4 <icmp_input+0x1ec>)
 800f36c:	691a      	ldr	r2, [r3, #16]
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	2200      	movs	r2, #0
 800f376:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	2200      	movs	r2, #0
 800f37c:	709a      	strb	r2, [r3, #2]
 800f37e:	2200      	movs	r2, #0
 800f380:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	22ff      	movs	r2, #255	; 0xff
 800f386:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	729a      	strb	r2, [r3, #10]
 800f38e:	2200      	movs	r2, #0
 800f390:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	9302      	str	r3, [sp, #8]
 800f396:	2301      	movs	r3, #1
 800f398:	9301      	str	r3, [sp, #4]
 800f39a:	2300      	movs	r3, #0
 800f39c:	9300      	str	r3, [sp, #0]
 800f39e:	23ff      	movs	r3, #255	; 0xff
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 fa71 	bl	800f88c <ip4_output_if>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f3ae:	e001      	b.n	800f3b4 <icmp_input+0x1bc>
      break;
 800f3b0:	bf00      	nop
 800f3b2:	e000      	b.n	800f3b6 <icmp_input+0x1be>
      break;
 800f3b4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7f8 fcf6 	bl	8007da8 <pbuf_free>
  return;
 800f3bc:	e00f      	b.n	800f3de <icmp_input+0x1e6>
    goto lenerr;
 800f3be:	bf00      	nop
 800f3c0:	e002      	b.n	800f3c8 <icmp_input+0x1d0>
    goto lenerr;
 800f3c2:	bf00      	nop
 800f3c4:	e000      	b.n	800f3c8 <icmp_input+0x1d0>
        goto lenerr;
 800f3c6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7f8 fced 	bl	8007da8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f3ce:	e006      	b.n	800f3de <icmp_input+0x1e6>
          goto icmperr;
 800f3d0:	bf00      	nop
 800f3d2:	e000      	b.n	800f3d6 <icmp_input+0x1de>
          goto icmperr;
 800f3d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7f8 fce6 	bl	8007da8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f3dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f3de:	3728      	adds	r7, #40	; 0x28
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	2000346c 	.word	0x2000346c
 800f3e8:	20003480 	.word	0x20003480
 800f3ec:	080145bc 	.word	0x080145bc
 800f3f0:	080145f4 	.word	0x080145f4
 800f3f4:	0801462c 	.word	0x0801462c
 800f3f8:	08014654 	.word	0x08014654

0800f3fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	460b      	mov	r3, r1
 800f406:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f408:	78fb      	ldrb	r3, [r7, #3]
 800f40a:	461a      	mov	r2, r3
 800f40c:	2103      	movs	r1, #3
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f814 	bl	800f43c <icmp_send_response>
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	460b      	mov	r3, r1
 800f426:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f428:	78fb      	ldrb	r3, [r7, #3]
 800f42a:	461a      	mov	r2, r3
 800f42c:	210b      	movs	r1, #11
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f804 	bl	800f43c <icmp_send_response>
}
 800f434:	bf00      	nop
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b08c      	sub	sp, #48	; 0x30
 800f440:	af04      	add	r7, sp, #16
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	460b      	mov	r3, r1
 800f446:	70fb      	strb	r3, [r7, #3]
 800f448:	4613      	mov	r3, r2
 800f44a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f44c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f450:	2124      	movs	r1, #36	; 0x24
 800f452:	2022      	movs	r0, #34	; 0x22
 800f454:	f7f8 f9c4 	bl	80077e0 <pbuf_alloc>
 800f458:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d04c      	beq.n	800f4fa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	895b      	ldrh	r3, [r3, #10]
 800f464:	2b23      	cmp	r3, #35	; 0x23
 800f466:	d806      	bhi.n	800f476 <icmp_send_response+0x3a>
 800f468:	4b26      	ldr	r3, [pc, #152]	; (800f504 <icmp_send_response+0xc8>)
 800f46a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f46e:	4926      	ldr	r1, [pc, #152]	; (800f508 <icmp_send_response+0xcc>)
 800f470:	4826      	ldr	r0, [pc, #152]	; (800f50c <icmp_send_response+0xd0>)
 800f472:	f001 fe69 	bl	8011148 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	78fa      	ldrb	r2, [r7, #3]
 800f486:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	78ba      	ldrb	r2, [r7, #2]
 800f48c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2200      	movs	r2, #0
 800f492:	711a      	strb	r2, [r3, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	2200      	movs	r2, #0
 800f49c:	719a      	strb	r2, [r3, #6]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	f103 0008 	add.w	r0, r3, #8
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	221c      	movs	r2, #28
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	f001 fa81 	bl	80109b8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f4bc:	f107 030c 	add.w	r3, r7, #12
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 f825 	bl	800f510 <ip4_route>
 800f4c6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d011      	beq.n	800f4f2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	709a      	strb	r2, [r3, #2]
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f4d8:	f107 020c 	add.w	r2, r7, #12
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	9302      	str	r3, [sp, #8]
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	23ff      	movs	r3, #255	; 0xff
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	69f8      	ldr	r0, [r7, #28]
 800f4ee:	f000 f9cd 	bl	800f88c <ip4_output_if>
  }
  pbuf_free(q);
 800f4f2:	69f8      	ldr	r0, [r7, #28]
 800f4f4:	f7f8 fc58 	bl	8007da8 <pbuf_free>
 800f4f8:	e000      	b.n	800f4fc <icmp_send_response+0xc0>
    return;
 800f4fa:	bf00      	nop
}
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	080145bc 	.word	0x080145bc
 800f508:	08014688 	.word	0x08014688
 800f50c:	0801462c 	.word	0x0801462c

0800f510 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f510:	b480      	push	{r7}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f518:	4b33      	ldr	r3, [pc, #204]	; (800f5e8 <ip4_route+0xd8>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	60fb      	str	r3, [r7, #12]
 800f51e:	e036      	b.n	800f58e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f526:	f003 0301 	and.w	r3, r3, #1
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d02b      	beq.n	800f588 <ip4_route+0x78>
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f536:	089b      	lsrs	r3, r3, #2
 800f538:	f003 0301 	and.w	r3, r3, #1
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d022      	beq.n	800f588 <ip4_route+0x78>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	3304      	adds	r3, #4
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d01d      	beq.n	800f588 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	3304      	adds	r3, #4
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	405a      	eors	r2, r3
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	3308      	adds	r3, #8
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4013      	ands	r3, r2
 800f560:	2b00      	cmp	r3, #0
 800f562:	d101      	bne.n	800f568 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	e038      	b.n	800f5da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f56e:	f003 0302 	and.w	r3, r3, #2
 800f572:	2b00      	cmp	r3, #0
 800f574:	d108      	bne.n	800f588 <ip4_route+0x78>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	330c      	adds	r3, #12
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	429a      	cmp	r2, r3
 800f582:	d101      	bne.n	800f588 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	e028      	b.n	800f5da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	60fb      	str	r3, [r7, #12]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d1c5      	bne.n	800f520 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f594:	4b15      	ldr	r3, [pc, #84]	; (800f5ec <ip4_route+0xdc>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d01a      	beq.n	800f5d2 <ip4_route+0xc2>
 800f59c:	4b13      	ldr	r3, [pc, #76]	; (800f5ec <ip4_route+0xdc>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f5a4:	f003 0301 	and.w	r3, r3, #1
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d012      	beq.n	800f5d2 <ip4_route+0xc2>
 800f5ac:	4b0f      	ldr	r3, [pc, #60]	; (800f5ec <ip4_route+0xdc>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f5b4:	f003 0304 	and.w	r3, r3, #4
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00a      	beq.n	800f5d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f5bc:	4b0b      	ldr	r3, [pc, #44]	; (800f5ec <ip4_route+0xdc>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	3304      	adds	r3, #4
 800f5c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d004      	beq.n	800f5d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f5d0:	d101      	bne.n	800f5d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	e001      	b.n	800f5da <ip4_route+0xca>
  }

  return netif_default;
 800f5d6:	4b05      	ldr	r3, [pc, #20]	; (800f5ec <ip4_route+0xdc>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3714      	adds	r7, #20
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	20008b60 	.word	0x20008b60
 800f5ec:	20008b64 	.word	0x20008b64

0800f5f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	b2db      	uxtb	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d016      	beq.n	800f636 <ip4_input_accept+0x46>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3304      	adds	r3, #4
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d011      	beq.n	800f636 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f612:	4b0b      	ldr	r3, [pc, #44]	; (800f640 <ip4_input_accept+0x50>)
 800f614:	695a      	ldr	r2, [r3, #20]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	3304      	adds	r3, #4
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d008      	beq.n	800f632 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f620:	4b07      	ldr	r3, [pc, #28]	; (800f640 <ip4_input_accept+0x50>)
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	6879      	ldr	r1, [r7, #4]
 800f626:	4618      	mov	r0, r3
 800f628:	f000 fa08 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800f62c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f632:	2301      	movs	r3, #1
 800f634:	e000      	b.n	800f638 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	2000346c 	.word	0x2000346c

0800f644 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	091b      	lsrs	r3, r3, #4
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d004      	beq.n	800f66a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7f8 fba1 	bl	8007da8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f666:	2300      	movs	r3, #0
 800f668:	e107      	b.n	800f87a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	f003 030f 	and.w	r3, r3, #15
 800f672:	b2db      	uxtb	r3, r3
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	b2db      	uxtb	r3, r3
 800f678:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	885b      	ldrh	r3, [r3, #2]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4618      	mov	r0, r3
 800f682:	f7f7 f8dd 	bl	8006840 <lwip_htons>
 800f686:	4603      	mov	r3, r0
 800f688:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	891b      	ldrh	r3, [r3, #8]
 800f68e:	89ba      	ldrh	r2, [r7, #12]
 800f690:	429a      	cmp	r2, r3
 800f692:	d204      	bcs.n	800f69e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f694:	89bb      	ldrh	r3, [r7, #12]
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7f8 f9ff 	bl	8007a9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	895b      	ldrh	r3, [r3, #10]
 800f6a2:	89fa      	ldrh	r2, [r7, #14]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d807      	bhi.n	800f6b8 <ip4_input+0x74>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	891b      	ldrh	r3, [r3, #8]
 800f6ac:	89ba      	ldrh	r2, [r7, #12]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d802      	bhi.n	800f6b8 <ip4_input+0x74>
 800f6b2:	89fb      	ldrh	r3, [r7, #14]
 800f6b4:	2b13      	cmp	r3, #19
 800f6b6:	d804      	bhi.n	800f6c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7f8 fb75 	bl	8007da8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e0db      	b.n	800f87a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	691b      	ldr	r3, [r3, #16]
 800f6c6:	4a6f      	ldr	r2, [pc, #444]	; (800f884 <ip4_input+0x240>)
 800f6c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	4a6d      	ldr	r2, [pc, #436]	; (800f884 <ip4_input+0x240>)
 800f6d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f6d2:	4b6c      	ldr	r3, [pc, #432]	; (800f884 <ip4_input+0x240>)
 800f6d4:	695b      	ldr	r3, [r3, #20]
 800f6d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6da:	2be0      	cmp	r3, #224	; 0xe0
 800f6dc:	d112      	bne.n	800f704 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d007      	beq.n	800f6fe <ip4_input+0xba>
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	3304      	adds	r3, #4
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d002      	beq.n	800f6fe <ip4_input+0xba>
      netif = inp;
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	613b      	str	r3, [r7, #16]
 800f6fc:	e02a      	b.n	800f754 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f6fe:	2300      	movs	r3, #0
 800f700:	613b      	str	r3, [r7, #16]
 800f702:	e027      	b.n	800f754 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f704:	6838      	ldr	r0, [r7, #0]
 800f706:	f7ff ff73 	bl	800f5f0 <ip4_input_accept>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d002      	beq.n	800f716 <ip4_input+0xd2>
      netif = inp;
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	613b      	str	r3, [r7, #16]
 800f714:	e01e      	b.n	800f754 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f716:	2300      	movs	r3, #0
 800f718:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f71a:	4b5a      	ldr	r3, [pc, #360]	; (800f884 <ip4_input+0x240>)
 800f71c:	695b      	ldr	r3, [r3, #20]
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	2b7f      	cmp	r3, #127	; 0x7f
 800f722:	d017      	beq.n	800f754 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f724:	4b58      	ldr	r3, [pc, #352]	; (800f888 <ip4_input+0x244>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	613b      	str	r3, [r7, #16]
 800f72a:	e00e      	b.n	800f74a <ip4_input+0x106>
          if (netif == inp) {
 800f72c:	693a      	ldr	r2, [r7, #16]
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	429a      	cmp	r2, r3
 800f732:	d006      	beq.n	800f742 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f734:	6938      	ldr	r0, [r7, #16]
 800f736:	f7ff ff5b 	bl	800f5f0 <ip4_input_accept>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d108      	bne.n	800f752 <ip4_input+0x10e>
 800f740:	e000      	b.n	800f744 <ip4_input+0x100>
            continue;
 800f742:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	613b      	str	r3, [r7, #16]
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1ed      	bne.n	800f72c <ip4_input+0xe8>
 800f750:	e000      	b.n	800f754 <ip4_input+0x110>
            break;
 800f752:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f754:	4b4b      	ldr	r3, [pc, #300]	; (800f884 <ip4_input+0x240>)
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	6839      	ldr	r1, [r7, #0]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 f96e 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d105      	bne.n	800f772 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f766:	4b47      	ldr	r3, [pc, #284]	; (800f884 <ip4_input+0x240>)
 800f768:	691b      	ldr	r3, [r3, #16]
 800f76a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f76e:	2be0      	cmp	r3, #224	; 0xe0
 800f770:	d104      	bne.n	800f77c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f7f8 fb18 	bl	8007da8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f778:	2300      	movs	r3, #0
 800f77a:	e07e      	b.n	800f87a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d104      	bne.n	800f78c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7f8 fb10 	bl	8007da8 <pbuf_free>
    return ERR_OK;
 800f788:	2300      	movs	r3, #0
 800f78a:	e076      	b.n	800f87a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	88db      	ldrh	r3, [r3, #6]
 800f790:	b29b      	uxth	r3, r3
 800f792:	461a      	mov	r2, r3
 800f794:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f798:	4013      	ands	r3, r2
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00b      	beq.n	800f7b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fc92 	bl	80100c8 <ip4_reass>
 800f7a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d101      	bne.n	800f7b0 <ip4_input+0x16c>
      return ERR_OK;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	e064      	b.n	800f87a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f7b6:	4a33      	ldr	r2, [pc, #204]	; (800f884 <ip4_input+0x240>)
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f7bc:	4a31      	ldr	r2, [pc, #196]	; (800f884 <ip4_input+0x240>)
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f7c2:	4a30      	ldr	r2, [pc, #192]	; (800f884 <ip4_input+0x240>)
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	f003 030f 	and.w	r3, r3, #15
 800f7d0:	b2db      	uxtb	r3, r3
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	4b2a      	ldr	r3, [pc, #168]	; (800f884 <ip4_input+0x240>)
 800f7da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f7dc:	89fb      	ldrh	r3, [r7, #14]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f7f8 fa5b 	bl	8007c9c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	7a5b      	ldrb	r3, [r3, #9]
 800f7ea:	2b11      	cmp	r3, #17
 800f7ec:	d006      	beq.n	800f7fc <ip4_input+0x1b8>
 800f7ee:	2b11      	cmp	r3, #17
 800f7f0:	dc13      	bgt.n	800f81a <ip4_input+0x1d6>
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d00c      	beq.n	800f810 <ip4_input+0x1cc>
 800f7f6:	2b06      	cmp	r3, #6
 800f7f8:	d005      	beq.n	800f806 <ip4_input+0x1c2>
 800f7fa:	e00e      	b.n	800f81a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f7fc:	6839      	ldr	r1, [r7, #0]
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f7fe f952 	bl	800daa8 <udp_input>
        break;
 800f804:	e026      	b.n	800f854 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f806:	6839      	ldr	r1, [r7, #0]
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7fa f997 	bl	8009b3c <tcp_input>
        break;
 800f80e:	e021      	b.n	800f854 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7ff fcf0 	bl	800f1f8 <icmp_input>
        break;
 800f818:	e01c      	b.n	800f854 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f81a:	4b1a      	ldr	r3, [pc, #104]	; (800f884 <ip4_input+0x240>)
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	6939      	ldr	r1, [r7, #16]
 800f820:	4618      	mov	r0, r3
 800f822:	f000 f90b 	bl	800fa3c <ip4_addr_isbroadcast_u32>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10f      	bne.n	800f84c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f82c:	4b15      	ldr	r3, [pc, #84]	; (800f884 <ip4_input+0x240>)
 800f82e:	695b      	ldr	r3, [r3, #20]
 800f830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f834:	2be0      	cmp	r3, #224	; 0xe0
 800f836:	d009      	beq.n	800f84c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f83c:	4619      	mov	r1, r3
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7f8 fa9f 	bl	8007d82 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f844:	2102      	movs	r1, #2
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff fdd8 	bl	800f3fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7f8 faab 	bl	8007da8 <pbuf_free>
        break;
 800f852:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f854:	4b0b      	ldr	r3, [pc, #44]	; (800f884 <ip4_input+0x240>)
 800f856:	2200      	movs	r2, #0
 800f858:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f85a:	4b0a      	ldr	r3, [pc, #40]	; (800f884 <ip4_input+0x240>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f860:	4b08      	ldr	r3, [pc, #32]	; (800f884 <ip4_input+0x240>)
 800f862:	2200      	movs	r2, #0
 800f864:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f866:	4b07      	ldr	r3, [pc, #28]	; (800f884 <ip4_input+0x240>)
 800f868:	2200      	movs	r2, #0
 800f86a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f86c:	4b05      	ldr	r3, [pc, #20]	; (800f884 <ip4_input+0x240>)
 800f86e:	2200      	movs	r2, #0
 800f870:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f872:	4b04      	ldr	r3, [pc, #16]	; (800f884 <ip4_input+0x240>)
 800f874:	2200      	movs	r2, #0
 800f876:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	2000346c 	.word	0x2000346c
 800f888:	20008b60 	.word	0x20008b60

0800f88c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b08a      	sub	sp, #40	; 0x28
 800f890:	af04      	add	r7, sp, #16
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
 800f898:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d009      	beq.n	800f8b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d003      	beq.n	800f8b2 <ip4_output_if+0x26>
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d102      	bne.n	800f8b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	3304      	adds	r3, #4
 800f8b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f8b8:	78fa      	ldrb	r2, [r7, #3]
 800f8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8bc:	9302      	str	r3, [sp, #8]
 800f8be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f8c2:	9301      	str	r3, [sp, #4]
 800f8c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f8c8:	9300      	str	r3, [sp, #0]
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	6979      	ldr	r1, [r7, #20]
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f000 f805 	bl	800f8e0 <ip4_output_if_src>
 800f8d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3718      	adds	r7, #24
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b088      	sub	sp, #32
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	60f8      	str	r0, [r7, #12]
 800f8e8:	60b9      	str	r1, [r7, #8]
 800f8ea:	607a      	str	r2, [r7, #4]
 800f8ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	7b9b      	ldrb	r3, [r3, #14]
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d006      	beq.n	800f904 <ip4_output_if_src+0x24>
 800f8f6:	4b4b      	ldr	r3, [pc, #300]	; (800fa24 <ip4_output_if_src+0x144>)
 800f8f8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f8fc:	494a      	ldr	r1, [pc, #296]	; (800fa28 <ip4_output_if_src+0x148>)
 800f8fe:	484b      	ldr	r0, [pc, #300]	; (800fa2c <ip4_output_if_src+0x14c>)
 800f900:	f001 fc22 	bl	8011148 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d060      	beq.n	800f9cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f90a:	2314      	movs	r3, #20
 800f90c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f90e:	2114      	movs	r1, #20
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f7f8 f9b3 	bl	8007c7c <pbuf_add_header>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d002      	beq.n	800f922 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f91c:	f06f 0301 	mvn.w	r3, #1
 800f920:	e07c      	b.n	800fa1c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	895b      	ldrh	r3, [r3, #10]
 800f92c:	2b13      	cmp	r3, #19
 800f92e:	d806      	bhi.n	800f93e <ip4_output_if_src+0x5e>
 800f930:	4b3c      	ldr	r3, [pc, #240]	; (800fa24 <ip4_output_if_src+0x144>)
 800f932:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f936:	493e      	ldr	r1, [pc, #248]	; (800fa30 <ip4_output_if_src+0x150>)
 800f938:	483c      	ldr	r0, [pc, #240]	; (800fa2c <ip4_output_if_src+0x14c>)
 800f93a:	f001 fc05 	bl	8011148 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	78fa      	ldrb	r2, [r7, #3]
 800f942:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f94a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f954:	8b7b      	ldrh	r3, [r7, #26]
 800f956:	089b      	lsrs	r3, r3, #2
 800f958:	b29b      	uxth	r3, r3
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f960:	b2da      	uxtb	r2, r3
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f96c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	891b      	ldrh	r3, [r3, #8]
 800f972:	4618      	mov	r0, r3
 800f974:	f7f6 ff64 	bl	8006840 <lwip_htons>
 800f978:	4603      	mov	r3, r0
 800f97a:	461a      	mov	r2, r3
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	2200      	movs	r2, #0
 800f984:	719a      	strb	r2, [r3, #6]
 800f986:	2200      	movs	r2, #0
 800f988:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f98a:	4b2a      	ldr	r3, [pc, #168]	; (800fa34 <ip4_output_if_src+0x154>)
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f6 ff56 	bl	8006840 <lwip_htons>
 800f994:	4603      	mov	r3, r0
 800f996:	461a      	mov	r2, r3
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f99c:	4b25      	ldr	r3, [pc, #148]	; (800fa34 <ip4_output_if_src+0x154>)
 800f99e:	881b      	ldrh	r3, [r3, #0]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	b29a      	uxth	r2, r3
 800f9a4:	4b23      	ldr	r3, [pc, #140]	; (800fa34 <ip4_output_if_src+0x154>)
 800f9a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d104      	bne.n	800f9b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f9ae:	4b22      	ldr	r3, [pc, #136]	; (800fa38 <ip4_output_if_src+0x158>)
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	60da      	str	r2, [r3, #12]
 800f9b6:	e003      	b.n	800f9c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	729a      	strb	r2, [r3, #10]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	72da      	strb	r2, [r3, #11]
 800f9ca:	e00f      	b.n	800f9ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	895b      	ldrh	r3, [r3, #10]
 800f9d0:	2b13      	cmp	r3, #19
 800f9d2:	d802      	bhi.n	800f9da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f9d4:	f06f 0301 	mvn.w	r3, #1
 800f9d8:	e020      	b.n	800fa1c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f9e6:	f107 0314 	add.w	r3, r7, #20
 800f9ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00c      	beq.n	800fa0e <ip4_output_if_src+0x12e>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	891a      	ldrh	r2, [r3, #8]
 800f9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d906      	bls.n	800fa0e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fa00:	687a      	ldr	r2, [r7, #4]
 800fa02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f000 fd4d 	bl	80104a4 <ip4_frag>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	e006      	b.n	800fa1c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa10:	695b      	ldr	r3, [r3, #20]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	68f9      	ldr	r1, [r7, #12]
 800fa16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa18:	4798      	blx	r3
 800fa1a:	4603      	mov	r3, r0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3720      	adds	r7, #32
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	080146b4 	.word	0x080146b4
 800fa28:	080146e8 	.word	0x080146e8
 800fa2c:	080146f4 	.word	0x080146f4
 800fa30:	0801471c 	.word	0x0801471c
 800fa34:	20000266 	.word	0x20000266
 800fa38:	08014b00 	.word	0x08014b00

0800fa3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b085      	sub	sp, #20
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa50:	d002      	beq.n	800fa58 <ip4_addr_isbroadcast_u32+0x1c>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d101      	bne.n	800fa5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	e02a      	b.n	800fab2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa62:	f003 0302 	and.w	r3, r3, #2
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d101      	bne.n	800fa6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	e021      	b.n	800fab2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	3304      	adds	r3, #4
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	687a      	ldr	r2, [r7, #4]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d101      	bne.n	800fa7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	e019      	b.n	800fab2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	3304      	adds	r3, #4
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	405a      	eors	r2, r3
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	3308      	adds	r3, #8
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	4013      	ands	r3, r2
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10d      	bne.n	800fab0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	3308      	adds	r3, #8
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	43da      	mvns	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	3308      	adds	r3, #8
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d101      	bne.n	800fab0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800faac:	2301      	movs	r3, #1
 800faae:	e000      	b.n	800fab2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fab0:	2300      	movs	r3, #0
  }
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3714      	adds	r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr
	...

0800fac0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800faca:	4b12      	ldr	r3, [pc, #72]	; (800fb14 <ip_reass_tmr+0x54>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fad0:	e018      	b.n	800fb04 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	7fdb      	ldrb	r3, [r3, #31]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00b      	beq.n	800faf2 <ip_reass_tmr+0x32>
      r->timer--;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	7fdb      	ldrb	r3, [r3, #31]
 800fade:	3b01      	subs	r3, #1
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	60fb      	str	r3, [r7, #12]
 800faf0:	e008      	b.n	800fb04 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fafc:	68b9      	ldr	r1, [r7, #8]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f80a 	bl	800fb18 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1e3      	bne.n	800fad2 <ip_reass_tmr+0x12>
    }
  }
}
 800fb0a:	bf00      	nop
 800fb0c:	bf00      	nop
 800fb0e:	3710      	adds	r7, #16
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	20000268 	.word	0x20000268

0800fb18 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b088      	sub	sp, #32
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fb22:	2300      	movs	r3, #0
 800fb24:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fb26:	683a      	ldr	r2, [r7, #0]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d105      	bne.n	800fb3a <ip_reass_free_complete_datagram+0x22>
 800fb2e:	4b45      	ldr	r3, [pc, #276]	; (800fc44 <ip_reass_free_complete_datagram+0x12c>)
 800fb30:	22ab      	movs	r2, #171	; 0xab
 800fb32:	4945      	ldr	r1, [pc, #276]	; (800fc48 <ip_reass_free_complete_datagram+0x130>)
 800fb34:	4845      	ldr	r0, [pc, #276]	; (800fc4c <ip_reass_free_complete_datagram+0x134>)
 800fb36:	f001 fb07 	bl	8011148 <iprintf>
  if (prev != NULL) {
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d00a      	beq.n	800fb56 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d005      	beq.n	800fb56 <ip_reass_free_complete_datagram+0x3e>
 800fb4a:	4b3e      	ldr	r3, [pc, #248]	; (800fc44 <ip_reass_free_complete_datagram+0x12c>)
 800fb4c:	22ad      	movs	r2, #173	; 0xad
 800fb4e:	4940      	ldr	r1, [pc, #256]	; (800fc50 <ip_reass_free_complete_datagram+0x138>)
 800fb50:	483e      	ldr	r0, [pc, #248]	; (800fc4c <ip_reass_free_complete_datagram+0x134>)
 800fb52:	f001 faf9 	bl	8011148 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	889b      	ldrh	r3, [r3, #4]
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d12a      	bne.n	800fbbe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	6858      	ldr	r0, [r3, #4]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	3308      	adds	r3, #8
 800fb7e:	2214      	movs	r2, #20
 800fb80:	4619      	mov	r1, r3
 800fb82:	f000 ff19 	bl	80109b8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fb86:	2101      	movs	r1, #1
 800fb88:	69b8      	ldr	r0, [r7, #24]
 800fb8a:	f7ff fc47 	bl	800f41c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fb8e:	69b8      	ldr	r0, [r7, #24]
 800fb90:	f7f8 f992 	bl	8007eb8 <pbuf_clen>
 800fb94:	4603      	mov	r3, r0
 800fb96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fb98:	8bfa      	ldrh	r2, [r7, #30]
 800fb9a:	8a7b      	ldrh	r3, [r7, #18]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fba2:	db05      	blt.n	800fbb0 <ip_reass_free_complete_datagram+0x98>
 800fba4:	4b27      	ldr	r3, [pc, #156]	; (800fc44 <ip_reass_free_complete_datagram+0x12c>)
 800fba6:	22bc      	movs	r2, #188	; 0xbc
 800fba8:	492a      	ldr	r1, [pc, #168]	; (800fc54 <ip_reass_free_complete_datagram+0x13c>)
 800fbaa:	4828      	ldr	r0, [pc, #160]	; (800fc4c <ip_reass_free_complete_datagram+0x134>)
 800fbac:	f001 facc 	bl	8011148 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fbb0:	8bfa      	ldrh	r2, [r7, #30]
 800fbb2:	8a7b      	ldrh	r3, [r7, #18]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fbb8:	69b8      	ldr	r0, [r7, #24]
 800fbba:	f7f8 f8f5 	bl	8007da8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fbc4:	e01f      	b.n	800fc06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f7f8 f96e 	bl	8007eb8 <pbuf_clen>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fbe0:	8bfa      	ldrh	r2, [r7, #30]
 800fbe2:	8a7b      	ldrh	r3, [r7, #18]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbea:	db05      	blt.n	800fbf8 <ip_reass_free_complete_datagram+0xe0>
 800fbec:	4b15      	ldr	r3, [pc, #84]	; (800fc44 <ip_reass_free_complete_datagram+0x12c>)
 800fbee:	22cc      	movs	r2, #204	; 0xcc
 800fbf0:	4918      	ldr	r1, [pc, #96]	; (800fc54 <ip_reass_free_complete_datagram+0x13c>)
 800fbf2:	4816      	ldr	r0, [pc, #88]	; (800fc4c <ip_reass_free_complete_datagram+0x134>)
 800fbf4:	f001 faa8 	bl	8011148 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800fbf8:	8bfa      	ldrh	r2, [r7, #30]
 800fbfa:	8a7b      	ldrh	r3, [r7, #18]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f7f8 f8d1 	bl	8007da8 <pbuf_free>
  while (p != NULL) {
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1dc      	bne.n	800fbc6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800fc0c:	6839      	ldr	r1, [r7, #0]
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f8c2 	bl	800fd98 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800fc14:	4b10      	ldr	r3, [pc, #64]	; (800fc58 <ip_reass_free_complete_datagram+0x140>)
 800fc16:	881b      	ldrh	r3, [r3, #0]
 800fc18:	8bfa      	ldrh	r2, [r7, #30]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d905      	bls.n	800fc2a <ip_reass_free_complete_datagram+0x112>
 800fc1e:	4b09      	ldr	r3, [pc, #36]	; (800fc44 <ip_reass_free_complete_datagram+0x12c>)
 800fc20:	22d2      	movs	r2, #210	; 0xd2
 800fc22:	490e      	ldr	r1, [pc, #56]	; (800fc5c <ip_reass_free_complete_datagram+0x144>)
 800fc24:	4809      	ldr	r0, [pc, #36]	; (800fc4c <ip_reass_free_complete_datagram+0x134>)
 800fc26:	f001 fa8f 	bl	8011148 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800fc2a:	4b0b      	ldr	r3, [pc, #44]	; (800fc58 <ip_reass_free_complete_datagram+0x140>)
 800fc2c:	881a      	ldrh	r2, [r3, #0]
 800fc2e:	8bfb      	ldrh	r3, [r7, #30]
 800fc30:	1ad3      	subs	r3, r2, r3
 800fc32:	b29a      	uxth	r2, r3
 800fc34:	4b08      	ldr	r3, [pc, #32]	; (800fc58 <ip_reass_free_complete_datagram+0x140>)
 800fc36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800fc38:	8bfb      	ldrh	r3, [r7, #30]
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3720      	adds	r7, #32
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	0801474c 	.word	0x0801474c
 800fc48:	08014788 	.word	0x08014788
 800fc4c:	08014794 	.word	0x08014794
 800fc50:	080147bc 	.word	0x080147bc
 800fc54:	080147d0 	.word	0x080147d0
 800fc58:	2000026c 	.word	0x2000026c
 800fc5c:	080147f0 	.word	0x080147f0

0800fc60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b08a      	sub	sp, #40	; 0x28
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800fc72:	2300      	movs	r3, #0
 800fc74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800fc76:	2300      	movs	r3, #0
 800fc78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800fc7e:	4b28      	ldr	r3, [pc, #160]	; (800fd20 <ip_reass_remove_oldest_datagram+0xc0>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fc84:	e030      	b.n	800fce8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc88:	695a      	ldr	r2, [r3, #20]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d10c      	bne.n	800fcac <ip_reass_remove_oldest_datagram+0x4c>
 800fc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc94:	699a      	ldr	r2, [r3, #24]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d106      	bne.n	800fcac <ip_reass_remove_oldest_datagram+0x4c>
 800fc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca0:	899a      	ldrh	r2, [r3, #12]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	889b      	ldrh	r3, [r3, #4]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d014      	beq.n	800fcd6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800fcb2:	6a3b      	ldr	r3, [r7, #32]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d104      	bne.n	800fcc2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800fcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	61bb      	str	r3, [r7, #24]
 800fcc0:	e009      	b.n	800fcd6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc4:	7fda      	ldrb	r2, [r3, #31]
 800fcc6:	6a3b      	ldr	r3, [r7, #32]
 800fcc8:	7fdb      	ldrb	r3, [r3, #31]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d803      	bhi.n	800fcd6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800fcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800fcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800fce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d1cb      	bne.n	800fc86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fcee:	6a3b      	ldr	r3, [r7, #32]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d008      	beq.n	800fd06 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fcf4:	69b9      	ldr	r1, [r7, #24]
 800fcf6:	6a38      	ldr	r0, [r7, #32]
 800fcf8:	f7ff ff0e 	bl	800fb18 <ip_reass_free_complete_datagram>
 800fcfc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fcfe:	697a      	ldr	r2, [r7, #20]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	4413      	add	r3, r2
 800fd04:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fd06:	697a      	ldr	r2, [r7, #20]
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	da02      	bge.n	800fd14 <ip_reass_remove_oldest_datagram+0xb4>
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	dcac      	bgt.n	800fc6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fd14:	697b      	ldr	r3, [r7, #20]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3728      	adds	r7, #40	; 0x28
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	20000268 	.word	0x20000268

0800fd24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fd2e:	2004      	movs	r0, #4
 800fd30:	f7f7 f9dc 	bl	80070ec <memp_malloc>
 800fd34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d110      	bne.n	800fd5e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fd3c:	6839      	ldr	r1, [r7, #0]
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff ff8e 	bl	800fc60 <ip_reass_remove_oldest_datagram>
 800fd44:	4602      	mov	r2, r0
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	dc03      	bgt.n	800fd54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fd4c:	2004      	movs	r0, #4
 800fd4e:	f7f7 f9cd 	bl	80070ec <memp_malloc>
 800fd52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d101      	bne.n	800fd5e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	e016      	b.n	800fd8c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fd5e:	2220      	movs	r2, #32
 800fd60:	2100      	movs	r1, #0
 800fd62:	68f8      	ldr	r0, [r7, #12]
 800fd64:	f000 fe50 	bl	8010a08 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	220f      	movs	r2, #15
 800fd6c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fd6e:	4b09      	ldr	r3, [pc, #36]	; (800fd94 <ip_reass_enqueue_new_datagram+0x70>)
 800fd70:	681a      	ldr	r2, [r3, #0]
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fd76:	4a07      	ldr	r2, [pc, #28]	; (800fd94 <ip_reass_enqueue_new_datagram+0x70>)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	3308      	adds	r3, #8
 800fd80:	2214      	movs	r2, #20
 800fd82:	6879      	ldr	r1, [r7, #4]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f000 fe17 	bl	80109b8 <memcpy>
  return ipr;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	20000268 	.word	0x20000268

0800fd98 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fda2:	4b10      	ldr	r3, [pc, #64]	; (800fde4 <ip_reass_dequeue_datagram+0x4c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d104      	bne.n	800fdb6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a0c      	ldr	r2, [pc, #48]	; (800fde4 <ip_reass_dequeue_datagram+0x4c>)
 800fdb2:	6013      	str	r3, [r2, #0]
 800fdb4:	e00d      	b.n	800fdd2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d106      	bne.n	800fdca <ip_reass_dequeue_datagram+0x32>
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <ip_reass_dequeue_datagram+0x50>)
 800fdbe:	f240 1245 	movw	r2, #325	; 0x145
 800fdc2:	490a      	ldr	r1, [pc, #40]	; (800fdec <ip_reass_dequeue_datagram+0x54>)
 800fdc4:	480a      	ldr	r0, [pc, #40]	; (800fdf0 <ip_reass_dequeue_datagram+0x58>)
 800fdc6:	f001 f9bf 	bl	8011148 <iprintf>
    prev->next = ipr->next;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fdd2:	6879      	ldr	r1, [r7, #4]
 800fdd4:	2004      	movs	r0, #4
 800fdd6:	f7f7 f9d5 	bl	8007184 <memp_free>
}
 800fdda:	bf00      	nop
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	20000268 	.word	0x20000268
 800fde8:	0801474c 	.word	0x0801474c
 800fdec:	08014814 	.word	0x08014814
 800fdf0:	08014794 	.word	0x08014794

0800fdf4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b08c      	sub	sp, #48	; 0x30
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	60b9      	str	r1, [r7, #8]
 800fdfe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fe00:	2300      	movs	r3, #0
 800fe02:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fe04:	2301      	movs	r3, #1
 800fe06:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	885b      	ldrh	r3, [r3, #2]
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7f6 fd13 	bl	8006840 <lwip_htons>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	f003 030f 	and.w	r3, r3, #15
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fe2c:	7e7b      	ldrb	r3, [r7, #25]
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	8b7a      	ldrh	r2, [r7, #26]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d202      	bcs.n	800fe3c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe36:	f04f 33ff 	mov.w	r3, #4294967295
 800fe3a:	e135      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fe3c:	7e7b      	ldrb	r3, [r7, #25]
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	8b7a      	ldrh	r2, [r7, #26]
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	88db      	ldrh	r3, [r3, #6]
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7f6 fcf7 	bl	8006840 <lwip_htons>
 800fe52:	4603      	mov	r3, r0
 800fe54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800fe64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe66:	2200      	movs	r2, #0
 800fe68:	701a      	strb	r2, [r3, #0]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	705a      	strb	r2, [r3, #1]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	709a      	strb	r2, [r3, #2]
 800fe72:	2200      	movs	r2, #0
 800fe74:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fe76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe78:	8afa      	ldrh	r2, [r7, #22]
 800fe7a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fe7c:	8afa      	ldrh	r2, [r7, #22]
 800fe7e:	8b7b      	ldrh	r3, [r7, #26]
 800fe80:	4413      	add	r3, r2
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe86:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fe88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8a:	88db      	ldrh	r3, [r3, #6]
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	8afa      	ldrh	r2, [r7, #22]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d902      	bls.n	800fe9a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fe94:	f04f 33ff 	mov.w	r3, #4294967295
 800fe98:	e106      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	627b      	str	r3, [r7, #36]	; 0x24
 800fea0:	e068      	b.n	800ff74 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feaa:	889b      	ldrh	r3, [r3, #4]
 800feac:	b29a      	uxth	r2, r3
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	889b      	ldrh	r3, [r3, #4]
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d235      	bcs.n	800ff24 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800feb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800febc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d020      	beq.n	800ff06 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec6:	889b      	ldrh	r3, [r3, #4]
 800fec8:	b29a      	uxth	r2, r3
 800feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fecc:	88db      	ldrh	r3, [r3, #6]
 800fece:	b29b      	uxth	r3, r3
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d307      	bcc.n	800fee4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed6:	88db      	ldrh	r3, [r3, #6]
 800fed8:	b29a      	uxth	r2, r3
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	889b      	ldrh	r3, [r3, #4]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d902      	bls.n	800feea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fee4:	f04f 33ff 	mov.w	r3, #4294967295
 800fee8:	e0de      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800feea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feec:	68ba      	ldr	r2, [r7, #8]
 800feee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	88db      	ldrh	r3, [r3, #6]
 800fef4:	b29a      	uxth	r2, r3
 800fef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef8:	889b      	ldrh	r3, [r3, #4]
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d03d      	beq.n	800ff7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ff00:	2300      	movs	r3, #0
 800ff02:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ff04:	e03a      	b.n	800ff7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800ff06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff08:	88db      	ldrh	r3, [r3, #6]
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	889b      	ldrh	r3, [r3, #4]
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d902      	bls.n	800ff1c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff16:	f04f 33ff 	mov.w	r3, #4294967295
 800ff1a:	e0c5      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	68ba      	ldr	r2, [r7, #8]
 800ff20:	605a      	str	r2, [r3, #4]
      break;
 800ff22:	e02b      	b.n	800ff7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800ff24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff26:	889b      	ldrh	r3, [r3, #4]
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	889b      	ldrh	r3, [r3, #4]
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	429a      	cmp	r2, r3
 800ff32:	d102      	bne.n	800ff3a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff34:	f04f 33ff 	mov.w	r3, #4294967295
 800ff38:	e0b6      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ff3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3c:	889b      	ldrh	r3, [r3, #4]
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	88db      	ldrh	r3, [r3, #6]
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d202      	bcs.n	800ff50 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ff4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff4e:	e0ab      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ff50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d009      	beq.n	800ff6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800ff56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff58:	88db      	ldrh	r3, [r3, #6]
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	889b      	ldrh	r3, [r3, #4]
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d001      	beq.n	800ff6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ff66:	2300      	movs	r3, #0
 800ff68:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800ff74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d193      	bne.n	800fea2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800ff7a:	e000      	b.n	800ff7e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800ff7c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d12d      	bne.n	800ffe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800ff84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d01c      	beq.n	800ffc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800ff8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8c:	88db      	ldrh	r3, [r3, #6]
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	889b      	ldrh	r3, [r3, #4]
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d906      	bls.n	800ffa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800ff9a:	4b45      	ldr	r3, [pc, #276]	; (80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ff9c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ffa0:	4944      	ldr	r1, [pc, #272]	; (80100b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ffa2:	4845      	ldr	r0, [pc, #276]	; (80100b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ffa4:	f001 f8d0 	bl	8011148 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800ffa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ffae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb0:	88db      	ldrh	r3, [r3, #6]
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb6:	889b      	ldrh	r3, [r3, #4]
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d010      	beq.n	800ffe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	623b      	str	r3, [r7, #32]
 800ffc2:	e00d      	b.n	800ffe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d006      	beq.n	800ffda <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ffcc:	4b38      	ldr	r3, [pc, #224]	; (80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ffce:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ffd2:	493a      	ldr	r1, [pc, #232]	; (80100bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ffd4:	4838      	ldr	r0, [pc, #224]	; (80100b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ffd6:	f001 f8b7 	bl	8011148 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	68ba      	ldr	r2, [r7, #8]
 800ffde:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d105      	bne.n	800fff2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	7f9b      	ldrb	r3, [r3, #30]
 800ffea:	f003 0301 	and.w	r3, r3, #1
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d059      	beq.n	80100a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fff2:	6a3b      	ldr	r3, [r7, #32]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d04f      	beq.n	8010098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	685b      	ldr	r3, [r3, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d006      	beq.n	801000e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	889b      	ldrh	r3, [r3, #4]
 8010008:	b29b      	uxth	r3, r3
 801000a:	2b00      	cmp	r3, #0
 801000c:	d002      	beq.n	8010014 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	623b      	str	r3, [r7, #32]
 8010012:	e041      	b.n	8010098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010016:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801001e:	e012      	b.n	8010046 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010028:	88db      	ldrh	r3, [r3, #6]
 801002a:	b29a      	uxth	r2, r3
 801002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002e:	889b      	ldrh	r3, [r3, #4]
 8010030:	b29b      	uxth	r3, r3
 8010032:	429a      	cmp	r2, r3
 8010034:	d002      	beq.n	801003c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010036:	2300      	movs	r3, #0
 8010038:	623b      	str	r3, [r7, #32]
            break;
 801003a:	e007      	b.n	801004c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801003c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1e9      	bne.n	8010020 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801004c:	6a3b      	ldr	r3, [r7, #32]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d022      	beq.n	8010098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d106      	bne.n	8010068 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801005a:	4b15      	ldr	r3, [pc, #84]	; (80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801005c:	f240 12df 	movw	r2, #479	; 0x1df
 8010060:	4917      	ldr	r1, [pc, #92]	; (80100c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010062:	4815      	ldr	r0, [pc, #84]	; (80100b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010064:	f001 f870 	bl	8011148 <iprintf>
          LWIP_ASSERT("sanity check",
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010070:	429a      	cmp	r2, r3
 8010072:	d106      	bne.n	8010082 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010074:	4b0e      	ldr	r3, [pc, #56]	; (80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010076:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801007a:	4911      	ldr	r1, [pc, #68]	; (80100c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801007c:	480e      	ldr	r0, [pc, #56]	; (80100b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801007e:	f001 f863 	bl	8011148 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d006      	beq.n	8010098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801008a:	4b09      	ldr	r3, [pc, #36]	; (80100b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801008c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010090:	490c      	ldr	r1, [pc, #48]	; (80100c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010092:	4809      	ldr	r0, [pc, #36]	; (80100b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010094:	f001 f858 	bl	8011148 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010098:	6a3b      	ldr	r3, [r7, #32]
 801009a:	2b00      	cmp	r3, #0
 801009c:	bf14      	ite	ne
 801009e:	2301      	movne	r3, #1
 80100a0:	2300      	moveq	r3, #0
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	e000      	b.n	80100a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3730      	adds	r7, #48	; 0x30
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	0801474c 	.word	0x0801474c
 80100b4:	08014830 	.word	0x08014830
 80100b8:	08014794 	.word	0x08014794
 80100bc:	08014850 	.word	0x08014850
 80100c0:	08014888 	.word	0x08014888
 80100c4:	08014898 	.word	0x08014898

080100c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b08e      	sub	sp, #56	; 0x38
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80100d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	f003 030f 	and.w	r3, r3, #15
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	2b14      	cmp	r3, #20
 80100e6:	f040 8167 	bne.w	80103b8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80100ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ec:	88db      	ldrh	r3, [r3, #6]
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f6 fba5 	bl	8006840 <lwip_htons>
 80100f6:	4603      	mov	r3, r0
 80100f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	00db      	lsls	r3, r3, #3
 8010100:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010104:	885b      	ldrh	r3, [r3, #2]
 8010106:	b29b      	uxth	r3, r3
 8010108:	4618      	mov	r0, r3
 801010a:	f7f6 fb99 	bl	8006840 <lwip_htons>
 801010e:	4603      	mov	r3, r0
 8010110:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	f003 030f 	and.w	r3, r3, #15
 801011a:	b2db      	uxtb	r3, r3
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010122:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010126:	b29b      	uxth	r3, r3
 8010128:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801012a:	429a      	cmp	r2, r3
 801012c:	f0c0 8146 	bcc.w	80103bc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010134:	b29b      	uxth	r3, r3
 8010136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7f7 febb 	bl	8007eb8 <pbuf_clen>
 8010142:	4603      	mov	r3, r0
 8010144:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010146:	4b9f      	ldr	r3, [pc, #636]	; (80103c4 <ip4_reass+0x2fc>)
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	461a      	mov	r2, r3
 801014c:	8c3b      	ldrh	r3, [r7, #32]
 801014e:	4413      	add	r3, r2
 8010150:	2b0a      	cmp	r3, #10
 8010152:	dd10      	ble.n	8010176 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010154:	8c3b      	ldrh	r3, [r7, #32]
 8010156:	4619      	mov	r1, r3
 8010158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801015a:	f7ff fd81 	bl	800fc60 <ip_reass_remove_oldest_datagram>
 801015e:	4603      	mov	r3, r0
 8010160:	2b00      	cmp	r3, #0
 8010162:	f000 812d 	beq.w	80103c0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010166:	4b97      	ldr	r3, [pc, #604]	; (80103c4 <ip4_reass+0x2fc>)
 8010168:	881b      	ldrh	r3, [r3, #0]
 801016a:	461a      	mov	r2, r3
 801016c:	8c3b      	ldrh	r3, [r7, #32]
 801016e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010170:	2b0a      	cmp	r3, #10
 8010172:	f300 8125 	bgt.w	80103c0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010176:	4b94      	ldr	r3, [pc, #592]	; (80103c8 <ip4_reass+0x300>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	633b      	str	r3, [r7, #48]	; 0x30
 801017c:	e015      	b.n	80101aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	695a      	ldr	r2, [r3, #20]
 8010182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	429a      	cmp	r2, r3
 8010188:	d10c      	bne.n	80101a4 <ip4_reass+0xdc>
 801018a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018c:	699a      	ldr	r2, [r3, #24]
 801018e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	429a      	cmp	r2, r3
 8010194:	d106      	bne.n	80101a4 <ip4_reass+0xdc>
 8010196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010198:	899a      	ldrh	r2, [r3, #12]
 801019a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801019c:	889b      	ldrh	r3, [r3, #4]
 801019e:	b29b      	uxth	r3, r3
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d006      	beq.n	80101b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80101a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	633b      	str	r3, [r7, #48]	; 0x30
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1e6      	bne.n	801017e <ip4_reass+0xb6>
 80101b0:	e000      	b.n	80101b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80101b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80101b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d109      	bne.n	80101ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80101ba:	8c3b      	ldrh	r3, [r7, #32]
 80101bc:	4619      	mov	r1, r3
 80101be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101c0:	f7ff fdb0 	bl	800fd24 <ip_reass_enqueue_new_datagram>
 80101c4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d11c      	bne.n	8010206 <ip4_reass+0x13e>
      goto nullreturn;
 80101cc:	e109      	b.n	80103e2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80101ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d0:	88db      	ldrh	r3, [r3, #6]
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7f6 fb33 	bl	8006840 <lwip_htons>
 80101da:	4603      	mov	r3, r0
 80101dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d110      	bne.n	8010206 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80101e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e6:	89db      	ldrh	r3, [r3, #14]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f6 fb29 	bl	8006840 <lwip_htons>
 80101ee:	4603      	mov	r3, r0
 80101f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d006      	beq.n	8010206 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80101f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fa:	3308      	adds	r3, #8
 80101fc:	2214      	movs	r2, #20
 80101fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010200:	4618      	mov	r0, r3
 8010202:	f000 fbd9 	bl	80109b8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010208:	88db      	ldrh	r3, [r3, #6]
 801020a:	b29b      	uxth	r3, r3
 801020c:	f003 0320 	and.w	r3, r3, #32
 8010210:	2b00      	cmp	r3, #0
 8010212:	bf0c      	ite	eq
 8010214:	2301      	moveq	r3, #1
 8010216:	2300      	movne	r3, #0
 8010218:	b2db      	uxtb	r3, r3
 801021a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d00e      	beq.n	8010240 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010222:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010226:	4413      	add	r3, r2
 8010228:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801022a:	8b7a      	ldrh	r2, [r7, #26]
 801022c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801022e:	429a      	cmp	r2, r3
 8010230:	f0c0 80a0 	bcc.w	8010374 <ip4_reass+0x2ac>
 8010234:	8b7b      	ldrh	r3, [r7, #26]
 8010236:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801023a:	4293      	cmp	r3, r2
 801023c:	f200 809a 	bhi.w	8010374 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010240:	69fa      	ldr	r2, [r7, #28]
 8010242:	6879      	ldr	r1, [r7, #4]
 8010244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010246:	f7ff fdd5 	bl	800fdf4 <ip_reass_chain_frag_into_datagram_and_validate>
 801024a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010252:	f000 8091 	beq.w	8010378 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010256:	4b5b      	ldr	r3, [pc, #364]	; (80103c4 <ip4_reass+0x2fc>)
 8010258:	881a      	ldrh	r2, [r3, #0]
 801025a:	8c3b      	ldrh	r3, [r7, #32]
 801025c:	4413      	add	r3, r2
 801025e:	b29a      	uxth	r2, r3
 8010260:	4b58      	ldr	r3, [pc, #352]	; (80103c4 <ip4_reass+0x2fc>)
 8010262:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00d      	beq.n	8010286 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801026a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801026c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801026e:	4413      	add	r3, r2
 8010270:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	8a7a      	ldrh	r2, [r7, #18]
 8010276:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027a:	7f9b      	ldrb	r3, [r3, #30]
 801027c:	f043 0301 	orr.w	r3, r3, #1
 8010280:	b2da      	uxtb	r2, r3
 8010282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010284:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d171      	bne.n	8010370 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	8b9b      	ldrh	r3, [r3, #28]
 8010290:	3314      	adds	r3, #20
 8010292:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801029e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80102a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a8:	3308      	adds	r3, #8
 80102aa:	2214      	movs	r2, #20
 80102ac:	4619      	mov	r1, r3
 80102ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102b0:	f000 fb82 	bl	80109b8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80102b4:	8a3b      	ldrh	r3, [r7, #16]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7f6 fac2 	bl	8006840 <lwip_htons>
 80102bc:	4603      	mov	r3, r0
 80102be:	461a      	mov	r2, r3
 80102c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80102c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c6:	2200      	movs	r2, #0
 80102c8:	719a      	strb	r2, [r3, #6]
 80102ca:	2200      	movs	r2, #0
 80102cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80102ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d0:	2200      	movs	r2, #0
 80102d2:	729a      	strb	r2, [r3, #10]
 80102d4:	2200      	movs	r2, #0
 80102d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80102d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80102de:	e00d      	b.n	80102fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80102e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80102e6:	2114      	movs	r1, #20
 80102e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80102ea:	f7f7 fcd7 	bl	8007c9c <pbuf_remove_header>
      pbuf_cat(p, r);
 80102ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f7f7 fe1b 	bl	8007f2c <pbuf_cat>
      r = iprh->next_pbuf;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80102fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d1ee      	bne.n	80102e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010302:	4b31      	ldr	r3, [pc, #196]	; (80103c8 <ip4_reass+0x300>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010308:	429a      	cmp	r2, r3
 801030a:	d102      	bne.n	8010312 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801030c:	2300      	movs	r3, #0
 801030e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010310:	e010      	b.n	8010334 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010312:	4b2d      	ldr	r3, [pc, #180]	; (80103c8 <ip4_reass+0x300>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010318:	e007      	b.n	801032a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801031a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010320:	429a      	cmp	r2, r3
 8010322:	d006      	beq.n	8010332 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	62fb      	str	r3, [r7, #44]	; 0x2c
 801032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1f4      	bne.n	801031a <ip4_reass+0x252>
 8010330:	e000      	b.n	8010334 <ip4_reass+0x26c>
          break;
 8010332:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010338:	f7ff fd2e 	bl	800fd98 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7f7 fdbb 	bl	8007eb8 <pbuf_clen>
 8010342:	4603      	mov	r3, r0
 8010344:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010346:	4b1f      	ldr	r3, [pc, #124]	; (80103c4 <ip4_reass+0x2fc>)
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	8c3a      	ldrh	r2, [r7, #32]
 801034c:	429a      	cmp	r2, r3
 801034e:	d906      	bls.n	801035e <ip4_reass+0x296>
 8010350:	4b1e      	ldr	r3, [pc, #120]	; (80103cc <ip4_reass+0x304>)
 8010352:	f240 229b 	movw	r2, #667	; 0x29b
 8010356:	491e      	ldr	r1, [pc, #120]	; (80103d0 <ip4_reass+0x308>)
 8010358:	481e      	ldr	r0, [pc, #120]	; (80103d4 <ip4_reass+0x30c>)
 801035a:	f000 fef5 	bl	8011148 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801035e:	4b19      	ldr	r3, [pc, #100]	; (80103c4 <ip4_reass+0x2fc>)
 8010360:	881a      	ldrh	r2, [r3, #0]
 8010362:	8c3b      	ldrh	r3, [r7, #32]
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	b29a      	uxth	r2, r3
 8010368:	4b16      	ldr	r3, [pc, #88]	; (80103c4 <ip4_reass+0x2fc>)
 801036a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	e03c      	b.n	80103ea <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010370:	2300      	movs	r3, #0
 8010372:	e03a      	b.n	80103ea <ip4_reass+0x322>
      goto nullreturn_ipr;
 8010374:	bf00      	nop
 8010376:	e000      	b.n	801037a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010378:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801037a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037c:	2b00      	cmp	r3, #0
 801037e:	d106      	bne.n	801038e <ip4_reass+0x2c6>
 8010380:	4b12      	ldr	r3, [pc, #72]	; (80103cc <ip4_reass+0x304>)
 8010382:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010386:	4914      	ldr	r1, [pc, #80]	; (80103d8 <ip4_reass+0x310>)
 8010388:	4812      	ldr	r0, [pc, #72]	; (80103d4 <ip4_reass+0x30c>)
 801038a:	f000 fedd 	bl	8011148 <iprintf>
  if (ipr->p == NULL) {
 801038e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d124      	bne.n	80103e0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010396:	4b0c      	ldr	r3, [pc, #48]	; (80103c8 <ip4_reass+0x300>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801039c:	429a      	cmp	r2, r3
 801039e:	d006      	beq.n	80103ae <ip4_reass+0x2e6>
 80103a0:	4b0a      	ldr	r3, [pc, #40]	; (80103cc <ip4_reass+0x304>)
 80103a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80103a6:	490d      	ldr	r1, [pc, #52]	; (80103dc <ip4_reass+0x314>)
 80103a8:	480a      	ldr	r0, [pc, #40]	; (80103d4 <ip4_reass+0x30c>)
 80103aa:	f000 fecd 	bl	8011148 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80103ae:	2100      	movs	r1, #0
 80103b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103b2:	f7ff fcf1 	bl	800fd98 <ip_reass_dequeue_datagram>
 80103b6:	e014      	b.n	80103e2 <ip4_reass+0x31a>
    goto nullreturn;
 80103b8:	bf00      	nop
 80103ba:	e012      	b.n	80103e2 <ip4_reass+0x31a>
    goto nullreturn;
 80103bc:	bf00      	nop
 80103be:	e010      	b.n	80103e2 <ip4_reass+0x31a>
      goto nullreturn;
 80103c0:	bf00      	nop
 80103c2:	e00e      	b.n	80103e2 <ip4_reass+0x31a>
 80103c4:	2000026c 	.word	0x2000026c
 80103c8:	20000268 	.word	0x20000268
 80103cc:	0801474c 	.word	0x0801474c
 80103d0:	080148bc 	.word	0x080148bc
 80103d4:	08014794 	.word	0x08014794
 80103d8:	080148d8 	.word	0x080148d8
 80103dc:	080148e4 	.word	0x080148e4
  }

nullreturn:
 80103e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7f7 fce0 	bl	8007da8 <pbuf_free>
  return NULL;
 80103e8:	2300      	movs	r3, #0
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3738      	adds	r7, #56	; 0x38
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop

080103f4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80103f8:	2005      	movs	r0, #5
 80103fa:	f7f6 fe77 	bl	80070ec <memp_malloc>
 80103fe:	4603      	mov	r3, r0
}
 8010400:	4618      	mov	r0, r3
 8010402:	bd80      	pop	{r7, pc}

08010404 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d106      	bne.n	8010420 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010412:	4b07      	ldr	r3, [pc, #28]	; (8010430 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010414:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010418:	4906      	ldr	r1, [pc, #24]	; (8010434 <ip_frag_free_pbuf_custom_ref+0x30>)
 801041a:	4807      	ldr	r0, [pc, #28]	; (8010438 <ip_frag_free_pbuf_custom_ref+0x34>)
 801041c:	f000 fe94 	bl	8011148 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010420:	6879      	ldr	r1, [r7, #4]
 8010422:	2005      	movs	r0, #5
 8010424:	f7f6 feae 	bl	8007184 <memp_free>
}
 8010428:	bf00      	nop
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	0801474c 	.word	0x0801474c
 8010434:	08014904 	.word	0x08014904
 8010438:	08014794 	.word	0x08014794

0801043c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d106      	bne.n	801045c <ipfrag_free_pbuf_custom+0x20>
 801044e:	4b11      	ldr	r3, [pc, #68]	; (8010494 <ipfrag_free_pbuf_custom+0x58>)
 8010450:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010454:	4910      	ldr	r1, [pc, #64]	; (8010498 <ipfrag_free_pbuf_custom+0x5c>)
 8010456:	4811      	ldr	r0, [pc, #68]	; (801049c <ipfrag_free_pbuf_custom+0x60>)
 8010458:	f000 fe76 	bl	8011148 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801045c:	68fa      	ldr	r2, [r7, #12]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	429a      	cmp	r2, r3
 8010462:	d006      	beq.n	8010472 <ipfrag_free_pbuf_custom+0x36>
 8010464:	4b0b      	ldr	r3, [pc, #44]	; (8010494 <ipfrag_free_pbuf_custom+0x58>)
 8010466:	f240 22cf 	movw	r2, #719	; 0x2cf
 801046a:	490d      	ldr	r1, [pc, #52]	; (80104a0 <ipfrag_free_pbuf_custom+0x64>)
 801046c:	480b      	ldr	r0, [pc, #44]	; (801049c <ipfrag_free_pbuf_custom+0x60>)
 801046e:	f000 fe6b 	bl	8011148 <iprintf>
  if (pcr->original != NULL) {
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	695b      	ldr	r3, [r3, #20]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d004      	beq.n	8010484 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	695b      	ldr	r3, [r3, #20]
 801047e:	4618      	mov	r0, r3
 8010480:	f7f7 fc92 	bl	8007da8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010484:	68f8      	ldr	r0, [r7, #12]
 8010486:	f7ff ffbd 	bl	8010404 <ip_frag_free_pbuf_custom_ref>
}
 801048a:	bf00      	nop
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	0801474c 	.word	0x0801474c
 8010498:	08014910 	.word	0x08014910
 801049c:	08014794 	.word	0x08014794
 80104a0:	0801491c 	.word	0x0801491c

080104a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b094      	sub	sp, #80	; 0x50
 80104a8:	af02      	add	r7, sp, #8
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80104b0:	2300      	movs	r3, #0
 80104b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104ba:	3b14      	subs	r3, #20
 80104bc:	2b00      	cmp	r3, #0
 80104be:	da00      	bge.n	80104c2 <ip4_frag+0x1e>
 80104c0:	3307      	adds	r3, #7
 80104c2:	10db      	asrs	r3, r3, #3
 80104c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80104c6:	2314      	movs	r3, #20
 80104c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80104d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80104d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	f003 030f 	and.w	r3, r3, #15
 80104dc:	b2db      	uxtb	r3, r3
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b14      	cmp	r3, #20
 80104e4:	d002      	beq.n	80104ec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80104e6:	f06f 0305 	mvn.w	r3, #5
 80104ea:	e110      	b.n	801070e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	895b      	ldrh	r3, [r3, #10]
 80104f0:	2b13      	cmp	r3, #19
 80104f2:	d809      	bhi.n	8010508 <ip4_frag+0x64>
 80104f4:	4b88      	ldr	r3, [pc, #544]	; (8010718 <ip4_frag+0x274>)
 80104f6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80104fa:	4988      	ldr	r1, [pc, #544]	; (801071c <ip4_frag+0x278>)
 80104fc:	4888      	ldr	r0, [pc, #544]	; (8010720 <ip4_frag+0x27c>)
 80104fe:	f000 fe23 	bl	8011148 <iprintf>
 8010502:	f06f 0305 	mvn.w	r3, #5
 8010506:	e102      	b.n	801070e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050a:	88db      	ldrh	r3, [r3, #6]
 801050c:	b29b      	uxth	r3, r3
 801050e:	4618      	mov	r0, r3
 8010510:	f7f6 f996 	bl	8006840 <lwip_htons>
 8010514:	4603      	mov	r3, r0
 8010516:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010518:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801051a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801051e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010522:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010528:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	891b      	ldrh	r3, [r3, #8]
 801052e:	3b14      	subs	r3, #20
 8010530:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010534:	e0e1      	b.n	80106fa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010536:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010538:	00db      	lsls	r3, r3, #3
 801053a:	b29b      	uxth	r3, r3
 801053c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010540:	4293      	cmp	r3, r2
 8010542:	bf28      	it	cs
 8010544:	4613      	movcs	r3, r2
 8010546:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010548:	f44f 7220 	mov.w	r2, #640	; 0x280
 801054c:	2114      	movs	r1, #20
 801054e:	200e      	movs	r0, #14
 8010550:	f7f7 f946 	bl	80077e0 <pbuf_alloc>
 8010554:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 80d5 	beq.w	8010708 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801055e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010560:	895b      	ldrh	r3, [r3, #10]
 8010562:	2b13      	cmp	r3, #19
 8010564:	d806      	bhi.n	8010574 <ip4_frag+0xd0>
 8010566:	4b6c      	ldr	r3, [pc, #432]	; (8010718 <ip4_frag+0x274>)
 8010568:	f44f 7249 	mov.w	r2, #804	; 0x324
 801056c:	496d      	ldr	r1, [pc, #436]	; (8010724 <ip4_frag+0x280>)
 801056e:	486c      	ldr	r0, [pc, #432]	; (8010720 <ip4_frag+0x27c>)
 8010570:	f000 fdea 	bl	8011148 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	2214      	movs	r2, #20
 801057a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801057c:	4618      	mov	r0, r3
 801057e:	f000 fa1b 	bl	80109b8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010588:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801058a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801058e:	e064      	b.n	801065a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	895a      	ldrh	r2, [r3, #10]
 8010594:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	895b      	ldrh	r3, [r3, #10]
 801059e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d906      	bls.n	80105b2 <ip4_frag+0x10e>
 80105a4:	4b5c      	ldr	r3, [pc, #368]	; (8010718 <ip4_frag+0x274>)
 80105a6:	f240 322d 	movw	r2, #813	; 0x32d
 80105aa:	495f      	ldr	r1, [pc, #380]	; (8010728 <ip4_frag+0x284>)
 80105ac:	485c      	ldr	r0, [pc, #368]	; (8010720 <ip4_frag+0x27c>)
 80105ae:	f000 fdcb 	bl	8011148 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80105b2:	8bfa      	ldrh	r2, [r7, #30]
 80105b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80105b8:	4293      	cmp	r3, r2
 80105ba:	bf28      	it	cs
 80105bc:	4613      	movcs	r3, r2
 80105be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80105c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d105      	bne.n	80105d6 <ip4_frag+0x132>
        poff = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	60fb      	str	r3, [r7, #12]
        continue;
 80105d4:	e041      	b.n	801065a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80105d6:	f7ff ff0d 	bl	80103f4 <ip_frag_alloc_pbuf_custom_ref>
 80105da:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d103      	bne.n	80105ea <ip4_frag+0x146>
        pbuf_free(rambuf);
 80105e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105e4:	f7f7 fbe0 	bl	8007da8 <pbuf_free>
        goto memerr;
 80105e8:	e08f      	b.n	801070a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80105ea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80105f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105f2:	4413      	add	r3, r2
 80105f4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80105f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80105fc:	9201      	str	r2, [sp, #4]
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	4603      	mov	r3, r0
 8010602:	2241      	movs	r2, #65	; 0x41
 8010604:	2000      	movs	r0, #0
 8010606:	f7f7 fa15 	bl	8007a34 <pbuf_alloced_custom>
 801060a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010612:	69b8      	ldr	r0, [r7, #24]
 8010614:	f7ff fef6 	bl	8010404 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801061a:	f7f7 fbc5 	bl	8007da8 <pbuf_free>
        goto memerr;
 801061e:	e074      	b.n	801070a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	f7f7 fc61 	bl	8007ee8 <pbuf_ref>
      pcr->original = p;
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	68fa      	ldr	r2, [r7, #12]
 801062a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	4a3f      	ldr	r2, [pc, #252]	; (801072c <ip4_frag+0x288>)
 8010630:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010632:	6979      	ldr	r1, [r7, #20]
 8010634:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010636:	f7f7 fc79 	bl	8007f2c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801063a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801063e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010642:	1ad3      	subs	r3, r2, r3
 8010644:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010648:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801064c:	2b00      	cmp	r3, #0
 801064e:	d004      	beq.n	801065a <ip4_frag+0x1b6>
        poff = 0;
 8010650:	2300      	movs	r3, #0
 8010652:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801065a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801065e:	2b00      	cmp	r3, #0
 8010660:	d196      	bne.n	8010590 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010662:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010664:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010668:	4413      	add	r3, r2
 801066a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010670:	f1a3 0213 	sub.w	r2, r3, #19
 8010674:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010678:	429a      	cmp	r2, r3
 801067a:	bfcc      	ite	gt
 801067c:	2301      	movgt	r3, #1
 801067e:	2300      	movle	r3, #0
 8010680:	b2db      	uxtb	r3, r3
 8010682:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010684:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010688:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801068c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801068e:	6a3b      	ldr	r3, [r7, #32]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d002      	beq.n	801069a <ip4_frag+0x1f6>
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	2b00      	cmp	r3, #0
 8010698:	d003      	beq.n	80106a2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801069a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801069c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80106a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80106a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7f6 f8cb 	bl	8006840 <lwip_htons>
 80106aa:	4603      	mov	r3, r0
 80106ac:	461a      	mov	r2, r3
 80106ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80106b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106b4:	3314      	adds	r3, #20
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7f6 f8c1 	bl	8006840 <lwip_htons>
 80106be:	4603      	mov	r3, r0
 80106c0:	461a      	mov	r2, r3
 80106c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80106c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c8:	2200      	movs	r2, #0
 80106ca:	729a      	strb	r2, [r3, #10]
 80106cc:	2200      	movs	r2, #0
 80106ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	695b      	ldr	r3, [r3, #20]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106d8:	68b8      	ldr	r0, [r7, #8]
 80106da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80106dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106de:	f7f7 fb63 	bl	8007da8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80106e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80106ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80106f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80106f4:	4413      	add	r3, r2
 80106f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80106fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80106fe:	2b00      	cmp	r3, #0
 8010700:	f47f af19 	bne.w	8010536 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010704:	2300      	movs	r3, #0
 8010706:	e002      	b.n	801070e <ip4_frag+0x26a>
      goto memerr;
 8010708:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801070a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801070e:	4618      	mov	r0, r3
 8010710:	3748      	adds	r7, #72	; 0x48
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	0801474c 	.word	0x0801474c
 801071c:	08014928 	.word	0x08014928
 8010720:	08014794 	.word	0x08014794
 8010724:	08014944 	.word	0x08014944
 8010728:	08014964 	.word	0x08014964
 801072c:	0801043d 	.word	0x0801043d

08010730 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801073a:	230e      	movs	r3, #14
 801073c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	895b      	ldrh	r3, [r3, #10]
 8010742:	2b0e      	cmp	r3, #14
 8010744:	d96e      	bls.n	8010824 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	7bdb      	ldrb	r3, [r3, #15]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d106      	bne.n	801075c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010754:	3301      	adds	r3, #1
 8010756:	b2da      	uxtb	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	7b1a      	ldrb	r2, [r3, #12]
 8010766:	7b5b      	ldrb	r3, [r3, #13]
 8010768:	021b      	lsls	r3, r3, #8
 801076a:	4313      	orrs	r3, r2
 801076c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	f003 0301 	and.w	r3, r3, #1
 8010776:	2b00      	cmp	r3, #0
 8010778:	d023      	beq.n	80107c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	2b01      	cmp	r3, #1
 8010780:	d10f      	bne.n	80107a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	785b      	ldrb	r3, [r3, #1]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d11b      	bne.n	80107c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801078e:	2b5e      	cmp	r3, #94	; 0x5e
 8010790:	d117      	bne.n	80107c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	7b5b      	ldrb	r3, [r3, #13]
 8010796:	f043 0310 	orr.w	r3, r3, #16
 801079a:	b2da      	uxtb	r2, r3
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	735a      	strb	r2, [r3, #13]
 80107a0:	e00f      	b.n	80107c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	2206      	movs	r2, #6
 80107a6:	4928      	ldr	r1, [pc, #160]	; (8010848 <ethernet_input+0x118>)
 80107a8:	4618      	mov	r0, r3
 80107aa:	f000 f8f7 	bl	801099c <memcmp>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d106      	bne.n	80107c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	7b5b      	ldrb	r3, [r3, #13]
 80107b8:	f043 0308 	orr.w	r3, r3, #8
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80107c2:	89fb      	ldrh	r3, [r7, #14]
 80107c4:	2b08      	cmp	r3, #8
 80107c6:	d003      	beq.n	80107d0 <ethernet_input+0xa0>
 80107c8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80107cc:	d014      	beq.n	80107f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80107ce:	e032      	b.n	8010836 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107d6:	f003 0308 	and.w	r3, r3, #8
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d024      	beq.n	8010828 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80107de:	8afb      	ldrh	r3, [r7, #22]
 80107e0:	4619      	mov	r1, r3
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7f7 fa5a 	bl	8007c9c <pbuf_remove_header>
 80107e8:	4603      	mov	r3, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d11e      	bne.n	801082c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80107ee:	6839      	ldr	r1, [r7, #0]
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f7fe ff27 	bl	800f644 <ip4_input>
      break;
 80107f6:	e013      	b.n	8010820 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80107fe:	f003 0308 	and.w	r3, r3, #8
 8010802:	2b00      	cmp	r3, #0
 8010804:	d014      	beq.n	8010830 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010806:	8afb      	ldrh	r3, [r7, #22]
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7f7 fa46 	bl	8007c9c <pbuf_remove_header>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d10e      	bne.n	8010834 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010816:	6839      	ldr	r1, [r7, #0]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7fe f8c9 	bl	800e9b0 <etharp_input>
      break;
 801081e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010820:	2300      	movs	r3, #0
 8010822:	e00c      	b.n	801083e <ethernet_input+0x10e>
    goto free_and_return;
 8010824:	bf00      	nop
 8010826:	e006      	b.n	8010836 <ethernet_input+0x106>
        goto free_and_return;
 8010828:	bf00      	nop
 801082a:	e004      	b.n	8010836 <ethernet_input+0x106>
        goto free_and_return;
 801082c:	bf00      	nop
 801082e:	e002      	b.n	8010836 <ethernet_input+0x106>
        goto free_and_return;
 8010830:	bf00      	nop
 8010832:	e000      	b.n	8010836 <ethernet_input+0x106>
        goto free_and_return;
 8010834:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f7f7 fab6 	bl	8007da8 <pbuf_free>
  return ERR_OK;
 801083c:	2300      	movs	r3, #0
}
 801083e:	4618      	mov	r0, r3
 8010840:	3718      	adds	r7, #24
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	08014b04 	.word	0x08014b04

0801084c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801084c:	b580      	push	{r7, lr}
 801084e:	b086      	sub	sp, #24
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
 8010858:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801085a:	8c3b      	ldrh	r3, [r7, #32]
 801085c:	4618      	mov	r0, r3
 801085e:	f7f5 ffef 	bl	8006840 <lwip_htons>
 8010862:	4603      	mov	r3, r0
 8010864:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010866:	210e      	movs	r1, #14
 8010868:	68b8      	ldr	r0, [r7, #8]
 801086a:	f7f7 fa07 	bl	8007c7c <pbuf_add_header>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d125      	bne.n	80108c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	8afa      	ldrh	r2, [r7, #22]
 801087e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	2206      	movs	r2, #6
 8010884:	6839      	ldr	r1, [r7, #0]
 8010886:	4618      	mov	r0, r3
 8010888:	f000 f896 	bl	80109b8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	3306      	adds	r3, #6
 8010890:	2206      	movs	r2, #6
 8010892:	6879      	ldr	r1, [r7, #4]
 8010894:	4618      	mov	r0, r3
 8010896:	f000 f88f 	bl	80109b8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108a0:	2b06      	cmp	r3, #6
 80108a2:	d006      	beq.n	80108b2 <ethernet_output+0x66>
 80108a4:	4b0a      	ldr	r3, [pc, #40]	; (80108d0 <ethernet_output+0x84>)
 80108a6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80108aa:	490a      	ldr	r1, [pc, #40]	; (80108d4 <ethernet_output+0x88>)
 80108ac:	480a      	ldr	r0, [pc, #40]	; (80108d8 <ethernet_output+0x8c>)
 80108ae:	f000 fc4b 	bl	8011148 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	699b      	ldr	r3, [r3, #24]
 80108b6:	68b9      	ldr	r1, [r7, #8]
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	4798      	blx	r3
 80108bc:	4603      	mov	r3, r0
 80108be:	e002      	b.n	80108c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80108c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80108c2:	f06f 0301 	mvn.w	r3, #1
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3718      	adds	r7, #24
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	08014974 	.word	0x08014974
 80108d4:	080149ac 	.word	0x080149ac
 80108d8:	080149e0 	.word	0x080149e0

080108dc <__assert_func>:
 80108dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108de:	4614      	mov	r4, r2
 80108e0:	461a      	mov	r2, r3
 80108e2:	4b09      	ldr	r3, [pc, #36]	; (8010908 <__assert_func+0x2c>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4605      	mov	r5, r0
 80108e8:	68d8      	ldr	r0, [r3, #12]
 80108ea:	b14c      	cbz	r4, 8010900 <__assert_func+0x24>
 80108ec:	4b07      	ldr	r3, [pc, #28]	; (801090c <__assert_func+0x30>)
 80108ee:	9100      	str	r1, [sp, #0]
 80108f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108f4:	4906      	ldr	r1, [pc, #24]	; (8010910 <__assert_func+0x34>)
 80108f6:	462b      	mov	r3, r5
 80108f8:	f000 f812 	bl	8010920 <fiprintf>
 80108fc:	f000 fe0e 	bl	801151c <abort>
 8010900:	4b04      	ldr	r3, [pc, #16]	; (8010914 <__assert_func+0x38>)
 8010902:	461c      	mov	r4, r3
 8010904:	e7f3      	b.n	80108ee <__assert_func+0x12>
 8010906:	bf00      	nop
 8010908:	20000034 	.word	0x20000034
 801090c:	08014b12 	.word	0x08014b12
 8010910:	08014b1f 	.word	0x08014b1f
 8010914:	08014b4d 	.word	0x08014b4d

08010918 <atoi>:
 8010918:	220a      	movs	r2, #10
 801091a:	2100      	movs	r1, #0
 801091c:	f000 bd34 	b.w	8011388 <strtol>

08010920 <fiprintf>:
 8010920:	b40e      	push	{r1, r2, r3}
 8010922:	b503      	push	{r0, r1, lr}
 8010924:	4601      	mov	r1, r0
 8010926:	ab03      	add	r3, sp, #12
 8010928:	4805      	ldr	r0, [pc, #20]	; (8010940 <fiprintf+0x20>)
 801092a:	f853 2b04 	ldr.w	r2, [r3], #4
 801092e:	6800      	ldr	r0, [r0, #0]
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	f000 f945 	bl	8010bc0 <_vfiprintf_r>
 8010936:	b002      	add	sp, #8
 8010938:	f85d eb04 	ldr.w	lr, [sp], #4
 801093c:	b003      	add	sp, #12
 801093e:	4770      	bx	lr
 8010940:	20000034 	.word	0x20000034

08010944 <__libc_init_array>:
 8010944:	b570      	push	{r4, r5, r6, lr}
 8010946:	4d0d      	ldr	r5, [pc, #52]	; (801097c <__libc_init_array+0x38>)
 8010948:	4c0d      	ldr	r4, [pc, #52]	; (8010980 <__libc_init_array+0x3c>)
 801094a:	1b64      	subs	r4, r4, r5
 801094c:	10a4      	asrs	r4, r4, #2
 801094e:	2600      	movs	r6, #0
 8010950:	42a6      	cmp	r6, r4
 8010952:	d109      	bne.n	8010968 <__libc_init_array+0x24>
 8010954:	4d0b      	ldr	r5, [pc, #44]	; (8010984 <__libc_init_array+0x40>)
 8010956:	4c0c      	ldr	r4, [pc, #48]	; (8010988 <__libc_init_array+0x44>)
 8010958:	f001 fa92 	bl	8011e80 <_init>
 801095c:	1b64      	subs	r4, r4, r5
 801095e:	10a4      	asrs	r4, r4, #2
 8010960:	2600      	movs	r6, #0
 8010962:	42a6      	cmp	r6, r4
 8010964:	d105      	bne.n	8010972 <__libc_init_array+0x2e>
 8010966:	bd70      	pop	{r4, r5, r6, pc}
 8010968:	f855 3b04 	ldr.w	r3, [r5], #4
 801096c:	4798      	blx	r3
 801096e:	3601      	adds	r6, #1
 8010970:	e7ee      	b.n	8010950 <__libc_init_array+0xc>
 8010972:	f855 3b04 	ldr.w	r3, [r5], #4
 8010976:	4798      	blx	r3
 8010978:	3601      	adds	r6, #1
 801097a:	e7f2      	b.n	8010962 <__libc_init_array+0x1e>
 801097c:	08014d68 	.word	0x08014d68
 8010980:	08014d68 	.word	0x08014d68
 8010984:	08014d68 	.word	0x08014d68
 8010988:	08014d6c 	.word	0x08014d6c

0801098c <malloc>:
 801098c:	4b02      	ldr	r3, [pc, #8]	; (8010998 <malloc+0xc>)
 801098e:	4601      	mov	r1, r0
 8010990:	6818      	ldr	r0, [r3, #0]
 8010992:	f000 b891 	b.w	8010ab8 <_malloc_r>
 8010996:	bf00      	nop
 8010998:	20000034 	.word	0x20000034

0801099c <memcmp>:
 801099c:	b530      	push	{r4, r5, lr}
 801099e:	3901      	subs	r1, #1
 80109a0:	2400      	movs	r4, #0
 80109a2:	42a2      	cmp	r2, r4
 80109a4:	d101      	bne.n	80109aa <memcmp+0xe>
 80109a6:	2000      	movs	r0, #0
 80109a8:	e005      	b.n	80109b6 <memcmp+0x1a>
 80109aa:	5d03      	ldrb	r3, [r0, r4]
 80109ac:	3401      	adds	r4, #1
 80109ae:	5d0d      	ldrb	r5, [r1, r4]
 80109b0:	42ab      	cmp	r3, r5
 80109b2:	d0f6      	beq.n	80109a2 <memcmp+0x6>
 80109b4:	1b58      	subs	r0, r3, r5
 80109b6:	bd30      	pop	{r4, r5, pc}

080109b8 <memcpy>:
 80109b8:	440a      	add	r2, r1
 80109ba:	4291      	cmp	r1, r2
 80109bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80109c0:	d100      	bne.n	80109c4 <memcpy+0xc>
 80109c2:	4770      	bx	lr
 80109c4:	b510      	push	{r4, lr}
 80109c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109ce:	4291      	cmp	r1, r2
 80109d0:	d1f9      	bne.n	80109c6 <memcpy+0xe>
 80109d2:	bd10      	pop	{r4, pc}

080109d4 <memmove>:
 80109d4:	4288      	cmp	r0, r1
 80109d6:	b510      	push	{r4, lr}
 80109d8:	eb01 0402 	add.w	r4, r1, r2
 80109dc:	d902      	bls.n	80109e4 <memmove+0x10>
 80109de:	4284      	cmp	r4, r0
 80109e0:	4623      	mov	r3, r4
 80109e2:	d807      	bhi.n	80109f4 <memmove+0x20>
 80109e4:	1e43      	subs	r3, r0, #1
 80109e6:	42a1      	cmp	r1, r4
 80109e8:	d008      	beq.n	80109fc <memmove+0x28>
 80109ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109f2:	e7f8      	b.n	80109e6 <memmove+0x12>
 80109f4:	4402      	add	r2, r0
 80109f6:	4601      	mov	r1, r0
 80109f8:	428a      	cmp	r2, r1
 80109fa:	d100      	bne.n	80109fe <memmove+0x2a>
 80109fc:	bd10      	pop	{r4, pc}
 80109fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a06:	e7f7      	b.n	80109f8 <memmove+0x24>

08010a08 <memset>:
 8010a08:	4402      	add	r2, r0
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d100      	bne.n	8010a12 <memset+0xa>
 8010a10:	4770      	bx	lr
 8010a12:	f803 1b01 	strb.w	r1, [r3], #1
 8010a16:	e7f9      	b.n	8010a0c <memset+0x4>

08010a18 <_free_r>:
 8010a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a1a:	2900      	cmp	r1, #0
 8010a1c:	d048      	beq.n	8010ab0 <_free_r+0x98>
 8010a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a22:	9001      	str	r0, [sp, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	f1a1 0404 	sub.w	r4, r1, #4
 8010a2a:	bfb8      	it	lt
 8010a2c:	18e4      	addlt	r4, r4, r3
 8010a2e:	f000 ffa1 	bl	8011974 <__malloc_lock>
 8010a32:	4a20      	ldr	r2, [pc, #128]	; (8010ab4 <_free_r+0x9c>)
 8010a34:	9801      	ldr	r0, [sp, #4]
 8010a36:	6813      	ldr	r3, [r2, #0]
 8010a38:	4615      	mov	r5, r2
 8010a3a:	b933      	cbnz	r3, 8010a4a <_free_r+0x32>
 8010a3c:	6063      	str	r3, [r4, #4]
 8010a3e:	6014      	str	r4, [r2, #0]
 8010a40:	b003      	add	sp, #12
 8010a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a46:	f000 bf9b 	b.w	8011980 <__malloc_unlock>
 8010a4a:	42a3      	cmp	r3, r4
 8010a4c:	d90b      	bls.n	8010a66 <_free_r+0x4e>
 8010a4e:	6821      	ldr	r1, [r4, #0]
 8010a50:	1862      	adds	r2, r4, r1
 8010a52:	4293      	cmp	r3, r2
 8010a54:	bf04      	itt	eq
 8010a56:	681a      	ldreq	r2, [r3, #0]
 8010a58:	685b      	ldreq	r3, [r3, #4]
 8010a5a:	6063      	str	r3, [r4, #4]
 8010a5c:	bf04      	itt	eq
 8010a5e:	1852      	addeq	r2, r2, r1
 8010a60:	6022      	streq	r2, [r4, #0]
 8010a62:	602c      	str	r4, [r5, #0]
 8010a64:	e7ec      	b.n	8010a40 <_free_r+0x28>
 8010a66:	461a      	mov	r2, r3
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	b10b      	cbz	r3, 8010a70 <_free_r+0x58>
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	d9fa      	bls.n	8010a66 <_free_r+0x4e>
 8010a70:	6811      	ldr	r1, [r2, #0]
 8010a72:	1855      	adds	r5, r2, r1
 8010a74:	42a5      	cmp	r5, r4
 8010a76:	d10b      	bne.n	8010a90 <_free_r+0x78>
 8010a78:	6824      	ldr	r4, [r4, #0]
 8010a7a:	4421      	add	r1, r4
 8010a7c:	1854      	adds	r4, r2, r1
 8010a7e:	42a3      	cmp	r3, r4
 8010a80:	6011      	str	r1, [r2, #0]
 8010a82:	d1dd      	bne.n	8010a40 <_free_r+0x28>
 8010a84:	681c      	ldr	r4, [r3, #0]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	6053      	str	r3, [r2, #4]
 8010a8a:	4421      	add	r1, r4
 8010a8c:	6011      	str	r1, [r2, #0]
 8010a8e:	e7d7      	b.n	8010a40 <_free_r+0x28>
 8010a90:	d902      	bls.n	8010a98 <_free_r+0x80>
 8010a92:	230c      	movs	r3, #12
 8010a94:	6003      	str	r3, [r0, #0]
 8010a96:	e7d3      	b.n	8010a40 <_free_r+0x28>
 8010a98:	6825      	ldr	r5, [r4, #0]
 8010a9a:	1961      	adds	r1, r4, r5
 8010a9c:	428b      	cmp	r3, r1
 8010a9e:	bf04      	itt	eq
 8010aa0:	6819      	ldreq	r1, [r3, #0]
 8010aa2:	685b      	ldreq	r3, [r3, #4]
 8010aa4:	6063      	str	r3, [r4, #4]
 8010aa6:	bf04      	itt	eq
 8010aa8:	1949      	addeq	r1, r1, r5
 8010aaa:	6021      	streq	r1, [r4, #0]
 8010aac:	6054      	str	r4, [r2, #4]
 8010aae:	e7c7      	b.n	8010a40 <_free_r+0x28>
 8010ab0:	b003      	add	sp, #12
 8010ab2:	bd30      	pop	{r4, r5, pc}
 8010ab4:	20000270 	.word	0x20000270

08010ab8 <_malloc_r>:
 8010ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aba:	1ccd      	adds	r5, r1, #3
 8010abc:	f025 0503 	bic.w	r5, r5, #3
 8010ac0:	3508      	adds	r5, #8
 8010ac2:	2d0c      	cmp	r5, #12
 8010ac4:	bf38      	it	cc
 8010ac6:	250c      	movcc	r5, #12
 8010ac8:	2d00      	cmp	r5, #0
 8010aca:	4606      	mov	r6, r0
 8010acc:	db01      	blt.n	8010ad2 <_malloc_r+0x1a>
 8010ace:	42a9      	cmp	r1, r5
 8010ad0:	d903      	bls.n	8010ada <_malloc_r+0x22>
 8010ad2:	230c      	movs	r3, #12
 8010ad4:	6033      	str	r3, [r6, #0]
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ada:	f000 ff4b 	bl	8011974 <__malloc_lock>
 8010ade:	4921      	ldr	r1, [pc, #132]	; (8010b64 <_malloc_r+0xac>)
 8010ae0:	680a      	ldr	r2, [r1, #0]
 8010ae2:	4614      	mov	r4, r2
 8010ae4:	b99c      	cbnz	r4, 8010b0e <_malloc_r+0x56>
 8010ae6:	4f20      	ldr	r7, [pc, #128]	; (8010b68 <_malloc_r+0xb0>)
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	b923      	cbnz	r3, 8010af6 <_malloc_r+0x3e>
 8010aec:	4621      	mov	r1, r4
 8010aee:	4630      	mov	r0, r6
 8010af0:	f000 fb82 	bl	80111f8 <_sbrk_r>
 8010af4:	6038      	str	r0, [r7, #0]
 8010af6:	4629      	mov	r1, r5
 8010af8:	4630      	mov	r0, r6
 8010afa:	f000 fb7d 	bl	80111f8 <_sbrk_r>
 8010afe:	1c43      	adds	r3, r0, #1
 8010b00:	d123      	bne.n	8010b4a <_malloc_r+0x92>
 8010b02:	230c      	movs	r3, #12
 8010b04:	6033      	str	r3, [r6, #0]
 8010b06:	4630      	mov	r0, r6
 8010b08:	f000 ff3a 	bl	8011980 <__malloc_unlock>
 8010b0c:	e7e3      	b.n	8010ad6 <_malloc_r+0x1e>
 8010b0e:	6823      	ldr	r3, [r4, #0]
 8010b10:	1b5b      	subs	r3, r3, r5
 8010b12:	d417      	bmi.n	8010b44 <_malloc_r+0x8c>
 8010b14:	2b0b      	cmp	r3, #11
 8010b16:	d903      	bls.n	8010b20 <_malloc_r+0x68>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	441c      	add	r4, r3
 8010b1c:	6025      	str	r5, [r4, #0]
 8010b1e:	e004      	b.n	8010b2a <_malloc_r+0x72>
 8010b20:	6863      	ldr	r3, [r4, #4]
 8010b22:	42a2      	cmp	r2, r4
 8010b24:	bf0c      	ite	eq
 8010b26:	600b      	streq	r3, [r1, #0]
 8010b28:	6053      	strne	r3, [r2, #4]
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	f000 ff28 	bl	8011980 <__malloc_unlock>
 8010b30:	f104 000b 	add.w	r0, r4, #11
 8010b34:	1d23      	adds	r3, r4, #4
 8010b36:	f020 0007 	bic.w	r0, r0, #7
 8010b3a:	1ac2      	subs	r2, r0, r3
 8010b3c:	d0cc      	beq.n	8010ad8 <_malloc_r+0x20>
 8010b3e:	1a1b      	subs	r3, r3, r0
 8010b40:	50a3      	str	r3, [r4, r2]
 8010b42:	e7c9      	b.n	8010ad8 <_malloc_r+0x20>
 8010b44:	4622      	mov	r2, r4
 8010b46:	6864      	ldr	r4, [r4, #4]
 8010b48:	e7cc      	b.n	8010ae4 <_malloc_r+0x2c>
 8010b4a:	1cc4      	adds	r4, r0, #3
 8010b4c:	f024 0403 	bic.w	r4, r4, #3
 8010b50:	42a0      	cmp	r0, r4
 8010b52:	d0e3      	beq.n	8010b1c <_malloc_r+0x64>
 8010b54:	1a21      	subs	r1, r4, r0
 8010b56:	4630      	mov	r0, r6
 8010b58:	f000 fb4e 	bl	80111f8 <_sbrk_r>
 8010b5c:	3001      	adds	r0, #1
 8010b5e:	d1dd      	bne.n	8010b1c <_malloc_r+0x64>
 8010b60:	e7cf      	b.n	8010b02 <_malloc_r+0x4a>
 8010b62:	bf00      	nop
 8010b64:	20000270 	.word	0x20000270
 8010b68:	20000274 	.word	0x20000274

08010b6c <__sfputc_r>:
 8010b6c:	6893      	ldr	r3, [r2, #8]
 8010b6e:	3b01      	subs	r3, #1
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	b410      	push	{r4}
 8010b74:	6093      	str	r3, [r2, #8]
 8010b76:	da08      	bge.n	8010b8a <__sfputc_r+0x1e>
 8010b78:	6994      	ldr	r4, [r2, #24]
 8010b7a:	42a3      	cmp	r3, r4
 8010b7c:	db01      	blt.n	8010b82 <__sfputc_r+0x16>
 8010b7e:	290a      	cmp	r1, #10
 8010b80:	d103      	bne.n	8010b8a <__sfputc_r+0x1e>
 8010b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b86:	f000 bc09 	b.w	801139c <__swbuf_r>
 8010b8a:	6813      	ldr	r3, [r2, #0]
 8010b8c:	1c58      	adds	r0, r3, #1
 8010b8e:	6010      	str	r0, [r2, #0]
 8010b90:	7019      	strb	r1, [r3, #0]
 8010b92:	4608      	mov	r0, r1
 8010b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b98:	4770      	bx	lr

08010b9a <__sfputs_r>:
 8010b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b9c:	4606      	mov	r6, r0
 8010b9e:	460f      	mov	r7, r1
 8010ba0:	4614      	mov	r4, r2
 8010ba2:	18d5      	adds	r5, r2, r3
 8010ba4:	42ac      	cmp	r4, r5
 8010ba6:	d101      	bne.n	8010bac <__sfputs_r+0x12>
 8010ba8:	2000      	movs	r0, #0
 8010baa:	e007      	b.n	8010bbc <__sfputs_r+0x22>
 8010bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb0:	463a      	mov	r2, r7
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	f7ff ffda 	bl	8010b6c <__sfputc_r>
 8010bb8:	1c43      	adds	r3, r0, #1
 8010bba:	d1f3      	bne.n	8010ba4 <__sfputs_r+0xa>
 8010bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010bc0 <_vfiprintf_r>:
 8010bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc4:	460d      	mov	r5, r1
 8010bc6:	b09d      	sub	sp, #116	; 0x74
 8010bc8:	4614      	mov	r4, r2
 8010bca:	4698      	mov	r8, r3
 8010bcc:	4606      	mov	r6, r0
 8010bce:	b118      	cbz	r0, 8010bd8 <_vfiprintf_r+0x18>
 8010bd0:	6983      	ldr	r3, [r0, #24]
 8010bd2:	b90b      	cbnz	r3, 8010bd8 <_vfiprintf_r+0x18>
 8010bd4:	f000 fdca 	bl	801176c <__sinit>
 8010bd8:	4b89      	ldr	r3, [pc, #548]	; (8010e00 <_vfiprintf_r+0x240>)
 8010bda:	429d      	cmp	r5, r3
 8010bdc:	d11b      	bne.n	8010c16 <_vfiprintf_r+0x56>
 8010bde:	6875      	ldr	r5, [r6, #4]
 8010be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010be2:	07d9      	lsls	r1, r3, #31
 8010be4:	d405      	bmi.n	8010bf2 <_vfiprintf_r+0x32>
 8010be6:	89ab      	ldrh	r3, [r5, #12]
 8010be8:	059a      	lsls	r2, r3, #22
 8010bea:	d402      	bmi.n	8010bf2 <_vfiprintf_r+0x32>
 8010bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bee:	f000 fe5b 	bl	80118a8 <__retarget_lock_acquire_recursive>
 8010bf2:	89ab      	ldrh	r3, [r5, #12]
 8010bf4:	071b      	lsls	r3, r3, #28
 8010bf6:	d501      	bpl.n	8010bfc <_vfiprintf_r+0x3c>
 8010bf8:	692b      	ldr	r3, [r5, #16]
 8010bfa:	b9eb      	cbnz	r3, 8010c38 <_vfiprintf_r+0x78>
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	4630      	mov	r0, r6
 8010c00:	f000 fc1e 	bl	8011440 <__swsetup_r>
 8010c04:	b1c0      	cbz	r0, 8010c38 <_vfiprintf_r+0x78>
 8010c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c08:	07dc      	lsls	r4, r3, #31
 8010c0a:	d50e      	bpl.n	8010c2a <_vfiprintf_r+0x6a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	b01d      	add	sp, #116	; 0x74
 8010c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c16:	4b7b      	ldr	r3, [pc, #492]	; (8010e04 <_vfiprintf_r+0x244>)
 8010c18:	429d      	cmp	r5, r3
 8010c1a:	d101      	bne.n	8010c20 <_vfiprintf_r+0x60>
 8010c1c:	68b5      	ldr	r5, [r6, #8]
 8010c1e:	e7df      	b.n	8010be0 <_vfiprintf_r+0x20>
 8010c20:	4b79      	ldr	r3, [pc, #484]	; (8010e08 <_vfiprintf_r+0x248>)
 8010c22:	429d      	cmp	r5, r3
 8010c24:	bf08      	it	eq
 8010c26:	68f5      	ldreq	r5, [r6, #12]
 8010c28:	e7da      	b.n	8010be0 <_vfiprintf_r+0x20>
 8010c2a:	89ab      	ldrh	r3, [r5, #12]
 8010c2c:	0598      	lsls	r0, r3, #22
 8010c2e:	d4ed      	bmi.n	8010c0c <_vfiprintf_r+0x4c>
 8010c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c32:	f000 fe3a 	bl	80118aa <__retarget_lock_release_recursive>
 8010c36:	e7e9      	b.n	8010c0c <_vfiprintf_r+0x4c>
 8010c38:	2300      	movs	r3, #0
 8010c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8010c3c:	2320      	movs	r3, #32
 8010c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c46:	2330      	movs	r3, #48	; 0x30
 8010c48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e0c <_vfiprintf_r+0x24c>
 8010c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c50:	f04f 0901 	mov.w	r9, #1
 8010c54:	4623      	mov	r3, r4
 8010c56:	469a      	mov	sl, r3
 8010c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c5c:	b10a      	cbz	r2, 8010c62 <_vfiprintf_r+0xa2>
 8010c5e:	2a25      	cmp	r2, #37	; 0x25
 8010c60:	d1f9      	bne.n	8010c56 <_vfiprintf_r+0x96>
 8010c62:	ebba 0b04 	subs.w	fp, sl, r4
 8010c66:	d00b      	beq.n	8010c80 <_vfiprintf_r+0xc0>
 8010c68:	465b      	mov	r3, fp
 8010c6a:	4622      	mov	r2, r4
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	4630      	mov	r0, r6
 8010c70:	f7ff ff93 	bl	8010b9a <__sfputs_r>
 8010c74:	3001      	adds	r0, #1
 8010c76:	f000 80aa 	beq.w	8010dce <_vfiprintf_r+0x20e>
 8010c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c7c:	445a      	add	r2, fp
 8010c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8010c80:	f89a 3000 	ldrb.w	r3, [sl]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f000 80a2 	beq.w	8010dce <_vfiprintf_r+0x20e>
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c94:	f10a 0a01 	add.w	sl, sl, #1
 8010c98:	9304      	str	r3, [sp, #16]
 8010c9a:	9307      	str	r3, [sp, #28]
 8010c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8010ca2:	4654      	mov	r4, sl
 8010ca4:	2205      	movs	r2, #5
 8010ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010caa:	4858      	ldr	r0, [pc, #352]	; (8010e0c <_vfiprintf_r+0x24c>)
 8010cac:	f7ef faa0 	bl	80001f0 <memchr>
 8010cb0:	9a04      	ldr	r2, [sp, #16]
 8010cb2:	b9d8      	cbnz	r0, 8010cec <_vfiprintf_r+0x12c>
 8010cb4:	06d1      	lsls	r1, r2, #27
 8010cb6:	bf44      	itt	mi
 8010cb8:	2320      	movmi	r3, #32
 8010cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cbe:	0713      	lsls	r3, r2, #28
 8010cc0:	bf44      	itt	mi
 8010cc2:	232b      	movmi	r3, #43	; 0x2b
 8010cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8010ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8010cce:	d015      	beq.n	8010cfc <_vfiprintf_r+0x13c>
 8010cd0:	9a07      	ldr	r2, [sp, #28]
 8010cd2:	4654      	mov	r4, sl
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	f04f 0c0a 	mov.w	ip, #10
 8010cda:	4621      	mov	r1, r4
 8010cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ce0:	3b30      	subs	r3, #48	; 0x30
 8010ce2:	2b09      	cmp	r3, #9
 8010ce4:	d94e      	bls.n	8010d84 <_vfiprintf_r+0x1c4>
 8010ce6:	b1b0      	cbz	r0, 8010d16 <_vfiprintf_r+0x156>
 8010ce8:	9207      	str	r2, [sp, #28]
 8010cea:	e014      	b.n	8010d16 <_vfiprintf_r+0x156>
 8010cec:	eba0 0308 	sub.w	r3, r0, r8
 8010cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	9304      	str	r3, [sp, #16]
 8010cf8:	46a2      	mov	sl, r4
 8010cfa:	e7d2      	b.n	8010ca2 <_vfiprintf_r+0xe2>
 8010cfc:	9b03      	ldr	r3, [sp, #12]
 8010cfe:	1d19      	adds	r1, r3, #4
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	9103      	str	r1, [sp, #12]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	bfbb      	ittet	lt
 8010d08:	425b      	neglt	r3, r3
 8010d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8010d0e:	9307      	strge	r3, [sp, #28]
 8010d10:	9307      	strlt	r3, [sp, #28]
 8010d12:	bfb8      	it	lt
 8010d14:	9204      	strlt	r2, [sp, #16]
 8010d16:	7823      	ldrb	r3, [r4, #0]
 8010d18:	2b2e      	cmp	r3, #46	; 0x2e
 8010d1a:	d10c      	bne.n	8010d36 <_vfiprintf_r+0x176>
 8010d1c:	7863      	ldrb	r3, [r4, #1]
 8010d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d20:	d135      	bne.n	8010d8e <_vfiprintf_r+0x1ce>
 8010d22:	9b03      	ldr	r3, [sp, #12]
 8010d24:	1d1a      	adds	r2, r3, #4
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	9203      	str	r2, [sp, #12]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	bfb8      	it	lt
 8010d2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d32:	3402      	adds	r4, #2
 8010d34:	9305      	str	r3, [sp, #20]
 8010d36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010e1c <_vfiprintf_r+0x25c>
 8010d3a:	7821      	ldrb	r1, [r4, #0]
 8010d3c:	2203      	movs	r2, #3
 8010d3e:	4650      	mov	r0, sl
 8010d40:	f7ef fa56 	bl	80001f0 <memchr>
 8010d44:	b140      	cbz	r0, 8010d58 <_vfiprintf_r+0x198>
 8010d46:	2340      	movs	r3, #64	; 0x40
 8010d48:	eba0 000a 	sub.w	r0, r0, sl
 8010d4c:	fa03 f000 	lsl.w	r0, r3, r0
 8010d50:	9b04      	ldr	r3, [sp, #16]
 8010d52:	4303      	orrs	r3, r0
 8010d54:	3401      	adds	r4, #1
 8010d56:	9304      	str	r3, [sp, #16]
 8010d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d5c:	482c      	ldr	r0, [pc, #176]	; (8010e10 <_vfiprintf_r+0x250>)
 8010d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d62:	2206      	movs	r2, #6
 8010d64:	f7ef fa44 	bl	80001f0 <memchr>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d03f      	beq.n	8010dec <_vfiprintf_r+0x22c>
 8010d6c:	4b29      	ldr	r3, [pc, #164]	; (8010e14 <_vfiprintf_r+0x254>)
 8010d6e:	bb1b      	cbnz	r3, 8010db8 <_vfiprintf_r+0x1f8>
 8010d70:	9b03      	ldr	r3, [sp, #12]
 8010d72:	3307      	adds	r3, #7
 8010d74:	f023 0307 	bic.w	r3, r3, #7
 8010d78:	3308      	adds	r3, #8
 8010d7a:	9303      	str	r3, [sp, #12]
 8010d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d7e:	443b      	add	r3, r7
 8010d80:	9309      	str	r3, [sp, #36]	; 0x24
 8010d82:	e767      	b.n	8010c54 <_vfiprintf_r+0x94>
 8010d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d88:	460c      	mov	r4, r1
 8010d8a:	2001      	movs	r0, #1
 8010d8c:	e7a5      	b.n	8010cda <_vfiprintf_r+0x11a>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	3401      	adds	r4, #1
 8010d92:	9305      	str	r3, [sp, #20]
 8010d94:	4619      	mov	r1, r3
 8010d96:	f04f 0c0a 	mov.w	ip, #10
 8010d9a:	4620      	mov	r0, r4
 8010d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010da0:	3a30      	subs	r2, #48	; 0x30
 8010da2:	2a09      	cmp	r2, #9
 8010da4:	d903      	bls.n	8010dae <_vfiprintf_r+0x1ee>
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d0c5      	beq.n	8010d36 <_vfiprintf_r+0x176>
 8010daa:	9105      	str	r1, [sp, #20]
 8010dac:	e7c3      	b.n	8010d36 <_vfiprintf_r+0x176>
 8010dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8010db2:	4604      	mov	r4, r0
 8010db4:	2301      	movs	r3, #1
 8010db6:	e7f0      	b.n	8010d9a <_vfiprintf_r+0x1da>
 8010db8:	ab03      	add	r3, sp, #12
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	462a      	mov	r2, r5
 8010dbe:	4b16      	ldr	r3, [pc, #88]	; (8010e18 <_vfiprintf_r+0x258>)
 8010dc0:	a904      	add	r1, sp, #16
 8010dc2:	4630      	mov	r0, r6
 8010dc4:	f3af 8000 	nop.w
 8010dc8:	4607      	mov	r7, r0
 8010dca:	1c78      	adds	r0, r7, #1
 8010dcc:	d1d6      	bne.n	8010d7c <_vfiprintf_r+0x1bc>
 8010dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010dd0:	07d9      	lsls	r1, r3, #31
 8010dd2:	d405      	bmi.n	8010de0 <_vfiprintf_r+0x220>
 8010dd4:	89ab      	ldrh	r3, [r5, #12]
 8010dd6:	059a      	lsls	r2, r3, #22
 8010dd8:	d402      	bmi.n	8010de0 <_vfiprintf_r+0x220>
 8010dda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ddc:	f000 fd65 	bl	80118aa <__retarget_lock_release_recursive>
 8010de0:	89ab      	ldrh	r3, [r5, #12]
 8010de2:	065b      	lsls	r3, r3, #25
 8010de4:	f53f af12 	bmi.w	8010c0c <_vfiprintf_r+0x4c>
 8010de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dea:	e711      	b.n	8010c10 <_vfiprintf_r+0x50>
 8010dec:	ab03      	add	r3, sp, #12
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	462a      	mov	r2, r5
 8010df2:	4b09      	ldr	r3, [pc, #36]	; (8010e18 <_vfiprintf_r+0x258>)
 8010df4:	a904      	add	r1, sp, #16
 8010df6:	4630      	mov	r0, r6
 8010df8:	f000 f880 	bl	8010efc <_printf_i>
 8010dfc:	e7e4      	b.n	8010dc8 <_vfiprintf_r+0x208>
 8010dfe:	bf00      	nop
 8010e00:	08014d20 	.word	0x08014d20
 8010e04:	08014d40 	.word	0x08014d40
 8010e08:	08014d00 	.word	0x08014d00
 8010e0c:	08014c54 	.word	0x08014c54
 8010e10:	08014c5e 	.word	0x08014c5e
 8010e14:	00000000 	.word	0x00000000
 8010e18:	08010b9b 	.word	0x08010b9b
 8010e1c:	08014c5a 	.word	0x08014c5a

08010e20 <_printf_common>:
 8010e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e24:	4616      	mov	r6, r2
 8010e26:	4699      	mov	r9, r3
 8010e28:	688a      	ldr	r2, [r1, #8]
 8010e2a:	690b      	ldr	r3, [r1, #16]
 8010e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e30:	4293      	cmp	r3, r2
 8010e32:	bfb8      	it	lt
 8010e34:	4613      	movlt	r3, r2
 8010e36:	6033      	str	r3, [r6, #0]
 8010e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e3c:	4607      	mov	r7, r0
 8010e3e:	460c      	mov	r4, r1
 8010e40:	b10a      	cbz	r2, 8010e46 <_printf_common+0x26>
 8010e42:	3301      	adds	r3, #1
 8010e44:	6033      	str	r3, [r6, #0]
 8010e46:	6823      	ldr	r3, [r4, #0]
 8010e48:	0699      	lsls	r1, r3, #26
 8010e4a:	bf42      	ittt	mi
 8010e4c:	6833      	ldrmi	r3, [r6, #0]
 8010e4e:	3302      	addmi	r3, #2
 8010e50:	6033      	strmi	r3, [r6, #0]
 8010e52:	6825      	ldr	r5, [r4, #0]
 8010e54:	f015 0506 	ands.w	r5, r5, #6
 8010e58:	d106      	bne.n	8010e68 <_printf_common+0x48>
 8010e5a:	f104 0a19 	add.w	sl, r4, #25
 8010e5e:	68e3      	ldr	r3, [r4, #12]
 8010e60:	6832      	ldr	r2, [r6, #0]
 8010e62:	1a9b      	subs	r3, r3, r2
 8010e64:	42ab      	cmp	r3, r5
 8010e66:	dc26      	bgt.n	8010eb6 <_printf_common+0x96>
 8010e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e6c:	1e13      	subs	r3, r2, #0
 8010e6e:	6822      	ldr	r2, [r4, #0]
 8010e70:	bf18      	it	ne
 8010e72:	2301      	movne	r3, #1
 8010e74:	0692      	lsls	r2, r2, #26
 8010e76:	d42b      	bmi.n	8010ed0 <_printf_common+0xb0>
 8010e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e7c:	4649      	mov	r1, r9
 8010e7e:	4638      	mov	r0, r7
 8010e80:	47c0      	blx	r8
 8010e82:	3001      	adds	r0, #1
 8010e84:	d01e      	beq.n	8010ec4 <_printf_common+0xa4>
 8010e86:	6823      	ldr	r3, [r4, #0]
 8010e88:	68e5      	ldr	r5, [r4, #12]
 8010e8a:	6832      	ldr	r2, [r6, #0]
 8010e8c:	f003 0306 	and.w	r3, r3, #6
 8010e90:	2b04      	cmp	r3, #4
 8010e92:	bf08      	it	eq
 8010e94:	1aad      	subeq	r5, r5, r2
 8010e96:	68a3      	ldr	r3, [r4, #8]
 8010e98:	6922      	ldr	r2, [r4, #16]
 8010e9a:	bf0c      	ite	eq
 8010e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ea0:	2500      	movne	r5, #0
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	bfc4      	itt	gt
 8010ea6:	1a9b      	subgt	r3, r3, r2
 8010ea8:	18ed      	addgt	r5, r5, r3
 8010eaa:	2600      	movs	r6, #0
 8010eac:	341a      	adds	r4, #26
 8010eae:	42b5      	cmp	r5, r6
 8010eb0:	d11a      	bne.n	8010ee8 <_printf_common+0xc8>
 8010eb2:	2000      	movs	r0, #0
 8010eb4:	e008      	b.n	8010ec8 <_printf_common+0xa8>
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	4652      	mov	r2, sl
 8010eba:	4649      	mov	r1, r9
 8010ebc:	4638      	mov	r0, r7
 8010ebe:	47c0      	blx	r8
 8010ec0:	3001      	adds	r0, #1
 8010ec2:	d103      	bne.n	8010ecc <_printf_common+0xac>
 8010ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ecc:	3501      	adds	r5, #1
 8010ece:	e7c6      	b.n	8010e5e <_printf_common+0x3e>
 8010ed0:	18e1      	adds	r1, r4, r3
 8010ed2:	1c5a      	adds	r2, r3, #1
 8010ed4:	2030      	movs	r0, #48	; 0x30
 8010ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010eda:	4422      	add	r2, r4
 8010edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ee4:	3302      	adds	r3, #2
 8010ee6:	e7c7      	b.n	8010e78 <_printf_common+0x58>
 8010ee8:	2301      	movs	r3, #1
 8010eea:	4622      	mov	r2, r4
 8010eec:	4649      	mov	r1, r9
 8010eee:	4638      	mov	r0, r7
 8010ef0:	47c0      	blx	r8
 8010ef2:	3001      	adds	r0, #1
 8010ef4:	d0e6      	beq.n	8010ec4 <_printf_common+0xa4>
 8010ef6:	3601      	adds	r6, #1
 8010ef8:	e7d9      	b.n	8010eae <_printf_common+0x8e>
	...

08010efc <_printf_i>:
 8010efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f00:	460c      	mov	r4, r1
 8010f02:	4691      	mov	r9, r2
 8010f04:	7e27      	ldrb	r7, [r4, #24]
 8010f06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010f08:	2f78      	cmp	r7, #120	; 0x78
 8010f0a:	4680      	mov	r8, r0
 8010f0c:	469a      	mov	sl, r3
 8010f0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f12:	d807      	bhi.n	8010f24 <_printf_i+0x28>
 8010f14:	2f62      	cmp	r7, #98	; 0x62
 8010f16:	d80a      	bhi.n	8010f2e <_printf_i+0x32>
 8010f18:	2f00      	cmp	r7, #0
 8010f1a:	f000 80d8 	beq.w	80110ce <_printf_i+0x1d2>
 8010f1e:	2f58      	cmp	r7, #88	; 0x58
 8010f20:	f000 80a3 	beq.w	801106a <_printf_i+0x16e>
 8010f24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f2c:	e03a      	b.n	8010fa4 <_printf_i+0xa8>
 8010f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f32:	2b15      	cmp	r3, #21
 8010f34:	d8f6      	bhi.n	8010f24 <_printf_i+0x28>
 8010f36:	a001      	add	r0, pc, #4	; (adr r0, 8010f3c <_printf_i+0x40>)
 8010f38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010f3c:	08010f95 	.word	0x08010f95
 8010f40:	08010fa9 	.word	0x08010fa9
 8010f44:	08010f25 	.word	0x08010f25
 8010f48:	08010f25 	.word	0x08010f25
 8010f4c:	08010f25 	.word	0x08010f25
 8010f50:	08010f25 	.word	0x08010f25
 8010f54:	08010fa9 	.word	0x08010fa9
 8010f58:	08010f25 	.word	0x08010f25
 8010f5c:	08010f25 	.word	0x08010f25
 8010f60:	08010f25 	.word	0x08010f25
 8010f64:	08010f25 	.word	0x08010f25
 8010f68:	080110b5 	.word	0x080110b5
 8010f6c:	08010fd9 	.word	0x08010fd9
 8010f70:	08011097 	.word	0x08011097
 8010f74:	08010f25 	.word	0x08010f25
 8010f78:	08010f25 	.word	0x08010f25
 8010f7c:	080110d7 	.word	0x080110d7
 8010f80:	08010f25 	.word	0x08010f25
 8010f84:	08010fd9 	.word	0x08010fd9
 8010f88:	08010f25 	.word	0x08010f25
 8010f8c:	08010f25 	.word	0x08010f25
 8010f90:	0801109f 	.word	0x0801109f
 8010f94:	680b      	ldr	r3, [r1, #0]
 8010f96:	1d1a      	adds	r2, r3, #4
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	600a      	str	r2, [r1, #0]
 8010f9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	e0a3      	b.n	80110f0 <_printf_i+0x1f4>
 8010fa8:	6825      	ldr	r5, [r4, #0]
 8010faa:	6808      	ldr	r0, [r1, #0]
 8010fac:	062e      	lsls	r6, r5, #24
 8010fae:	f100 0304 	add.w	r3, r0, #4
 8010fb2:	d50a      	bpl.n	8010fca <_printf_i+0xce>
 8010fb4:	6805      	ldr	r5, [r0, #0]
 8010fb6:	600b      	str	r3, [r1, #0]
 8010fb8:	2d00      	cmp	r5, #0
 8010fba:	da03      	bge.n	8010fc4 <_printf_i+0xc8>
 8010fbc:	232d      	movs	r3, #45	; 0x2d
 8010fbe:	426d      	negs	r5, r5
 8010fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fc4:	485e      	ldr	r0, [pc, #376]	; (8011140 <_printf_i+0x244>)
 8010fc6:	230a      	movs	r3, #10
 8010fc8:	e019      	b.n	8010ffe <_printf_i+0x102>
 8010fca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010fce:	6805      	ldr	r5, [r0, #0]
 8010fd0:	600b      	str	r3, [r1, #0]
 8010fd2:	bf18      	it	ne
 8010fd4:	b22d      	sxthne	r5, r5
 8010fd6:	e7ef      	b.n	8010fb8 <_printf_i+0xbc>
 8010fd8:	680b      	ldr	r3, [r1, #0]
 8010fda:	6825      	ldr	r5, [r4, #0]
 8010fdc:	1d18      	adds	r0, r3, #4
 8010fde:	6008      	str	r0, [r1, #0]
 8010fe0:	0628      	lsls	r0, r5, #24
 8010fe2:	d501      	bpl.n	8010fe8 <_printf_i+0xec>
 8010fe4:	681d      	ldr	r5, [r3, #0]
 8010fe6:	e002      	b.n	8010fee <_printf_i+0xf2>
 8010fe8:	0669      	lsls	r1, r5, #25
 8010fea:	d5fb      	bpl.n	8010fe4 <_printf_i+0xe8>
 8010fec:	881d      	ldrh	r5, [r3, #0]
 8010fee:	4854      	ldr	r0, [pc, #336]	; (8011140 <_printf_i+0x244>)
 8010ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8010ff2:	bf0c      	ite	eq
 8010ff4:	2308      	moveq	r3, #8
 8010ff6:	230a      	movne	r3, #10
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ffe:	6866      	ldr	r6, [r4, #4]
 8011000:	60a6      	str	r6, [r4, #8]
 8011002:	2e00      	cmp	r6, #0
 8011004:	bfa2      	ittt	ge
 8011006:	6821      	ldrge	r1, [r4, #0]
 8011008:	f021 0104 	bicge.w	r1, r1, #4
 801100c:	6021      	strge	r1, [r4, #0]
 801100e:	b90d      	cbnz	r5, 8011014 <_printf_i+0x118>
 8011010:	2e00      	cmp	r6, #0
 8011012:	d04d      	beq.n	80110b0 <_printf_i+0x1b4>
 8011014:	4616      	mov	r6, r2
 8011016:	fbb5 f1f3 	udiv	r1, r5, r3
 801101a:	fb03 5711 	mls	r7, r3, r1, r5
 801101e:	5dc7      	ldrb	r7, [r0, r7]
 8011020:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011024:	462f      	mov	r7, r5
 8011026:	42bb      	cmp	r3, r7
 8011028:	460d      	mov	r5, r1
 801102a:	d9f4      	bls.n	8011016 <_printf_i+0x11a>
 801102c:	2b08      	cmp	r3, #8
 801102e:	d10b      	bne.n	8011048 <_printf_i+0x14c>
 8011030:	6823      	ldr	r3, [r4, #0]
 8011032:	07df      	lsls	r7, r3, #31
 8011034:	d508      	bpl.n	8011048 <_printf_i+0x14c>
 8011036:	6923      	ldr	r3, [r4, #16]
 8011038:	6861      	ldr	r1, [r4, #4]
 801103a:	4299      	cmp	r1, r3
 801103c:	bfde      	ittt	le
 801103e:	2330      	movle	r3, #48	; 0x30
 8011040:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011044:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011048:	1b92      	subs	r2, r2, r6
 801104a:	6122      	str	r2, [r4, #16]
 801104c:	f8cd a000 	str.w	sl, [sp]
 8011050:	464b      	mov	r3, r9
 8011052:	aa03      	add	r2, sp, #12
 8011054:	4621      	mov	r1, r4
 8011056:	4640      	mov	r0, r8
 8011058:	f7ff fee2 	bl	8010e20 <_printf_common>
 801105c:	3001      	adds	r0, #1
 801105e:	d14c      	bne.n	80110fa <_printf_i+0x1fe>
 8011060:	f04f 30ff 	mov.w	r0, #4294967295
 8011064:	b004      	add	sp, #16
 8011066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801106a:	4835      	ldr	r0, [pc, #212]	; (8011140 <_printf_i+0x244>)
 801106c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011070:	6823      	ldr	r3, [r4, #0]
 8011072:	680e      	ldr	r6, [r1, #0]
 8011074:	061f      	lsls	r7, r3, #24
 8011076:	f856 5b04 	ldr.w	r5, [r6], #4
 801107a:	600e      	str	r6, [r1, #0]
 801107c:	d514      	bpl.n	80110a8 <_printf_i+0x1ac>
 801107e:	07d9      	lsls	r1, r3, #31
 8011080:	bf44      	itt	mi
 8011082:	f043 0320 	orrmi.w	r3, r3, #32
 8011086:	6023      	strmi	r3, [r4, #0]
 8011088:	b91d      	cbnz	r5, 8011092 <_printf_i+0x196>
 801108a:	6823      	ldr	r3, [r4, #0]
 801108c:	f023 0320 	bic.w	r3, r3, #32
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	2310      	movs	r3, #16
 8011094:	e7b0      	b.n	8010ff8 <_printf_i+0xfc>
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	f043 0320 	orr.w	r3, r3, #32
 801109c:	6023      	str	r3, [r4, #0]
 801109e:	2378      	movs	r3, #120	; 0x78
 80110a0:	4828      	ldr	r0, [pc, #160]	; (8011144 <_printf_i+0x248>)
 80110a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110a6:	e7e3      	b.n	8011070 <_printf_i+0x174>
 80110a8:	065e      	lsls	r6, r3, #25
 80110aa:	bf48      	it	mi
 80110ac:	b2ad      	uxthmi	r5, r5
 80110ae:	e7e6      	b.n	801107e <_printf_i+0x182>
 80110b0:	4616      	mov	r6, r2
 80110b2:	e7bb      	b.n	801102c <_printf_i+0x130>
 80110b4:	680b      	ldr	r3, [r1, #0]
 80110b6:	6826      	ldr	r6, [r4, #0]
 80110b8:	6960      	ldr	r0, [r4, #20]
 80110ba:	1d1d      	adds	r5, r3, #4
 80110bc:	600d      	str	r5, [r1, #0]
 80110be:	0635      	lsls	r5, r6, #24
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	d501      	bpl.n	80110c8 <_printf_i+0x1cc>
 80110c4:	6018      	str	r0, [r3, #0]
 80110c6:	e002      	b.n	80110ce <_printf_i+0x1d2>
 80110c8:	0671      	lsls	r1, r6, #25
 80110ca:	d5fb      	bpl.n	80110c4 <_printf_i+0x1c8>
 80110cc:	8018      	strh	r0, [r3, #0]
 80110ce:	2300      	movs	r3, #0
 80110d0:	6123      	str	r3, [r4, #16]
 80110d2:	4616      	mov	r6, r2
 80110d4:	e7ba      	b.n	801104c <_printf_i+0x150>
 80110d6:	680b      	ldr	r3, [r1, #0]
 80110d8:	1d1a      	adds	r2, r3, #4
 80110da:	600a      	str	r2, [r1, #0]
 80110dc:	681e      	ldr	r6, [r3, #0]
 80110de:	6862      	ldr	r2, [r4, #4]
 80110e0:	2100      	movs	r1, #0
 80110e2:	4630      	mov	r0, r6
 80110e4:	f7ef f884 	bl	80001f0 <memchr>
 80110e8:	b108      	cbz	r0, 80110ee <_printf_i+0x1f2>
 80110ea:	1b80      	subs	r0, r0, r6
 80110ec:	6060      	str	r0, [r4, #4]
 80110ee:	6863      	ldr	r3, [r4, #4]
 80110f0:	6123      	str	r3, [r4, #16]
 80110f2:	2300      	movs	r3, #0
 80110f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110f8:	e7a8      	b.n	801104c <_printf_i+0x150>
 80110fa:	6923      	ldr	r3, [r4, #16]
 80110fc:	4632      	mov	r2, r6
 80110fe:	4649      	mov	r1, r9
 8011100:	4640      	mov	r0, r8
 8011102:	47d0      	blx	sl
 8011104:	3001      	adds	r0, #1
 8011106:	d0ab      	beq.n	8011060 <_printf_i+0x164>
 8011108:	6823      	ldr	r3, [r4, #0]
 801110a:	079b      	lsls	r3, r3, #30
 801110c:	d413      	bmi.n	8011136 <_printf_i+0x23a>
 801110e:	68e0      	ldr	r0, [r4, #12]
 8011110:	9b03      	ldr	r3, [sp, #12]
 8011112:	4298      	cmp	r0, r3
 8011114:	bfb8      	it	lt
 8011116:	4618      	movlt	r0, r3
 8011118:	e7a4      	b.n	8011064 <_printf_i+0x168>
 801111a:	2301      	movs	r3, #1
 801111c:	4632      	mov	r2, r6
 801111e:	4649      	mov	r1, r9
 8011120:	4640      	mov	r0, r8
 8011122:	47d0      	blx	sl
 8011124:	3001      	adds	r0, #1
 8011126:	d09b      	beq.n	8011060 <_printf_i+0x164>
 8011128:	3501      	adds	r5, #1
 801112a:	68e3      	ldr	r3, [r4, #12]
 801112c:	9903      	ldr	r1, [sp, #12]
 801112e:	1a5b      	subs	r3, r3, r1
 8011130:	42ab      	cmp	r3, r5
 8011132:	dcf2      	bgt.n	801111a <_printf_i+0x21e>
 8011134:	e7eb      	b.n	801110e <_printf_i+0x212>
 8011136:	2500      	movs	r5, #0
 8011138:	f104 0619 	add.w	r6, r4, #25
 801113c:	e7f5      	b.n	801112a <_printf_i+0x22e>
 801113e:	bf00      	nop
 8011140:	08014c65 	.word	0x08014c65
 8011144:	08014c76 	.word	0x08014c76

08011148 <iprintf>:
 8011148:	b40f      	push	{r0, r1, r2, r3}
 801114a:	4b0a      	ldr	r3, [pc, #40]	; (8011174 <iprintf+0x2c>)
 801114c:	b513      	push	{r0, r1, r4, lr}
 801114e:	681c      	ldr	r4, [r3, #0]
 8011150:	b124      	cbz	r4, 801115c <iprintf+0x14>
 8011152:	69a3      	ldr	r3, [r4, #24]
 8011154:	b913      	cbnz	r3, 801115c <iprintf+0x14>
 8011156:	4620      	mov	r0, r4
 8011158:	f000 fb08 	bl	801176c <__sinit>
 801115c:	ab05      	add	r3, sp, #20
 801115e:	9a04      	ldr	r2, [sp, #16]
 8011160:	68a1      	ldr	r1, [r4, #8]
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	4620      	mov	r0, r4
 8011166:	f7ff fd2b 	bl	8010bc0 <_vfiprintf_r>
 801116a:	b002      	add	sp, #8
 801116c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011170:	b004      	add	sp, #16
 8011172:	4770      	bx	lr
 8011174:	20000034 	.word	0x20000034

08011178 <rand>:
 8011178:	4b17      	ldr	r3, [pc, #92]	; (80111d8 <rand+0x60>)
 801117a:	b510      	push	{r4, lr}
 801117c:	681c      	ldr	r4, [r3, #0]
 801117e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011180:	b9b3      	cbnz	r3, 80111b0 <rand+0x38>
 8011182:	2018      	movs	r0, #24
 8011184:	f7ff fc02 	bl	801098c <malloc>
 8011188:	63a0      	str	r0, [r4, #56]	; 0x38
 801118a:	b928      	cbnz	r0, 8011198 <rand+0x20>
 801118c:	4602      	mov	r2, r0
 801118e:	4b13      	ldr	r3, [pc, #76]	; (80111dc <rand+0x64>)
 8011190:	4813      	ldr	r0, [pc, #76]	; (80111e0 <rand+0x68>)
 8011192:	214e      	movs	r1, #78	; 0x4e
 8011194:	f7ff fba2 	bl	80108dc <__assert_func>
 8011198:	4a12      	ldr	r2, [pc, #72]	; (80111e4 <rand+0x6c>)
 801119a:	4b13      	ldr	r3, [pc, #76]	; (80111e8 <rand+0x70>)
 801119c:	e9c0 2300 	strd	r2, r3, [r0]
 80111a0:	4b12      	ldr	r3, [pc, #72]	; (80111ec <rand+0x74>)
 80111a2:	6083      	str	r3, [r0, #8]
 80111a4:	230b      	movs	r3, #11
 80111a6:	8183      	strh	r3, [r0, #12]
 80111a8:	2201      	movs	r2, #1
 80111aa:	2300      	movs	r3, #0
 80111ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80111b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80111b2:	480f      	ldr	r0, [pc, #60]	; (80111f0 <rand+0x78>)
 80111b4:	690a      	ldr	r2, [r1, #16]
 80111b6:	694b      	ldr	r3, [r1, #20]
 80111b8:	4c0e      	ldr	r4, [pc, #56]	; (80111f4 <rand+0x7c>)
 80111ba:	4350      	muls	r0, r2
 80111bc:	fb04 0003 	mla	r0, r4, r3, r0
 80111c0:	fba2 3404 	umull	r3, r4, r2, r4
 80111c4:	1c5a      	adds	r2, r3, #1
 80111c6:	4404      	add	r4, r0
 80111c8:	f144 0000 	adc.w	r0, r4, #0
 80111cc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80111d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80111d4:	bd10      	pop	{r4, pc}
 80111d6:	bf00      	nop
 80111d8:	20000034 	.word	0x20000034
 80111dc:	08014c87 	.word	0x08014c87
 80111e0:	08014c9e 	.word	0x08014c9e
 80111e4:	abcd330e 	.word	0xabcd330e
 80111e8:	e66d1234 	.word	0xe66d1234
 80111ec:	0005deec 	.word	0x0005deec
 80111f0:	5851f42d 	.word	0x5851f42d
 80111f4:	4c957f2d 	.word	0x4c957f2d

080111f8 <_sbrk_r>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	4d06      	ldr	r5, [pc, #24]	; (8011214 <_sbrk_r+0x1c>)
 80111fc:	2300      	movs	r3, #0
 80111fe:	4604      	mov	r4, r0
 8011200:	4608      	mov	r0, r1
 8011202:	602b      	str	r3, [r5, #0]
 8011204:	f7f2 f94a 	bl	800349c <_sbrk>
 8011208:	1c43      	adds	r3, r0, #1
 801120a:	d102      	bne.n	8011212 <_sbrk_r+0x1a>
 801120c:	682b      	ldr	r3, [r5, #0]
 801120e:	b103      	cbz	r3, 8011212 <_sbrk_r+0x1a>
 8011210:	6023      	str	r3, [r4, #0]
 8011212:	bd38      	pop	{r3, r4, r5, pc}
 8011214:	20008b8c 	.word	0x20008b8c

08011218 <siprintf>:
 8011218:	b40e      	push	{r1, r2, r3}
 801121a:	b500      	push	{lr}
 801121c:	b09c      	sub	sp, #112	; 0x70
 801121e:	ab1d      	add	r3, sp, #116	; 0x74
 8011220:	9002      	str	r0, [sp, #8]
 8011222:	9006      	str	r0, [sp, #24]
 8011224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011228:	4809      	ldr	r0, [pc, #36]	; (8011250 <siprintf+0x38>)
 801122a:	9107      	str	r1, [sp, #28]
 801122c:	9104      	str	r1, [sp, #16]
 801122e:	4909      	ldr	r1, [pc, #36]	; (8011254 <siprintf+0x3c>)
 8011230:	f853 2b04 	ldr.w	r2, [r3], #4
 8011234:	9105      	str	r1, [sp, #20]
 8011236:	6800      	ldr	r0, [r0, #0]
 8011238:	9301      	str	r3, [sp, #4]
 801123a:	a902      	add	r1, sp, #8
 801123c:	f000 fc28 	bl	8011a90 <_svfiprintf_r>
 8011240:	9b02      	ldr	r3, [sp, #8]
 8011242:	2200      	movs	r2, #0
 8011244:	701a      	strb	r2, [r3, #0]
 8011246:	b01c      	add	sp, #112	; 0x70
 8011248:	f85d eb04 	ldr.w	lr, [sp], #4
 801124c:	b003      	add	sp, #12
 801124e:	4770      	bx	lr
 8011250:	20000034 	.word	0x20000034
 8011254:	ffff0208 	.word	0xffff0208

08011258 <strncpy>:
 8011258:	b510      	push	{r4, lr}
 801125a:	3901      	subs	r1, #1
 801125c:	4603      	mov	r3, r0
 801125e:	b132      	cbz	r2, 801126e <strncpy+0x16>
 8011260:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011264:	f803 4b01 	strb.w	r4, [r3], #1
 8011268:	3a01      	subs	r2, #1
 801126a:	2c00      	cmp	r4, #0
 801126c:	d1f7      	bne.n	801125e <strncpy+0x6>
 801126e:	441a      	add	r2, r3
 8011270:	2100      	movs	r1, #0
 8011272:	4293      	cmp	r3, r2
 8011274:	d100      	bne.n	8011278 <strncpy+0x20>
 8011276:	bd10      	pop	{r4, pc}
 8011278:	f803 1b01 	strb.w	r1, [r3], #1
 801127c:	e7f9      	b.n	8011272 <strncpy+0x1a>
	...

08011280 <_strtol_l.isra.0>:
 8011280:	2b01      	cmp	r3, #1
 8011282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011286:	d001      	beq.n	801128c <_strtol_l.isra.0+0xc>
 8011288:	2b24      	cmp	r3, #36	; 0x24
 801128a:	d906      	bls.n	801129a <_strtol_l.isra.0+0x1a>
 801128c:	f000 f94e 	bl	801152c <__errno>
 8011290:	2316      	movs	r3, #22
 8011292:	6003      	str	r3, [r0, #0]
 8011294:	2000      	movs	r0, #0
 8011296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801129a:	4f3a      	ldr	r7, [pc, #232]	; (8011384 <_strtol_l.isra.0+0x104>)
 801129c:	468e      	mov	lr, r1
 801129e:	4676      	mov	r6, lr
 80112a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80112a4:	5de5      	ldrb	r5, [r4, r7]
 80112a6:	f015 0508 	ands.w	r5, r5, #8
 80112aa:	d1f8      	bne.n	801129e <_strtol_l.isra.0+0x1e>
 80112ac:	2c2d      	cmp	r4, #45	; 0x2d
 80112ae:	d134      	bne.n	801131a <_strtol_l.isra.0+0x9a>
 80112b0:	f89e 4000 	ldrb.w	r4, [lr]
 80112b4:	f04f 0801 	mov.w	r8, #1
 80112b8:	f106 0e02 	add.w	lr, r6, #2
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d05c      	beq.n	801137a <_strtol_l.isra.0+0xfa>
 80112c0:	2b10      	cmp	r3, #16
 80112c2:	d10c      	bne.n	80112de <_strtol_l.isra.0+0x5e>
 80112c4:	2c30      	cmp	r4, #48	; 0x30
 80112c6:	d10a      	bne.n	80112de <_strtol_l.isra.0+0x5e>
 80112c8:	f89e 4000 	ldrb.w	r4, [lr]
 80112cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80112d0:	2c58      	cmp	r4, #88	; 0x58
 80112d2:	d14d      	bne.n	8011370 <_strtol_l.isra.0+0xf0>
 80112d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80112d8:	2310      	movs	r3, #16
 80112da:	f10e 0e02 	add.w	lr, lr, #2
 80112de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80112e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80112e6:	2600      	movs	r6, #0
 80112e8:	fbbc f9f3 	udiv	r9, ip, r3
 80112ec:	4635      	mov	r5, r6
 80112ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80112f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80112f6:	2f09      	cmp	r7, #9
 80112f8:	d818      	bhi.n	801132c <_strtol_l.isra.0+0xac>
 80112fa:	463c      	mov	r4, r7
 80112fc:	42a3      	cmp	r3, r4
 80112fe:	dd24      	ble.n	801134a <_strtol_l.isra.0+0xca>
 8011300:	2e00      	cmp	r6, #0
 8011302:	db1f      	blt.n	8011344 <_strtol_l.isra.0+0xc4>
 8011304:	45a9      	cmp	r9, r5
 8011306:	d31d      	bcc.n	8011344 <_strtol_l.isra.0+0xc4>
 8011308:	d101      	bne.n	801130e <_strtol_l.isra.0+0x8e>
 801130a:	45a2      	cmp	sl, r4
 801130c:	db1a      	blt.n	8011344 <_strtol_l.isra.0+0xc4>
 801130e:	fb05 4503 	mla	r5, r5, r3, r4
 8011312:	2601      	movs	r6, #1
 8011314:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011318:	e7eb      	b.n	80112f2 <_strtol_l.isra.0+0x72>
 801131a:	2c2b      	cmp	r4, #43	; 0x2b
 801131c:	bf08      	it	eq
 801131e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8011322:	46a8      	mov	r8, r5
 8011324:	bf08      	it	eq
 8011326:	f106 0e02 	addeq.w	lr, r6, #2
 801132a:	e7c7      	b.n	80112bc <_strtol_l.isra.0+0x3c>
 801132c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011330:	2f19      	cmp	r7, #25
 8011332:	d801      	bhi.n	8011338 <_strtol_l.isra.0+0xb8>
 8011334:	3c37      	subs	r4, #55	; 0x37
 8011336:	e7e1      	b.n	80112fc <_strtol_l.isra.0+0x7c>
 8011338:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801133c:	2f19      	cmp	r7, #25
 801133e:	d804      	bhi.n	801134a <_strtol_l.isra.0+0xca>
 8011340:	3c57      	subs	r4, #87	; 0x57
 8011342:	e7db      	b.n	80112fc <_strtol_l.isra.0+0x7c>
 8011344:	f04f 36ff 	mov.w	r6, #4294967295
 8011348:	e7e4      	b.n	8011314 <_strtol_l.isra.0+0x94>
 801134a:	2e00      	cmp	r6, #0
 801134c:	da05      	bge.n	801135a <_strtol_l.isra.0+0xda>
 801134e:	2322      	movs	r3, #34	; 0x22
 8011350:	6003      	str	r3, [r0, #0]
 8011352:	4665      	mov	r5, ip
 8011354:	b942      	cbnz	r2, 8011368 <_strtol_l.isra.0+0xe8>
 8011356:	4628      	mov	r0, r5
 8011358:	e79d      	b.n	8011296 <_strtol_l.isra.0+0x16>
 801135a:	f1b8 0f00 	cmp.w	r8, #0
 801135e:	d000      	beq.n	8011362 <_strtol_l.isra.0+0xe2>
 8011360:	426d      	negs	r5, r5
 8011362:	2a00      	cmp	r2, #0
 8011364:	d0f7      	beq.n	8011356 <_strtol_l.isra.0+0xd6>
 8011366:	b10e      	cbz	r6, 801136c <_strtol_l.isra.0+0xec>
 8011368:	f10e 31ff 	add.w	r1, lr, #4294967295
 801136c:	6011      	str	r1, [r2, #0]
 801136e:	e7f2      	b.n	8011356 <_strtol_l.isra.0+0xd6>
 8011370:	2430      	movs	r4, #48	; 0x30
 8011372:	2b00      	cmp	r3, #0
 8011374:	d1b3      	bne.n	80112de <_strtol_l.isra.0+0x5e>
 8011376:	2308      	movs	r3, #8
 8011378:	e7b1      	b.n	80112de <_strtol_l.isra.0+0x5e>
 801137a:	2c30      	cmp	r4, #48	; 0x30
 801137c:	d0a4      	beq.n	80112c8 <_strtol_l.isra.0+0x48>
 801137e:	230a      	movs	r3, #10
 8011380:	e7ad      	b.n	80112de <_strtol_l.isra.0+0x5e>
 8011382:	bf00      	nop
 8011384:	08014b4f 	.word	0x08014b4f

08011388 <strtol>:
 8011388:	4613      	mov	r3, r2
 801138a:	460a      	mov	r2, r1
 801138c:	4601      	mov	r1, r0
 801138e:	4802      	ldr	r0, [pc, #8]	; (8011398 <strtol+0x10>)
 8011390:	6800      	ldr	r0, [r0, #0]
 8011392:	f7ff bf75 	b.w	8011280 <_strtol_l.isra.0>
 8011396:	bf00      	nop
 8011398:	20000034 	.word	0x20000034

0801139c <__swbuf_r>:
 801139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801139e:	460e      	mov	r6, r1
 80113a0:	4614      	mov	r4, r2
 80113a2:	4605      	mov	r5, r0
 80113a4:	b118      	cbz	r0, 80113ae <__swbuf_r+0x12>
 80113a6:	6983      	ldr	r3, [r0, #24]
 80113a8:	b90b      	cbnz	r3, 80113ae <__swbuf_r+0x12>
 80113aa:	f000 f9df 	bl	801176c <__sinit>
 80113ae:	4b21      	ldr	r3, [pc, #132]	; (8011434 <__swbuf_r+0x98>)
 80113b0:	429c      	cmp	r4, r3
 80113b2:	d12b      	bne.n	801140c <__swbuf_r+0x70>
 80113b4:	686c      	ldr	r4, [r5, #4]
 80113b6:	69a3      	ldr	r3, [r4, #24]
 80113b8:	60a3      	str	r3, [r4, #8]
 80113ba:	89a3      	ldrh	r3, [r4, #12]
 80113bc:	071a      	lsls	r2, r3, #28
 80113be:	d52f      	bpl.n	8011420 <__swbuf_r+0x84>
 80113c0:	6923      	ldr	r3, [r4, #16]
 80113c2:	b36b      	cbz	r3, 8011420 <__swbuf_r+0x84>
 80113c4:	6923      	ldr	r3, [r4, #16]
 80113c6:	6820      	ldr	r0, [r4, #0]
 80113c8:	1ac0      	subs	r0, r0, r3
 80113ca:	6963      	ldr	r3, [r4, #20]
 80113cc:	b2f6      	uxtb	r6, r6
 80113ce:	4283      	cmp	r3, r0
 80113d0:	4637      	mov	r7, r6
 80113d2:	dc04      	bgt.n	80113de <__swbuf_r+0x42>
 80113d4:	4621      	mov	r1, r4
 80113d6:	4628      	mov	r0, r5
 80113d8:	f000 f934 	bl	8011644 <_fflush_r>
 80113dc:	bb30      	cbnz	r0, 801142c <__swbuf_r+0x90>
 80113de:	68a3      	ldr	r3, [r4, #8]
 80113e0:	3b01      	subs	r3, #1
 80113e2:	60a3      	str	r3, [r4, #8]
 80113e4:	6823      	ldr	r3, [r4, #0]
 80113e6:	1c5a      	adds	r2, r3, #1
 80113e8:	6022      	str	r2, [r4, #0]
 80113ea:	701e      	strb	r6, [r3, #0]
 80113ec:	6963      	ldr	r3, [r4, #20]
 80113ee:	3001      	adds	r0, #1
 80113f0:	4283      	cmp	r3, r0
 80113f2:	d004      	beq.n	80113fe <__swbuf_r+0x62>
 80113f4:	89a3      	ldrh	r3, [r4, #12]
 80113f6:	07db      	lsls	r3, r3, #31
 80113f8:	d506      	bpl.n	8011408 <__swbuf_r+0x6c>
 80113fa:	2e0a      	cmp	r6, #10
 80113fc:	d104      	bne.n	8011408 <__swbuf_r+0x6c>
 80113fe:	4621      	mov	r1, r4
 8011400:	4628      	mov	r0, r5
 8011402:	f000 f91f 	bl	8011644 <_fflush_r>
 8011406:	b988      	cbnz	r0, 801142c <__swbuf_r+0x90>
 8011408:	4638      	mov	r0, r7
 801140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801140c:	4b0a      	ldr	r3, [pc, #40]	; (8011438 <__swbuf_r+0x9c>)
 801140e:	429c      	cmp	r4, r3
 8011410:	d101      	bne.n	8011416 <__swbuf_r+0x7a>
 8011412:	68ac      	ldr	r4, [r5, #8]
 8011414:	e7cf      	b.n	80113b6 <__swbuf_r+0x1a>
 8011416:	4b09      	ldr	r3, [pc, #36]	; (801143c <__swbuf_r+0xa0>)
 8011418:	429c      	cmp	r4, r3
 801141a:	bf08      	it	eq
 801141c:	68ec      	ldreq	r4, [r5, #12]
 801141e:	e7ca      	b.n	80113b6 <__swbuf_r+0x1a>
 8011420:	4621      	mov	r1, r4
 8011422:	4628      	mov	r0, r5
 8011424:	f000 f80c 	bl	8011440 <__swsetup_r>
 8011428:	2800      	cmp	r0, #0
 801142a:	d0cb      	beq.n	80113c4 <__swbuf_r+0x28>
 801142c:	f04f 37ff 	mov.w	r7, #4294967295
 8011430:	e7ea      	b.n	8011408 <__swbuf_r+0x6c>
 8011432:	bf00      	nop
 8011434:	08014d20 	.word	0x08014d20
 8011438:	08014d40 	.word	0x08014d40
 801143c:	08014d00 	.word	0x08014d00

08011440 <__swsetup_r>:
 8011440:	4b32      	ldr	r3, [pc, #200]	; (801150c <__swsetup_r+0xcc>)
 8011442:	b570      	push	{r4, r5, r6, lr}
 8011444:	681d      	ldr	r5, [r3, #0]
 8011446:	4606      	mov	r6, r0
 8011448:	460c      	mov	r4, r1
 801144a:	b125      	cbz	r5, 8011456 <__swsetup_r+0x16>
 801144c:	69ab      	ldr	r3, [r5, #24]
 801144e:	b913      	cbnz	r3, 8011456 <__swsetup_r+0x16>
 8011450:	4628      	mov	r0, r5
 8011452:	f000 f98b 	bl	801176c <__sinit>
 8011456:	4b2e      	ldr	r3, [pc, #184]	; (8011510 <__swsetup_r+0xd0>)
 8011458:	429c      	cmp	r4, r3
 801145a:	d10f      	bne.n	801147c <__swsetup_r+0x3c>
 801145c:	686c      	ldr	r4, [r5, #4]
 801145e:	89a3      	ldrh	r3, [r4, #12]
 8011460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011464:	0719      	lsls	r1, r3, #28
 8011466:	d42c      	bmi.n	80114c2 <__swsetup_r+0x82>
 8011468:	06dd      	lsls	r5, r3, #27
 801146a:	d411      	bmi.n	8011490 <__swsetup_r+0x50>
 801146c:	2309      	movs	r3, #9
 801146e:	6033      	str	r3, [r6, #0]
 8011470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011474:	81a3      	strh	r3, [r4, #12]
 8011476:	f04f 30ff 	mov.w	r0, #4294967295
 801147a:	e03e      	b.n	80114fa <__swsetup_r+0xba>
 801147c:	4b25      	ldr	r3, [pc, #148]	; (8011514 <__swsetup_r+0xd4>)
 801147e:	429c      	cmp	r4, r3
 8011480:	d101      	bne.n	8011486 <__swsetup_r+0x46>
 8011482:	68ac      	ldr	r4, [r5, #8]
 8011484:	e7eb      	b.n	801145e <__swsetup_r+0x1e>
 8011486:	4b24      	ldr	r3, [pc, #144]	; (8011518 <__swsetup_r+0xd8>)
 8011488:	429c      	cmp	r4, r3
 801148a:	bf08      	it	eq
 801148c:	68ec      	ldreq	r4, [r5, #12]
 801148e:	e7e6      	b.n	801145e <__swsetup_r+0x1e>
 8011490:	0758      	lsls	r0, r3, #29
 8011492:	d512      	bpl.n	80114ba <__swsetup_r+0x7a>
 8011494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011496:	b141      	cbz	r1, 80114aa <__swsetup_r+0x6a>
 8011498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801149c:	4299      	cmp	r1, r3
 801149e:	d002      	beq.n	80114a6 <__swsetup_r+0x66>
 80114a0:	4630      	mov	r0, r6
 80114a2:	f7ff fab9 	bl	8010a18 <_free_r>
 80114a6:	2300      	movs	r3, #0
 80114a8:	6363      	str	r3, [r4, #52]	; 0x34
 80114aa:	89a3      	ldrh	r3, [r4, #12]
 80114ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114b0:	81a3      	strh	r3, [r4, #12]
 80114b2:	2300      	movs	r3, #0
 80114b4:	6063      	str	r3, [r4, #4]
 80114b6:	6923      	ldr	r3, [r4, #16]
 80114b8:	6023      	str	r3, [r4, #0]
 80114ba:	89a3      	ldrh	r3, [r4, #12]
 80114bc:	f043 0308 	orr.w	r3, r3, #8
 80114c0:	81a3      	strh	r3, [r4, #12]
 80114c2:	6923      	ldr	r3, [r4, #16]
 80114c4:	b94b      	cbnz	r3, 80114da <__swsetup_r+0x9a>
 80114c6:	89a3      	ldrh	r3, [r4, #12]
 80114c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80114cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114d0:	d003      	beq.n	80114da <__swsetup_r+0x9a>
 80114d2:	4621      	mov	r1, r4
 80114d4:	4630      	mov	r0, r6
 80114d6:	f000 fa0d 	bl	80118f4 <__smakebuf_r>
 80114da:	89a0      	ldrh	r0, [r4, #12]
 80114dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114e0:	f010 0301 	ands.w	r3, r0, #1
 80114e4:	d00a      	beq.n	80114fc <__swsetup_r+0xbc>
 80114e6:	2300      	movs	r3, #0
 80114e8:	60a3      	str	r3, [r4, #8]
 80114ea:	6963      	ldr	r3, [r4, #20]
 80114ec:	425b      	negs	r3, r3
 80114ee:	61a3      	str	r3, [r4, #24]
 80114f0:	6923      	ldr	r3, [r4, #16]
 80114f2:	b943      	cbnz	r3, 8011506 <__swsetup_r+0xc6>
 80114f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80114f8:	d1ba      	bne.n	8011470 <__swsetup_r+0x30>
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	0781      	lsls	r1, r0, #30
 80114fe:	bf58      	it	pl
 8011500:	6963      	ldrpl	r3, [r4, #20]
 8011502:	60a3      	str	r3, [r4, #8]
 8011504:	e7f4      	b.n	80114f0 <__swsetup_r+0xb0>
 8011506:	2000      	movs	r0, #0
 8011508:	e7f7      	b.n	80114fa <__swsetup_r+0xba>
 801150a:	bf00      	nop
 801150c:	20000034 	.word	0x20000034
 8011510:	08014d20 	.word	0x08014d20
 8011514:	08014d40 	.word	0x08014d40
 8011518:	08014d00 	.word	0x08014d00

0801151c <abort>:
 801151c:	b508      	push	{r3, lr}
 801151e:	2006      	movs	r0, #6
 8011520:	f000 fbde 	bl	8011ce0 <raise>
 8011524:	2001      	movs	r0, #1
 8011526:	f7f1 ff41 	bl	80033ac <_exit>
	...

0801152c <__errno>:
 801152c:	4b01      	ldr	r3, [pc, #4]	; (8011534 <__errno+0x8>)
 801152e:	6818      	ldr	r0, [r3, #0]
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	20000034 	.word	0x20000034

08011538 <__sflush_r>:
 8011538:	898a      	ldrh	r2, [r1, #12]
 801153a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801153e:	4605      	mov	r5, r0
 8011540:	0710      	lsls	r0, r2, #28
 8011542:	460c      	mov	r4, r1
 8011544:	d458      	bmi.n	80115f8 <__sflush_r+0xc0>
 8011546:	684b      	ldr	r3, [r1, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	dc05      	bgt.n	8011558 <__sflush_r+0x20>
 801154c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801154e:	2b00      	cmp	r3, #0
 8011550:	dc02      	bgt.n	8011558 <__sflush_r+0x20>
 8011552:	2000      	movs	r0, #0
 8011554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801155a:	2e00      	cmp	r6, #0
 801155c:	d0f9      	beq.n	8011552 <__sflush_r+0x1a>
 801155e:	2300      	movs	r3, #0
 8011560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011564:	682f      	ldr	r7, [r5, #0]
 8011566:	602b      	str	r3, [r5, #0]
 8011568:	d032      	beq.n	80115d0 <__sflush_r+0x98>
 801156a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801156c:	89a3      	ldrh	r3, [r4, #12]
 801156e:	075a      	lsls	r2, r3, #29
 8011570:	d505      	bpl.n	801157e <__sflush_r+0x46>
 8011572:	6863      	ldr	r3, [r4, #4]
 8011574:	1ac0      	subs	r0, r0, r3
 8011576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011578:	b10b      	cbz	r3, 801157e <__sflush_r+0x46>
 801157a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801157c:	1ac0      	subs	r0, r0, r3
 801157e:	2300      	movs	r3, #0
 8011580:	4602      	mov	r2, r0
 8011582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011584:	6a21      	ldr	r1, [r4, #32]
 8011586:	4628      	mov	r0, r5
 8011588:	47b0      	blx	r6
 801158a:	1c43      	adds	r3, r0, #1
 801158c:	89a3      	ldrh	r3, [r4, #12]
 801158e:	d106      	bne.n	801159e <__sflush_r+0x66>
 8011590:	6829      	ldr	r1, [r5, #0]
 8011592:	291d      	cmp	r1, #29
 8011594:	d82c      	bhi.n	80115f0 <__sflush_r+0xb8>
 8011596:	4a2a      	ldr	r2, [pc, #168]	; (8011640 <__sflush_r+0x108>)
 8011598:	40ca      	lsrs	r2, r1
 801159a:	07d6      	lsls	r6, r2, #31
 801159c:	d528      	bpl.n	80115f0 <__sflush_r+0xb8>
 801159e:	2200      	movs	r2, #0
 80115a0:	6062      	str	r2, [r4, #4]
 80115a2:	04d9      	lsls	r1, r3, #19
 80115a4:	6922      	ldr	r2, [r4, #16]
 80115a6:	6022      	str	r2, [r4, #0]
 80115a8:	d504      	bpl.n	80115b4 <__sflush_r+0x7c>
 80115aa:	1c42      	adds	r2, r0, #1
 80115ac:	d101      	bne.n	80115b2 <__sflush_r+0x7a>
 80115ae:	682b      	ldr	r3, [r5, #0]
 80115b0:	b903      	cbnz	r3, 80115b4 <__sflush_r+0x7c>
 80115b2:	6560      	str	r0, [r4, #84]	; 0x54
 80115b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115b6:	602f      	str	r7, [r5, #0]
 80115b8:	2900      	cmp	r1, #0
 80115ba:	d0ca      	beq.n	8011552 <__sflush_r+0x1a>
 80115bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115c0:	4299      	cmp	r1, r3
 80115c2:	d002      	beq.n	80115ca <__sflush_r+0x92>
 80115c4:	4628      	mov	r0, r5
 80115c6:	f7ff fa27 	bl	8010a18 <_free_r>
 80115ca:	2000      	movs	r0, #0
 80115cc:	6360      	str	r0, [r4, #52]	; 0x34
 80115ce:	e7c1      	b.n	8011554 <__sflush_r+0x1c>
 80115d0:	6a21      	ldr	r1, [r4, #32]
 80115d2:	2301      	movs	r3, #1
 80115d4:	4628      	mov	r0, r5
 80115d6:	47b0      	blx	r6
 80115d8:	1c41      	adds	r1, r0, #1
 80115da:	d1c7      	bne.n	801156c <__sflush_r+0x34>
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d0c4      	beq.n	801156c <__sflush_r+0x34>
 80115e2:	2b1d      	cmp	r3, #29
 80115e4:	d001      	beq.n	80115ea <__sflush_r+0xb2>
 80115e6:	2b16      	cmp	r3, #22
 80115e8:	d101      	bne.n	80115ee <__sflush_r+0xb6>
 80115ea:	602f      	str	r7, [r5, #0]
 80115ec:	e7b1      	b.n	8011552 <__sflush_r+0x1a>
 80115ee:	89a3      	ldrh	r3, [r4, #12]
 80115f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115f4:	81a3      	strh	r3, [r4, #12]
 80115f6:	e7ad      	b.n	8011554 <__sflush_r+0x1c>
 80115f8:	690f      	ldr	r7, [r1, #16]
 80115fa:	2f00      	cmp	r7, #0
 80115fc:	d0a9      	beq.n	8011552 <__sflush_r+0x1a>
 80115fe:	0793      	lsls	r3, r2, #30
 8011600:	680e      	ldr	r6, [r1, #0]
 8011602:	bf08      	it	eq
 8011604:	694b      	ldreq	r3, [r1, #20]
 8011606:	600f      	str	r7, [r1, #0]
 8011608:	bf18      	it	ne
 801160a:	2300      	movne	r3, #0
 801160c:	eba6 0807 	sub.w	r8, r6, r7
 8011610:	608b      	str	r3, [r1, #8]
 8011612:	f1b8 0f00 	cmp.w	r8, #0
 8011616:	dd9c      	ble.n	8011552 <__sflush_r+0x1a>
 8011618:	6a21      	ldr	r1, [r4, #32]
 801161a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801161c:	4643      	mov	r3, r8
 801161e:	463a      	mov	r2, r7
 8011620:	4628      	mov	r0, r5
 8011622:	47b0      	blx	r6
 8011624:	2800      	cmp	r0, #0
 8011626:	dc06      	bgt.n	8011636 <__sflush_r+0xfe>
 8011628:	89a3      	ldrh	r3, [r4, #12]
 801162a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801162e:	81a3      	strh	r3, [r4, #12]
 8011630:	f04f 30ff 	mov.w	r0, #4294967295
 8011634:	e78e      	b.n	8011554 <__sflush_r+0x1c>
 8011636:	4407      	add	r7, r0
 8011638:	eba8 0800 	sub.w	r8, r8, r0
 801163c:	e7e9      	b.n	8011612 <__sflush_r+0xda>
 801163e:	bf00      	nop
 8011640:	20400001 	.word	0x20400001

08011644 <_fflush_r>:
 8011644:	b538      	push	{r3, r4, r5, lr}
 8011646:	690b      	ldr	r3, [r1, #16]
 8011648:	4605      	mov	r5, r0
 801164a:	460c      	mov	r4, r1
 801164c:	b913      	cbnz	r3, 8011654 <_fflush_r+0x10>
 801164e:	2500      	movs	r5, #0
 8011650:	4628      	mov	r0, r5
 8011652:	bd38      	pop	{r3, r4, r5, pc}
 8011654:	b118      	cbz	r0, 801165e <_fflush_r+0x1a>
 8011656:	6983      	ldr	r3, [r0, #24]
 8011658:	b90b      	cbnz	r3, 801165e <_fflush_r+0x1a>
 801165a:	f000 f887 	bl	801176c <__sinit>
 801165e:	4b14      	ldr	r3, [pc, #80]	; (80116b0 <_fflush_r+0x6c>)
 8011660:	429c      	cmp	r4, r3
 8011662:	d11b      	bne.n	801169c <_fflush_r+0x58>
 8011664:	686c      	ldr	r4, [r5, #4]
 8011666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d0ef      	beq.n	801164e <_fflush_r+0xa>
 801166e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011670:	07d0      	lsls	r0, r2, #31
 8011672:	d404      	bmi.n	801167e <_fflush_r+0x3a>
 8011674:	0599      	lsls	r1, r3, #22
 8011676:	d402      	bmi.n	801167e <_fflush_r+0x3a>
 8011678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801167a:	f000 f915 	bl	80118a8 <__retarget_lock_acquire_recursive>
 801167e:	4628      	mov	r0, r5
 8011680:	4621      	mov	r1, r4
 8011682:	f7ff ff59 	bl	8011538 <__sflush_r>
 8011686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011688:	07da      	lsls	r2, r3, #31
 801168a:	4605      	mov	r5, r0
 801168c:	d4e0      	bmi.n	8011650 <_fflush_r+0xc>
 801168e:	89a3      	ldrh	r3, [r4, #12]
 8011690:	059b      	lsls	r3, r3, #22
 8011692:	d4dd      	bmi.n	8011650 <_fflush_r+0xc>
 8011694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011696:	f000 f908 	bl	80118aa <__retarget_lock_release_recursive>
 801169a:	e7d9      	b.n	8011650 <_fflush_r+0xc>
 801169c:	4b05      	ldr	r3, [pc, #20]	; (80116b4 <_fflush_r+0x70>)
 801169e:	429c      	cmp	r4, r3
 80116a0:	d101      	bne.n	80116a6 <_fflush_r+0x62>
 80116a2:	68ac      	ldr	r4, [r5, #8]
 80116a4:	e7df      	b.n	8011666 <_fflush_r+0x22>
 80116a6:	4b04      	ldr	r3, [pc, #16]	; (80116b8 <_fflush_r+0x74>)
 80116a8:	429c      	cmp	r4, r3
 80116aa:	bf08      	it	eq
 80116ac:	68ec      	ldreq	r4, [r5, #12]
 80116ae:	e7da      	b.n	8011666 <_fflush_r+0x22>
 80116b0:	08014d20 	.word	0x08014d20
 80116b4:	08014d40 	.word	0x08014d40
 80116b8:	08014d00 	.word	0x08014d00

080116bc <std>:
 80116bc:	2300      	movs	r3, #0
 80116be:	b510      	push	{r4, lr}
 80116c0:	4604      	mov	r4, r0
 80116c2:	e9c0 3300 	strd	r3, r3, [r0]
 80116c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116ca:	6083      	str	r3, [r0, #8]
 80116cc:	8181      	strh	r1, [r0, #12]
 80116ce:	6643      	str	r3, [r0, #100]	; 0x64
 80116d0:	81c2      	strh	r2, [r0, #14]
 80116d2:	6183      	str	r3, [r0, #24]
 80116d4:	4619      	mov	r1, r3
 80116d6:	2208      	movs	r2, #8
 80116d8:	305c      	adds	r0, #92	; 0x5c
 80116da:	f7ff f995 	bl	8010a08 <memset>
 80116de:	4b05      	ldr	r3, [pc, #20]	; (80116f4 <std+0x38>)
 80116e0:	6263      	str	r3, [r4, #36]	; 0x24
 80116e2:	4b05      	ldr	r3, [pc, #20]	; (80116f8 <std+0x3c>)
 80116e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80116e6:	4b05      	ldr	r3, [pc, #20]	; (80116fc <std+0x40>)
 80116e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116ea:	4b05      	ldr	r3, [pc, #20]	; (8011700 <std+0x44>)
 80116ec:	6224      	str	r4, [r4, #32]
 80116ee:	6323      	str	r3, [r4, #48]	; 0x30
 80116f0:	bd10      	pop	{r4, pc}
 80116f2:	bf00      	nop
 80116f4:	08011d19 	.word	0x08011d19
 80116f8:	08011d3b 	.word	0x08011d3b
 80116fc:	08011d73 	.word	0x08011d73
 8011700:	08011d97 	.word	0x08011d97

08011704 <_cleanup_r>:
 8011704:	4901      	ldr	r1, [pc, #4]	; (801170c <_cleanup_r+0x8>)
 8011706:	f000 b8af 	b.w	8011868 <_fwalk_reent>
 801170a:	bf00      	nop
 801170c:	08011645 	.word	0x08011645

08011710 <__sfmoreglue>:
 8011710:	b570      	push	{r4, r5, r6, lr}
 8011712:	1e4a      	subs	r2, r1, #1
 8011714:	2568      	movs	r5, #104	; 0x68
 8011716:	4355      	muls	r5, r2
 8011718:	460e      	mov	r6, r1
 801171a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801171e:	f7ff f9cb 	bl	8010ab8 <_malloc_r>
 8011722:	4604      	mov	r4, r0
 8011724:	b140      	cbz	r0, 8011738 <__sfmoreglue+0x28>
 8011726:	2100      	movs	r1, #0
 8011728:	e9c0 1600 	strd	r1, r6, [r0]
 801172c:	300c      	adds	r0, #12
 801172e:	60a0      	str	r0, [r4, #8]
 8011730:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011734:	f7ff f968 	bl	8010a08 <memset>
 8011738:	4620      	mov	r0, r4
 801173a:	bd70      	pop	{r4, r5, r6, pc}

0801173c <__sfp_lock_acquire>:
 801173c:	4801      	ldr	r0, [pc, #4]	; (8011744 <__sfp_lock_acquire+0x8>)
 801173e:	f000 b8b3 	b.w	80118a8 <__retarget_lock_acquire_recursive>
 8011742:	bf00      	nop
 8011744:	20008b98 	.word	0x20008b98

08011748 <__sfp_lock_release>:
 8011748:	4801      	ldr	r0, [pc, #4]	; (8011750 <__sfp_lock_release+0x8>)
 801174a:	f000 b8ae 	b.w	80118aa <__retarget_lock_release_recursive>
 801174e:	bf00      	nop
 8011750:	20008b98 	.word	0x20008b98

08011754 <__sinit_lock_acquire>:
 8011754:	4801      	ldr	r0, [pc, #4]	; (801175c <__sinit_lock_acquire+0x8>)
 8011756:	f000 b8a7 	b.w	80118a8 <__retarget_lock_acquire_recursive>
 801175a:	bf00      	nop
 801175c:	20008b93 	.word	0x20008b93

08011760 <__sinit_lock_release>:
 8011760:	4801      	ldr	r0, [pc, #4]	; (8011768 <__sinit_lock_release+0x8>)
 8011762:	f000 b8a2 	b.w	80118aa <__retarget_lock_release_recursive>
 8011766:	bf00      	nop
 8011768:	20008b93 	.word	0x20008b93

0801176c <__sinit>:
 801176c:	b510      	push	{r4, lr}
 801176e:	4604      	mov	r4, r0
 8011770:	f7ff fff0 	bl	8011754 <__sinit_lock_acquire>
 8011774:	69a3      	ldr	r3, [r4, #24]
 8011776:	b11b      	cbz	r3, 8011780 <__sinit+0x14>
 8011778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801177c:	f7ff bff0 	b.w	8011760 <__sinit_lock_release>
 8011780:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011784:	6523      	str	r3, [r4, #80]	; 0x50
 8011786:	4b13      	ldr	r3, [pc, #76]	; (80117d4 <__sinit+0x68>)
 8011788:	4a13      	ldr	r2, [pc, #76]	; (80117d8 <__sinit+0x6c>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	62a2      	str	r2, [r4, #40]	; 0x28
 801178e:	42a3      	cmp	r3, r4
 8011790:	bf04      	itt	eq
 8011792:	2301      	moveq	r3, #1
 8011794:	61a3      	streq	r3, [r4, #24]
 8011796:	4620      	mov	r0, r4
 8011798:	f000 f820 	bl	80117dc <__sfp>
 801179c:	6060      	str	r0, [r4, #4]
 801179e:	4620      	mov	r0, r4
 80117a0:	f000 f81c 	bl	80117dc <__sfp>
 80117a4:	60a0      	str	r0, [r4, #8]
 80117a6:	4620      	mov	r0, r4
 80117a8:	f000 f818 	bl	80117dc <__sfp>
 80117ac:	2200      	movs	r2, #0
 80117ae:	60e0      	str	r0, [r4, #12]
 80117b0:	2104      	movs	r1, #4
 80117b2:	6860      	ldr	r0, [r4, #4]
 80117b4:	f7ff ff82 	bl	80116bc <std>
 80117b8:	68a0      	ldr	r0, [r4, #8]
 80117ba:	2201      	movs	r2, #1
 80117bc:	2109      	movs	r1, #9
 80117be:	f7ff ff7d 	bl	80116bc <std>
 80117c2:	68e0      	ldr	r0, [r4, #12]
 80117c4:	2202      	movs	r2, #2
 80117c6:	2112      	movs	r1, #18
 80117c8:	f7ff ff78 	bl	80116bc <std>
 80117cc:	2301      	movs	r3, #1
 80117ce:	61a3      	str	r3, [r4, #24]
 80117d0:	e7d2      	b.n	8011778 <__sinit+0xc>
 80117d2:	bf00      	nop
 80117d4:	08014c50 	.word	0x08014c50
 80117d8:	08011705 	.word	0x08011705

080117dc <__sfp>:
 80117dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117de:	4607      	mov	r7, r0
 80117e0:	f7ff ffac 	bl	801173c <__sfp_lock_acquire>
 80117e4:	4b1e      	ldr	r3, [pc, #120]	; (8011860 <__sfp+0x84>)
 80117e6:	681e      	ldr	r6, [r3, #0]
 80117e8:	69b3      	ldr	r3, [r6, #24]
 80117ea:	b913      	cbnz	r3, 80117f2 <__sfp+0x16>
 80117ec:	4630      	mov	r0, r6
 80117ee:	f7ff ffbd 	bl	801176c <__sinit>
 80117f2:	3648      	adds	r6, #72	; 0x48
 80117f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80117f8:	3b01      	subs	r3, #1
 80117fa:	d503      	bpl.n	8011804 <__sfp+0x28>
 80117fc:	6833      	ldr	r3, [r6, #0]
 80117fe:	b30b      	cbz	r3, 8011844 <__sfp+0x68>
 8011800:	6836      	ldr	r6, [r6, #0]
 8011802:	e7f7      	b.n	80117f4 <__sfp+0x18>
 8011804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011808:	b9d5      	cbnz	r5, 8011840 <__sfp+0x64>
 801180a:	4b16      	ldr	r3, [pc, #88]	; (8011864 <__sfp+0x88>)
 801180c:	60e3      	str	r3, [r4, #12]
 801180e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011812:	6665      	str	r5, [r4, #100]	; 0x64
 8011814:	f000 f847 	bl	80118a6 <__retarget_lock_init_recursive>
 8011818:	f7ff ff96 	bl	8011748 <__sfp_lock_release>
 801181c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011820:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011824:	6025      	str	r5, [r4, #0]
 8011826:	61a5      	str	r5, [r4, #24]
 8011828:	2208      	movs	r2, #8
 801182a:	4629      	mov	r1, r5
 801182c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011830:	f7ff f8ea 	bl	8010a08 <memset>
 8011834:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011838:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801183c:	4620      	mov	r0, r4
 801183e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011840:	3468      	adds	r4, #104	; 0x68
 8011842:	e7d9      	b.n	80117f8 <__sfp+0x1c>
 8011844:	2104      	movs	r1, #4
 8011846:	4638      	mov	r0, r7
 8011848:	f7ff ff62 	bl	8011710 <__sfmoreglue>
 801184c:	4604      	mov	r4, r0
 801184e:	6030      	str	r0, [r6, #0]
 8011850:	2800      	cmp	r0, #0
 8011852:	d1d5      	bne.n	8011800 <__sfp+0x24>
 8011854:	f7ff ff78 	bl	8011748 <__sfp_lock_release>
 8011858:	230c      	movs	r3, #12
 801185a:	603b      	str	r3, [r7, #0]
 801185c:	e7ee      	b.n	801183c <__sfp+0x60>
 801185e:	bf00      	nop
 8011860:	08014c50 	.word	0x08014c50
 8011864:	ffff0001 	.word	0xffff0001

08011868 <_fwalk_reent>:
 8011868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801186c:	4606      	mov	r6, r0
 801186e:	4688      	mov	r8, r1
 8011870:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011874:	2700      	movs	r7, #0
 8011876:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801187a:	f1b9 0901 	subs.w	r9, r9, #1
 801187e:	d505      	bpl.n	801188c <_fwalk_reent+0x24>
 8011880:	6824      	ldr	r4, [r4, #0]
 8011882:	2c00      	cmp	r4, #0
 8011884:	d1f7      	bne.n	8011876 <_fwalk_reent+0xe>
 8011886:	4638      	mov	r0, r7
 8011888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801188c:	89ab      	ldrh	r3, [r5, #12]
 801188e:	2b01      	cmp	r3, #1
 8011890:	d907      	bls.n	80118a2 <_fwalk_reent+0x3a>
 8011892:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011896:	3301      	adds	r3, #1
 8011898:	d003      	beq.n	80118a2 <_fwalk_reent+0x3a>
 801189a:	4629      	mov	r1, r5
 801189c:	4630      	mov	r0, r6
 801189e:	47c0      	blx	r8
 80118a0:	4307      	orrs	r7, r0
 80118a2:	3568      	adds	r5, #104	; 0x68
 80118a4:	e7e9      	b.n	801187a <_fwalk_reent+0x12>

080118a6 <__retarget_lock_init_recursive>:
 80118a6:	4770      	bx	lr

080118a8 <__retarget_lock_acquire_recursive>:
 80118a8:	4770      	bx	lr

080118aa <__retarget_lock_release_recursive>:
 80118aa:	4770      	bx	lr

080118ac <__swhatbuf_r>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	460e      	mov	r6, r1
 80118b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118b4:	2900      	cmp	r1, #0
 80118b6:	b096      	sub	sp, #88	; 0x58
 80118b8:	4614      	mov	r4, r2
 80118ba:	461d      	mov	r5, r3
 80118bc:	da07      	bge.n	80118ce <__swhatbuf_r+0x22>
 80118be:	2300      	movs	r3, #0
 80118c0:	602b      	str	r3, [r5, #0]
 80118c2:	89b3      	ldrh	r3, [r6, #12]
 80118c4:	061a      	lsls	r2, r3, #24
 80118c6:	d410      	bmi.n	80118ea <__swhatbuf_r+0x3e>
 80118c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80118cc:	e00e      	b.n	80118ec <__swhatbuf_r+0x40>
 80118ce:	466a      	mov	r2, sp
 80118d0:	f000 fa88 	bl	8011de4 <_fstat_r>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	dbf2      	blt.n	80118be <__swhatbuf_r+0x12>
 80118d8:	9a01      	ldr	r2, [sp, #4]
 80118da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80118de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80118e2:	425a      	negs	r2, r3
 80118e4:	415a      	adcs	r2, r3
 80118e6:	602a      	str	r2, [r5, #0]
 80118e8:	e7ee      	b.n	80118c8 <__swhatbuf_r+0x1c>
 80118ea:	2340      	movs	r3, #64	; 0x40
 80118ec:	2000      	movs	r0, #0
 80118ee:	6023      	str	r3, [r4, #0]
 80118f0:	b016      	add	sp, #88	; 0x58
 80118f2:	bd70      	pop	{r4, r5, r6, pc}

080118f4 <__smakebuf_r>:
 80118f4:	898b      	ldrh	r3, [r1, #12]
 80118f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118f8:	079d      	lsls	r5, r3, #30
 80118fa:	4606      	mov	r6, r0
 80118fc:	460c      	mov	r4, r1
 80118fe:	d507      	bpl.n	8011910 <__smakebuf_r+0x1c>
 8011900:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	6123      	str	r3, [r4, #16]
 8011908:	2301      	movs	r3, #1
 801190a:	6163      	str	r3, [r4, #20]
 801190c:	b002      	add	sp, #8
 801190e:	bd70      	pop	{r4, r5, r6, pc}
 8011910:	ab01      	add	r3, sp, #4
 8011912:	466a      	mov	r2, sp
 8011914:	f7ff ffca 	bl	80118ac <__swhatbuf_r>
 8011918:	9900      	ldr	r1, [sp, #0]
 801191a:	4605      	mov	r5, r0
 801191c:	4630      	mov	r0, r6
 801191e:	f7ff f8cb 	bl	8010ab8 <_malloc_r>
 8011922:	b948      	cbnz	r0, 8011938 <__smakebuf_r+0x44>
 8011924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011928:	059a      	lsls	r2, r3, #22
 801192a:	d4ef      	bmi.n	801190c <__smakebuf_r+0x18>
 801192c:	f023 0303 	bic.w	r3, r3, #3
 8011930:	f043 0302 	orr.w	r3, r3, #2
 8011934:	81a3      	strh	r3, [r4, #12]
 8011936:	e7e3      	b.n	8011900 <__smakebuf_r+0xc>
 8011938:	4b0d      	ldr	r3, [pc, #52]	; (8011970 <__smakebuf_r+0x7c>)
 801193a:	62b3      	str	r3, [r6, #40]	; 0x28
 801193c:	89a3      	ldrh	r3, [r4, #12]
 801193e:	6020      	str	r0, [r4, #0]
 8011940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011944:	81a3      	strh	r3, [r4, #12]
 8011946:	9b00      	ldr	r3, [sp, #0]
 8011948:	6163      	str	r3, [r4, #20]
 801194a:	9b01      	ldr	r3, [sp, #4]
 801194c:	6120      	str	r0, [r4, #16]
 801194e:	b15b      	cbz	r3, 8011968 <__smakebuf_r+0x74>
 8011950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011954:	4630      	mov	r0, r6
 8011956:	f000 fa57 	bl	8011e08 <_isatty_r>
 801195a:	b128      	cbz	r0, 8011968 <__smakebuf_r+0x74>
 801195c:	89a3      	ldrh	r3, [r4, #12]
 801195e:	f023 0303 	bic.w	r3, r3, #3
 8011962:	f043 0301 	orr.w	r3, r3, #1
 8011966:	81a3      	strh	r3, [r4, #12]
 8011968:	89a0      	ldrh	r0, [r4, #12]
 801196a:	4305      	orrs	r5, r0
 801196c:	81a5      	strh	r5, [r4, #12]
 801196e:	e7cd      	b.n	801190c <__smakebuf_r+0x18>
 8011970:	08011705 	.word	0x08011705

08011974 <__malloc_lock>:
 8011974:	4801      	ldr	r0, [pc, #4]	; (801197c <__malloc_lock+0x8>)
 8011976:	f7ff bf97 	b.w	80118a8 <__retarget_lock_acquire_recursive>
 801197a:	bf00      	nop
 801197c:	20008b94 	.word	0x20008b94

08011980 <__malloc_unlock>:
 8011980:	4801      	ldr	r0, [pc, #4]	; (8011988 <__malloc_unlock+0x8>)
 8011982:	f7ff bf92 	b.w	80118aa <__retarget_lock_release_recursive>
 8011986:	bf00      	nop
 8011988:	20008b94 	.word	0x20008b94

0801198c <_realloc_r>:
 801198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801198e:	4607      	mov	r7, r0
 8011990:	4614      	mov	r4, r2
 8011992:	460e      	mov	r6, r1
 8011994:	b921      	cbnz	r1, 80119a0 <_realloc_r+0x14>
 8011996:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801199a:	4611      	mov	r1, r2
 801199c:	f7ff b88c 	b.w	8010ab8 <_malloc_r>
 80119a0:	b922      	cbnz	r2, 80119ac <_realloc_r+0x20>
 80119a2:	f7ff f839 	bl	8010a18 <_free_r>
 80119a6:	4625      	mov	r5, r4
 80119a8:	4628      	mov	r0, r5
 80119aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ac:	f000 fa4e 	bl	8011e4c <_malloc_usable_size_r>
 80119b0:	42a0      	cmp	r0, r4
 80119b2:	d20f      	bcs.n	80119d4 <_realloc_r+0x48>
 80119b4:	4621      	mov	r1, r4
 80119b6:	4638      	mov	r0, r7
 80119b8:	f7ff f87e 	bl	8010ab8 <_malloc_r>
 80119bc:	4605      	mov	r5, r0
 80119be:	2800      	cmp	r0, #0
 80119c0:	d0f2      	beq.n	80119a8 <_realloc_r+0x1c>
 80119c2:	4631      	mov	r1, r6
 80119c4:	4622      	mov	r2, r4
 80119c6:	f7fe fff7 	bl	80109b8 <memcpy>
 80119ca:	4631      	mov	r1, r6
 80119cc:	4638      	mov	r0, r7
 80119ce:	f7ff f823 	bl	8010a18 <_free_r>
 80119d2:	e7e9      	b.n	80119a8 <_realloc_r+0x1c>
 80119d4:	4635      	mov	r5, r6
 80119d6:	e7e7      	b.n	80119a8 <_realloc_r+0x1c>

080119d8 <__ssputs_r>:
 80119d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119dc:	688e      	ldr	r6, [r1, #8]
 80119de:	429e      	cmp	r6, r3
 80119e0:	4682      	mov	sl, r0
 80119e2:	460c      	mov	r4, r1
 80119e4:	4690      	mov	r8, r2
 80119e6:	461f      	mov	r7, r3
 80119e8:	d838      	bhi.n	8011a5c <__ssputs_r+0x84>
 80119ea:	898a      	ldrh	r2, [r1, #12]
 80119ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80119f0:	d032      	beq.n	8011a58 <__ssputs_r+0x80>
 80119f2:	6825      	ldr	r5, [r4, #0]
 80119f4:	6909      	ldr	r1, [r1, #16]
 80119f6:	eba5 0901 	sub.w	r9, r5, r1
 80119fa:	6965      	ldr	r5, [r4, #20]
 80119fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011a04:	3301      	adds	r3, #1
 8011a06:	444b      	add	r3, r9
 8011a08:	106d      	asrs	r5, r5, #1
 8011a0a:	429d      	cmp	r5, r3
 8011a0c:	bf38      	it	cc
 8011a0e:	461d      	movcc	r5, r3
 8011a10:	0553      	lsls	r3, r2, #21
 8011a12:	d531      	bpl.n	8011a78 <__ssputs_r+0xa0>
 8011a14:	4629      	mov	r1, r5
 8011a16:	f7ff f84f 	bl	8010ab8 <_malloc_r>
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	b950      	cbnz	r0, 8011a34 <__ssputs_r+0x5c>
 8011a1e:	230c      	movs	r3, #12
 8011a20:	f8ca 3000 	str.w	r3, [sl]
 8011a24:	89a3      	ldrh	r3, [r4, #12]
 8011a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a2a:	81a3      	strh	r3, [r4, #12]
 8011a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a34:	6921      	ldr	r1, [r4, #16]
 8011a36:	464a      	mov	r2, r9
 8011a38:	f7fe ffbe 	bl	80109b8 <memcpy>
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a46:	81a3      	strh	r3, [r4, #12]
 8011a48:	6126      	str	r6, [r4, #16]
 8011a4a:	6165      	str	r5, [r4, #20]
 8011a4c:	444e      	add	r6, r9
 8011a4e:	eba5 0509 	sub.w	r5, r5, r9
 8011a52:	6026      	str	r6, [r4, #0]
 8011a54:	60a5      	str	r5, [r4, #8]
 8011a56:	463e      	mov	r6, r7
 8011a58:	42be      	cmp	r6, r7
 8011a5a:	d900      	bls.n	8011a5e <__ssputs_r+0x86>
 8011a5c:	463e      	mov	r6, r7
 8011a5e:	4632      	mov	r2, r6
 8011a60:	6820      	ldr	r0, [r4, #0]
 8011a62:	4641      	mov	r1, r8
 8011a64:	f7fe ffb6 	bl	80109d4 <memmove>
 8011a68:	68a3      	ldr	r3, [r4, #8]
 8011a6a:	6822      	ldr	r2, [r4, #0]
 8011a6c:	1b9b      	subs	r3, r3, r6
 8011a6e:	4432      	add	r2, r6
 8011a70:	60a3      	str	r3, [r4, #8]
 8011a72:	6022      	str	r2, [r4, #0]
 8011a74:	2000      	movs	r0, #0
 8011a76:	e7db      	b.n	8011a30 <__ssputs_r+0x58>
 8011a78:	462a      	mov	r2, r5
 8011a7a:	f7ff ff87 	bl	801198c <_realloc_r>
 8011a7e:	4606      	mov	r6, r0
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d1e1      	bne.n	8011a48 <__ssputs_r+0x70>
 8011a84:	6921      	ldr	r1, [r4, #16]
 8011a86:	4650      	mov	r0, sl
 8011a88:	f7fe ffc6 	bl	8010a18 <_free_r>
 8011a8c:	e7c7      	b.n	8011a1e <__ssputs_r+0x46>
	...

08011a90 <_svfiprintf_r>:
 8011a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	4698      	mov	r8, r3
 8011a96:	898b      	ldrh	r3, [r1, #12]
 8011a98:	061b      	lsls	r3, r3, #24
 8011a9a:	b09d      	sub	sp, #116	; 0x74
 8011a9c:	4607      	mov	r7, r0
 8011a9e:	460d      	mov	r5, r1
 8011aa0:	4614      	mov	r4, r2
 8011aa2:	d50e      	bpl.n	8011ac2 <_svfiprintf_r+0x32>
 8011aa4:	690b      	ldr	r3, [r1, #16]
 8011aa6:	b963      	cbnz	r3, 8011ac2 <_svfiprintf_r+0x32>
 8011aa8:	2140      	movs	r1, #64	; 0x40
 8011aaa:	f7ff f805 	bl	8010ab8 <_malloc_r>
 8011aae:	6028      	str	r0, [r5, #0]
 8011ab0:	6128      	str	r0, [r5, #16]
 8011ab2:	b920      	cbnz	r0, 8011abe <_svfiprintf_r+0x2e>
 8011ab4:	230c      	movs	r3, #12
 8011ab6:	603b      	str	r3, [r7, #0]
 8011ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8011abc:	e0d1      	b.n	8011c62 <_svfiprintf_r+0x1d2>
 8011abe:	2340      	movs	r3, #64	; 0x40
 8011ac0:	616b      	str	r3, [r5, #20]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ac6:	2320      	movs	r3, #32
 8011ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ad0:	2330      	movs	r3, #48	; 0x30
 8011ad2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011c7c <_svfiprintf_r+0x1ec>
 8011ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ada:	f04f 0901 	mov.w	r9, #1
 8011ade:	4623      	mov	r3, r4
 8011ae0:	469a      	mov	sl, r3
 8011ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ae6:	b10a      	cbz	r2, 8011aec <_svfiprintf_r+0x5c>
 8011ae8:	2a25      	cmp	r2, #37	; 0x25
 8011aea:	d1f9      	bne.n	8011ae0 <_svfiprintf_r+0x50>
 8011aec:	ebba 0b04 	subs.w	fp, sl, r4
 8011af0:	d00b      	beq.n	8011b0a <_svfiprintf_r+0x7a>
 8011af2:	465b      	mov	r3, fp
 8011af4:	4622      	mov	r2, r4
 8011af6:	4629      	mov	r1, r5
 8011af8:	4638      	mov	r0, r7
 8011afa:	f7ff ff6d 	bl	80119d8 <__ssputs_r>
 8011afe:	3001      	adds	r0, #1
 8011b00:	f000 80aa 	beq.w	8011c58 <_svfiprintf_r+0x1c8>
 8011b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b06:	445a      	add	r2, fp
 8011b08:	9209      	str	r2, [sp, #36]	; 0x24
 8011b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f000 80a2 	beq.w	8011c58 <_svfiprintf_r+0x1c8>
 8011b14:	2300      	movs	r3, #0
 8011b16:	f04f 32ff 	mov.w	r2, #4294967295
 8011b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b1e:	f10a 0a01 	add.w	sl, sl, #1
 8011b22:	9304      	str	r3, [sp, #16]
 8011b24:	9307      	str	r3, [sp, #28]
 8011b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8011b2c:	4654      	mov	r4, sl
 8011b2e:	2205      	movs	r2, #5
 8011b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b34:	4851      	ldr	r0, [pc, #324]	; (8011c7c <_svfiprintf_r+0x1ec>)
 8011b36:	f7ee fb5b 	bl	80001f0 <memchr>
 8011b3a:	9a04      	ldr	r2, [sp, #16]
 8011b3c:	b9d8      	cbnz	r0, 8011b76 <_svfiprintf_r+0xe6>
 8011b3e:	06d0      	lsls	r0, r2, #27
 8011b40:	bf44      	itt	mi
 8011b42:	2320      	movmi	r3, #32
 8011b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b48:	0711      	lsls	r1, r2, #28
 8011b4a:	bf44      	itt	mi
 8011b4c:	232b      	movmi	r3, #43	; 0x2b
 8011b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b52:	f89a 3000 	ldrb.w	r3, [sl]
 8011b56:	2b2a      	cmp	r3, #42	; 0x2a
 8011b58:	d015      	beq.n	8011b86 <_svfiprintf_r+0xf6>
 8011b5a:	9a07      	ldr	r2, [sp, #28]
 8011b5c:	4654      	mov	r4, sl
 8011b5e:	2000      	movs	r0, #0
 8011b60:	f04f 0c0a 	mov.w	ip, #10
 8011b64:	4621      	mov	r1, r4
 8011b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b6a:	3b30      	subs	r3, #48	; 0x30
 8011b6c:	2b09      	cmp	r3, #9
 8011b6e:	d94e      	bls.n	8011c0e <_svfiprintf_r+0x17e>
 8011b70:	b1b0      	cbz	r0, 8011ba0 <_svfiprintf_r+0x110>
 8011b72:	9207      	str	r2, [sp, #28]
 8011b74:	e014      	b.n	8011ba0 <_svfiprintf_r+0x110>
 8011b76:	eba0 0308 	sub.w	r3, r0, r8
 8011b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8011b7e:	4313      	orrs	r3, r2
 8011b80:	9304      	str	r3, [sp, #16]
 8011b82:	46a2      	mov	sl, r4
 8011b84:	e7d2      	b.n	8011b2c <_svfiprintf_r+0x9c>
 8011b86:	9b03      	ldr	r3, [sp, #12]
 8011b88:	1d19      	adds	r1, r3, #4
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	9103      	str	r1, [sp, #12]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	bfbb      	ittet	lt
 8011b92:	425b      	neglt	r3, r3
 8011b94:	f042 0202 	orrlt.w	r2, r2, #2
 8011b98:	9307      	strge	r3, [sp, #28]
 8011b9a:	9307      	strlt	r3, [sp, #28]
 8011b9c:	bfb8      	it	lt
 8011b9e:	9204      	strlt	r2, [sp, #16]
 8011ba0:	7823      	ldrb	r3, [r4, #0]
 8011ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ba4:	d10c      	bne.n	8011bc0 <_svfiprintf_r+0x130>
 8011ba6:	7863      	ldrb	r3, [r4, #1]
 8011ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8011baa:	d135      	bne.n	8011c18 <_svfiprintf_r+0x188>
 8011bac:	9b03      	ldr	r3, [sp, #12]
 8011bae:	1d1a      	adds	r2, r3, #4
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	9203      	str	r2, [sp, #12]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	bfb8      	it	lt
 8011bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bbc:	3402      	adds	r4, #2
 8011bbe:	9305      	str	r3, [sp, #20]
 8011bc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011c8c <_svfiprintf_r+0x1fc>
 8011bc4:	7821      	ldrb	r1, [r4, #0]
 8011bc6:	2203      	movs	r2, #3
 8011bc8:	4650      	mov	r0, sl
 8011bca:	f7ee fb11 	bl	80001f0 <memchr>
 8011bce:	b140      	cbz	r0, 8011be2 <_svfiprintf_r+0x152>
 8011bd0:	2340      	movs	r3, #64	; 0x40
 8011bd2:	eba0 000a 	sub.w	r0, r0, sl
 8011bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8011bda:	9b04      	ldr	r3, [sp, #16]
 8011bdc:	4303      	orrs	r3, r0
 8011bde:	3401      	adds	r4, #1
 8011be0:	9304      	str	r3, [sp, #16]
 8011be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011be6:	4826      	ldr	r0, [pc, #152]	; (8011c80 <_svfiprintf_r+0x1f0>)
 8011be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011bec:	2206      	movs	r2, #6
 8011bee:	f7ee faff 	bl	80001f0 <memchr>
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d038      	beq.n	8011c68 <_svfiprintf_r+0x1d8>
 8011bf6:	4b23      	ldr	r3, [pc, #140]	; (8011c84 <_svfiprintf_r+0x1f4>)
 8011bf8:	bb1b      	cbnz	r3, 8011c42 <_svfiprintf_r+0x1b2>
 8011bfa:	9b03      	ldr	r3, [sp, #12]
 8011bfc:	3307      	adds	r3, #7
 8011bfe:	f023 0307 	bic.w	r3, r3, #7
 8011c02:	3308      	adds	r3, #8
 8011c04:	9303      	str	r3, [sp, #12]
 8011c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c08:	4433      	add	r3, r6
 8011c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c0c:	e767      	b.n	8011ade <_svfiprintf_r+0x4e>
 8011c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c12:	460c      	mov	r4, r1
 8011c14:	2001      	movs	r0, #1
 8011c16:	e7a5      	b.n	8011b64 <_svfiprintf_r+0xd4>
 8011c18:	2300      	movs	r3, #0
 8011c1a:	3401      	adds	r4, #1
 8011c1c:	9305      	str	r3, [sp, #20]
 8011c1e:	4619      	mov	r1, r3
 8011c20:	f04f 0c0a 	mov.w	ip, #10
 8011c24:	4620      	mov	r0, r4
 8011c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c2a:	3a30      	subs	r2, #48	; 0x30
 8011c2c:	2a09      	cmp	r2, #9
 8011c2e:	d903      	bls.n	8011c38 <_svfiprintf_r+0x1a8>
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d0c5      	beq.n	8011bc0 <_svfiprintf_r+0x130>
 8011c34:	9105      	str	r1, [sp, #20]
 8011c36:	e7c3      	b.n	8011bc0 <_svfiprintf_r+0x130>
 8011c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c3c:	4604      	mov	r4, r0
 8011c3e:	2301      	movs	r3, #1
 8011c40:	e7f0      	b.n	8011c24 <_svfiprintf_r+0x194>
 8011c42:	ab03      	add	r3, sp, #12
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	462a      	mov	r2, r5
 8011c48:	4b0f      	ldr	r3, [pc, #60]	; (8011c88 <_svfiprintf_r+0x1f8>)
 8011c4a:	a904      	add	r1, sp, #16
 8011c4c:	4638      	mov	r0, r7
 8011c4e:	f3af 8000 	nop.w
 8011c52:	1c42      	adds	r2, r0, #1
 8011c54:	4606      	mov	r6, r0
 8011c56:	d1d6      	bne.n	8011c06 <_svfiprintf_r+0x176>
 8011c58:	89ab      	ldrh	r3, [r5, #12]
 8011c5a:	065b      	lsls	r3, r3, #25
 8011c5c:	f53f af2c 	bmi.w	8011ab8 <_svfiprintf_r+0x28>
 8011c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c62:	b01d      	add	sp, #116	; 0x74
 8011c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c68:	ab03      	add	r3, sp, #12
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	462a      	mov	r2, r5
 8011c6e:	4b06      	ldr	r3, [pc, #24]	; (8011c88 <_svfiprintf_r+0x1f8>)
 8011c70:	a904      	add	r1, sp, #16
 8011c72:	4638      	mov	r0, r7
 8011c74:	f7ff f942 	bl	8010efc <_printf_i>
 8011c78:	e7eb      	b.n	8011c52 <_svfiprintf_r+0x1c2>
 8011c7a:	bf00      	nop
 8011c7c:	08014c54 	.word	0x08014c54
 8011c80:	08014c5e 	.word	0x08014c5e
 8011c84:	00000000 	.word	0x00000000
 8011c88:	080119d9 	.word	0x080119d9
 8011c8c:	08014c5a 	.word	0x08014c5a

08011c90 <_raise_r>:
 8011c90:	291f      	cmp	r1, #31
 8011c92:	b538      	push	{r3, r4, r5, lr}
 8011c94:	4604      	mov	r4, r0
 8011c96:	460d      	mov	r5, r1
 8011c98:	d904      	bls.n	8011ca4 <_raise_r+0x14>
 8011c9a:	2316      	movs	r3, #22
 8011c9c:	6003      	str	r3, [r0, #0]
 8011c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca2:	bd38      	pop	{r3, r4, r5, pc}
 8011ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ca6:	b112      	cbz	r2, 8011cae <_raise_r+0x1e>
 8011ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cac:	b94b      	cbnz	r3, 8011cc2 <_raise_r+0x32>
 8011cae:	4620      	mov	r0, r4
 8011cb0:	f000 f830 	bl	8011d14 <_getpid_r>
 8011cb4:	462a      	mov	r2, r5
 8011cb6:	4601      	mov	r1, r0
 8011cb8:	4620      	mov	r0, r4
 8011cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011cbe:	f000 b817 	b.w	8011cf0 <_kill_r>
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d00a      	beq.n	8011cdc <_raise_r+0x4c>
 8011cc6:	1c59      	adds	r1, r3, #1
 8011cc8:	d103      	bne.n	8011cd2 <_raise_r+0x42>
 8011cca:	2316      	movs	r3, #22
 8011ccc:	6003      	str	r3, [r0, #0]
 8011cce:	2001      	movs	r0, #1
 8011cd0:	e7e7      	b.n	8011ca2 <_raise_r+0x12>
 8011cd2:	2400      	movs	r4, #0
 8011cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011cd8:	4628      	mov	r0, r5
 8011cda:	4798      	blx	r3
 8011cdc:	2000      	movs	r0, #0
 8011cde:	e7e0      	b.n	8011ca2 <_raise_r+0x12>

08011ce0 <raise>:
 8011ce0:	4b02      	ldr	r3, [pc, #8]	; (8011cec <raise+0xc>)
 8011ce2:	4601      	mov	r1, r0
 8011ce4:	6818      	ldr	r0, [r3, #0]
 8011ce6:	f7ff bfd3 	b.w	8011c90 <_raise_r>
 8011cea:	bf00      	nop
 8011cec:	20000034 	.word	0x20000034

08011cf0 <_kill_r>:
 8011cf0:	b538      	push	{r3, r4, r5, lr}
 8011cf2:	4d07      	ldr	r5, [pc, #28]	; (8011d10 <_kill_r+0x20>)
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	4608      	mov	r0, r1
 8011cfa:	4611      	mov	r1, r2
 8011cfc:	602b      	str	r3, [r5, #0]
 8011cfe:	f7f1 fb43 	bl	8003388 <_kill>
 8011d02:	1c43      	adds	r3, r0, #1
 8011d04:	d102      	bne.n	8011d0c <_kill_r+0x1c>
 8011d06:	682b      	ldr	r3, [r5, #0]
 8011d08:	b103      	cbz	r3, 8011d0c <_kill_r+0x1c>
 8011d0a:	6023      	str	r3, [r4, #0]
 8011d0c:	bd38      	pop	{r3, r4, r5, pc}
 8011d0e:	bf00      	nop
 8011d10:	20008b8c 	.word	0x20008b8c

08011d14 <_getpid_r>:
 8011d14:	f7f1 bb30 	b.w	8003378 <_getpid>

08011d18 <__sread>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	460c      	mov	r4, r1
 8011d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d20:	f000 f89c 	bl	8011e5c <_read_r>
 8011d24:	2800      	cmp	r0, #0
 8011d26:	bfab      	itete	ge
 8011d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8011d2c:	181b      	addge	r3, r3, r0
 8011d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d32:	bfac      	ite	ge
 8011d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d36:	81a3      	strhlt	r3, [r4, #12]
 8011d38:	bd10      	pop	{r4, pc}

08011d3a <__swrite>:
 8011d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3e:	461f      	mov	r7, r3
 8011d40:	898b      	ldrh	r3, [r1, #12]
 8011d42:	05db      	lsls	r3, r3, #23
 8011d44:	4605      	mov	r5, r0
 8011d46:	460c      	mov	r4, r1
 8011d48:	4616      	mov	r6, r2
 8011d4a:	d505      	bpl.n	8011d58 <__swrite+0x1e>
 8011d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d50:	2302      	movs	r3, #2
 8011d52:	2200      	movs	r2, #0
 8011d54:	f000 f868 	bl	8011e28 <_lseek_r>
 8011d58:	89a3      	ldrh	r3, [r4, #12]
 8011d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d62:	81a3      	strh	r3, [r4, #12]
 8011d64:	4632      	mov	r2, r6
 8011d66:	463b      	mov	r3, r7
 8011d68:	4628      	mov	r0, r5
 8011d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6e:	f000 b817 	b.w	8011da0 <_write_r>

08011d72 <__sseek>:
 8011d72:	b510      	push	{r4, lr}
 8011d74:	460c      	mov	r4, r1
 8011d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d7a:	f000 f855 	bl	8011e28 <_lseek_r>
 8011d7e:	1c43      	adds	r3, r0, #1
 8011d80:	89a3      	ldrh	r3, [r4, #12]
 8011d82:	bf15      	itete	ne
 8011d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d8e:	81a3      	strheq	r3, [r4, #12]
 8011d90:	bf18      	it	ne
 8011d92:	81a3      	strhne	r3, [r4, #12]
 8011d94:	bd10      	pop	{r4, pc}

08011d96 <__sclose>:
 8011d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d9a:	f000 b813 	b.w	8011dc4 <_close_r>
	...

08011da0 <_write_r>:
 8011da0:	b538      	push	{r3, r4, r5, lr}
 8011da2:	4d07      	ldr	r5, [pc, #28]	; (8011dc0 <_write_r+0x20>)
 8011da4:	4604      	mov	r4, r0
 8011da6:	4608      	mov	r0, r1
 8011da8:	4611      	mov	r1, r2
 8011daa:	2200      	movs	r2, #0
 8011dac:	602a      	str	r2, [r5, #0]
 8011dae:	461a      	mov	r2, r3
 8011db0:	f7f1 fb23 	bl	80033fa <_write>
 8011db4:	1c43      	adds	r3, r0, #1
 8011db6:	d102      	bne.n	8011dbe <_write_r+0x1e>
 8011db8:	682b      	ldr	r3, [r5, #0]
 8011dba:	b103      	cbz	r3, 8011dbe <_write_r+0x1e>
 8011dbc:	6023      	str	r3, [r4, #0]
 8011dbe:	bd38      	pop	{r3, r4, r5, pc}
 8011dc0:	20008b8c 	.word	0x20008b8c

08011dc4 <_close_r>:
 8011dc4:	b538      	push	{r3, r4, r5, lr}
 8011dc6:	4d06      	ldr	r5, [pc, #24]	; (8011de0 <_close_r+0x1c>)
 8011dc8:	2300      	movs	r3, #0
 8011dca:	4604      	mov	r4, r0
 8011dcc:	4608      	mov	r0, r1
 8011dce:	602b      	str	r3, [r5, #0]
 8011dd0:	f7f1 fb2f 	bl	8003432 <_close>
 8011dd4:	1c43      	adds	r3, r0, #1
 8011dd6:	d102      	bne.n	8011dde <_close_r+0x1a>
 8011dd8:	682b      	ldr	r3, [r5, #0]
 8011dda:	b103      	cbz	r3, 8011dde <_close_r+0x1a>
 8011ddc:	6023      	str	r3, [r4, #0]
 8011dde:	bd38      	pop	{r3, r4, r5, pc}
 8011de0:	20008b8c 	.word	0x20008b8c

08011de4 <_fstat_r>:
 8011de4:	b538      	push	{r3, r4, r5, lr}
 8011de6:	4d07      	ldr	r5, [pc, #28]	; (8011e04 <_fstat_r+0x20>)
 8011de8:	2300      	movs	r3, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	4608      	mov	r0, r1
 8011dee:	4611      	mov	r1, r2
 8011df0:	602b      	str	r3, [r5, #0]
 8011df2:	f7f1 fb2a 	bl	800344a <_fstat>
 8011df6:	1c43      	adds	r3, r0, #1
 8011df8:	d102      	bne.n	8011e00 <_fstat_r+0x1c>
 8011dfa:	682b      	ldr	r3, [r5, #0]
 8011dfc:	b103      	cbz	r3, 8011e00 <_fstat_r+0x1c>
 8011dfe:	6023      	str	r3, [r4, #0]
 8011e00:	bd38      	pop	{r3, r4, r5, pc}
 8011e02:	bf00      	nop
 8011e04:	20008b8c 	.word	0x20008b8c

08011e08 <_isatty_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4d06      	ldr	r5, [pc, #24]	; (8011e24 <_isatty_r+0x1c>)
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	4604      	mov	r4, r0
 8011e10:	4608      	mov	r0, r1
 8011e12:	602b      	str	r3, [r5, #0]
 8011e14:	f7f1 fb29 	bl	800346a <_isatty>
 8011e18:	1c43      	adds	r3, r0, #1
 8011e1a:	d102      	bne.n	8011e22 <_isatty_r+0x1a>
 8011e1c:	682b      	ldr	r3, [r5, #0]
 8011e1e:	b103      	cbz	r3, 8011e22 <_isatty_r+0x1a>
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	20008b8c 	.word	0x20008b8c

08011e28 <_lseek_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4d07      	ldr	r5, [pc, #28]	; (8011e48 <_lseek_r+0x20>)
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	4608      	mov	r0, r1
 8011e30:	4611      	mov	r1, r2
 8011e32:	2200      	movs	r2, #0
 8011e34:	602a      	str	r2, [r5, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	f7f1 fb22 	bl	8003480 <_lseek>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_lseek_r+0x1e>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_lseek_r+0x1e>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	20008b8c 	.word	0x20008b8c

08011e4c <_malloc_usable_size_r>:
 8011e4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e50:	1f18      	subs	r0, r3, #4
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	bfbc      	itt	lt
 8011e56:	580b      	ldrlt	r3, [r1, r0]
 8011e58:	18c0      	addlt	r0, r0, r3
 8011e5a:	4770      	bx	lr

08011e5c <_read_r>:
 8011e5c:	b538      	push	{r3, r4, r5, lr}
 8011e5e:	4d07      	ldr	r5, [pc, #28]	; (8011e7c <_read_r+0x20>)
 8011e60:	4604      	mov	r4, r0
 8011e62:	4608      	mov	r0, r1
 8011e64:	4611      	mov	r1, r2
 8011e66:	2200      	movs	r2, #0
 8011e68:	602a      	str	r2, [r5, #0]
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	f7f1 faa8 	bl	80033c0 <_read>
 8011e70:	1c43      	adds	r3, r0, #1
 8011e72:	d102      	bne.n	8011e7a <_read_r+0x1e>
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	b103      	cbz	r3, 8011e7a <_read_r+0x1e>
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
 8011e7c:	20008b8c 	.word	0x20008b8c

08011e80 <_init>:
 8011e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e82:	bf00      	nop
 8011e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e86:	bc08      	pop	{r3}
 8011e88:	469e      	mov	lr, r3
 8011e8a:	4770      	bx	lr

08011e8c <_fini>:
 8011e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e8e:	bf00      	nop
 8011e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e92:	bc08      	pop	{r3}
 8011e94:	469e      	mov	lr, r3
 8011e96:	4770      	bx	lr
