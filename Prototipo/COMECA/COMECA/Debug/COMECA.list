
COMECA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f780  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ca8  0800f910  0800f910  0001f910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125b8  080125b8  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  080125b8  080125b8  000225b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125c0  080125c0  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125c0  080125c0  000225c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125c4  080125c4  000225c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080125c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b34  20000098  08012660  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008bcc  08012660  00038bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000304d5  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d98  00000000  00000000  0006059d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00066338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  00067940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d8c4  00000000  00000000  00068e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025857  00000000  00000000  00096754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1e7d  00000000  00000000  000bbfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019de28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006484  00000000  00000000  0019de7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8f8 	.word	0x0800f8f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800f8f8 	.word	0x0800f8f8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <getCaliperNumberGivenClockPin>:
static GPIO_TypeDef * CAL_DATA_PORT_MAPPING[NUMBER_OF_CALIPERS] = {GPIOE, GPIOB, GPIOA, GPIOE};
static uint16_t CAL_DATA_PIN_MAPPING[NUMBER_OF_CALIPERS] = {GPIO_PIN_11, GPIO_PIN_1, GPIO_PIN_0, GPIO_PIN_4};

static uint16_t CAL_CLK_MAPPING[NUMBER_OF_CALIPERS] = {CAL1_CLK_Pin, CAL2_CLK_Pin, CAL3_CLK_Pin, CAL4_CLK_Pin};

int getCaliperNumberGivenClockPin(uint16_t CLK_Pin){
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	int i;
	for(i=0; i<NUMBER_OF_CALIPERS; i++) { if(CAL_CLK_MAPPING[i] == CLK_Pin){ break; } }
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e009      	b.n	80005ac <getCaliperNumberGivenClockPin+0x24>
 8000598:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <getCaliperNumberGivenClockPin+0x3c>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a0:	88fa      	ldrh	r2, [r7, #6]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d006      	beq.n	80005b4 <getCaliperNumberGivenClockPin+0x2c>
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	3301      	adds	r3, #1
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	ddf2      	ble.n	8000598 <getCaliperNumberGivenClockPin+0x10>
 80005b2:	e000      	b.n	80005b6 <getCaliperNumberGivenClockPin+0x2e>
 80005b4:	bf00      	nop
	return i;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	20000018 	.word	0x20000018

080005c8 <getCaliperData>:

bool getCaliperData(caliper_number curr_caliper){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(CAL_DATA_PORT_MAPPING[curr_caliper],CAL_DATA_PIN_MAPPING[curr_caliper]);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <getCaliperData+0x38>)
 80005d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4909      	ldr	r1, [pc, #36]	; (8000604 <getCaliperData+0x3c>)
 80005de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4610      	mov	r0, r2
 80005e6:	f002 fa6d 	bl	8002ac4 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	20000010 	.word	0x20000010

08000608 <processBit>:

void processBit(caliper_number curr_caliper){
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].bit.index == 0){digimatic[curr_caliper].frame.data = 0;}
 8000612:	79fa      	ldrb	r2, [r7, #7]
 8000614:	492a      	ldr	r1, [pc, #168]	; (80006c0 <processBit+0xb8>)
 8000616:	4613      	mov	r3, r2
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4413      	add	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	440b      	add	r3, r1
 8000620:	330e      	adds	r3, #14
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d109      	bne.n	800063c <processBit+0x34>
 8000628:	79fa      	ldrb	r2, [r7, #7]
 800062a:	4925      	ldr	r1, [pc, #148]	; (80006c0 <processBit+0xb8>)
 800062c:	4613      	mov	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	440b      	add	r3, r1
 8000636:	3311      	adds	r3, #17
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

	uint8_t read_bit = getCaliperData(curr_caliper);
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffc2 	bl	80005c8 <getCaliperData>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]

	digimatic[curr_caliper].frame.data |= read_bit << digimatic[curr_caliper].bit.index;
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	491d      	ldr	r1, [pc, #116]	; (80006c0 <processBit+0xb8>)
 800064c:	4613      	mov	r3, r2
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	440b      	add	r3, r1
 8000656:	3311      	adds	r3, #17
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b259      	sxtb	r1, r3
 800065c:	7bf8      	ldrb	r0, [r7, #15]
 800065e:	79fa      	ldrb	r2, [r7, #7]
 8000660:	4c17      	ldr	r4, [pc, #92]	; (80006c0 <processBit+0xb8>)
 8000662:	4613      	mov	r3, r2
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	4413      	add	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4423      	add	r3, r4
 800066c:	330e      	adds	r3, #14
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	fa00 f303 	lsl.w	r3, r0, r3
 8000674:	b25b      	sxtb	r3, r3
 8000676:	430b      	orrs	r3, r1
 8000678:	b25b      	sxtb	r3, r3
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	b2d8      	uxtb	r0, r3
 800067e:	4910      	ldr	r1, [pc, #64]	; (80006c0 <processBit+0xb8>)
 8000680:	4613      	mov	r3, r2
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	4413      	add	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	440b      	add	r3, r1
 800068a:	3311      	adds	r3, #17
 800068c:	4602      	mov	r2, r0
 800068e:	701a      	strb	r2, [r3, #0]

	digimatic[curr_caliper].bit.index++;
 8000690:	79fa      	ldrb	r2, [r7, #7]
 8000692:	490b      	ldr	r1, [pc, #44]	; (80006c0 <processBit+0xb8>)
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	440b      	add	r3, r1
 800069e:	330e      	adds	r3, #14
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	b2d8      	uxtb	r0, r3
 80006a6:	4906      	ldr	r1, [pc, #24]	; (80006c0 <processBit+0xb8>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	440b      	add	r3, r1
 80006b2:	330e      	adds	r3, #14
 80006b4:	4602      	mov	r2, r0
 80006b6:	701a      	strb	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	200000b4 	.word	0x200000b4

080006c4 <onRisingEdgeOfReqSignal>:


void onRisingEdgeOfReqSignal(caliper_number curr_caliper){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	digimatic[curr_caliper].caliper_state = START;
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4906      	ldr	r1, [pc, #24]	; (80006ec <onRisingEdgeOfReqSignal+0x28>)
 80006d2:	4613      	mov	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	440b      	add	r3, r1
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	200000b4 	.word	0x200000b4

080006f0 <onRisingEdgeOfClockSignal>:


void onRisingEdgeOfClockSignal(caliper_number curr_caliper){
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	if(digimatic[curr_caliper].caliper_state != IDLE && digimatic[curr_caliper].caliper_state != FINISHED){
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	4951      	ldr	r1, [pc, #324]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80006fe:	4613      	mov	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	4413      	add	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	440b      	add	r3, r1
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	f000 8095 	beq.w	800083a <onRisingEdgeOfClockSignal+0x14a>
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	494c      	ldr	r1, [pc, #304]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000714:	4613      	mov	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4413      	add	r3, r2
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	440b      	add	r3, r1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b03      	cmp	r3, #3
 8000722:	f000 808a 	beq.w	800083a <onRisingEdgeOfClockSignal+0x14a>
		digimatic[curr_caliper].caliper_state = GETTING_FRAMES; // this doesn't change unless its last frame (implemented below)
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	4946      	ldr	r1, [pc, #280]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800072a:	4613      	mov	r3, r2
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	440b      	add	r3, r1
 8000734:	2202      	movs	r2, #2
 8000736:	701a      	strb	r2, [r3, #0]
		if(digimatic[curr_caliper].frame.index == 0){
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	4942      	ldr	r1, [pc, #264]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800073c:	4613      	mov	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	4413      	add	r3, r2
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	440b      	add	r3, r1
 8000746:	3310      	adds	r3, #16
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10c      	bne.n	8000768 <onRisingEdgeOfClockSignal+0x78>
			memset(&digimatic[curr_caliper].frames, 0, NUMBER_OF_FRAMES*sizeof(digimatic[curr_caliper].frames[0]));
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	4413      	add	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800075a:	4413      	add	r3, r2
 800075c:	3301      	adds	r3, #1
 800075e:	220d      	movs	r2, #13
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00d fea6 	bl	800e4b4 <memset>
		}

		processBit(curr_caliper);
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff4c 	bl	8000608 <processBit>

		if(digimatic[curr_caliper].bit.index == BITS_PER_FRAME){ // tengo un frame guardado en digimatic.frame.data
 8000770:	79fa      	ldrb	r2, [r7, #7]
 8000772:	4934      	ldr	r1, [pc, #208]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000774:	4613      	mov	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	440b      	add	r3, r1
 800077e:	330e      	adds	r3, #14
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b04      	cmp	r3, #4
 8000784:	d13b      	bne.n	80007fe <onRisingEdgeOfClockSignal+0x10e>
			digimatic[curr_caliper].frames[digimatic[curr_caliper].frame.index] = digimatic[curr_caliper].frame.data; // lo guardo en el array
 8000786:	79f9      	ldrb	r1, [r7, #7]
 8000788:	79fa      	ldrb	r2, [r7, #7]
 800078a:	79f8      	ldrb	r0, [r7, #7]
 800078c:	4c2d      	ldr	r4, [pc, #180]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800078e:	4603      	mov	r3, r0
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	4403      	add	r3, r0
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4423      	add	r3, r4
 8000798:	3310      	adds	r3, #16
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461c      	mov	r4, r3
 800079e:	4829      	ldr	r0, [pc, #164]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007a0:	460b      	mov	r3, r1
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4403      	add	r3, r0
 80007aa:	3311      	adds	r3, #17
 80007ac:	7818      	ldrb	r0, [r3, #0]
 80007ae:	4925      	ldr	r1, [pc, #148]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	440b      	add	r3, r1
 80007ba:	4423      	add	r3, r4
 80007bc:	3301      	adds	r3, #1
 80007be:	4602      	mov	r2, r0
 80007c0:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].frame.index++; // avanzo en array
 80007c2:	79fa      	ldrb	r2, [r7, #7]
 80007c4:	491f      	ldr	r1, [pc, #124]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4413      	add	r3, r2
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	440b      	add	r3, r1
 80007d0:	3310      	adds	r3, #16
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2d8      	uxtb	r0, r3
 80007d8:	491a      	ldr	r1, [pc, #104]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	440b      	add	r3, r1
 80007e4:	3310      	adds	r3, #16
 80007e6:	4602      	mov	r2, r0
 80007e8:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].bit.index = 0; // reinicio el index de bit
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4915      	ldr	r1, [pc, #84]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	440b      	add	r3, r1
 80007f8:	330e      	adds	r3, #14
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
		}

		if(digimatic[curr_caliper].frame.index == NUMBER_OF_FRAMES){
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	4910      	ldr	r1, [pc, #64]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	440b      	add	r3, r1
 800080c:	3310      	adds	r3, #16
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b0d      	cmp	r3, #13
 8000812:	d112      	bne.n	800083a <onRisingEdgeOfClockSignal+0x14a>
			digimatic[curr_caliper].frame.index = 0;
 8000814:	79fa      	ldrb	r2, [r7, #7]
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 8000818:	4613      	mov	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	440b      	add	r3, r1
 8000822:	3310      	adds	r3, #16
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
			digimatic[curr_caliper].caliper_state = FINISHED;
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	4906      	ldr	r1, [pc, #24]	; (8000844 <onRisingEdgeOfClockSignal+0x154>)
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	440b      	add	r3, r1
 8000836:	2203      	movs	r2, #3
 8000838:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	bf00      	nop
 8000844:	200000b4 	.word	0x200000b4

08000848 <destructureFrame>:
char rx_frame_type[FRAME_CHARS+1];
char rx_data[DATA_CHARS+1];

char tx_frame[FRAME_CHARS+DELIMITER_CHARS+DATA_CHARS+1];

void destructureFrame(message_t message){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	463b      	mov	r3, r7
 8000850:	e883 0003 	stmia.w	r3, {r0, r1}
	// assume a message comes in a format like:
	// FRAME_TYPE(10chars), DELIMITER (1 char), DATA (10 chars)

	memcpy(rx_frame_type, message.msg, FRAME_CHARS);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	220a      	movs	r2, #10
 8000858:	4619      	mov	r1, r3
 800085a:	480a      	ldr	r0, [pc, #40]	; (8000884 <destructureFrame+0x3c>)
 800085c:	f00d fe02 	bl	800e464 <memcpy>
	rx_frame_type[FRAME_CHARS+1] = '\0';
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <destructureFrame+0x3c>)
 8000862:	2200      	movs	r2, #0
 8000864:	72da      	strb	r2, [r3, #11]
	memcpy(rx_data, message.msg+(FRAME_CHARS+DELIMITER_CHARS), DATA_CHARS);
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	330b      	adds	r3, #11
 800086a:	220a      	movs	r2, #10
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <destructureFrame+0x40>)
 8000870:	f00d fdf8 	bl	800e464 <memcpy>
	rx_data[DATA_CHARS+1] = '\0';
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <destructureFrame+0x40>)
 8000876:	2200      	movs	r2, #0
 8000878:	72da      	strb	r2, [r3, #11]
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000029c 	.word	0x2000029c
 8000888:	20000290 	.word	0x20000290

0800088c <ETHonMessageReceived>:


void ETHonMessageReceived(message_t message){
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	463b      	mov	r3, r7
 8000894:	e883 0003 	stmia.w	r3, {r0, r1}

	destructureFrame(message);
 8000898:	463b      	mov	r3, r7
 800089a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800089e:	f7ff ffd3 	bl	8000848 <destructureFrame>

	if(memcmp(rx_frame_type, "ANALOG_IN", FRAME_CHARS)){
 80008a2:	220a      	movs	r2, #10
 80008a4:	490b      	ldr	r1, [pc, #44]	; (80008d4 <ETHonMessageReceived+0x48>)
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <ETHonMessageReceived+0x4c>)
 80008a8:	f00d fdce 	bl	800e448 <memcmp>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <ETHonMessageReceived+0x2c>
		AnalogInManager();
 80008b2:	f000 f861 	bl	8000978 <AnalogInManager>
	}else if(strcmp(rx_frame_type, "DIGITAL_OUT")){
		DigitalOutManager();
	}

	return;
 80008b6:	e009      	b.n	80008cc <ETHonMessageReceived+0x40>
	}else if(strcmp(rx_frame_type, "DIGITAL_OUT")){
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <ETHonMessageReceived+0x50>)
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <ETHonMessageReceived+0x4c>)
 80008bc:	f7ff fc88 	bl	80001d0 <strcmp>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <ETHonMessageReceived+0x40>
		DigitalOutManager();
 80008c6:	f000 f88d 	bl	80009e4 <DigitalOutManager>
	return;
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
}
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800f910 	.word	0x0800f910
 80008d8:	2000029c 	.word	0x2000029c
 80008dc:	0800f91c 	.word	0x0800f91c

080008e0 <ETHsendMessage>:

void ETHsendMessage(message_t message){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	463b      	mov	r3, r7
 80008e8:	e883 0003 	stmia.w	r3, {r0, r1}
	udpClient_custom_string(message);
 80008ec:	463b      	mov	r3, r7
 80008ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008f2:	f000 fbf9 	bl	80010e8 <udpClient_custom_string>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <buildFrame>:


message_t buildFrame(const char* frame_type, const char* data){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
	memcpy(tx_frame, frame_type, FRAME_CHARS);
 800090c:	220a      	movs	r2, #10
 800090e:	68b9      	ldr	r1, [r7, #8]
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <buildFrame+0x4c>)
 8000912:	f00d fda7 	bl	800e464 <memcpy>
	tx_frame[FRAME_CHARS] = DELIMITER;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <buildFrame+0x4c>)
 8000918:	223a      	movs	r2, #58	; 0x3a
 800091a:	729a      	strb	r2, [r3, #10]
	memcpy(tx_frame, data, DATA_CHARS);
 800091c:	220a      	movs	r2, #10
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <buildFrame+0x4c>)
 8000922:	f00d fd9f 	bl	800e464 <memcpy>
	tx_frame[FRAME_CHARS+DELIMITER_CHARS+DATA_CHARS] = '\0';
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <buildFrame+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	755a      	strb	r2, [r3, #21]

	message_t message;
	message.msg = tx_frame;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <buildFrame+0x4c>)
 800092e:	613b      	str	r3, [r7, #16]
	message.len = FRAME_CHARS+DELIMITER_CHARS+DATA_CHARS+1;
 8000930:	2316      	movs	r3, #22
 8000932:	617b      	str	r3, [r7, #20]

	return message;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	461a      	mov	r2, r3
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000940:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000944:	68f8      	ldr	r0, [r7, #12]
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000278 	.word	0x20000278

08000950 <readAdc>:



int readAdc(void){
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	return 0;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <analogValidate>:

bool analogValidate(uint32_t analogData){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	return false;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <AnalogInManager>:

void AnalogInManager(void){
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
	int receivedData = readAdc();
 800097e:	f7ff ffe7 	bl	8000950 <readAdc>
 8000982:	61f8      	str	r0, [r7, #28]
	char data[DATA_CHARS];
    if(analogValidate(receivedData)){ // si es valido
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffea 	bl	8000960 <analogValidate>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d013      	beq.n	80009ba <AnalogInManager+0x42>
	    itoa(receivedData, data, DATA_CHARS);
 8000992:	463b      	mov	r3, r7
 8000994:	220a      	movs	r2, #10
 8000996:	4619      	mov	r1, r3
 8000998:	69f8      	ldr	r0, [r7, #28]
 800099a:	f00d fd53 	bl	800e444 <itoa>
		ETHsendMessage(buildFrame("ANALOG_IN_MEASURE", data));
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	463a      	mov	r2, r7
 80009a4:	490d      	ldr	r1, [pc, #52]	; (80009dc <AnalogInManager+0x64>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ffaa 	bl	8000900 <buildFrame>
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009b4:	f7ff ff94 	bl	80008e0 <ETHsendMessage>

    }else{
		ETHsendMessage(buildFrame("RETRY_ANALOG_IN", data));
    }
}
 80009b8:	e00c      	b.n	80009d4 <AnalogInManager+0x5c>
		ETHsendMessage(buildFrame("RETRY_ANALOG_IN", data));
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	463a      	mov	r2, r7
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <AnalogInManager+0x68>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff9c 	bl	8000900 <buildFrame>
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009d0:	f7ff ff86 	bl	80008e0 <ETHsendMessage>
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800f928 	.word	0x0800f928
 80009e0:	0800f93c 	.word	0x0800f93c

080009e4 <DigitalOutManager>:

void DigitalOutManager(void){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	// its either ON/OFF and then comes the OUTPUT Number
	// Format: ON (SPACE) outputNumber
	// e.g. : "ON 3"
//	uint8_t outputNumber = (int) (rx_data[3]-'0');
	if(memcmp(rx_data,"ON", 2)){
 80009e8:	2202      	movs	r2, #2
 80009ea:	4903      	ldr	r1, [pc, #12]	; (80009f8 <DigitalOutManager+0x14>)
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <DigitalOutManager+0x18>)
 80009ee:	f00d fd2b 	bl	800e448 <memcmp>
//		HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PIN_SET);
	} else {
//		HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PIN_RESET);
	}
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	0800f94c 	.word	0x0800f94c
 80009fc:	20000290 	.word	0x20000290

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 fbf4 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f810 	bl	8000a2c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 f8a2 	bl	8000b54 <MX_GPIO_Init>
  MX_TIM14_Init();
 8000a10:	f000 f87c 	bl	8000b0c <MX_TIM14_Init>
  MX_LWIP_Init();
 8000a14:	f002 ffe6 	bl	80039e4 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpClient_connect();
 8000a18:	f000 fb30 	bl	800107c <udpClient_connect>
  HAL_TIM_Base_Start_IT(&htim14);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <main+0x28>)
 8000a1e:	f002 fd8d 	bl	800353c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000a22:	f003 f911 	bl	8003c48 <MX_LWIP_Process>
 8000a26:	e7fc      	b.n	8000a22 <main+0x22>
 8000a28:	200002a8 	.word	0x200002a8

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00d fd3a 	bl	800e4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <SystemClock_Config+0xd8>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <SystemClock_Config+0xdc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <SystemClock_Config+0xdc>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <SystemClock_Config+0xdc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aa0:	2360      	movs	r3, #96	; 0x60
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 f86b 	bl	8002b8c <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000abc:	f000 f942 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2101      	movs	r1, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 facc 	bl	800307c <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 f92b 	bl	8000d44 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000af4:	2000      	movs	r0, #0
 8000af6:	f002 fba7 	bl	8003248 <HAL_RCC_MCOConfig>
}
 8000afa:	bf00      	nop
 8000afc:	3750      	adds	r7, #80	; 0x50
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <MX_TIM14_Init+0x44>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b18:	f240 321f 	movw	r2, #799	; 0x31f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 9375 - 1;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b26:	f242 429e 	movw	r2, #9374	; 0x249e
 8000b2a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b3a:	f002 fcaf 	bl	800349c <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000b44:	f000 f8fe 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200002a8 	.word	0x200002a8
 8000b50:	40002000 	.word	0x40002000

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a5a      	ldr	r2, [pc, #360]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b58      	ldr	r3, [pc, #352]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0310 	and.w	r3, r3, #16
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	4b4d      	ldr	r3, [pc, #308]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a4c      	ldr	r2, [pc, #304]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a45      	ldr	r2, [pc, #276]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b43      	ldr	r3, [pc, #268]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b3f      	ldr	r3, [pc, #252]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a3e      	ldr	r2, [pc, #248]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b3c      	ldr	r3, [pc, #240]	; (8000cdc <MX_GPIO_Init+0x188>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f242 01c1 	movw	r1, #8385	; 0x20c1
 8000bfc:	4838      	ldr	r0, [pc, #224]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000bfe:	f001 ff79 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAL4_CLK_Pin CAL2_CLK_Pin CAL1_CLK_Pin */
  GPIO_InitStruct.Pin = CAL4_CLK_Pin|CAL2_CLK_Pin|CAL1_CLK_Pin;
 8000c02:	f248 2304 	movw	r3, #33284	; 0x8204
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4831      	ldr	r0, [pc, #196]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000c1a:	f001 fdb7 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL4_DATA_Pin CAL1_DATA_Pin */
  GPIO_InitStruct.Pin = CAL4_DATA_Pin|CAL1_DATA_Pin;
 8000c1e:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	482b      	ldr	r0, [pc, #172]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000c34:	f001 fdaa 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAL3_REQ_Pin CAL2_REQ_Pin CAL1_REQ_Pin CAL4_REQ_Pin */
  GPIO_InitStruct.Pin = CAL3_REQ_Pin|CAL2_REQ_Pin|CAL1_REQ_Pin|CAL4_REQ_Pin;
 8000c38:	f242 03c1 	movw	r3, #8385	; 0x20c1
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c3e:	2311      	movs	r3, #17
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <MX_GPIO_Init+0x18c>)
 8000c52:	f001 fd9b 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_CLK_Pin */
  GPIO_InitStruct.Pin = CAL3_CLK_Pin;
 8000c56:	2308      	movs	r3, #8
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL3_CLK_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481e      	ldr	r0, [pc, #120]	; (8000ce4 <MX_GPIO_Init+0x190>)
 8000c6c:	f001 fd8e 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL3_DATA_Pin */
  GPIO_InitStruct.Pin = CAL3_DATA_Pin;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL3_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <MX_GPIO_Init+0x194>)
 8000c84:	f001 fd82 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAL2_DATA_Pin */
  GPIO_InitStruct.Pin = CAL2_DATA_Pin;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c90:	2301      	movs	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAL2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_GPIO_Init+0x198>)
 8000c9c:	f001 fd76 	bl	800278c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <MX_GPIO_Init+0x194>)
 8000cbe:	f001 fd65 	bl	800278c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2028      	movs	r0, #40	; 0x28
 8000cc8:	f000 fc03 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ccc:	2028      	movs	r0, #40	; 0x28
 8000cce:	f000 fc1c 	bl	800150a <HAL_NVIC_EnableIRQ>

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020000 	.word	0x40020000
 8000cec:	40020400 	.word	0x40020400

08000cf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	if(htim  == &htim14){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d107      	bne.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x20>
		// todo: esta funcion va a cambiar cuando hagamos las pruebas finales, porque es solo un ejemplo.
		HAL_GPIO_TogglePin(CAL1_REQ_GPIO_Port, CAL1_REQ_Pin); // periodicamente tenemos un request, en teoria setteado cada 93.75ms, empieza bajo
 8000d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d06:	f001 ff0e 	bl	8002b26 <HAL_GPIO_TogglePin>
		onRisingEdgeOfReqSignal(CALIPER_1); // prendo el flag de poder empezar a leer los bits
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fcda 	bl	80006c4 <onRisingEdgeOfReqSignal>
	}
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200002a8 	.word	0x200002a8
 8000d1c:	40021000 	.word	0x40021000

08000d20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
	onRisingEdgeOfClockSignal(getCaliperNumberGivenClockPin(GPIO_Pin)); // aca se realiza la lectura de los bits y se va guardando en el buffer
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fc2b 	bl	8000588 <getCaliperNumberGivenClockPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcda 	bl	80006f0 <onRisingEdgeOfClockSignal>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_TIM_Base_MspInit+0x48>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d115      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_TIM_Base_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <HAL_TIM_Base_MspInit+0x4c>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_TIM_Base_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	202d      	movs	r0, #45	; 0x2d
 8000dd4:	f000 fb7d 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000dd8:	202d      	movs	r0, #45	; 0x2d
 8000dda:	f000 fb96 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40002000 	.word	0x40002000
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 fa2a 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000e48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e4c:	f001 fe86 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000e5a:	f002 fbdf 	bl	800361c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200002a8 	.word	0x200002a8

08000e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_kill>:

int _kill(int pid, int sig)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <_kill+0x20>)
 8000e84:	2216      	movs	r2, #22
 8000e86:	601a      	str	r2, [r3, #0]
	return -1;
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	20008bbc 	.word	0x20008bbc

08000e9c <_exit>:

void _exit (int status)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ffe5 	bl	8000e78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eae:	e7fe      	b.n	8000eae <_exit+0x12>

08000eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e00a      	b.n	8000ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec2:	f3af 8000 	nop.w
 8000ec6:	4601      	mov	r1, r0
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf0      	blt.n	8000ec2 <_read+0x12>
	}

return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e009      	b.n	8000f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	60ba      	str	r2, [r7, #8]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dbf1      	blt.n	8000efc <_write+0x12>
	}
	return len;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_close>:

int _close(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return -1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_isatty>:

int _isatty(int file)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	return 1;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d205      	bcs.n	8000fc8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <_sbrk+0x6c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e009      	b.n	8000fdc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <_sbrk+0x64>)
 8000fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20020000 	.word	0x20020000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	200000fc 	.word	0x200000fc
 8000ff4:	20008bd0 	.word	0x20008bd0
 8000ff8:	20008bbc 	.word	0x20008bbc

08000ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <udpClient_send_first_message>:
struct udp_pcb *upcb;
char buffer[100];
message_t message;

static void udpClient_send_first_message(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09c      	sub	sp, #112	; 0x70
 8001024:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "Success on Initializing UDP Client");
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4912      	ldr	r1, [pc, #72]	; (8001074 <udpClient_send_first_message+0x54>)
 800102a:	4618      	mov	r0, r3
 800102c:	f00d faa2 	bl	800e574 <siprintf>
 8001030:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8001032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001034:	b29b      	uxth	r3, r3
 8001036:	f44f 7220 	mov.w	r2, #640	; 0x280
 800103a:	4619      	mov	r1, r3
 800103c:	2036      	movs	r0, #54	; 0x36
 800103e:	f004 f947 	bl	80052d0 <pbuf_alloc>
 8001042:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8001044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00f      	beq.n	800106a <udpClient_send_first_message+0x4a>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 800104a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800104c:	b29a      	uxth	r2, r3
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001054:	f004 fe8c 	bl	8005d70 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <udpClient_send_first_message+0x58>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800105e:	4618      	mov	r0, r3
 8001060:	f00a fbae 	bl	800b7c0 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8001064:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001066:	f004 fc17 	bl	8005898 <pbuf_free>
  }
}
 800106a:	bf00      	nop
 800106c:	3770      	adds	r7, #112	; 0x70
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	0800f950 	.word	0x0800f950
 8001078:	200002f0 	.word	0x200002f0

0800107c <udpClient_connect>:


void udpClient_connect(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8001082:	f00a fe9d 	bl	800bdc0 <udp_new>
 8001086:	4603      	mov	r3, r0
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <udpClient_connect+0x5c>)
 800108a:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 0, 111);
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <udpClient_connect+0x60>)
 800108e:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <udpClient_connect+0x5c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f107 0108 	add.w	r1, r7, #8
 8001098:	2208      	movs	r2, #8
 800109a:	4618      	mov	r0, r3
 800109c:	f00a fd7a 	bl	800bb94 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 0, 25);
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <udpClient_connect+0x64>)
 80010a2:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 7);
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <udpClient_connect+0x5c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	1d39      	adds	r1, r7, #4
 80010aa:	2207      	movs	r2, #7
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00a fdf9 	bl	800bca4 <udp_connect>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d108      	bne.n	80010d0 <udpClient_connect+0x54>
	{
//		/* 2. Send message to server */
		udpClient_send_first_message ();
 80010be:	f7ff ffaf 	bl	8001020 <udpClient_send_first_message>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <udpClient_connect+0x5c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4906      	ldr	r1, [pc, #24]	; (80010e4 <udpClient_connect+0x68>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00a fe58 	bl	800bd80 <udp_recv>
	}
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200002f0 	.word	0x200002f0
 80010dc:	6f00a8c0 	.word	0x6f00a8c0
 80010e0:	1900a8c0 	.word	0x1900a8c0
 80010e4:	0800114d 	.word	0x0800114d

080010e8 <udpClient_custom_string>:


void udpClient_custom_string(message_t message)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b09e      	sub	sp, #120	; 0x78
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	463b      	mov	r3, r7
 80010f0:	e883 0003 	stmia.w	r3, {r0, r1}
  struct pbuf *txBuf;
  char data[100];

	/* Copy the message data to the txBuf */
  strncpy (data, message.msg, message.len);
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00d fa59 	bl	800e5b4 <strncpy>
  int len = message.len;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	677b      	str	r3, [r7, #116]	; 0x74

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8001106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001108:	b29b      	uxth	r3, r3
 800110a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800110e:	4619      	mov	r1, r3
 8001110:	2036      	movs	r0, #54	; 0x36
 8001112:	f004 f8dd 	bl	80052d0 <pbuf_alloc>
 8001116:	6738      	str	r0, [r7, #112]	; 0x70

  if (txBuf != NULL)
 8001118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800111a:	2b00      	cmp	r3, #0
 800111c:	d010      	beq.n	8001140 <udpClient_custom_string+0x58>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 800111e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001120:	b29a      	uxth	r2, r3
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800112a:	f004 fe21 	bl	8005d70 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <udpClient_custom_string+0x60>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001134:	4618      	mov	r0, r3
 8001136:	f00a fb43 	bl	800b7c0 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 800113a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800113c:	f004 fbac 	bl	8005898 <pbuf_free>
  }
}
 8001140:	bf00      	nop
 8001142:	3778      	adds	r7, #120	; 0x78
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002f0 	.word	0x200002f0

0800114c <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6859      	ldr	r1, [r3, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	895b      	ldrh	r3, [r3, #10]
 8001162:	461a      	mov	r2, r3
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <udp_receive_callback+0x48>)
 8001166:	f00d fa25 	bl	800e5b4 <strncpy>

	// store the Ethernet Message
	message.msg = buffer;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <udp_receive_callback+0x4c>)
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <udp_receive_callback+0x48>)
 800116e:	601a      	str	r2, [r3, #0]
	message.len = p-> len;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	895b      	ldrh	r3, [r3, #10]
 8001174:	461a      	mov	r2, r3
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <udp_receive_callback+0x4c>)
 8001178:	605a      	str	r2, [r3, #4]

	// process the received message
	ETHonMessageReceived(message);
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <udp_receive_callback+0x4c>)
 800117c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001180:	f7ff fb84 	bl	800088c <ETHonMessageReceived>

	/* Free receive pbuf */
	pbuf_free(p);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f004 fb87 	bl	8005898 <pbuf_free>
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200002fc 	.word	0x200002fc
 8001198:	200002f4 	.word	0x200002f4

0800119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a2:	490e      	ldr	r1, [pc, #56]	; (80011dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b8:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011c6:	f7ff ff19 	bl	8000ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f00d f8ff 	bl	800e3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ce:	f7ff fc17 	bl	8000a00 <main>
  bx  lr    
 80011d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80011e0:	080125c8 	.word	0x080125c8
  ldr r2, =_sbss
 80011e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80011e8:	20008bcc 	.word	0x20008bcc

080011ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_Init+0x40>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_Init+0x40>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x40>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f94f 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fd94 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f967 	bl	8001526 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f92f 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000020 	.word	0x20000020
 800128c:	20000028 	.word	0x20000028
 8001290:	20000024 	.word	0x20000024

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000028 	.word	0x20000028
 80012b8:	20000360 	.word	0x20000360

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000360 	.word	0x20000360

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000028 	.word	0x20000028

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001550:	4baa      	ldr	r3, [pc, #680]	; (80017fc <HAL_ETH_Init+0x2bc>)
 8001552:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e183      	b.n	800186e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f002 fb70 	bl	8003c60 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b9e      	ldr	r3, [pc, #632]	; (8001800 <HAL_ETH_Init+0x2c0>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	4a9d      	ldr	r2, [pc, #628]	; (8001800 <HAL_ETH_Init+0x2c0>)
 800158a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158e:	6453      	str	r3, [r2, #68]	; 0x44
 8001590:	4b9b      	ldr	r3, [pc, #620]	; (8001800 <HAL_ETH_Init+0x2c0>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800159c:	4b99      	ldr	r3, [pc, #612]	; (8001804 <HAL_ETH_Init+0x2c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a98      	ldr	r2, [pc, #608]	; (8001804 <HAL_ETH_Init+0x2c4>)
 80015a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015a6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015a8:	4b96      	ldr	r3, [pc, #600]	; (8001804 <HAL_ETH_Init+0x2c4>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4994      	ldr	r1, [pc, #592]	; (8001804 <HAL_ETH_Init+0x2c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0201 	orr.w	r2, r2, #1
 80015c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015cc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015ce:	f7ff fe75 	bl	80012bc <HAL_GetTick>
 80015d2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015d4:	e011      	b.n	80015fa <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015d6:	f7ff fe71 	bl	80012bc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015e4:	d909      	bls.n	80015fa <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2203      	movs	r2, #3
 80015ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e139      	b.n	800186e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e4      	bne.n	80015d6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f023 031c 	bic.w	r3, r3, #28
 800161a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800161c:	f001 ff32 	bl	8003484 <HAL_RCC_GetHCLKFreq>
 8001620:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4a78      	ldr	r2, [pc, #480]	; (8001808 <HAL_ETH_Init+0x2c8>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d908      	bls.n	800163c <HAL_ETH_Init+0xfc>
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	4a77      	ldr	r2, [pc, #476]	; (800180c <HAL_ETH_Init+0x2cc>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d804      	bhi.n	800163c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e027      	b.n	800168c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	4a73      	ldr	r2, [pc, #460]	; (800180c <HAL_ETH_Init+0x2cc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d908      	bls.n	8001656 <HAL_ETH_Init+0x116>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4a6d      	ldr	r2, [pc, #436]	; (80017fc <HAL_ETH_Init+0x2bc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d204      	bcs.n	8001656 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f043 030c 	orr.w	r3, r3, #12
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	e01a      	b.n	800168c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4a68      	ldr	r2, [pc, #416]	; (80017fc <HAL_ETH_Init+0x2bc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d303      	bcc.n	8001666 <HAL_ETH_Init+0x126>
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4a6b      	ldr	r2, [pc, #428]	; (8001810 <HAL_ETH_Init+0x2d0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d911      	bls.n	800168a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4a69      	ldr	r2, [pc, #420]	; (8001810 <HAL_ETH_Init+0x2d0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d908      	bls.n	8001680 <HAL_ETH_Init+0x140>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4a68      	ldr	r2, [pc, #416]	; (8001814 <HAL_ETH_Init+0x2d4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d804      	bhi.n	8001680 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	e005      	b.n	800168c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	e000      	b.n	800168c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800168a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001694:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fb98 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80016aa:	6939      	ldr	r1, [r7, #16]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fd4d 	bl	800214c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0d7      	b.n	800186e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80016be:	20ff      	movs	r0, #255	; 0xff
 80016c0:	f7ff fe08 	bl	80012d4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a5 	beq.w	8001818 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016ce:	f7ff fdf5 	bl	80012bc <HAL_GetTick>
 80016d2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	461a      	mov	r2, r3
 80016da:	2101      	movs	r1, #1
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fb0f 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80016e2:	f7ff fdeb 	bl	80012bc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d90f      	bls.n	8001714 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80016f8:	6939      	ldr	r1, [r7, #16]
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fd26 	bl	800214c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0ac      	b.n	800186e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0da      	beq.n	80016d4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800171e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fb53 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001734:	6939      	ldr	r1, [r7, #16]
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fd08 	bl	800214c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001744:	2301      	movs	r3, #1
 8001746:	e092      	b.n	800186e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff fdb8 	bl	80012bc <HAL_GetTick>
 800174c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	461a      	mov	r2, r3
 8001754:	2101      	movs	r1, #1
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fad2 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800175c:	f7ff fdae 	bl	80012bc <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d90f      	bls.n	800178e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fce9 	bl	800214c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e06f      	b.n	800186e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0da      	beq.n	800174e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	461a      	mov	r2, r3
 800179e:	211f      	movs	r1, #31
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 faad 	bl	8001d00 <HAL_ETH_ReadPHYRegister>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00b      	beq.n	80017c4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017b0:	6939      	ldr	r1, [r7, #16]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fcca 	bl	800214c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017c0:	2301      	movs	r3, #1
 80017c2:	e054      	b.n	800186e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	e002      	b.n	80017de <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	e035      	b.n	800185c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e030      	b.n	800185c <HAL_ETH_Init+0x31c>
 80017fa:	bf00      	nop
 80017fc:	03938700 	.word	0x03938700
 8001800:	40023800 	.word	0x40023800
 8001804:	40013800 	.word	0x40013800
 8001808:	01312cff 	.word	0x01312cff
 800180c:	02160ebf 	.word	0x02160ebf
 8001810:	05f5e0ff 	.word	0x05f5e0ff
 8001814:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001828:	4313      	orrs	r3, r2
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	2100      	movs	r1, #0
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 facd 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00b      	beq.n	8001854 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001840:	6939      	ldr	r1, [r7, #16]
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 fc82 	bl	800214c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e00c      	b.n	800186e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001854:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001858:	f7ff fd3c 	bl	80012d4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 fc74 	bl	800214c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop

08001878 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_ETH_DMATxDescListInit+0x20>
 8001894:	2302      	movs	r3, #2
 8001896:	e052      	b.n	800193e <HAL_ETH_DMATxDescListInit+0xc6>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e030      	b.n	8001916 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	015b      	lsls	r3, r3, #5
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	4413      	add	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018c4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018cc:	fb02 f303 	mul.w	r3, r2, r3
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	461a      	mov	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d208      	bcs.n	800190a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	015b      	lsls	r3, r3, #5
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	4413      	add	r3, r2
 8001902:	461a      	mov	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	e002      	b.n	8001910 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3ca      	bcc.n	80018b4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001928:	3310      	adds	r3, #16
 800192a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800194a:	b480      	push	{r7}
 800194c:	b087      	sub	sp, #28
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_ETH_DMARxDescListInit+0x20>
 8001966:	2302      	movs	r3, #2
 8001968:	e056      	b.n	8001a18 <HAL_ETH_DMARxDescListInit+0xce>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2202      	movs	r2, #2
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e034      	b.n	80019f0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	015b      	lsls	r3, r3, #5
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001996:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800199e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019a6:	fb02 f303 	mul.w	r3, r2, r3
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	461a      	mov	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d208      	bcs.n	80019e4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	015b      	lsls	r3, r3, #5
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	e002      	b.n	80019ea <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3c6      	bcc.n	8001986 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	330c      	adds	r3, #12
 8001a04:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_ETH_TransmitFrame+0x24>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0cd      	b.n	8001be4 <HAL_ETH_TransmitFrame+0x1c0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0b8      	b.n	8001be4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	da09      	bge.n	8001a90 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2212      	movs	r2, #18
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0a9      	b.n	8001be4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d915      	bls.n	8001ac6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	4a54      	ldr	r2, [pc, #336]	; (8001bf0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_ETH_TransmitFrame+0x1cc>)
 8001aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e001      	b.n	8001aca <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d11c      	bne.n	8001b0a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001ade:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001aea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001afa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b08:	e04b      	b.n	8001ba2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e044      	b.n	8001b9a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b1e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b34:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b3e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d116      	bne.n	8001b78 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b58:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_ETH_TransmitFrame+0x1d0>)
 8001b5e:	fb02 f203 	mul.w	r2, r2, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b6a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b76:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b86:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3301      	adds	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3b6      	bcc.n	8001b10 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	3314      	adds	r3, #20
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00d      	beq.n	8001bd2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	3314      	adds	r3, #20
 8001bc0:	2204      	movs	r2, #4
 8001bc2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	ac02b00b 	.word	0xac02b00b
 8001bf4:	fffffa0c 	.word	0xfffffa0c

08001bf8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_ETH_GetReceivedFrame+0x1a>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e070      	b.n	8001cf4 <HAL_ETH_GetReceivedFrame+0xfc>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db5a      	blt.n	8001ce2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d030      	beq.n	8001c9c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d103      	bne.n	8001c54 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c68:	3b04      	subs	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	461a      	mov	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e02b      	b.n	8001cf4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d010      	beq.n	8001ccc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
 8001cca:	e00a      	b.n	8001ce2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b82      	cmp	r3, #130	; 0x82
 8001d20:	d101      	bne.n	8001d26 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d22:	2302      	movs	r3, #2
 8001d24:	e050      	b.n	8001dc8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2282      	movs	r2, #130	; 0x82
 8001d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 031c 	and.w	r3, r3, #28
 8001d3c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8a1b      	ldrh	r3, [r3, #16]
 8001d42:	02db      	lsls	r3, r3, #11
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	019b      	lsls	r3, r3, #6
 8001d50:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f023 0302 	bic.w	r3, r3, #2
 8001d60:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d72:	f7ff faa3 	bl	80012bc <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d78:	e015      	b.n	8001da6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d7a:	f7ff fa9f 	bl	80012bc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d309      	bcc.n	8001d9e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e014      	b.n	8001dc8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e4      	bne.n	8001d7a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b42      	cmp	r3, #66	; 0x42
 8001df0:	d101      	bne.n	8001df6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	e04e      	b.n	8001e94 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2242      	movs	r2, #66	; 0x42
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 031c 	and.w	r3, r3, #28
 8001e0c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8a1b      	ldrh	r3, [r3, #16]
 8001e12:	02db      	lsls	r3, r3, #11
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001e1c:	897b      	ldrh	r3, [r7, #10]
 8001e1e:	019b      	lsls	r3, r3, #6
 8001e20:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e4c:	f7ff fa36 	bl	80012bc <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e52:	e015      	b.n	8001e80 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001e54:	f7ff fa32 	bl	80012bc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d309      	bcc.n	8001e78 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e00d      	b.n	8001e94 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1e4      	bne.n	8001e54 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ETH_Start+0x16>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e01f      	b.n	8001ef2 <HAL_ETH_Start+0x56>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fb44 	bl	8002550 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fb7b 	bl	80025c4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 fc12 	bl	80026f8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fbaf 	bl	8002638 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fbdc 	bl	8002698 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ETH_Stop+0x16>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e01f      	b.n	8001f50 <HAL_ETH_Stop+0x56>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fba1 	bl	8002668 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fbce 	bl	80026c8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fb66 	bl	80025fe <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fbe0 	bl	80026f8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb26 	bl	800258a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_ETH_ConfigMAC+0x1c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e0e4      	b.n	800213e <HAL_ETH_ConfigMAC+0x1e6>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80b1 	beq.w	80020ee <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fa4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001faa:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001fb0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001fb6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001fbc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001fc2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001fc8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001fce:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001fd4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001fda:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001fe0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001fe6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff f968 	bl	80012d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002014:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800201a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002020:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002026:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800202c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002032:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800203e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002040:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800204a:	2001      	movs	r0, #1
 800204c:	f7ff f942 	bl	80012d4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002060:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800206a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	f64f 7341 	movw	r3, #65345	; 0xff41
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002088:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800208e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002094:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800209a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80020a0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff f90b 	bl	80012d4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff f8f8 	bl	80012d4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	61da      	str	r2, [r3, #28]
 80020ec:	e01e      	b.n	800212c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80020fc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff f8d8 	bl	80012d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	ff20810f 	.word	0xff20810f

0800214c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b0b0      	sub	sp, #192	; 0xc0
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002168:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002170:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800217a:	2300      	movs	r3, #0
 800217c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002196:	663b      	str	r3, [r7, #96]	; 0x60
 8002198:	e001      	b.n	800219e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800219e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021a8:	2300      	movs	r3, #0
 80021aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80021ac:	2300      	movs	r3, #0
 80021ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002220:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002224:	4bac      	ldr	r3, [pc, #688]	; (80024d8 <ETH_MACDMAConfig+0x38c>)
 8002226:	4013      	ands	r3, r2
 8002228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800222c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800222e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002230:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002234:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002238:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800223e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002242:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002246:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800224c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800224e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002250:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002254:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002258:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800225a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800225c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800225e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002260:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002274:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff f827 	bl	80012d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002290:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002294:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002298:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800229a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800229e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80022a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80022a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80022a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80022aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80022ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80022b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80022b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80022bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80022be:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff f802 	bl	80012d4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022e2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022ec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002300:	4013      	ands	r3, r2
 8002302:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002306:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800230a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800230c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002310:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002312:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002316:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800231c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800231e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002322:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002328:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800232a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800233c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002348:	2001      	movs	r0, #1
 800234a:	f7fe ffc3 	bl	80012d4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002356:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002358:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800235c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002372:	2001      	movs	r0, #1
 8002374:	f7fe ffae 	bl	80012d4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002380:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002390:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002394:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80023a6:	2304      	movs	r3, #4
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80023aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80023b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	3318      	adds	r3, #24
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <ETH_MACDMAConfig+0x390>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ea:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80023ec:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ee:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80023f0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80023f2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80023f4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80023f6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80023f8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80023fa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80023fc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80023fe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002400:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002402:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002406:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800240a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800240c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241e:	3318      	adds	r3, #24
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242e:	3318      	adds	r3, #24
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002436:	2001      	movs	r0, #1
 8002438:	f7fe ff4c 	bl	80012d4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	3318      	adds	r3, #24
 8002446:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800244a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800244c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002450:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002454:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002458:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800245a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800245c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800245e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002460:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002462:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002466:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002474:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe ff25 	bl	80012d4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002496:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10f      	bne.n	80024c0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a8:	331c      	adds	r3, #28
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	331c      	adds	r3, #28
 80024be:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	461a      	mov	r2, r3
 80024c6:	2100      	movs	r1, #0
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f809 	bl	80024e0 <ETH_MACAddressConfig>
}
 80024ce:	bf00      	nop
 80024d0:	37c0      	adds	r7, #192	; 0xc0
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	ff20810f 	.word	0xff20810f
 80024dc:	f8de3f23 	.word	0xf8de3f23

080024e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3305      	adds	r3, #5
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	3204      	adds	r2, #4
 80024f8:	7812      	ldrb	r2, [r2, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <ETH_MACAddressConfig+0x68>)
 8002502:	4413      	add	r3, r2
 8002504:	461a      	mov	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3303      	adds	r3, #3
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	061a      	lsls	r2, r3, #24
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3302      	adds	r3, #2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3301      	adds	r3, #1
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	4313      	orrs	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <ETH_MACAddressConfig+0x6c>)
 8002532:	4413      	add	r3, r2
 8002534:	461a      	mov	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40028040 	.word	0x40028040
 800254c:	40028044 	.word	0x40028044

08002550 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0208 	orr.w	r2, r2, #8
 800256a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002574:	2001      	movs	r0, #1
 8002576:	f000 f8e9 	bl	800274c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0208 	bic.w	r2, r2, #8
 80025a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f000 f8cc 	bl	800274c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0204 	orr.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f000 f8af 	bl	800274c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	601a      	str	r2, [r3, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0204 	bic.w	r2, r2, #4
 8002618:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002622:	2001      	movs	r0, #1
 8002624:	f000 f892 	bl	800274c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	3318      	adds	r3, #24
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	3318      	adds	r3, #24
 800265a:	601a      	str	r2, [r3, #0]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	3318      	adds	r3, #24
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002688:	3318      	adds	r3, #24
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	3318      	adds	r3, #24
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0202 	orr.w	r2, r2, #2
 80026b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b8:	3318      	adds	r3, #24
 80026ba:	601a      	str	r2, [r3, #0]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d8:	3318      	adds	r3, #24
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0202 	bic.w	r2, r2, #2
 80026e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e8:	3318      	adds	r3, #24
 80026ea:	601a      	str	r2, [r3, #0]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270c:	3318      	adds	r3, #24
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	3318      	adds	r3, #24
 800271e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002728:	3318      	adds	r3, #24
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800272e:	2001      	movs	r0, #1
 8002730:	f000 f80c 	bl	800274c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273e:	3318      	adds	r3, #24
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <ETH_Delay+0x38>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0b      	ldr	r2, [pc, #44]	; (8002788 <ETH_Delay+0x3c>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0a5b      	lsrs	r3, r3, #9
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002768:	bf00      	nop
  } 
  while (Delay --);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1e5a      	subs	r2, r3, #1
 800276e:	60fa      	str	r2, [r7, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f9      	bne.n	8002768 <ETH_Delay+0x1c>
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000020 	.word	0x20000020
 8002788:	10624dd3 	.word	0x10624dd3

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e16b      	b.n	8002a80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 815a 	bne.w	8002a7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d005      	beq.n	80027de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d130      	bne.n	8002840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002814:	2201      	movs	r2, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 0201 	and.w	r2, r3, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b03      	cmp	r3, #3
 800284a:	d017      	beq.n	800287c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d123      	bne.n	80028d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80b4 	beq.w	8002a7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b60      	ldr	r3, [pc, #384]	; (8002a98 <HAL_GPIO_Init+0x30c>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a5f      	ldr	r2, [pc, #380]	; (8002a98 <HAL_GPIO_Init+0x30c>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <HAL_GPIO_Init+0x30c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292e:	4a5b      	ldr	r2, [pc, #364]	; (8002a9c <HAL_GPIO_Init+0x310>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_GPIO_Init+0x314>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_GPIO_Init+0x226>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a51      	ldr	r2, [pc, #324]	; (8002aa4 <HAL_GPIO_Init+0x318>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x222>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a50      	ldr	r2, [pc, #320]	; (8002aa8 <HAL_GPIO_Init+0x31c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x21e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4f      	ldr	r2, [pc, #316]	; (8002aac <HAL_GPIO_Init+0x320>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x21a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_GPIO_Init+0x324>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x216>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_GPIO_Init+0x328>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x212>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4c      	ldr	r2, [pc, #304]	; (8002ab8 <HAL_GPIO_Init+0x32c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x20e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_GPIO_Init+0x330>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x20a>
 8002992:	2307      	movs	r3, #7
 8002994:	e00e      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 8002996:	2308      	movs	r3, #8
 8002998:	e00c      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 800299a:	2306      	movs	r3, #6
 800299c:	e00a      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 800299e:	2305      	movs	r3, #5
 80029a0:	e008      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029a2:	2304      	movs	r3, #4
 80029a4:	e006      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029a6:	2303      	movs	r3, #3
 80029a8:	e004      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e002      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_GPIO_Init+0x228>
 80029b2:	2300      	movs	r3, #0
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f002 0203 	and.w	r2, r2, #3
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	4093      	lsls	r3, r2
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c4:	4935      	ldr	r1, [pc, #212]	; (8002a9c <HAL_GPIO_Init+0x310>)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	089b      	lsrs	r3, r3, #2
 80029ca:	3302      	adds	r3, #2
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029d2:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029f6:	4a32      	ldr	r2, [pc, #200]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4013      	ands	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <HAL_GPIO_Init+0x334>)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	f67f ae90 	bls.w	80027a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3724      	adds	r7, #36	; 0x24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40013800 	.word	0x40013800
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40020400 	.word	0x40020400
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40021400 	.word	0x40021400
 8002ab8:	40021800 	.word	0x40021800
 8002abc:	40021c00 	.word	0x40021c00
 8002ac0:	40013c00 	.word	0x40013c00

08002ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	e001      	b.n	8002ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	041a      	lsls	r2, r3, #16
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43d9      	mvns	r1, r3
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	400b      	ands	r3, r1
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	619a      	str	r2, [r3, #24]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe f8d0 	bl	8000d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013c00 	.word	0x40013c00

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e264      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d075      	beq.n	8002c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002baa:	4ba3      	ldr	r3, [pc, #652]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4ba0      	ldr	r3, [pc, #640]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d112      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4b9d      	ldr	r3, [pc, #628]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b99      	ldr	r3, [pc, #612]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x108>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d157      	bne.n	8002c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e23f      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x74>
 8002bf2:	4b91      	ldr	r3, [pc, #580]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a90      	ldr	r2, [pc, #576]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e01d      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a8a      	ldr	r2, [pc, #552]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a87      	ldr	r2, [pc, #540]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a80      	ldr	r2, [pc, #512]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fb3a 	bl	80012bc <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7fe fb36 	bl	80012bc <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e204      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0xc0>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fb26 	bl	80012bc <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fb22 	bl	80012bc <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1f0      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0xe8>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e1c4      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4952      	ldr	r1, [pc, #328]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	e03a      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe fadb 	bl	80012bc <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fad7 	bl	80012bc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e1a5      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4940      	ldr	r1, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
 8002d3c:	e015      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe faba 	bl	80012bc <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fab6 	bl	80012bc <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e184      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d030      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_RCC_OscConfig+0x2b4>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fa9a 	bl	80012bc <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fa96 	bl	80012bc <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e164      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x200>
 8002daa:	e015      	b.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCC_OscConfig+0x2b4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fa83 	bl	80012bc <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe fa7f 	bl	80012bc <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e14d      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a0 	beq.w	8002f26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fa45 	bl	80012bc <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	e011      	b.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470000 	.word	0x42470000
 8002e40:	42470e80 	.word	0x42470e80
 8002e44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe fa38 	bl	80012bc <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e106      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b85      	ldr	r3, [pc, #532]	; (8003070 <HAL_RCC_OscConfig+0x4e4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
 8002e6e:	4b81      	ldr	r3, [pc, #516]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a80      	ldr	r2, [pc, #512]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	e01c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCC_OscConfig+0x312>
 8002e84:	4b7b      	ldr	r3, [pc, #492]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a7a      	ldr	r2, [pc, #488]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	4b78      	ldr	r3, [pc, #480]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a77      	ldr	r2, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32a>
 8002e9e:	4b75      	ldr	r3, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a74      	ldr	r2, [pc, #464]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	4b72      	ldr	r3, [pc, #456]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a71      	ldr	r2, [pc, #452]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d015      	beq.n	8002eea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f9fd 	bl	80012bc <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe f9f9 	bl	80012bc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0c5      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x33a>
 8002ee8:	e014      	b.n	8002f14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe f9e7 	bl	80012bc <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe f9e3 	bl	80012bc <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0af      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	4b5a      	ldr	r3, [pc, #360]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b56      	ldr	r3, [pc, #344]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a55      	ldr	r2, [pc, #340]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 809b 	beq.w	8003066 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f30:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d05c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d141      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x4ec>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe f9b7 	bl	80012bc <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe f9b3 	bl	80012bc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e081      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	4b43      	ldr	r3, [pc, #268]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	019b      	lsls	r3, r3, #6
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	4937      	ldr	r1, [pc, #220]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_OscConfig+0x4ec>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f98c 	bl	80012bc <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe f988 	bl	80012bc <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e056      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
 8002fc6:	e04e      	b.n	8003066 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x4ec>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe f975 	bl	80012bc <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe f971 	bl	80012bc <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e03f      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x44a>
 8002ff4:	e037      	b.n	8003066 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e032      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <HAL_RCC_OscConfig+0x4e8>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d028      	beq.n	8003062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d121      	bne.n	8003062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d11a      	bne.n	8003062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003038:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303a:	4293      	cmp	r3, r2
 800303c:	d111      	bne.n	8003062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d107      	bne.n	8003062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40007000 	.word	0x40007000
 8003074:	40023800 	.word	0x40023800
 8003078:	42470060 	.word	0x42470060

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0cc      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b68      	ldr	r3, [pc, #416]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d90c      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b65      	ldr	r3, [pc, #404]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b63      	ldr	r3, [pc, #396]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0b8      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a58      	ldr	r2, [pc, #352]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	494d      	ldr	r1, [pc, #308]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d044      	beq.n	800319c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d119      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d003      	beq.n	800313a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003136:	2b03      	cmp	r3, #3
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e06f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e067      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4934      	ldr	r1, [pc, #208]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7fe f8a6 	bl	80012bc <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe f8a2 	bl	80012bc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e04f      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d20c      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b22      	ldr	r3, [pc, #136]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b2:	4b20      	ldr	r3, [pc, #128]	; (8003234 <HAL_RCC_ClockConfig+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e032      	b.n	800322a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4916      	ldr	r1, [pc, #88]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003202:	f000 f889 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 8003206:	4602      	mov	r2, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	490a      	ldr	r1, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe f806 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023c00 	.word	0x40023c00
 8003238:	40023800 	.word	0x40023800
 800323c:	08012354 	.word	0x08012354
 8003240:	20000020 	.word	0x20000020
 8003244:	20000024 	.word	0x20000024

08003248 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d129      	bne.n	80032ae <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a2a      	ldr	r2, [pc, #168]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003280:	2303      	movs	r3, #3
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003288:	2300      	movs	r3, #0
 800328a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	4619      	mov	r1, r3
 8003292:	481f      	ldr	r0, [pc, #124]	; (8003310 <HAL_RCC_MCOConfig+0xc8>)
 8003294:	f7ff fa7a 	bl	800278c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	4919      	ldr	r1, [pc, #100]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80032ac:	e029      	b.n	8003302 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a15      	ldr	r2, [pc, #84]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80032ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80032dc:	2300      	movs	r3, #0
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	4619      	mov	r1, r3
 80032e6:	480b      	ldr	r0, [pc, #44]	; (8003314 <HAL_RCC_MCOConfig+0xcc>)
 80032e8:	f7ff fa50 	bl	800278c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80032ec:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	00d9      	lsls	r1, r3, #3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <HAL_RCC_MCOConfig+0xc4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
}
 8003302:	bf00      	nop
 8003304:	3730      	adds	r7, #48	; 0x30
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40020000 	.word	0x40020000
 8003314:	40020800 	.word	0x40020800

08003318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	b5b0      	push	{r4, r5, r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800331e:	2100      	movs	r1, #0
 8003320:	6079      	str	r1, [r7, #4]
 8003322:	2100      	movs	r1, #0
 8003324:	60f9      	str	r1, [r7, #12]
 8003326:	2100      	movs	r1, #0
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800332a:	2100      	movs	r1, #0
 800332c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800332e:	4952      	ldr	r1, [pc, #328]	; (8003478 <HAL_RCC_GetSysClockFreq+0x160>)
 8003330:	6889      	ldr	r1, [r1, #8]
 8003332:	f001 010c 	and.w	r1, r1, #12
 8003336:	2908      	cmp	r1, #8
 8003338:	d00d      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x3e>
 800333a:	2908      	cmp	r1, #8
 800333c:	f200 8094 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x150>
 8003340:	2900      	cmp	r1, #0
 8003342:	d002      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x32>
 8003344:	2904      	cmp	r1, #4
 8003346:	d003      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x38>
 8003348:	e08e      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_GetSysClockFreq+0x164>)
 800334c:	60bb      	str	r3, [r7, #8]
       break;
 800334e:	e08e      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003350:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_RCC_GetSysClockFreq+0x168>)
 8003352:	60bb      	str	r3, [r7, #8]
      break;
 8003354:	e08b      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003356:	4948      	ldr	r1, [pc, #288]	; (8003478 <HAL_RCC_GetSysClockFreq+0x160>)
 8003358:	6849      	ldr	r1, [r1, #4]
 800335a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800335e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003360:	4945      	ldr	r1, [pc, #276]	; (8003478 <HAL_RCC_GetSysClockFreq+0x160>)
 8003362:	6849      	ldr	r1, [r1, #4]
 8003364:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003368:	2900      	cmp	r1, #0
 800336a:	d024      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336c:	4942      	ldr	r1, [pc, #264]	; (8003478 <HAL_RCC_GetSysClockFreq+0x160>)
 800336e:	6849      	ldr	r1, [r1, #4]
 8003370:	0989      	lsrs	r1, r1, #6
 8003372:	4608      	mov	r0, r1
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	f240 14ff 	movw	r4, #511	; 0x1ff
 800337c:	f04f 0500 	mov.w	r5, #0
 8003380:	ea00 0204 	and.w	r2, r0, r4
 8003384:	ea01 0305 	and.w	r3, r1, r5
 8003388:	493d      	ldr	r1, [pc, #244]	; (8003480 <HAL_RCC_GetSysClockFreq+0x168>)
 800338a:	fb01 f003 	mul.w	r0, r1, r3
 800338e:	2100      	movs	r1, #0
 8003390:	fb01 f102 	mul.w	r1, r1, r2
 8003394:	1844      	adds	r4, r0, r1
 8003396:	493a      	ldr	r1, [pc, #232]	; (8003480 <HAL_RCC_GetSysClockFreq+0x168>)
 8003398:	fba2 0101 	umull	r0, r1, r2, r1
 800339c:	1863      	adds	r3, r4, r1
 800339e:	4619      	mov	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f7fc ff72 	bl	8000290 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	e04a      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_RCC_GetSysClockFreq+0x160>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	ea02 0400 	and.w	r4, r2, r0
 80033ce:	ea03 0501 	and.w	r5, r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	014b      	lsls	r3, r1, #5
 80033e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033e4:	0142      	lsls	r2, r0, #5
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	1b00      	subs	r0, r0, r4
 80033ec:	eb61 0105 	sbc.w	r1, r1, r5
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	018b      	lsls	r3, r1, #6
 80033fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033fe:	0182      	lsls	r2, r0, #6
 8003400:	1a12      	subs	r2, r2, r0
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	00d9      	lsls	r1, r3, #3
 8003410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003414:	00d0      	lsls	r0, r2, #3
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	1912      	adds	r2, r2, r4
 800341c:	eb45 0303 	adc.w	r3, r5, r3
 8003420:	f04f 0000 	mov.w	r0, #0
 8003424:	f04f 0100 	mov.w	r1, #0
 8003428:	0299      	lsls	r1, r3, #10
 800342a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800342e:	0290      	lsls	r0, r2, #10
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	461a      	mov	r2, r3
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	f7fc ff26 	bl	8000290 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_RCC_GetSysClockFreq+0x160>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	60bb      	str	r3, [r7, #8]
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <HAL_RCC_GetSysClockFreq+0x164>)
 800346a:	60bb      	str	r3, [r7, #8]
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	68bb      	ldr	r3, [r7, #8]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bdb0      	pop	{r4, r5, r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	00f42400 	.word	0x00f42400
 8003480:	017d7840 	.word	0x017d7840

08003484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <HAL_RCC_GetHCLKFreq+0x14>)
 800348a:	681b      	ldr	r3, [r3, #0]
}
 800348c:	4618      	mov	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000020 	.word	0x20000020

0800349c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e041      	b.n	8003532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fc6c 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 f9ce 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d001      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e04e      	b.n	80035f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a23      	ldr	r2, [pc, #140]	; (8003600 <HAL_TIM_Base_Start_IT+0xc4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d022      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x80>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357e:	d01d      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x80>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <HAL_TIM_Base_Start_IT+0xc8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d018      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x80>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1e      	ldr	r2, [pc, #120]	; (8003608 <HAL_TIM_Base_Start_IT+0xcc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d013      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x80>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_TIM_Base_Start_IT+0xd0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00e      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x80>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_TIM_Base_Start_IT+0xd4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x80>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_TIM_Base_Start_IT+0xd8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d004      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0x80>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_TIM_Base_Start_IT+0xdc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d111      	bne.n	80035e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d010      	beq.n	80035f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035de:	e007      	b.n	80035f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010000 	.word	0x40010000
 8003604:	40000400 	.word	0x40000400
 8003608:	40000800 	.word	0x40000800
 800360c:	40000c00 	.word	0x40000c00
 8003610:	40010400 	.word	0x40010400
 8003614:	40014000 	.word	0x40014000
 8003618:	40001800 	.word	0x40001800

0800361c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d122      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d11b      	bne.n	8003678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0202 	mvn.w	r2, #2
 8003648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8ee 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8e0 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f8f1 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b04      	cmp	r3, #4
 8003684:	d122      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d11b      	bne.n	80036cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0204 	mvn.w	r2, #4
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f8c4 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8b6 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8c7 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d122      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d11b      	bne.n	8003720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0208 	mvn.w	r2, #8
 80036f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f89a 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 800370c:	e005      	b.n	800371a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f88c 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f89d 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b10      	cmp	r3, #16
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b10      	cmp	r3, #16
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0210 	mvn.w	r2, #16
 8003744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2208      	movs	r2, #8
 800374a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f870 	bl	8003840 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f862 	bl	800382c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f873 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0201 	mvn.w	r2, #1
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd faa8 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b80      	cmp	r3, #128	; 0x80
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f902 	bl	80039d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d6:	2b40      	cmp	r3, #64	; 0x40
 80037d8:	d10e      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d107      	bne.n	80037f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f838 	bl	8003868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d10e      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d107      	bne.n	8003824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0220 	mvn.w	r2, #32
 800381c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8cc 	bl	80039bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a40      	ldr	r2, [pc, #256]	; (8003990 <TIM_Base_SetConfig+0x114>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d013      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389a:	d00f      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3d      	ldr	r2, [pc, #244]	; (8003994 <TIM_Base_SetConfig+0x118>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00b      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3c      	ldr	r2, [pc, #240]	; (8003998 <TIM_Base_SetConfig+0x11c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3b      	ldr	r2, [pc, #236]	; (800399c <TIM_Base_SetConfig+0x120>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3a      	ldr	r2, [pc, #232]	; (80039a0 <TIM_Base_SetConfig+0x124>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2f      	ldr	r2, [pc, #188]	; (8003990 <TIM_Base_SetConfig+0x114>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02b      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d027      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2c      	ldr	r2, [pc, #176]	; (8003994 <TIM_Base_SetConfig+0x118>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d023      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <TIM_Base_SetConfig+0x11c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2a      	ldr	r2, [pc, #168]	; (800399c <TIM_Base_SetConfig+0x120>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01b      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <TIM_Base_SetConfig+0x124>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d017      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <TIM_Base_SetConfig+0x128>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <TIM_Base_SetConfig+0x12c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00f      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a26      	ldr	r2, [pc, #152]	; (80039ac <TIM_Base_SetConfig+0x130>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <TIM_Base_SetConfig+0x134>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a24      	ldr	r2, [pc, #144]	; (80039b4 <TIM_Base_SetConfig+0x138>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <TIM_Base_SetConfig+0x13c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <TIM_Base_SetConfig+0x114>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0xf8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0c      	ldr	r2, [pc, #48]	; (80039a0 <TIM_Base_SetConfig+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d103      	bne.n	800397c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	615a      	str	r2, [r3, #20]
}
 8003982:	bf00      	nop
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40010000 	.word	0x40010000
 8003994:	40000400 	.word	0x40000400
 8003998:	40000800 	.word	0x40000800
 800399c:	40000c00 	.word	0x40000c00
 80039a0:	40010400 	.word	0x40010400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800
 80039b0:	40001800 	.word	0x40001800
 80039b4:	40001c00 	.word	0x40001c00
 80039b8:	40002000 	.word	0x40002000

080039bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80039ea:	4b8d      	ldr	r3, [pc, #564]	; (8003c20 <MX_LWIP_Init+0x23c>)
 80039ec:	22c0      	movs	r2, #192	; 0xc0
 80039ee:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80039f0:	4b8b      	ldr	r3, [pc, #556]	; (8003c20 <MX_LWIP_Init+0x23c>)
 80039f2:	22a8      	movs	r2, #168	; 0xa8
 80039f4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80039f6:	4b8a      	ldr	r3, [pc, #552]	; (8003c20 <MX_LWIP_Init+0x23c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 80039fc:	4b88      	ldr	r3, [pc, #544]	; (8003c20 <MX_LWIP_Init+0x23c>)
 80039fe:	226f      	movs	r2, #111	; 0x6f
 8003a00:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003a02:	4b88      	ldr	r3, [pc, #544]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003a04:	22ff      	movs	r2, #255	; 0xff
 8003a06:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003a08:	4b86      	ldr	r3, [pc, #536]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003a0e:	4b85      	ldr	r3, [pc, #532]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003a10:	22ff      	movs	r2, #255	; 0xff
 8003a12:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003a14:	4b83      	ldr	r3, [pc, #524]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003a1a:	4b83      	ldr	r3, [pc, #524]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003a1c:	22c0      	movs	r2, #192	; 0xc0
 8003a1e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003a20:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003a22:	22a8      	movs	r2, #168	; 0xa8
 8003a24:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003a26:	4b80      	ldr	r3, [pc, #512]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003a2c:	4b7e      	ldr	r3, [pc, #504]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003a32:	f000 fcab 	bl	800438c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003a36:	4b7a      	ldr	r3, [pc, #488]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	061a      	lsls	r2, r3, #24
 8003a3c:	4b78      	ldr	r3, [pc, #480]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	4b76      	ldr	r3, [pc, #472]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a46:	789b      	ldrb	r3, [r3, #2]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	4a74      	ldr	r2, [pc, #464]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a4e:	78d2      	ldrb	r2, [r2, #3]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	061a      	lsls	r2, r3, #24
 8003a54:	4b72      	ldr	r3, [pc, #456]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	0619      	lsls	r1, r3, #24
 8003a5a:	4b71      	ldr	r3, [pc, #452]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	4319      	orrs	r1, r3
 8003a62:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a64:	789b      	ldrb	r3, [r3, #2]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	496d      	ldr	r1, [pc, #436]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a6c:	78c9      	ldrb	r1, [r1, #3]
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a76:	431a      	orrs	r2, r3
 8003a78:	4b69      	ldr	r3, [pc, #420]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	0619      	lsls	r1, r3, #24
 8003a7e:	4b68      	ldr	r3, [pc, #416]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	4319      	orrs	r1, r3
 8003a86:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a88:	789b      	ldrb	r3, [r3, #2]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	4964      	ldr	r1, [pc, #400]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a90:	78c9      	ldrb	r1, [r1, #3]
 8003a92:	430b      	orrs	r3, r1
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	4b60      	ldr	r3, [pc, #384]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	0619      	lsls	r1, r3, #24
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	4319      	orrs	r1, r3
 8003aaa:	4b5d      	ldr	r3, [pc, #372]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003aac:	789b      	ldrb	r3, [r3, #2]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	495b      	ldr	r1, [pc, #364]	; (8003c20 <MX_LWIP_Init+0x23c>)
 8003ab4:	78c9      	ldrb	r1, [r1, #3]
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	0e1b      	lsrs	r3, r3, #24
 8003aba:	4313      	orrs	r3, r2
 8003abc:	4a5b      	ldr	r2, [pc, #364]	; (8003c2c <MX_LWIP_Init+0x248>)
 8003abe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003ac0:	4b58      	ldr	r3, [pc, #352]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	061a      	lsls	r2, r3, #24
 8003ac6:	4b57      	ldr	r3, [pc, #348]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	431a      	orrs	r2, r3
 8003ace:	4b55      	ldr	r3, [pc, #340]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003ad0:	789b      	ldrb	r3, [r3, #2]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	4a53      	ldr	r2, [pc, #332]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003ad8:	78d2      	ldrb	r2, [r2, #3]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	061a      	lsls	r2, r3, #24
 8003ade:	4b51      	ldr	r3, [pc, #324]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	0619      	lsls	r1, r3, #24
 8003ae4:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	041b      	lsls	r3, r3, #16
 8003aea:	4319      	orrs	r1, r3
 8003aec:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003aee:	789b      	ldrb	r3, [r3, #2]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	430b      	orrs	r3, r1
 8003af4:	494b      	ldr	r1, [pc, #300]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003af6:	78c9      	ldrb	r1, [r1, #3]
 8003af8:	430b      	orrs	r3, r1
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b00:	431a      	orrs	r2, r3
 8003b02:	4b48      	ldr	r3, [pc, #288]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	0619      	lsls	r1, r3, #24
 8003b08:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	4319      	orrs	r1, r3
 8003b10:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b12:	789b      	ldrb	r3, [r3, #2]
 8003b14:	021b      	lsls	r3, r3, #8
 8003b16:	430b      	orrs	r3, r1
 8003b18:	4942      	ldr	r1, [pc, #264]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b1a:	78c9      	ldrb	r1, [r1, #3]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b24:	431a      	orrs	r2, r3
 8003b26:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	0619      	lsls	r1, r3, #24
 8003b2c:	4b3d      	ldr	r3, [pc, #244]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b2e:	785b      	ldrb	r3, [r3, #1]
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	4319      	orrs	r1, r3
 8003b34:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b36:	789b      	ldrb	r3, [r3, #2]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	4939      	ldr	r1, [pc, #228]	; (8003c24 <MX_LWIP_Init+0x240>)
 8003b3e:	78c9      	ldrb	r1, [r1, #3]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	0e1b      	lsrs	r3, r3, #24
 8003b44:	4313      	orrs	r3, r2
 8003b46:	4a3a      	ldr	r2, [pc, #232]	; (8003c30 <MX_LWIP_Init+0x24c>)
 8003b48:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003b4a:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	061a      	lsls	r2, r3, #24
 8003b50:	4b35      	ldr	r3, [pc, #212]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b52:	785b      	ldrb	r3, [r3, #1]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b5a:	789b      	ldrb	r3, [r3, #2]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	4a31      	ldr	r2, [pc, #196]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b62:	78d2      	ldrb	r2, [r2, #3]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	061a      	lsls	r2, r3, #24
 8003b68:	4b2f      	ldr	r3, [pc, #188]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	0619      	lsls	r1, r3, #24
 8003b6e:	4b2e      	ldr	r3, [pc, #184]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	041b      	lsls	r3, r3, #16
 8003b74:	4319      	orrs	r1, r3
 8003b76:	4b2c      	ldr	r3, [pc, #176]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b78:	789b      	ldrb	r3, [r3, #2]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	492a      	ldr	r1, [pc, #168]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b80:	78c9      	ldrb	r1, [r1, #3]
 8003b82:	430b      	orrs	r3, r1
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	0619      	lsls	r1, r3, #24
 8003b92:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	4319      	orrs	r1, r3
 8003b9a:	4b23      	ldr	r3, [pc, #140]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003b9c:	789b      	ldrb	r3, [r3, #2]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	4921      	ldr	r1, [pc, #132]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003ba4:	78c9      	ldrb	r1, [r1, #3]
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	0619      	lsls	r1, r3, #24
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	4319      	orrs	r1, r3
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003bc0:	789b      	ldrb	r3, [r3, #2]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	4918      	ldr	r1, [pc, #96]	; (8003c28 <MX_LWIP_Init+0x244>)
 8003bc8:	78c9      	ldrb	r1, [r1, #3]
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <MX_LWIP_Init+0x250>)
 8003bd2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003bd4:	4b18      	ldr	r3, [pc, #96]	; (8003c38 <MX_LWIP_Init+0x254>)
 8003bd6:	9302      	str	r3, [sp, #8]
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <MX_LWIP_Init+0x258>)
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <MX_LWIP_Init+0x250>)
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <MX_LWIP_Init+0x24c>)
 8003be4:	4911      	ldr	r1, [pc, #68]	; (8003c2c <MX_LWIP_Init+0x248>)
 8003be6:	4816      	ldr	r0, [pc, #88]	; (8003c40 <MX_LWIP_Init+0x25c>)
 8003be8:	f001 f876 	bl	8004cd8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003bec:	4814      	ldr	r0, [pc, #80]	; (8003c40 <MX_LWIP_Init+0x25c>)
 8003bee:	f001 fa25 	bl	800503c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <MX_LWIP_Init+0x25c>)
 8003bf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003c04:	480e      	ldr	r0, [pc, #56]	; (8003c40 <MX_LWIP_Init+0x25c>)
 8003c06:	f001 fa29 	bl	800505c <netif_set_up>
 8003c0a:	e002      	b.n	8003c12 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003c0c:	480c      	ldr	r0, [pc, #48]	; (8003c40 <MX_LWIP_Init+0x25c>)
 8003c0e:	f001 fa91 	bl	8005134 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003c12:	490c      	ldr	r1, [pc, #48]	; (8003c44 <MX_LWIP_Init+0x260>)
 8003c14:	480a      	ldr	r0, [pc, #40]	; (8003c40 <MX_LWIP_Init+0x25c>)
 8003c16:	f001 fabf 	bl	8005198 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	200003a8 	.word	0x200003a8
 8003c24:	200003a4 	.word	0x200003a4
 8003c28:	20000364 	.word	0x20000364
 8003c2c:	200003a0 	.word	0x200003a0
 8003c30:	200003ac 	.word	0x200003ac
 8003c34:	200003b0 	.word	0x200003b0
 8003c38:	0800e221 	.word	0x0800e221
 8003c3c:	080041b9 	.word	0x080041b9
 8003c40:	20000368 	.word	0x20000368
 8003c44:	08004225 	.word	0x08004225

08003c48 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003c4c:	4803      	ldr	r0, [pc, #12]	; (8003c5c <MX_LWIP_Process+0x14>)
 8003c4e:	f000 fa93 	bl	8004178 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003c52:	f007 fbb1 	bl	800b3b8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003c56:	bf00      	nop
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000368 	.word	0x20000368

08003c60 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08e      	sub	sp, #56	; 0x38
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a46      	ldr	r2, [pc, #280]	; (8003d98 <HAL_ETH_MspInit+0x138>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	f040 8085 	bne.w	8003d8e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003c84:	2300      	movs	r3, #0
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	4a43      	ldr	r2, [pc, #268]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c92:	6313      	str	r3, [r2, #48]	; 0x30
 8003c94:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	4b3d      	ldr	r3, [pc, #244]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4a3c      	ldr	r2, [pc, #240]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003caa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cae:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb0:	4b3a      	ldr	r3, [pc, #232]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	4a35      	ldr	r2, [pc, #212]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cca:	6313      	str	r3, [r2, #48]	; 0x30
 8003ccc:	4b33      	ldr	r3, [pc, #204]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4a2e      	ldr	r2, [pc, #184]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce8:	4b2c      	ldr	r3, [pc, #176]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6313      	str	r3, [r2, #48]	; 0x30
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	4a20      	ldr	r2, [pc, #128]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003d1a:	f043 0302 	orr.w	r3, r3, #2
 8003d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d20:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_ETH_MspInit+0x13c>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003d2c:	2332      	movs	r3, #50	; 0x32
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d30:	2302      	movs	r3, #2
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d3c:	230b      	movs	r3, #11
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d44:	4619      	mov	r1, r3
 8003d46:	4816      	ldr	r0, [pc, #88]	; (8003da0 <HAL_ETH_MspInit+0x140>)
 8003d48:	f7fe fd20 	bl	800278c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003d4c:	2386      	movs	r3, #134	; 0x86
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	2302      	movs	r3, #2
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d5c:	230b      	movs	r3, #11
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d64:	4619      	mov	r1, r3
 8003d66:	480f      	ldr	r0, [pc, #60]	; (8003da4 <HAL_ETH_MspInit+0x144>)
 8003d68:	f7fe fd10 	bl	800278c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003d6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d7e:	230b      	movs	r3, #11
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d86:	4619      	mov	r1, r3
 8003d88:	4807      	ldr	r0, [pc, #28]	; (8003da8 <HAL_ETH_MspInit+0x148>)
 8003d8a:	f7fe fcff 	bl	800278c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003d8e:	bf00      	nop
 8003d90:	3738      	adds	r7, #56	; 0x38
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40028000 	.word	0x40028000
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020800 	.word	0x40020800
 8003da4:	40020000 	.word	0x40020000
 8003da8:	40020400 	.word	0x40020400

08003dac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003db4:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <low_level_init+0x110>)
 8003db6:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <low_level_init+0x114>)
 8003db8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003dba:	4b40      	ldr	r3, [pc, #256]	; (8003ebc <low_level_init+0x110>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003dc0:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <low_level_init+0x110>)
 8003dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dc6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003dc8:	4b3c      	ldr	r3, [pc, #240]	; (8003ebc <low_level_init+0x110>)
 8003dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dce:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8720A_PHY_ADDRESS;
 8003dd0:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <low_level_init+0x110>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003dde:	23e1      	movs	r3, #225	; 0xe1
 8003de0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003de2:	2300      	movs	r3, #0
 8003de4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003de6:	2300      	movs	r3, #0
 8003de8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003dea:	2300      	movs	r3, #0
 8003dec:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003dee:	4a33      	ldr	r2, [pc, #204]	; (8003ebc <low_level_init+0x110>)
 8003df0:	f107 0308 	add.w	r3, r7, #8
 8003df4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <low_level_init+0x110>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003dfc:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <low_level_init+0x110>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003e02:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <low_level_init+0x110>)
 8003e04:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e08:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e0a:	482c      	ldr	r0, [pc, #176]	; (8003ebc <low_level_init+0x110>)
 8003e0c:	f7fd fb98 	bl	8001540 <HAL_ETH_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]

  if (hal_eth_init_status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <low_level_init+0x80>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e20:	f043 0304 	orr.w	r3, r3, #4
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	4a25      	ldr	r2, [pc, #148]	; (8003ec4 <low_level_init+0x118>)
 8003e30:	4925      	ldr	r1, [pc, #148]	; (8003ec8 <low_level_init+0x11c>)
 8003e32:	4822      	ldr	r0, [pc, #136]	; (8003ebc <low_level_init+0x110>)
 8003e34:	f7fd fd20 	bl	8001878 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003e38:	2304      	movs	r3, #4
 8003e3a:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <low_level_init+0x120>)
 8003e3c:	4924      	ldr	r1, [pc, #144]	; (8003ed0 <low_level_init+0x124>)
 8003e3e:	481f      	ldr	r0, [pc, #124]	; (8003ebc <low_level_init+0x110>)
 8003e40:	f7fd fd83 	bl	800194a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2206      	movs	r2, #6
 8003e48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <low_level_init+0x110>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <low_level_init+0x110>)
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	785a      	ldrb	r2, [r3, #1]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003e64:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <low_level_init+0x110>)
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	789a      	ldrb	r2, [r3, #2]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003e70:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <low_level_init+0x110>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	78da      	ldrb	r2, [r3, #3]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <low_level_init+0x110>)
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	791a      	ldrb	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <low_level_init+0x110>)
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	795a      	ldrb	r2, [r3, #5]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ea2:	f043 030a 	orr.w	r3, r3, #10
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003eae:	4803      	ldr	r0, [pc, #12]	; (8003ebc <low_level_init+0x110>)
 8003eb0:	f7fd fff4 	bl	8001e9c <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20001c84 	.word	0x20001c84
 8003ec0:	40028000 	.word	0x40028000
 8003ec4:	20001ccc 	.word	0x20001ccc
 8003ec8:	200003b4 	.word	0x200003b4
 8003ecc:	20000434 	.word	0x20000434
 8003ed0:	20001c04 	.word	0x20001c04

08003ed4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003ede:	4b4b      	ldr	r3, [pc, #300]	; (800400c <low_level_output+0x138>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003ef6:	4b45      	ldr	r3, [pc, #276]	; (800400c <low_level_output+0x138>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	e05a      	b.n	8003fbc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	da03      	bge.n	8003f16 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003f0e:	23f8      	movs	r3, #248	; 0xf8
 8003f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003f14:	e05c      	b.n	8003fd0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	895b      	ldrh	r3, [r3, #10]
 8003f1a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003f20:	e02f      	b.n	8003f82 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	18d0      	adds	r0, r2, r3
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	18d1      	adds	r1, r2, r3
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003f36:	3304      	adds	r3, #4
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f00a fa93 	bl	800e464 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	da03      	bge.n	8003f54 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003f4c:	23f8      	movs	r3, #248	; 0xf8
 8003f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003f52:	e03d      	b.n	8003fd0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003f64:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003f70:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003f7c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d8c8      	bhi.n	8003f22 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	18d0      	adds	r0, r2, r3
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f00a fa5f 	bl	800e464 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	623b      	str	r3, [r7, #32]
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1a1      	bne.n	8003f06 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003fc2:	6979      	ldr	r1, [r7, #20]
 8003fc4:	4811      	ldr	r0, [pc, #68]	; (800400c <low_level_output+0x138>)
 8003fc6:	f7fd fd2d 	bl	8001a24 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <low_level_output+0x138>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd8:	3314      	adds	r3, #20
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <low_level_output+0x138>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fec:	3314      	adds	r3, #20
 8003fee:	2220      	movs	r2, #32
 8003ff0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <low_level_output+0x138>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20001c84 	.word	0x20001c84

08004010 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08c      	sub	sp, #48	; 0x30
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004030:	2300      	movs	r3, #0
 8004032:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004034:	484f      	ldr	r0, [pc, #316]	; (8004174 <low_level_input+0x164>)
 8004036:	f7fd fddf 	bl	8001bf8 <HAL_ETH_GetReceivedFrame>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <low_level_input+0x34>

    return NULL;
 8004040:	2300      	movs	r3, #0
 8004042:	e092      	b.n	800416a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004044:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <low_level_input+0x164>)
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800404a:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <low_level_input+0x164>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004050:	89fb      	ldrh	r3, [r7, #14]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004056:	89fb      	ldrh	r3, [r7, #14]
 8004058:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800405c:	4619      	mov	r1, r3
 800405e:	2000      	movs	r0, #0
 8004060:	f001 f936 	bl	80052d0 <pbuf_alloc>
 8004064:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d04b      	beq.n	8004104 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <low_level_input+0x164>)
 800406e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004070:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
 800407a:	e040      	b.n	80040fe <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	895b      	ldrh	r3, [r3, #10]
 8004080:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004086:	e021      	b.n	80040cc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	18d0      	adds	r0, r2, r3
 8004090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	18d1      	adds	r1, r2, r3
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800409c:	3304      	adds	r3, #4
 800409e:	461a      	mov	r2, r3
 80040a0:	f00a f9e0 	bl	800e464 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80040ba:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80040c6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d8d6      	bhi.n	8004088 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	18d0      	adds	r0, r2, r3
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f00a f9ba 	bl	800e464 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1bb      	bne.n	800407c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <low_level_input+0x164>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e00b      	b.n	8004128 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	3301      	adds	r3, #1
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <low_level_input+0x164>)
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d3ee      	bcc.n	8004110 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <low_level_input+0x164>)
 8004134:	2200      	movs	r2, #0
 8004136:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <low_level_input+0x164>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004140:	3314      	adds	r3, #20
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00d      	beq.n	8004168 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <low_level_input+0x164>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004154:	3314      	adds	r3, #20
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <low_level_input+0x164>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	3308      	adds	r3, #8
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800416a:	4618      	mov	r0, r3
 800416c:	3730      	adds	r7, #48	; 0x30
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20001c84 	.word	0x20001c84

08004178 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff45 	bl	8004010 <low_level_input>
 8004186:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d010      	beq.n	80041b0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	4798      	blx	r3
 8004198:	4603      	mov	r3, r0
 800419a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800419c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d006      	beq.n	80041b2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f001 fb77 	bl	8005898 <pbuf_free>
    p = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e000      	b.n	80041b2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80041b0:	bf00      	nop
  }
}
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <ethernetif_init+0x1c>
 80041c6:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <ethernetif_init+0x48>)
 80041c8:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80041cc:	490d      	ldr	r1, [pc, #52]	; (8004204 <ethernetif_init+0x4c>)
 80041ce:	480e      	ldr	r0, [pc, #56]	; (8004208 <ethernetif_init+0x50>)
 80041d0:	f00a f978 	bl	800e4c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2273      	movs	r2, #115	; 0x73
 80041d8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2274      	movs	r2, #116	; 0x74
 80041e0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a09      	ldr	r2, [pc, #36]	; (800420c <ethernetif_init+0x54>)
 80041e8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a08      	ldr	r2, [pc, #32]	; (8004210 <ethernetif_init+0x58>)
 80041ee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff fddb 	bl	8003dac <low_level_init>

  return ERR_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	0800f974 	.word	0x0800f974
 8004204:	0800f990 	.word	0x0800f990
 8004208:	0800f9a0 	.word	0x0800f9a0
 800420c:	0800c6e9 	.word	0x0800c6e9
 8004210:	08003ed5 	.word	0x08003ed5

08004214 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004218:	f7fd f850 	bl	80012bc <HAL_GetTick>
 800421c:	4603      	mov	r3, r0
}
 800421e:	4618      	mov	r0, r3
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d05d      	beq.n	8004302 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004246:	4b34      	ldr	r3, [pc, #208]	; (8004318 <ethernetif_update_config+0xf4>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03f      	beq.n	80042ce <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800424e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004252:	2100      	movs	r1, #0
 8004254:	4830      	ldr	r0, [pc, #192]	; (8004318 <ethernetif_update_config+0xf4>)
 8004256:	f7fd fdbb 	bl	8001dd0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800425a:	f7fd f82f 	bl	80012bc <HAL_GetTick>
 800425e:	4603      	mov	r3, r0
 8004260:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	461a      	mov	r2, r3
 8004268:	2101      	movs	r1, #1
 800426a:	482b      	ldr	r0, [pc, #172]	; (8004318 <ethernetif_update_config+0xf4>)
 800426c:	f7fd fd48 	bl	8001d00 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004270:	f7fd f824 	bl	80012bc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800427e:	d828      	bhi.n	80042d2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0eb      	beq.n	8004262 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	461a      	mov	r2, r3
 8004290:	211f      	movs	r1, #31
 8004292:	4821      	ldr	r0, [pc, #132]	; (8004318 <ethernetif_update_config+0xf4>)
 8004294:	f7fd fd34 	bl	8001d00 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80042a2:	4b1d      	ldr	r3, [pc, #116]	; (8004318 <ethernetif_update_config+0xf4>)
 80042a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	e002      	b.n	80042b2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <ethernetif_update_config+0xf4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80042bc:	4b16      	ldr	r3, [pc, #88]	; (8004318 <ethernetif_update_config+0xf4>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
 80042c2:	e016      	b.n	80042f2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80042c4:	4b14      	ldr	r3, [pc, #80]	; (8004318 <ethernetif_update_config+0xf4>)
 80042c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	e011      	b.n	80042f2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <ethernetif_update_config+0xb0>
          goto error;
 80042d2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <ethernetif_update_config+0xf4>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <ethernetif_update_config+0xf4>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	2100      	movs	r1, #0
 80042ec:	480a      	ldr	r0, [pc, #40]	; (8004318 <ethernetif_update_config+0xf4>)
 80042ee:	f7fd fd6f 	bl	8001dd0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80042f2:	2100      	movs	r1, #0
 80042f4:	4808      	ldr	r0, [pc, #32]	; (8004318 <ethernetif_update_config+0xf4>)
 80042f6:	f7fd fe2f 	bl	8001f58 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80042fa:	4807      	ldr	r0, [pc, #28]	; (8004318 <ethernetif_update_config+0xf4>)
 80042fc:	f7fd fdce 	bl	8001e9c <HAL_ETH_Start>
 8004300:	e002      	b.n	8004308 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004302:	4805      	ldr	r0, [pc, #20]	; (8004318 <ethernetif_update_config+0xf4>)
 8004304:	f7fd fdf9 	bl	8001efa <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f807 	bl	800431c <ethernetif_notify_conn_changed>
}
 800430e:	bf00      	nop
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20001c84 	.word	0x20001c84

0800431c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800433a:	88fb      	ldrh	r3, [r7, #6]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	b21a      	sxth	r2, r3
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	b29b      	uxth	r3, r3
 8004346:	b21b      	sxth	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b21b      	sxth	r3, r3
 800434c:	b29b      	uxth	r3, r3
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	061a      	lsls	r2, r3, #24
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004378:	431a      	orrs	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0e1b      	lsrs	r3, r3, #24
 800437e:	4313      	orrs	r3, r2
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004396:	f000 f8d5 	bl	8004544 <mem_init>
  memp_init();
 800439a:	f000 fbdb 	bl	8004b54 <memp_init>
  pbuf_init();
  netif_init();
 800439e:	f000 fc93 	bl	8004cc8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80043a2:	f007 f84b 	bl	800b43c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80043a6:	f001 fda7 	bl	8005ef8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80043aa:	f006 ffbd 	bl	800b328 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <ptr_to_mem+0x20>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	4413      	add	r3, r2
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000100 	.word	0x20000100

080043dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <mem_to_ptr+0x20>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	b29b      	uxth	r3, r3
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000100 	.word	0x20000100

08004400 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004408:	4b45      	ldr	r3, [pc, #276]	; (8004520 <plug_holes+0x120>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	429a      	cmp	r2, r3
 8004410:	d206      	bcs.n	8004420 <plug_holes+0x20>
 8004412:	4b44      	ldr	r3, [pc, #272]	; (8004524 <plug_holes+0x124>)
 8004414:	f240 12df 	movw	r2, #479	; 0x1df
 8004418:	4943      	ldr	r1, [pc, #268]	; (8004528 <plug_holes+0x128>)
 800441a:	4844      	ldr	r0, [pc, #272]	; (800452c <plug_holes+0x12c>)
 800441c:	f00a f852 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004420:	4b43      	ldr	r3, [pc, #268]	; (8004530 <plug_holes+0x130>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	d306      	bcc.n	8004438 <plug_holes+0x38>
 800442a:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <plug_holes+0x124>)
 800442c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004430:	4940      	ldr	r1, [pc, #256]	; (8004534 <plug_holes+0x134>)
 8004432:	483e      	ldr	r0, [pc, #248]	; (800452c <plug_holes+0x12c>)
 8004434:	f00a f846 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	791b      	ldrb	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d006      	beq.n	800444e <plug_holes+0x4e>
 8004440:	4b38      	ldr	r3, [pc, #224]	; (8004524 <plug_holes+0x124>)
 8004442:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004446:	493c      	ldr	r1, [pc, #240]	; (8004538 <plug_holes+0x138>)
 8004448:	4838      	ldr	r0, [pc, #224]	; (800452c <plug_holes+0x12c>)
 800444a:	f00a f83b 	bl	800e4c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004456:	d906      	bls.n	8004466 <plug_holes+0x66>
 8004458:	4b32      	ldr	r3, [pc, #200]	; (8004524 <plug_holes+0x124>)
 800445a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800445e:	4937      	ldr	r1, [pc, #220]	; (800453c <plug_holes+0x13c>)
 8004460:	4832      	ldr	r0, [pc, #200]	; (800452c <plug_holes+0x12c>)
 8004462:	f00a f82f 	bl	800e4c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff ffa4 	bl	80043b8 <ptr_to_mem>
 8004470:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	429a      	cmp	r2, r3
 8004478:	d024      	beq.n	80044c4 <plug_holes+0xc4>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	791b      	ldrb	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d120      	bne.n	80044c4 <plug_holes+0xc4>
 8004482:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <plug_holes+0x130>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	429a      	cmp	r2, r3
 800448a:	d01b      	beq.n	80044c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800448c:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <plug_holes+0x140>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	429a      	cmp	r2, r3
 8004494:	d102      	bne.n	800449c <plug_holes+0x9c>
      lfree = mem;
 8004496:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <plug_holes+0x140>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	881a      	ldrh	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80044ac:	d00a      	beq.n	80044c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff ff80 	bl	80043b8 <ptr_to_mem>
 80044b8:	4604      	mov	r4, r0
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ff8e 	bl	80043dc <mem_to_ptr>
 80044c0:	4603      	mov	r3, r0
 80044c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	885b      	ldrh	r3, [r3, #2]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff75 	bl	80043b8 <ptr_to_mem>
 80044ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d01f      	beq.n	8004518 <plug_holes+0x118>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	791b      	ldrb	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11b      	bne.n	8004518 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <plug_holes+0x140>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d102      	bne.n	80044f0 <plug_holes+0xf0>
      lfree = pmem;
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <plug_holes+0x140>)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004500:	d00a      	beq.n	8004518 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff ff56 	bl	80043b8 <ptr_to_mem>
 800450c:	4604      	mov	r4, r0
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	f7ff ff64 	bl	80043dc <mem_to_ptr>
 8004514:	4603      	mov	r3, r0
 8004516:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bd90      	pop	{r4, r7, pc}
 8004520:	20000100 	.word	0x20000100
 8004524:	0800f9c8 	.word	0x0800f9c8
 8004528:	0800f9f8 	.word	0x0800f9f8
 800452c:	0800fa10 	.word	0x0800fa10
 8004530:	20000104 	.word	0x20000104
 8004534:	0800fa38 	.word	0x0800fa38
 8004538:	0800fa54 	.word	0x0800fa54
 800453c:	0800fa70 	.word	0x0800fa70
 8004540:	20000108 	.word	0x20000108

08004544 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <mem_init+0x68>)
 800454c:	3303      	adds	r3, #3
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	461a      	mov	r2, r3
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <mem_init+0x6c>)
 8004556:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <mem_init+0x6c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004564:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004572:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004576:	f7ff ff1f 	bl	80043b8 <ptr_to_mem>
 800457a:	4603      	mov	r3, r0
 800457c:	4a0d      	ldr	r2, [pc, #52]	; (80045b4 <mem_init+0x70>)
 800457e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <mem_init+0x70>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2201      	movs	r2, #1
 8004586:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004588:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <mem_init+0x70>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004590:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <mem_init+0x70>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800459a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <mem_init+0x6c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <mem_init+0x74>)
 80045a2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200034b4 	.word	0x200034b4
 80045b0:	20000100 	.word	0x20000100
 80045b4:	20000104 	.word	0x20000104
 80045b8:	20000108 	.word	0x20000108

080045bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff09 	bl	80043dc <mem_to_ptr>
 80045ca:	4603      	mov	r3, r0
 80045cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff fef0 	bl	80043b8 <ptr_to_mem>
 80045d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	885b      	ldrh	r3, [r3, #2]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff feea 	bl	80043b8 <ptr_to_mem>
 80045e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80045ee:	d818      	bhi.n	8004622 <mem_link_valid+0x66>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	885b      	ldrh	r3, [r3, #2]
 80045f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80045f8:	d813      	bhi.n	8004622 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80045fe:	8afa      	ldrh	r2, [r7, #22]
 8004600:	429a      	cmp	r2, r3
 8004602:	d004      	beq.n	800460e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	8afa      	ldrh	r2, [r7, #22]
 800460a:	429a      	cmp	r2, r3
 800460c:	d109      	bne.n	8004622 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <mem_link_valid+0x74>)
 8004610:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	429a      	cmp	r2, r3
 8004616:	d006      	beq.n	8004626 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	885b      	ldrh	r3, [r3, #2]
 800461c:	8afa      	ldrh	r2, [r7, #22]
 800461e:	429a      	cmp	r2, r3
 8004620:	d001      	beq.n	8004626 <mem_link_valid+0x6a>
    return 0;
 8004622:	2300      	movs	r3, #0
 8004624:	e000      	b.n	8004628 <mem_link_valid+0x6c>
  }
  return 1;
 8004626:	2301      	movs	r3, #1
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	20000104 	.word	0x20000104

08004634 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d04c      	beq.n	80046dc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800464c:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <mem_free+0xb0>)
 800464e:	f240 2273 	movw	r2, #627	; 0x273
 8004652:	4925      	ldr	r1, [pc, #148]	; (80046e8 <mem_free+0xb4>)
 8004654:	4825      	ldr	r0, [pc, #148]	; (80046ec <mem_free+0xb8>)
 8004656:	f009 ff35 	bl	800e4c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800465a:	e040      	b.n	80046de <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3b08      	subs	r3, #8
 8004660:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004662:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <mem_free+0xbc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	429a      	cmp	r2, r3
 800466a:	d306      	bcc.n	800467a <mem_free+0x46>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 020c 	add.w	r2, r3, #12
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <mem_free+0xc0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d907      	bls.n	800468a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800467a:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <mem_free+0xb0>)
 800467c:	f240 227f 	movw	r2, #639	; 0x27f
 8004680:	491d      	ldr	r1, [pc, #116]	; (80046f8 <mem_free+0xc4>)
 8004682:	481a      	ldr	r0, [pc, #104]	; (80046ec <mem_free+0xb8>)
 8004684:	f009 ff1e 	bl	800e4c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004688:	e029      	b.n	80046de <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	791b      	ldrb	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d107      	bne.n	80046a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <mem_free+0xb0>)
 8004694:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004698:	4918      	ldr	r1, [pc, #96]	; (80046fc <mem_free+0xc8>)
 800469a:	4814      	ldr	r0, [pc, #80]	; (80046ec <mem_free+0xb8>)
 800469c:	f009 ff12 	bl	800e4c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80046a0:	e01d      	b.n	80046de <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff ff8a 	bl	80045bc <mem_link_valid>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <mem_free+0xb0>)
 80046b0:	f240 2295 	movw	r2, #661	; 0x295
 80046b4:	4912      	ldr	r1, [pc, #72]	; (8004700 <mem_free+0xcc>)
 80046b6:	480d      	ldr	r0, [pc, #52]	; (80046ec <mem_free+0xb8>)
 80046b8:	f009 ff04 	bl	800e4c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80046bc:	e00f      	b.n	80046de <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <mem_free+0xd0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d202      	bcs.n	80046d4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <mem_free+0xd0>)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff fe93 	bl	8004400 <plug_holes>
 80046da:	e000      	b.n	80046de <mem_free+0xaa>
    return;
 80046dc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	0800f9c8 	.word	0x0800f9c8
 80046e8:	0800fa9c 	.word	0x0800fa9c
 80046ec:	0800fa10 	.word	0x0800fa10
 80046f0:	20000100 	.word	0x20000100
 80046f4:	20000104 	.word	0x20000104
 80046f8:	0800fac0 	.word	0x0800fac0
 80046fc:	0800fadc 	.word	0x0800fadc
 8004700:	0800fb04 	.word	0x0800fb04
 8004704:	20000108 	.word	0x20000108

08004708 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004714:	887b      	ldrh	r3, [r7, #2]
 8004716:	3303      	adds	r3, #3
 8004718:	b29b      	uxth	r3, r3
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	2b0b      	cmp	r3, #11
 8004724:	d801      	bhi.n	800472a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004726:	230c      	movs	r3, #12
 8004728:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800472a:	8bfb      	ldrh	r3, [r7, #30]
 800472c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004730:	d803      	bhi.n	800473a <mem_trim+0x32>
 8004732:	8bfa      	ldrh	r2, [r7, #30]
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	429a      	cmp	r2, r3
 8004738:	d201      	bcs.n	800473e <mem_trim+0x36>
    return NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	e0cc      	b.n	80048d8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800473e:	4b68      	ldr	r3, [pc, #416]	; (80048e0 <mem_trim+0x1d8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d304      	bcc.n	8004752 <mem_trim+0x4a>
 8004748:	4b66      	ldr	r3, [pc, #408]	; (80048e4 <mem_trim+0x1dc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d306      	bcc.n	8004760 <mem_trim+0x58>
 8004752:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <mem_trim+0x1e0>)
 8004754:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004758:	4964      	ldr	r1, [pc, #400]	; (80048ec <mem_trim+0x1e4>)
 800475a:	4865      	ldr	r0, [pc, #404]	; (80048f0 <mem_trim+0x1e8>)
 800475c:	f009 feb2 	bl	800e4c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004760:	4b5f      	ldr	r3, [pc, #380]	; (80048e0 <mem_trim+0x1d8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d304      	bcc.n	8004774 <mem_trim+0x6c>
 800476a:	4b5e      	ldr	r3, [pc, #376]	; (80048e4 <mem_trim+0x1dc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d301      	bcc.n	8004778 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	e0af      	b.n	80048d8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3b08      	subs	r3, #8
 800477c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800477e:	69b8      	ldr	r0, [r7, #24]
 8004780:	f7ff fe2c 	bl	80043dc <mem_to_ptr>
 8004784:	4603      	mov	r3, r0
 8004786:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	8afb      	ldrh	r3, [r7, #22]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b08      	subs	r3, #8
 8004794:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004796:	8bfa      	ldrh	r2, [r7, #30]
 8004798:	8abb      	ldrh	r3, [r7, #20]
 800479a:	429a      	cmp	r2, r3
 800479c:	d906      	bls.n	80047ac <mem_trim+0xa4>
 800479e:	4b52      	ldr	r3, [pc, #328]	; (80048e8 <mem_trim+0x1e0>)
 80047a0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80047a4:	4953      	ldr	r1, [pc, #332]	; (80048f4 <mem_trim+0x1ec>)
 80047a6:	4852      	ldr	r0, [pc, #328]	; (80048f0 <mem_trim+0x1e8>)
 80047a8:	f009 fe8c 	bl	800e4c4 <iprintf>
  if (newsize > size) {
 80047ac:	8bfa      	ldrh	r2, [r7, #30]
 80047ae:	8abb      	ldrh	r3, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d901      	bls.n	80047b8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e08f      	b.n	80048d8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80047b8:	8bfa      	ldrh	r2, [r7, #30]
 80047ba:	8abb      	ldrh	r3, [r7, #20]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d101      	bne.n	80047c4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	e089      	b.n	80048d8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fdf5 	bl	80043b8 <ptr_to_mem>
 80047ce:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	791b      	ldrb	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d13f      	bne.n	8004858 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80047e0:	d106      	bne.n	80047f0 <mem_trim+0xe8>
 80047e2:	4b41      	ldr	r3, [pc, #260]	; (80048e8 <mem_trim+0x1e0>)
 80047e4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80047e8:	4943      	ldr	r1, [pc, #268]	; (80048f8 <mem_trim+0x1f0>)
 80047ea:	4841      	ldr	r0, [pc, #260]	; (80048f0 <mem_trim+0x1e8>)
 80047ec:	f009 fe6a 	bl	800e4c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80047f6:	8afa      	ldrh	r2, [r7, #22]
 80047f8:	8bfb      	ldrh	r3, [r7, #30]
 80047fa:	4413      	add	r3, r2
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3308      	adds	r3, #8
 8004800:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004802:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <mem_trim+0x1f4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d106      	bne.n	800481a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fdd2 	bl	80043b8 <ptr_to_mem>
 8004814:	4603      	mov	r3, r0
 8004816:	4a39      	ldr	r2, [pc, #228]	; (80048fc <mem_trim+0x1f4>)
 8004818:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800481a:	89fb      	ldrh	r3, [r7, #14]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fdcb 	bl	80043b8 <ptr_to_mem>
 8004822:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2200      	movs	r2, #0
 8004828:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	89ba      	ldrh	r2, [r7, #12]
 800482e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	8afa      	ldrh	r2, [r7, #22]
 8004834:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	89fa      	ldrh	r2, [r7, #14]
 800483a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004844:	d047      	beq.n	80048d6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fdb4 	bl	80043b8 <ptr_to_mem>
 8004850:	4602      	mov	r2, r0
 8004852:	89fb      	ldrh	r3, [r7, #14]
 8004854:	8053      	strh	r3, [r2, #2]
 8004856:	e03e      	b.n	80048d6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004858:	8bfb      	ldrh	r3, [r7, #30]
 800485a:	f103 0214 	add.w	r2, r3, #20
 800485e:	8abb      	ldrh	r3, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d838      	bhi.n	80048d6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004864:	8afa      	ldrh	r2, [r7, #22]
 8004866:	8bfb      	ldrh	r3, [r7, #30]
 8004868:	4413      	add	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	3308      	adds	r3, #8
 800486e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004878:	d106      	bne.n	8004888 <mem_trim+0x180>
 800487a:	4b1b      	ldr	r3, [pc, #108]	; (80048e8 <mem_trim+0x1e0>)
 800487c:	f240 3216 	movw	r2, #790	; 0x316
 8004880:	491d      	ldr	r1, [pc, #116]	; (80048f8 <mem_trim+0x1f0>)
 8004882:	481b      	ldr	r0, [pc, #108]	; (80048f0 <mem_trim+0x1e8>)
 8004884:	f009 fe1e 	bl	800e4c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004888:	89fb      	ldrh	r3, [r7, #14]
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fd94 	bl	80043b8 <ptr_to_mem>
 8004890:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004892:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <mem_trim+0x1f4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	429a      	cmp	r2, r3
 800489a:	d202      	bcs.n	80048a2 <mem_trim+0x19a>
      lfree = mem2;
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <mem_trim+0x1f4>)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2200      	movs	r2, #0
 80048a6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	8afa      	ldrh	r2, [r7, #22]
 80048b4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	89fa      	ldrh	r2, [r7, #14]
 80048ba:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80048c4:	d007      	beq.n	80048d6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff fd74 	bl	80043b8 <ptr_to_mem>
 80048d0:	4602      	mov	r2, r0
 80048d2:	89fb      	ldrh	r3, [r7, #14]
 80048d4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80048d6:	687b      	ldr	r3, [r7, #4]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3720      	adds	r7, #32
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000100 	.word	0x20000100
 80048e4:	20000104 	.word	0x20000104
 80048e8:	0800f9c8 	.word	0x0800f9c8
 80048ec:	0800fb38 	.word	0x0800fb38
 80048f0:	0800fa10 	.word	0x0800fa10
 80048f4:	0800fb50 	.word	0x0800fb50
 80048f8:	0800fb70 	.word	0x0800fb70
 80048fc:	20000108 	.word	0x20000108

08004900 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <mem_malloc+0x14>
    return NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	e0d9      	b.n	8004ac8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004914:	88fb      	ldrh	r3, [r7, #6]
 8004916:	3303      	adds	r3, #3
 8004918:	b29b      	uxth	r3, r3
 800491a:	f023 0303 	bic.w	r3, r3, #3
 800491e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004920:	8bbb      	ldrh	r3, [r7, #28]
 8004922:	2b0b      	cmp	r3, #11
 8004924:	d801      	bhi.n	800492a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004926:	230c      	movs	r3, #12
 8004928:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800492a:	8bbb      	ldrh	r3, [r7, #28]
 800492c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004930:	d803      	bhi.n	800493a <mem_malloc+0x3a>
 8004932:	8bba      	ldrh	r2, [r7, #28]
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	429a      	cmp	r2, r3
 8004938:	d201      	bcs.n	800493e <mem_malloc+0x3e>
    return NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	e0c4      	b.n	8004ac8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800493e:	4b64      	ldr	r3, [pc, #400]	; (8004ad0 <mem_malloc+0x1d0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fd4a 	bl	80043dc <mem_to_ptr>
 8004948:	4603      	mov	r3, r0
 800494a:	83fb      	strh	r3, [r7, #30]
 800494c:	e0b4      	b.n	8004ab8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800494e:	8bfb      	ldrh	r3, [r7, #30]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fd31 	bl	80043b8 <ptr_to_mem>
 8004956:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	791b      	ldrb	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 80a4 	bne.w	8004aaa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	8bfb      	ldrh	r3, [r7, #30]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f1a3 0208 	sub.w	r2, r3, #8
 8004970:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004972:	429a      	cmp	r2, r3
 8004974:	f0c0 8099 	bcc.w	8004aaa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	8bfb      	ldrh	r3, [r7, #30]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f1a3 0208 	sub.w	r2, r3, #8
 8004986:	8bbb      	ldrh	r3, [r7, #28]
 8004988:	3314      	adds	r3, #20
 800498a:	429a      	cmp	r2, r3
 800498c:	d333      	bcc.n	80049f6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800498e:	8bfa      	ldrh	r2, [r7, #30]
 8004990:	8bbb      	ldrh	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	b29b      	uxth	r3, r3
 8004996:	3308      	adds	r3, #8
 8004998:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800499a:	8a7b      	ldrh	r3, [r7, #18]
 800499c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80049a0:	d106      	bne.n	80049b0 <mem_malloc+0xb0>
 80049a2:	4b4c      	ldr	r3, [pc, #304]	; (8004ad4 <mem_malloc+0x1d4>)
 80049a4:	f240 3287 	movw	r2, #903	; 0x387
 80049a8:	494b      	ldr	r1, [pc, #300]	; (8004ad8 <mem_malloc+0x1d8>)
 80049aa:	484c      	ldr	r0, [pc, #304]	; (8004adc <mem_malloc+0x1dc>)
 80049ac:	f009 fd8a 	bl	800e4c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80049b0:	8a7b      	ldrh	r3, [r7, #18]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fd00 	bl	80043b8 <ptr_to_mem>
 80049b8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	881a      	ldrh	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8bfa      	ldrh	r2, [r7, #30]
 80049cc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	8a7a      	ldrh	r2, [r7, #18]
 80049d2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2201      	movs	r2, #1
 80049d8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80049e2:	d00b      	beq.n	80049fc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fce5 	bl	80043b8 <ptr_to_mem>
 80049ee:	4602      	mov	r2, r0
 80049f0:	8a7b      	ldrh	r3, [r7, #18]
 80049f2:	8053      	strh	r3, [r2, #2]
 80049f4:	e002      	b.n	80049fc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2201      	movs	r2, #1
 80049fa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80049fc:	4b34      	ldr	r3, [pc, #208]	; (8004ad0 <mem_malloc+0x1d0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d127      	bne.n	8004a56 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004a06:	4b32      	ldr	r3, [pc, #200]	; (8004ad0 <mem_malloc+0x1d0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004a0c:	e005      	b.n	8004a1a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fcd0 	bl	80043b8 <ptr_to_mem>
 8004a18:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	791b      	ldrb	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d004      	beq.n	8004a2c <mem_malloc+0x12c>
 8004a22:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <mem_malloc+0x1e0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1f0      	bne.n	8004a0e <mem_malloc+0x10e>
          }
          lfree = cur;
 8004a2c:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <mem_malloc+0x1d0>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004a32:	4b27      	ldr	r3, [pc, #156]	; (8004ad0 <mem_malloc+0x1d0>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <mem_malloc+0x1e0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d00b      	beq.n	8004a56 <mem_malloc+0x156>
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <mem_malloc+0x1d0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <mem_malloc+0x156>
 8004a48:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <mem_malloc+0x1d4>)
 8004a4a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004a4e:	4925      	ldr	r1, [pc, #148]	; (8004ae4 <mem_malloc+0x1e4>)
 8004a50:	4822      	ldr	r0, [pc, #136]	; (8004adc <mem_malloc+0x1dc>)
 8004a52:	f009 fd37 	bl	800e4c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004a56:	8bba      	ldrh	r2, [r7, #28]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	4a20      	ldr	r2, [pc, #128]	; (8004ae0 <mem_malloc+0x1e0>)
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d906      	bls.n	8004a74 <mem_malloc+0x174>
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <mem_malloc+0x1d4>)
 8004a68:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004a6c:	491e      	ldr	r1, [pc, #120]	; (8004ae8 <mem_malloc+0x1e8>)
 8004a6e:	481b      	ldr	r0, [pc, #108]	; (8004adc <mem_malloc+0x1dc>)
 8004a70:	f009 fd28 	bl	800e4c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d006      	beq.n	8004a8c <mem_malloc+0x18c>
 8004a7e:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <mem_malloc+0x1d4>)
 8004a80:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004a84:	4919      	ldr	r1, [pc, #100]	; (8004aec <mem_malloc+0x1ec>)
 8004a86:	4815      	ldr	r0, [pc, #84]	; (8004adc <mem_malloc+0x1dc>)
 8004a88:	f009 fd1c 	bl	800e4c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d006      	beq.n	8004aa4 <mem_malloc+0x1a4>
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <mem_malloc+0x1d4>)
 8004a98:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004a9c:	4914      	ldr	r1, [pc, #80]	; (8004af0 <mem_malloc+0x1f0>)
 8004a9e:	480f      	ldr	r0, [pc, #60]	; (8004adc <mem_malloc+0x1dc>)
 8004aa0:	f009 fd10 	bl	800e4c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	e00e      	b.n	8004ac8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004aaa:	8bfb      	ldrh	r3, [r7, #30]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fc83 	bl	80043b8 <ptr_to_mem>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004ab8:	8bfa      	ldrh	r2, [r7, #30]
 8004aba:	8bbb      	ldrh	r3, [r7, #28]
 8004abc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	f4ff af44 	bcc.w	800494e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000108 	.word	0x20000108
 8004ad4:	0800f9c8 	.word	0x0800f9c8
 8004ad8:	0800fb70 	.word	0x0800fb70
 8004adc:	0800fa10 	.word	0x0800fa10
 8004ae0:	20000104 	.word	0x20000104
 8004ae4:	0800fb84 	.word	0x0800fb84
 8004ae8:	0800fba0 	.word	0x0800fba0
 8004aec:	0800fbd0 	.word	0x0800fbd0
 8004af0:	0800fc00 	.word	0x0800fc00

08004af4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	3303      	adds	r3, #3
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e011      	b.n	8004b3a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	885b      	ldrh	r3, [r3, #2]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4293      	cmp	r3, r2
 8004b44:	dbe7      	blt.n	8004b16 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	80fb      	strh	r3, [r7, #6]
 8004b5e:	e009      	b.n	8004b74 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <memp_init+0x30>)
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff ffc3 	bl	8004af4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	3301      	adds	r3, #1
 8004b72:	80fb      	strh	r3, [r7, #6]
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d9f2      	bls.n	8004b60 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004b7a:	bf00      	nop
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	080123d0 	.word	0x080123d0

08004b88 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d012      	beq.n	8004bc4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d006      	beq.n	8004bc0 <do_memp_malloc_pool+0x38>
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <do_memp_malloc_pool+0x48>)
 8004bb4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004bb8:	4906      	ldr	r1, [pc, #24]	; (8004bd4 <do_memp_malloc_pool+0x4c>)
 8004bba:	4807      	ldr	r0, [pc, #28]	; (8004bd8 <do_memp_malloc_pool+0x50>)
 8004bbc:	f009 fc82 	bl	800e4c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	e000      	b.n	8004bc6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	0800fc24 	.word	0x0800fc24
 8004bd4:	0800fc54 	.word	0x0800fc54
 8004bd8:	0800fc78 	.word	0x0800fc78

08004bdc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d908      	bls.n	8004bfe <memp_malloc+0x22>
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <memp_malloc+0x3c>)
 8004bee:	f240 1257 	movw	r2, #343	; 0x157
 8004bf2:	490a      	ldr	r1, [pc, #40]	; (8004c1c <memp_malloc+0x40>)
 8004bf4:	480a      	ldr	r0, [pc, #40]	; (8004c20 <memp_malloc+0x44>)
 8004bf6:	f009 fc65 	bl	800e4c4 <iprintf>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	e008      	b.n	8004c10 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <memp_malloc+0x48>)
 8004c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff ffbe 	bl	8004b88 <do_memp_malloc_pool>
 8004c0c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	0800fc24 	.word	0x0800fc24
 8004c1c:	0800fcb4 	.word	0x0800fcb4
 8004c20:	0800fc78 	.word	0x0800fc78
 8004c24:	080123d0 	.word	0x080123d0

08004c28 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d006      	beq.n	8004c4a <do_memp_free_pool+0x22>
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <do_memp_free_pool+0x40>)
 8004c3e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004c42:	490a      	ldr	r1, [pc, #40]	; (8004c6c <do_memp_free_pool+0x44>)
 8004c44:	480a      	ldr	r0, [pc, #40]	; (8004c70 <do_memp_free_pool+0x48>)
 8004c46:	f009 fc3d 	bl	800e4c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	0800fc24 	.word	0x0800fc24
 8004c6c:	0800fcd4 	.word	0x0800fcd4
 8004c70:	0800fc78 	.word	0x0800fc78

08004c74 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	6039      	str	r1, [r7, #0]
 8004c7e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d907      	bls.n	8004c96 <memp_free+0x22>
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <memp_free+0x44>)
 8004c88:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004c8c:	490b      	ldr	r1, [pc, #44]	; (8004cbc <memp_free+0x48>)
 8004c8e:	480c      	ldr	r0, [pc, #48]	; (8004cc0 <memp_free+0x4c>)
 8004c90:	f009 fc18 	bl	800e4c4 <iprintf>
 8004c94:	e00c      	b.n	8004cb0 <memp_free+0x3c>

  if (mem == NULL) {
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <memp_free+0x50>)
 8004ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ffbe 	bl	8004c28 <do_memp_free_pool>
 8004cac:	e000      	b.n	8004cb0 <memp_free+0x3c>
    return;
 8004cae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	0800fc24 	.word	0x0800fc24
 8004cbc:	0800fcf4 	.word	0x0800fcf4
 8004cc0:	0800fc78 	.word	0x0800fc78
 8004cc4:	080123d0 	.word	0x080123d0

08004cc8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004ccc:	bf00      	nop
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d108      	bne.n	8004cfe <netif_add+0x26>
 8004cec:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <netif_add+0x174>)
 8004cee:	f240 1227 	movw	r2, #295	; 0x127
 8004cf2:	4957      	ldr	r1, [pc, #348]	; (8004e50 <netif_add+0x178>)
 8004cf4:	4857      	ldr	r0, [pc, #348]	; (8004e54 <netif_add+0x17c>)
 8004cf6:	f009 fbe5 	bl	800e4c4 <iprintf>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e0a2      	b.n	8004e44 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d108      	bne.n	8004d16 <netif_add+0x3e>
 8004d04:	4b51      	ldr	r3, [pc, #324]	; (8004e4c <netif_add+0x174>)
 8004d06:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004d0a:	4953      	ldr	r1, [pc, #332]	; (8004e58 <netif_add+0x180>)
 8004d0c:	4851      	ldr	r0, [pc, #324]	; (8004e54 <netif_add+0x17c>)
 8004d0e:	f009 fbd9 	bl	800e4c4 <iprintf>
 8004d12:	2300      	movs	r3, #0
 8004d14:	e096      	b.n	8004e44 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004d1c:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <netif_add+0x184>)
 8004d1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004d26:	4b4d      	ldr	r3, [pc, #308]	; (8004e5c <netif_add+0x184>)
 8004d28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004d30:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <netif_add+0x184>)
 8004d32:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a45      	ldr	r2, [pc, #276]	; (8004e60 <netif_add+0x188>)
 8004d4a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a3a      	ldr	r2, [r7, #32]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 8004d66:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <netif_add+0x18c>)
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d74:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f913 	bl	8004fa8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	4798      	blx	r3
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <netif_add+0xba>
    return NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e058      	b.n	8004e44 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d98:	2bff      	cmp	r3, #255	; 0xff
 8004d9a:	d103      	bne.n	8004da4 <netif_add+0xcc>
        netif->num = 0;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004da8:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <netif_add+0x190>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e02b      	b.n	8004e08 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d106      	bne.n	8004dc6 <netif_add+0xee>
 8004db8:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <netif_add+0x174>)
 8004dba:	f240 128b 	movw	r2, #395	; 0x18b
 8004dbe:	492b      	ldr	r1, [pc, #172]	; (8004e6c <netif_add+0x194>)
 8004dc0:	4824      	ldr	r0, [pc, #144]	; (8004e54 <netif_add+0x17c>)
 8004dc2:	f009 fb7f 	bl	800e4c4 <iprintf>
        num_netifs++;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2bff      	cmp	r3, #255	; 0xff
 8004dd0:	dd06      	ble.n	8004de0 <netif_add+0x108>
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <netif_add+0x174>)
 8004dd4:	f240 128d 	movw	r2, #397	; 0x18d
 8004dd8:	4925      	ldr	r1, [pc, #148]	; (8004e70 <netif_add+0x198>)
 8004dda:	481e      	ldr	r0, [pc, #120]	; (8004e54 <netif_add+0x17c>)
 8004ddc:	f009 fb72 	bl	800e4c4 <iprintf>
        if (netif2->num == netif->num) {
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d108      	bne.n	8004e02 <netif_add+0x12a>
          netif->num++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004df6:	3301      	adds	r3, #1
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8004e00:	e005      	b.n	8004e0e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1d0      	bne.n	8004db0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1be      	bne.n	8004d92 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e1a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e1c:	d103      	bne.n	8004e26 <netif_add+0x14e>
    netif_num = 0;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <netif_add+0x18c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e006      	b.n	8004e34 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <netif_add+0x18c>)
 8004e32:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <netif_add+0x190>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004e3c:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <netif_add+0x190>)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004e42:	68fb      	ldr	r3, [r7, #12]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	0800fd10 	.word	0x0800fd10
 8004e50:	0800fda4 	.word	0x0800fda4
 8004e54:	0800fd60 	.word	0x0800fd60
 8004e58:	0800fdc0 	.word	0x0800fdc0
 8004e5c:	08012434 	.word	0x08012434
 8004e60:	080051bb 	.word	0x080051bb
 8004e64:	20000130 	.word	0x20000130
 8004e68:	20008b90 	.word	0x20008b90
 8004e6c:	0800fde4 	.word	0x0800fde4
 8004e70:	0800fdf8 	.word	0x0800fdf8

08004e74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f002 fb81 	bl	8007588 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f006 ffb1 	bl	800bdf0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <netif_do_set_ipaddr+0x20>
 8004eaa:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <netif_do_set_ipaddr+0x88>)
 8004eac:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004eb0:	491c      	ldr	r1, [pc, #112]	; (8004f24 <netif_do_set_ipaddr+0x8c>)
 8004eb2:	481d      	ldr	r0, [pc, #116]	; (8004f28 <netif_do_set_ipaddr+0x90>)
 8004eb4:	f009 fb06 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <netif_do_set_ipaddr+0x34>
 8004ebe:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <netif_do_set_ipaddr+0x88>)
 8004ec0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004ec4:	4917      	ldr	r1, [pc, #92]	; (8004f24 <netif_do_set_ipaddr+0x8c>)
 8004ec6:	4818      	ldr	r0, [pc, #96]	; (8004f28 <netif_do_set_ipaddr+0x90>)
 8004ec8:	f009 fafc 	bl	800e4c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d01c      	beq.n	8004f14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004eea:	f107 0314 	add.w	r3, r7, #20
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ffbf 	bl	8004e74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <netif_do_set_ipaddr+0x6a>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	e000      	b.n	8004f04 <netif_do_set_ipaddr+0x6c>
 8004f02:	2300      	movs	r3, #0
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004f08:	2101      	movs	r1, #1
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f8d2 	bl	80050b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	0800fd10 	.word	0x0800fd10
 8004f24:	0800fe28 	.word	0x0800fe28
 8004f28:	0800fd60 	.word	0x0800fd60

08004f2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d00a      	beq.n	8004f5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <netif_do_set_netmask+0x26>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	e000      	b.n	8004f54 <netif_do_set_netmask+0x28>
 8004f52:	2300      	movs	r3, #0
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d00a      	beq.n	8004f9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <netif_do_set_gw+0x26>
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	e000      	b.n	8004f92 <netif_do_set_gw+0x28>
 8004f90:	2300      	movs	r3, #0
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004fc4:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <netif_set_addr+0x90>)
 8004fc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004fce:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <netif_set_addr+0x90>)
 8004fd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004fd8:	4b17      	ldr	r3, [pc, #92]	; (8005038 <netif_set_addr+0x90>)
 8004fda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <netif_set_addr+0x42>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <netif_set_addr+0x46>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <netif_set_addr+0x48>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d006      	beq.n	8005006 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004ff8:	f107 0310 	add.w	r3, r7, #16
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff49 	bl	8004e98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ff8e 	bl	8004f2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7ff ffa8 	bl	8004f6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	461a      	mov	r2, r3
 8005026:	68b9      	ldr	r1, [r7, #8]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ff35 	bl	8004e98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800502e:	bf00      	nop
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	08012434 	.word	0x08012434

0800503c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <netif_set_default+0x1c>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20008b94 	.word	0x20008b94

0800505c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d107      	bne.n	800507a <netif_set_up+0x1e>
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <netif_set_up+0x4c>)
 800506c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005070:	490e      	ldr	r1, [pc, #56]	; (80050ac <netif_set_up+0x50>)
 8005072:	480f      	ldr	r0, [pc, #60]	; (80050b0 <netif_set_up+0x54>)
 8005074:	f009 fa26 	bl	800e4c4 <iprintf>
 8005078:	e013      	b.n	80050a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10c      	bne.n	80050a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800509a:	2103      	movs	r1, #3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f809 	bl	80050b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	0800fd10 	.word	0x0800fd10
 80050ac:	0800fe98 	.word	0x0800fe98
 80050b0:	0800fd60 	.word	0x0800fd60

080050b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <netif_issue_reports+0x20>
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <netif_issue_reports+0x74>)
 80050c8:	f240 326d 	movw	r2, #877	; 0x36d
 80050cc:	4917      	ldr	r1, [pc, #92]	; (800512c <netif_issue_reports+0x78>)
 80050ce:	4818      	ldr	r0, [pc, #96]	; (8005130 <netif_issue_reports+0x7c>)
 80050d0:	f009 f9f8 	bl	800e4c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01e      	beq.n	8005120 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80050e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d013      	beq.n	8005122 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f007 fdd3 	bl	800ccc4 <etharp_request>
 800511e:	e000      	b.n	8005122 <netif_issue_reports+0x6e>
    return;
 8005120:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	0800fd10 	.word	0x0800fd10
 800512c:	0800feb4 	.word	0x0800feb4
 8005130:	0800fd60 	.word	0x0800fd60

08005134 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <netif_set_down+0x1e>
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <netif_set_down+0x58>)
 8005144:	f240 329b 	movw	r2, #923	; 0x39b
 8005148:	4911      	ldr	r1, [pc, #68]	; (8005190 <netif_set_down+0x5c>)
 800514a:	4812      	ldr	r0, [pc, #72]	; (8005194 <netif_set_down+0x60>)
 800514c:	f009 f9ba 	bl	800e4c4 <iprintf>
 8005150:	e019      	b.n	8005186 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d012      	beq.n	8005186 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	b2da      	uxtb	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f007 f95d 	bl	800c440 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	0800fd10 	.word	0x0800fd10
 8005190:	0800fed8 	.word	0x0800fed8
 8005194:	0800fd60 	.word	0x0800fd60

08005198 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	61da      	str	r2, [r3, #28]
  }
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b085      	sub	sp, #20
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80051c6:	f06f 030b 	mvn.w	r3, #11
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d013      	beq.n	8005210 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <netif_get_by_index+0x48>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	e00c      	b.n	800520a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051f6:	3301      	adds	r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	79fa      	ldrb	r2, [r7, #7]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d101      	bne.n	8005204 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	e006      	b.n	8005212 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1ef      	bne.n	80051f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20008b90 	.word	0x20008b90

08005224 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <pbuf_free_ooseq+0x38>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <pbuf_free_ooseq+0x3c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	607b      	str	r3, [r7, #4]
 8005236:	e00a      	b.n	800524e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f002 f9df 	bl	8007604 <tcp_free_ooseq>
      return;
 8005246:	e005      	b.n	8005254 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f1      	bne.n	8005238 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20008b98 	.word	0x20008b98
 8005260:	20008ba0 	.word	0x20008ba0

08005264 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005268:	4b03      	ldr	r3, [pc, #12]	; (8005278 <pbuf_pool_is_empty+0x14>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800526e:	bf00      	nop
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20008b98 	.word	0x20008b98

0800527c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4611      	mov	r1, r2
 8005288:	461a      	mov	r2, r3
 800528a:	460b      	mov	r3, r1
 800528c:	80fb      	strh	r3, [r7, #6]
 800528e:	4613      	mov	r3, r2
 8005290:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88ba      	ldrh	r2, [r7, #4]
 80052a8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80052aa:	8b3b      	ldrh	r3, [r7, #24]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	7f3a      	ldrb	r2, [r7, #28]
 80052b6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	73da      	strb	r2, [r3, #15]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	; 0x30
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	4603      	mov	r3, r0
 80052d8:	71fb      	strb	r3, [r7, #7]
 80052da:	460b      	mov	r3, r1
 80052dc:	80bb      	strh	r3, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80052e6:	887b      	ldrh	r3, [r7, #2]
 80052e8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80052ec:	d07f      	beq.n	80053ee <pbuf_alloc+0x11e>
 80052ee:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80052f2:	f300 80c8 	bgt.w	8005486 <pbuf_alloc+0x1b6>
 80052f6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80052fa:	d010      	beq.n	800531e <pbuf_alloc+0x4e>
 80052fc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005300:	f300 80c1 	bgt.w	8005486 <pbuf_alloc+0x1b6>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d002      	beq.n	800530e <pbuf_alloc+0x3e>
 8005308:	2b41      	cmp	r3, #65	; 0x41
 800530a:	f040 80bc 	bne.w	8005486 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	88bb      	ldrh	r3, [r7, #4]
 8005312:	4619      	mov	r1, r3
 8005314:	2000      	movs	r0, #0
 8005316:	f000 f8d1 	bl	80054bc <pbuf_alloc_reference>
 800531a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800531c:	e0bd      	b.n	800549a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005326:	88bb      	ldrh	r3, [r7, #4]
 8005328:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800532a:	2008      	movs	r0, #8
 800532c:	f7ff fc56 	bl	8004bdc <memp_malloc>
 8005330:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d109      	bne.n	800534c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005338:	f7ff ff94 	bl	8005264 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005344:	f000 faa8 	bl	8005898 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	e0a7      	b.n	800549c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800534c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800534e:	3303      	adds	r3, #3
 8005350:	b29b      	uxth	r3, r3
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	b29b      	uxth	r3, r3
 8005358:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800535c:	b29b      	uxth	r3, r3
 800535e:	8b7a      	ldrh	r2, [r7, #26]
 8005360:	4293      	cmp	r3, r2
 8005362:	bf28      	it	cs
 8005364:	4613      	movcs	r3, r2
 8005366:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800536a:	3310      	adds	r3, #16
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	3303      	adds	r3, #3
 8005372:	f023 0303 	bic.w	r3, r3, #3
 8005376:	4618      	mov	r0, r3
 8005378:	89f9      	ldrh	r1, [r7, #14]
 800537a:	8b7a      	ldrh	r2, [r7, #26]
 800537c:	2300      	movs	r3, #0
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	887b      	ldrh	r3, [r7, #2]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	460b      	mov	r3, r1
 8005386:	4601      	mov	r1, r0
 8005388:	6938      	ldr	r0, [r7, #16]
 800538a:	f7ff ff77 	bl	800527c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d006      	beq.n	80053a8 <pbuf_alloc+0xd8>
 800539a:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <pbuf_alloc+0x1d4>)
 800539c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a0:	4941      	ldr	r1, [pc, #260]	; (80054a8 <pbuf_alloc+0x1d8>)
 80053a2:	4842      	ldr	r0, [pc, #264]	; (80054ac <pbuf_alloc+0x1dc>)
 80053a4:	f009 f88e 	bl	800e4c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80053a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053aa:	3303      	adds	r3, #3
 80053ac:	f023 0303 	bic.w	r3, r3, #3
 80053b0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80053b4:	d106      	bne.n	80053c4 <pbuf_alloc+0xf4>
 80053b6:	4b3b      	ldr	r3, [pc, #236]	; (80054a4 <pbuf_alloc+0x1d4>)
 80053b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80053bc:	493c      	ldr	r1, [pc, #240]	; (80054b0 <pbuf_alloc+0x1e0>)
 80053be:	483b      	ldr	r0, [pc, #236]	; (80054ac <pbuf_alloc+0x1dc>)
 80053c0:	f009 f880 	bl	800e4c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	e002      	b.n	80053d6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80053da:	8b7a      	ldrh	r2, [r7, #26]
 80053dc:	89fb      	ldrh	r3, [r7, #14]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80053e6:	8b7b      	ldrh	r3, [r7, #26]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d19e      	bne.n	800532a <pbuf_alloc+0x5a>
      break;
 80053ec:	e055      	b.n	800549a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80053ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053f0:	3303      	adds	r3, #3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f023 0303 	bic.w	r3, r3, #3
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	88bb      	ldrh	r3, [r7, #4]
 80053fc:	3303      	adds	r3, #3
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f023 0303 	bic.w	r3, r3, #3
 8005404:	b29b      	uxth	r3, r3
 8005406:	4413      	add	r3, r2
 8005408:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800540a:	8b3b      	ldrh	r3, [r7, #24]
 800540c:	3310      	adds	r3, #16
 800540e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005410:	8b3a      	ldrh	r2, [r7, #24]
 8005412:	88bb      	ldrh	r3, [r7, #4]
 8005414:	3303      	adds	r3, #3
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	429a      	cmp	r2, r3
 800541c:	d306      	bcc.n	800542c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800541e:	8afa      	ldrh	r2, [r7, #22]
 8005420:	88bb      	ldrh	r3, [r7, #4]
 8005422:	3303      	adds	r3, #3
 8005424:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d201      	bcs.n	8005430 <pbuf_alloc+0x160>
        return NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	e035      	b.n	800549c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005430:	8afb      	ldrh	r3, [r7, #22]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fa64 	bl	8004900 <mem_malloc>
 8005438:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <pbuf_alloc+0x174>
        return NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	e02b      	b.n	800549c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005446:	3310      	adds	r3, #16
 8005448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544a:	4413      	add	r3, r2
 800544c:	3303      	adds	r3, #3
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	4618      	mov	r0, r3
 8005454:	88b9      	ldrh	r1, [r7, #4]
 8005456:	88ba      	ldrh	r2, [r7, #4]
 8005458:	2300      	movs	r3, #0
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	887b      	ldrh	r3, [r7, #2]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	460b      	mov	r3, r1
 8005462:	4601      	mov	r1, r0
 8005464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005466:	f7ff ff09 	bl	800527c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <pbuf_alloc+0x1c8>
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <pbuf_alloc+0x1d4>)
 8005478:	f44f 7291 	mov.w	r2, #290	; 0x122
 800547c:	490d      	ldr	r1, [pc, #52]	; (80054b4 <pbuf_alloc+0x1e4>)
 800547e:	480b      	ldr	r0, [pc, #44]	; (80054ac <pbuf_alloc+0x1dc>)
 8005480:	f009 f820 	bl	800e4c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005484:	e008      	b.n	8005498 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <pbuf_alloc+0x1d4>)
 8005488:	f240 1227 	movw	r2, #295	; 0x127
 800548c:	490a      	ldr	r1, [pc, #40]	; (80054b8 <pbuf_alloc+0x1e8>)
 800548e:	4807      	ldr	r0, [pc, #28]	; (80054ac <pbuf_alloc+0x1dc>)
 8005490:	f009 f818 	bl	800e4c4 <iprintf>
      return NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	e001      	b.n	800549c <pbuf_alloc+0x1cc>
      break;
 8005498:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800549c:	4618      	mov	r0, r3
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	0800ff40 	.word	0x0800ff40
 80054a8:	0800ff70 	.word	0x0800ff70
 80054ac:	0800ffa0 	.word	0x0800ffa0
 80054b0:	0800ffc8 	.word	0x0800ffc8
 80054b4:	0800fffc 	.word	0x0800fffc
 80054b8:	08010028 	.word	0x08010028

080054bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	807b      	strh	r3, [r7, #2]
 80054c8:	4613      	mov	r3, r2
 80054ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80054cc:	883b      	ldrh	r3, [r7, #0]
 80054ce:	2b41      	cmp	r3, #65	; 0x41
 80054d0:	d009      	beq.n	80054e6 <pbuf_alloc_reference+0x2a>
 80054d2:	883b      	ldrh	r3, [r7, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d006      	beq.n	80054e6 <pbuf_alloc_reference+0x2a>
 80054d8:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <pbuf_alloc_reference+0x5c>)
 80054da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80054de:	490f      	ldr	r1, [pc, #60]	; (800551c <pbuf_alloc_reference+0x60>)
 80054e0:	480f      	ldr	r0, [pc, #60]	; (8005520 <pbuf_alloc_reference+0x64>)
 80054e2:	f008 ffef 	bl	800e4c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80054e6:	2007      	movs	r0, #7
 80054e8:	f7ff fb78 	bl	8004bdc <memp_malloc>
 80054ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	e00b      	b.n	8005510 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80054f8:	8879      	ldrh	r1, [r7, #2]
 80054fa:	887a      	ldrh	r2, [r7, #2]
 80054fc:	2300      	movs	r3, #0
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	883b      	ldrh	r3, [r7, #0]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	460b      	mov	r3, r1
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff feb7 	bl	800527c <pbuf_init_alloced_pbuf>
  return p;
 800550e:	68fb      	ldr	r3, [r7, #12]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	0800ff40 	.word	0x0800ff40
 800551c:	08010044 	.word	0x08010044
 8005520:	0800ffa0 	.word	0x0800ffa0

08005524 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	4603      	mov	r3, r0
 800552e:	73fb      	strb	r3, [r7, #15]
 8005530:	460b      	mov	r3, r1
 8005532:	81bb      	strh	r3, [r7, #12]
 8005534:	4613      	mov	r3, r2
 8005536:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800553c:	8a7b      	ldrh	r3, [r7, #18]
 800553e:	3303      	adds	r3, #3
 8005540:	f023 0203 	bic.w	r2, r3, #3
 8005544:	89bb      	ldrh	r3, [r7, #12]
 8005546:	441a      	add	r2, r3
 8005548:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800554a:	429a      	cmp	r2, r3
 800554c:	d901      	bls.n	8005552 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	e018      	b.n	8005584 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005558:	8a7b      	ldrh	r3, [r7, #18]
 800555a:	3303      	adds	r3, #3
 800555c:	f023 0303 	bic.w	r3, r3, #3
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	4413      	add	r3, r2
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e001      	b.n	800556c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	89b9      	ldrh	r1, [r7, #12]
 8005570:	89ba      	ldrh	r2, [r7, #12]
 8005572:	2302      	movs	r3, #2
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	897b      	ldrh	r3, [r7, #10]
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	460b      	mov	r3, r1
 800557c:	6979      	ldr	r1, [r7, #20]
 800557e:	f7ff fe7d 	bl	800527c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005582:	687b      	ldr	r3, [r7, #4]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <pbuf_realloc+0x20>
 800559e:	4b3a      	ldr	r3, [pc, #232]	; (8005688 <pbuf_realloc+0xfc>)
 80055a0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80055a4:	4939      	ldr	r1, [pc, #228]	; (800568c <pbuf_realloc+0x100>)
 80055a6:	483a      	ldr	r0, [pc, #232]	; (8005690 <pbuf_realloc+0x104>)
 80055a8:	f008 ff8c 	bl	800e4c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	891b      	ldrh	r3, [r3, #8]
 80055b0:	887a      	ldrh	r2, [r7, #2]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d263      	bcs.n	800567e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	891a      	ldrh	r2, [r3, #8]
 80055ba:	887b      	ldrh	r3, [r7, #2]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80055c0:	887b      	ldrh	r3, [r7, #2]
 80055c2:	817b      	strh	r3, [r7, #10]
  q = p;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80055c8:	e018      	b.n	80055fc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	895b      	ldrh	r3, [r3, #10]
 80055ce:	897a      	ldrh	r2, [r7, #10]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	891a      	ldrh	r2, [r3, #8]
 80055d8:	893b      	ldrh	r3, [r7, #8]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <pbuf_realloc+0x70>
 80055ee:	4b26      	ldr	r3, [pc, #152]	; (8005688 <pbuf_realloc+0xfc>)
 80055f0:	f240 12af 	movw	r2, #431	; 0x1af
 80055f4:	4927      	ldr	r1, [pc, #156]	; (8005694 <pbuf_realloc+0x108>)
 80055f6:	4826      	ldr	r0, [pc, #152]	; (8005690 <pbuf_realloc+0x104>)
 80055f8:	f008 ff64 	bl	800e4c4 <iprintf>
  while (rem_len > q->len) {
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	895b      	ldrh	r3, [r3, #10]
 8005600:	897a      	ldrh	r2, [r7, #10]
 8005602:	429a      	cmp	r2, r3
 8005604:	d8e1      	bhi.n	80055ca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	7b1b      	ldrb	r3, [r3, #12]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	2b00      	cmp	r3, #0
 8005610:	d121      	bne.n	8005656 <pbuf_realloc+0xca>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	895b      	ldrh	r3, [r3, #10]
 8005616:	897a      	ldrh	r2, [r7, #10]
 8005618:	429a      	cmp	r2, r3
 800561a:	d01c      	beq.n	8005656 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	7b5b      	ldrb	r3, [r3, #13]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d116      	bne.n	8005656 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	b29a      	uxth	r2, r3
 8005632:	897b      	ldrh	r3, [r7, #10]
 8005634:	4413      	add	r3, r2
 8005636:	b29b      	uxth	r3, r3
 8005638:	4619      	mov	r1, r3
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff f864 	bl	8004708 <mem_trim>
 8005640:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <pbuf_realloc+0xca>
 8005648:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <pbuf_realloc+0xfc>)
 800564a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800564e:	4912      	ldr	r1, [pc, #72]	; (8005698 <pbuf_realloc+0x10c>)
 8005650:	480f      	ldr	r0, [pc, #60]	; (8005690 <pbuf_realloc+0x104>)
 8005652:	f008 ff37 	bl	800e4c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	897a      	ldrh	r2, [r7, #10]
 800565a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	895a      	ldrh	r2, [r3, #10]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f911 	bl	8005898 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e000      	b.n	8005680 <pbuf_realloc+0xf4>
    return;
 800567e:	bf00      	nop

}
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	0800ff40 	.word	0x0800ff40
 800568c:	08010058 	.word	0x08010058
 8005690:	0800ffa0 	.word	0x0800ffa0
 8005694:	08010070 	.word	0x08010070
 8005698:	08010088 	.word	0x08010088

0800569c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <pbuf_add_header_impl+0x22>
 80056b0:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <pbuf_add_header_impl+0xc4>)
 80056b2:	f240 12df 	movw	r2, #479	; 0x1df
 80056b6:	492b      	ldr	r1, [pc, #172]	; (8005764 <pbuf_add_header_impl+0xc8>)
 80056b8:	482b      	ldr	r0, [pc, #172]	; (8005768 <pbuf_add_header_impl+0xcc>)
 80056ba:	f008 ff03 	bl	800e4c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <pbuf_add_header_impl+0x30>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ca:	d301      	bcc.n	80056d0 <pbuf_add_header_impl+0x34>
    return 1;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e043      	b.n	8005758 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <pbuf_add_header_impl+0x3e>
    return 0;
 80056d6:	2300      	movs	r3, #0
 80056d8:	e03e      	b.n	8005758 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	891a      	ldrh	r2, [r3, #8]
 80056e2:	8a7b      	ldrh	r3, [r7, #18]
 80056e4:	4413      	add	r3, r2
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	8a7a      	ldrh	r2, [r7, #18]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d901      	bls.n	80056f2 <pbuf_add_header_impl+0x56>
    return 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e032      	b.n	8005758 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	7b1b      	ldrb	r3, [r3, #12]
 80056f6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80056f8:	8a3b      	ldrh	r3, [r7, #16]
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00c      	beq.n	800571c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	425b      	negs	r3, r3
 800570a:	4413      	add	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3310      	adds	r3, #16
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	429a      	cmp	r2, r3
 8005716:	d20d      	bcs.n	8005734 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005718:	2301      	movs	r3, #1
 800571a:	e01d      	b.n	8005758 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800571c:	79fb      	ldrb	r3, [r7, #7]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d006      	beq.n	8005730 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	425b      	negs	r3, r3
 800572a:	4413      	add	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	e001      	b.n	8005734 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005730:	2301      	movs	r3, #1
 8005732:	e011      	b.n	8005758 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	895a      	ldrh	r2, [r3, #10]
 800573e:	8a7b      	ldrh	r3, [r7, #18]
 8005740:	4413      	add	r3, r2
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	891a      	ldrh	r2, [r3, #8]
 800574c:	8a7b      	ldrh	r3, [r7, #18]
 800574e:	4413      	add	r3, r2
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	811a      	strh	r2, [r3, #8]


  return 0;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	0800ff40 	.word	0x0800ff40
 8005764:	080100a4 	.word	0x080100a4
 8005768:	0800ffa0 	.word	0x0800ffa0

0800576c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005776:	2200      	movs	r2, #0
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff ff8e 	bl	800569c <pbuf_add_header_impl>
 8005780:	4603      	mov	r3, r0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <pbuf_remove_header+0x1e>
 800579c:	4b20      	ldr	r3, [pc, #128]	; (8005820 <pbuf_remove_header+0x94>)
 800579e:	f240 224b 	movw	r2, #587	; 0x24b
 80057a2:	4920      	ldr	r1, [pc, #128]	; (8005824 <pbuf_remove_header+0x98>)
 80057a4:	4820      	ldr	r0, [pc, #128]	; (8005828 <pbuf_remove_header+0x9c>)
 80057a6:	f008 fe8d 	bl	800e4c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <pbuf_remove_header+0x2c>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b6:	d301      	bcc.n	80057bc <pbuf_remove_header+0x30>
    return 1;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e02c      	b.n	8005816 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <pbuf_remove_header+0x3a>
    return 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e027      	b.n	8005816 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	895b      	ldrh	r3, [r3, #10]
 80057ce:	89fa      	ldrh	r2, [r7, #14]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d908      	bls.n	80057e6 <pbuf_remove_header+0x5a>
 80057d4:	4b12      	ldr	r3, [pc, #72]	; (8005820 <pbuf_remove_header+0x94>)
 80057d6:	f240 2255 	movw	r2, #597	; 0x255
 80057da:	4914      	ldr	r1, [pc, #80]	; (800582c <pbuf_remove_header+0xa0>)
 80057dc:	4812      	ldr	r0, [pc, #72]	; (8005828 <pbuf_remove_header+0x9c>)
 80057de:	f008 fe71 	bl	800e4c4 <iprintf>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e017      	b.n	8005816 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	441a      	add	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	895a      	ldrh	r2, [r3, #10]
 80057fc:	89fb      	ldrh	r3, [r7, #14]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	891a      	ldrh	r2, [r3, #8]
 800580a:	89fb      	ldrh	r3, [r7, #14]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	0800ff40 	.word	0x0800ff40
 8005824:	080100a4 	.word	0x080100a4
 8005828:	0800ffa0 	.word	0x0800ffa0
 800582c:	080100b0 	.word	0x080100b0

08005830 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005844:	2b00      	cmp	r3, #0
 8005846:	da08      	bge.n	800585a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800584c:	425b      	negs	r3, r3
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff9b 	bl	800578c <pbuf_remove_header>
 8005856:	4603      	mov	r3, r0
 8005858:	e007      	b.n	800586a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800585a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800585e:	787a      	ldrb	r2, [r7, #1]
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff ff1a 	bl	800569c <pbuf_add_header_impl>
 8005868:	4603      	mov	r3, r0
  }
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800587e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005882:	2201      	movs	r2, #1
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ffd2 	bl	8005830 <pbuf_header_impl>
 800588c:	4603      	mov	r3, r0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <pbuf_free+0x22>
 80058ac:	4b38      	ldr	r3, [pc, #224]	; (8005990 <pbuf_free+0xf8>)
 80058ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80058b2:	4938      	ldr	r1, [pc, #224]	; (8005994 <pbuf_free+0xfc>)
 80058b4:	4838      	ldr	r0, [pc, #224]	; (8005998 <pbuf_free+0x100>)
 80058b6:	f008 fe05 	bl	800e4c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	e063      	b.n	8005986 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80058c2:	e05c      	b.n	800597e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7b9b      	ldrb	r3, [r3, #14]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <pbuf_free+0x42>
 80058cc:	4b30      	ldr	r3, [pc, #192]	; (8005990 <pbuf_free+0xf8>)
 80058ce:	f240 22f1 	movw	r2, #753	; 0x2f1
 80058d2:	4932      	ldr	r1, [pc, #200]	; (800599c <pbuf_free+0x104>)
 80058d4:	4830      	ldr	r0, [pc, #192]	; (8005998 <pbuf_free+0x100>)
 80058d6:	f008 fdf5 	bl	800e4c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7b9b      	ldrb	r3, [r3, #14]
 80058de:	3b01      	subs	r3, #1
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	739a      	strb	r2, [r3, #14]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7b9b      	ldrb	r3, [r3, #14]
 80058ea:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80058ec:	7dbb      	ldrb	r3, [r7, #22]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d143      	bne.n	800597a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7b1b      	ldrb	r3, [r3, #12]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	7b5b      	ldrb	r3, [r3, #13]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d011      	beq.n	8005932 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <pbuf_free+0x90>
 800591a:	4b1d      	ldr	r3, [pc, #116]	; (8005990 <pbuf_free+0xf8>)
 800591c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005920:	491f      	ldr	r1, [pc, #124]	; (80059a0 <pbuf_free+0x108>)
 8005922:	481d      	ldr	r0, [pc, #116]	; (8005998 <pbuf_free+0x100>)
 8005924:	f008 fdce 	bl	800e4c4 <iprintf>
        pc->custom_free_function(p);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4798      	blx	r3
 8005930:	e01d      	b.n	800596e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d104      	bne.n	8005942 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	2008      	movs	r0, #8
 800593c:	f7ff f99a 	bl	8004c74 <memp_free>
 8005940:	e015      	b.n	800596e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d104      	bne.n	8005952 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	2007      	movs	r0, #7
 800594c:	f7ff f992 	bl	8004c74 <memp_free>
 8005950:	e00d      	b.n	800596e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <pbuf_free+0xc8>
          mem_free(p);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fe fe6b 	bl	8004634 <mem_free>
 800595e:	e006      	b.n	800596e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <pbuf_free+0xf8>)
 8005962:	f240 320f 	movw	r2, #783	; 0x30f
 8005966:	490f      	ldr	r1, [pc, #60]	; (80059a4 <pbuf_free+0x10c>)
 8005968:	480b      	ldr	r0, [pc, #44]	; (8005998 <pbuf_free+0x100>)
 800596a:	f008 fdab 	bl	800e4c4 <iprintf>
        }
      }
      count++;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	3301      	adds	r3, #1
 8005972:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	e001      	b.n	800597e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d19f      	bne.n	80058c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	0800ff40 	.word	0x0800ff40
 8005994:	080100a4 	.word	0x080100a4
 8005998:	0800ffa0 	.word	0x0800ffa0
 800599c:	080100d0 	.word	0x080100d0
 80059a0:	080100e8 	.word	0x080100e8
 80059a4:	0801010c 	.word	0x0801010c

080059a8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80059b4:	e005      	b.n	80059c2 <pbuf_clen+0x1a>
    ++len;
 80059b6:	89fb      	ldrh	r3, [r7, #14]
 80059b8:	3301      	adds	r3, #1
 80059ba:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f6      	bne.n	80059b6 <pbuf_clen+0xe>
  }
  return len;
 80059c8:	89fb      	ldrh	r3, [r7, #14]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d010      	beq.n	8005a08 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	7b9b      	ldrb	r3, [r3, #14]
 80059ea:	3301      	adds	r3, #1
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	7b9b      	ldrb	r3, [r3, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <pbuf_ref+0x30>
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <pbuf_ref+0x38>)
 80059fc:	f240 3242 	movw	r2, #834	; 0x342
 8005a00:	4904      	ldr	r1, [pc, #16]	; (8005a14 <pbuf_ref+0x3c>)
 8005a02:	4805      	ldr	r0, [pc, #20]	; (8005a18 <pbuf_ref+0x40>)
 8005a04:	f008 fd5e 	bl	800e4c4 <iprintf>
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	0800ff40 	.word	0x0800ff40
 8005a14:	08010120 	.word	0x08010120
 8005a18:	0800ffa0 	.word	0x0800ffa0

08005a1c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <pbuf_cat+0x16>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <pbuf_cat+0x26>
 8005a32:	4b20      	ldr	r3, [pc, #128]	; (8005ab4 <pbuf_cat+0x98>)
 8005a34:	f240 3259 	movw	r2, #857	; 0x359
 8005a38:	491f      	ldr	r1, [pc, #124]	; (8005ab8 <pbuf_cat+0x9c>)
 8005a3a:	4820      	ldr	r0, [pc, #128]	; (8005abc <pbuf_cat+0xa0>)
 8005a3c:	f008 fd42 	bl	800e4c4 <iprintf>
 8005a40:	e034      	b.n	8005aac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e00a      	b.n	8005a5e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	891a      	ldrh	r2, [r3, #8]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	891b      	ldrh	r3, [r3, #8]
 8005a50:	4413      	add	r3, r2
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	891a      	ldrh	r2, [r3, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	895b      	ldrh	r3, [r3, #10]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d006      	beq.n	8005a80 <pbuf_cat+0x64>
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <pbuf_cat+0x98>)
 8005a74:	f240 3262 	movw	r2, #866	; 0x362
 8005a78:	4911      	ldr	r1, [pc, #68]	; (8005ac0 <pbuf_cat+0xa4>)
 8005a7a:	4810      	ldr	r0, [pc, #64]	; (8005abc <pbuf_cat+0xa0>)
 8005a7c:	f008 fd22 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <pbuf_cat+0x7a>
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <pbuf_cat+0x98>)
 8005a8a:	f240 3263 	movw	r2, #867	; 0x363
 8005a8e:	490d      	ldr	r1, [pc, #52]	; (8005ac4 <pbuf_cat+0xa8>)
 8005a90:	480a      	ldr	r0, [pc, #40]	; (8005abc <pbuf_cat+0xa0>)
 8005a92:	f008 fd17 	bl	800e4c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	891a      	ldrh	r2, [r3, #8]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	891b      	ldrh	r3, [r3, #8]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	0800ff40 	.word	0x0800ff40
 8005ab8:	08010134 	.word	0x08010134
 8005abc:	0800ffa0 	.word	0x0800ffa0
 8005ac0:	0801016c 	.word	0x0801016c
 8005ac4:	0801019c 	.word	0x0801019c

08005ac8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ffa1 	bl	8005a1c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005ada:	6838      	ldr	r0, [r7, #0]
 8005adc:	f7ff ff7c 	bl	80059d8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	2300      	movs	r3, #0
 8005af8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <pbuf_copy+0x2a>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <pbuf_copy+0x2a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	891a      	ldrh	r2, [r3, #8]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	891b      	ldrh	r3, [r3, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d209      	bcs.n	8005b26 <pbuf_copy+0x3e>
 8005b12:	4b57      	ldr	r3, [pc, #348]	; (8005c70 <pbuf_copy+0x188>)
 8005b14:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005b18:	4956      	ldr	r1, [pc, #344]	; (8005c74 <pbuf_copy+0x18c>)
 8005b1a:	4857      	ldr	r0, [pc, #348]	; (8005c78 <pbuf_copy+0x190>)
 8005b1c:	f008 fcd2 	bl	800e4c4 <iprintf>
 8005b20:	f06f 030f 	mvn.w	r3, #15
 8005b24:	e09f      	b.n	8005c66 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	895b      	ldrh	r3, [r3, #10]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	895b      	ldrh	r3, [r3, #10]
 8005b34:	4619      	mov	r1, r3
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1acb      	subs	r3, r1, r3
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d306      	bcc.n	8005b4c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	895b      	ldrh	r3, [r3, #10]
 8005b42:	461a      	mov	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e005      	b.n	8005b58 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	895b      	ldrh	r3, [r3, #10]
 8005b50:	461a      	mov	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	18d0      	adds	r0, r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f008 fc7a 	bl	800e464 <memcpy>
    offset_to += len;
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	895b      	ldrh	r3, [r3, #10]
 8005b84:	461a      	mov	r2, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d906      	bls.n	8005b9a <pbuf_copy+0xb2>
 8005b8c:	4b38      	ldr	r3, [pc, #224]	; (8005c70 <pbuf_copy+0x188>)
 8005b8e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005b92:	493a      	ldr	r1, [pc, #232]	; (8005c7c <pbuf_copy+0x194>)
 8005b94:	4838      	ldr	r0, [pc, #224]	; (8005c78 <pbuf_copy+0x190>)
 8005b96:	f008 fc95 	bl	800e4c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	895b      	ldrh	r3, [r3, #10]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d906      	bls.n	8005bb4 <pbuf_copy+0xcc>
 8005ba6:	4b32      	ldr	r3, [pc, #200]	; (8005c70 <pbuf_copy+0x188>)
 8005ba8:	f240 32da 	movw	r2, #986	; 0x3da
 8005bac:	4934      	ldr	r1, [pc, #208]	; (8005c80 <pbuf_copy+0x198>)
 8005bae:	4832      	ldr	r0, [pc, #200]	; (8005c78 <pbuf_copy+0x190>)
 8005bb0:	f008 fc88 	bl	800e4c4 <iprintf>
    if (offset_from >= p_from->len) {
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	895b      	ldrh	r3, [r3, #10]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d304      	bcc.n	8005bca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	895b      	ldrh	r3, [r3, #10]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d114      	bne.n	8005c00 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10c      	bne.n	8005c00 <pbuf_copy+0x118>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <pbuf_copy+0x118>
 8005bec:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <pbuf_copy+0x188>)
 8005bee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005bf2:	4924      	ldr	r1, [pc, #144]	; (8005c84 <pbuf_copy+0x19c>)
 8005bf4:	4820      	ldr	r0, [pc, #128]	; (8005c78 <pbuf_copy+0x190>)
 8005bf6:	f008 fc65 	bl	800e4c4 <iprintf>
 8005bfa:	f06f 030f 	mvn.w	r3, #15
 8005bfe:	e032      	b.n	8005c66 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d013      	beq.n	8005c2e <pbuf_copy+0x146>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	895a      	ldrh	r2, [r3, #10]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	891b      	ldrh	r3, [r3, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d10d      	bne.n	8005c2e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <pbuf_copy+0x146>
 8005c1a:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <pbuf_copy+0x188>)
 8005c1c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005c20:	4919      	ldr	r1, [pc, #100]	; (8005c88 <pbuf_copy+0x1a0>)
 8005c22:	4815      	ldr	r0, [pc, #84]	; (8005c78 <pbuf_copy+0x190>)
 8005c24:	f008 fc4e 	bl	800e4c4 <iprintf>
 8005c28:	f06f 0305 	mvn.w	r3, #5
 8005c2c:	e01b      	b.n	8005c66 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d013      	beq.n	8005c5c <pbuf_copy+0x174>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	895a      	ldrh	r2, [r3, #10]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	891b      	ldrh	r3, [r3, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d10d      	bne.n	8005c5c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <pbuf_copy+0x174>
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <pbuf_copy+0x188>)
 8005c4a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005c4e:	490e      	ldr	r1, [pc, #56]	; (8005c88 <pbuf_copy+0x1a0>)
 8005c50:	4809      	ldr	r0, [pc, #36]	; (8005c78 <pbuf_copy+0x190>)
 8005c52:	f008 fc37 	bl	800e4c4 <iprintf>
 8005c56:	f06f 0305 	mvn.w	r3, #5
 8005c5a:	e004      	b.n	8005c66 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f47f af61 	bne.w	8005b26 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	0800ff40 	.word	0x0800ff40
 8005c74:	080101e8 	.word	0x080101e8
 8005c78:	0800ffa0 	.word	0x0800ffa0
 8005c7c:	08010218 	.word	0x08010218
 8005c80:	08010230 	.word	0x08010230
 8005c84:	0801024c 	.word	0x0801024c
 8005c88:	0801025c 	.word	0x0801025c

08005c8c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4611      	mov	r1, r2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	80fb      	strh	r3, [r7, #6]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d108      	bne.n	8005cc2 <pbuf_copy_partial+0x36>
 8005cb0:	4b2b      	ldr	r3, [pc, #172]	; (8005d60 <pbuf_copy_partial+0xd4>)
 8005cb2:	f240 420a 	movw	r2, #1034	; 0x40a
 8005cb6:	492b      	ldr	r1, [pc, #172]	; (8005d64 <pbuf_copy_partial+0xd8>)
 8005cb8:	482b      	ldr	r0, [pc, #172]	; (8005d68 <pbuf_copy_partial+0xdc>)
 8005cba:	f008 fc03 	bl	800e4c4 <iprintf>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e04a      	b.n	8005d58 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d108      	bne.n	8005cda <pbuf_copy_partial+0x4e>
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <pbuf_copy_partial+0xd4>)
 8005cca:	f240 420b 	movw	r2, #1035	; 0x40b
 8005cce:	4927      	ldr	r1, [pc, #156]	; (8005d6c <pbuf_copy_partial+0xe0>)
 8005cd0:	4825      	ldr	r0, [pc, #148]	; (8005d68 <pbuf_copy_partial+0xdc>)
 8005cd2:	f008 fbf7 	bl	800e4c4 <iprintf>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e03e      	b.n	8005d58 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e034      	b.n	8005d4a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005ce0:	88bb      	ldrh	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <pbuf_copy_partial+0x70>
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	895b      	ldrh	r3, [r3, #10]
 8005cea:	88ba      	ldrh	r2, [r7, #4]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d305      	bcc.n	8005cfc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	895b      	ldrh	r3, [r3, #10]
 8005cf4:	88ba      	ldrh	r2, [r7, #4]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	80bb      	strh	r3, [r7, #4]
 8005cfa:	e023      	b.n	8005d44 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	895a      	ldrh	r2, [r3, #10]
 8005d00:	88bb      	ldrh	r3, [r7, #4]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005d06:	8b3a      	ldrh	r2, [r7, #24]
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d901      	bls.n	8005d12 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005d0e:	88fb      	ldrh	r3, [r7, #6]
 8005d10:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005d12:	8b7b      	ldrh	r3, [r7, #26]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	18d0      	adds	r0, r2, r3
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	88bb      	ldrh	r3, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	8b3a      	ldrh	r2, [r7, #24]
 8005d22:	4619      	mov	r1, r3
 8005d24:	f008 fb9e 	bl	800e464 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005d28:	8afa      	ldrh	r2, [r7, #22]
 8005d2a:	8b3b      	ldrh	r3, [r7, #24]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005d30:	8b7a      	ldrh	r2, [r7, #26]
 8005d32:	8b3b      	ldrh	r3, [r7, #24]
 8005d34:	4413      	add	r3, r2
 8005d36:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005d38:	88fa      	ldrh	r2, [r7, #6]
 8005d3a:	8b3b      	ldrh	r3, [r7, #24]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <pbuf_copy_partial+0xca>
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1c4      	bne.n	8005ce0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005d56:	8afb      	ldrh	r3, [r7, #22]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3720      	adds	r7, #32
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	0800ff40 	.word	0x0800ff40
 8005d64:	08010288 	.word	0x08010288
 8005d68:	0800ffa0 	.word	0x0800ffa0
 8005d6c:	080102a8 	.word	0x080102a8

08005d70 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <pbuf_take+0x30>
 8005d8c:	4b3a      	ldr	r3, [pc, #232]	; (8005e78 <pbuf_take+0x108>)
 8005d8e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005d92:	493a      	ldr	r1, [pc, #232]	; (8005e7c <pbuf_take+0x10c>)
 8005d94:	483a      	ldr	r0, [pc, #232]	; (8005e80 <pbuf_take+0x110>)
 8005d96:	f008 fb95 	bl	800e4c4 <iprintf>
 8005d9a:	f06f 030f 	mvn.w	r3, #15
 8005d9e:	e067      	b.n	8005e70 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <pbuf_take+0x4a>
 8005da6:	4b34      	ldr	r3, [pc, #208]	; (8005e78 <pbuf_take+0x108>)
 8005da8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005dac:	4935      	ldr	r1, [pc, #212]	; (8005e84 <pbuf_take+0x114>)
 8005dae:	4834      	ldr	r0, [pc, #208]	; (8005e80 <pbuf_take+0x110>)
 8005db0:	f008 fb88 	bl	800e4c4 <iprintf>
 8005db4:	f06f 030f 	mvn.w	r3, #15
 8005db8:	e05a      	b.n	8005e70 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	891b      	ldrh	r3, [r3, #8]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d909      	bls.n	8005dd8 <pbuf_take+0x68>
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <pbuf_take+0x108>)
 8005dc6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005dca:	492f      	ldr	r1, [pc, #188]	; (8005e88 <pbuf_take+0x118>)
 8005dcc:	482c      	ldr	r0, [pc, #176]	; (8005e80 <pbuf_take+0x110>)
 8005dce:	f008 fb79 	bl	800e4c4 <iprintf>
 8005dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dd6:	e04b      	b.n	8005e70 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d007      	beq.n	8005dee <pbuf_take+0x7e>
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d004      	beq.n	8005dee <pbuf_take+0x7e>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	891b      	ldrh	r3, [r3, #8]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d902      	bls.n	8005df4 <pbuf_take+0x84>
    return ERR_ARG;
 8005dee:	f06f 030f 	mvn.w	r3, #15
 8005df2:	e03d      	b.n	8005e70 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e028      	b.n	8005e4c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d106      	bne.n	8005e0e <pbuf_take+0x9e>
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <pbuf_take+0x108>)
 8005e02:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005e06:	4921      	ldr	r1, [pc, #132]	; (8005e8c <pbuf_take+0x11c>)
 8005e08:	481d      	ldr	r0, [pc, #116]	; (8005e80 <pbuf_take+0x110>)
 8005e0a:	f008 fb5b 	bl	800e4c4 <iprintf>
    buf_copy_len = total_copy_len;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	895b      	ldrh	r3, [r3, #10]
 8005e16:	461a      	mov	r2, r3
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d902      	bls.n	8005e24 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	895b      	ldrh	r3, [r3, #10]
 8005e22:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	6858      	ldr	r0, [r3, #4]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4619      	mov	r1, r3
 8005e32:	f008 fb17 	bl	800e464 <memcpy>
    total_copy_len -= buf_copy_len;
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	4413      	add	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	61fb      	str	r3, [r7, #28]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1d3      	bne.n	8005dfa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <pbuf_take+0xf0>
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d006      	beq.n	8005e6e <pbuf_take+0xfe>
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <pbuf_take+0x108>)
 8005e62:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005e66:	490a      	ldr	r1, [pc, #40]	; (8005e90 <pbuf_take+0x120>)
 8005e68:	4805      	ldr	r0, [pc, #20]	; (8005e80 <pbuf_take+0x110>)
 8005e6a:	f008 fb2b 	bl	800e4c4 <iprintf>
  return ERR_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	0800ff40 	.word	0x0800ff40
 8005e7c:	08010318 	.word	0x08010318
 8005e80:	0800ffa0 	.word	0x0800ffa0
 8005e84:	08010330 	.word	0x08010330
 8005e88:	0801034c 	.word	0x0801034c
 8005e8c:	0801036c 	.word	0x0801036c
 8005e90:	08010384 	.word	0x08010384

08005e94 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	603a      	str	r2, [r7, #0]
 8005e9e:	71fb      	strb	r3, [r7, #7]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	8919      	ldrh	r1, [r3, #8]
 8005ea8:	88ba      	ldrh	r2, [r7, #4]
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fa0f 	bl	80052d0 <pbuf_alloc>
 8005eb2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <pbuf_clone+0x2a>
    return NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e011      	b.n	8005ee2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff fe11 	bl	8005ae8 <pbuf_copy>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005eca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <pbuf_clone+0x4c>
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <pbuf_clone+0x58>)
 8005ed4:	f240 5224 	movw	r2, #1316	; 0x524
 8005ed8:	4905      	ldr	r1, [pc, #20]	; (8005ef0 <pbuf_clone+0x5c>)
 8005eda:	4806      	ldr	r0, [pc, #24]	; (8005ef4 <pbuf_clone+0x60>)
 8005edc:	f008 faf2 	bl	800e4c4 <iprintf>
  return q;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	0800ff40 	.word	0x0800ff40
 8005ef0:	080103b4 	.word	0x080103b4
 8005ef4:	0800ffa0 	.word	0x0800ffa0

08005ef8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005efc:	f008 fafa 	bl	800e4f4 <rand>
 8005f00:	4603      	mov	r3, r0
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	4b01      	ldr	r3, [pc, #4]	; (8005f18 <tcp_init+0x20>)
 8005f12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005f14:	bf00      	nop
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	2000002a 	.word	0x2000002a

08005f1c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7d1b      	ldrb	r3, [r3, #20]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d105      	bne.n	8005f38 <tcp_free+0x1c>
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <tcp_free+0x2c>)
 8005f2e:	22d4      	movs	r2, #212	; 0xd4
 8005f30:	4906      	ldr	r1, [pc, #24]	; (8005f4c <tcp_free+0x30>)
 8005f32:	4807      	ldr	r0, [pc, #28]	; (8005f50 <tcp_free+0x34>)
 8005f34:	f008 fac6 	bl	800e4c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	f7fe fe9a 	bl	8004c74 <memp_free>
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	08010440 	.word	0x08010440
 8005f4c:	08010470 	.word	0x08010470
 8005f50:	08010484 	.word	0x08010484

08005f54 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7d1b      	ldrb	r3, [r3, #20]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d105      	bne.n	8005f70 <tcp_free_listen+0x1c>
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <tcp_free_listen+0x2c>)
 8005f66:	22df      	movs	r2, #223	; 0xdf
 8005f68:	4906      	ldr	r1, [pc, #24]	; (8005f84 <tcp_free_listen+0x30>)
 8005f6a:	4807      	ldr	r0, [pc, #28]	; (8005f88 <tcp_free_listen+0x34>)
 8005f6c:	f008 faaa 	bl	800e4c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	2002      	movs	r0, #2
 8005f74:	f7fe fe7e 	bl	8004c74 <memp_free>
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08010440 	.word	0x08010440
 8005f84:	080104ac 	.word	0x080104ac
 8005f88:	08010484 	.word	0x08010484

08005f8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005f90:	f000 fea2 	bl	8006cd8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <tcp_tmr+0x28>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <tcp_tmr+0x28>)
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <tcp_tmr+0x28>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005fac:	f000 fb54 	bl	8006658 <tcp_slowtmr>
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000131 	.word	0x20000131

08005fb8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d105      	bne.n	8005fd4 <tcp_remove_listener+0x1c>
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <tcp_remove_listener+0x48>)
 8005fca:	22ff      	movs	r2, #255	; 0xff
 8005fcc:	490d      	ldr	r1, [pc, #52]	; (8006004 <tcp_remove_listener+0x4c>)
 8005fce:	480e      	ldr	r0, [pc, #56]	; (8006008 <tcp_remove_listener+0x50>)
 8005fd0:	f008 fa78 	bl	800e4c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e00a      	b.n	8005ff0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d102      	bne.n	8005fea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f1      	bne.n	8005fda <tcp_remove_listener+0x22>
    }
  }
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	08010440 	.word	0x08010440
 8006004:	080104c8 	.word	0x080104c8
 8006008:	08010484 	.word	0x08010484

0800600c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <tcp_listen_closed+0x1c>
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <tcp_listen_closed+0x60>)
 800601c:	f240 1211 	movw	r2, #273	; 0x111
 8006020:	4913      	ldr	r1, [pc, #76]	; (8006070 <tcp_listen_closed+0x64>)
 8006022:	4814      	ldr	r0, [pc, #80]	; (8006074 <tcp_listen_closed+0x68>)
 8006024:	f008 fa4e 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	7d1b      	ldrb	r3, [r3, #20]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d006      	beq.n	800603e <tcp_listen_closed+0x32>
 8006030:	4b0e      	ldr	r3, [pc, #56]	; (800606c <tcp_listen_closed+0x60>)
 8006032:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006036:	4910      	ldr	r1, [pc, #64]	; (8006078 <tcp_listen_closed+0x6c>)
 8006038:	480e      	ldr	r0, [pc, #56]	; (8006074 <tcp_listen_closed+0x68>)
 800603a:	f008 fa43 	bl	800e4c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800603e:	2301      	movs	r3, #1
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	e00b      	b.n	800605c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006044:	4a0d      	ldr	r2, [pc, #52]	; (800607c <tcp_listen_closed+0x70>)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff ffb1 	bl	8005fb8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	3301      	adds	r3, #1
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b03      	cmp	r3, #3
 8006060:	d9f0      	bls.n	8006044 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	08010440 	.word	0x08010440
 8006070:	080104f0 	.word	0x080104f0
 8006074:	08010484 	.word	0x08010484
 8006078:	080104fc 	.word	0x080104fc
 800607c:	0801240c 	.word	0x0801240c

08006080 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006080:	b5b0      	push	{r4, r5, r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af04      	add	r7, sp, #16
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	460b      	mov	r3, r1
 800608a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <tcp_close_shutdown+0x20>
 8006092:	4b63      	ldr	r3, [pc, #396]	; (8006220 <tcp_close_shutdown+0x1a0>)
 8006094:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006098:	4962      	ldr	r1, [pc, #392]	; (8006224 <tcp_close_shutdown+0x1a4>)
 800609a:	4863      	ldr	r0, [pc, #396]	; (8006228 <tcp_close_shutdown+0x1a8>)
 800609c:	f008 fa12 	bl	800e4c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d066      	beq.n	8006174 <tcp_close_shutdown+0xf4>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7d1b      	ldrb	r3, [r3, #20]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d003      	beq.n	80060b6 <tcp_close_shutdown+0x36>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7d1b      	ldrb	r3, [r3, #20]
 80060b2:	2b07      	cmp	r3, #7
 80060b4:	d15e      	bne.n	8006174 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d104      	bne.n	80060c8 <tcp_close_shutdown+0x48>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060c6:	d055      	beq.n	8006174 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8b5b      	ldrh	r3, [r3, #26]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <tcp_close_shutdown+0x62>
 80060d4:	4b52      	ldr	r3, [pc, #328]	; (8006220 <tcp_close_shutdown+0x1a0>)
 80060d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80060da:	4954      	ldr	r1, [pc, #336]	; (800622c <tcp_close_shutdown+0x1ac>)
 80060dc:	4852      	ldr	r0, [pc, #328]	; (8006228 <tcp_close_shutdown+0x1a8>)
 80060de:	f008 f9f1 	bl	800e4c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80060ea:	687d      	ldr	r5, [r7, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	8ad2      	ldrh	r2, [r2, #22]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	8b09      	ldrh	r1, [r1, #24]
 80060f8:	9102      	str	r1, [sp, #8]
 80060fa:	9201      	str	r2, [sp, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	462b      	mov	r3, r5
 8006100:	4622      	mov	r2, r4
 8006102:	4601      	mov	r1, r0
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f004 fe8d 	bl	800ae24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 f8c6 	bl	800729c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006110:	4b47      	ldr	r3, [pc, #284]	; (8006230 <tcp_close_shutdown+0x1b0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d105      	bne.n	8006126 <tcp_close_shutdown+0xa6>
 800611a:	4b45      	ldr	r3, [pc, #276]	; (8006230 <tcp_close_shutdown+0x1b0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4a43      	ldr	r2, [pc, #268]	; (8006230 <tcp_close_shutdown+0x1b0>)
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	e013      	b.n	800614e <tcp_close_shutdown+0xce>
 8006126:	4b42      	ldr	r3, [pc, #264]	; (8006230 <tcp_close_shutdown+0x1b0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e00c      	b.n	8006148 <tcp_close_shutdown+0xc8>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	d104      	bne.n	8006142 <tcp_close_shutdown+0xc2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	60da      	str	r2, [r3, #12]
 8006140:	e005      	b.n	800614e <tcp_close_shutdown+0xce>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1ef      	bne.n	800612e <tcp_close_shutdown+0xae>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	60da      	str	r2, [r3, #12]
 8006154:	4b37      	ldr	r3, [pc, #220]	; (8006234 <tcp_close_shutdown+0x1b4>)
 8006156:	2201      	movs	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800615a:	4b37      	ldr	r3, [pc, #220]	; (8006238 <tcp_close_shutdown+0x1b8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	429a      	cmp	r2, r3
 8006162:	d102      	bne.n	800616a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006164:	f003 fd5a 	bl	8009c1c <tcp_trigger_input_pcb_close>
 8006168:	e002      	b.n	8006170 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fed6 	bl	8005f1c <tcp_free>
      }
      return ERR_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	e050      	b.n	8006216 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	7d1b      	ldrb	r3, [r3, #20]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d03b      	beq.n	80061f4 <tcp_close_shutdown+0x174>
 800617c:	2b02      	cmp	r3, #2
 800617e:	dc44      	bgt.n	800620a <tcp_close_shutdown+0x18a>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <tcp_close_shutdown+0x10a>
 8006184:	2b01      	cmp	r3, #1
 8006186:	d02a      	beq.n	80061de <tcp_close_shutdown+0x15e>
 8006188:	e03f      	b.n	800620a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8adb      	ldrh	r3, [r3, #22]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d021      	beq.n	80061d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006192:	4b2a      	ldr	r3, [pc, #168]	; (800623c <tcp_close_shutdown+0x1bc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	429a      	cmp	r2, r3
 800619a:	d105      	bne.n	80061a8 <tcp_close_shutdown+0x128>
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <tcp_close_shutdown+0x1bc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4a26      	ldr	r2, [pc, #152]	; (800623c <tcp_close_shutdown+0x1bc>)
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e013      	b.n	80061d0 <tcp_close_shutdown+0x150>
 80061a8:	4b24      	ldr	r3, [pc, #144]	; (800623c <tcp_close_shutdown+0x1bc>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	e00c      	b.n	80061ca <tcp_close_shutdown+0x14a>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d104      	bne.n	80061c4 <tcp_close_shutdown+0x144>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	e005      	b.n	80061d0 <tcp_close_shutdown+0x150>
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ef      	bne.n	80061b0 <tcp_close_shutdown+0x130>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff fea0 	bl	8005f1c <tcp_free>
      break;
 80061dc:	e01a      	b.n	8006214 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ff14 	bl	800600c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	4816      	ldr	r0, [pc, #88]	; (8006240 <tcp_close_shutdown+0x1c0>)
 80061e8:	f001 f8a8 	bl	800733c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff feb1 	bl	8005f54 <tcp_free_listen>
      break;
 80061f2:	e00f      	b.n	8006214 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	480e      	ldr	r0, [pc, #56]	; (8006230 <tcp_close_shutdown+0x1b0>)
 80061f8:	f001 f8a0 	bl	800733c <tcp_pcb_remove>
 80061fc:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <tcp_close_shutdown+0x1b4>)
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7ff fe8a 	bl	8005f1c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006208:	e004      	b.n	8006214 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f81a 	bl	8006244 <tcp_close_shutdown_fin>
 8006210:	4603      	mov	r3, r0
 8006212:	e000      	b.n	8006216 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bdb0      	pop	{r4, r5, r7, pc}
 800621e:	bf00      	nop
 8006220:	08010440 	.word	0x08010440
 8006224:	08010514 	.word	0x08010514
 8006228:	08010484 	.word	0x08010484
 800622c:	08010534 	.word	0x08010534
 8006230:	20008ba0 	.word	0x20008ba0
 8006234:	20008b9c 	.word	0x20008b9c
 8006238:	20008bb4 	.word	0x20008bb4
 800623c:	20008bac 	.word	0x20008bac
 8006240:	20008ba8 	.word	0x20008ba8

08006244 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <tcp_close_shutdown_fin+0x1c>
 8006252:	4b2e      	ldr	r3, [pc, #184]	; (800630c <tcp_close_shutdown_fin+0xc8>)
 8006254:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006258:	492d      	ldr	r1, [pc, #180]	; (8006310 <tcp_close_shutdown_fin+0xcc>)
 800625a:	482e      	ldr	r0, [pc, #184]	; (8006314 <tcp_close_shutdown_fin+0xd0>)
 800625c:	f008 f932 	bl	800e4c4 <iprintf>

  switch (pcb->state) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	7d1b      	ldrb	r3, [r3, #20]
 8006264:	2b07      	cmp	r3, #7
 8006266:	d020      	beq.n	80062aa <tcp_close_shutdown_fin+0x66>
 8006268:	2b07      	cmp	r3, #7
 800626a:	dc2b      	bgt.n	80062c4 <tcp_close_shutdown_fin+0x80>
 800626c:	2b03      	cmp	r3, #3
 800626e:	d002      	beq.n	8006276 <tcp_close_shutdown_fin+0x32>
 8006270:	2b04      	cmp	r3, #4
 8006272:	d00d      	beq.n	8006290 <tcp_close_shutdown_fin+0x4c>
 8006274:	e026      	b.n	80062c4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f003 fee2 	bl	800a040 <tcp_send_fin>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11f      	bne.n	80062c8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2205      	movs	r2, #5
 800628c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800628e:	e01b      	b.n	80062c8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f003 fed5 	bl	800a040 <tcp_send_fin>
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800629a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d114      	bne.n	80062cc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2205      	movs	r2, #5
 80062a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80062a8:	e010      	b.n	80062cc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f003 fec8 	bl	800a040 <tcp_send_fin>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80062b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d109      	bne.n	80062d0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2209      	movs	r2, #9
 80062c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80062c2:	e005      	b.n	80062d0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e01c      	b.n	8006302 <tcp_close_shutdown_fin+0xbe>
      break;
 80062c8:	bf00      	nop
 80062ca:	e002      	b.n	80062d2 <tcp_close_shutdown_fin+0x8e>
      break;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <tcp_close_shutdown_fin+0x8e>
      break;
 80062d0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80062d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f003 ffee 	bl	800a2bc <tcp_output>
 80062e0:	e00d      	b.n	80062fe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80062e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d108      	bne.n	80062fe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8b5b      	ldrh	r3, [r3, #26]
 80062f0:	f043 0308 	orr.w	r3, r3, #8
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e001      	b.n	8006302 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80062fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	08010440 	.word	0x08010440
 8006310:	080104f0 	.word	0x080104f0
 8006314:	08010484 	.word	0x08010484

08006318 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <tcp_close+0x22>
 8006326:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <tcp_close+0x4c>)
 8006328:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800632c:	490e      	ldr	r1, [pc, #56]	; (8006368 <tcp_close+0x50>)
 800632e:	480f      	ldr	r0, [pc, #60]	; (800636c <tcp_close+0x54>)
 8006330:	f008 f8c8 	bl	800e4c4 <iprintf>
 8006334:	f06f 030f 	mvn.w	r3, #15
 8006338:	e00f      	b.n	800635a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	7d1b      	ldrb	r3, [r3, #20]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d006      	beq.n	8006350 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8b5b      	ldrh	r3, [r3, #26]
 8006346:	f043 0310 	orr.w	r3, r3, #16
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006350:	2101      	movs	r1, #1
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff fe94 	bl	8006080 <tcp_close_shutdown>
 8006358:	4603      	mov	r3, r0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	08010440 	.word	0x08010440
 8006368:	08010550 	.word	0x08010550
 800636c:	08010484 	.word	0x08010484

08006370 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08e      	sub	sp, #56	; 0x38
 8006374:	af04      	add	r7, sp, #16
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d107      	bne.n	8006390 <tcp_abandon+0x20>
 8006380:	4b52      	ldr	r3, [pc, #328]	; (80064cc <tcp_abandon+0x15c>)
 8006382:	f240 223d 	movw	r2, #573	; 0x23d
 8006386:	4952      	ldr	r1, [pc, #328]	; (80064d0 <tcp_abandon+0x160>)
 8006388:	4852      	ldr	r0, [pc, #328]	; (80064d4 <tcp_abandon+0x164>)
 800638a:	f008 f89b 	bl	800e4c4 <iprintf>
 800638e:	e099      	b.n	80064c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	7d1b      	ldrb	r3, [r3, #20]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d106      	bne.n	80063a6 <tcp_abandon+0x36>
 8006398:	4b4c      	ldr	r3, [pc, #304]	; (80064cc <tcp_abandon+0x15c>)
 800639a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800639e:	494e      	ldr	r1, [pc, #312]	; (80064d8 <tcp_abandon+0x168>)
 80063a0:	484c      	ldr	r0, [pc, #304]	; (80064d4 <tcp_abandon+0x164>)
 80063a2:	f008 f88f 	bl	800e4c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7d1b      	ldrb	r3, [r3, #20]
 80063aa:	2b0a      	cmp	r3, #10
 80063ac:	d107      	bne.n	80063be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	484a      	ldr	r0, [pc, #296]	; (80064dc <tcp_abandon+0x16c>)
 80063b2:	f000 ffc3 	bl	800733c <tcp_pcb_remove>
    tcp_free(pcb);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fdb0 	bl	8005f1c <tcp_free>
 80063bc:	e082      	b.n	80064c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	7d1b      	ldrb	r3, [r3, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d126      	bne.n	8006436 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8adb      	ldrh	r3, [r3, #22]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d02e      	beq.n	800644e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80063f0:	4b3b      	ldr	r3, [pc, #236]	; (80064e0 <tcp_abandon+0x170>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d105      	bne.n	8006406 <tcp_abandon+0x96>
 80063fa:	4b39      	ldr	r3, [pc, #228]	; (80064e0 <tcp_abandon+0x170>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4a37      	ldr	r2, [pc, #220]	; (80064e0 <tcp_abandon+0x170>)
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e013      	b.n	800642e <tcp_abandon+0xbe>
 8006406:	4b36      	ldr	r3, [pc, #216]	; (80064e0 <tcp_abandon+0x170>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e00c      	b.n	8006428 <tcp_abandon+0xb8>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d104      	bne.n	8006422 <tcp_abandon+0xb2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	60da      	str	r2, [r3, #12]
 8006420:	e005      	b.n	800642e <tcp_abandon+0xbe>
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ef      	bne.n	800640e <tcp_abandon+0x9e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	60da      	str	r2, [r3, #12]
 8006434:	e00b      	b.n	800644e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8adb      	ldrh	r3, [r3, #22]
 800643e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4828      	ldr	r0, [pc, #160]	; (80064e4 <tcp_abandon+0x174>)
 8006444:	f000 ff7a 	bl	800733c <tcp_pcb_remove>
 8006448:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <tcp_abandon+0x178>)
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fd1c 	bl	8006e98 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fd13 	bl	8006e98 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fd0a 	bl	8006e98 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00e      	beq.n	80064a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	8b12      	ldrh	r2, [r2, #24]
 8006494:	9202      	str	r2, [sp, #8]
 8006496:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006498:	9201      	str	r2, [sp, #4]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	460b      	mov	r3, r1
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	69b9      	ldr	r1, [r7, #24]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f004 fcbe 	bl	800ae24 <tcp_rst>
    }
    last_state = pcb->state;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7d1b      	ldrb	r3, [r3, #20]
 80064ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fd34 	bl	8005f1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <tcp_abandon+0x154>
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f06f 010c 	mvn.w	r1, #12
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	4798      	blx	r3
  }
}
 80064c4:	3728      	adds	r7, #40	; 0x28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	08010440 	.word	0x08010440
 80064d0:	08010584 	.word	0x08010584
 80064d4:	08010484 	.word	0x08010484
 80064d8:	080105a0 	.word	0x080105a0
 80064dc:	20008bb0 	.word	0x20008bb0
 80064e0:	20008bac 	.word	0x20008bac
 80064e4:	20008ba0 	.word	0x20008ba0
 80064e8:	20008b9c 	.word	0x20008b9c

080064ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80064f4:	2101      	movs	r1, #1
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff ff3a 	bl	8006370 <tcp_abandon>
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <tcp_update_rcv_ann_wnd+0x1c>
 8006512:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006514:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006518:	4924      	ldr	r1, [pc, #144]	; (80065ac <tcp_update_rcv_ann_wnd+0xa8>)
 800651a:	4825      	ldr	r0, [pc, #148]	; (80065b0 <tcp_update_rcv_ann_wnd+0xac>)
 800651c:	f007 ffd2 	bl	800e4c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006528:	4413      	add	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006534:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006538:	bf28      	it	cs
 800653a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800653e:	b292      	uxth	r2, r2
 8006540:	4413      	add	r3, r2
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	db08      	blt.n	800655c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	e020      	b.n	800659e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	dd03      	ble.n	8006572 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006570:	e014      	b.n	800659c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006584:	d306      	bcc.n	8006594 <tcp_update_rcv_ann_wnd+0x90>
 8006586:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006588:	f240 32b6 	movw	r2, #950	; 0x3b6
 800658c:	4909      	ldr	r1, [pc, #36]	; (80065b4 <tcp_update_rcv_ann_wnd+0xb0>)
 800658e:	4808      	ldr	r0, [pc, #32]	; (80065b0 <tcp_update_rcv_ann_wnd+0xac>)
 8006590:	f007 ff98 	bl	800e4c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	b29a      	uxth	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800659c:	2300      	movs	r3, #0
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	08010440 	.word	0x08010440
 80065ac:	0801069c 	.word	0x0801069c
 80065b0:	08010484 	.word	0x08010484
 80065b4:	080106c0 	.word	0x080106c0

080065b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <tcp_recved+0x22>
 80065ca:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <tcp_recved+0x90>)
 80065cc:	f240 32cf 	movw	r2, #975	; 0x3cf
 80065d0:	491e      	ldr	r1, [pc, #120]	; (800664c <tcp_recved+0x94>)
 80065d2:	481f      	ldr	r0, [pc, #124]	; (8006650 <tcp_recved+0x98>)
 80065d4:	f007 ff76 	bl	800e4c4 <iprintf>
 80065d8:	e032      	b.n	8006640 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7d1b      	ldrb	r3, [r3, #20]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d106      	bne.n	80065f0 <tcp_recved+0x38>
 80065e2:	4b19      	ldr	r3, [pc, #100]	; (8006648 <tcp_recved+0x90>)
 80065e4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80065e8:	491a      	ldr	r1, [pc, #104]	; (8006654 <tcp_recved+0x9c>)
 80065ea:	4819      	ldr	r0, [pc, #100]	; (8006650 <tcp_recved+0x98>)
 80065ec:	f007 ff6a 	bl	800e4c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80065f4:	887b      	ldrh	r3, [r7, #2]
 80065f6:	4413      	add	r3, r2
 80065f8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80065fa:	89fb      	ldrh	r3, [r7, #14]
 80065fc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006600:	d804      	bhi.n	800660c <tcp_recved+0x54>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	89fa      	ldrh	r2, [r7, #14]
 8006608:	429a      	cmp	r2, r3
 800660a:	d204      	bcs.n	8006616 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006612:	851a      	strh	r2, [r3, #40]	; 0x28
 8006614:	e002      	b.n	800661c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	89fa      	ldrh	r2, [r7, #14]
 800661a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff ff71 	bl	8006504 <tcp_update_rcv_ann_wnd>
 8006622:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800662a:	d309      	bcc.n	8006640 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	8b5b      	ldrh	r3, [r3, #26]
 8006630:	f043 0302 	orr.w	r3, r3, #2
 8006634:	b29a      	uxth	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f003 fe3e 	bl	800a2bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	08010440 	.word	0x08010440
 800664c:	080106dc 	.word	0x080106dc
 8006650:	08010484 	.word	0x08010484
 8006654:	080106f4 	.word	0x080106f4

08006658 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006658:	b5b0      	push	{r4, r5, r7, lr}
 800665a:	b090      	sub	sp, #64	; 0x40
 800665c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006664:	4b94      	ldr	r3, [pc, #592]	; (80068b8 <tcp_slowtmr+0x260>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	4a93      	ldr	r2, [pc, #588]	; (80068b8 <tcp_slowtmr+0x260>)
 800666c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800666e:	4b93      	ldr	r3, [pc, #588]	; (80068bc <tcp_slowtmr+0x264>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	b2da      	uxtb	r2, r3
 8006676:	4b91      	ldr	r3, [pc, #580]	; (80068bc <tcp_slowtmr+0x264>)
 8006678:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800667e:	4b90      	ldr	r3, [pc, #576]	; (80068c0 <tcp_slowtmr+0x268>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006684:	e29f      	b.n	8006bc6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	7d1b      	ldrb	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <tcp_slowtmr+0x44>
 800668e:	4b8d      	ldr	r3, [pc, #564]	; (80068c4 <tcp_slowtmr+0x26c>)
 8006690:	f240 42be 	movw	r2, #1214	; 0x4be
 8006694:	498c      	ldr	r1, [pc, #560]	; (80068c8 <tcp_slowtmr+0x270>)
 8006696:	488d      	ldr	r0, [pc, #564]	; (80068cc <tcp_slowtmr+0x274>)
 8006698:	f007 ff14 	bl	800e4c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	7d1b      	ldrb	r3, [r3, #20]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d106      	bne.n	80066b2 <tcp_slowtmr+0x5a>
 80066a4:	4b87      	ldr	r3, [pc, #540]	; (80068c4 <tcp_slowtmr+0x26c>)
 80066a6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80066aa:	4989      	ldr	r1, [pc, #548]	; (80068d0 <tcp_slowtmr+0x278>)
 80066ac:	4887      	ldr	r0, [pc, #540]	; (80068cc <tcp_slowtmr+0x274>)
 80066ae:	f007 ff09 	bl	800e4c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	7d1b      	ldrb	r3, [r3, #20]
 80066b6:	2b0a      	cmp	r3, #10
 80066b8:	d106      	bne.n	80066c8 <tcp_slowtmr+0x70>
 80066ba:	4b82      	ldr	r3, [pc, #520]	; (80068c4 <tcp_slowtmr+0x26c>)
 80066bc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80066c0:	4984      	ldr	r1, [pc, #528]	; (80068d4 <tcp_slowtmr+0x27c>)
 80066c2:	4882      	ldr	r0, [pc, #520]	; (80068cc <tcp_slowtmr+0x274>)
 80066c4:	f007 fefe 	bl	800e4c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	7f9a      	ldrb	r2, [r3, #30]
 80066cc:	4b7b      	ldr	r3, [pc, #492]	; (80068bc <tcp_slowtmr+0x264>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d105      	bne.n	80066e0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80066de:	e272      	b.n	8006bc6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80066e0:	4b76      	ldr	r3, [pc, #472]	; (80068bc <tcp_slowtmr+0x264>)
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	7d1b      	ldrb	r3, [r3, #20]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d10a      	bne.n	8006712 <tcp_slowtmr+0xba>
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006702:	2b05      	cmp	r3, #5
 8006704:	d905      	bls.n	8006712 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800670a:	3301      	adds	r3, #1
 800670c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006710:	e11e      	b.n	8006950 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006718:	2b0b      	cmp	r3, #11
 800671a:	d905      	bls.n	8006728 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800671c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006720:	3301      	adds	r3, #1
 8006722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006726:	e113      	b.n	8006950 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800672e:	2b00      	cmp	r3, #0
 8006730:	d075      	beq.n	800681e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006736:	2b00      	cmp	r3, #0
 8006738:	d006      	beq.n	8006748 <tcp_slowtmr+0xf0>
 800673a:	4b62      	ldr	r3, [pc, #392]	; (80068c4 <tcp_slowtmr+0x26c>)
 800673c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006740:	4965      	ldr	r1, [pc, #404]	; (80068d8 <tcp_slowtmr+0x280>)
 8006742:	4862      	ldr	r0, [pc, #392]	; (80068cc <tcp_slowtmr+0x274>)
 8006744:	f007 febe 	bl	800e4c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <tcp_slowtmr+0x106>
 8006750:	4b5c      	ldr	r3, [pc, #368]	; (80068c4 <tcp_slowtmr+0x26c>)
 8006752:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006756:	4961      	ldr	r1, [pc, #388]	; (80068dc <tcp_slowtmr+0x284>)
 8006758:	485c      	ldr	r0, [pc, #368]	; (80068cc <tcp_slowtmr+0x274>)
 800675a:	f007 feb3 	bl	800e4c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006764:	2b0b      	cmp	r3, #11
 8006766:	d905      	bls.n	8006774 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800676c:	3301      	adds	r3, #1
 800676e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006772:	e0ed      	b.n	8006950 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800677a:	3b01      	subs	r3, #1
 800677c:	4a58      	ldr	r2, [pc, #352]	; (80068e0 <tcp_slowtmr+0x288>)
 800677e:	5cd3      	ldrb	r3, [r2, r3]
 8006780:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006788:	7c7a      	ldrb	r2, [r7, #17]
 800678a:	429a      	cmp	r2, r3
 800678c:	d907      	bls.n	800679e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006794:	3301      	adds	r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80067a4:	7c7a      	ldrb	r2, [r7, #17]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	f200 80d2 	bhi.w	8006950 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80067ac:	2301      	movs	r3, #1
 80067ae:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d108      	bne.n	80067cc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80067ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067bc:	f004 fc26 	bl	800b00c <tcp_zero_window_probe>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d014      	beq.n	80067f0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80067c6:	2300      	movs	r3, #0
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	e011      	b.n	80067f0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067d2:	4619      	mov	r1, r3
 80067d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067d6:	f003 faeb 	bl	8009db0 <tcp_split_unsent_seg>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d107      	bne.n	80067f0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80067e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067e2:	f003 fd6b 	bl	800a2bc <tcp_output>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80ac 	beq.w	8006950 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80067f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006802:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006806:	2b06      	cmp	r3, #6
 8006808:	f200 80a2 	bhi.w	8006950 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006812:	3301      	adds	r3, #1
 8006814:	b2da      	uxtb	r2, r3
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800681c:	e098      	b.n	8006950 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006824:	2b00      	cmp	r3, #0
 8006826:	db0f      	blt.n	8006848 <tcp_slowtmr+0x1f0>
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800682e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006832:	4293      	cmp	r3, r2
 8006834:	d008      	beq.n	8006848 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800683c:	b29b      	uxth	r3, r3
 800683e:	3301      	adds	r3, #1
 8006840:	b29b      	uxth	r3, r3
 8006842:	b21a      	sxth	r2, r3
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006854:	429a      	cmp	r2, r3
 8006856:	db7b      	blt.n	8006950 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800685a:	f004 f821 	bl	800a8a0 <tcp_rexmit_rto_prepare>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <tcp_slowtmr+0x21c>
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006868:	2b00      	cmp	r3, #0
 800686a:	d171      	bne.n	8006950 <tcp_slowtmr+0x2f8>
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d06d      	beq.n	8006950 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	7d1b      	ldrb	r3, [r3, #20]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d03a      	beq.n	80068f2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006882:	2b0c      	cmp	r3, #12
 8006884:	bf28      	it	cs
 8006886:	230c      	movcs	r3, #12
 8006888:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006890:	10db      	asrs	r3, r3, #3
 8006892:	b21b      	sxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800689c:	4413      	add	r3, r2
 800689e:	7efa      	ldrb	r2, [r7, #27]
 80068a0:	4910      	ldr	r1, [pc, #64]	; (80068e4 <tcp_slowtmr+0x28c>)
 80068a2:	5c8a      	ldrb	r2, [r1, r2]
 80068a4:	4093      	lsls	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80068ae:	4293      	cmp	r3, r2
 80068b0:	dc1a      	bgt.n	80068e8 <tcp_slowtmr+0x290>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	b21a      	sxth	r2, r3
 80068b6:	e019      	b.n	80068ec <tcp_slowtmr+0x294>
 80068b8:	20008ba4 	.word	0x20008ba4
 80068bc:	20000132 	.word	0x20000132
 80068c0:	20008ba0 	.word	0x20008ba0
 80068c4:	08010440 	.word	0x08010440
 80068c8:	08010784 	.word	0x08010784
 80068cc:	08010484 	.word	0x08010484
 80068d0:	080107b0 	.word	0x080107b0
 80068d4:	080107dc 	.word	0x080107dc
 80068d8:	0801080c 	.word	0x0801080c
 80068dc:	08010840 	.word	0x08010840
 80068e0:	08012404 	.word	0x08012404
 80068e4:	080123f4 	.word	0x080123f4
 80068e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80068f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f4:	2200      	movs	r2, #0
 80068f6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006904:	4293      	cmp	r3, r2
 8006906:	bf28      	it	cs
 8006908:	4613      	movcs	r3, r2
 800690a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800690c:	8a7b      	ldrh	r3, [r7, #18]
 800690e:	085b      	lsrs	r3, r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	b29b      	uxth	r3, r3
 8006926:	429a      	cmp	r2, r3
 8006928:	d206      	bcs.n	8006938 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	b29a      	uxth	r2, r3
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	2200      	movs	r2, #0
 8006946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800694a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800694c:	f004 f818 	bl	800a980 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	7d1b      	ldrb	r3, [r3, #20]
 8006954:	2b06      	cmp	r3, #6
 8006956:	d111      	bne.n	800697c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	8b5b      	ldrh	r3, [r3, #26]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006964:	4b9d      	ldr	r3, [pc, #628]	; (8006bdc <tcp_slowtmr+0x584>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b28      	cmp	r3, #40	; 0x28
 8006970:	d904      	bls.n	800697c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006976:	3301      	adds	r3, #1
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	7a5b      	ldrb	r3, [r3, #9]
 8006980:	f003 0308 	and.w	r3, r3, #8
 8006984:	2b00      	cmp	r3, #0
 8006986:	d04c      	beq.n	8006a22 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800698c:	2b04      	cmp	r3, #4
 800698e:	d003      	beq.n	8006998 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006994:	2b07      	cmp	r3, #7
 8006996:	d144      	bne.n	8006a22 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006998:	4b90      	ldr	r3, [pc, #576]	; (8006bdc <tcp_slowtmr+0x584>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80069ac:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80069b0:	498b      	ldr	r1, [pc, #556]	; (8006be0 <tcp_slowtmr+0x588>)
 80069b2:	fba1 1303 	umull	r1, r3, r1, r3
 80069b6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d90a      	bls.n	80069d2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80069bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069c0:	3301      	adds	r3, #1
 80069c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80069c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069ca:	3301      	adds	r3, #1
 80069cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069d0:	e027      	b.n	8006a22 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069d2:	4b82      	ldr	r3, [pc, #520]	; (8006bdc <tcp_slowtmr+0x584>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80069e8:	4618      	mov	r0, r3
 80069ea:	4b7e      	ldr	r3, [pc, #504]	; (8006be4 <tcp_slowtmr+0x58c>)
 80069ec:	fb03 f300 	mul.w	r3, r3, r0
 80069f0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80069f2:	497b      	ldr	r1, [pc, #492]	; (8006be0 <tcp_slowtmr+0x588>)
 80069f4:	fba1 1303 	umull	r1, r3, r1, r3
 80069f8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d911      	bls.n	8006a22 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80069fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a00:	f004 fac4 	bl	800af8c <tcp_keepalive>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006a0a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d107      	bne.n	8006a22 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006a18:	3301      	adds	r3, #1
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d011      	beq.n	8006a4e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006a2a:	4b6c      	ldr	r3, [pc, #432]	; (8006bdc <tcp_slowtmr+0x584>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	1ad2      	subs	r2, r2, r3
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	440b      	add	r3, r1
 8006a42:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d302      	bcc.n	8006a4e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a4a:	f000 fddb 	bl	8007604 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	7d1b      	ldrb	r3, [r3, #20]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d10b      	bne.n	8006a6e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006a56:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <tcp_slowtmr+0x584>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b28      	cmp	r3, #40	; 0x28
 8006a62:	d904      	bls.n	8006a6e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a68:	3301      	adds	r3, #1
 8006a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	7d1b      	ldrb	r3, [r3, #20]
 8006a72:	2b09      	cmp	r3, #9
 8006a74:	d10b      	bne.n	8006a8e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006a76:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <tcp_slowtmr+0x584>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2bf0      	cmp	r3, #240	; 0xf0
 8006a82:	d904      	bls.n	8006a8e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a88:	3301      	adds	r3, #1
 8006a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d060      	beq.n	8006b58 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aa0:	f000 fbfc 	bl	800729c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d010      	beq.n	8006acc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006aaa:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <tcp_slowtmr+0x590>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d106      	bne.n	8006ac2 <tcp_slowtmr+0x46a>
 8006ab4:	4b4d      	ldr	r3, [pc, #308]	; (8006bec <tcp_slowtmr+0x594>)
 8006ab6:	f240 526d 	movw	r2, #1389	; 0x56d
 8006aba:	494d      	ldr	r1, [pc, #308]	; (8006bf0 <tcp_slowtmr+0x598>)
 8006abc:	484d      	ldr	r0, [pc, #308]	; (8006bf4 <tcp_slowtmr+0x59c>)
 8006abe:	f007 fd01 	bl	800e4c4 <iprintf>
        prev->next = pcb->next;
 8006ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	e00f      	b.n	8006aec <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006acc:	4b46      	ldr	r3, [pc, #280]	; (8006be8 <tcp_slowtmr+0x590>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d006      	beq.n	8006ae4 <tcp_slowtmr+0x48c>
 8006ad6:	4b45      	ldr	r3, [pc, #276]	; (8006bec <tcp_slowtmr+0x594>)
 8006ad8:	f240 5271 	movw	r2, #1393	; 0x571
 8006adc:	4946      	ldr	r1, [pc, #280]	; (8006bf8 <tcp_slowtmr+0x5a0>)
 8006ade:	4845      	ldr	r0, [pc, #276]	; (8006bf4 <tcp_slowtmr+0x59c>)
 8006ae0:	f007 fcf0 	bl	800e4c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a3f      	ldr	r2, [pc, #252]	; (8006be8 <tcp_slowtmr+0x590>)
 8006aea:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d013      	beq.n	8006b1c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006afc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	3304      	adds	r3, #4
 8006b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b04:	8ad2      	ldrh	r2, [r2, #22]
 8006b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b08:	8b09      	ldrh	r1, [r1, #24]
 8006b0a:	9102      	str	r1, [sp, #8]
 8006b0c:	9201      	str	r2, [sp, #4]
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	462b      	mov	r3, r5
 8006b12:	4622      	mov	r2, r4
 8006b14:	4601      	mov	r1, r0
 8006b16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b18:	f004 f984 	bl	800ae24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	7d1b      	ldrb	r3, [r3, #20]
 8006b26:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006b32:	6838      	ldr	r0, [r7, #0]
 8006b34:	f7ff f9f2 	bl	8005f1c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006b38:	4b30      	ldr	r3, [pc, #192]	; (8006bfc <tcp_slowtmr+0x5a4>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d004      	beq.n	8006b4e <tcp_slowtmr+0x4f6>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f06f 010c 	mvn.w	r1, #12
 8006b4a:	68b8      	ldr	r0, [r7, #8]
 8006b4c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006b4e:	4b2b      	ldr	r3, [pc, #172]	; (8006bfc <tcp_slowtmr+0x5a4>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d037      	beq.n	8006bc6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006b56:	e590      	b.n	800667a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	7f1b      	ldrb	r3, [r3, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	7f1a      	ldrb	r2, [r3, #28]
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	7f5b      	ldrb	r3, [r3, #29]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d325      	bcc.n	8006bc6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006b80:	4b1e      	ldr	r3, [pc, #120]	; (8006bfc <tcp_slowtmr+0x5a4>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <tcp_slowtmr+0x550>
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b98:	6912      	ldr	r2, [r2, #16]
 8006b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	4798      	blx	r3
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006ba6:	e002      	b.n	8006bae <tcp_slowtmr+0x556>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006bae:	4b13      	ldr	r3, [pc, #76]	; (8006bfc <tcp_slowtmr+0x5a4>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d000      	beq.n	8006bb8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006bb6:	e560      	b.n	800667a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006bb8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc2:	f003 fb7b 	bl	800a2bc <tcp_output>
  while (pcb != NULL) {
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f47f ad5c 	bne.w	8006686 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006bd2:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <tcp_slowtmr+0x5a8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006bd8:	e067      	b.n	8006caa <tcp_slowtmr+0x652>
 8006bda:	bf00      	nop
 8006bdc:	20008ba4 	.word	0x20008ba4
 8006be0:	10624dd3 	.word	0x10624dd3
 8006be4:	000124f8 	.word	0x000124f8
 8006be8:	20008ba0 	.word	0x20008ba0
 8006bec:	08010440 	.word	0x08010440
 8006bf0:	08010878 	.word	0x08010878
 8006bf4:	08010484 	.word	0x08010484
 8006bf8:	080108a4 	.word	0x080108a4
 8006bfc:	20008b9c 	.word	0x20008b9c
 8006c00:	20008bb0 	.word	0x20008bb0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c06:	7d1b      	ldrb	r3, [r3, #20]
 8006c08:	2b0a      	cmp	r3, #10
 8006c0a:	d006      	beq.n	8006c1a <tcp_slowtmr+0x5c2>
 8006c0c:	4b2b      	ldr	r3, [pc, #172]	; (8006cbc <tcp_slowtmr+0x664>)
 8006c0e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006c12:	492b      	ldr	r1, [pc, #172]	; (8006cc0 <tcp_slowtmr+0x668>)
 8006c14:	482b      	ldr	r0, [pc, #172]	; (8006cc4 <tcp_slowtmr+0x66c>)
 8006c16:	f007 fc55 	bl	800e4c4 <iprintf>
    pcb_remove = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006c20:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <tcp_slowtmr+0x670>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2bf0      	cmp	r3, #240	; 0xf0
 8006c2c:	d904      	bls.n	8006c38 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c32:	3301      	adds	r3, #1
 8006c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d02f      	beq.n	8006ca0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c42:	f000 fb2b 	bl	800729c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d010      	beq.n	8006c6e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006c4c:	4b1f      	ldr	r3, [pc, #124]	; (8006ccc <tcp_slowtmr+0x674>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d106      	bne.n	8006c64 <tcp_slowtmr+0x60c>
 8006c56:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <tcp_slowtmr+0x664>)
 8006c58:	f240 52af 	movw	r2, #1455	; 0x5af
 8006c5c:	491c      	ldr	r1, [pc, #112]	; (8006cd0 <tcp_slowtmr+0x678>)
 8006c5e:	4819      	ldr	r0, [pc, #100]	; (8006cc4 <tcp_slowtmr+0x66c>)
 8006c60:	f007 fc30 	bl	800e4c4 <iprintf>
        prev->next = pcb->next;
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	e00f      	b.n	8006c8e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006c6e:	4b17      	ldr	r3, [pc, #92]	; (8006ccc <tcp_slowtmr+0x674>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d006      	beq.n	8006c86 <tcp_slowtmr+0x62e>
 8006c78:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <tcp_slowtmr+0x664>)
 8006c7a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006c7e:	4915      	ldr	r1, [pc, #84]	; (8006cd4 <tcp_slowtmr+0x67c>)
 8006c80:	4810      	ldr	r0, [pc, #64]	; (8006cc4 <tcp_slowtmr+0x66c>)
 8006c82:	f007 fc1f 	bl	800e4c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	4a10      	ldr	r2, [pc, #64]	; (8006ccc <tcp_slowtmr+0x674>)
 8006c8c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006c98:	69f8      	ldr	r0, [r7, #28]
 8006c9a:	f7ff f93f 	bl	8005f1c <tcp_free>
 8006c9e:	e004      	b.n	8006caa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1a9      	bne.n	8006c04 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	3730      	adds	r7, #48	; 0x30
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	08010440 	.word	0x08010440
 8006cc0:	080108d0 	.word	0x080108d0
 8006cc4:	08010484 	.word	0x08010484
 8006cc8:	20008ba4 	.word	0x20008ba4
 8006ccc:	20008bb0 	.word	0x20008bb0
 8006cd0:	08010900 	.word	0x08010900
 8006cd4:	08010928 	.word	0x08010928

08006cd8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006cde:	4b2d      	ldr	r3, [pc, #180]	; (8006d94 <tcp_fasttmr+0xbc>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <tcp_fasttmr+0xbc>)
 8006ce8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006cea:	4b2b      	ldr	r3, [pc, #172]	; (8006d98 <tcp_fasttmr+0xc0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006cf0:	e048      	b.n	8006d84 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7f9a      	ldrb	r2, [r3, #30]
 8006cf6:	4b27      	ldr	r3, [pc, #156]	; (8006d94 <tcp_fasttmr+0xbc>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d03f      	beq.n	8006d7e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006cfe:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <tcp_fasttmr+0xbc>)
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8b5b      	ldrh	r3, [r3, #26]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d010      	beq.n	8006d34 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8b5b      	ldrh	r3, [r3, #26]
 8006d16:	f043 0302 	orr.w	r3, r3, #2
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f003 facb 	bl	800a2bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	8b5b      	ldrh	r3, [r3, #26]
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8b5b      	ldrh	r3, [r3, #26]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d009      	beq.n	8006d54 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8b5b      	ldrh	r3, [r3, #26]
 8006d44:	f023 0308 	bic.w	r3, r3, #8
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fa78 	bl	8006244 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00a      	beq.n	8006d78 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006d62:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <tcp_fasttmr+0xc4>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 f819 	bl	8006da0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <tcp_fasttmr+0xc4>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d000      	beq.n	8006d78 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006d76:	e7b8      	b.n	8006cea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	e002      	b.n	8006d84 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1b3      	bne.n	8006cf2 <tcp_fasttmr+0x1a>
    }
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000132 	.word	0x20000132
 8006d98:	20008ba0 	.word	0x20008ba0
 8006d9c:	20008b9c 	.word	0x20008b9c

08006da0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <tcp_process_refused_data+0x22>
 8006dae:	4b37      	ldr	r3, [pc, #220]	; (8006e8c <tcp_process_refused_data+0xec>)
 8006db0:	f240 6209 	movw	r2, #1545	; 0x609
 8006db4:	4936      	ldr	r1, [pc, #216]	; (8006e90 <tcp_process_refused_data+0xf0>)
 8006db6:	4837      	ldr	r0, [pc, #220]	; (8006e94 <tcp_process_refused_data+0xf4>)
 8006db8:	f007 fb84 	bl	800e4c4 <iprintf>
 8006dbc:	f06f 030f 	mvn.w	r3, #15
 8006dc0:	e060      	b.n	8006e84 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc6:	7b5b      	ldrb	r3, [r3, #13]
 8006dc8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00b      	beq.n	8006df8 <tcp_process_refused_data+0x58>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6918      	ldr	r0, [r3, #16]
 8006dea:	2300      	movs	r3, #0
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	47a0      	blx	r4
 8006df2:	4603      	mov	r3, r0
 8006df4:	73fb      	strb	r3, [r7, #15]
 8006df6:	e007      	b.n	8006e08 <tcp_process_refused_data+0x68>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	2000      	movs	r0, #0
 8006e00:	f000 f8a4 	bl	8006f4c <tcp_recv_null>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d12a      	bne.n	8006e66 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	f003 0320 	and.w	r3, r3, #32
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d033      	beq.n	8006e82 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006e22:	d005      	beq.n	8006e30 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e28:	3301      	adds	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <tcp_process_refused_data+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6918      	ldr	r0, [r3, #16]
 8006e44:	2300      	movs	r3, #0
 8006e46:	2200      	movs	r2, #0
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	47a0      	blx	r4
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e001      	b.n	8006e56 <tcp_process_refused_data+0xb6>
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e5a:	f113 0f0d 	cmn.w	r3, #13
 8006e5e:	d110      	bne.n	8006e82 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006e60:	f06f 030c 	mvn.w	r3, #12
 8006e64:	e00e      	b.n	8006e84 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e6a:	f113 0f0d 	cmn.w	r3, #13
 8006e6e:	d102      	bne.n	8006e76 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006e70:	f06f 030c 	mvn.w	r3, #12
 8006e74:	e006      	b.n	8006e84 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006e7c:	f06f 0304 	mvn.w	r3, #4
 8006e80:	e000      	b.n	8006e84 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd90      	pop	{r4, r7, pc}
 8006e8c:	08010440 	.word	0x08010440
 8006e90:	08010950 	.word	0x08010950
 8006e94:	08010484 	.word	0x08010484

08006e98 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006ea0:	e007      	b.n	8006eb2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f80a 	bl	8006ec2 <tcp_seg_free>
    seg = next;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f4      	bne.n	8006ea2 <tcp_segs_free+0xa>
  }
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe fcdb 	bl	8005898 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	2003      	movs	r0, #3
 8006ee6:	f7fd fec5 	bl	8004c74 <memp_free>
  }
}
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <tcp_seg_copy+0x1c>
 8006f02:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <tcp_seg_copy+0x4c>)
 8006f04:	f240 6282 	movw	r2, #1666	; 0x682
 8006f08:	490e      	ldr	r1, [pc, #56]	; (8006f44 <tcp_seg_copy+0x50>)
 8006f0a:	480f      	ldr	r0, [pc, #60]	; (8006f48 <tcp_seg_copy+0x54>)
 8006f0c:	f007 fada 	bl	800e4c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006f10:	2003      	movs	r0, #3
 8006f12:	f7fd fe63 	bl	8004bdc <memp_malloc>
 8006f16:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <tcp_seg_copy+0x2e>
    return NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e00a      	b.n	8006f38 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006f22:	2210      	movs	r2, #16
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f007 fa9c 	bl	800e464 <memcpy>
  pbuf_ref(cseg->p);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7fe fd51 	bl	80059d8 <pbuf_ref>
  return cseg;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	08010440 	.word	0x08010440
 8006f44:	08010994 	.word	0x08010994
 8006f48:	08010484 	.word	0x08010484

08006f4c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
 8006f58:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <tcp_recv_null+0x28>
 8006f60:	4b12      	ldr	r3, [pc, #72]	; (8006fac <tcp_recv_null+0x60>)
 8006f62:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006f66:	4912      	ldr	r1, [pc, #72]	; (8006fb0 <tcp_recv_null+0x64>)
 8006f68:	4812      	ldr	r0, [pc, #72]	; (8006fb4 <tcp_recv_null+0x68>)
 8006f6a:	f007 faab 	bl	800e4c4 <iprintf>
 8006f6e:	f06f 030f 	mvn.w	r3, #15
 8006f72:	e016      	b.n	8006fa2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	891b      	ldrh	r3, [r3, #8]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	68b8      	ldr	r0, [r7, #8]
 8006f82:	f7ff fb19 	bl	80065b8 <tcp_recved>
    pbuf_free(p);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fe fc86 	bl	8005898 <pbuf_free>
 8006f8c:	e008      	b.n	8006fa0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006f96:	68b8      	ldr	r0, [r7, #8]
 8006f98:	f7ff f9be 	bl	8006318 <tcp_close>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	e000      	b.n	8006fa2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	08010440 	.word	0x08010440
 8006fb0:	080109b0 	.word	0x080109b0
 8006fb4:	08010484 	.word	0x08010484

08006fb8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	db01      	blt.n	8006fce <tcp_kill_prio+0x16>
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	e000      	b.n	8006fd0 <tcp_kill_prio+0x18>
 8006fce:	237f      	movs	r3, #127	; 0x7f
 8006fd0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d034      	beq.n	8007042 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fe6:	4b19      	ldr	r3, [pc, #100]	; (800704c <tcp_kill_prio+0x94>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e01f      	b.n	800702e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	7d5b      	ldrb	r3, [r3, #21]
 8006ff2:	7afa      	ldrb	r2, [r7, #11]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d80c      	bhi.n	8007012 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006ffc:	7afa      	ldrb	r2, [r7, #11]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d112      	bne.n	8007028 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <tcp_kill_prio+0x98>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	429a      	cmp	r2, r3
 8007010:	d80a      	bhi.n	8007028 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <tcp_kill_prio+0x98>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	7d5b      	ldrb	r3, [r3, #21]
 8007026:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1dc      	bne.n	8006fee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f7ff fa56 	bl	80064ec <tcp_abort>
 8007040:	e000      	b.n	8007044 <tcp_kill_prio+0x8c>
    return;
 8007042:	bf00      	nop
  }
}
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20008ba0 	.word	0x20008ba0
 8007050:	20008ba4 	.word	0x20008ba4

08007054 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	2b08      	cmp	r3, #8
 8007062:	d009      	beq.n	8007078 <tcp_kill_state+0x24>
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b09      	cmp	r3, #9
 8007068:	d006      	beq.n	8007078 <tcp_kill_state+0x24>
 800706a:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <tcp_kill_state+0x80>)
 800706c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007070:	4919      	ldr	r1, [pc, #100]	; (80070d8 <tcp_kill_state+0x84>)
 8007072:	481a      	ldr	r0, [pc, #104]	; (80070dc <tcp_kill_state+0x88>)
 8007074:	f007 fa26 	bl	800e4c4 <iprintf>

  inactivity = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007080:	4b17      	ldr	r3, [pc, #92]	; (80070e0 <tcp_kill_state+0x8c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e017      	b.n	80070b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	7d1b      	ldrb	r3, [r3, #20]
 800708c:	79fa      	ldrb	r2, [r7, #7]
 800708e:	429a      	cmp	r2, r3
 8007090:	d10f      	bne.n	80070b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007092:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <tcp_kill_state+0x90>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d807      	bhi.n	80070b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80070a2:	4b10      	ldr	r3, [pc, #64]	; (80070e4 <tcp_kill_state+0x90>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1e4      	bne.n	8007088 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80070c4:	2100      	movs	r1, #0
 80070c6:	6938      	ldr	r0, [r7, #16]
 80070c8:	f7ff f952 	bl	8006370 <tcp_abandon>
  }
}
 80070cc:	bf00      	nop
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	08010440 	.word	0x08010440
 80070d8:	080109cc 	.word	0x080109cc
 80070dc:	08010484 	.word	0x08010484
 80070e0:	20008ba0 	.word	0x20008ba0
 80070e4:	20008ba4 	.word	0x20008ba4

080070e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070f6:	4b12      	ldr	r3, [pc, #72]	; (8007140 <tcp_kill_timewait+0x58>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	e012      	b.n	8007124 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <tcp_kill_timewait+0x5c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	429a      	cmp	r2, r3
 800710c:	d807      	bhi.n	800711e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800710e:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <tcp_kill_timewait+0x5c>)
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e9      	bne.n	80070fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007130:	68b8      	ldr	r0, [r7, #8]
 8007132:	f7ff f9db 	bl	80064ec <tcp_abort>
  }
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	20008bb0 	.word	0x20008bb0
 8007144:	20008ba4 	.word	0x20008ba4

08007148 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <tcp_handle_closepend+0x48>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007154:	e014      	b.n	8007180 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	8b5b      	ldrh	r3, [r3, #26]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b00      	cmp	r3, #0
 8007166:	d009      	beq.n	800717c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8b5b      	ldrh	r3, [r3, #26]
 800716c:	f023 0308 	bic.w	r3, r3, #8
 8007170:	b29a      	uxth	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff f864 	bl	8006244 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e7      	bne.n	8007156 <tcp_handle_closepend+0xe>
  }
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20008ba0 	.word	0x20008ba0

08007194 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800719e:	2001      	movs	r0, #1
 80071a0:	f7fd fd1c 	bl	8004bdc <memp_malloc>
 80071a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d126      	bne.n	80071fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80071ac:	f7ff ffcc 	bl	8007148 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80071b0:	f7ff ff9a 	bl	80070e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071b4:	2001      	movs	r0, #1
 80071b6:	f7fd fd11 	bl	8004bdc <memp_malloc>
 80071ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d11b      	bne.n	80071fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80071c2:	2009      	movs	r0, #9
 80071c4:	f7ff ff46 	bl	8007054 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071c8:	2001      	movs	r0, #1
 80071ca:	f7fd fd07 	bl	8004bdc <memp_malloc>
 80071ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d111      	bne.n	80071fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80071d6:	2008      	movs	r0, #8
 80071d8:	f7ff ff3c 	bl	8007054 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071dc:	2001      	movs	r0, #1
 80071de:	f7fd fcfd 	bl	8004bdc <memp_malloc>
 80071e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d107      	bne.n	80071fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fee3 	bl	8006fb8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80071f2:	2001      	movs	r0, #1
 80071f4:	f7fd fcf2 	bl	8004bdc <memp_malloc>
 80071f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d03f      	beq.n	8007280 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007200:	229c      	movs	r2, #156	; 0x9c
 8007202:	2100      	movs	r1, #0
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f007 f955 	bl	800e4b4 <memset>
    pcb->prio = prio;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	79fa      	ldrb	r2, [r7, #7]
 800720e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007216:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007220:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22ff      	movs	r2, #255	; 0xff
 800722e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007236:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2206      	movs	r2, #6
 800723c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2206      	movs	r2, #6
 8007244:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800724c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007256:	4b0d      	ldr	r3, [pc, #52]	; (800728c <tcp_alloc+0xf8>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800725e:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <tcp_alloc+0xfc>)
 8007260:	781a      	ldrb	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800726c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a08      	ldr	r2, [pc, #32]	; (8007294 <tcp_alloc+0x100>)
 8007274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4a07      	ldr	r2, [pc, #28]	; (8007298 <tcp_alloc+0x104>)
 800727c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007280:	68fb      	ldr	r3, [r7, #12]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20008ba4 	.word	0x20008ba4
 8007290:	20000132 	.word	0x20000132
 8007294:	08006f4d 	.word	0x08006f4d
 8007298:	006ddd00 	.word	0x006ddd00

0800729c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d107      	bne.n	80072ba <tcp_pcb_purge+0x1e>
 80072aa:	4b21      	ldr	r3, [pc, #132]	; (8007330 <tcp_pcb_purge+0x94>)
 80072ac:	f640 0251 	movw	r2, #2129	; 0x851
 80072b0:	4920      	ldr	r1, [pc, #128]	; (8007334 <tcp_pcb_purge+0x98>)
 80072b2:	4821      	ldr	r0, [pc, #132]	; (8007338 <tcp_pcb_purge+0x9c>)
 80072b4:	f007 f906 	bl	800e4c4 <iprintf>
 80072b8:	e037      	b.n	800732a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	7d1b      	ldrb	r3, [r3, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d033      	beq.n	800732a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80072c6:	2b0a      	cmp	r3, #10
 80072c8:	d02f      	beq.n	800732a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d02b      	beq.n	800732a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fada 	bl	8005898 <pbuf_free>
      pcb->refused_data = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f986 	bl	8007604 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fdc7 	bl	8006e98 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fdc2 	bl	8006e98 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	66da      	str	r2, [r3, #108]	; 0x6c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	08010440 	.word	0x08010440
 8007334:	08010a8c 	.word	0x08010a8c
 8007338:	08010484 	.word	0x08010484

0800733c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <tcp_pcb_remove+0x1e>
 800734c:	4b3e      	ldr	r3, [pc, #248]	; (8007448 <tcp_pcb_remove+0x10c>)
 800734e:	f640 0283 	movw	r2, #2179	; 0x883
 8007352:	493e      	ldr	r1, [pc, #248]	; (800744c <tcp_pcb_remove+0x110>)
 8007354:	483e      	ldr	r0, [pc, #248]	; (8007450 <tcp_pcb_remove+0x114>)
 8007356:	f007 f8b5 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d106      	bne.n	800736e <tcp_pcb_remove+0x32>
 8007360:	4b39      	ldr	r3, [pc, #228]	; (8007448 <tcp_pcb_remove+0x10c>)
 8007362:	f640 0284 	movw	r2, #2180	; 0x884
 8007366:	493b      	ldr	r1, [pc, #236]	; (8007454 <tcp_pcb_remove+0x118>)
 8007368:	4839      	ldr	r0, [pc, #228]	; (8007450 <tcp_pcb_remove+0x114>)
 800736a:	f007 f8ab 	bl	800e4c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d105      	bne.n	8007384 <tcp_pcb_remove+0x48>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e013      	b.n	80073ac <tcp_pcb_remove+0x70>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e00c      	b.n	80073a6 <tcp_pcb_remove+0x6a>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d104      	bne.n	80073a0 <tcp_pcb_remove+0x64>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	60da      	str	r2, [r3, #12]
 800739e:	e005      	b.n	80073ac <tcp_pcb_remove+0x70>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1ef      	bne.n	800738c <tcp_pcb_remove+0x50>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80073b2:	6838      	ldr	r0, [r7, #0]
 80073b4:	f7ff ff72 	bl	800729c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	7d1b      	ldrb	r3, [r3, #20]
 80073bc:	2b0a      	cmp	r3, #10
 80073be:	d013      	beq.n	80073e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d00f      	beq.n	80073e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	8b5b      	ldrh	r3, [r3, #26]
 80073cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d009      	beq.n	80073e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	8b5b      	ldrh	r3, [r3, #26]
 80073d8:	f043 0302 	orr.w	r3, r3, #2
 80073dc:	b29a      	uxth	r2, r3
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80073e2:	6838      	ldr	r0, [r7, #0]
 80073e4:	f002 ff6a 	bl	800a2bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	7d1b      	ldrb	r3, [r3, #20]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d020      	beq.n	8007432 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <tcp_pcb_remove+0xca>
 80073f8:	4b13      	ldr	r3, [pc, #76]	; (8007448 <tcp_pcb_remove+0x10c>)
 80073fa:	f640 0293 	movw	r2, #2195	; 0x893
 80073fe:	4916      	ldr	r1, [pc, #88]	; (8007458 <tcp_pcb_remove+0x11c>)
 8007400:	4813      	ldr	r0, [pc, #76]	; (8007450 <tcp_pcb_remove+0x114>)
 8007402:	f007 f85f 	bl	800e4c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	2b00      	cmp	r3, #0
 800740c:	d006      	beq.n	800741c <tcp_pcb_remove+0xe0>
 800740e:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <tcp_pcb_remove+0x10c>)
 8007410:	f640 0294 	movw	r2, #2196	; 0x894
 8007414:	4911      	ldr	r1, [pc, #68]	; (800745c <tcp_pcb_remove+0x120>)
 8007416:	480e      	ldr	r0, [pc, #56]	; (8007450 <tcp_pcb_remove+0x114>)
 8007418:	f007 f854 	bl	800e4c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007420:	2b00      	cmp	r3, #0
 8007422:	d006      	beq.n	8007432 <tcp_pcb_remove+0xf6>
 8007424:	4b08      	ldr	r3, [pc, #32]	; (8007448 <tcp_pcb_remove+0x10c>)
 8007426:	f640 0296 	movw	r2, #2198	; 0x896
 800742a:	490d      	ldr	r1, [pc, #52]	; (8007460 <tcp_pcb_remove+0x124>)
 800742c:	4808      	ldr	r0, [pc, #32]	; (8007450 <tcp_pcb_remove+0x114>)
 800742e:	f007 f849 	bl	800e4c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2200      	movs	r2, #0
 8007436:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	08010440 	.word	0x08010440
 800744c:	08010aa8 	.word	0x08010aa8
 8007450:	08010484 	.word	0x08010484
 8007454:	08010ac4 	.word	0x08010ac4
 8007458:	08010ae4 	.word	0x08010ae4
 800745c:	08010afc 	.word	0x08010afc
 8007460:	08010b18 	.word	0x08010b18

08007464 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <tcp_next_iss+0x1c>
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <tcp_next_iss+0x38>)
 8007474:	f640 02af 	movw	r2, #2223	; 0x8af
 8007478:	4909      	ldr	r1, [pc, #36]	; (80074a0 <tcp_next_iss+0x3c>)
 800747a:	480a      	ldr	r0, [pc, #40]	; (80074a4 <tcp_next_iss+0x40>)
 800747c:	f007 f822 	bl	800e4c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007480:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <tcp_next_iss+0x44>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4b09      	ldr	r3, [pc, #36]	; (80074ac <tcp_next_iss+0x48>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4413      	add	r3, r2
 800748a:	4a07      	ldr	r2, [pc, #28]	; (80074a8 <tcp_next_iss+0x44>)
 800748c:	6013      	str	r3, [r2, #0]
  return iss;
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <tcp_next_iss+0x44>)
 8007490:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	08010440 	.word	0x08010440
 80074a0:	08010b30 	.word	0x08010b30
 80074a4:	08010484 	.word	0x08010484
 80074a8:	2000002c 	.word	0x2000002c
 80074ac:	20008ba4 	.word	0x20008ba4

080074b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <tcp_eff_send_mss_netif+0x22>
 80074c4:	4b14      	ldr	r3, [pc, #80]	; (8007518 <tcp_eff_send_mss_netif+0x68>)
 80074c6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80074ca:	4914      	ldr	r1, [pc, #80]	; (800751c <tcp_eff_send_mss_netif+0x6c>)
 80074cc:	4814      	ldr	r0, [pc, #80]	; (8007520 <tcp_eff_send_mss_netif+0x70>)
 80074ce:	f006 fff9 	bl	800e4c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80074d8:	89fb      	ldrh	r3, [r7, #14]
 80074da:	e019      	b.n	8007510 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80074e2:	8afb      	ldrh	r3, [r7, #22]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d012      	beq.n	800750e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80074e8:	2328      	movs	r3, #40	; 0x28
 80074ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80074ec:	8afa      	ldrh	r2, [r7, #22]
 80074ee:	8abb      	ldrh	r3, [r7, #20]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d904      	bls.n	80074fe <tcp_eff_send_mss_netif+0x4e>
 80074f4:	8afa      	ldrh	r2, [r7, #22]
 80074f6:	8abb      	ldrh	r3, [r7, #20]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	e000      	b.n	8007500 <tcp_eff_send_mss_netif+0x50>
 80074fe:	2300      	movs	r3, #0
 8007500:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007502:	8a7a      	ldrh	r2, [r7, #18]
 8007504:	89fb      	ldrh	r3, [r7, #14]
 8007506:	4293      	cmp	r3, r2
 8007508:	bf28      	it	cs
 800750a:	4613      	movcs	r3, r2
 800750c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800750e:	89fb      	ldrh	r3, [r7, #14]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	08010440 	.word	0x08010440
 800751c:	08010b4c 	.word	0x08010b4c
 8007520:	08010484 	.word	0x08010484

08007524 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d119      	bne.n	800756c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007538:	4b10      	ldr	r3, [pc, #64]	; (800757c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800753a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800753e:	4910      	ldr	r1, [pc, #64]	; (8007580 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007540:	4810      	ldr	r0, [pc, #64]	; (8007584 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007542:	f006 ffbf 	bl	800e4c4 <iprintf>

  while (pcb != NULL) {
 8007546:	e011      	b.n	800756c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d108      	bne.n	8007566 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f7fe ffc6 	bl	80064ec <tcp_abort>
      pcb = next;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e002      	b.n	800756c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1ea      	bne.n	8007548 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	08010440 	.word	0x08010440
 8007580:	08010b74 	.word	0x08010b74
 8007584:	08010484 	.word	0x08010484

08007588 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d02a      	beq.n	80075ee <tcp_netif_ip_addr_changed+0x66>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d026      	beq.n	80075ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80075a0:	4b15      	ldr	r3, [pc, #84]	; (80075f8 <tcp_netif_ip_addr_changed+0x70>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff ffbc 	bl	8007524 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80075ac:	4b13      	ldr	r3, [pc, #76]	; (80075fc <tcp_netif_ip_addr_changed+0x74>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff ffb6 	bl	8007524 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d017      	beq.n	80075ee <tcp_netif_ip_addr_changed+0x66>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d013      	beq.n	80075ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <tcp_netif_ip_addr_changed+0x78>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e00c      	b.n	80075e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d103      	bne.n	80075e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	60fb      	str	r3, [r7, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1ef      	bne.n	80075ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20008ba0 	.word	0x20008ba0
 80075fc:	20008bac 	.word	0x20008bac
 8007600:	20008ba8 	.word	0x20008ba8

08007604 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007610:	2b00      	cmp	r3, #0
 8007612:	d007      	beq.n	8007624 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fc3d 	bl	8006e98 <tcp_segs_free>
    pcb->ooseq = NULL;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800762c:	b590      	push	{r4, r7, lr}
 800762e:	b08d      	sub	sp, #52	; 0x34
 8007630:	af04      	add	r7, sp, #16
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d105      	bne.n	8007648 <tcp_input+0x1c>
 800763c:	4b9b      	ldr	r3, [pc, #620]	; (80078ac <tcp_input+0x280>)
 800763e:	2283      	movs	r2, #131	; 0x83
 8007640:	499b      	ldr	r1, [pc, #620]	; (80078b0 <tcp_input+0x284>)
 8007642:	489c      	ldr	r0, [pc, #624]	; (80078b4 <tcp_input+0x288>)
 8007644:	f006 ff3e 	bl	800e4c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a9a      	ldr	r2, [pc, #616]	; (80078b8 <tcp_input+0x28c>)
 800764e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	895b      	ldrh	r3, [r3, #10]
 8007654:	2b13      	cmp	r3, #19
 8007656:	f240 83c4 	bls.w	8007de2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800765a:	4b98      	ldr	r3, [pc, #608]	; (80078bc <tcp_input+0x290>)
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	4a97      	ldr	r2, [pc, #604]	; (80078bc <tcp_input+0x290>)
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f005 ff61 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 83ba 	bne.w	8007de6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007672:	4b92      	ldr	r3, [pc, #584]	; (80078bc <tcp_input+0x290>)
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800767a:	2be0      	cmp	r3, #224	; 0xe0
 800767c:	f000 83b3 	beq.w	8007de6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007680:	4b8d      	ldr	r3, [pc, #564]	; (80078b8 <tcp_input+0x28c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	899b      	ldrh	r3, [r3, #12]
 8007686:	b29b      	uxth	r3, r3
 8007688:	4618      	mov	r0, r3
 800768a:	f7fc fe51 	bl	8004330 <lwip_htons>
 800768e:	4603      	mov	r3, r0
 8007690:	0b1b      	lsrs	r3, r3, #12
 8007692:	b29b      	uxth	r3, r3
 8007694:	b2db      	uxtb	r3, r3
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800769a:	7cbb      	ldrb	r3, [r7, #18]
 800769c:	2b13      	cmp	r3, #19
 800769e:	f240 83a4 	bls.w	8007dea <tcp_input+0x7be>
 80076a2:	7cbb      	ldrb	r3, [r7, #18]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	891b      	ldrh	r3, [r3, #8]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	f200 839d 	bhi.w	8007dea <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80076b0:	7cbb      	ldrb	r3, [r7, #18]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b14      	subs	r3, #20
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	4b81      	ldr	r3, [pc, #516]	; (80078c0 <tcp_input+0x294>)
 80076ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80076bc:	4b81      	ldr	r3, [pc, #516]	; (80078c4 <tcp_input+0x298>)
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	895a      	ldrh	r2, [r3, #10]
 80076c6:	7cbb      	ldrb	r3, [r7, #18]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d309      	bcc.n	80076e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80076ce:	4b7c      	ldr	r3, [pc, #496]	; (80078c0 <tcp_input+0x294>)
 80076d0:	881a      	ldrh	r2, [r3, #0]
 80076d2:	4b7d      	ldr	r3, [pc, #500]	; (80078c8 <tcp_input+0x29c>)
 80076d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80076d6:	7cbb      	ldrb	r3, [r7, #18]
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fe f856 	bl	800578c <pbuf_remove_header>
 80076e0:	e04e      	b.n	8007780 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <tcp_input+0xca>
 80076ea:	4b70      	ldr	r3, [pc, #448]	; (80078ac <tcp_input+0x280>)
 80076ec:	22c2      	movs	r2, #194	; 0xc2
 80076ee:	4977      	ldr	r1, [pc, #476]	; (80078cc <tcp_input+0x2a0>)
 80076f0:	4870      	ldr	r0, [pc, #448]	; (80078b4 <tcp_input+0x288>)
 80076f2:	f006 fee7 	bl	800e4c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80076f6:	2114      	movs	r1, #20
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fe f847 	bl	800578c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	895a      	ldrh	r2, [r3, #10]
 8007702:	4b71      	ldr	r3, [pc, #452]	; (80078c8 <tcp_input+0x29c>)
 8007704:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007706:	4b6e      	ldr	r3, [pc, #440]	; (80078c0 <tcp_input+0x294>)
 8007708:	881a      	ldrh	r2, [r3, #0]
 800770a:	4b6f      	ldr	r3, [pc, #444]	; (80078c8 <tcp_input+0x29c>)
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007712:	4b6d      	ldr	r3, [pc, #436]	; (80078c8 <tcp_input+0x29c>)
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fe f837 	bl	800578c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	895b      	ldrh	r3, [r3, #10]
 8007724:	8a3a      	ldrh	r2, [r7, #16]
 8007726:	429a      	cmp	r2, r3
 8007728:	f200 8361 	bhi.w	8007dee <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4a64      	ldr	r2, [pc, #400]	; (80078c4 <tcp_input+0x298>)
 8007734:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	8a3a      	ldrh	r2, [r7, #16]
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe f824 	bl	800578c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	891a      	ldrh	r2, [r3, #8]
 8007748:	8a3b      	ldrh	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	895b      	ldrh	r3, [r3, #10]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <tcp_input+0x13a>
 800775a:	4b54      	ldr	r3, [pc, #336]	; (80078ac <tcp_input+0x280>)
 800775c:	22df      	movs	r2, #223	; 0xdf
 800775e:	495c      	ldr	r1, [pc, #368]	; (80078d0 <tcp_input+0x2a4>)
 8007760:	4854      	ldr	r0, [pc, #336]	; (80078b4 <tcp_input+0x288>)
 8007762:	f006 feaf 	bl	800e4c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	891a      	ldrh	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	891b      	ldrh	r3, [r3, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d005      	beq.n	8007780 <tcp_input+0x154>
 8007774:	4b4d      	ldr	r3, [pc, #308]	; (80078ac <tcp_input+0x280>)
 8007776:	22e0      	movs	r2, #224	; 0xe0
 8007778:	4956      	ldr	r1, [pc, #344]	; (80078d4 <tcp_input+0x2a8>)
 800777a:	484e      	ldr	r0, [pc, #312]	; (80078b4 <tcp_input+0x288>)
 800777c:	f006 fea2 	bl	800e4c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007780:	4b4d      	ldr	r3, [pc, #308]	; (80078b8 <tcp_input+0x28c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	4a4b      	ldr	r2, [pc, #300]	; (80078b8 <tcp_input+0x28c>)
 800778a:	6814      	ldr	r4, [r2, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f7fc fdcf 	bl	8004330 <lwip_htons>
 8007792:	4603      	mov	r3, r0
 8007794:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007796:	4b48      	ldr	r3, [pc, #288]	; (80078b8 <tcp_input+0x28c>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	885b      	ldrh	r3, [r3, #2]
 800779c:	b29b      	uxth	r3, r3
 800779e:	4a46      	ldr	r2, [pc, #280]	; (80078b8 <tcp_input+0x28c>)
 80077a0:	6814      	ldr	r4, [r2, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fc fdc4 	bl	8004330 <lwip_htons>
 80077a8:	4603      	mov	r3, r0
 80077aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80077ac:	4b42      	ldr	r3, [pc, #264]	; (80078b8 <tcp_input+0x28c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	4a41      	ldr	r2, [pc, #260]	; (80078b8 <tcp_input+0x28c>)
 80077b4:	6814      	ldr	r4, [r2, #0]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fc fdcf 	bl	800435a <lwip_htonl>
 80077bc:	4603      	mov	r3, r0
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	6863      	ldr	r3, [r4, #4]
 80077c2:	4a45      	ldr	r2, [pc, #276]	; (80078d8 <tcp_input+0x2ac>)
 80077c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80077c6:	4b3c      	ldr	r3, [pc, #240]	; (80078b8 <tcp_input+0x28c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	4a3a      	ldr	r2, [pc, #232]	; (80078b8 <tcp_input+0x28c>)
 80077ce:	6814      	ldr	r4, [r2, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7fc fdc2 	bl	800435a <lwip_htonl>
 80077d6:	4603      	mov	r3, r0
 80077d8:	60a3      	str	r3, [r4, #8]
 80077da:	68a3      	ldr	r3, [r4, #8]
 80077dc:	4a3f      	ldr	r2, [pc, #252]	; (80078dc <tcp_input+0x2b0>)
 80077de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80077e0:	4b35      	ldr	r3, [pc, #212]	; (80078b8 <tcp_input+0x28c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	89db      	ldrh	r3, [r3, #14]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	4a33      	ldr	r2, [pc, #204]	; (80078b8 <tcp_input+0x28c>)
 80077ea:	6814      	ldr	r4, [r2, #0]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fc fd9f 	bl	8004330 <lwip_htons>
 80077f2:	4603      	mov	r3, r0
 80077f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80077f6:	4b30      	ldr	r3, [pc, #192]	; (80078b8 <tcp_input+0x28c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	899b      	ldrh	r3, [r3, #12]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fc fd96 	bl	8004330 <lwip_htons>
 8007804:	4603      	mov	r3, r0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800780c:	b2da      	uxtb	r2, r3
 800780e:	4b34      	ldr	r3, [pc, #208]	; (80078e0 <tcp_input+0x2b4>)
 8007810:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	891a      	ldrh	r2, [r3, #8]
 8007816:	4b33      	ldr	r3, [pc, #204]	; (80078e4 <tcp_input+0x2b8>)
 8007818:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800781a:	4b31      	ldr	r3, [pc, #196]	; (80078e0 <tcp_input+0x2b4>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00c      	beq.n	8007840 <tcp_input+0x214>
    tcplen++;
 8007826:	4b2f      	ldr	r3, [pc, #188]	; (80078e4 <tcp_input+0x2b8>)
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	3301      	adds	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	4b2d      	ldr	r3, [pc, #180]	; (80078e4 <tcp_input+0x2b8>)
 8007830:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	891a      	ldrh	r2, [r3, #8]
 8007836:	4b2b      	ldr	r3, [pc, #172]	; (80078e4 <tcp_input+0x2b8>)
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	f200 82d9 	bhi.w	8007df2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007844:	4b28      	ldr	r3, [pc, #160]	; (80078e8 <tcp_input+0x2bc>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	e09d      	b.n	8007988 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	7d1b      	ldrb	r3, [r3, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d105      	bne.n	8007860 <tcp_input+0x234>
 8007854:	4b15      	ldr	r3, [pc, #84]	; (80078ac <tcp_input+0x280>)
 8007856:	22fb      	movs	r2, #251	; 0xfb
 8007858:	4924      	ldr	r1, [pc, #144]	; (80078ec <tcp_input+0x2c0>)
 800785a:	4816      	ldr	r0, [pc, #88]	; (80078b4 <tcp_input+0x288>)
 800785c:	f006 fe32 	bl	800e4c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	7d1b      	ldrb	r3, [r3, #20]
 8007864:	2b0a      	cmp	r3, #10
 8007866:	d105      	bne.n	8007874 <tcp_input+0x248>
 8007868:	4b10      	ldr	r3, [pc, #64]	; (80078ac <tcp_input+0x280>)
 800786a:	22fc      	movs	r2, #252	; 0xfc
 800786c:	4920      	ldr	r1, [pc, #128]	; (80078f0 <tcp_input+0x2c4>)
 800786e:	4811      	ldr	r0, [pc, #68]	; (80078b4 <tcp_input+0x288>)
 8007870:	f006 fe28 	bl	800e4c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	7d1b      	ldrb	r3, [r3, #20]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d105      	bne.n	8007888 <tcp_input+0x25c>
 800787c:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <tcp_input+0x280>)
 800787e:	22fd      	movs	r2, #253	; 0xfd
 8007880:	491c      	ldr	r1, [pc, #112]	; (80078f4 <tcp_input+0x2c8>)
 8007882:	480c      	ldr	r0, [pc, #48]	; (80078b4 <tcp_input+0x288>)
 8007884:	f006 fe1e 	bl	800e4c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	7a1b      	ldrb	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d033      	beq.n	80078f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	7a1a      	ldrb	r2, [r3, #8]
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <tcp_input+0x290>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800789c:	3301      	adds	r3, #1
 800789e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d029      	beq.n	80078f8 <tcp_input+0x2cc>
      prev = pcb;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	61bb      	str	r3, [r7, #24]
      continue;
 80078a8:	e06b      	b.n	8007982 <tcp_input+0x356>
 80078aa:	bf00      	nop
 80078ac:	08010ba8 	.word	0x08010ba8
 80078b0:	08010bdc 	.word	0x08010bdc
 80078b4:	08010bf4 	.word	0x08010bf4
 80078b8:	20000144 	.word	0x20000144
 80078bc:	2000349c 	.word	0x2000349c
 80078c0:	20000148 	.word	0x20000148
 80078c4:	2000014c 	.word	0x2000014c
 80078c8:	2000014a 	.word	0x2000014a
 80078cc:	08010c1c 	.word	0x08010c1c
 80078d0:	08010c2c 	.word	0x08010c2c
 80078d4:	08010c38 	.word	0x08010c38
 80078d8:	20000154 	.word	0x20000154
 80078dc:	20000158 	.word	0x20000158
 80078e0:	20000160 	.word	0x20000160
 80078e4:	2000015e 	.word	0x2000015e
 80078e8:	20008ba0 	.word	0x20008ba0
 80078ec:	08010c58 	.word	0x08010c58
 80078f0:	08010c80 	.word	0x08010c80
 80078f4:	08010cac 	.word	0x08010cac
    }

    if (pcb->remote_port == tcphdr->src &&
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	8b1a      	ldrh	r2, [r3, #24]
 80078fc:	4b94      	ldr	r3, [pc, #592]	; (8007b50 <tcp_input+0x524>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	429a      	cmp	r2, r3
 8007906:	d13a      	bne.n	800797e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	8ada      	ldrh	r2, [r3, #22]
 800790c:	4b90      	ldr	r3, [pc, #576]	; (8007b50 <tcp_input+0x524>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	885b      	ldrh	r3, [r3, #2]
 8007912:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007914:	429a      	cmp	r2, r3
 8007916:	d132      	bne.n	800797e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	4b8d      	ldr	r3, [pc, #564]	; (8007b54 <tcp_input+0x528>)
 800791e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007920:	429a      	cmp	r2, r3
 8007922:	d12c      	bne.n	800797e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4b8a      	ldr	r3, [pc, #552]	; (8007b54 <tcp_input+0x528>)
 800792a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800792c:	429a      	cmp	r2, r3
 800792e:	d126      	bne.n	800797e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	429a      	cmp	r2, r3
 8007938:	d106      	bne.n	8007948 <tcp_input+0x31c>
 800793a:	4b87      	ldr	r3, [pc, #540]	; (8007b58 <tcp_input+0x52c>)
 800793c:	f240 120d 	movw	r2, #269	; 0x10d
 8007940:	4986      	ldr	r1, [pc, #536]	; (8007b5c <tcp_input+0x530>)
 8007942:	4887      	ldr	r0, [pc, #540]	; (8007b60 <tcp_input+0x534>)
 8007944:	f006 fdbe 	bl	800e4c4 <iprintf>
      if (prev != NULL) {
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <tcp_input+0x338>
        prev->next = pcb->next;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007956:	4b83      	ldr	r3, [pc, #524]	; (8007b64 <tcp_input+0x538>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800795e:	4a81      	ldr	r2, [pc, #516]	; (8007b64 <tcp_input+0x538>)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	429a      	cmp	r2, r3
 800796c:	d111      	bne.n	8007992 <tcp_input+0x366>
 800796e:	4b7a      	ldr	r3, [pc, #488]	; (8007b58 <tcp_input+0x52c>)
 8007970:	f240 1215 	movw	r2, #277	; 0x115
 8007974:	497c      	ldr	r1, [pc, #496]	; (8007b68 <tcp_input+0x53c>)
 8007976:	487a      	ldr	r0, [pc, #488]	; (8007b60 <tcp_input+0x534>)
 8007978:	f006 fda4 	bl	800e4c4 <iprintf>
      break;
 800797c:	e009      	b.n	8007992 <tcp_input+0x366>
    }
    prev = pcb;
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f47f af5e 	bne.w	800784c <tcp_input+0x220>
 8007990:	e000      	b.n	8007994 <tcp_input+0x368>
      break;
 8007992:	bf00      	nop
  }

  if (pcb == NULL) {
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f040 8095 	bne.w	8007ac6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800799c:	4b73      	ldr	r3, [pc, #460]	; (8007b6c <tcp_input+0x540>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	e03f      	b.n	8007a24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	7d1b      	ldrb	r3, [r3, #20]
 80079a8:	2b0a      	cmp	r3, #10
 80079aa:	d006      	beq.n	80079ba <tcp_input+0x38e>
 80079ac:	4b6a      	ldr	r3, [pc, #424]	; (8007b58 <tcp_input+0x52c>)
 80079ae:	f240 121f 	movw	r2, #287	; 0x11f
 80079b2:	496f      	ldr	r1, [pc, #444]	; (8007b70 <tcp_input+0x544>)
 80079b4:	486a      	ldr	r0, [pc, #424]	; (8007b60 <tcp_input+0x534>)
 80079b6:	f006 fd85 	bl	800e4c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	7a1b      	ldrb	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d009      	beq.n	80079d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	7a1a      	ldrb	r2, [r3, #8]
 80079c6:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <tcp_input+0x528>)
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079ce:	3301      	adds	r3, #1
 80079d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d122      	bne.n	8007a1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	8b1a      	ldrh	r2, [r3, #24]
 80079da:	4b5d      	ldr	r3, [pc, #372]	; (8007b50 <tcp_input+0x524>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d11b      	bne.n	8007a1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	8ada      	ldrh	r2, [r3, #22]
 80079ea:	4b59      	ldr	r3, [pc, #356]	; (8007b50 <tcp_input+0x524>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	885b      	ldrh	r3, [r3, #2]
 80079f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d113      	bne.n	8007a1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	4b56      	ldr	r3, [pc, #344]	; (8007b54 <tcp_input+0x528>)
 80079fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d10d      	bne.n	8007a1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	4b53      	ldr	r3, [pc, #332]	; (8007b54 <tcp_input+0x528>)
 8007a08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d107      	bne.n	8007a1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007a0e:	69f8      	ldr	r0, [r7, #28]
 8007a10:	f000 fb54 	bl	80080bc <tcp_timewait_input>
        }
        pbuf_free(p);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fd ff3f 	bl	8005898 <pbuf_free>
        return;
 8007a1a:	e1f0      	b.n	8007dfe <tcp_input+0x7d2>
        continue;
 8007a1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	61fb      	str	r3, [r7, #28]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1bc      	bne.n	80079a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a2e:	4b51      	ldr	r3, [pc, #324]	; (8007b74 <tcp_input+0x548>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	e02a      	b.n	8007a8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	7a1b      	ldrb	r3, [r3, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	7a1a      	ldrb	r2, [r3, #8]
 8007a42:	4b44      	ldr	r3, [pc, #272]	; (8007b54 <tcp_input+0x528>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d002      	beq.n	8007a58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	61bb      	str	r3, [r7, #24]
        continue;
 8007a56:	e016      	b.n	8007a86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	8ada      	ldrh	r2, [r3, #22]
 8007a5c:	4b3c      	ldr	r3, [pc, #240]	; (8007b50 <tcp_input+0x524>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d10c      	bne.n	8007a82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b39      	ldr	r3, [pc, #228]	; (8007b54 <tcp_input+0x528>)
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d00f      	beq.n	8007a94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00d      	beq.n	8007a96 <tcp_input+0x46a>
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1d1      	bne.n	8007a36 <tcp_input+0x40a>
 8007a92:	e000      	b.n	8007a96 <tcp_input+0x46a>
            break;
 8007a94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d014      	beq.n	8007ac6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007aaa:	4b32      	ldr	r3, [pc, #200]	; (8007b74 <tcp_input+0x548>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007ab2:	4a30      	ldr	r2, [pc, #192]	; (8007b74 <tcp_input+0x548>)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007ab8:	6978      	ldr	r0, [r7, #20]
 8007aba:	f000 fa01 	bl	8007ec0 <tcp_listen_input>
      }
      pbuf_free(p);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fd feea 	bl	8005898 <pbuf_free>
      return;
 8007ac4:	e19b      	b.n	8007dfe <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8160 	beq.w	8007d8e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007ace:	4b2a      	ldr	r3, [pc, #168]	; (8007b78 <tcp_input+0x54c>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	891a      	ldrh	r2, [r3, #8]
 8007ad8:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <tcp_input+0x54c>)
 8007ada:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007adc:	4a26      	ldr	r2, [pc, #152]	; (8007b78 <tcp_input+0x54c>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007ae2:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <tcp_input+0x524>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a24      	ldr	r2, [pc, #144]	; (8007b78 <tcp_input+0x54c>)
 8007ae8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <tcp_input+0x550>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <tcp_input+0x554>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007af6:	4b23      	ldr	r3, [pc, #140]	; (8007b84 <tcp_input+0x558>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007afc:	4b22      	ldr	r3, [pc, #136]	; (8007b88 <tcp_input+0x55c>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7b5b      	ldrb	r3, [r3, #13]
 8007b0c:	f043 0301 	orr.w	r3, r3, #1
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d038      	beq.n	8007b90 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007b1e:	69f8      	ldr	r0, [r7, #28]
 8007b20:	f7ff f93e 	bl	8006da0 <tcp_process_refused_data>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f113 0f0d 	cmn.w	r3, #13
 8007b2a:	d007      	beq.n	8007b3c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02d      	beq.n	8007b90 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007b34:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <tcp_input+0x560>)
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d029      	beq.n	8007b90 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 8104 	bne.w	8007d4e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007b46:	69f8      	ldr	r0, [r7, #28]
 8007b48:	f003 f9be 	bl	800aec8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007b4c:	e0ff      	b.n	8007d4e <tcp_input+0x722>
 8007b4e:	bf00      	nop
 8007b50:	20000144 	.word	0x20000144
 8007b54:	2000349c 	.word	0x2000349c
 8007b58:	08010ba8 	.word	0x08010ba8
 8007b5c:	08010cd4 	.word	0x08010cd4
 8007b60:	08010bf4 	.word	0x08010bf4
 8007b64:	20008ba0 	.word	0x20008ba0
 8007b68:	08010d00 	.word	0x08010d00
 8007b6c:	20008bb0 	.word	0x20008bb0
 8007b70:	08010d2c 	.word	0x08010d2c
 8007b74:	20008ba8 	.word	0x20008ba8
 8007b78:	20000134 	.word	0x20000134
 8007b7c:	20000164 	.word	0x20000164
 8007b80:	20000161 	.word	0x20000161
 8007b84:	2000015c 	.word	0x2000015c
 8007b88:	20000160 	.word	0x20000160
 8007b8c:	2000015e 	.word	0x2000015e
      }
    }
    tcp_input_pcb = pcb;
 8007b90:	4a9c      	ldr	r2, [pc, #624]	; (8007e04 <tcp_input+0x7d8>)
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007b96:	69f8      	ldr	r0, [r7, #28]
 8007b98:	f000 fb0a 	bl	80081b0 <tcp_process>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007ba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ba4:	f113 0f0d 	cmn.w	r3, #13
 8007ba8:	f000 80d3 	beq.w	8007d52 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007bac:	4b96      	ldr	r3, [pc, #600]	; (8007e08 <tcp_input+0x7dc>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d015      	beq.n	8007be4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d008      	beq.n	8007bd4 <tcp_input+0x5a8>
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc8:	69fa      	ldr	r2, [r7, #28]
 8007bca:	6912      	ldr	r2, [r2, #16]
 8007bcc:	f06f 010d 	mvn.w	r1, #13
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007bd4:	69f9      	ldr	r1, [r7, #28]
 8007bd6:	488d      	ldr	r0, [pc, #564]	; (8007e0c <tcp_input+0x7e0>)
 8007bd8:	f7ff fbb0 	bl	800733c <tcp_pcb_remove>
        tcp_free(pcb);
 8007bdc:	69f8      	ldr	r0, [r7, #28]
 8007bde:	f7fe f99d 	bl	8005f1c <tcp_free>
 8007be2:	e0c1      	b.n	8007d68 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007be8:	4b89      	ldr	r3, [pc, #548]	; (8007e10 <tcp_input+0x7e4>)
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01d      	beq.n	8007c2c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007bf0:	4b87      	ldr	r3, [pc, #540]	; (8007e10 <tcp_input+0x7e4>)
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <tcp_input+0x5ea>
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	6910      	ldr	r0, [r2, #16]
 8007c0a:	89fa      	ldrh	r2, [r7, #14]
 8007c0c:	69f9      	ldr	r1, [r7, #28]
 8007c0e:	4798      	blx	r3
 8007c10:	4603      	mov	r3, r0
 8007c12:	74fb      	strb	r3, [r7, #19]
 8007c14:	e001      	b.n	8007c1a <tcp_input+0x5ee>
 8007c16:	2300      	movs	r3, #0
 8007c18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007c1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007c1e:	f113 0f0d 	cmn.w	r3, #13
 8007c22:	f000 8098 	beq.w	8007d56 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007c26:	4b7a      	ldr	r3, [pc, #488]	; (8007e10 <tcp_input+0x7e4>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007c2c:	69f8      	ldr	r0, [r7, #28]
 8007c2e:	f000 f907 	bl	8007e40 <tcp_input_delayed_close>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 8090 	bne.w	8007d5a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007c3a:	4b76      	ldr	r3, [pc, #472]	; (8007e14 <tcp_input+0x7e8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d041      	beq.n	8007cc6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d006      	beq.n	8007c58 <tcp_input+0x62c>
 8007c4a:	4b73      	ldr	r3, [pc, #460]	; (8007e18 <tcp_input+0x7ec>)
 8007c4c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007c50:	4972      	ldr	r1, [pc, #456]	; (8007e1c <tcp_input+0x7f0>)
 8007c52:	4873      	ldr	r0, [pc, #460]	; (8007e20 <tcp_input+0x7f4>)
 8007c54:	f006 fc36 	bl	800e4c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	8b5b      	ldrh	r3, [r3, #26]
 8007c5c:	f003 0310 	and.w	r3, r3, #16
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007c64:	4b6b      	ldr	r3, [pc, #428]	; (8007e14 <tcp_input+0x7e8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fd fe15 	bl	8005898 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007c6e:	69f8      	ldr	r0, [r7, #28]
 8007c70:	f7fe fc3c 	bl	80064ec <tcp_abort>
            goto aborted;
 8007c74:	e078      	b.n	8007d68 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00c      	beq.n	8007c9a <tcp_input+0x66e>
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	6918      	ldr	r0, [r3, #16]
 8007c8a:	4b62      	ldr	r3, [pc, #392]	; (8007e14 <tcp_input+0x7e8>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	69f9      	ldr	r1, [r7, #28]
 8007c92:	47a0      	blx	r4
 8007c94:	4603      	mov	r3, r0
 8007c96:	74fb      	strb	r3, [r7, #19]
 8007c98:	e008      	b.n	8007cac <tcp_input+0x680>
 8007c9a:	4b5e      	ldr	r3, [pc, #376]	; (8007e14 <tcp_input+0x7e8>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f7ff f952 	bl	8006f4c <tcp_recv_null>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007cac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cb0:	f113 0f0d 	cmn.w	r3, #13
 8007cb4:	d053      	beq.n	8007d5e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007cb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007cbe:	4b55      	ldr	r3, [pc, #340]	; (8007e14 <tcp_input+0x7e8>)
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007cc6:	4b50      	ldr	r3, [pc, #320]	; (8007e08 <tcp_input+0x7dc>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d030      	beq.n	8007d34 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cde:	7b5a      	ldrb	r2, [r3, #13]
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce4:	f042 0220 	orr.w	r2, r2, #32
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	735a      	strb	r2, [r3, #13]
 8007cec:	e022      	b.n	8007d34 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007cf6:	d005      	beq.n	8007d04 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00b      	beq.n	8007d26 <tcp_input+0x6fa>
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	6918      	ldr	r0, [r3, #16]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	69f9      	ldr	r1, [r7, #28]
 8007d1e:	47a0      	blx	r4
 8007d20:	4603      	mov	r3, r0
 8007d22:	74fb      	strb	r3, [r7, #19]
 8007d24:	e001      	b.n	8007d2a <tcp_input+0x6fe>
 8007d26:	2300      	movs	r3, #0
 8007d28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007d2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d2e:	f113 0f0d 	cmn.w	r3, #13
 8007d32:	d016      	beq.n	8007d62 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007d34:	4b33      	ldr	r3, [pc, #204]	; (8007e04 <tcp_input+0x7d8>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007d3a:	69f8      	ldr	r0, [r7, #28]
 8007d3c:	f000 f880 	bl	8007e40 <tcp_input_delayed_close>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10f      	bne.n	8007d66 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007d46:	69f8      	ldr	r0, [r7, #28]
 8007d48:	f002 fab8 	bl	800a2bc <tcp_output>
 8007d4c:	e00c      	b.n	8007d68 <tcp_input+0x73c>
        goto aborted;
 8007d4e:	bf00      	nop
 8007d50:	e00a      	b.n	8007d68 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007d52:	bf00      	nop
 8007d54:	e008      	b.n	8007d68 <tcp_input+0x73c>
              goto aborted;
 8007d56:	bf00      	nop
 8007d58:	e006      	b.n	8007d68 <tcp_input+0x73c>
          goto aborted;
 8007d5a:	bf00      	nop
 8007d5c:	e004      	b.n	8007d68 <tcp_input+0x73c>
            goto aborted;
 8007d5e:	bf00      	nop
 8007d60:	e002      	b.n	8007d68 <tcp_input+0x73c>
              goto aborted;
 8007d62:	bf00      	nop
 8007d64:	e000      	b.n	8007d68 <tcp_input+0x73c>
          goto aborted;
 8007d66:	bf00      	nop
    tcp_input_pcb = NULL;
 8007d68:	4b26      	ldr	r3, [pc, #152]	; (8007e04 <tcp_input+0x7d8>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007d6e:	4b29      	ldr	r3, [pc, #164]	; (8007e14 <tcp_input+0x7e8>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007d74:	4b2b      	ldr	r3, [pc, #172]	; (8007e24 <tcp_input+0x7f8>)
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d03f      	beq.n	8007dfc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007d7c:	4b29      	ldr	r3, [pc, #164]	; (8007e24 <tcp_input+0x7f8>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fd fd89 	bl	8005898 <pbuf_free>
      inseg.p = NULL;
 8007d86:	4b27      	ldr	r3, [pc, #156]	; (8007e24 <tcp_input+0x7f8>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007d8c:	e036      	b.n	8007dfc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007d8e:	4b26      	ldr	r3, [pc, #152]	; (8007e28 <tcp_input+0x7fc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	899b      	ldrh	r3, [r3, #12]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fc faca 	bl	8004330 <lwip_htons>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d118      	bne.n	8007dda <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007da8:	4b20      	ldr	r3, [pc, #128]	; (8007e2c <tcp_input+0x800>)
 8007daa:	6819      	ldr	r1, [r3, #0]
 8007dac:	4b20      	ldr	r3, [pc, #128]	; (8007e30 <tcp_input+0x804>)
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	461a      	mov	r2, r3
 8007db2:	4b20      	ldr	r3, [pc, #128]	; (8007e34 <tcp_input+0x808>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007db8:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <tcp_input+0x7fc>)
 8007dba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dbc:	885b      	ldrh	r3, [r3, #2]
 8007dbe:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <tcp_input+0x7fc>)
 8007dc2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dc4:	8812      	ldrh	r2, [r2, #0]
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	9202      	str	r2, [sp, #8]
 8007dca:	9301      	str	r3, [sp, #4]
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	; (8007e38 <tcp_input+0x80c>)
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	4b1a      	ldr	r3, [pc, #104]	; (8007e3c <tcp_input+0x810>)
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f003 f825 	bl	800ae24 <tcp_rst>
    pbuf_free(p);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fd fd5c 	bl	8005898 <pbuf_free>
  return;
 8007de0:	e00c      	b.n	8007dfc <tcp_input+0x7d0>
    goto dropped;
 8007de2:	bf00      	nop
 8007de4:	e006      	b.n	8007df4 <tcp_input+0x7c8>
    goto dropped;
 8007de6:	bf00      	nop
 8007de8:	e004      	b.n	8007df4 <tcp_input+0x7c8>
    goto dropped;
 8007dea:	bf00      	nop
 8007dec:	e002      	b.n	8007df4 <tcp_input+0x7c8>
      goto dropped;
 8007dee:	bf00      	nop
 8007df0:	e000      	b.n	8007df4 <tcp_input+0x7c8>
      goto dropped;
 8007df2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7fd fd4f 	bl	8005898 <pbuf_free>
 8007dfa:	e000      	b.n	8007dfe <tcp_input+0x7d2>
  return;
 8007dfc:	bf00      	nop
}
 8007dfe:	3724      	adds	r7, #36	; 0x24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd90      	pop	{r4, r7, pc}
 8007e04:	20008bb4 	.word	0x20008bb4
 8007e08:	20000161 	.word	0x20000161
 8007e0c:	20008ba0 	.word	0x20008ba0
 8007e10:	2000015c 	.word	0x2000015c
 8007e14:	20000164 	.word	0x20000164
 8007e18:	08010ba8 	.word	0x08010ba8
 8007e1c:	08010d5c 	.word	0x08010d5c
 8007e20:	08010bf4 	.word	0x08010bf4
 8007e24:	20000134 	.word	0x20000134
 8007e28:	20000144 	.word	0x20000144
 8007e2c:	20000158 	.word	0x20000158
 8007e30:	2000015e 	.word	0x2000015e
 8007e34:	20000154 	.word	0x20000154
 8007e38:	200034ac 	.word	0x200034ac
 8007e3c:	200034b0 	.word	0x200034b0

08007e40 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <tcp_input_delayed_close+0x1c>
 8007e4e:	4b17      	ldr	r3, [pc, #92]	; (8007eac <tcp_input_delayed_close+0x6c>)
 8007e50:	f240 225a 	movw	r2, #602	; 0x25a
 8007e54:	4916      	ldr	r1, [pc, #88]	; (8007eb0 <tcp_input_delayed_close+0x70>)
 8007e56:	4817      	ldr	r0, [pc, #92]	; (8007eb4 <tcp_input_delayed_close+0x74>)
 8007e58:	f006 fb34 	bl	800e4c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007e5c:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <tcp_input_delayed_close+0x78>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01c      	beq.n	8007ea2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8b5b      	ldrh	r3, [r3, #26]
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10d      	bne.n	8007e90 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d008      	beq.n	8007e90 <tcp_input_delayed_close+0x50>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6912      	ldr	r2, [r2, #16]
 8007e88:	f06f 010e 	mvn.w	r1, #14
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	480a      	ldr	r0, [pc, #40]	; (8007ebc <tcp_input_delayed_close+0x7c>)
 8007e94:	f7ff fa52 	bl	800733c <tcp_pcb_remove>
    tcp_free(pcb);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7fe f83f 	bl	8005f1c <tcp_free>
    return 1;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	08010ba8 	.word	0x08010ba8
 8007eb0:	08010d78 	.word	0x08010d78
 8007eb4:	08010bf4 	.word	0x08010bf4
 8007eb8:	20000161 	.word	0x20000161
 8007ebc:	20008ba0 	.word	0x20008ba0

08007ec0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007ec0:	b590      	push	{r4, r7, lr}
 8007ec2:	b08b      	sub	sp, #44	; 0x2c
 8007ec4:	af04      	add	r7, sp, #16
 8007ec6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007ec8:	4b6f      	ldr	r3, [pc, #444]	; (8008088 <tcp_listen_input+0x1c8>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f040 80d2 	bne.w	800807a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <tcp_listen_input+0x2a>
 8007edc:	4b6b      	ldr	r3, [pc, #428]	; (800808c <tcp_listen_input+0x1cc>)
 8007ede:	f240 2281 	movw	r2, #641	; 0x281
 8007ee2:	496b      	ldr	r1, [pc, #428]	; (8008090 <tcp_listen_input+0x1d0>)
 8007ee4:	486b      	ldr	r0, [pc, #428]	; (8008094 <tcp_listen_input+0x1d4>)
 8007ee6:	f006 faed 	bl	800e4c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007eea:	4b67      	ldr	r3, [pc, #412]	; (8008088 <tcp_listen_input+0x1c8>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d019      	beq.n	8007f2a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ef6:	4b68      	ldr	r3, [pc, #416]	; (8008098 <tcp_listen_input+0x1d8>)
 8007ef8:	6819      	ldr	r1, [r3, #0]
 8007efa:	4b68      	ldr	r3, [pc, #416]	; (800809c <tcp_listen_input+0x1dc>)
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	461a      	mov	r2, r3
 8007f00:	4b67      	ldr	r3, [pc, #412]	; (80080a0 <tcp_listen_input+0x1e0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f06:	4b67      	ldr	r3, [pc, #412]	; (80080a4 <tcp_listen_input+0x1e4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f0a:	885b      	ldrh	r3, [r3, #2]
 8007f0c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f0e:	4a65      	ldr	r2, [pc, #404]	; (80080a4 <tcp_listen_input+0x1e4>)
 8007f10:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f12:	8812      	ldrh	r2, [r2, #0]
 8007f14:	b292      	uxth	r2, r2
 8007f16:	9202      	str	r2, [sp, #8]
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	4b63      	ldr	r3, [pc, #396]	; (80080a8 <tcp_listen_input+0x1e8>)
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4b63      	ldr	r3, [pc, #396]	; (80080ac <tcp_listen_input+0x1ec>)
 8007f20:	4602      	mov	r2, r0
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f002 ff7e 	bl	800ae24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007f28:	e0a9      	b.n	800807e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007f2a:	4b57      	ldr	r3, [pc, #348]	; (8008088 <tcp_listen_input+0x1c8>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 80a3 	beq.w	800807e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	7d5b      	ldrb	r3, [r3, #21]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff f929 	bl	8007194 <tcp_alloc>
 8007f42:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d111      	bne.n	8007f6e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <tcp_listen_input+0xa8>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6910      	ldr	r0, [r2, #16]
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4798      	blx	r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	73bb      	strb	r3, [r7, #14]
      return;
 8007f66:	e08b      	b.n	8008080 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007f68:	23f0      	movs	r3, #240	; 0xf0
 8007f6a:	73bb      	strb	r3, [r7, #14]
      return;
 8007f6c:	e088      	b.n	8008080 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007f6e:	4b50      	ldr	r3, [pc, #320]	; (80080b0 <tcp_listen_input+0x1f0>)
 8007f70:	695a      	ldr	r2, [r3, #20]
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007f76:	4b4e      	ldr	r3, [pc, #312]	; (80080b0 <tcp_listen_input+0x1f0>)
 8007f78:	691a      	ldr	r2, [r3, #16]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	8ada      	ldrh	r2, [r3, #22]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007f86:	4b47      	ldr	r3, [pc, #284]	; (80080a4 <tcp_listen_input+0x1e4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2203      	movs	r2, #3
 8007f96:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007f98:	4b41      	ldr	r3, [pc, #260]	; (80080a0 <tcp_listen_input+0x1e0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007faa:	6978      	ldr	r0, [r7, #20]
 8007fac:	f7ff fa5a 	bl	8007464 <tcp_next_iss>
 8007fb0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007fca:	4b35      	ldr	r3, [pc, #212]	; (80080a0 <tcp_listen_input+0x1e0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	1e5a      	subs	r2, r3, #1
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	691a      	ldr	r2, [r3, #16]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	7a5b      	ldrb	r3, [r3, #9]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	7a1a      	ldrb	r2, [r3, #8]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007ff8:	4b2e      	ldr	r3, [pc, #184]	; (80080b4 <tcp_listen_input+0x1f4>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	60da      	str	r2, [r3, #12]
 8008000:	4a2c      	ldr	r2, [pc, #176]	; (80080b4 <tcp_listen_input+0x1f4>)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	f003 f8cf 	bl	800b1a8 <tcp_timer_needed>
 800800a:	4b2b      	ldr	r3, [pc, #172]	; (80080b8 <tcp_listen_input+0x1f8>)
 800800c:	2201      	movs	r2, #1
 800800e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008010:	6978      	ldr	r0, [r7, #20]
 8008012:	f001 fd8d 	bl	8009b30 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008016:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <tcp_listen_input+0x1e4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	89db      	ldrh	r3, [r3, #14]
 800801c:	b29a      	uxth	r2, r3
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	3304      	adds	r3, #4
 8008038:	4618      	mov	r0, r3
 800803a:	f004 ffe1 	bl	800d000 <ip4_route>
 800803e:	4601      	mov	r1, r0
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	3304      	adds	r3, #4
 8008044:	461a      	mov	r2, r3
 8008046:	4620      	mov	r0, r4
 8008048:	f7ff fa32 	bl	80074b0 <tcp_eff_send_mss_netif>
 800804c:	4603      	mov	r3, r0
 800804e:	461a      	mov	r2, r3
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008054:	2112      	movs	r1, #18
 8008056:	6978      	ldr	r0, [r7, #20]
 8008058:	f002 f842 	bl	800a0e0 <tcp_enqueue_flags>
 800805c:	4603      	mov	r3, r0
 800805e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008068:	2100      	movs	r1, #0
 800806a:	6978      	ldr	r0, [r7, #20]
 800806c:	f7fe f980 	bl	8006370 <tcp_abandon>
      return;
 8008070:	e006      	b.n	8008080 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008072:	6978      	ldr	r0, [r7, #20]
 8008074:	f002 f922 	bl	800a2bc <tcp_output>
  return;
 8008078:	e001      	b.n	800807e <tcp_listen_input+0x1be>
    return;
 800807a:	bf00      	nop
 800807c:	e000      	b.n	8008080 <tcp_listen_input+0x1c0>
  return;
 800807e:	bf00      	nop
}
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd90      	pop	{r4, r7, pc}
 8008086:	bf00      	nop
 8008088:	20000160 	.word	0x20000160
 800808c:	08010ba8 	.word	0x08010ba8
 8008090:	08010da0 	.word	0x08010da0
 8008094:	08010bf4 	.word	0x08010bf4
 8008098:	20000158 	.word	0x20000158
 800809c:	2000015e 	.word	0x2000015e
 80080a0:	20000154 	.word	0x20000154
 80080a4:	20000144 	.word	0x20000144
 80080a8:	200034ac 	.word	0x200034ac
 80080ac:	200034b0 	.word	0x200034b0
 80080b0:	2000349c 	.word	0x2000349c
 80080b4:	20008ba0 	.word	0x20008ba0
 80080b8:	20008b9c 	.word	0x20008b9c

080080bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af04      	add	r7, sp, #16
 80080c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80080c4:	4b2f      	ldr	r3, [pc, #188]	; (8008184 <tcp_timewait_input+0xc8>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d153      	bne.n	8008178 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <tcp_timewait_input+0x28>
 80080d6:	4b2c      	ldr	r3, [pc, #176]	; (8008188 <tcp_timewait_input+0xcc>)
 80080d8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80080dc:	492b      	ldr	r1, [pc, #172]	; (800818c <tcp_timewait_input+0xd0>)
 80080de:	482c      	ldr	r0, [pc, #176]	; (8008190 <tcp_timewait_input+0xd4>)
 80080e0:	f006 f9f0 	bl	800e4c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80080e4:	4b27      	ldr	r3, [pc, #156]	; (8008184 <tcp_timewait_input+0xc8>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d02a      	beq.n	8008146 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80080f0:	4b28      	ldr	r3, [pc, #160]	; (8008194 <tcp_timewait_input+0xd8>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	db2d      	blt.n	800815a <tcp_timewait_input+0x9e>
 80080fe:	4b25      	ldr	r3, [pc, #148]	; (8008194 <tcp_timewait_input+0xd8>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800810a:	440b      	add	r3, r1
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc23      	bgt.n	800815a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008112:	4b21      	ldr	r3, [pc, #132]	; (8008198 <tcp_timewait_input+0xdc>)
 8008114:	6819      	ldr	r1, [r3, #0]
 8008116:	4b21      	ldr	r3, [pc, #132]	; (800819c <tcp_timewait_input+0xe0>)
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <tcp_timewait_input+0xd8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008122:	4b1f      	ldr	r3, [pc, #124]	; (80081a0 <tcp_timewait_input+0xe4>)
 8008124:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008126:	885b      	ldrh	r3, [r3, #2]
 8008128:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800812a:	4a1d      	ldr	r2, [pc, #116]	; (80081a0 <tcp_timewait_input+0xe4>)
 800812c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800812e:	8812      	ldrh	r2, [r2, #0]
 8008130:	b292      	uxth	r2, r2
 8008132:	9202      	str	r2, [sp, #8]
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <tcp_timewait_input+0xe8>)
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <tcp_timewait_input+0xec>)
 800813c:	4602      	mov	r2, r0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f002 fe70 	bl	800ae24 <tcp_rst>
      return;
 8008144:	e01b      	b.n	800817e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008146:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <tcp_timewait_input+0xc8>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008152:	4b16      	ldr	r3, [pc, #88]	; (80081ac <tcp_timewait_input+0xf0>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <tcp_timewait_input+0xe0>)
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00c      	beq.n	800817c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	8b5b      	ldrh	r3, [r3, #26]
 8008166:	f043 0302 	orr.w	r3, r3, #2
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f002 f8a3 	bl	800a2bc <tcp_output>
  }
  return;
 8008176:	e001      	b.n	800817c <tcp_timewait_input+0xc0>
    return;
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <tcp_timewait_input+0xc2>
  return;
 800817c:	bf00      	nop
}
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20000160 	.word	0x20000160
 8008188:	08010ba8 	.word	0x08010ba8
 800818c:	08010dc0 	.word	0x08010dc0
 8008190:	08010bf4 	.word	0x08010bf4
 8008194:	20000154 	.word	0x20000154
 8008198:	20000158 	.word	0x20000158
 800819c:	2000015e 	.word	0x2000015e
 80081a0:	20000144 	.word	0x20000144
 80081a4:	200034ac 	.word	0x200034ac
 80081a8:	200034b0 	.word	0x200034b0
 80081ac:	20008ba4 	.word	0x20008ba4

080081b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80081b0:	b590      	push	{r4, r7, lr}
 80081b2:	b08d      	sub	sp, #52	; 0x34
 80081b4:	af04      	add	r7, sp, #16
 80081b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d106      	bne.n	80081d4 <tcp_process+0x24>
 80081c6:	4ba5      	ldr	r3, [pc, #660]	; (800845c <tcp_process+0x2ac>)
 80081c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80081cc:	49a4      	ldr	r1, [pc, #656]	; (8008460 <tcp_process+0x2b0>)
 80081ce:	48a5      	ldr	r0, [pc, #660]	; (8008464 <tcp_process+0x2b4>)
 80081d0:	f006 f978 	bl	800e4c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80081d4:	4ba4      	ldr	r3, [pc, #656]	; (8008468 <tcp_process+0x2b8>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d04e      	beq.n	800827e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	7d1b      	ldrb	r3, [r3, #20]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d108      	bne.n	80081fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081ec:	4b9f      	ldr	r3, [pc, #636]	; (800846c <tcp_process+0x2bc>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d123      	bne.n	800823c <tcp_process+0x8c>
        acceptable = 1;
 80081f4:	2301      	movs	r3, #1
 80081f6:	76fb      	strb	r3, [r7, #27]
 80081f8:	e020      	b.n	800823c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081fe:	4b9c      	ldr	r3, [pc, #624]	; (8008470 <tcp_process+0x2c0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d102      	bne.n	800820c <tcp_process+0x5c>
        acceptable = 1;
 8008206:	2301      	movs	r3, #1
 8008208:	76fb      	strb	r3, [r7, #27]
 800820a:	e017      	b.n	800823c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800820c:	4b98      	ldr	r3, [pc, #608]	; (8008470 <tcp_process+0x2c0>)
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	db10      	blt.n	800823c <tcp_process+0x8c>
 800821a:	4b95      	ldr	r3, [pc, #596]	; (8008470 <tcp_process+0x2c0>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008226:	440b      	add	r3, r1
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	dc06      	bgt.n	800823c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8b5b      	ldrh	r3, [r3, #26]
 8008232:	f043 0302 	orr.w	r3, r3, #2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800823c:	7efb      	ldrb	r3, [r7, #27]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01b      	beq.n	800827a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	7d1b      	ldrb	r3, [r3, #20]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d106      	bne.n	8008258 <tcp_process+0xa8>
 800824a:	4b84      	ldr	r3, [pc, #528]	; (800845c <tcp_process+0x2ac>)
 800824c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008250:	4988      	ldr	r1, [pc, #544]	; (8008474 <tcp_process+0x2c4>)
 8008252:	4884      	ldr	r0, [pc, #528]	; (8008464 <tcp_process+0x2b4>)
 8008254:	f006 f936 	bl	800e4c4 <iprintf>
      recv_flags |= TF_RESET;
 8008258:	4b87      	ldr	r3, [pc, #540]	; (8008478 <tcp_process+0x2c8>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	b2da      	uxtb	r2, r3
 8008262:	4b85      	ldr	r3, [pc, #532]	; (8008478 <tcp_process+0x2c8>)
 8008264:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	8b5b      	ldrh	r3, [r3, #26]
 800826a:	f023 0301 	bic.w	r3, r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008274:	f06f 030d 	mvn.w	r3, #13
 8008278:	e37a      	b.n	8008970 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	e378      	b.n	8008970 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800827e:	4b7a      	ldr	r3, [pc, #488]	; (8008468 <tcp_process+0x2b8>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d010      	beq.n	80082ac <tcp_process+0xfc>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7d1b      	ldrb	r3, [r3, #20]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d00c      	beq.n	80082ac <tcp_process+0xfc>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7d1b      	ldrb	r3, [r3, #20]
 8008296:	2b03      	cmp	r3, #3
 8008298:	d008      	beq.n	80082ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8b5b      	ldrh	r3, [r3, #26]
 800829e:	f043 0302 	orr.w	r3, r3, #2
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	e361      	b.n	8008970 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	8b5b      	ldrh	r3, [r3, #26]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80082b8:	4b70      	ldr	r3, [pc, #448]	; (800847c <tcp_process+0x2cc>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 fc2d 	bl	8009b30 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7d1b      	ldrb	r3, [r3, #20]
 80082da:	3b02      	subs	r3, #2
 80082dc:	2b07      	cmp	r3, #7
 80082de:	f200 8337 	bhi.w	8008950 <tcp_process+0x7a0>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <tcp_process+0x138>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	08008309 	.word	0x08008309
 80082ec:	08008539 	.word	0x08008539
 80082f0:	080086b1 	.word	0x080086b1
 80082f4:	080086db 	.word	0x080086db
 80082f8:	080087ff 	.word	0x080087ff
 80082fc:	080086b1 	.word	0x080086b1
 8008300:	0800888b 	.word	0x0800888b
 8008304:	0800891b 	.word	0x0800891b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008308:	4b57      	ldr	r3, [pc, #348]	; (8008468 <tcp_process+0x2b8>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	f003 0310 	and.w	r3, r3, #16
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 80e4 	beq.w	80084de <tcp_process+0x32e>
 8008316:	4b54      	ldr	r3, [pc, #336]	; (8008468 <tcp_process+0x2b8>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b00      	cmp	r3, #0
 8008320:	f000 80dd 	beq.w	80084de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	4b50      	ldr	r3, [pc, #320]	; (800846c <tcp_process+0x2bc>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	f040 80d5 	bne.w	80084de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008334:	4b4e      	ldr	r3, [pc, #312]	; (8008470 <tcp_process+0x2c0>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008346:	4b49      	ldr	r3, [pc, #292]	; (800846c <tcp_process+0x2bc>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800834e:	4b4c      	ldr	r3, [pc, #304]	; (8008480 <tcp_process+0x2d0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	89db      	ldrh	r3, [r3, #14]
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008368:	4b41      	ldr	r3, [pc, #260]	; (8008470 <tcp_process+0x2c0>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	1e5a      	subs	r2, r3, #1
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2204      	movs	r2, #4
 8008376:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3304      	adds	r3, #4
 8008380:	4618      	mov	r0, r3
 8008382:	f004 fe3d 	bl	800d000 <ip4_route>
 8008386:	4601      	mov	r1, r0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3304      	adds	r3, #4
 800838c:	461a      	mov	r2, r3
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff f88e 	bl	80074b0 <tcp_eff_send_mss_netif>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083a0:	009a      	lsls	r2, r3, #2
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	f241 111c 	movw	r1, #4380	; 0x111c
 80083ac:	428b      	cmp	r3, r1
 80083ae:	bf38      	it	cc
 80083b0:	460b      	movcc	r3, r1
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d204      	bcs.n	80083c0 <tcp_process+0x210>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	b29b      	uxth	r3, r3
 80083be:	e00d      	b.n	80083dc <tcp_process+0x22c>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083c4:	005b      	lsls	r3, r3, #1
 80083c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d904      	bls.n	80083d8 <tcp_process+0x228>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	e001      	b.n	80083dc <tcp_process+0x22c>
 80083d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <tcp_process+0x24a>
 80083ec:	4b1b      	ldr	r3, [pc, #108]	; (800845c <tcp_process+0x2ac>)
 80083ee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80083f2:	4924      	ldr	r1, [pc, #144]	; (8008484 <tcp_process+0x2d4>)
 80083f4:	481b      	ldr	r0, [pc, #108]	; (8008464 <tcp_process+0x2b4>)
 80083f6:	f006 f865 	bl	800e4c4 <iprintf>
        --pcb->snd_queuelen;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008400:	3b01      	subs	r3, #1
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d111      	bne.n	800843a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800841a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <tcp_process+0x280>
 8008422:	4b0e      	ldr	r3, [pc, #56]	; (800845c <tcp_process+0x2ac>)
 8008424:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008428:	4917      	ldr	r1, [pc, #92]	; (8008488 <tcp_process+0x2d8>)
 800842a:	480e      	ldr	r0, [pc, #56]	; (8008464 <tcp_process+0x2b4>)
 800842c:	f006 f84a 	bl	800e4c4 <iprintf>
          pcb->unsent = rseg->next;
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	66da      	str	r2, [r3, #108]	; 0x6c
 8008438:	e003      	b.n	8008442 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008442:	69f8      	ldr	r0, [r7, #28]
 8008444:	f7fe fd3d 	bl	8006ec2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844c:	2b00      	cmp	r3, #0
 800844e:	d11d      	bne.n	800848c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008456:	861a      	strh	r2, [r3, #48]	; 0x30
 8008458:	e01f      	b.n	800849a <tcp_process+0x2ea>
 800845a:	bf00      	nop
 800845c:	08010ba8 	.word	0x08010ba8
 8008460:	08010de0 	.word	0x08010de0
 8008464:	08010bf4 	.word	0x08010bf4
 8008468:	20000160 	.word	0x20000160
 800846c:	20000158 	.word	0x20000158
 8008470:	20000154 	.word	0x20000154
 8008474:	08010dfc 	.word	0x08010dfc
 8008478:	20000161 	.word	0x20000161
 800847c:	20008ba4 	.word	0x20008ba4
 8008480:	20000144 	.word	0x20000144
 8008484:	08010e1c 	.word	0x08010e1c
 8008488:	08010e34 	.word	0x08010e34
        } else {
          pcb->rtime = 0;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00a      	beq.n	80084ba <tcp_process+0x30a>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	6910      	ldr	r0, [r2, #16]
 80084ae:	2200      	movs	r2, #0
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	76bb      	strb	r3, [r7, #26]
 80084b8:	e001      	b.n	80084be <tcp_process+0x30e>
 80084ba:	2300      	movs	r3, #0
 80084bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80084be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80084c2:	f113 0f0d 	cmn.w	r3, #13
 80084c6:	d102      	bne.n	80084ce <tcp_process+0x31e>
          return ERR_ABRT;
 80084c8:	f06f 030c 	mvn.w	r3, #12
 80084cc:	e250      	b.n	8008970 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	8b5b      	ldrh	r3, [r3, #26]
 80084d2:	f043 0302 	orr.w	r3, r3, #2
 80084d6:	b29a      	uxth	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80084dc:	e23a      	b.n	8008954 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80084de:	4b9d      	ldr	r3, [pc, #628]	; (8008754 <tcp_process+0x5a4>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	f003 0310 	and.w	r3, r3, #16
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8234 	beq.w	8008954 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084ec:	4b9a      	ldr	r3, [pc, #616]	; (8008758 <tcp_process+0x5a8>)
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	4b9a      	ldr	r3, [pc, #616]	; (800875c <tcp_process+0x5ac>)
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	4b9a      	ldr	r3, [pc, #616]	; (8008760 <tcp_process+0x5b0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084fc:	4b99      	ldr	r3, [pc, #612]	; (8008764 <tcp_process+0x5b4>)
 80084fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008504:	4a97      	ldr	r2, [pc, #604]	; (8008764 <tcp_process+0x5b4>)
 8008506:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008508:	8812      	ldrh	r2, [r2, #0]
 800850a:	b292      	uxth	r2, r2
 800850c:	9202      	str	r2, [sp, #8]
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	4b95      	ldr	r3, [pc, #596]	; (8008768 <tcp_process+0x5b8>)
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	4b95      	ldr	r3, [pc, #596]	; (800876c <tcp_process+0x5bc>)
 8008516:	4602      	mov	r2, r0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f002 fc83 	bl	800ae24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008524:	2b05      	cmp	r3, #5
 8008526:	f200 8215 	bhi.w	8008954 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f002 fa4d 	bl	800a9d0 <tcp_rexmit_rto>
      break;
 8008536:	e20d      	b.n	8008954 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008538:	4b86      	ldr	r3, [pc, #536]	; (8008754 <tcp_process+0x5a4>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 80a1 	beq.w	8008688 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008546:	4b84      	ldr	r3, [pc, #528]	; (8008758 <tcp_process+0x5a8>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	db7e      	blt.n	8008654 <tcp_process+0x4a4>
 8008556:	4b80      	ldr	r3, [pc, #512]	; (8008758 <tcp_process+0x5a8>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	dc77      	bgt.n	8008654 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2204      	movs	r2, #4
 8008568:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008572:	23fa      	movs	r3, #250	; 0xfa
 8008574:	76bb      	strb	r3, [r7, #26]
 8008576:	e01d      	b.n	80085b4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <tcp_process+0x3e0>
 8008582:	4b7b      	ldr	r3, [pc, #492]	; (8008770 <tcp_process+0x5c0>)
 8008584:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008588:	497a      	ldr	r1, [pc, #488]	; (8008774 <tcp_process+0x5c4>)
 800858a:	487b      	ldr	r0, [pc, #492]	; (8008778 <tcp_process+0x5c8>)
 800858c:	f005 ff9a 	bl	800e4c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00a      	beq.n	80085b0 <tcp_process+0x400>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	6910      	ldr	r0, [r2, #16]
 80085a4:	2200      	movs	r2, #0
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4798      	blx	r3
 80085aa:	4603      	mov	r3, r0
 80085ac:	76bb      	strb	r3, [r7, #26]
 80085ae:	e001      	b.n	80085b4 <tcp_process+0x404>
 80085b0:	23f0      	movs	r3, #240	; 0xf0
 80085b2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80085b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00a      	beq.n	80085d2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80085bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80085c0:	f113 0f0d 	cmn.w	r3, #13
 80085c4:	d002      	beq.n	80085cc <tcp_process+0x41c>
              tcp_abort(pcb);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fd ff90 	bl	80064ec <tcp_abort>
            }
            return ERR_ABRT;
 80085cc:	f06f 030c 	mvn.w	r3, #12
 80085d0:	e1ce      	b.n	8008970 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fae0 	bl	8008b98 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80085d8:	4b68      	ldr	r3, [pc, #416]	; (800877c <tcp_process+0x5cc>)
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <tcp_process+0x43c>
            recv_acked--;
 80085e0:	4b66      	ldr	r3, [pc, #408]	; (800877c <tcp_process+0x5cc>)
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	4b64      	ldr	r3, [pc, #400]	; (800877c <tcp_process+0x5cc>)
 80085ea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80085f0:	009a      	lsls	r2, r3, #2
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80085fc:	428b      	cmp	r3, r1
 80085fe:	bf38      	it	cc
 8008600:	460b      	movcc	r3, r1
 8008602:	429a      	cmp	r2, r3
 8008604:	d204      	bcs.n	8008610 <tcp_process+0x460>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	b29b      	uxth	r3, r3
 800860e:	e00d      	b.n	800862c <tcp_process+0x47c>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	f241 121c 	movw	r2, #4380	; 0x111c
 800861a:	4293      	cmp	r3, r2
 800861c:	d904      	bls.n	8008628 <tcp_process+0x478>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008622:	005b      	lsls	r3, r3, #1
 8008624:	b29b      	uxth	r3, r3
 8008626:	e001      	b.n	800862c <tcp_process+0x47c>
 8008628:	f241 131c 	movw	r3, #4380	; 0x111c
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008632:	4b53      	ldr	r3, [pc, #332]	; (8008780 <tcp_process+0x5d0>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d037      	beq.n	80086ae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	8b5b      	ldrh	r3, [r3, #26]
 8008642:	f043 0302 	orr.w	r3, r3, #2
 8008646:	b29a      	uxth	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2207      	movs	r2, #7
 8008650:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008652:	e02c      	b.n	80086ae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008654:	4b40      	ldr	r3, [pc, #256]	; (8008758 <tcp_process+0x5a8>)
 8008656:	6819      	ldr	r1, [r3, #0]
 8008658:	4b40      	ldr	r3, [pc, #256]	; (800875c <tcp_process+0x5ac>)
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	461a      	mov	r2, r3
 800865e:	4b40      	ldr	r3, [pc, #256]	; (8008760 <tcp_process+0x5b0>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008664:	4b3f      	ldr	r3, [pc, #252]	; (8008764 <tcp_process+0x5b4>)
 8008666:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800866c:	4a3d      	ldr	r2, [pc, #244]	; (8008764 <tcp_process+0x5b4>)
 800866e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008670:	8812      	ldrh	r2, [r2, #0]
 8008672:	b292      	uxth	r2, r2
 8008674:	9202      	str	r2, [sp, #8]
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	4b3b      	ldr	r3, [pc, #236]	; (8008768 <tcp_process+0x5b8>)
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4b3b      	ldr	r3, [pc, #236]	; (800876c <tcp_process+0x5bc>)
 800867e:	4602      	mov	r2, r0
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f002 fbcf 	bl	800ae24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008686:	e167      	b.n	8008958 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008688:	4b32      	ldr	r3, [pc, #200]	; (8008754 <tcp_process+0x5a4>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	f003 0302 	and.w	r3, r3, #2
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 8161 	beq.w	8008958 <tcp_process+0x7a8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869a:	1e5a      	subs	r2, r3, #1
 800869c:	4b30      	ldr	r3, [pc, #192]	; (8008760 <tcp_process+0x5b0>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	f040 8159 	bne.w	8008958 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f002 f9b4 	bl	800aa14 <tcp_rexmit>
      break;
 80086ac:	e154      	b.n	8008958 <tcp_process+0x7a8>
 80086ae:	e153      	b.n	8008958 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fa71 	bl	8008b98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80086b6:	4b32      	ldr	r3, [pc, #200]	; (8008780 <tcp_process+0x5d0>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f000 814c 	beq.w	800895c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	8b5b      	ldrh	r3, [r3, #26]
 80086c8:	f043 0302 	orr.w	r3, r3, #2
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2207      	movs	r2, #7
 80086d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80086d8:	e140      	b.n	800895c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa5c 	bl	8008b98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80086e0:	4b27      	ldr	r3, [pc, #156]	; (8008780 <tcp_process+0x5d0>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d071      	beq.n	80087d0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80086ec:	4b19      	ldr	r3, [pc, #100]	; (8008754 <tcp_process+0x5a4>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d060      	beq.n	80087ba <tcp_process+0x60a>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086fc:	4b16      	ldr	r3, [pc, #88]	; (8008758 <tcp_process+0x5a8>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d15a      	bne.n	80087ba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008708:	2b00      	cmp	r3, #0
 800870a:	d156      	bne.n	80087ba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	8b5b      	ldrh	r3, [r3, #26]
 8008710:	f043 0302 	orr.w	r3, r3, #2
 8008714:	b29a      	uxth	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7fe fdbe 	bl	800729c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008720:	4b18      	ldr	r3, [pc, #96]	; (8008784 <tcp_process+0x5d4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d105      	bne.n	8008736 <tcp_process+0x586>
 800872a:	4b16      	ldr	r3, [pc, #88]	; (8008784 <tcp_process+0x5d4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4a14      	ldr	r2, [pc, #80]	; (8008784 <tcp_process+0x5d4>)
 8008732:	6013      	str	r3, [r2, #0]
 8008734:	e02e      	b.n	8008794 <tcp_process+0x5e4>
 8008736:	4b13      	ldr	r3, [pc, #76]	; (8008784 <tcp_process+0x5d4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e027      	b.n	800878e <tcp_process+0x5de>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	d11f      	bne.n	8008788 <tcp_process+0x5d8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	60da      	str	r2, [r3, #12]
 8008750:	e020      	b.n	8008794 <tcp_process+0x5e4>
 8008752:	bf00      	nop
 8008754:	20000160 	.word	0x20000160
 8008758:	20000158 	.word	0x20000158
 800875c:	2000015e 	.word	0x2000015e
 8008760:	20000154 	.word	0x20000154
 8008764:	20000144 	.word	0x20000144
 8008768:	200034ac 	.word	0x200034ac
 800876c:	200034b0 	.word	0x200034b0
 8008770:	08010ba8 	.word	0x08010ba8
 8008774:	08010e48 	.word	0x08010e48
 8008778:	08010bf4 	.word	0x08010bf4
 800877c:	2000015c 	.word	0x2000015c
 8008780:	20000161 	.word	0x20000161
 8008784:	20008ba0 	.word	0x20008ba0
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1d4      	bne.n	800873e <tcp_process+0x58e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	60da      	str	r2, [r3, #12]
 800879a:	4b77      	ldr	r3, [pc, #476]	; (8008978 <tcp_process+0x7c8>)
 800879c:	2201      	movs	r2, #1
 800879e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	220a      	movs	r2, #10
 80087a4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80087a6:	4b75      	ldr	r3, [pc, #468]	; (800897c <tcp_process+0x7cc>)
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60da      	str	r2, [r3, #12]
 80087ae:	4a73      	ldr	r2, [pc, #460]	; (800897c <tcp_process+0x7cc>)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6013      	str	r3, [r2, #0]
 80087b4:	f002 fcf8 	bl	800b1a8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80087b8:	e0d2      	b.n	8008960 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8b5b      	ldrh	r3, [r3, #26]
 80087be:	f043 0302 	orr.w	r3, r3, #2
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2208      	movs	r2, #8
 80087cc:	751a      	strb	r2, [r3, #20]
      break;
 80087ce:	e0c7      	b.n	8008960 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80087d0:	4b6b      	ldr	r3, [pc, #428]	; (8008980 <tcp_process+0x7d0>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 80c1 	beq.w	8008960 <tcp_process+0x7b0>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087e2:	4b68      	ldr	r3, [pc, #416]	; (8008984 <tcp_process+0x7d4>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	f040 80ba 	bne.w	8008960 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f040 80b5 	bne.w	8008960 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2206      	movs	r2, #6
 80087fa:	751a      	strb	r2, [r3, #20]
      break;
 80087fc:	e0b0      	b.n	8008960 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f9ca 	bl	8008b98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008804:	4b60      	ldr	r3, [pc, #384]	; (8008988 <tcp_process+0x7d8>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80a9 	beq.w	8008964 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	8b5b      	ldrh	r3, [r3, #26]
 8008816:	f043 0302 	orr.w	r3, r3, #2
 800881a:	b29a      	uxth	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7fe fd3b 	bl	800729c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008826:	4b59      	ldr	r3, [pc, #356]	; (800898c <tcp_process+0x7dc>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	429a      	cmp	r2, r3
 800882e:	d105      	bne.n	800883c <tcp_process+0x68c>
 8008830:	4b56      	ldr	r3, [pc, #344]	; (800898c <tcp_process+0x7dc>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	4a55      	ldr	r2, [pc, #340]	; (800898c <tcp_process+0x7dc>)
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e013      	b.n	8008864 <tcp_process+0x6b4>
 800883c:	4b53      	ldr	r3, [pc, #332]	; (800898c <tcp_process+0x7dc>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	613b      	str	r3, [r7, #16]
 8008842:	e00c      	b.n	800885e <tcp_process+0x6ae>
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d104      	bne.n	8008858 <tcp_process+0x6a8>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	60da      	str	r2, [r3, #12]
 8008856:	e005      	b.n	8008864 <tcp_process+0x6b4>
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1ef      	bne.n	8008844 <tcp_process+0x694>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	4b43      	ldr	r3, [pc, #268]	; (8008978 <tcp_process+0x7c8>)
 800886c:	2201      	movs	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	220a      	movs	r2, #10
 8008874:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008876:	4b41      	ldr	r3, [pc, #260]	; (800897c <tcp_process+0x7cc>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	60da      	str	r2, [r3, #12]
 800887e:	4a3f      	ldr	r2, [pc, #252]	; (800897c <tcp_process+0x7cc>)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	f002 fc90 	bl	800b1a8 <tcp_timer_needed>
      }
      break;
 8008888:	e06c      	b.n	8008964 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f984 	bl	8008b98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008890:	4b3b      	ldr	r3, [pc, #236]	; (8008980 <tcp_process+0x7d0>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	f003 0310 	and.w	r3, r3, #16
 8008898:	2b00      	cmp	r3, #0
 800889a:	d065      	beq.n	8008968 <tcp_process+0x7b8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088a0:	4b38      	ldr	r3, [pc, #224]	; (8008984 <tcp_process+0x7d4>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d15f      	bne.n	8008968 <tcp_process+0x7b8>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d15b      	bne.n	8008968 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7fe fcf3 	bl	800729c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80088b6:	4b35      	ldr	r3, [pc, #212]	; (800898c <tcp_process+0x7dc>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d105      	bne.n	80088cc <tcp_process+0x71c>
 80088c0:	4b32      	ldr	r3, [pc, #200]	; (800898c <tcp_process+0x7dc>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	4a31      	ldr	r2, [pc, #196]	; (800898c <tcp_process+0x7dc>)
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	e013      	b.n	80088f4 <tcp_process+0x744>
 80088cc:	4b2f      	ldr	r3, [pc, #188]	; (800898c <tcp_process+0x7dc>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	e00c      	b.n	80088ee <tcp_process+0x73e>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d104      	bne.n	80088e8 <tcp_process+0x738>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	e005      	b.n	80088f4 <tcp_process+0x744>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	60fb      	str	r3, [r7, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1ef      	bne.n	80088d4 <tcp_process+0x724>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	60da      	str	r2, [r3, #12]
 80088fa:	4b1f      	ldr	r3, [pc, #124]	; (8008978 <tcp_process+0x7c8>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	220a      	movs	r2, #10
 8008904:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008906:	4b1d      	ldr	r3, [pc, #116]	; (800897c <tcp_process+0x7cc>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	4a1b      	ldr	r2, [pc, #108]	; (800897c <tcp_process+0x7cc>)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	f002 fc48 	bl	800b1a8 <tcp_timer_needed>
      }
      break;
 8008918:	e026      	b.n	8008968 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f93c 	bl	8008b98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008920:	4b17      	ldr	r3, [pc, #92]	; (8008980 <tcp_process+0x7d0>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 0310 	and.w	r3, r3, #16
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01f      	beq.n	800896c <tcp_process+0x7bc>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008930:	4b14      	ldr	r3, [pc, #80]	; (8008984 <tcp_process+0x7d4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d119      	bne.n	800896c <tcp_process+0x7bc>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d115      	bne.n	800896c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <tcp_process+0x7d8>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f043 0310 	orr.w	r3, r3, #16
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b0f      	ldr	r3, [pc, #60]	; (8008988 <tcp_process+0x7d8>)
 800894c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800894e:	e00d      	b.n	800896c <tcp_process+0x7bc>
    default:
      break;
 8008950:	bf00      	nop
 8008952:	e00c      	b.n	800896e <tcp_process+0x7be>
      break;
 8008954:	bf00      	nop
 8008956:	e00a      	b.n	800896e <tcp_process+0x7be>
      break;
 8008958:	bf00      	nop
 800895a:	e008      	b.n	800896e <tcp_process+0x7be>
      break;
 800895c:	bf00      	nop
 800895e:	e006      	b.n	800896e <tcp_process+0x7be>
      break;
 8008960:	bf00      	nop
 8008962:	e004      	b.n	800896e <tcp_process+0x7be>
      break;
 8008964:	bf00      	nop
 8008966:	e002      	b.n	800896e <tcp_process+0x7be>
      break;
 8008968:	bf00      	nop
 800896a:	e000      	b.n	800896e <tcp_process+0x7be>
      break;
 800896c:	bf00      	nop
  }
  return ERR_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3724      	adds	r7, #36	; 0x24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd90      	pop	{r4, r7, pc}
 8008978:	20008b9c 	.word	0x20008b9c
 800897c:	20008bb0 	.word	0x20008bb0
 8008980:	20000160 	.word	0x20000160
 8008984:	20000158 	.word	0x20000158
 8008988:	20000161 	.word	0x20000161
 800898c:	20008ba0 	.word	0x20008ba0

08008990 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <tcp_oos_insert_segment+0x1e>
 80089a0:	4b3b      	ldr	r3, [pc, #236]	; (8008a90 <tcp_oos_insert_segment+0x100>)
 80089a2:	f240 421f 	movw	r2, #1055	; 0x41f
 80089a6:	493b      	ldr	r1, [pc, #236]	; (8008a94 <tcp_oos_insert_segment+0x104>)
 80089a8:	483b      	ldr	r0, [pc, #236]	; (8008a98 <tcp_oos_insert_segment+0x108>)
 80089aa:	f005 fd8b 	bl	800e4c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	899b      	ldrh	r3, [r3, #12]
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fb fcba 	bl	8004330 <lwip_htons>
 80089bc:	4603      	mov	r3, r0
 80089be:	b2db      	uxtb	r3, r3
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d028      	beq.n	8008a1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80089c8:	6838      	ldr	r0, [r7, #0]
 80089ca:	f7fe fa65 	bl	8006e98 <tcp_segs_free>
    next = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	e056      	b.n	8008a82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	899b      	ldrh	r3, [r3, #12]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fb fca7 	bl	8004330 <lwip_htons>
 80089e2:	4603      	mov	r3, r0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	899b      	ldrh	r3, [r3, #12]
 80089f4:	b29c      	uxth	r4, r3
 80089f6:	2001      	movs	r0, #1
 80089f8:	f7fb fc9a 	bl	8004330 <lwip_htons>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	4322      	orrs	r2, r4
 8008a06:	b292      	uxth	r2, r2
 8008a08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f7fe fa54 	bl	8006ec2 <tcp_seg_free>
    while (next &&
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00e      	beq.n	8008a3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	891b      	ldrh	r3, [r3, #8]
 8008a24:	461a      	mov	r2, r3
 8008a26:	4b1d      	ldr	r3, [pc, #116]	; (8008a9c <tcp_oos_insert_segment+0x10c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	441a      	add	r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	8909      	ldrh	r1, [r1, #8]
 8008a36:	440b      	add	r3, r1
 8008a38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	daca      	bge.n	80089d4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01e      	beq.n	8008a82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	891b      	ldrh	r3, [r3, #8]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	4b14      	ldr	r3, [pc, #80]	; (8008a9c <tcp_oos_insert_segment+0x10c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	441a      	add	r2, r3
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dd12      	ble.n	8008a82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	b29a      	uxth	r2, r3
 8008a64:	4b0d      	ldr	r3, [pc, #52]	; (8008a9c <tcp_oos_insert_segment+0x10c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	891b      	ldrh	r3, [r3, #8]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fc fd85 	bl	800558c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	601a      	str	r2, [r3, #0]
}
 8008a88:	bf00      	nop
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}
 8008a90:	08010ba8 	.word	0x08010ba8
 8008a94:	08010e68 	.word	0x08010e68
 8008a98:	08010bf4 	.word	0x08010bf4
 8008a9c:	20000154 	.word	0x20000154

08008aa0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008aa0:	b5b0      	push	{r4, r5, r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008aae:	e03e      	b.n	8008b2e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fc ff72 	bl	80059a8 <pbuf_clen>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008ace:	8a7a      	ldrh	r2, [r7, #18]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d906      	bls.n	8008ae2 <tcp_free_acked_segments+0x42>
 8008ad4:	4b2a      	ldr	r3, [pc, #168]	; (8008b80 <tcp_free_acked_segments+0xe0>)
 8008ad6:	f240 4257 	movw	r2, #1111	; 0x457
 8008ada:	492a      	ldr	r1, [pc, #168]	; (8008b84 <tcp_free_acked_segments+0xe4>)
 8008adc:	482a      	ldr	r0, [pc, #168]	; (8008b88 <tcp_free_acked_segments+0xe8>)
 8008ade:	f005 fcf1 	bl	800e4c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008ae8:	8a7b      	ldrh	r3, [r7, #18]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	891a      	ldrh	r2, [r3, #8]
 8008af8:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <tcp_free_acked_segments+0xec>)
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	4413      	add	r3, r2
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <tcp_free_acked_segments+0xec>)
 8008b02:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008b04:	6978      	ldr	r0, [r7, #20]
 8008b06:	f7fe f9dc 	bl	8006ec2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00c      	beq.n	8008b2e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <tcp_free_acked_segments+0x8e>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <tcp_free_acked_segments+0x8e>
 8008b20:	4b17      	ldr	r3, [pc, #92]	; (8008b80 <tcp_free_acked_segments+0xe0>)
 8008b22:	f240 4261 	movw	r2, #1121	; 0x461
 8008b26:	491a      	ldr	r1, [pc, #104]	; (8008b90 <tcp_free_acked_segments+0xf0>)
 8008b28:	4817      	ldr	r0, [pc, #92]	; (8008b88 <tcp_free_acked_segments+0xe8>)
 8008b2a:	f005 fccb 	bl	800e4c4 <iprintf>
  while (seg_list != NULL &&
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d020      	beq.n	8008b76 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fb fc0d 	bl	800435a <lwip_htonl>
 8008b40:	4604      	mov	r4, r0
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	891b      	ldrh	r3, [r3, #8]
 8008b46:	461d      	mov	r5, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	899b      	ldrh	r3, [r3, #12]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fb fbed 	bl	8004330 <lwip_htons>
 8008b56:	4603      	mov	r3, r0
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <tcp_free_acked_segments+0xc6>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <tcp_free_acked_segments+0xc8>
 8008b66:	2300      	movs	r3, #0
 8008b68:	442b      	add	r3, r5
 8008b6a:	18e2      	adds	r2, r4, r3
 8008b6c:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <tcp_free_acked_segments+0xf4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dd9c      	ble.n	8008ab0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008b76:	68bb      	ldr	r3, [r7, #8]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b80:	08010ba8 	.word	0x08010ba8
 8008b84:	08010e90 	.word	0x08010e90
 8008b88:	08010bf4 	.word	0x08010bf4
 8008b8c:	2000015c 	.word	0x2000015c
 8008b90:	08010eb8 	.word	0x08010eb8
 8008b94:	20000158 	.word	0x20000158

08008b98 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008b98:	b5b0      	push	{r4, r5, r7, lr}
 8008b9a:	b094      	sub	sp, #80	; 0x50
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <tcp_receive+0x20>
 8008baa:	4ba6      	ldr	r3, [pc, #664]	; (8008e44 <tcp_receive+0x2ac>)
 8008bac:	f240 427b 	movw	r2, #1147	; 0x47b
 8008bb0:	49a5      	ldr	r1, [pc, #660]	; (8008e48 <tcp_receive+0x2b0>)
 8008bb2:	48a6      	ldr	r0, [pc, #664]	; (8008e4c <tcp_receive+0x2b4>)
 8008bb4:	f005 fc86 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	7d1b      	ldrb	r3, [r3, #20]
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d806      	bhi.n	8008bce <tcp_receive+0x36>
 8008bc0:	4ba0      	ldr	r3, [pc, #640]	; (8008e44 <tcp_receive+0x2ac>)
 8008bc2:	f240 427c 	movw	r2, #1148	; 0x47c
 8008bc6:	49a2      	ldr	r1, [pc, #648]	; (8008e50 <tcp_receive+0x2b8>)
 8008bc8:	48a0      	ldr	r0, [pc, #640]	; (8008e4c <tcp_receive+0x2b4>)
 8008bca:	f005 fc7b 	bl	800e4c4 <iprintf>

  if (flags & TCP_ACK) {
 8008bce:	4ba1      	ldr	r3, [pc, #644]	; (8008e54 <tcp_receive+0x2bc>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	f003 0310 	and.w	r3, r3, #16
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 8263 	beq.w	80090a2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be8:	4413      	add	r3, r2
 8008bea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bf0:	4b99      	ldr	r3, [pc, #612]	; (8008e58 <tcp_receive+0x2c0>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	db1b      	blt.n	8008c32 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bfe:	4b96      	ldr	r3, [pc, #600]	; (8008e58 <tcp_receive+0x2c0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d106      	bne.n	8008c14 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c0a:	4b94      	ldr	r3, [pc, #592]	; (8008e5c <tcp_receive+0x2c4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	db0e      	blt.n	8008c32 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c18:	4b90      	ldr	r3, [pc, #576]	; (8008e5c <tcp_receive+0x2c4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d125      	bne.n	8008c6c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008c20:	4b8f      	ldr	r3, [pc, #572]	; (8008e60 <tcp_receive+0x2c8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	89db      	ldrh	r3, [r3, #14]
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d91c      	bls.n	8008c6c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008c32:	4b8b      	ldr	r3, [pc, #556]	; (8008e60 <tcp_receive+0x2c8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	89db      	ldrh	r3, [r3, #14]
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d205      	bcs.n	8008c5c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008c5c:	4b7e      	ldr	r3, [pc, #504]	; (8008e58 <tcp_receive+0x2c0>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008c64:	4b7d      	ldr	r3, [pc, #500]	; (8008e5c <tcp_receive+0x2c4>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008c6c:	4b7b      	ldr	r3, [pc, #492]	; (8008e5c <tcp_receive+0x2c4>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dc58      	bgt.n	8008d2c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008c7a:	4b7a      	ldr	r3, [pc, #488]	; (8008e64 <tcp_receive+0x2cc>)
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d14b      	bne.n	8008d1a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008c8c:	4413      	add	r3, r2
 8008c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d142      	bne.n	8008d1a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	db3d      	blt.n	8008d1a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ca2:	4b6e      	ldr	r3, [pc, #440]	; (8008e5c <tcp_receive+0x2c4>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d137      	bne.n	8008d1a <tcp_receive+0x182>
              found_dupack = 1;
 8008caa:	2301      	movs	r3, #1
 8008cac:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cb4:	2bff      	cmp	r3, #255	; 0xff
 8008cb6:	d007      	beq.n	8008cc8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d91b      	bls.n	8008d0a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cdc:	4413      	add	r3, r2
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d30a      	bcc.n	8008d00 <tcp_receive+0x168>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cf4:	4413      	add	r3, r2
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008cfe:	e004      	b.n	8008d0a <tcp_receive+0x172>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d902      	bls.n	8008d1a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fee9 	bl	800aaec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f040 8160 	bne.w	8008fe2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d2a:	e15a      	b.n	8008fe2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d2c:	4b4b      	ldr	r3, [pc, #300]	; (8008e5c <tcp_receive+0x2c4>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f2c0 814d 	blt.w	8008fd8 <tcp_receive+0x440>
 8008d3e:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <tcp_receive+0x2c4>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f300 8145 	bgt.w	8008fd8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8b5b      	ldrh	r3, [r3, #26]
 8008d52:	f003 0304 	and.w	r3, r3, #4
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	8b5b      	ldrh	r3, [r3, #26]
 8008d5e:	f023 0304 	bic.w	r3, r3, #4
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008d8a:	10db      	asrs	r3, r3, #3
 8008d8c:	b21b      	sxth	r3, r3
 8008d8e:	b29a      	uxth	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4413      	add	r3, r2
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	b21a      	sxth	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008da4:	4b2d      	ldr	r3, [pc, #180]	; (8008e5c <tcp_receive+0x2c4>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008dbc:	4b27      	ldr	r3, [pc, #156]	; (8008e5c <tcp_receive+0x2c4>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	7d1b      	ldrb	r3, [r3, #20]
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	f240 8096 	bls.w	8008efa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d244      	bcs.n	8008e68 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	8b5b      	ldrh	r3, [r3, #26]
 8008de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <tcp_receive+0x256>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <tcp_receive+0x258>
 8008dee:	2302      	movs	r3, #2
 8008df0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008df4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dfe:	fb12 f303 	smulbb	r3, r2, r3
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e06:	4293      	cmp	r3, r2
 8008e08:	bf28      	it	cs
 8008e0a:	4613      	movcs	r3, r2
 8008e0c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e16:	4413      	add	r3, r2
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d309      	bcc.n	8008e38 <tcp_receive+0x2a0>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008e2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e2c:	4413      	add	r3, r2
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008e36:	e060      	b.n	8008efa <tcp_receive+0x362>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008e42:	e05a      	b.n	8008efa <tcp_receive+0x362>
 8008e44:	08010ba8 	.word	0x08010ba8
 8008e48:	08010ed8 	.word	0x08010ed8
 8008e4c:	08010bf4 	.word	0x08010bf4
 8008e50:	08010ef4 	.word	0x08010ef4
 8008e54:	20000160 	.word	0x20000160
 8008e58:	20000154 	.word	0x20000154
 8008e5c:	20000158 	.word	0x20000158
 8008e60:	20000144 	.word	0x20000144
 8008e64:	2000015e 	.word	0x2000015e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e70:	4413      	add	r3, r2
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d309      	bcc.n	8008e92 <tcp_receive+0x2fa>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e86:	4413      	add	r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008e90:	e004      	b.n	8008e9c <tcp_receive+0x304>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d326      	bcc.n	8008efa <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ecc:	4413      	add	r3, r2
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d30a      	bcc.n	8008ef0 <tcp_receive+0x358>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ee4:	4413      	add	r3, r2
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008eee:	e004      	b.n	8008efa <tcp_receive+0x362>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ef6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f02:	4a98      	ldr	r2, [pc, #608]	; (8009164 <tcp_receive+0x5cc>)
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff fdcb 	bl	8008aa0 <tcp_free_acked_segments>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f18:	4a93      	ldr	r2, [pc, #588]	; (8009168 <tcp_receive+0x5d0>)
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fdc0 	bl	8008aa0 <tcp_free_acked_segments>
 8008f20:	4602      	mov	r2, r0
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d104      	bne.n	8008f38 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f34:	861a      	strh	r2, [r3, #48]	; 0x30
 8008f36:	e002      	b.n	8008f3e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008f5a:	4b84      	ldr	r3, [pc, #528]	; (800916c <tcp_receive+0x5d4>)
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	4413      	add	r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	8b5b      	ldrh	r3, [r3, #26]
 8008f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d035      	beq.n	8008fe0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d118      	bne.n	8008fae <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00c      	beq.n	8008f9e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fb f9e2 	bl	800435a <lwip_htonl>
 8008f96:	4603      	mov	r3, r0
 8008f98:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dc20      	bgt.n	8008fe0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8b5b      	ldrh	r3, [r3, #26]
 8008fa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008fac:	e018      	b.n	8008fe0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fb f9cd 	bl	800435a <lwip_htonl>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	1ae3      	subs	r3, r4, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dc0b      	bgt.n	8008fe0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	8b5b      	ldrh	r3, [r3, #26]
 8008fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008fd6:	e003      	b.n	8008fe0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 ff75 	bl	800aec8 <tcp_send_empty_ack>
 8008fde:	e000      	b.n	8008fe2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008fe0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d05b      	beq.n	80090a2 <tcp_receive+0x50a>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fee:	4b60      	ldr	r3, [pc, #384]	; (8009170 <tcp_receive+0x5d8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	da54      	bge.n	80090a2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008ff8:	4b5e      	ldr	r3, [pc, #376]	; (8009174 <tcp_receive+0x5dc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009002:	b29b      	uxth	r3, r3
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	b29b      	uxth	r3, r3
 8009008:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800900c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009016:	10db      	asrs	r3, r3, #3
 8009018:	b21b      	sxth	r3, r3
 800901a:	b29b      	uxth	r3, r3
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	b29b      	uxth	r3, r3
 8009020:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800902a:	b29a      	uxth	r2, r3
 800902c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009030:	4413      	add	r3, r2
 8009032:	b29b      	uxth	r3, r3
 8009034:	b21a      	sxth	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800903a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800903e:	2b00      	cmp	r3, #0
 8009040:	da05      	bge.n	800904e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009042:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009046:	425b      	negs	r3, r3
 8009048:	b29b      	uxth	r3, r3
 800904a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800904e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009058:	109b      	asrs	r3, r3, #2
 800905a:	b21b      	sxth	r3, r3
 800905c:	b29b      	uxth	r3, r3
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	b29b      	uxth	r3, r3
 8009062:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800906c:	b29a      	uxth	r2, r3
 800906e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009072:	4413      	add	r3, r2
 8009074:	b29b      	uxth	r3, r3
 8009076:	b21a      	sxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009082:	10db      	asrs	r3, r3, #3
 8009084:	b21b      	sxth	r3, r3
 8009086:	b29a      	uxth	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800908e:	b29b      	uxth	r3, r3
 8009090:	4413      	add	r3, r2
 8009092:	b29b      	uxth	r3, r3
 8009094:	b21a      	sxth	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80090a2:	4b35      	ldr	r3, [pc, #212]	; (8009178 <tcp_receive+0x5e0>)
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 84e1 	beq.w	8009a6e <tcp_receive+0xed6>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	7d1b      	ldrb	r3, [r3, #20]
 80090b0:	2b06      	cmp	r3, #6
 80090b2:	f200 84dc 	bhi.w	8009a6e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090ba:	4b30      	ldr	r3, [pc, #192]	; (800917c <tcp_receive+0x5e4>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	3b01      	subs	r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f2c0 808e 	blt.w	80091e4 <tcp_receive+0x64c>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090cc:	4b2a      	ldr	r3, [pc, #168]	; (8009178 <tcp_receive+0x5e0>)
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	4619      	mov	r1, r3
 80090d2:	4b2a      	ldr	r3, [pc, #168]	; (800917c <tcp_receive+0x5e4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	440b      	add	r3, r1
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	3301      	adds	r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f300 8081 	bgt.w	80091e4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80090e2:	4b27      	ldr	r3, [pc, #156]	; (8009180 <tcp_receive+0x5e8>)
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090ec:	4b23      	ldr	r3, [pc, #140]	; (800917c <tcp_receive+0x5e4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80090f4:	4b22      	ldr	r3, [pc, #136]	; (8009180 <tcp_receive+0x5e8>)
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d106      	bne.n	800910a <tcp_receive+0x572>
 80090fc:	4b21      	ldr	r3, [pc, #132]	; (8009184 <tcp_receive+0x5ec>)
 80090fe:	f240 5294 	movw	r2, #1428	; 0x594
 8009102:	4921      	ldr	r1, [pc, #132]	; (8009188 <tcp_receive+0x5f0>)
 8009104:	4821      	ldr	r0, [pc, #132]	; (800918c <tcp_receive+0x5f4>)
 8009106:	f005 f9dd 	bl	800e4c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009110:	4293      	cmp	r3, r2
 8009112:	d906      	bls.n	8009122 <tcp_receive+0x58a>
 8009114:	4b1b      	ldr	r3, [pc, #108]	; (8009184 <tcp_receive+0x5ec>)
 8009116:	f240 5295 	movw	r2, #1429	; 0x595
 800911a:	491d      	ldr	r1, [pc, #116]	; (8009190 <tcp_receive+0x5f8>)
 800911c:	481b      	ldr	r0, [pc, #108]	; (800918c <tcp_receive+0x5f4>)
 800911e:	f005 f9d1 	bl	800e4c4 <iprintf>
      off = (u16_t)off32;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009128:	4b15      	ldr	r3, [pc, #84]	; (8009180 <tcp_receive+0x5e8>)
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	891b      	ldrh	r3, [r3, #8]
 800912e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009132:	429a      	cmp	r2, r3
 8009134:	d906      	bls.n	8009144 <tcp_receive+0x5ac>
 8009136:	4b13      	ldr	r3, [pc, #76]	; (8009184 <tcp_receive+0x5ec>)
 8009138:	f240 5297 	movw	r2, #1431	; 0x597
 800913c:	4915      	ldr	r1, [pc, #84]	; (8009194 <tcp_receive+0x5fc>)
 800913e:	4813      	ldr	r0, [pc, #76]	; (800918c <tcp_receive+0x5f4>)
 8009140:	f005 f9c0 	bl	800e4c4 <iprintf>
      inseg.len -= off;
 8009144:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <tcp_receive+0x5e8>)
 8009146:	891a      	ldrh	r2, [r3, #8]
 8009148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	b29a      	uxth	r2, r3
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <tcp_receive+0x5e8>)
 8009152:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <tcp_receive+0x5e8>)
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	891a      	ldrh	r2, [r3, #8]
 800915a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009162:	e029      	b.n	80091b8 <tcp_receive+0x620>
 8009164:	08010f10 	.word	0x08010f10
 8009168:	08010f18 	.word	0x08010f18
 800916c:	2000015c 	.word	0x2000015c
 8009170:	20000158 	.word	0x20000158
 8009174:	20008ba4 	.word	0x20008ba4
 8009178:	2000015e 	.word	0x2000015e
 800917c:	20000154 	.word	0x20000154
 8009180:	20000134 	.word	0x20000134
 8009184:	08010ba8 	.word	0x08010ba8
 8009188:	08010f20 	.word	0x08010f20
 800918c:	08010bf4 	.word	0x08010bf4
 8009190:	08010f30 	.word	0x08010f30
 8009194:	08010f40 	.word	0x08010f40
        off -= p->len;
 8009198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800919a:	895b      	ldrh	r3, [r3, #10]
 800919c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80091a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80091aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80091ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ae:	2200      	movs	r2, #0
 80091b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80091b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80091b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ba:	895b      	ldrh	r3, [r3, #10]
 80091bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d8e9      	bhi.n	8009198 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80091c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80091c8:	4619      	mov	r1, r3
 80091ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80091cc:	f7fc fade 	bl	800578c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	4a91      	ldr	r2, [pc, #580]	; (800941c <tcp_receive+0x884>)
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	4b91      	ldr	r3, [pc, #580]	; (8009420 <tcp_receive+0x888>)
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	4a8f      	ldr	r2, [pc, #572]	; (800941c <tcp_receive+0x884>)
 80091de:	6812      	ldr	r2, [r2, #0]
 80091e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80091e2:	e00d      	b.n	8009200 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80091e4:	4b8d      	ldr	r3, [pc, #564]	; (800941c <tcp_receive+0x884>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	da06      	bge.n	8009200 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	8b5b      	ldrh	r3, [r3, #26]
 80091f6:	f043 0302 	orr.w	r3, r3, #2
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009200:	4b86      	ldr	r3, [pc, #536]	; (800941c <tcp_receive+0x884>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	f2c0 842a 	blt.w	8009a64 <tcp_receive+0xecc>
 8009210:	4b82      	ldr	r3, [pc, #520]	; (800941c <tcp_receive+0x884>)
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800921c:	440b      	add	r3, r1
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	3301      	adds	r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	f300 841e 	bgt.w	8009a64 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800922c:	4b7b      	ldr	r3, [pc, #492]	; (800941c <tcp_receive+0x884>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	429a      	cmp	r2, r3
 8009232:	f040 829a 	bne.w	800976a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009236:	4b7a      	ldr	r3, [pc, #488]	; (8009420 <tcp_receive+0x888>)
 8009238:	891c      	ldrh	r4, [r3, #8]
 800923a:	4b79      	ldr	r3, [pc, #484]	; (8009420 <tcp_receive+0x888>)
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	899b      	ldrh	r3, [r3, #12]
 8009240:	b29b      	uxth	r3, r3
 8009242:	4618      	mov	r0, r3
 8009244:	f7fb f874 	bl	8004330 <lwip_htons>
 8009248:	4603      	mov	r3, r0
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 0303 	and.w	r3, r3, #3
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <tcp_receive+0x6c0>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <tcp_receive+0x6c2>
 8009258:	2300      	movs	r3, #0
 800925a:	4423      	add	r3, r4
 800925c:	b29a      	uxth	r2, r3
 800925e:	4b71      	ldr	r3, [pc, #452]	; (8009424 <tcp_receive+0x88c>)
 8009260:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009266:	4b6f      	ldr	r3, [pc, #444]	; (8009424 <tcp_receive+0x88c>)
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d275      	bcs.n	800935a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800926e:	4b6c      	ldr	r3, [pc, #432]	; (8009420 <tcp_receive+0x888>)
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	899b      	ldrh	r3, [r3, #12]
 8009274:	b29b      	uxth	r3, r3
 8009276:	4618      	mov	r0, r3
 8009278:	f7fb f85a 	bl	8004330 <lwip_htons>
 800927c:	4603      	mov	r3, r0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01f      	beq.n	80092c8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009288:	4b65      	ldr	r3, [pc, #404]	; (8009420 <tcp_receive+0x888>)
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	899b      	ldrh	r3, [r3, #12]
 800928e:	b29b      	uxth	r3, r3
 8009290:	b21b      	sxth	r3, r3
 8009292:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009296:	b21c      	sxth	r4, r3
 8009298:	4b61      	ldr	r3, [pc, #388]	; (8009420 <tcp_receive+0x888>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	899b      	ldrh	r3, [r3, #12]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fb f845 	bl	8004330 <lwip_htons>
 80092a6:	4603      	mov	r3, r0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7fb f83c 	bl	8004330 <lwip_htons>
 80092b8:	4603      	mov	r3, r0
 80092ba:	b21b      	sxth	r3, r3
 80092bc:	4323      	orrs	r3, r4
 80092be:	b21a      	sxth	r2, r3
 80092c0:	4b57      	ldr	r3, [pc, #348]	; (8009420 <tcp_receive+0x888>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	b292      	uxth	r2, r2
 80092c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80092cc:	4b54      	ldr	r3, [pc, #336]	; (8009420 <tcp_receive+0x888>)
 80092ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80092d0:	4b53      	ldr	r3, [pc, #332]	; (8009420 <tcp_receive+0x888>)
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	899b      	ldrh	r3, [r3, #12]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fb f829 	bl	8004330 <lwip_htons>
 80092de:	4603      	mov	r3, r0
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	f003 0302 	and.w	r3, r3, #2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d005      	beq.n	80092f6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80092ea:	4b4d      	ldr	r3, [pc, #308]	; (8009420 <tcp_receive+0x888>)
 80092ec:	891b      	ldrh	r3, [r3, #8]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	4b4b      	ldr	r3, [pc, #300]	; (8009420 <tcp_receive+0x888>)
 80092f4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80092f6:	4b4a      	ldr	r3, [pc, #296]	; (8009420 <tcp_receive+0x888>)
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	4a49      	ldr	r2, [pc, #292]	; (8009420 <tcp_receive+0x888>)
 80092fc:	8912      	ldrh	r2, [r2, #8]
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7fc f943 	bl	800558c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009306:	4b46      	ldr	r3, [pc, #280]	; (8009420 <tcp_receive+0x888>)
 8009308:	891c      	ldrh	r4, [r3, #8]
 800930a:	4b45      	ldr	r3, [pc, #276]	; (8009420 <tcp_receive+0x888>)
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	899b      	ldrh	r3, [r3, #12]
 8009310:	b29b      	uxth	r3, r3
 8009312:	4618      	mov	r0, r3
 8009314:	f7fb f80c 	bl	8004330 <lwip_htons>
 8009318:	4603      	mov	r3, r0
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <tcp_receive+0x790>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <tcp_receive+0x792>
 8009328:	2300      	movs	r3, #0
 800932a:	4423      	add	r3, r4
 800932c:	b29a      	uxth	r2, r3
 800932e:	4b3d      	ldr	r3, [pc, #244]	; (8009424 <tcp_receive+0x88c>)
 8009330:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009332:	4b3c      	ldr	r3, [pc, #240]	; (8009424 <tcp_receive+0x88c>)
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	4b38      	ldr	r3, [pc, #224]	; (800941c <tcp_receive+0x884>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	441a      	add	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009342:	6879      	ldr	r1, [r7, #4]
 8009344:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009346:	440b      	add	r3, r1
 8009348:	429a      	cmp	r2, r3
 800934a:	d006      	beq.n	800935a <tcp_receive+0x7c2>
 800934c:	4b36      	ldr	r3, [pc, #216]	; (8009428 <tcp_receive+0x890>)
 800934e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009352:	4936      	ldr	r1, [pc, #216]	; (800942c <tcp_receive+0x894>)
 8009354:	4836      	ldr	r0, [pc, #216]	; (8009430 <tcp_receive+0x898>)
 8009356:	f005 f8b5 	bl	800e4c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 80e7 	beq.w	8009532 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009364:	4b2e      	ldr	r3, [pc, #184]	; (8009420 <tcp_receive+0x888>)
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	899b      	ldrh	r3, [r3, #12]
 800936a:	b29b      	uxth	r3, r3
 800936c:	4618      	mov	r0, r3
 800936e:	f7fa ffdf 	bl	8004330 <lwip_htons>
 8009372:	4603      	mov	r3, r0
 8009374:	b2db      	uxtb	r3, r3
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d010      	beq.n	80093a0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800937e:	e00a      	b.n	8009396 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009384:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7fd fd96 	bl	8006ec2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f0      	bne.n	8009380 <tcp_receive+0x7e8>
 800939e:	e0c8      	b.n	8009532 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80093a6:	e052      	b.n	800944e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80093a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	899b      	ldrh	r3, [r3, #12]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fa ffbd 	bl	8004330 <lwip_htons>
 80093b6:	4603      	mov	r3, r0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d03d      	beq.n	800943e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80093c2:	4b17      	ldr	r3, [pc, #92]	; (8009420 <tcp_receive+0x888>)
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	899b      	ldrh	r3, [r3, #12]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fa ffb0 	bl	8004330 <lwip_htons>
 80093d0:	4603      	mov	r3, r0
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d130      	bne.n	800943e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80093dc:	4b10      	ldr	r3, [pc, #64]	; (8009420 <tcp_receive+0x888>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	899b      	ldrh	r3, [r3, #12]
 80093e2:	b29c      	uxth	r4, r3
 80093e4:	2001      	movs	r0, #1
 80093e6:	f7fa ffa3 	bl	8004330 <lwip_htons>
 80093ea:	4603      	mov	r3, r0
 80093ec:	461a      	mov	r2, r3
 80093ee:	4b0c      	ldr	r3, [pc, #48]	; (8009420 <tcp_receive+0x888>)
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	4322      	orrs	r2, r4
 80093f4:	b292      	uxth	r2, r2
 80093f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80093f8:	4b09      	ldr	r3, [pc, #36]	; (8009420 <tcp_receive+0x888>)
 80093fa:	891c      	ldrh	r4, [r3, #8]
 80093fc:	4b08      	ldr	r3, [pc, #32]	; (8009420 <tcp_receive+0x888>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	899b      	ldrh	r3, [r3, #12]
 8009402:	b29b      	uxth	r3, r3
 8009404:	4618      	mov	r0, r3
 8009406:	f7fa ff93 	bl	8004330 <lwip_htons>
 800940a:	4603      	mov	r3, r0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00e      	beq.n	8009434 <tcp_receive+0x89c>
 8009416:	2301      	movs	r3, #1
 8009418:	e00d      	b.n	8009436 <tcp_receive+0x89e>
 800941a:	bf00      	nop
 800941c:	20000154 	.word	0x20000154
 8009420:	20000134 	.word	0x20000134
 8009424:	2000015e 	.word	0x2000015e
 8009428:	08010ba8 	.word	0x08010ba8
 800942c:	08010f50 	.word	0x08010f50
 8009430:	08010bf4 	.word	0x08010bf4
 8009434:	2300      	movs	r3, #0
 8009436:	4423      	add	r3, r4
 8009438:	b29a      	uxth	r2, r3
 800943a:	4b98      	ldr	r3, [pc, #608]	; (800969c <tcp_receive+0xb04>)
 800943c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009448:	6938      	ldr	r0, [r7, #16]
 800944a:	f7fd fd3a 	bl	8006ec2 <tcp_seg_free>
            while (next &&
 800944e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00e      	beq.n	8009472 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009454:	4b91      	ldr	r3, [pc, #580]	; (800969c <tcp_receive+0xb04>)
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	4b91      	ldr	r3, [pc, #580]	; (80096a0 <tcp_receive+0xb08>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	441a      	add	r2, r3
 8009460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009468:	8909      	ldrh	r1, [r1, #8]
 800946a:	440b      	add	r3, r1
 800946c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800946e:	2b00      	cmp	r3, #0
 8009470:	da9a      	bge.n	80093a8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009474:	2b00      	cmp	r3, #0
 8009476:	d059      	beq.n	800952c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009478:	4b88      	ldr	r3, [pc, #544]	; (800969c <tcp_receive+0xb04>)
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	4b88      	ldr	r3, [pc, #544]	; (80096a0 <tcp_receive+0xb08>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	441a      	add	r2, r3
 8009484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800948c:	2b00      	cmp	r3, #0
 800948e:	dd4d      	ble.n	800952c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	b29a      	uxth	r2, r3
 8009498:	4b81      	ldr	r3, [pc, #516]	; (80096a0 <tcp_receive+0xb08>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	b29b      	uxth	r3, r3
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	4b80      	ldr	r3, [pc, #512]	; (80096a4 <tcp_receive+0xb0c>)
 80094a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80094a6:	4b7f      	ldr	r3, [pc, #508]	; (80096a4 <tcp_receive+0xb0c>)
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	899b      	ldrh	r3, [r3, #12]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fa ff3e 	bl	8004330 <lwip_htons>
 80094b4:	4603      	mov	r3, r0
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <tcp_receive+0x934>
                inseg.len -= 1;
 80094c0:	4b78      	ldr	r3, [pc, #480]	; (80096a4 <tcp_receive+0xb0c>)
 80094c2:	891b      	ldrh	r3, [r3, #8]
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	4b76      	ldr	r3, [pc, #472]	; (80096a4 <tcp_receive+0xb0c>)
 80094ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80094cc:	4b75      	ldr	r3, [pc, #468]	; (80096a4 <tcp_receive+0xb0c>)
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	4a74      	ldr	r2, [pc, #464]	; (80096a4 <tcp_receive+0xb0c>)
 80094d2:	8912      	ldrh	r2, [r2, #8]
 80094d4:	4611      	mov	r1, r2
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fc f858 	bl	800558c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80094dc:	4b71      	ldr	r3, [pc, #452]	; (80096a4 <tcp_receive+0xb0c>)
 80094de:	891c      	ldrh	r4, [r3, #8]
 80094e0:	4b70      	ldr	r3, [pc, #448]	; (80096a4 <tcp_receive+0xb0c>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	899b      	ldrh	r3, [r3, #12]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fa ff21 	bl	8004330 <lwip_htons>
 80094ee:	4603      	mov	r3, r0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <tcp_receive+0x966>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <tcp_receive+0x968>
 80094fe:	2300      	movs	r3, #0
 8009500:	4423      	add	r3, r4
 8009502:	b29a      	uxth	r2, r3
 8009504:	4b65      	ldr	r3, [pc, #404]	; (800969c <tcp_receive+0xb04>)
 8009506:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009508:	4b64      	ldr	r3, [pc, #400]	; (800969c <tcp_receive+0xb04>)
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	4b64      	ldr	r3, [pc, #400]	; (80096a0 <tcp_receive+0xb08>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	441a      	add	r2, r3
 8009514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	429a      	cmp	r2, r3
 800951c:	d006      	beq.n	800952c <tcp_receive+0x994>
 800951e:	4b62      	ldr	r3, [pc, #392]	; (80096a8 <tcp_receive+0xb10>)
 8009520:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009524:	4961      	ldr	r1, [pc, #388]	; (80096ac <tcp_receive+0xb14>)
 8009526:	4862      	ldr	r0, [pc, #392]	; (80096b0 <tcp_receive+0xb18>)
 8009528:	f004 ffcc 	bl	800e4c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009530:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009532:	4b5a      	ldr	r3, [pc, #360]	; (800969c <tcp_receive+0xb04>)
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	4b59      	ldr	r3, [pc, #356]	; (80096a0 <tcp_receive+0xb08>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	441a      	add	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009546:	4b55      	ldr	r3, [pc, #340]	; (800969c <tcp_receive+0xb04>)
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	429a      	cmp	r2, r3
 800954c:	d206      	bcs.n	800955c <tcp_receive+0x9c4>
 800954e:	4b56      	ldr	r3, [pc, #344]	; (80096a8 <tcp_receive+0xb10>)
 8009550:	f240 6207 	movw	r2, #1543	; 0x607
 8009554:	4957      	ldr	r1, [pc, #348]	; (80096b4 <tcp_receive+0xb1c>)
 8009556:	4856      	ldr	r0, [pc, #344]	; (80096b0 <tcp_receive+0xb18>)
 8009558:	f004 ffb4 	bl	800e4c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009560:	4b4e      	ldr	r3, [pc, #312]	; (800969c <tcp_receive+0xb04>)
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	b29a      	uxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7fc ffc9 	bl	8006504 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009572:	4b4c      	ldr	r3, [pc, #304]	; (80096a4 <tcp_receive+0xb0c>)
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	891b      	ldrh	r3, [r3, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d006      	beq.n	800958a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800957c:	4b49      	ldr	r3, [pc, #292]	; (80096a4 <tcp_receive+0xb0c>)
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4a4d      	ldr	r2, [pc, #308]	; (80096b8 <tcp_receive+0xb20>)
 8009582:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009584:	4b47      	ldr	r3, [pc, #284]	; (80096a4 <tcp_receive+0xb0c>)
 8009586:	2200      	movs	r2, #0
 8009588:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800958a:	4b46      	ldr	r3, [pc, #280]	; (80096a4 <tcp_receive+0xb0c>)
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	899b      	ldrh	r3, [r3, #12]
 8009590:	b29b      	uxth	r3, r3
 8009592:	4618      	mov	r0, r3
 8009594:	f7fa fecc 	bl	8004330 <lwip_htons>
 8009598:	4603      	mov	r3, r0
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 80b8 	beq.w	8009716 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80095a6:	4b45      	ldr	r3, [pc, #276]	; (80096bc <tcp_receive+0xb24>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	f043 0320 	orr.w	r3, r3, #32
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	4b42      	ldr	r3, [pc, #264]	; (80096bc <tcp_receive+0xb24>)
 80095b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80095b4:	e0af      	b.n	8009716 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	4a36      	ldr	r2, [pc, #216]	; (80096a0 <tcp_receive+0xb08>)
 80095c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	891b      	ldrh	r3, [r3, #8]
 80095cc:	461c      	mov	r4, r3
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	899b      	ldrh	r3, [r3, #12]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fa feaa 	bl	8004330 <lwip_htons>
 80095dc:	4603      	mov	r3, r0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <tcp_receive+0xa54>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <tcp_receive+0xa56>
 80095ec:	2300      	movs	r3, #0
 80095ee:	191a      	adds	r2, r3, r4
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	441a      	add	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095fe:	461c      	mov	r4, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	891b      	ldrh	r3, [r3, #8]
 8009604:	461d      	mov	r5, r3
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	899b      	ldrh	r3, [r3, #12]
 800960c:	b29b      	uxth	r3, r3
 800960e:	4618      	mov	r0, r3
 8009610:	f7fa fe8e 	bl	8004330 <lwip_htons>
 8009614:	4603      	mov	r3, r0
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 0303 	and.w	r3, r3, #3
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <tcp_receive+0xa8c>
 8009620:	2301      	movs	r3, #1
 8009622:	e000      	b.n	8009626 <tcp_receive+0xa8e>
 8009624:	2300      	movs	r3, #0
 8009626:	442b      	add	r3, r5
 8009628:	429c      	cmp	r4, r3
 800962a:	d206      	bcs.n	800963a <tcp_receive+0xaa2>
 800962c:	4b1e      	ldr	r3, [pc, #120]	; (80096a8 <tcp_receive+0xb10>)
 800962e:	f240 622b 	movw	r2, #1579	; 0x62b
 8009632:	4923      	ldr	r1, [pc, #140]	; (80096c0 <tcp_receive+0xb28>)
 8009634:	481e      	ldr	r0, [pc, #120]	; (80096b0 <tcp_receive+0xb18>)
 8009636:	f004 ff45 	bl	800e4c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	891b      	ldrh	r3, [r3, #8]
 800963e:	461c      	mov	r4, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	899b      	ldrh	r3, [r3, #12]
 8009646:	b29b      	uxth	r3, r3
 8009648:	4618      	mov	r0, r3
 800964a:	f7fa fe71 	bl	8004330 <lwip_htons>
 800964e:	4603      	mov	r3, r0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <tcp_receive+0xac6>
 800965a:	2301      	movs	r3, #1
 800965c:	e000      	b.n	8009660 <tcp_receive+0xac8>
 800965e:	2300      	movs	r3, #0
 8009660:	1919      	adds	r1, r3, r4
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009666:	b28b      	uxth	r3, r1
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	b29a      	uxth	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7fc ff47 	bl	8006504 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	891b      	ldrh	r3, [r3, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d028      	beq.n	80096d2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009680:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <tcp_receive+0xb20>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01d      	beq.n	80096c4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009688:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <tcp_receive+0xb20>)
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7fc f9c2 	bl	8005a1c <pbuf_cat>
 8009698:	e018      	b.n	80096cc <tcp_receive+0xb34>
 800969a:	bf00      	nop
 800969c:	2000015e 	.word	0x2000015e
 80096a0:	20000154 	.word	0x20000154
 80096a4:	20000134 	.word	0x20000134
 80096a8:	08010ba8 	.word	0x08010ba8
 80096ac:	08010f88 	.word	0x08010f88
 80096b0:	08010bf4 	.word	0x08010bf4
 80096b4:	08010fc4 	.word	0x08010fc4
 80096b8:	20000164 	.word	0x20000164
 80096bc:	20000161 	.word	0x20000161
 80096c0:	08010fe4 	.word	0x08010fe4
            } else {
              recv_data = cseg->p;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	4a70      	ldr	r2, [pc, #448]	; (800988c <tcp_receive+0xcf4>)
 80096ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	899b      	ldrh	r3, [r3, #12]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fa fe28 	bl	8004330 <lwip_htons>
 80096e0:	4603      	mov	r3, r0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00d      	beq.n	8009708 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80096ec:	4b68      	ldr	r3, [pc, #416]	; (8009890 <tcp_receive+0xcf8>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f043 0320 	orr.w	r3, r3, #32
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	4b66      	ldr	r3, [pc, #408]	; (8009890 <tcp_receive+0xcf8>)
 80096f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7d1b      	ldrb	r3, [r3, #20]
 80096fe:	2b04      	cmp	r3, #4
 8009700:	d102      	bne.n	8009708 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2207      	movs	r2, #7
 8009706:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009710:	68b8      	ldr	r0, [r7, #8]
 8009712:	f7fd fbd6 	bl	8006ec2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800971a:	2b00      	cmp	r3, #0
 800971c:	d008      	beq.n	8009730 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800972a:	429a      	cmp	r2, r3
 800972c:	f43f af43 	beq.w	80095b6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	8b5b      	ldrh	r3, [r3, #26]
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00e      	beq.n	800975a <tcp_receive+0xbc2>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	8b5b      	ldrh	r3, [r3, #26]
 8009740:	f023 0301 	bic.w	r3, r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	835a      	strh	r2, [r3, #26]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	8b5b      	ldrh	r3, [r3, #26]
 800974e:	f043 0302 	orr.w	r3, r3, #2
 8009752:	b29a      	uxth	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009758:	e188      	b.n	8009a6c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	8b5b      	ldrh	r3, [r3, #26]
 800975e:	f043 0301 	orr.w	r3, r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009768:	e180      	b.n	8009a6c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800976e:	2b00      	cmp	r3, #0
 8009770:	d106      	bne.n	8009780 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009772:	4848      	ldr	r0, [pc, #288]	; (8009894 <tcp_receive+0xcfc>)
 8009774:	f7fd fbbe 	bl	8006ef4 <tcp_seg_copy>
 8009778:	4602      	mov	r2, r0
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	675a      	str	r2, [r3, #116]	; 0x74
 800977e:	e16d      	b.n	8009a5c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009788:	63bb      	str	r3, [r7, #56]	; 0x38
 800978a:	e157      	b.n	8009a3c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	685a      	ldr	r2, [r3, #4]
 8009792:	4b41      	ldr	r3, [pc, #260]	; (8009898 <tcp_receive+0xd00>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d11d      	bne.n	80097d6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800979a:	4b3e      	ldr	r3, [pc, #248]	; (8009894 <tcp_receive+0xcfc>)
 800979c:	891a      	ldrh	r2, [r3, #8]
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	891b      	ldrh	r3, [r3, #8]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	f240 814f 	bls.w	8009a46 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80097a8:	483a      	ldr	r0, [pc, #232]	; (8009894 <tcp_receive+0xcfc>)
 80097aa:	f7fd fba3 	bl	8006ef4 <tcp_seg_copy>
 80097ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 8149 	beq.w	8009a4a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80097b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	e002      	b.n	80097cc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80097cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097ce:	6978      	ldr	r0, [r7, #20]
 80097d0:	f7ff f8de 	bl	8008990 <tcp_oos_insert_segment>
                }
                break;
 80097d4:	e139      	b.n	8009a4a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80097d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d117      	bne.n	800980c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80097dc:	4b2e      	ldr	r3, [pc, #184]	; (8009898 <tcp_receive+0xd00>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	da57      	bge.n	800989c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80097ec:	4829      	ldr	r0, [pc, #164]	; (8009894 <tcp_receive+0xcfc>)
 80097ee:	f7fd fb81 	bl	8006ef4 <tcp_seg_copy>
 80097f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 8129 	beq.w	8009a4e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009802:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009804:	69b8      	ldr	r0, [r7, #24]
 8009806:	f7ff f8c3 	bl	8008990 <tcp_oos_insert_segment>
                  }
                  break;
 800980a:	e120      	b.n	8009a4e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800980c:	4b22      	ldr	r3, [pc, #136]	; (8009898 <tcp_receive+0xd00>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	3b01      	subs	r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	db3e      	blt.n	800989c <tcp_receive+0xd04>
 800981e:	4b1e      	ldr	r3, [pc, #120]	; (8009898 <tcp_receive+0xd00>)
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	3301      	adds	r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	dc35      	bgt.n	800989c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009830:	4818      	ldr	r0, [pc, #96]	; (8009894 <tcp_receive+0xcfc>)
 8009832:	f7fd fb5f 	bl	8006ef4 <tcp_seg_copy>
 8009836:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 8109 	beq.w	8009a52 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009848:	8912      	ldrh	r2, [r2, #8]
 800984a:	441a      	add	r2, r3
 800984c:	4b12      	ldr	r3, [pc, #72]	; (8009898 <tcp_receive+0xd00>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	dd12      	ble.n	800987c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009856:	4b10      	ldr	r3, [pc, #64]	; (8009898 <tcp_receive+0xd00>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	b29a      	uxth	r2, r3
 800985c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	b29b      	uxth	r3, r3
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	b29a      	uxth	r2, r3
 8009868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800986c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009872:	891b      	ldrh	r3, [r3, #8]
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7fb fe88 	bl	800558c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800987c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009884:	69f8      	ldr	r0, [r7, #28]
 8009886:	f7ff f883 	bl	8008990 <tcp_oos_insert_segment>
                  }
                  break;
 800988a:	e0e2      	b.n	8009a52 <tcp_receive+0xeba>
 800988c:	20000164 	.word	0x20000164
 8009890:	20000161 	.word	0x20000161
 8009894:	20000134 	.word	0x20000134
 8009898:	20000154 	.word	0x20000154
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f040 80c6 	bne.w	8009a36 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80098aa:	4b80      	ldr	r3, [pc, #512]	; (8009aac <tcp_receive+0xf14>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f340 80bd 	ble.w	8009a36 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	899b      	ldrh	r3, [r3, #12]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fa fd33 	bl	8004330 <lwip_htons>
 80098ca:	4603      	mov	r3, r0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f040 80bf 	bne.w	8009a56 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80098d8:	4875      	ldr	r0, [pc, #468]	; (8009ab0 <tcp_receive+0xf18>)
 80098da:	f7fd fb0b 	bl	8006ef4 <tcp_seg_copy>
 80098de:	4602      	mov	r2, r0
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 80b6 	beq.w	8009a5a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098f6:	8912      	ldrh	r2, [r2, #8]
 80098f8:	441a      	add	r2, r3
 80098fa:	4b6c      	ldr	r3, [pc, #432]	; (8009aac <tcp_receive+0xf14>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	dd12      	ble.n	800992a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009904:	4b69      	ldr	r3, [pc, #420]	; (8009aac <tcp_receive+0xf14>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	b29a      	uxth	r2, r3
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	b29b      	uxth	r3, r3
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	b29a      	uxth	r2, r3
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009920:	891b      	ldrh	r3, [r3, #8]
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f7fb fe31 	bl	800558c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800992a:	4b62      	ldr	r3, [pc, #392]	; (8009ab4 <tcp_receive+0xf1c>)
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	4b5e      	ldr	r3, [pc, #376]	; (8009aac <tcp_receive+0xf14>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	441a      	add	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800993e:	440b      	add	r3, r1
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	f340 8089 	ble.w	8009a5a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	899b      	ldrh	r3, [r3, #12]
 8009950:	b29b      	uxth	r3, r3
 8009952:	4618      	mov	r0, r3
 8009954:	f7fa fcec 	bl	8004330 <lwip_htons>
 8009958:	4603      	mov	r3, r0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d022      	beq.n	80099aa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	899b      	ldrh	r3, [r3, #12]
 800996c:	b29b      	uxth	r3, r3
 800996e:	b21b      	sxth	r3, r3
 8009970:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009974:	b21c      	sxth	r4, r3
 8009976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	899b      	ldrh	r3, [r3, #12]
 800997e:	b29b      	uxth	r3, r3
 8009980:	4618      	mov	r0, r3
 8009982:	f7fa fcd5 	bl	8004330 <lwip_htons>
 8009986:	4603      	mov	r3, r0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	b29b      	uxth	r3, r3
 800998c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009990:	b29b      	uxth	r3, r3
 8009992:	4618      	mov	r0, r3
 8009994:	f7fa fccc 	bl	8004330 <lwip_htons>
 8009998:	4603      	mov	r3, r0
 800999a:	b21b      	sxth	r3, r3
 800999c:	4323      	orrs	r3, r4
 800999e:	b21a      	sxth	r2, r3
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	b292      	uxth	r2, r2
 80099a8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b4:	4413      	add	r3, r2
 80099b6:	b299      	uxth	r1, r3
 80099b8:	4b3c      	ldr	r3, [pc, #240]	; (8009aac <tcp_receive+0xf14>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	b29a      	uxth	r2, r3
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	1a8a      	subs	r2, r1, r2
 80099c4:	b292      	uxth	r2, r2
 80099c6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685a      	ldr	r2, [r3, #4]
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	891b      	ldrh	r3, [r3, #8]
 80099d4:	4619      	mov	r1, r3
 80099d6:	4610      	mov	r0, r2
 80099d8:	f7fb fdd8 	bl	800558c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	891c      	ldrh	r4, [r3, #8]
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	899b      	ldrh	r3, [r3, #12]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fa fc9f 	bl	8004330 <lwip_htons>
 80099f2:	4603      	mov	r3, r0
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <tcp_receive+0xe6a>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e000      	b.n	8009a04 <tcp_receive+0xe6c>
 8009a02:	2300      	movs	r3, #0
 8009a04:	4423      	add	r3, r4
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	4b2a      	ldr	r3, [pc, #168]	; (8009ab4 <tcp_receive+0xf1c>)
 8009a0a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a0c:	4b29      	ldr	r3, [pc, #164]	; (8009ab4 <tcp_receive+0xf1c>)
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	4b26      	ldr	r3, [pc, #152]	; (8009aac <tcp_receive+0xf14>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	441a      	add	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a20:	440b      	add	r3, r1
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d019      	beq.n	8009a5a <tcp_receive+0xec2>
 8009a26:	4b24      	ldr	r3, [pc, #144]	; (8009ab8 <tcp_receive+0xf20>)
 8009a28:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009a2c:	4923      	ldr	r1, [pc, #140]	; (8009abc <tcp_receive+0xf24>)
 8009a2e:	4824      	ldr	r0, [pc, #144]	; (8009ac0 <tcp_receive+0xf28>)
 8009a30:	f004 fd48 	bl	800e4c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009a34:	e011      	b.n	8009a5a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f47f aea4 	bne.w	800978c <tcp_receive+0xbf4>
 8009a44:	e00a      	b.n	8009a5c <tcp_receive+0xec4>
                break;
 8009a46:	bf00      	nop
 8009a48:	e008      	b.n	8009a5c <tcp_receive+0xec4>
                break;
 8009a4a:	bf00      	nop
 8009a4c:	e006      	b.n	8009a5c <tcp_receive+0xec4>
                  break;
 8009a4e:	bf00      	nop
 8009a50:	e004      	b.n	8009a5c <tcp_receive+0xec4>
                  break;
 8009a52:	bf00      	nop
 8009a54:	e002      	b.n	8009a5c <tcp_receive+0xec4>
                  break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <tcp_receive+0xec4>
                break;
 8009a5a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 fa33 	bl	800aec8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009a62:	e003      	b.n	8009a6c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 fa2f 	bl	800aec8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a6a:	e01a      	b.n	8009aa2 <tcp_receive+0xf0a>
 8009a6c:	e019      	b.n	8009aa2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <tcp_receive+0xf14>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db0a      	blt.n	8009a92 <tcp_receive+0xefa>
 8009a7c:	4b0b      	ldr	r3, [pc, #44]	; (8009aac <tcp_receive+0xf14>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	6879      	ldr	r1, [r7, #4]
 8009a86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a88:	440b      	add	r3, r1
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	dd07      	ble.n	8009aa2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	8b5b      	ldrh	r3, [r3, #26]
 8009a96:	f043 0302 	orr.w	r3, r3, #2
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009aa0:	e7ff      	b.n	8009aa2 <tcp_receive+0xf0a>
 8009aa2:	bf00      	nop
 8009aa4:	3750      	adds	r7, #80	; 0x50
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20000154 	.word	0x20000154
 8009ab0:	20000134 	.word	0x20000134
 8009ab4:	2000015e 	.word	0x2000015e
 8009ab8:	08010ba8 	.word	0x08010ba8
 8009abc:	08010f50 	.word	0x08010f50
 8009ac0:	08010bf4 	.word	0x08010bf4

08009ac4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b083      	sub	sp, #12
 8009ac8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009aca:	4b15      	ldr	r3, [pc, #84]	; (8009b20 <tcp_get_next_optbyte+0x5c>)
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	1c5a      	adds	r2, r3, #1
 8009ad0:	b291      	uxth	r1, r2
 8009ad2:	4a13      	ldr	r2, [pc, #76]	; (8009b20 <tcp_get_next_optbyte+0x5c>)
 8009ad4:	8011      	strh	r1, [r2, #0]
 8009ad6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009ad8:	4b12      	ldr	r3, [pc, #72]	; (8009b24 <tcp_get_next_optbyte+0x60>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d004      	beq.n	8009aea <tcp_get_next_optbyte+0x26>
 8009ae0:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <tcp_get_next_optbyte+0x64>)
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	88fa      	ldrh	r2, [r7, #6]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d208      	bcs.n	8009afc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009aea:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <tcp_get_next_optbyte+0x68>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3314      	adds	r3, #20
 8009af0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009af2:	88fb      	ldrh	r3, [r7, #6]
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	4413      	add	r3, r2
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	e00b      	b.n	8009b14 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009afc:	88fb      	ldrh	r3, [r7, #6]
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <tcp_get_next_optbyte+0x64>)
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <tcp_get_next_optbyte+0x60>)
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	797b      	ldrb	r3, [r7, #5]
 8009b10:	4413      	add	r3, r2
 8009b12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	20000150 	.word	0x20000150
 8009b24:	2000014c 	.word	0x2000014c
 8009b28:	2000014a 	.word	0x2000014a
 8009b2c:	20000144 	.word	0x20000144

08009b30 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <tcp_parseopt+0x1c>
 8009b3e:	4b32      	ldr	r3, [pc, #200]	; (8009c08 <tcp_parseopt+0xd8>)
 8009b40:	f240 727d 	movw	r2, #1917	; 0x77d
 8009b44:	4931      	ldr	r1, [pc, #196]	; (8009c0c <tcp_parseopt+0xdc>)
 8009b46:	4832      	ldr	r0, [pc, #200]	; (8009c10 <tcp_parseopt+0xe0>)
 8009b48:	f004 fcbc 	bl	800e4c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009b4c:	4b31      	ldr	r3, [pc, #196]	; (8009c14 <tcp_parseopt+0xe4>)
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d055      	beq.n	8009c00 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009b54:	4b30      	ldr	r3, [pc, #192]	; (8009c18 <tcp_parseopt+0xe8>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	801a      	strh	r2, [r3, #0]
 8009b5a:	e045      	b.n	8009be8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009b5c:	f7ff ffb2 	bl	8009ac4 <tcp_get_next_optbyte>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d006      	beq.n	8009b78 <tcp_parseopt+0x48>
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	dc2b      	bgt.n	8009bc6 <tcp_parseopt+0x96>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d041      	beq.n	8009bf6 <tcp_parseopt+0xc6>
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d127      	bne.n	8009bc6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009b76:	e037      	b.n	8009be8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009b78:	f7ff ffa4 	bl	8009ac4 <tcp_get_next_optbyte>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d13b      	bne.n	8009bfa <tcp_parseopt+0xca>
 8009b82:	4b25      	ldr	r3, [pc, #148]	; (8009c18 <tcp_parseopt+0xe8>)
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	3301      	adds	r3, #1
 8009b88:	4a22      	ldr	r2, [pc, #136]	; (8009c14 <tcp_parseopt+0xe4>)
 8009b8a:	8812      	ldrh	r2, [r2, #0]
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	da34      	bge.n	8009bfa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009b90:	f7ff ff98 	bl	8009ac4 <tcp_get_next_optbyte>
 8009b94:	4603      	mov	r3, r0
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009b9c:	f7ff ff92 	bl	8009ac4 <tcp_get_next_optbyte>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	89bb      	ldrh	r3, [r7, #12]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009baa:	89bb      	ldrh	r3, [r7, #12]
 8009bac:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009bb0:	d804      	bhi.n	8009bbc <tcp_parseopt+0x8c>
 8009bb2:	89bb      	ldrh	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <tcp_parseopt+0x8c>
 8009bb8:	89ba      	ldrh	r2, [r7, #12]
 8009bba:	e001      	b.n	8009bc0 <tcp_parseopt+0x90>
 8009bbc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009bc4:	e010      	b.n	8009be8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009bc6:	f7ff ff7d 	bl	8009ac4 <tcp_get_next_optbyte>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d914      	bls.n	8009bfe <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009bd4:	7afb      	ldrb	r3, [r7, #11]
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <tcp_parseopt+0xe8>)
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	4413      	add	r3, r2
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b02      	subs	r3, #2
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <tcp_parseopt+0xe8>)
 8009be6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009be8:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <tcp_parseopt+0xe8>)
 8009bea:	881a      	ldrh	r2, [r3, #0]
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <tcp_parseopt+0xe4>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d3b3      	bcc.n	8009b5c <tcp_parseopt+0x2c>
 8009bf4:	e004      	b.n	8009c00 <tcp_parseopt+0xd0>
          return;
 8009bf6:	bf00      	nop
 8009bf8:	e002      	b.n	8009c00 <tcp_parseopt+0xd0>
            return;
 8009bfa:	bf00      	nop
 8009bfc:	e000      	b.n	8009c00 <tcp_parseopt+0xd0>
            return;
 8009bfe:	bf00      	nop
      }
    }
  }
}
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	08010ba8 	.word	0x08010ba8
 8009c0c:	0801100c 	.word	0x0801100c
 8009c10:	08010bf4 	.word	0x08010bf4
 8009c14:	20000148 	.word	0x20000148
 8009c18:	20000150 	.word	0x20000150

08009c1c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009c20:	4b05      	ldr	r3, [pc, #20]	; (8009c38 <tcp_trigger_input_pcb_close+0x1c>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f043 0310 	orr.w	r3, r3, #16
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	4b03      	ldr	r3, [pc, #12]	; (8009c38 <tcp_trigger_input_pcb_close+0x1c>)
 8009c2c:	701a      	strb	r2, [r3, #0]
}
 8009c2e:	bf00      	nop
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	20000161 	.word	0x20000161

08009c3c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00a      	beq.n	8009c64 <tcp_route+0x28>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	7a1b      	ldrb	r3, [r3, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d006      	beq.n	8009c64 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	7a1b      	ldrb	r3, [r3, #8]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fb fabc 	bl	80051d8 <netif_get_by_index>
 8009c60:	4603      	mov	r3, r0
 8009c62:	e003      	b.n	8009c6c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f003 f9cb 	bl	800d000 <ip4_route>
 8009c6a:	4603      	mov	r3, r0
  }
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009c74:	b590      	push	{r4, r7, lr}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	4613      	mov	r3, r2
 8009c82:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d105      	bne.n	8009c96 <tcp_create_segment+0x22>
 8009c8a:	4b44      	ldr	r3, [pc, #272]	; (8009d9c <tcp_create_segment+0x128>)
 8009c8c:	22a3      	movs	r2, #163	; 0xa3
 8009c8e:	4944      	ldr	r1, [pc, #272]	; (8009da0 <tcp_create_segment+0x12c>)
 8009c90:	4844      	ldr	r0, [pc, #272]	; (8009da4 <tcp_create_segment+0x130>)
 8009c92:	f004 fc17 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d105      	bne.n	8009ca8 <tcp_create_segment+0x34>
 8009c9c:	4b3f      	ldr	r3, [pc, #252]	; (8009d9c <tcp_create_segment+0x128>)
 8009c9e:	22a4      	movs	r2, #164	; 0xa4
 8009ca0:	4941      	ldr	r1, [pc, #260]	; (8009da8 <tcp_create_segment+0x134>)
 8009ca2:	4840      	ldr	r0, [pc, #256]	; (8009da4 <tcp_create_segment+0x130>)
 8009ca4:	f004 fc0e 	bl	800e4c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009ca8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	f003 0304 	and.w	r3, r3, #4
 8009cb4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009cb6:	2003      	movs	r0, #3
 8009cb8:	f7fa ff90 	bl	8004bdc <memp_malloc>
 8009cbc:	6138      	str	r0, [r7, #16]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009cc4:	68b8      	ldr	r0, [r7, #8]
 8009cc6:	f7fb fde7 	bl	8005898 <pbuf_free>
    return NULL;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e061      	b.n	8009d92 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009cd4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	891a      	ldrh	r2, [r3, #8]
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d205      	bcs.n	8009cfa <tcp_create_segment+0x86>
 8009cee:	4b2b      	ldr	r3, [pc, #172]	; (8009d9c <tcp_create_segment+0x128>)
 8009cf0:	22b0      	movs	r2, #176	; 0xb0
 8009cf2:	492e      	ldr	r1, [pc, #184]	; (8009dac <tcp_create_segment+0x138>)
 8009cf4:	482b      	ldr	r0, [pc, #172]	; (8009da4 <tcp_create_segment+0x130>)
 8009cf6:	f004 fbe5 	bl	800e4c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	891a      	ldrh	r2, [r3, #8]
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009d0a:	2114      	movs	r1, #20
 8009d0c:	68b8      	ldr	r0, [r7, #8]
 8009d0e:	f7fb fd2d 	bl	800576c <pbuf_add_header>
 8009d12:	4603      	mov	r3, r0
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009d18:	6938      	ldr	r0, [r7, #16]
 8009d1a:	f7fd f8d2 	bl	8006ec2 <tcp_seg_free>
    return NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e037      	b.n	8009d92 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8ada      	ldrh	r2, [r3, #22]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	68dc      	ldr	r4, [r3, #12]
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fa fafb 	bl	8004330 <lwip_htons>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	8b1a      	ldrh	r2, [r3, #24]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	68dc      	ldr	r4, [r3, #12]
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7fa faf2 	bl	8004330 <lwip_htons>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	68dc      	ldr	r4, [r3, #12]
 8009d54:	6838      	ldr	r0, [r7, #0]
 8009d56:	f7fa fb00 	bl	800435a <lwip_htonl>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	089b      	lsrs	r3, r3, #2
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3305      	adds	r3, #5
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	031b      	lsls	r3, r3, #12
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	68dc      	ldr	r4, [r3, #12]
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	f7fa fad8 	bl	8004330 <lwip_htons>
 8009d80:	4603      	mov	r3, r0
 8009d82:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	749a      	strb	r2, [r3, #18]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	74da      	strb	r2, [r3, #19]
  return seg;
 8009d90:	693b      	ldr	r3, [r7, #16]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd90      	pop	{r4, r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	08011028 	.word	0x08011028
 8009da0:	0801105c 	.word	0x0801105c
 8009da4:	0801107c 	.word	0x0801107c
 8009da8:	080110a4 	.word	0x080110a4
 8009dac:	080110c8 	.word	0x080110c8

08009db0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009db0:	b590      	push	{r4, r7, lr}
 8009db2:	b08b      	sub	sp, #44	; 0x2c
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	460b      	mov	r3, r1
 8009dba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61fb      	str	r3, [r7, #28]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d106      	bne.n	8009ddc <tcp_split_unsent_seg+0x2c>
 8009dce:	4b95      	ldr	r3, [pc, #596]	; (800a024 <tcp_split_unsent_seg+0x274>)
 8009dd0:	f240 324b 	movw	r2, #843	; 0x34b
 8009dd4:	4994      	ldr	r1, [pc, #592]	; (800a028 <tcp_split_unsent_seg+0x278>)
 8009dd6:	4895      	ldr	r0, [pc, #596]	; (800a02c <tcp_split_unsent_seg+0x27c>)
 8009dd8:	f004 fb74 	bl	800e4c4 <iprintf>

  useg = pcb->unsent;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d102      	bne.n	8009dee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009de8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dec:	e116      	b.n	800a01c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009dee:	887b      	ldrh	r3, [r7, #2]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009df4:	4b8b      	ldr	r3, [pc, #556]	; (800a024 <tcp_split_unsent_seg+0x274>)
 8009df6:	f240 3253 	movw	r2, #851	; 0x353
 8009dfa:	498d      	ldr	r1, [pc, #564]	; (800a030 <tcp_split_unsent_seg+0x280>)
 8009dfc:	488b      	ldr	r0, [pc, #556]	; (800a02c <tcp_split_unsent_seg+0x27c>)
 8009dfe:	f004 fb61 	bl	800e4c4 <iprintf>
    return ERR_VAL;
 8009e02:	f06f 0305 	mvn.w	r3, #5
 8009e06:	e109      	b.n	800a01c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	891b      	ldrh	r3, [r3, #8]
 8009e0c:	887a      	ldrh	r2, [r7, #2]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d301      	bcc.n	8009e16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e102      	b.n	800a01c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e1a:	887a      	ldrh	r2, [r7, #2]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d906      	bls.n	8009e2e <tcp_split_unsent_seg+0x7e>
 8009e20:	4b80      	ldr	r3, [pc, #512]	; (800a024 <tcp_split_unsent_seg+0x274>)
 8009e22:	f240 325b 	movw	r2, #859	; 0x35b
 8009e26:	4983      	ldr	r1, [pc, #524]	; (800a034 <tcp_split_unsent_seg+0x284>)
 8009e28:	4880      	ldr	r0, [pc, #512]	; (800a02c <tcp_split_unsent_seg+0x27c>)
 8009e2a:	f004 fb4b 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	891b      	ldrh	r3, [r3, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <tcp_split_unsent_seg+0x94>
 8009e36:	4b7b      	ldr	r3, [pc, #492]	; (800a024 <tcp_split_unsent_seg+0x274>)
 8009e38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009e3c:	497e      	ldr	r1, [pc, #504]	; (800a038 <tcp_split_unsent_seg+0x288>)
 8009e3e:	487b      	ldr	r0, [pc, #492]	; (800a02c <tcp_split_unsent_seg+0x27c>)
 8009e40:	f004 fb40 	bl	800e4c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	7a9b      	ldrb	r3, [r3, #10]
 8009e48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	891a      	ldrh	r2, [r3, #8]
 8009e5a:	887b      	ldrh	r3, [r7, #2]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	89bb      	ldrh	r3, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009e6e:	4619      	mov	r1, r3
 8009e70:	2036      	movs	r0, #54	; 0x36
 8009e72:	f7fb fa2d 	bl	80052d0 <pbuf_alloc>
 8009e76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 80b7 	beq.w	8009fee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	891a      	ldrh	r2, [r3, #8]
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	891b      	ldrh	r3, [r3, #8]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	887b      	ldrh	r3, [r7, #2]
 8009e90:	4413      	add	r3, r2
 8009e92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	6858      	ldr	r0, [r3, #4]
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	18d1      	adds	r1, r2, r3
 8009ea0:	897b      	ldrh	r3, [r7, #10]
 8009ea2:	89ba      	ldrh	r2, [r7, #12]
 8009ea4:	f7fb fef2 	bl	8005c8c <pbuf_copy_partial>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461a      	mov	r2, r3
 8009eac:	89bb      	ldrh	r3, [r7, #12]
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	f040 809f 	bne.w	8009ff2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	899b      	ldrh	r3, [r3, #12]
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fa fa37 	bl	8004330 <lwip_htons>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009ecc:	2300      	movs	r3, #0
 8009ece:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009ed0:	7efb      	ldrb	r3, [r7, #27]
 8009ed2:	f003 0308 	and.w	r3, r3, #8
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d007      	beq.n	8009eea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009eda:	7efb      	ldrb	r3, [r7, #27]
 8009edc:	f023 0308 	bic.w	r3, r3, #8
 8009ee0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009ee2:	7ebb      	ldrb	r3, [r7, #26]
 8009ee4:	f043 0308 	orr.w	r3, r3, #8
 8009ee8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009eea:	7efb      	ldrb	r3, [r7, #27]
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d007      	beq.n	8009f04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009ef4:	7efb      	ldrb	r3, [r7, #27]
 8009ef6:	f023 0301 	bic.w	r3, r3, #1
 8009efa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009efc:	7ebb      	ldrb	r3, [r7, #26]
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fa fa25 	bl	800435a <lwip_htonl>
 8009f10:	4602      	mov	r2, r0
 8009f12:	887b      	ldrh	r3, [r7, #2]
 8009f14:	18d1      	adds	r1, r2, r3
 8009f16:	7eba      	ldrb	r2, [r7, #26]
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	6939      	ldr	r1, [r7, #16]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff fea7 	bl	8009c74 <tcp_create_segment>
 8009f26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d063      	beq.n	8009ff6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fb fd38 	bl	80059a8 <pbuf_clen>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009f42:	1a9b      	subs	r3, r3, r2
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	6858      	ldr	r0, [r3, #4]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	891a      	ldrh	r2, [r3, #8]
 8009f56:	89bb      	ldrh	r3, [r7, #12]
 8009f58:	1ad3      	subs	r3, r2, r3
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f7fb fb15 	bl	800558c <pbuf_realloc>
  useg->len -= remainder;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	891a      	ldrh	r2, [r3, #8]
 8009f66:	89bb      	ldrh	r3, [r7, #12]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	899b      	ldrh	r3, [r3, #12]
 8009f76:	b29c      	uxth	r4, r3
 8009f78:	7efb      	ldrb	r3, [r7, #27]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fa f9d7 	bl	8004330 <lwip_htons>
 8009f82:	4603      	mov	r3, r0
 8009f84:	461a      	mov	r2, r3
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	4322      	orrs	r2, r4
 8009f8c:	b292      	uxth	r2, r2
 8009f8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fb fd07 	bl	80059a8 <pbuf_clen>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fa4:	4413      	add	r3, r2
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fb fcf8 	bl	80059a8 <pbuf_clen>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fc2:	4413      	add	r3, r2
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	69fa      	ldr	r2, [r7, #28]
 8009fd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d103      	bne.n	8009fea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	e016      	b.n	800a01c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009fee:	bf00      	nop
 8009ff0:	e002      	b.n	8009ff8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ff2:	bf00      	nop
 8009ff4:	e000      	b.n	8009ff8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009ff6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d006      	beq.n	800a00c <tcp_split_unsent_seg+0x25c>
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <tcp_split_unsent_seg+0x274>)
 800a000:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a004:	490d      	ldr	r1, [pc, #52]	; (800a03c <tcp_split_unsent_seg+0x28c>)
 800a006:	4809      	ldr	r0, [pc, #36]	; (800a02c <tcp_split_unsent_seg+0x27c>)
 800a008:	f004 fa5c 	bl	800e4c4 <iprintf>
  if (p != NULL) {
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a012:	6938      	ldr	r0, [r7, #16]
 800a014:	f7fb fc40 	bl	8005898 <pbuf_free>
  }

  return ERR_MEM;
 800a018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3724      	adds	r7, #36	; 0x24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd90      	pop	{r4, r7, pc}
 800a024:	08011028 	.word	0x08011028
 800a028:	080113bc 	.word	0x080113bc
 800a02c:	0801107c 	.word	0x0801107c
 800a030:	080113e0 	.word	0x080113e0
 800a034:	08011404 	.word	0x08011404
 800a038:	08011414 	.word	0x08011414
 800a03c:	08011424 	.word	0x08011424

0800a040 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a040:	b590      	push	{r4, r7, lr}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <tcp_send_fin+0x1c>
 800a04e:	4b21      	ldr	r3, [pc, #132]	; (800a0d4 <tcp_send_fin+0x94>)
 800a050:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a054:	4920      	ldr	r1, [pc, #128]	; (800a0d8 <tcp_send_fin+0x98>)
 800a056:	4821      	ldr	r0, [pc, #132]	; (800a0dc <tcp_send_fin+0x9c>)
 800a058:	f004 fa34 	bl	800e4c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d02e      	beq.n	800a0c2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e002      	b.n	800a072 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1f8      	bne.n	800a06c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	899b      	ldrh	r3, [r3, #12]
 800a080:	b29b      	uxth	r3, r3
 800a082:	4618      	mov	r0, r3
 800a084:	f7fa f954 	bl	8004330 <lwip_htons>
 800a088:	4603      	mov	r3, r0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	f003 0307 	and.w	r3, r3, #7
 800a090:	2b00      	cmp	r3, #0
 800a092:	d116      	bne.n	800a0c2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	899b      	ldrh	r3, [r3, #12]
 800a09a:	b29c      	uxth	r4, r3
 800a09c:	2001      	movs	r0, #1
 800a09e:	f7fa f947 	bl	8004330 <lwip_htons>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	4322      	orrs	r2, r4
 800a0ac:	b292      	uxth	r2, r2
 800a0ae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	8b5b      	ldrh	r3, [r3, #26]
 800a0b4:	f043 0320 	orr.w	r3, r3, #32
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	e004      	b.n	800a0cc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 f80b 	bl	800a0e0 <tcp_enqueue_flags>
 800a0ca:	4603      	mov	r3, r0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3714      	adds	r7, #20
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd90      	pop	{r4, r7, pc}
 800a0d4:	08011028 	.word	0x08011028
 800a0d8:	08011430 	.word	0x08011430
 800a0dc:	0801107c 	.word	0x0801107c

0800a0e0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08a      	sub	sp, #40	; 0x28
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a0f4:	78fb      	ldrb	r3, [r7, #3]
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <tcp_enqueue_flags+0x2c>
 800a0fe:	4b67      	ldr	r3, [pc, #412]	; (800a29c <tcp_enqueue_flags+0x1bc>)
 800a100:	f240 4211 	movw	r2, #1041	; 0x411
 800a104:	4966      	ldr	r1, [pc, #408]	; (800a2a0 <tcp_enqueue_flags+0x1c0>)
 800a106:	4867      	ldr	r0, [pc, #412]	; (800a2a4 <tcp_enqueue_flags+0x1c4>)
 800a108:	f004 f9dc 	bl	800e4c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <tcp_enqueue_flags+0x40>
 800a112:	4b62      	ldr	r3, [pc, #392]	; (800a29c <tcp_enqueue_flags+0x1bc>)
 800a114:	f240 4213 	movw	r2, #1043	; 0x413
 800a118:	4963      	ldr	r1, [pc, #396]	; (800a2a8 <tcp_enqueue_flags+0x1c8>)
 800a11a:	4862      	ldr	r0, [pc, #392]	; (800a2a4 <tcp_enqueue_flags+0x1c4>)
 800a11c:	f004 f9d2 	bl	800e4c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	f003 0302 	and.w	r3, r3, #2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a12a:	2301      	movs	r3, #1
 800a12c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a12e:	7ffb      	ldrb	r3, [r7, #31]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a142:	4619      	mov	r1, r3
 800a144:	2036      	movs	r0, #54	; 0x36
 800a146:	f7fb f8c3 	bl	80052d0 <pbuf_alloc>
 800a14a:	6138      	str	r0, [r7, #16]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d109      	bne.n	800a166 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	8b5b      	ldrh	r3, [r3, #26]
 800a156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a160:	f04f 33ff 	mov.w	r3, #4294967295
 800a164:	e095      	b.n	800a292 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	895a      	ldrh	r2, [r3, #10]
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	429a      	cmp	r2, r3
 800a170:	d206      	bcs.n	800a180 <tcp_enqueue_flags+0xa0>
 800a172:	4b4a      	ldr	r3, [pc, #296]	; (800a29c <tcp_enqueue_flags+0x1bc>)
 800a174:	f240 4239 	movw	r2, #1081	; 0x439
 800a178:	494c      	ldr	r1, [pc, #304]	; (800a2ac <tcp_enqueue_flags+0x1cc>)
 800a17a:	484a      	ldr	r0, [pc, #296]	; (800a2a4 <tcp_enqueue_flags+0x1c4>)
 800a17c:	f004 f9a2 	bl	800e4c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a184:	78fa      	ldrb	r2, [r7, #3]
 800a186:	7ffb      	ldrb	r3, [r7, #31]
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	460b      	mov	r3, r1
 800a18c:	6939      	ldr	r1, [r7, #16]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f7ff fd70 	bl	8009c74 <tcp_create_segment>
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d109      	bne.n	800a1b0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8b5b      	ldrh	r3, [r3, #26]
 800a1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1a4:	b29a      	uxth	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ae:	e070      	b.n	800a292 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f003 0303 	and.w	r3, r3, #3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d006      	beq.n	800a1ca <tcp_enqueue_flags+0xea>
 800a1bc:	4b37      	ldr	r3, [pc, #220]	; (800a29c <tcp_enqueue_flags+0x1bc>)
 800a1be:	f240 4242 	movw	r2, #1090	; 0x442
 800a1c2:	493b      	ldr	r1, [pc, #236]	; (800a2b0 <tcp_enqueue_flags+0x1d0>)
 800a1c4:	4837      	ldr	r0, [pc, #220]	; (800a2a4 <tcp_enqueue_flags+0x1c4>)
 800a1c6:	f004 f97d 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	891b      	ldrh	r3, [r3, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <tcp_enqueue_flags+0x100>
 800a1d2:	4b32      	ldr	r3, [pc, #200]	; (800a29c <tcp_enqueue_flags+0x1bc>)
 800a1d4:	f240 4243 	movw	r2, #1091	; 0x443
 800a1d8:	4936      	ldr	r1, [pc, #216]	; (800a2b4 <tcp_enqueue_flags+0x1d4>)
 800a1da:	4832      	ldr	r0, [pc, #200]	; (800a2a4 <tcp_enqueue_flags+0x1c4>)
 800a1dc:	f004 f972 	bl	800e4c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d103      	bne.n	800a1f0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800a1ee:	e00d      	b.n	800a20c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	e002      	b.n	800a1fe <tcp_enqueue_flags+0x11e>
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1f8      	bne.n	800a1f8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d104      	bne.n	800a228 <tcp_enqueue_flags+0x148>
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	8b5b      	ldrh	r3, [r3, #26]
 800a240:	f043 0320 	orr.w	r3, r3, #32
 800a244:	b29a      	uxth	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fb fbaa 	bl	80059a8 <pbuf_clen>
 800a254:	4603      	mov	r3, r0
 800a256:	461a      	mov	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a25e:	4413      	add	r3, r2
 800a260:	b29a      	uxth	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00e      	beq.n	800a290 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10a      	bne.n	800a290 <tcp_enqueue_flags+0x1b0>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <tcp_enqueue_flags+0x1b0>
 800a282:	4b06      	ldr	r3, [pc, #24]	; (800a29c <tcp_enqueue_flags+0x1bc>)
 800a284:	f240 4265 	movw	r2, #1125	; 0x465
 800a288:	490b      	ldr	r1, [pc, #44]	; (800a2b8 <tcp_enqueue_flags+0x1d8>)
 800a28a:	4806      	ldr	r0, [pc, #24]	; (800a2a4 <tcp_enqueue_flags+0x1c4>)
 800a28c:	f004 f91a 	bl	800e4c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3720      	adds	r7, #32
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	08011028 	.word	0x08011028
 800a2a0:	0801144c 	.word	0x0801144c
 800a2a4:	0801107c 	.word	0x0801107c
 800a2a8:	080114a4 	.word	0x080114a4
 800a2ac:	080114c4 	.word	0x080114c4
 800a2b0:	08011500 	.word	0x08011500
 800a2b4:	08011518 	.word	0x08011518
 800a2b8:	08011544 	.word	0x08011544

0800a2bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a2bc:	b5b0      	push	{r4, r5, r7, lr}
 800a2be:	b08a      	sub	sp, #40	; 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d106      	bne.n	800a2d8 <tcp_output+0x1c>
 800a2ca:	4b9e      	ldr	r3, [pc, #632]	; (800a544 <tcp_output+0x288>)
 800a2cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a2d0:	499d      	ldr	r1, [pc, #628]	; (800a548 <tcp_output+0x28c>)
 800a2d2:	489e      	ldr	r0, [pc, #632]	; (800a54c <tcp_output+0x290>)
 800a2d4:	f004 f8f6 	bl	800e4c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	7d1b      	ldrb	r3, [r3, #20]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d106      	bne.n	800a2ee <tcp_output+0x32>
 800a2e0:	4b98      	ldr	r3, [pc, #608]	; (800a544 <tcp_output+0x288>)
 800a2e2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a2e6:	499a      	ldr	r1, [pc, #616]	; (800a550 <tcp_output+0x294>)
 800a2e8:	4898      	ldr	r0, [pc, #608]	; (800a54c <tcp_output+0x290>)
 800a2ea:	f004 f8eb 	bl	800e4c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a2ee:	4b99      	ldr	r3, [pc, #612]	; (800a554 <tcp_output+0x298>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d101      	bne.n	800a2fc <tcp_output+0x40>
    return ERR_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e1ce      	b.n	800a69a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a308:	4293      	cmp	r3, r2
 800a30a:	bf28      	it	cs
 800a30c:	4613      	movcs	r3, r2
 800a30e:	b29b      	uxth	r3, r3
 800a310:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a316:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10b      	bne.n	800a336 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8b5b      	ldrh	r3, [r3, #26]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 81aa 	beq.w	800a680 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fdcb 	bl	800aec8 <tcp_send_empty_ack>
 800a332:	4603      	mov	r3, r0
 800a334:	e1b1      	b.n	800a69a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3304      	adds	r3, #4
 800a33c:	461a      	mov	r2, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7ff fc7c 	bl	8009c3c <tcp_route>
 800a344:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <tcp_output+0x96>
    return ERR_RTE;
 800a34c:	f06f 0303 	mvn.w	r3, #3
 800a350:	e1a3      	b.n	800a69a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d003      	beq.n	800a360 <tcp_output+0xa4>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d111      	bne.n	800a384 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d002      	beq.n	800a36c <tcp_output+0xb0>
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	3304      	adds	r3, #4
 800a36a:	e000      	b.n	800a36e <tcp_output+0xb2>
 800a36c:	2300      	movs	r3, #0
 800a36e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d102      	bne.n	800a37c <tcp_output+0xc0>
      return ERR_RTE;
 800a376:	f06f 0303 	mvn.w	r3, #3
 800a37a:	e18e      	b.n	800a69a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7f9 ffe5 	bl	800435a <lwip_htonl>
 800a390:	4602      	mov	r2, r0
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	8912      	ldrh	r2, [r2, #8]
 800a39c:	4413      	add	r3, r2
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d227      	bcs.n	800a3f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d114      	bne.n	800a3dc <tcp_output+0x120>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d110      	bne.n	800a3dc <tcp_output+0x120>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10b      	bne.n	800a3dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	8b5b      	ldrh	r3, [r3, #26]
 800a3e0:	f003 0302 	and.w	r3, r3, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 814d 	beq.w	800a684 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fd6c 	bl	800aec8 <tcp_send_empty_ack>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	e152      	b.n	800a69a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a400:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 811c 	beq.w	800a642 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a40a:	e002      	b.n	800a412 <tcp_output+0x156>
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	623b      	str	r3, [r7, #32]
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1f8      	bne.n	800a40c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a41a:	e112      	b.n	800a642 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	899b      	ldrh	r3, [r3, #12]
 800a422:	b29b      	uxth	r3, r3
 800a424:	4618      	mov	r0, r3
 800a426:	f7f9 ff83 	bl	8004330 <lwip_htons>
 800a42a:	4603      	mov	r3, r0
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d006      	beq.n	800a444 <tcp_output+0x188>
 800a436:	4b43      	ldr	r3, [pc, #268]	; (800a544 <tcp_output+0x288>)
 800a438:	f240 5236 	movw	r2, #1334	; 0x536
 800a43c:	4946      	ldr	r1, [pc, #280]	; (800a558 <tcp_output+0x29c>)
 800a43e:	4843      	ldr	r0, [pc, #268]	; (800a54c <tcp_output+0x290>)
 800a440:	f004 f840 	bl	800e4c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d01f      	beq.n	800a48c <tcp_output+0x1d0>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	8b5b      	ldrh	r3, [r3, #26]
 800a450:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a454:	2b00      	cmp	r3, #0
 800a456:	d119      	bne.n	800a48c <tcp_output+0x1d0>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <tcp_output+0x1bc>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d110      	bne.n	800a48c <tcp_output+0x1d0>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a46e:	891a      	ldrh	r2, [r3, #8]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a474:	429a      	cmp	r2, r3
 800a476:	d209      	bcs.n	800a48c <tcp_output+0x1d0>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d004      	beq.n	800a48c <tcp_output+0x1d0>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d901      	bls.n	800a490 <tcp_output+0x1d4>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e000      	b.n	800a492 <tcp_output+0x1d6>
 800a490:	2300      	movs	r3, #0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	8b5b      	ldrh	r3, [r3, #26]
 800a49a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 80e4 	beq.w	800a66c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7d1b      	ldrb	r3, [r3, #20]
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d00d      	beq.n	800a4c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	899b      	ldrh	r3, [r3, #12]
 800a4b2:	b29c      	uxth	r4, r3
 800a4b4:	2010      	movs	r0, #16
 800a4b6:	f7f9 ff3b 	bl	8004330 <lwip_htons>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	4322      	orrs	r2, r4
 800a4c4:	b292      	uxth	r2, r2
 800a4c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4ce:	f000 f909 	bl	800a6e4 <tcp_output_segment>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	8b5b      	ldrh	r3, [r3, #26]
 800a4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	835a      	strh	r2, [r3, #26]
      return err;
 800a4ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f0:	e0d3      	b.n	800a69a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7d1b      	ldrb	r3, [r3, #20]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d006      	beq.n	800a510 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	8b5b      	ldrh	r3, [r3, #26]
 800a506:	f023 0303 	bic.w	r3, r3, #3
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	4618      	mov	r0, r3
 800a518:	f7f9 ff1f 	bl	800435a <lwip_htonl>
 800a51c:	4604      	mov	r4, r0
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	891b      	ldrh	r3, [r3, #8]
 800a522:	461d      	mov	r5, r3
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	899b      	ldrh	r3, [r3, #12]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7f9 feff 	bl	8004330 <lwip_htons>
 800a532:	4603      	mov	r3, r0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00e      	beq.n	800a55c <tcp_output+0x2a0>
 800a53e:	2301      	movs	r3, #1
 800a540:	e00d      	b.n	800a55e <tcp_output+0x2a2>
 800a542:	bf00      	nop
 800a544:	08011028 	.word	0x08011028
 800a548:	0801156c 	.word	0x0801156c
 800a54c:	0801107c 	.word	0x0801107c
 800a550:	08011584 	.word	0x08011584
 800a554:	20008bb4 	.word	0x20008bb4
 800a558:	080115ac 	.word	0x080115ac
 800a55c:	2300      	movs	r3, #0
 800a55e:	442b      	add	r3, r5
 800a560:	4423      	add	r3, r4
 800a562:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	da02      	bge.n	800a576 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	891b      	ldrh	r3, [r3, #8]
 800a57a:	461c      	mov	r4, r3
 800a57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	899b      	ldrh	r3, [r3, #12]
 800a582:	b29b      	uxth	r3, r3
 800a584:	4618      	mov	r0, r3
 800a586:	f7f9 fed3 	bl	8004330 <lwip_htons>
 800a58a:	4603      	mov	r3, r0
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	f003 0303 	and.w	r3, r3, #3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <tcp_output+0x2de>
 800a596:	2301      	movs	r3, #1
 800a598:	e000      	b.n	800a59c <tcp_output+0x2e0>
 800a59a:	2300      	movs	r3, #0
 800a59c:	4423      	add	r3, r4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d049      	beq.n	800a636 <tcp_output+0x37a>
      seg->next = NULL;
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d105      	bne.n	800a5bc <tcp_output+0x300>
        pcb->unacked = seg;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	623b      	str	r3, [r7, #32]
 800a5ba:	e03f      	b.n	800a63c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7f9 fec9 	bl	800435a <lwip_htonl>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	6a3b      	ldr	r3, [r7, #32]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7f9 fec2 	bl	800435a <lwip_htonl>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	1ae3      	subs	r3, r4, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da24      	bge.n	800a628 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3370      	adds	r3, #112	; 0x70
 800a5e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a5e4:	e002      	b.n	800a5ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d011      	beq.n	800a618 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7f9 feac 	bl	800435a <lwip_htonl>
 800a602:	4604      	mov	r4, r0
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7f9 fea5 	bl	800435a <lwip_htonl>
 800a610:	4603      	mov	r3, r0
 800a612:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a614:	2b00      	cmp	r3, #0
 800a616:	dbe6      	blt.n	800a5e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	e009      	b.n	800a63c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a628:	6a3b      	ldr	r3, [r7, #32]
 800a62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a62c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	623b      	str	r3, [r7, #32]
 800a634:	e002      	b.n	800a63c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a638:	f7fc fc43 	bl	8006ec2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a640:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	2b00      	cmp	r3, #0
 800a646:	d012      	beq.n	800a66e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f9 fe83 	bl	800435a <lwip_htonl>
 800a654:	4602      	mov	r2, r0
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65e:	8912      	ldrh	r2, [r2, #8]
 800a660:	4413      	add	r3, r2
  while (seg != NULL &&
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	429a      	cmp	r2, r3
 800a666:	f4bf aed9 	bcs.w	800a41c <tcp_output+0x160>
 800a66a:	e000      	b.n	800a66e <tcp_output+0x3b2>
      break;
 800a66c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a672:	2b00      	cmp	r3, #0
 800a674:	d108      	bne.n	800a688 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a67e:	e004      	b.n	800a68a <tcp_output+0x3ce>
    goto output_done;
 800a680:	bf00      	nop
 800a682:	e002      	b.n	800a68a <tcp_output+0x3ce>
    goto output_done;
 800a684:	bf00      	nop
 800a686:	e000      	b.n	800a68a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a688:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	8b5b      	ldrh	r3, [r3, #26]
 800a68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a692:	b29a      	uxth	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3728      	adds	r7, #40	; 0x28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a6a2:	bf00      	nop

0800a6a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d106      	bne.n	800a6c0 <tcp_output_segment_busy+0x1c>
 800a6b2:	4b09      	ldr	r3, [pc, #36]	; (800a6d8 <tcp_output_segment_busy+0x34>)
 800a6b4:	f240 529a 	movw	r2, #1434	; 0x59a
 800a6b8:	4908      	ldr	r1, [pc, #32]	; (800a6dc <tcp_output_segment_busy+0x38>)
 800a6ba:	4809      	ldr	r0, [pc, #36]	; (800a6e0 <tcp_output_segment_busy+0x3c>)
 800a6bc:	f003 ff02 	bl	800e4c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	7b9b      	ldrb	r3, [r3, #14]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d001      	beq.n	800a6ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e000      	b.n	800a6d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	08011028 	.word	0x08011028
 800a6dc:	080115c4 	.word	0x080115c4
 800a6e0:	0801107c 	.word	0x0801107c

0800a6e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a6e4:	b5b0      	push	{r4, r5, r7, lr}
 800a6e6:	b08c      	sub	sp, #48	; 0x30
 800a6e8:	af04      	add	r7, sp, #16
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d106      	bne.n	800a704 <tcp_output_segment+0x20>
 800a6f6:	4b63      	ldr	r3, [pc, #396]	; (800a884 <tcp_output_segment+0x1a0>)
 800a6f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a6fc:	4962      	ldr	r1, [pc, #392]	; (800a888 <tcp_output_segment+0x1a4>)
 800a6fe:	4863      	ldr	r0, [pc, #396]	; (800a88c <tcp_output_segment+0x1a8>)
 800a700:	f003 fee0 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <tcp_output_segment+0x34>
 800a70a:	4b5e      	ldr	r3, [pc, #376]	; (800a884 <tcp_output_segment+0x1a0>)
 800a70c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a710:	495f      	ldr	r1, [pc, #380]	; (800a890 <tcp_output_segment+0x1ac>)
 800a712:	485e      	ldr	r0, [pc, #376]	; (800a88c <tcp_output_segment+0x1a8>)
 800a714:	f003 fed6 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <tcp_output_segment+0x48>
 800a71e:	4b59      	ldr	r3, [pc, #356]	; (800a884 <tcp_output_segment+0x1a0>)
 800a720:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a724:	495b      	ldr	r1, [pc, #364]	; (800a894 <tcp_output_segment+0x1b0>)
 800a726:	4859      	ldr	r0, [pc, #356]	; (800a88c <tcp_output_segment+0x1a8>)
 800a728:	f003 fecc 	bl	800e4c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff ffb9 	bl	800a6a4 <tcp_output_segment_busy>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	e09f      	b.n	800a87c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	68dc      	ldr	r4, [r3, #12]
 800a744:	4610      	mov	r0, r2
 800a746:	f7f9 fe08 	bl	800435a <lwip_htonl>
 800a74a:	4603      	mov	r3, r0
 800a74c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	68dc      	ldr	r4, [r3, #12]
 800a756:	4610      	mov	r0, r2
 800a758:	f7f9 fdea 	bl	8004330 <lwip_htons>
 800a75c:	4603      	mov	r3, r0
 800a75e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a768:	441a      	add	r2, r3
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	3314      	adds	r3, #20
 800a774:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	7a9b      	ldrb	r3, [r3, #10]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d015      	beq.n	800a7ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	3304      	adds	r3, #4
 800a786:	461a      	mov	r2, r3
 800a788:	6879      	ldr	r1, [r7, #4]
 800a78a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a78e:	f7fc fe8f 	bl	80074b0 <tcp_eff_send_mss_netif>
 800a792:	4603      	mov	r3, r0
 800a794:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a796:	8b7b      	ldrh	r3, [r7, #26]
 800a798:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7f9 fddc 	bl	800435a <lwip_htonl>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	da02      	bge.n	800a7be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10c      	bne.n	800a7e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a7c6:	4b34      	ldr	r3, [pc, #208]	; (800a898 <tcp_output_segment+0x1b4>)
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7f9 fdc0 	bl	800435a <lwip_htonl>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68da      	ldr	r2, [r3, #12]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	8959      	ldrh	r1, [r3, #10]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	8b3a      	ldrh	r2, [r7, #24]
 800a7fa:	1a8a      	subs	r2, r1, r2
 800a7fc:	b292      	uxth	r2, r2
 800a7fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	8919      	ldrh	r1, [r3, #8]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	8b3a      	ldrh	r2, [r7, #24]
 800a80c:	1a8a      	subs	r2, r1, r2
 800a80e:	b292      	uxth	r2, r2
 800a810:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	68d2      	ldr	r2, [r2, #12]
 800a81a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	741a      	strb	r2, [r3, #16]
 800a824:	2200      	movs	r2, #0
 800a826:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f103 0214 	add.w	r2, r3, #20
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	7a9b      	ldrb	r3, [r3, #10]
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	f003 0304 	and.w	r3, r3, #4
 800a83a:	4413      	add	r3, r2
 800a83c:	69fa      	ldr	r2, [r7, #28]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d006      	beq.n	800a850 <tcp_output_segment+0x16c>
 800a842:	4b10      	ldr	r3, [pc, #64]	; (800a884 <tcp_output_segment+0x1a0>)
 800a844:	f240 621c 	movw	r2, #1564	; 0x61c
 800a848:	4914      	ldr	r1, [pc, #80]	; (800a89c <tcp_output_segment+0x1b8>)
 800a84a:	4810      	ldr	r0, [pc, #64]	; (800a88c <tcp_output_segment+0x1a8>)
 800a84c:	f003 fe3a 	bl	800e4c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6858      	ldr	r0, [r3, #4]
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	1d1c      	adds	r4, r3, #4
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	7add      	ldrb	r5, [r3, #11]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	7a9b      	ldrb	r3, [r3, #10]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	9202      	str	r2, [sp, #8]
 800a866:	2206      	movs	r2, #6
 800a868:	9201      	str	r2, [sp, #4]
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	462b      	mov	r3, r5
 800a86e:	4622      	mov	r2, r4
 800a870:	f002 fd84 	bl	800d37c <ip4_output_if>
 800a874:	4603      	mov	r3, r0
 800a876:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3720      	adds	r7, #32
 800a880:	46bd      	mov	sp, r7
 800a882:	bdb0      	pop	{r4, r5, r7, pc}
 800a884:	08011028 	.word	0x08011028
 800a888:	080115ec 	.word	0x080115ec
 800a88c:	0801107c 	.word	0x0801107c
 800a890:	0801160c 	.word	0x0801160c
 800a894:	0801162c 	.word	0x0801162c
 800a898:	20008ba4 	.word	0x20008ba4
 800a89c:	08011650 	.word	0x08011650

0800a8a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a8a0:	b5b0      	push	{r4, r5, r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <tcp_rexmit_rto_prepare+0x1c>
 800a8ae:	4b31      	ldr	r3, [pc, #196]	; (800a974 <tcp_rexmit_rto_prepare+0xd4>)
 800a8b0:	f240 6263 	movw	r2, #1635	; 0x663
 800a8b4:	4930      	ldr	r1, [pc, #192]	; (800a978 <tcp_rexmit_rto_prepare+0xd8>)
 800a8b6:	4831      	ldr	r0, [pc, #196]	; (800a97c <tcp_rexmit_rto_prepare+0xdc>)
 800a8b8:	f003 fe04 	bl	800e4c4 <iprintf>

  if (pcb->unacked == NULL) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d102      	bne.n	800a8ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a8c4:	f06f 0305 	mvn.w	r3, #5
 800a8c8:	e050      	b.n	800a96c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	e00b      	b.n	800a8ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7ff fee6 	bl	800a6a4 <tcp_output_segment_busy>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d002      	beq.n	800a8e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a8de:	f06f 0305 	mvn.w	r3, #5
 800a8e2:	e043      	b.n	800a96c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1ef      	bne.n	800a8d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f7ff fed6 	bl	800a6a4 <tcp_output_segment_busy>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a8fe:	f06f 0305 	mvn.w	r3, #5
 800a902:	e033      	b.n	800a96c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	8b5b      	ldrh	r3, [r3, #26]
 800a91e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a922:	b29a      	uxth	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7f9 fd13 	bl	800435a <lwip_htonl>
 800a934:	4604      	mov	r4, r0
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	891b      	ldrh	r3, [r3, #8]
 800a93a:	461d      	mov	r5, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	899b      	ldrh	r3, [r3, #12]
 800a942:	b29b      	uxth	r3, r3
 800a944:	4618      	mov	r0, r3
 800a946:	f7f9 fcf3 	bl	8004330 <lwip_htons>
 800a94a:	4603      	mov	r3, r0
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <tcp_rexmit_rto_prepare+0xba>
 800a956:	2301      	movs	r3, #1
 800a958:	e000      	b.n	800a95c <tcp_rexmit_rto_prepare+0xbc>
 800a95a:	2300      	movs	r3, #0
 800a95c:	442b      	add	r3, r5
 800a95e:	18e2      	adds	r2, r4, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bdb0      	pop	{r4, r5, r7, pc}
 800a974:	08011028 	.word	0x08011028
 800a978:	08011664 	.word	0x08011664
 800a97c:	0801107c 	.word	0x0801107c

0800a980 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d106      	bne.n	800a99c <tcp_rexmit_rto_commit+0x1c>
 800a98e:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <tcp_rexmit_rto_commit+0x44>)
 800a990:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a994:	490c      	ldr	r1, [pc, #48]	; (800a9c8 <tcp_rexmit_rto_commit+0x48>)
 800a996:	480d      	ldr	r0, [pc, #52]	; (800a9cc <tcp_rexmit_rto_commit+0x4c>)
 800a998:	f003 fd94 	bl	800e4c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9a2:	2bff      	cmp	r3, #255	; 0xff
 800a9a4:	d007      	beq.n	800a9b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fc80 	bl	800a2bc <tcp_output>
}
 800a9bc:	bf00      	nop
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	08011028 	.word	0x08011028
 800a9c8:	08011688 	.word	0x08011688
 800a9cc:	0801107c 	.word	0x0801107c

0800a9d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <tcp_rexmit_rto+0x1c>
 800a9de:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <tcp_rexmit_rto+0x38>)
 800a9e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a9e4:	4909      	ldr	r1, [pc, #36]	; (800aa0c <tcp_rexmit_rto+0x3c>)
 800a9e6:	480a      	ldr	r0, [pc, #40]	; (800aa10 <tcp_rexmit_rto+0x40>)
 800a9e8:	f003 fd6c 	bl	800e4c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff ff57 	bl	800a8a0 <tcp_rexmit_rto_prepare>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7ff ffc1 	bl	800a980 <tcp_rexmit_rto_commit>
  }
}
 800a9fe:	bf00      	nop
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	08011028 	.word	0x08011028
 800aa0c:	080116ac 	.word	0x080116ac
 800aa10:	0801107c 	.word	0x0801107c

0800aa14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800aa14:	b590      	push	{r4, r7, lr}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <tcp_rexmit+0x1c>
 800aa22:	4b2f      	ldr	r3, [pc, #188]	; (800aae0 <tcp_rexmit+0xcc>)
 800aa24:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800aa28:	492e      	ldr	r1, [pc, #184]	; (800aae4 <tcp_rexmit+0xd0>)
 800aa2a:	482f      	ldr	r0, [pc, #188]	; (800aae8 <tcp_rexmit+0xd4>)
 800aa2c:	f003 fd4a 	bl	800e4c4 <iprintf>

  if (pcb->unacked == NULL) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800aa38:	f06f 0305 	mvn.w	r3, #5
 800aa3c:	e04c      	b.n	800aad8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa42:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800aa44:	68b8      	ldr	r0, [r7, #8]
 800aa46:	f7ff fe2d 	bl	800a6a4 <tcp_output_segment_busy>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800aa50:	f06f 0305 	mvn.w	r3, #5
 800aa54:	e040      	b.n	800aad8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	336c      	adds	r3, #108	; 0x6c
 800aa62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aa64:	e002      	b.n	800aa6c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d011      	beq.n	800aa98 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7f9 fc6c 	bl	800435a <lwip_htonl>
 800aa82:	4604      	mov	r4, r0
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7f9 fc65 	bl	800435a <lwip_htonl>
 800aa90:	4603      	mov	r3, r0
 800aa92:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dbe6      	blt.n	800aa66 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d103      	bne.n	800aab6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aabc:	2bff      	cmp	r3, #255	; 0xff
 800aabe:	d007      	beq.n	800aad0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aac6:	3301      	adds	r3, #1
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd90      	pop	{r4, r7, pc}
 800aae0:	08011028 	.word	0x08011028
 800aae4:	080116c8 	.word	0x080116c8
 800aae8:	0801107c 	.word	0x0801107c

0800aaec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d106      	bne.n	800ab08 <tcp_rexmit_fast+0x1c>
 800aafa:	4b2a      	ldr	r3, [pc, #168]	; (800aba4 <tcp_rexmit_fast+0xb8>)
 800aafc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ab00:	4929      	ldr	r1, [pc, #164]	; (800aba8 <tcp_rexmit_fast+0xbc>)
 800ab02:	482a      	ldr	r0, [pc, #168]	; (800abac <tcp_rexmit_fast+0xc0>)
 800ab04:	f003 fcde 	bl	800e4c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d044      	beq.n	800ab9a <tcp_rexmit_fast+0xae>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	8b5b      	ldrh	r3, [r3, #26]
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d13e      	bne.n	800ab9a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff ff79 	bl	800aa14 <tcp_rexmit>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d138      	bne.n	800ab9a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab34:	4293      	cmp	r3, r2
 800ab36:	bf28      	it	cs
 800ab38:	4613      	movcs	r3, r2
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	0fda      	lsrs	r2, r3, #31
 800ab3e:	4413      	add	r3, r2
 800ab40:	105b      	asrs	r3, r3, #1
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ab50:	461a      	mov	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d206      	bcs.n	800ab6a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab60:	005b      	lsls	r3, r3, #1
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab74:	4619      	mov	r1, r3
 800ab76:	0049      	lsls	r1, r1, #1
 800ab78:	440b      	add	r3, r1
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	4413      	add	r3, r2
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	8b5b      	ldrh	r3, [r3, #26]
 800ab8a:	f043 0304 	orr.w	r3, r3, #4
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ab9a:	bf00      	nop
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	08011028 	.word	0x08011028
 800aba8:	080116e0 	.word	0x080116e0
 800abac:	0801107c 	.word	0x0801107c

0800abb0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	607b      	str	r3, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	817b      	strh	r3, [r7, #10]
 800abbe:	4613      	mov	r3, r2
 800abc0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800abc2:	897a      	ldrh	r2, [r7, #10]
 800abc4:	893b      	ldrh	r3, [r7, #8]
 800abc6:	4413      	add	r3, r2
 800abc8:	b29b      	uxth	r3, r3
 800abca:	3314      	adds	r3, #20
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800abd2:	4619      	mov	r1, r3
 800abd4:	2022      	movs	r0, #34	; 0x22
 800abd6:	f7fa fb7b 	bl	80052d0 <pbuf_alloc>
 800abda:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d04d      	beq.n	800ac7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800abe2:	897b      	ldrh	r3, [r7, #10]
 800abe4:	3313      	adds	r3, #19
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	8952      	ldrh	r2, [r2, #10]
 800abea:	4293      	cmp	r3, r2
 800abec:	db06      	blt.n	800abfc <tcp_output_alloc_header_common+0x4c>
 800abee:	4b26      	ldr	r3, [pc, #152]	; (800ac88 <tcp_output_alloc_header_common+0xd8>)
 800abf0:	f240 7223 	movw	r2, #1827	; 0x723
 800abf4:	4925      	ldr	r1, [pc, #148]	; (800ac8c <tcp_output_alloc_header_common+0xdc>)
 800abf6:	4826      	ldr	r0, [pc, #152]	; (800ac90 <tcp_output_alloc_header_common+0xe0>)
 800abf8:	f003 fc64 	bl	800e4c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ac02:	8c3b      	ldrh	r3, [r7, #32]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7f9 fb93 	bl	8004330 <lwip_htons>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ac12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7f9 fb8b 	bl	8004330 <lwip_htons>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f7f9 fb96 	bl	800435a <lwip_htonl>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ac34:	897b      	ldrh	r3, [r7, #10]
 800ac36:	089b      	lsrs	r3, r3, #2
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	3305      	adds	r3, #5
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	031b      	lsls	r3, r3, #12
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f9 fb6f 	bl	8004330 <lwip_htons>
 800ac52:	4603      	mov	r3, r0
 800ac54:	461a      	mov	r2, r3
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ac5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7f9 fb67 	bl	8004330 <lwip_htons>
 800ac62:	4603      	mov	r3, r0
 800ac64:	461a      	mov	r2, r3
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	741a      	strb	r2, [r3, #16]
 800ac70:	2200      	movs	r2, #0
 800ac72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2200      	movs	r2, #0
 800ac78:	749a      	strb	r2, [r3, #18]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ac7e:	697b      	ldr	r3, [r7, #20]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	08011028 	.word	0x08011028
 800ac8c:	08011700 	.word	0x08011700
 800ac90:	0801107c 	.word	0x0801107c

0800ac94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ac94:	b5b0      	push	{r4, r5, r7, lr}
 800ac96:	b08a      	sub	sp, #40	; 0x28
 800ac98:	af04      	add	r7, sp, #16
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	817b      	strh	r3, [r7, #10]
 800aca2:	4613      	mov	r3, r2
 800aca4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <tcp_output_alloc_header+0x26>
 800acac:	4b15      	ldr	r3, [pc, #84]	; (800ad04 <tcp_output_alloc_header+0x70>)
 800acae:	f240 7242 	movw	r2, #1858	; 0x742
 800acb2:	4915      	ldr	r1, [pc, #84]	; (800ad08 <tcp_output_alloc_header+0x74>)
 800acb4:	4815      	ldr	r0, [pc, #84]	; (800ad0c <tcp_output_alloc_header+0x78>)
 800acb6:	f003 fc05 	bl	800e4c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	8adb      	ldrh	r3, [r3, #22]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	8b12      	ldrh	r2, [r2, #24]
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800acca:	893d      	ldrh	r5, [r7, #8]
 800accc:	897c      	ldrh	r4, [r7, #10]
 800acce:	9103      	str	r1, [sp, #12]
 800acd0:	2110      	movs	r1, #16
 800acd2:	9102      	str	r1, [sp, #8]
 800acd4:	9201      	str	r2, [sp, #4]
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	462a      	mov	r2, r5
 800acdc:	4621      	mov	r1, r4
 800acde:	f7ff ff67 	bl	800abb0 <tcp_output_alloc_header_common>
 800ace2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d006      	beq.n	800acf8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800acf2:	441a      	add	r2, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800acf8:	697b      	ldr	r3, [r7, #20]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bdb0      	pop	{r4, r5, r7, pc}
 800ad02:	bf00      	nop
 800ad04:	08011028 	.word	0x08011028
 800ad08:	08011730 	.word	0x08011730
 800ad0c:	0801107c 	.word	0x0801107c

0800ad10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b088      	sub	sp, #32
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	4611      	mov	r1, r2
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	460b      	mov	r3, r1
 800ad20:	71fb      	strb	r3, [r7, #7]
 800ad22:	4613      	mov	r3, r2
 800ad24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d106      	bne.n	800ad3e <tcp_output_fill_options+0x2e>
 800ad30:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <tcp_output_fill_options+0x70>)
 800ad32:	f240 7256 	movw	r2, #1878	; 0x756
 800ad36:	4913      	ldr	r1, [pc, #76]	; (800ad84 <tcp_output_fill_options+0x74>)
 800ad38:	4813      	ldr	r0, [pc, #76]	; (800ad88 <tcp_output_fill_options+0x78>)
 800ad3a:	f003 fbc3 	bl	800e4c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	3314      	adds	r3, #20
 800ad48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	f103 0214 	add.w	r2, r3, #20
 800ad50:	8bfb      	ldrh	r3, [r7, #30]
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4619      	mov	r1, r3
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	440b      	add	r3, r1
 800ad60:	4413      	add	r3, r2
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d006      	beq.n	800ad76 <tcp_output_fill_options+0x66>
 800ad68:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <tcp_output_fill_options+0x70>)
 800ad6a:	f240 7275 	movw	r2, #1909	; 0x775
 800ad6e:	4907      	ldr	r1, [pc, #28]	; (800ad8c <tcp_output_fill_options+0x7c>)
 800ad70:	4805      	ldr	r0, [pc, #20]	; (800ad88 <tcp_output_fill_options+0x78>)
 800ad72:	f003 fba7 	bl	800e4c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ad76:	bf00      	nop
 800ad78:	3720      	adds	r7, #32
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	08011028 	.word	0x08011028
 800ad84:	08011758 	.word	0x08011758
 800ad88:	0801107c 	.word	0x0801107c
 800ad8c:	08011650 	.word	0x08011650

0800ad90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08a      	sub	sp, #40	; 0x28
 800ad94:	af04      	add	r7, sp, #16
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d106      	bne.n	800adb2 <tcp_output_control_segment+0x22>
 800ada4:	4b1c      	ldr	r3, [pc, #112]	; (800ae18 <tcp_output_control_segment+0x88>)
 800ada6:	f240 7287 	movw	r2, #1927	; 0x787
 800adaa:	491c      	ldr	r1, [pc, #112]	; (800ae1c <tcp_output_control_segment+0x8c>)
 800adac:	481c      	ldr	r0, [pc, #112]	; (800ae20 <tcp_output_control_segment+0x90>)
 800adae:	f003 fb89 	bl	800e4c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7fe ff40 	bl	8009c3c <tcp_route>
 800adbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d102      	bne.n	800adca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800adc4:	23fc      	movs	r3, #252	; 0xfc
 800adc6:	75fb      	strb	r3, [r7, #23]
 800adc8:	e01c      	b.n	800ae04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d006      	beq.n	800adde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	7adb      	ldrb	r3, [r3, #11]
 800add4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	7a9b      	ldrb	r3, [r3, #10]
 800adda:	757b      	strb	r3, [r7, #21]
 800addc:	e003      	b.n	800ade6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800adde:	23ff      	movs	r3, #255	; 0xff
 800ade0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ade2:	2300      	movs	r3, #0
 800ade4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ade6:	7dba      	ldrb	r2, [r7, #22]
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	9302      	str	r3, [sp, #8]
 800adec:	2306      	movs	r3, #6
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	7d7b      	ldrb	r3, [r7, #21]
 800adf2:	9300      	str	r3, [sp, #0]
 800adf4:	4613      	mov	r3, r2
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	68b8      	ldr	r0, [r7, #8]
 800adfc:	f002 fabe 	bl	800d37c <ip4_output_if>
 800ae00:	4603      	mov	r3, r0
 800ae02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ae04:	68b8      	ldr	r0, [r7, #8]
 800ae06:	f7fa fd47 	bl	8005898 <pbuf_free>
  return err;
 800ae0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	08011028 	.word	0x08011028
 800ae1c:	08011780 	.word	0x08011780
 800ae20:	0801107c 	.word	0x0801107c

0800ae24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ae24:	b590      	push	{r4, r7, lr}
 800ae26:	b08b      	sub	sp, #44	; 0x2c
 800ae28:	af04      	add	r7, sp, #16
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d106      	bne.n	800ae46 <tcp_rst+0x22>
 800ae38:	4b1f      	ldr	r3, [pc, #124]	; (800aeb8 <tcp_rst+0x94>)
 800ae3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ae3e:	491f      	ldr	r1, [pc, #124]	; (800aebc <tcp_rst+0x98>)
 800ae40:	481f      	ldr	r0, [pc, #124]	; (800aec0 <tcp_rst+0x9c>)
 800ae42:	f003 fb3f 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d106      	bne.n	800ae5a <tcp_rst+0x36>
 800ae4c:	4b1a      	ldr	r3, [pc, #104]	; (800aeb8 <tcp_rst+0x94>)
 800ae4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ae52:	491c      	ldr	r1, [pc, #112]	; (800aec4 <tcp_rst+0xa0>)
 800ae54:	481a      	ldr	r0, [pc, #104]	; (800aec0 <tcp_rst+0x9c>)
 800ae56:	f003 fb35 	bl	800e4c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ae5e:	f246 0308 	movw	r3, #24584	; 0x6008
 800ae62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	b29c      	uxth	r4, r3
 800ae68:	68b8      	ldr	r0, [r7, #8]
 800ae6a:	f7f9 fa76 	bl	800435a <lwip_htonl>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	8abb      	ldrh	r3, [r7, #20]
 800ae72:	9303      	str	r3, [sp, #12]
 800ae74:	2314      	movs	r3, #20
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae7a:	9301      	str	r3, [sp, #4]
 800ae7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	4613      	mov	r3, r2
 800ae82:	2200      	movs	r2, #0
 800ae84:	4621      	mov	r1, r4
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff fe92 	bl	800abb0 <tcp_output_alloc_header_common>
 800ae8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00c      	beq.n	800aeae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	2200      	movs	r2, #0
 800ae98:	6939      	ldr	r1, [r7, #16]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7ff ff38 	bl	800ad10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	6939      	ldr	r1, [r7, #16]
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff ff72 	bl	800ad90 <tcp_output_control_segment>
 800aeac:	e000      	b.n	800aeb0 <tcp_rst+0x8c>
    return;
 800aeae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aeb0:	371c      	adds	r7, #28
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd90      	pop	{r4, r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	08011028 	.word	0x08011028
 800aebc:	080117ac 	.word	0x080117ac
 800aec0:	0801107c 	.word	0x0801107c
 800aec4:	080117c8 	.word	0x080117c8

0800aec8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800aec8:	b590      	push	{r4, r7, lr}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <tcp_send_empty_ack+0x24>
 800aede:	4b28      	ldr	r3, [pc, #160]	; (800af80 <tcp_send_empty_ack+0xb8>)
 800aee0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800aee4:	4927      	ldr	r1, [pc, #156]	; (800af84 <tcp_send_empty_ack+0xbc>)
 800aee6:	4828      	ldr	r0, [pc, #160]	; (800af88 <tcp_send_empty_ack+0xc0>)
 800aee8:	f003 faec 	bl	800e4c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	f003 0304 	and.w	r3, r3, #4
 800aef6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800aef8:	7d7b      	ldrb	r3, [r7, #21]
 800aefa:	b29c      	uxth	r4, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af00:	4618      	mov	r0, r3
 800af02:	f7f9 fa2a 	bl	800435a <lwip_htonl>
 800af06:	4603      	mov	r3, r0
 800af08:	2200      	movs	r2, #0
 800af0a:	4621      	mov	r1, r4
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fec1 	bl	800ac94 <tcp_output_alloc_header>
 800af12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d109      	bne.n	800af2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8b5b      	ldrh	r3, [r3, #26]
 800af1e:	f043 0303 	orr.w	r3, r3, #3
 800af22:	b29a      	uxth	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800af28:	f06f 0301 	mvn.w	r3, #1
 800af2c:	e023      	b.n	800af76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800af2e:	7dbb      	ldrb	r3, [r7, #22]
 800af30:	7dfa      	ldrb	r2, [r7, #23]
 800af32:	6939      	ldr	r1, [r7, #16]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff feeb 	bl	800ad10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3304      	adds	r3, #4
 800af40:	6939      	ldr	r1, [r7, #16]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff ff24 	bl	800ad90 <tcp_output_control_segment>
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800af4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d007      	beq.n	800af64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	8b5b      	ldrh	r3, [r3, #26]
 800af58:	f043 0303 	orr.w	r3, r3, #3
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	835a      	strh	r2, [r3, #26]
 800af62:	e006      	b.n	800af72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	8b5b      	ldrh	r3, [r3, #26]
 800af68:	f023 0303 	bic.w	r3, r3, #3
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800af72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af76:	4618      	mov	r0, r3
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd90      	pop	{r4, r7, pc}
 800af7e:	bf00      	nop
 800af80:	08011028 	.word	0x08011028
 800af84:	080117e4 	.word	0x080117e4
 800af88:	0801107c 	.word	0x0801107c

0800af8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b087      	sub	sp, #28
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800af94:	2300      	movs	r3, #0
 800af96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d106      	bne.n	800afac <tcp_keepalive+0x20>
 800af9e:	4b18      	ldr	r3, [pc, #96]	; (800b000 <tcp_keepalive+0x74>)
 800afa0:	f640 0224 	movw	r2, #2084	; 0x824
 800afa4:	4917      	ldr	r1, [pc, #92]	; (800b004 <tcp_keepalive+0x78>)
 800afa6:	4818      	ldr	r0, [pc, #96]	; (800b008 <tcp_keepalive+0x7c>)
 800afa8:	f003 fa8c 	bl	800e4c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	b29c      	uxth	r4, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb4:	3b01      	subs	r3, #1
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f9 f9cf 	bl	800435a <lwip_htonl>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2200      	movs	r2, #0
 800afc0:	4621      	mov	r1, r4
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff fe66 	bl	800ac94 <tcp_output_alloc_header>
 800afc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800afd0:	f04f 33ff 	mov.w	r3, #4294967295
 800afd4:	e010      	b.n	800aff8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
 800afd8:	2200      	movs	r2, #0
 800afda:	6939      	ldr	r1, [r7, #16]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f7ff fe97 	bl	800ad10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3304      	adds	r3, #4
 800afe8:	6939      	ldr	r1, [r7, #16]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff fed0 	bl	800ad90 <tcp_output_control_segment>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	bd90      	pop	{r4, r7, pc}
 800b000:	08011028 	.word	0x08011028
 800b004:	08011804 	.word	0x08011804
 800b008:	0801107c 	.word	0x0801107c

0800b00c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b00c:	b590      	push	{r4, r7, lr}
 800b00e:	b08b      	sub	sp, #44	; 0x2c
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b014:	2300      	movs	r3, #0
 800b016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d106      	bne.n	800b02e <tcp_zero_window_probe+0x22>
 800b020:	4b4c      	ldr	r3, [pc, #304]	; (800b154 <tcp_zero_window_probe+0x148>)
 800b022:	f640 024f 	movw	r2, #2127	; 0x84f
 800b026:	494c      	ldr	r1, [pc, #304]	; (800b158 <tcp_zero_window_probe+0x14c>)
 800b028:	484c      	ldr	r0, [pc, #304]	; (800b15c <tcp_zero_window_probe+0x150>)
 800b02a:	f003 fa4b 	bl	800e4c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b032:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b034:	6a3b      	ldr	r3, [r7, #32]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	e086      	b.n	800b14c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b044:	2bff      	cmp	r3, #255	; 0xff
 800b046:	d007      	beq.n	800b058 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b04e:	3301      	adds	r3, #1
 800b050:	b2da      	uxtb	r2, r3
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	899b      	ldrh	r3, [r3, #12]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	4618      	mov	r0, r3
 800b062:	f7f9 f965 	bl	8004330 <lwip_htons>
 800b066:	4603      	mov	r3, r0
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d005      	beq.n	800b07e <tcp_zero_window_probe+0x72>
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	891b      	ldrh	r3, [r3, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d101      	bne.n	800b07e <tcp_zero_window_probe+0x72>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <tcp_zero_window_probe+0x74>
 800b07e:	2300      	movs	r3, #0
 800b080:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b082:	7ffb      	ldrb	r3, [r7, #31]
 800b084:	2b00      	cmp	r3, #0
 800b086:	bf0c      	ite	eq
 800b088:	2301      	moveq	r3, #1
 800b08a:	2300      	movne	r3, #0
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b094:	b299      	uxth	r1, r3
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	8bba      	ldrh	r2, [r7, #28]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff fdf8 	bl	800ac94 <tcp_output_alloc_header>
 800b0a4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b0b0:	e04c      	b.n	800b14c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b0b8:	7ffb      	ldrb	r3, [r7, #31]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d011      	beq.n	800b0e2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	899b      	ldrh	r3, [r3, #12]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	b21b      	sxth	r3, r3
 800b0c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0ca:	b21c      	sxth	r4, r3
 800b0cc:	2011      	movs	r0, #17
 800b0ce:	f7f9 f92f 	bl	8004330 <lwip_htons>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	b21b      	sxth	r3, r3
 800b0d6:	4323      	orrs	r3, r4
 800b0d8:	b21b      	sxth	r3, r3
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	819a      	strh	r2, [r3, #12]
 800b0e0:	e010      	b.n	800b104 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	3314      	adds	r3, #20
 800b0e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	6858      	ldr	r0, [r3, #4]
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	891a      	ldrh	r2, [r3, #8]
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	891b      	ldrh	r3, [r3, #8]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	6939      	ldr	r1, [r7, #16]
 800b100:	f7fa fdc4 	bl	8005c8c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7f9 f925 	bl	800435a <lwip_htonl>
 800b110:	4603      	mov	r3, r0
 800b112:	3301      	adds	r3, #1
 800b114:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da02      	bge.n	800b128 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b12c:	2200      	movs	r2, #0
 800b12e:	69b9      	ldr	r1, [r7, #24]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff fded 	bl	800ad10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3304      	adds	r3, #4
 800b13c:	69b9      	ldr	r1, [r7, #24]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff fe26 	bl	800ad90 <tcp_output_control_segment>
 800b144:	4603      	mov	r3, r0
 800b146:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b148:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	372c      	adds	r7, #44	; 0x2c
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}
 800b154:	08011028 	.word	0x08011028
 800b158:	08011820 	.word	0x08011820
 800b15c:	0801107c 	.word	0x0801107c

0800b160 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b168:	f7fa ff10 	bl	8005f8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b16c:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <tcpip_tcp_timer+0x38>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d103      	bne.n	800b17c <tcpip_tcp_timer+0x1c>
 800b174:	4b09      	ldr	r3, [pc, #36]	; (800b19c <tcpip_tcp_timer+0x3c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d005      	beq.n	800b188 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b17c:	2200      	movs	r2, #0
 800b17e:	4908      	ldr	r1, [pc, #32]	; (800b1a0 <tcpip_tcp_timer+0x40>)
 800b180:	20fa      	movs	r0, #250	; 0xfa
 800b182:	f000 f8f3 	bl	800b36c <sys_timeout>
 800b186:	e003      	b.n	800b190 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b188:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <tcpip_tcp_timer+0x44>)
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
  }
}
 800b18e:	bf00      	nop
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	20008ba0 	.word	0x20008ba0
 800b19c:	20008bb0 	.word	0x20008bb0
 800b1a0:	0800b161 	.word	0x0800b161
 800b1a4:	20000170 	.word	0x20000170

0800b1a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b1ac:	4b0a      	ldr	r3, [pc, #40]	; (800b1d8 <tcp_timer_needed+0x30>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10f      	bne.n	800b1d4 <tcp_timer_needed+0x2c>
 800b1b4:	4b09      	ldr	r3, [pc, #36]	; (800b1dc <tcp_timer_needed+0x34>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d103      	bne.n	800b1c4 <tcp_timer_needed+0x1c>
 800b1bc:	4b08      	ldr	r3, [pc, #32]	; (800b1e0 <tcp_timer_needed+0x38>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d007      	beq.n	800b1d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b1c4:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <tcp_timer_needed+0x30>)
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4905      	ldr	r1, [pc, #20]	; (800b1e4 <tcp_timer_needed+0x3c>)
 800b1ce:	20fa      	movs	r0, #250	; 0xfa
 800b1d0:	f000 f8cc 	bl	800b36c <sys_timeout>
  }
}
 800b1d4:	bf00      	nop
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	20000170 	.word	0x20000170
 800b1dc:	20008ba0 	.word	0x20008ba0
 800b1e0:	20008bb0 	.word	0x20008bb0
 800b1e4:	0800b161 	.word	0x0800b161

0800b1e8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b1f4:	2006      	movs	r0, #6
 800b1f6:	f7f9 fcf1 	bl	8004bdc <memp_malloc>
 800b1fa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d151      	bne.n	800b2ac <sys_timeout_abs+0xc4>
 800b208:	4b2a      	ldr	r3, [pc, #168]	; (800b2b4 <sys_timeout_abs+0xcc>)
 800b20a:	22be      	movs	r2, #190	; 0xbe
 800b20c:	492a      	ldr	r1, [pc, #168]	; (800b2b8 <sys_timeout_abs+0xd0>)
 800b20e:	482b      	ldr	r0, [pc, #172]	; (800b2bc <sys_timeout_abs+0xd4>)
 800b210:	f003 f958 	bl	800e4c4 <iprintf>
    return;
 800b214:	e04a      	b.n	800b2ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2200      	movs	r2, #0
 800b21a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b22e:	4b24      	ldr	r3, [pc, #144]	; (800b2c0 <sys_timeout_abs+0xd8>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b236:	4a22      	ldr	r2, [pc, #136]	; (800b2c0 <sys_timeout_abs+0xd8>)
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	6013      	str	r3, [r2, #0]
    return;
 800b23c:	e037      	b.n	800b2ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	685a      	ldr	r2, [r3, #4]
 800b242:	4b1f      	ldr	r3, [pc, #124]	; (800b2c0 <sys_timeout_abs+0xd8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	0fdb      	lsrs	r3, r3, #31
 800b24c:	f003 0301 	and.w	r3, r3, #1
 800b250:	b2db      	uxtb	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d007      	beq.n	800b266 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <sys_timeout_abs+0xd8>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b25e:	4a18      	ldr	r2, [pc, #96]	; (800b2c0 <sys_timeout_abs+0xd8>)
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	e023      	b.n	800b2ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b266:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <sys_timeout_abs+0xd8>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	617b      	str	r3, [r7, #20]
 800b26c:	e01a      	b.n	800b2a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <sys_timeout_abs+0xa6>
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	685a      	ldr	r2, [r3, #4]
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	0fdb      	lsrs	r3, r3, #31
 800b284:	f003 0301 	and.w	r3, r3, #1
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d007      	beq.n	800b29e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	601a      	str	r2, [r3, #0]
        break;
 800b29c:	e007      	b.n	800b2ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1e1      	bne.n	800b26e <sys_timeout_abs+0x86>
 800b2aa:	e000      	b.n	800b2ae <sys_timeout_abs+0xc6>
    return;
 800b2ac:	bf00      	nop
      }
    }
  }
}
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	08011844 	.word	0x08011844
 800b2b8:	08011878 	.word	0x08011878
 800b2bc:	080118b8 	.word	0x080118b8
 800b2c0:	20000168 	.word	0x20000168

0800b2c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	4798      	blx	r3

  now = sys_now();
 800b2d6:	f7f8 ff9d 	bl	8004214 <sys_now>
 800b2da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	4b0f      	ldr	r3, [pc, #60]	; (800b320 <lwip_cyclic_timer+0x5c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	0fdb      	lsrs	r3, r3, #31
 800b2f0:	f003 0301 	and.w	r3, r3, #1
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d009      	beq.n	800b30e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	4413      	add	r3, r2
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	4907      	ldr	r1, [pc, #28]	; (800b324 <lwip_cyclic_timer+0x60>)
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff ff6e 	bl	800b1e8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b30c:	e004      	b.n	800b318 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <lwip_cyclic_timer+0x60>)
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f7ff ff68 	bl	800b1e8 <sys_timeout_abs>
}
 800b318:	bf00      	nop
 800b31a:	3718      	adds	r7, #24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	2000016c 	.word	0x2000016c
 800b324:	0800b2c5 	.word	0x0800b2c5

0800b328 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b32e:	2301      	movs	r3, #1
 800b330:	607b      	str	r3, [r7, #4]
 800b332:	e00e      	b.n	800b352 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b334:	4a0b      	ldr	r2, [pc, #44]	; (800b364 <sys_timeouts_init+0x3c>)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	4a08      	ldr	r2, [pc, #32]	; (800b364 <sys_timeouts_init+0x3c>)
 800b342:	4413      	add	r3, r2
 800b344:	461a      	mov	r2, r3
 800b346:	4908      	ldr	r1, [pc, #32]	; (800b368 <sys_timeouts_init+0x40>)
 800b348:	f000 f810 	bl	800b36c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3301      	adds	r3, #1
 800b350:	607b      	str	r3, [r7, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b02      	cmp	r3, #2
 800b356:	d9ed      	bls.n	800b334 <sys_timeouts_init+0xc>
  }
}
 800b358:	bf00      	nop
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	0801241c 	.word	0x0801241c
 800b368:	0800b2c5 	.word	0x0800b2c5

0800b36c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37e:	d306      	bcc.n	800b38e <sys_timeout+0x22>
 800b380:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <sys_timeout+0x40>)
 800b382:	f240 1229 	movw	r2, #297	; 0x129
 800b386:	490a      	ldr	r1, [pc, #40]	; (800b3b0 <sys_timeout+0x44>)
 800b388:	480a      	ldr	r0, [pc, #40]	; (800b3b4 <sys_timeout+0x48>)
 800b38a:	f003 f89b 	bl	800e4c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b38e:	f7f8 ff41 	bl	8004214 <sys_now>
 800b392:	4602      	mov	r2, r0
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	4413      	add	r3, r2
 800b398:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	6978      	ldr	r0, [r7, #20]
 800b3a0:	f7ff ff22 	bl	800b1e8 <sys_timeout_abs>
#endif
}
 800b3a4:	bf00      	nop
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	08011844 	.word	0x08011844
 800b3b0:	080118e0 	.word	0x080118e0
 800b3b4:	080118b8 	.word	0x080118b8

0800b3b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b3be:	f7f8 ff29 	bl	8004214 <sys_now>
 800b3c2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b3c4:	4b1a      	ldr	r3, [pc, #104]	; (800b430 <sys_check_timeouts+0x78>)
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <sys_check_timeouts+0x1a>
 800b3ce:	f7f9 ff29 	bl	8005224 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b3d2:	4b18      	ldr	r3, [pc, #96]	; (800b434 <sys_check_timeouts+0x7c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d022      	beq.n	800b424 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	0fdb      	lsrs	r3, r3, #31
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d11a      	bne.n	800b428 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a0f      	ldr	r2, [pc, #60]	; (800b434 <sys_check_timeouts+0x7c>)
 800b3f8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	4a0b      	ldr	r2, [pc, #44]	; (800b438 <sys_check_timeouts+0x80>)
 800b40c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	2006      	movs	r0, #6
 800b412:	f7f9 fc2f 	bl	8004c74 <memp_free>
    if (handler != NULL) {
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0d3      	beq.n	800b3c4 <sys_check_timeouts+0xc>
      handler(arg);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6838      	ldr	r0, [r7, #0]
 800b420:	4798      	blx	r3
  do {
 800b422:	e7cf      	b.n	800b3c4 <sys_check_timeouts+0xc>
      return;
 800b424:	bf00      	nop
 800b426:	e000      	b.n	800b42a <sys_check_timeouts+0x72>
      return;
 800b428:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20008b98 	.word	0x20008b98
 800b434:	20000168 	.word	0x20000168
 800b438:	2000016c 	.word	0x2000016c

0800b43c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b440:	f003 f858 	bl	800e4f4 <rand>
 800b444:	4603      	mov	r3, r0
 800b446:	b29b      	uxth	r3, r3
 800b448:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b452:	b29a      	uxth	r2, r3
 800b454:	4b01      	ldr	r3, [pc, #4]	; (800b45c <udp_init+0x20>)
 800b456:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b458:	bf00      	nop
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20000030 	.word	0x20000030

0800b460 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b46a:	4b17      	ldr	r3, [pc, #92]	; (800b4c8 <udp_new_port+0x68>)
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	b291      	uxth	r1, r2
 800b472:	4a15      	ldr	r2, [pc, #84]	; (800b4c8 <udp_new_port+0x68>)
 800b474:	8011      	strh	r1, [r2, #0]
 800b476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d103      	bne.n	800b486 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b47e:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <udp_new_port+0x68>)
 800b480:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b484:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b486:	4b11      	ldr	r3, [pc, #68]	; (800b4cc <udp_new_port+0x6c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	603b      	str	r3, [r7, #0]
 800b48c:	e011      	b.n	800b4b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	8a5a      	ldrh	r2, [r3, #18]
 800b492:	4b0d      	ldr	r3, [pc, #52]	; (800b4c8 <udp_new_port+0x68>)
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	429a      	cmp	r2, r3
 800b498:	d108      	bne.n	800b4ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b49a:	88fb      	ldrh	r3, [r7, #6]
 800b49c:	3301      	adds	r3, #1
 800b49e:	80fb      	strh	r3, [r7, #6]
 800b4a0:	88fb      	ldrh	r3, [r7, #6]
 800b4a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4a6:	d3e0      	bcc.n	800b46a <udp_new_port+0xa>
        return 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	e007      	b.n	800b4bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	603b      	str	r3, [r7, #0]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d1ea      	bne.n	800b48e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b4b8:	4b03      	ldr	r3, [pc, #12]	; (800b4c8 <udp_new_port+0x68>)
 800b4ba:	881b      	ldrh	r3, [r3, #0]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	20000030 	.word	0x20000030
 800b4cc:	20008bb8 	.word	0x20008bb8

0800b4d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d105      	bne.n	800b4f0 <udp_input_local_match+0x20>
 800b4e4:	4b27      	ldr	r3, [pc, #156]	; (800b584 <udp_input_local_match+0xb4>)
 800b4e6:	2287      	movs	r2, #135	; 0x87
 800b4e8:	4927      	ldr	r1, [pc, #156]	; (800b588 <udp_input_local_match+0xb8>)
 800b4ea:	4828      	ldr	r0, [pc, #160]	; (800b58c <udp_input_local_match+0xbc>)
 800b4ec:	f002 ffea 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d105      	bne.n	800b502 <udp_input_local_match+0x32>
 800b4f6:	4b23      	ldr	r3, [pc, #140]	; (800b584 <udp_input_local_match+0xb4>)
 800b4f8:	2288      	movs	r2, #136	; 0x88
 800b4fa:	4925      	ldr	r1, [pc, #148]	; (800b590 <udp_input_local_match+0xc0>)
 800b4fc:	4823      	ldr	r0, [pc, #140]	; (800b58c <udp_input_local_match+0xbc>)
 800b4fe:	f002 ffe1 	bl	800e4c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	7a1b      	ldrb	r3, [r3, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00b      	beq.n	800b522 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	7a1a      	ldrb	r2, [r3, #8]
 800b50e:	4b21      	ldr	r3, [pc, #132]	; (800b594 <udp_input_local_match+0xc4>)
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b516:	3301      	adds	r3, #1
 800b518:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d001      	beq.n	800b522 <udp_input_local_match+0x52>
    return 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	e02b      	b.n	800b57a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d018      	beq.n	800b55a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d013      	beq.n	800b556 <udp_input_local_match+0x86>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00f      	beq.n	800b556 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b536:	4b17      	ldr	r3, [pc, #92]	; (800b594 <udp_input_local_match+0xc4>)
 800b538:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53e:	d00a      	beq.n	800b556 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	4b13      	ldr	r3, [pc, #76]	; (800b594 <udp_input_local_match+0xc4>)
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	405a      	eors	r2, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	3308      	adds	r3, #8
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b552:	2b00      	cmp	r3, #0
 800b554:	d110      	bne.n	800b578 <udp_input_local_match+0xa8>
          return 1;
 800b556:	2301      	movs	r3, #1
 800b558:	e00f      	b.n	800b57a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d009      	beq.n	800b574 <udp_input_local_match+0xa4>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d005      	beq.n	800b574 <udp_input_local_match+0xa4>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	4b09      	ldr	r3, [pc, #36]	; (800b594 <udp_input_local_match+0xc4>)
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	429a      	cmp	r2, r3
 800b572:	d101      	bne.n	800b578 <udp_input_local_match+0xa8>
        return 1;
 800b574:	2301      	movs	r3, #1
 800b576:	e000      	b.n	800b57a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	0801192c 	.word	0x0801192c
 800b588:	0801195c 	.word	0x0801195c
 800b58c:	08011980 	.word	0x08011980
 800b590:	080119a8 	.word	0x080119a8
 800b594:	2000349c 	.word	0x2000349c

0800b598 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b598:	b590      	push	{r4, r7, lr}
 800b59a:	b08d      	sub	sp, #52	; 0x34
 800b59c:	af02      	add	r7, sp, #8
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d105      	bne.n	800b5b8 <udp_input+0x20>
 800b5ac:	4b7c      	ldr	r3, [pc, #496]	; (800b7a0 <udp_input+0x208>)
 800b5ae:	22cf      	movs	r2, #207	; 0xcf
 800b5b0:	497c      	ldr	r1, [pc, #496]	; (800b7a4 <udp_input+0x20c>)
 800b5b2:	487d      	ldr	r0, [pc, #500]	; (800b7a8 <udp_input+0x210>)
 800b5b4:	f002 ff86 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d105      	bne.n	800b5ca <udp_input+0x32>
 800b5be:	4b78      	ldr	r3, [pc, #480]	; (800b7a0 <udp_input+0x208>)
 800b5c0:	22d0      	movs	r2, #208	; 0xd0
 800b5c2:	497a      	ldr	r1, [pc, #488]	; (800b7ac <udp_input+0x214>)
 800b5c4:	4878      	ldr	r0, [pc, #480]	; (800b7a8 <udp_input+0x210>)
 800b5c6:	f002 ff7d 	bl	800e4c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	895b      	ldrh	r3, [r3, #10]
 800b5ce:	2b07      	cmp	r3, #7
 800b5d0:	d803      	bhi.n	800b5da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7fa f960 	bl	8005898 <pbuf_free>
    goto end;
 800b5d8:	e0de      	b.n	800b798 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b5e0:	4b73      	ldr	r3, [pc, #460]	; (800b7b0 <udp_input+0x218>)
 800b5e2:	695b      	ldr	r3, [r3, #20]
 800b5e4:	4a72      	ldr	r2, [pc, #456]	; (800b7b0 <udp_input+0x218>)
 800b5e6:	6812      	ldr	r2, [r2, #0]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f001 ff9e 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7f8 fe98 	bl	8004330 <lwip_htons>
 800b600:	4603      	mov	r3, r0
 800b602:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	885b      	ldrh	r3, [r3, #2]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f8 fe90 	bl	8004330 <lwip_htons>
 800b610:	4603      	mov	r3, r0
 800b612:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b614:	2300      	movs	r3, #0
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b618:	2300      	movs	r3, #0
 800b61a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b620:	4b64      	ldr	r3, [pc, #400]	; (800b7b4 <udp_input+0x21c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	627b      	str	r3, [r7, #36]	; 0x24
 800b626:	e054      	b.n	800b6d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62a:	8a5b      	ldrh	r3, [r3, #18]
 800b62c:	89fa      	ldrh	r2, [r7, #14]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d14a      	bne.n	800b6c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b632:	7cfb      	ldrb	r3, [r7, #19]
 800b634:	461a      	mov	r2, r3
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b63a:	f7ff ff49 	bl	800b4d0 <udp_input_local_match>
 800b63e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b640:	2b00      	cmp	r3, #0
 800b642:	d041      	beq.n	800b6c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	7c1b      	ldrb	r3, [r3, #16]
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d11d      	bne.n	800b68c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	e017      	b.n	800b68c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b65c:	7cfb      	ldrb	r3, [r7, #19]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d014      	beq.n	800b68c <udp_input+0xf4>
 800b662:	4b53      	ldr	r3, [pc, #332]	; (800b7b0 <udp_input+0x218>)
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66a:	d10f      	bne.n	800b68c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	3304      	adds	r3, #4
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d008      	beq.n	800b68c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	3304      	adds	r3, #4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	d101      	bne.n	800b68c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	8a9b      	ldrh	r3, [r3, #20]
 800b690:	8a3a      	ldrh	r2, [r7, #16]
 800b692:	429a      	cmp	r2, r3
 800b694:	d118      	bne.n	800b6c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b698:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d005      	beq.n	800b6aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	4b43      	ldr	r3, [pc, #268]	; (800b7b0 <udp_input+0x218>)
 800b6a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d10e      	bne.n	800b6c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d014      	beq.n	800b6da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	68da      	ldr	r2, [r3, #12]
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b6b8:	4b3e      	ldr	r3, [pc, #248]	; (800b7b4 <udp_input+0x21c>)
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b6c0:	4a3c      	ldr	r2, [pc, #240]	; (800b7b4 <udp_input+0x21c>)
 800b6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b6c6:	e008      	b.n	800b6da <udp_input+0x142>
      }
    }

    prev = pcb;
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1a7      	bne.n	800b628 <udp_input+0x90>
 800b6d8:	e000      	b.n	800b6dc <udp_input+0x144>
        break;
 800b6da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <udp_input+0x15a>
    for_us = 1;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	76fb      	strb	r3, [r7, #27]
 800b6f0:	e00a      	b.n	800b708 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	4b2d      	ldr	r3, [pc, #180]	; (800b7b0 <udp_input+0x218>)
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	bf0c      	ite	eq
 800b700:	2301      	moveq	r3, #1
 800b702:	2300      	movne	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b708:	7efb      	ldrb	r3, [r7, #27]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d041      	beq.n	800b792 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b70e:	2108      	movs	r1, #8
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f7fa f83b 	bl	800578c <pbuf_remove_header>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00a      	beq.n	800b732 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b71c:	4b20      	ldr	r3, [pc, #128]	; (800b7a0 <udp_input+0x208>)
 800b71e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b722:	4925      	ldr	r1, [pc, #148]	; (800b7b8 <udp_input+0x220>)
 800b724:	4820      	ldr	r0, [pc, #128]	; (800b7a8 <udp_input+0x210>)
 800b726:	f002 fecd 	bl	800e4c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7fa f8b4 	bl	8005898 <pbuf_free>
      goto end;
 800b730:	e032      	b.n	800b798 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	2b00      	cmp	r3, #0
 800b736:	d012      	beq.n	800b75e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00a      	beq.n	800b756 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	699c      	ldr	r4, [r3, #24]
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	69d8      	ldr	r0, [r3, #28]
 800b748:	8a3b      	ldrh	r3, [r7, #16]
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	4b1b      	ldr	r3, [pc, #108]	; (800b7bc <udp_input+0x224>)
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b752:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b754:	e021      	b.n	800b79a <udp_input+0x202>
        pbuf_free(p);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7fa f89e 	bl	8005898 <pbuf_free>
        goto end;
 800b75c:	e01c      	b.n	800b798 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b75e:	7cfb      	ldrb	r3, [r7, #19]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d112      	bne.n	800b78a <udp_input+0x1f2>
 800b764:	4b12      	ldr	r3, [pc, #72]	; (800b7b0 <udp_input+0x218>)
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b76c:	2be0      	cmp	r3, #224	; 0xe0
 800b76e:	d00c      	beq.n	800b78a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b770:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <udp_input+0x218>)
 800b772:	899b      	ldrh	r3, [r3, #12]
 800b774:	3308      	adds	r3, #8
 800b776:	b29b      	uxth	r3, r3
 800b778:	b21b      	sxth	r3, r3
 800b77a:	4619      	mov	r1, r3
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7fa f878 	bl	8005872 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b782:	2103      	movs	r1, #3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f001 fbb1 	bl	800ceec <icmp_dest_unreach>
      pbuf_free(p);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7fa f884 	bl	8005898 <pbuf_free>
  return;
 800b790:	e003      	b.n	800b79a <udp_input+0x202>
    pbuf_free(p);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fa f880 	bl	8005898 <pbuf_free>
  return;
 800b798:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b79a:	372c      	adds	r7, #44	; 0x2c
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd90      	pop	{r4, r7, pc}
 800b7a0:	0801192c 	.word	0x0801192c
 800b7a4:	080119d0 	.word	0x080119d0
 800b7a8:	08011980 	.word	0x08011980
 800b7ac:	080119e8 	.word	0x080119e8
 800b7b0:	2000349c 	.word	0x2000349c
 800b7b4:	20008bb8 	.word	0x20008bb8
 800b7b8:	08011a04 	.word	0x08011a04
 800b7bc:	200034ac 	.word	0x200034ac

0800b7c0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d109      	bne.n	800b7e4 <udp_send+0x24>
 800b7d0:	4b11      	ldr	r3, [pc, #68]	; (800b818 <udp_send+0x58>)
 800b7d2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b7d6:	4911      	ldr	r1, [pc, #68]	; (800b81c <udp_send+0x5c>)
 800b7d8:	4811      	ldr	r0, [pc, #68]	; (800b820 <udp_send+0x60>)
 800b7da:	f002 fe73 	bl	800e4c4 <iprintf>
 800b7de:	f06f 030f 	mvn.w	r3, #15
 800b7e2:	e015      	b.n	800b810 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d109      	bne.n	800b7fe <udp_send+0x3e>
 800b7ea:	4b0b      	ldr	r3, [pc, #44]	; (800b818 <udp_send+0x58>)
 800b7ec:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b7f0:	490c      	ldr	r1, [pc, #48]	; (800b824 <udp_send+0x64>)
 800b7f2:	480b      	ldr	r0, [pc, #44]	; (800b820 <udp_send+0x60>)
 800b7f4:	f002 fe66 	bl	800e4c4 <iprintf>
 800b7f8:	f06f 030f 	mvn.w	r3, #15
 800b7fc:	e008      	b.n	800b810 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8a9b      	ldrh	r3, [r3, #20]
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f80d 	bl	800b828 <udp_sendto>
 800b80e:	4603      	mov	r3, r0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	0801192c 	.word	0x0801192c
 800b81c:	08011a20 	.word	0x08011a20
 800b820:	08011980 	.word	0x08011980
 800b824:	08011a38 	.word	0x08011a38

0800b828 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af02      	add	r7, sp, #8
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d109      	bne.n	800b850 <udp_sendto+0x28>
 800b83c:	4b23      	ldr	r3, [pc, #140]	; (800b8cc <udp_sendto+0xa4>)
 800b83e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b842:	4923      	ldr	r1, [pc, #140]	; (800b8d0 <udp_sendto+0xa8>)
 800b844:	4823      	ldr	r0, [pc, #140]	; (800b8d4 <udp_sendto+0xac>)
 800b846:	f002 fe3d 	bl	800e4c4 <iprintf>
 800b84a:	f06f 030f 	mvn.w	r3, #15
 800b84e:	e038      	b.n	800b8c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d109      	bne.n	800b86a <udp_sendto+0x42>
 800b856:	4b1d      	ldr	r3, [pc, #116]	; (800b8cc <udp_sendto+0xa4>)
 800b858:	f240 2219 	movw	r2, #537	; 0x219
 800b85c:	491e      	ldr	r1, [pc, #120]	; (800b8d8 <udp_sendto+0xb0>)
 800b85e:	481d      	ldr	r0, [pc, #116]	; (800b8d4 <udp_sendto+0xac>)
 800b860:	f002 fe30 	bl	800e4c4 <iprintf>
 800b864:	f06f 030f 	mvn.w	r3, #15
 800b868:	e02b      	b.n	800b8c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d109      	bne.n	800b884 <udp_sendto+0x5c>
 800b870:	4b16      	ldr	r3, [pc, #88]	; (800b8cc <udp_sendto+0xa4>)
 800b872:	f240 221a 	movw	r2, #538	; 0x21a
 800b876:	4919      	ldr	r1, [pc, #100]	; (800b8dc <udp_sendto+0xb4>)
 800b878:	4816      	ldr	r0, [pc, #88]	; (800b8d4 <udp_sendto+0xac>)
 800b87a:	f002 fe23 	bl	800e4c4 <iprintf>
 800b87e:	f06f 030f 	mvn.w	r3, #15
 800b882:	e01e      	b.n	800b8c2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	7a1b      	ldrb	r3, [r3, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d006      	beq.n	800b89a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	7a1b      	ldrb	r3, [r3, #8]
 800b890:	4618      	mov	r0, r3
 800b892:	f7f9 fca1 	bl	80051d8 <netif_get_by_index>
 800b896:	6178      	str	r0, [r7, #20]
 800b898:	e003      	b.n	800b8a2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f001 fbb0 	bl	800d000 <ip4_route>
 800b8a0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b8a8:	f06f 0303 	mvn.w	r3, #3
 800b8ac:	e009      	b.n	800b8c2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b8ae:	887a      	ldrh	r2, [r7, #2]
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f000 f810 	bl	800b8e0 <udp_sendto_if>
 800b8c0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	0801192c 	.word	0x0801192c
 800b8d0:	08011a50 	.word	0x08011a50
 800b8d4:	08011980 	.word	0x08011980
 800b8d8:	08011a68 	.word	0x08011a68
 800b8dc:	08011a84 	.word	0x08011a84

0800b8e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
 800b8ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d109      	bne.n	800b908 <udp_sendto_if+0x28>
 800b8f4:	4b2e      	ldr	r3, [pc, #184]	; (800b9b0 <udp_sendto_if+0xd0>)
 800b8f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8fa:	492e      	ldr	r1, [pc, #184]	; (800b9b4 <udp_sendto_if+0xd4>)
 800b8fc:	482e      	ldr	r0, [pc, #184]	; (800b9b8 <udp_sendto_if+0xd8>)
 800b8fe:	f002 fde1 	bl	800e4c4 <iprintf>
 800b902:	f06f 030f 	mvn.w	r3, #15
 800b906:	e04f      	b.n	800b9a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d109      	bne.n	800b922 <udp_sendto_if+0x42>
 800b90e:	4b28      	ldr	r3, [pc, #160]	; (800b9b0 <udp_sendto_if+0xd0>)
 800b910:	f240 2281 	movw	r2, #641	; 0x281
 800b914:	4929      	ldr	r1, [pc, #164]	; (800b9bc <udp_sendto_if+0xdc>)
 800b916:	4828      	ldr	r0, [pc, #160]	; (800b9b8 <udp_sendto_if+0xd8>)
 800b918:	f002 fdd4 	bl	800e4c4 <iprintf>
 800b91c:	f06f 030f 	mvn.w	r3, #15
 800b920:	e042      	b.n	800b9a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d109      	bne.n	800b93c <udp_sendto_if+0x5c>
 800b928:	4b21      	ldr	r3, [pc, #132]	; (800b9b0 <udp_sendto_if+0xd0>)
 800b92a:	f240 2282 	movw	r2, #642	; 0x282
 800b92e:	4924      	ldr	r1, [pc, #144]	; (800b9c0 <udp_sendto_if+0xe0>)
 800b930:	4821      	ldr	r0, [pc, #132]	; (800b9b8 <udp_sendto_if+0xd8>)
 800b932:	f002 fdc7 	bl	800e4c4 <iprintf>
 800b936:	f06f 030f 	mvn.w	r3, #15
 800b93a:	e035      	b.n	800b9a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <udp_sendto_if+0x76>
 800b942:	4b1b      	ldr	r3, [pc, #108]	; (800b9b0 <udp_sendto_if+0xd0>)
 800b944:	f240 2283 	movw	r2, #643	; 0x283
 800b948:	491e      	ldr	r1, [pc, #120]	; (800b9c4 <udp_sendto_if+0xe4>)
 800b94a:	481b      	ldr	r0, [pc, #108]	; (800b9b8 <udp_sendto_if+0xd8>)
 800b94c:	f002 fdba 	bl	800e4c4 <iprintf>
 800b950:	f06f 030f 	mvn.w	r3, #15
 800b954:	e028      	b.n	800b9a8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d009      	beq.n	800b970 <udp_sendto_if+0x90>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d005      	beq.n	800b970 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b96c:	2be0      	cmp	r3, #224	; 0xe0
 800b96e:	d103      	bne.n	800b978 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	3304      	adds	r3, #4
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	e00b      	b.n	800b990 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	3304      	adds	r3, #4
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	429a      	cmp	r2, r3
 800b984:	d002      	beq.n	800b98c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b986:	f06f 0303 	mvn.w	r3, #3
 800b98a:	e00d      	b.n	800b9a8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b990:	887a      	ldrh	r2, [r7, #2]
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	9301      	str	r3, [sp, #4]
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	4613      	mov	r3, r2
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	68b9      	ldr	r1, [r7, #8]
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f811 	bl	800b9c8 <udp_sendto_if_src>
 800b9a6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	0801192c 	.word	0x0801192c
 800b9b4:	08011aa0 	.word	0x08011aa0
 800b9b8:	08011980 	.word	0x08011980
 800b9bc:	08011abc 	.word	0x08011abc
 800b9c0:	08011ad8 	.word	0x08011ad8
 800b9c4:	08011af8 	.word	0x08011af8

0800b9c8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08c      	sub	sp, #48	; 0x30
 800b9cc:	af04      	add	r7, sp, #16
 800b9ce:	60f8      	str	r0, [r7, #12]
 800b9d0:	60b9      	str	r1, [r7, #8]
 800b9d2:	607a      	str	r2, [r7, #4]
 800b9d4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d109      	bne.n	800b9f0 <udp_sendto_if_src+0x28>
 800b9dc:	4b65      	ldr	r3, [pc, #404]	; (800bb74 <udp_sendto_if_src+0x1ac>)
 800b9de:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b9e2:	4965      	ldr	r1, [pc, #404]	; (800bb78 <udp_sendto_if_src+0x1b0>)
 800b9e4:	4865      	ldr	r0, [pc, #404]	; (800bb7c <udp_sendto_if_src+0x1b4>)
 800b9e6:	f002 fd6d 	bl	800e4c4 <iprintf>
 800b9ea:	f06f 030f 	mvn.w	r3, #15
 800b9ee:	e0bc      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d109      	bne.n	800ba0a <udp_sendto_if_src+0x42>
 800b9f6:	4b5f      	ldr	r3, [pc, #380]	; (800bb74 <udp_sendto_if_src+0x1ac>)
 800b9f8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b9fc:	4960      	ldr	r1, [pc, #384]	; (800bb80 <udp_sendto_if_src+0x1b8>)
 800b9fe:	485f      	ldr	r0, [pc, #380]	; (800bb7c <udp_sendto_if_src+0x1b4>)
 800ba00:	f002 fd60 	bl	800e4c4 <iprintf>
 800ba04:	f06f 030f 	mvn.w	r3, #15
 800ba08:	e0af      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d109      	bne.n	800ba24 <udp_sendto_if_src+0x5c>
 800ba10:	4b58      	ldr	r3, [pc, #352]	; (800bb74 <udp_sendto_if_src+0x1ac>)
 800ba12:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ba16:	495b      	ldr	r1, [pc, #364]	; (800bb84 <udp_sendto_if_src+0x1bc>)
 800ba18:	4858      	ldr	r0, [pc, #352]	; (800bb7c <udp_sendto_if_src+0x1b4>)
 800ba1a:	f002 fd53 	bl	800e4c4 <iprintf>
 800ba1e:	f06f 030f 	mvn.w	r3, #15
 800ba22:	e0a2      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ba24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d109      	bne.n	800ba3e <udp_sendto_if_src+0x76>
 800ba2a:	4b52      	ldr	r3, [pc, #328]	; (800bb74 <udp_sendto_if_src+0x1ac>)
 800ba2c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ba30:	4955      	ldr	r1, [pc, #340]	; (800bb88 <udp_sendto_if_src+0x1c0>)
 800ba32:	4852      	ldr	r0, [pc, #328]	; (800bb7c <udp_sendto_if_src+0x1b4>)
 800ba34:	f002 fd46 	bl	800e4c4 <iprintf>
 800ba38:	f06f 030f 	mvn.w	r3, #15
 800ba3c:	e095      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ba3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d109      	bne.n	800ba58 <udp_sendto_if_src+0x90>
 800ba44:	4b4b      	ldr	r3, [pc, #300]	; (800bb74 <udp_sendto_if_src+0x1ac>)
 800ba46:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ba4a:	4950      	ldr	r1, [pc, #320]	; (800bb8c <udp_sendto_if_src+0x1c4>)
 800ba4c:	484b      	ldr	r0, [pc, #300]	; (800bb7c <udp_sendto_if_src+0x1b4>)
 800ba4e:	f002 fd39 	bl	800e4c4 <iprintf>
 800ba52:	f06f 030f 	mvn.w	r3, #15
 800ba56:	e088      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	8a5b      	ldrh	r3, [r3, #18]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10f      	bne.n	800ba80 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ba60:	68f9      	ldr	r1, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	8a5b      	ldrh	r3, [r3, #18]
 800ba66:	461a      	mov	r2, r3
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f000 f893 	bl	800bb94 <udp_bind>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ba72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ba7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ba7e:	e074      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	891b      	ldrh	r3, [r3, #8]
 800ba84:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d902      	bls.n	800ba92 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ba8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba90:	e06b      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ba92:	2108      	movs	r1, #8
 800ba94:	68b8      	ldr	r0, [r7, #8]
 800ba96:	f7f9 fe69 	bl	800576c <pbuf_add_header>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d015      	beq.n	800bacc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800baa0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800baa4:	2108      	movs	r1, #8
 800baa6:	2022      	movs	r0, #34	; 0x22
 800baa8:	f7f9 fc12 	bl	80052d0 <pbuf_alloc>
 800baac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800bab4:	f04f 33ff 	mov.w	r3, #4294967295
 800bab8:	e057      	b.n	800bb6a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	891b      	ldrh	r3, [r3, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d006      	beq.n	800bad0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	69f8      	ldr	r0, [r7, #28]
 800bac6:	f7f9 ffff 	bl	8005ac8 <pbuf_chain>
 800baca:	e001      	b.n	800bad0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	895b      	ldrh	r3, [r3, #10]
 800bad4:	2b07      	cmp	r3, #7
 800bad6:	d806      	bhi.n	800bae6 <udp_sendto_if_src+0x11e>
 800bad8:	4b26      	ldr	r3, [pc, #152]	; (800bb74 <udp_sendto_if_src+0x1ac>)
 800bada:	f240 320d 	movw	r2, #781	; 0x30d
 800bade:	492c      	ldr	r1, [pc, #176]	; (800bb90 <udp_sendto_if_src+0x1c8>)
 800bae0:	4826      	ldr	r0, [pc, #152]	; (800bb7c <udp_sendto_if_src+0x1b4>)
 800bae2:	f002 fcef 	bl	800e4c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	8a5b      	ldrh	r3, [r3, #18]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f8 fc1d 	bl	8004330 <lwip_htons>
 800baf6:	4603      	mov	r3, r0
 800baf8:	461a      	mov	r2, r3
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800bafe:	887b      	ldrh	r3, [r7, #2]
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7f8 fc15 	bl	8004330 <lwip_htons>
 800bb06:	4603      	mov	r3, r0
 800bb08:	461a      	mov	r2, r3
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2200      	movs	r2, #0
 800bb12:	719a      	strb	r2, [r3, #6]
 800bb14:	2200      	movs	r2, #0
 800bb16:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	891b      	ldrh	r3, [r3, #8]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7f8 fc07 	bl	8004330 <lwip_htons>
 800bb22:	4603      	mov	r3, r0
 800bb24:	461a      	mov	r2, r3
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800bb2a:	2311      	movs	r3, #17
 800bb2c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	7adb      	ldrb	r3, [r3, #11]
 800bb32:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	7a9b      	ldrb	r3, [r3, #10]
 800bb38:	7cb9      	ldrb	r1, [r7, #18]
 800bb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb3c:	9202      	str	r2, [sp, #8]
 800bb3e:	7cfa      	ldrb	r2, [r7, #19]
 800bb40:	9201      	str	r2, [sp, #4]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	460b      	mov	r3, r1
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb4a:	69f8      	ldr	r0, [r7, #28]
 800bb4c:	f001 fc40 	bl	800d3d0 <ip4_output_if_src>
 800bb50:	4603      	mov	r3, r0
 800bb52:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d004      	beq.n	800bb66 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800bb5c:	69f8      	ldr	r0, [r7, #28]
 800bb5e:	f7f9 fe9b 	bl	8005898 <pbuf_free>
    q = NULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800bb66:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3720      	adds	r7, #32
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	0801192c 	.word	0x0801192c
 800bb78:	08011b18 	.word	0x08011b18
 800bb7c:	08011980 	.word	0x08011980
 800bb80:	08011b38 	.word	0x08011b38
 800bb84:	08011b58 	.word	0x08011b58
 800bb88:	08011b7c 	.word	0x08011b7c
 800bb8c:	08011ba0 	.word	0x08011ba0
 800bb90:	08011bc4 	.word	0x08011bc4

0800bb94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800bba8:	4b39      	ldr	r3, [pc, #228]	; (800bc90 <udp_bind+0xfc>)
 800bbaa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d109      	bne.n	800bbc6 <udp_bind+0x32>
 800bbb2:	4b38      	ldr	r3, [pc, #224]	; (800bc94 <udp_bind+0x100>)
 800bbb4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800bbb8:	4937      	ldr	r1, [pc, #220]	; (800bc98 <udp_bind+0x104>)
 800bbba:	4838      	ldr	r0, [pc, #224]	; (800bc9c <udp_bind+0x108>)
 800bbbc:	f002 fc82 	bl	800e4c4 <iprintf>
 800bbc0:	f06f 030f 	mvn.w	r3, #15
 800bbc4:	e060      	b.n	800bc88 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bbca:	4b35      	ldr	r3, [pc, #212]	; (800bca0 <udp_bind+0x10c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	e009      	b.n	800bbe6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800bbd2:	68fa      	ldr	r2, [r7, #12]
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d102      	bne.n	800bbe0 <udp_bind+0x4c>
      rebind = 1;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	74fb      	strb	r3, [r7, #19]
      break;
 800bbde:	e005      	b.n	800bbec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	617b      	str	r3, [r7, #20]
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f2      	bne.n	800bbd2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800bbec:	88fb      	ldrh	r3, [r7, #6]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d109      	bne.n	800bc06 <udp_bind+0x72>
    port = udp_new_port();
 800bbf2:	f7ff fc35 	bl	800b460 <udp_new_port>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bbfa:	88fb      	ldrh	r3, [r7, #6]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d12c      	bne.n	800bc5a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800bc00:	f06f 0307 	mvn.w	r3, #7
 800bc04:	e040      	b.n	800bc88 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bc06:	4b26      	ldr	r3, [pc, #152]	; (800bca0 <udp_bind+0x10c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	617b      	str	r3, [r7, #20]
 800bc0c:	e022      	b.n	800bc54 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d01b      	beq.n	800bc4e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	8a5b      	ldrh	r3, [r3, #18]
 800bc1a:	88fa      	ldrh	r2, [r7, #6]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d116      	bne.n	800bc4e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d00d      	beq.n	800bc48 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00a      	beq.n	800bc48 <udp_bind+0xb4>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d006      	beq.n	800bc48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bc3a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d102      	bne.n	800bc4e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800bc48:	f06f 0307 	mvn.w	r3, #7
 800bc4c:	e01c      	b.n	800bc88 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	617b      	str	r3, [r7, #20]
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1d9      	bne.n	800bc0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <udp_bind+0xd2>
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	e000      	b.n	800bc68 <udp_bind+0xd4>
 800bc66:	2300      	movs	r3, #0
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	88fa      	ldrh	r2, [r7, #6]
 800bc70:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800bc72:	7cfb      	ldrb	r3, [r7, #19]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d106      	bne.n	800bc86 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800bc78:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <udp_bind+0x10c>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800bc80:	4a07      	ldr	r2, [pc, #28]	; (800bca0 <udp_bind+0x10c>)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800bc86:	2300      	movs	r3, #0
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	08012434 	.word	0x08012434
 800bc94:	0801192c 	.word	0x0801192c
 800bc98:	08011bf4 	.word	0x08011bf4
 800bc9c:	08011980 	.word	0x08011980
 800bca0:	20008bb8 	.word	0x20008bb8

0800bca4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d109      	bne.n	800bccc <udp_connect+0x28>
 800bcb8:	4b2c      	ldr	r3, [pc, #176]	; (800bd6c <udp_connect+0xc8>)
 800bcba:	f240 4235 	movw	r2, #1077	; 0x435
 800bcbe:	492c      	ldr	r1, [pc, #176]	; (800bd70 <udp_connect+0xcc>)
 800bcc0:	482c      	ldr	r0, [pc, #176]	; (800bd74 <udp_connect+0xd0>)
 800bcc2:	f002 fbff 	bl	800e4c4 <iprintf>
 800bcc6:	f06f 030f 	mvn.w	r3, #15
 800bcca:	e04b      	b.n	800bd64 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d109      	bne.n	800bce6 <udp_connect+0x42>
 800bcd2:	4b26      	ldr	r3, [pc, #152]	; (800bd6c <udp_connect+0xc8>)
 800bcd4:	f240 4236 	movw	r2, #1078	; 0x436
 800bcd8:	4927      	ldr	r1, [pc, #156]	; (800bd78 <udp_connect+0xd4>)
 800bcda:	4826      	ldr	r0, [pc, #152]	; (800bd74 <udp_connect+0xd0>)
 800bcdc:	f002 fbf2 	bl	800e4c4 <iprintf>
 800bce0:	f06f 030f 	mvn.w	r3, #15
 800bce4:	e03e      	b.n	800bd64 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8a5b      	ldrh	r3, [r3, #18]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10f      	bne.n	800bd0e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800bcee:	68f9      	ldr	r1, [r7, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	8a5b      	ldrh	r3, [r3, #18]
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7ff ff4c 	bl	800bb94 <udp_bind>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bd00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d002      	beq.n	800bd0e <udp_connect+0x6a>
      return err;
 800bd08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd0c:	e02a      	b.n	800bd64 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <udp_connect+0x76>
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	e000      	b.n	800bd1c <udp_connect+0x78>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	88fa      	ldrh	r2, [r7, #6]
 800bd24:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	7c1b      	ldrb	r3, [r3, #16]
 800bd2a:	f043 0304 	orr.w	r3, r3, #4
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bd34:	4b11      	ldr	r3, [pc, #68]	; (800bd7c <udp_connect+0xd8>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	617b      	str	r3, [r7, #20]
 800bd3a:	e008      	b.n	800bd4e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d101      	bne.n	800bd48 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e00d      	b.n	800bd64 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	68db      	ldr	r3, [r3, #12]
 800bd4c:	617b      	str	r3, [r7, #20]
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1f3      	bne.n	800bd3c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bd54:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <udp_connect+0xd8>)
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bd5c:	4a07      	ldr	r2, [pc, #28]	; (800bd7c <udp_connect+0xd8>)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	0801192c 	.word	0x0801192c
 800bd70:	08011c0c 	.word	0x08011c0c
 800bd74:	08011980 	.word	0x08011980
 800bd78:	08011c28 	.word	0x08011c28
 800bd7c:	20008bb8 	.word	0x20008bb8

0800bd80 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d107      	bne.n	800bda2 <udp_recv+0x22>
 800bd92:	4b08      	ldr	r3, [pc, #32]	; (800bdb4 <udp_recv+0x34>)
 800bd94:	f240 428a 	movw	r2, #1162	; 0x48a
 800bd98:	4907      	ldr	r1, [pc, #28]	; (800bdb8 <udp_recv+0x38>)
 800bd9a:	4808      	ldr	r0, [pc, #32]	; (800bdbc <udp_recv+0x3c>)
 800bd9c:	f002 fb92 	bl	800e4c4 <iprintf>
 800bda0:	e005      	b.n	800bdae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	68ba      	ldr	r2, [r7, #8]
 800bda6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	61da      	str	r2, [r3, #28]
}
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	0801192c 	.word	0x0801192c
 800bdb8:	08011c60 	.word	0x08011c60
 800bdbc:	08011980 	.word	0x08011980

0800bdc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	f7f8 ff08 	bl	8004bdc <memp_malloc>
 800bdcc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d007      	beq.n	800bde4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f002 fb6b 	bl	800e4b4 <memset>
    pcb->ttl = UDP_TTL;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	22ff      	movs	r2, #255	; 0xff
 800bde2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bde4:	687b      	ldr	r3, [r7, #4]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d01e      	beq.n	800be3e <udp_netif_ip_addr_changed+0x4e>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01a      	beq.n	800be3e <udp_netif_ip_addr_changed+0x4e>
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d017      	beq.n	800be3e <udp_netif_ip_addr_changed+0x4e>
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d013      	beq.n	800be3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800be16:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <udp_netif_ip_addr_changed+0x5c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	e00c      	b.n	800be38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	429a      	cmp	r2, r3
 800be28:	d103      	bne.n	800be32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	681a      	ldr	r2, [r3, #0]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	60fb      	str	r3, [r7, #12]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1ef      	bne.n	800be1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800be3e:	bf00      	nop
 800be40:	3714      	adds	r7, #20
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	20008bb8 	.word	0x20008bb8

0800be50 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800be58:	4915      	ldr	r1, [pc, #84]	; (800beb0 <etharp_free_entry+0x60>)
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	4613      	mov	r3, r2
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	4413      	add	r3, r2
 800be62:	00db      	lsls	r3, r3, #3
 800be64:	440b      	add	r3, r1
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d013      	beq.n	800be94 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800be6c:	4910      	ldr	r1, [pc, #64]	; (800beb0 <etharp_free_entry+0x60>)
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	4613      	mov	r3, r2
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	4413      	add	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	440b      	add	r3, r1
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7f9 fd0b 	bl	8005898 <pbuf_free>
    arp_table[i].q = NULL;
 800be82:	490b      	ldr	r1, [pc, #44]	; (800beb0 <etharp_free_entry+0x60>)
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	4613      	mov	r3, r2
 800be88:	005b      	lsls	r3, r3, #1
 800be8a:	4413      	add	r3, r2
 800be8c:	00db      	lsls	r3, r3, #3
 800be8e:	440b      	add	r3, r1
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800be94:	4906      	ldr	r1, [pc, #24]	; (800beb0 <etharp_free_entry+0x60>)
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	4613      	mov	r3, r2
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	4413      	add	r3, r2
 800be9e:	00db      	lsls	r3, r3, #3
 800bea0:	440b      	add	r3, r1
 800bea2:	3314      	adds	r3, #20
 800bea4:	2200      	movs	r2, #0
 800bea6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20000174 	.word	0x20000174

0800beb4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800beba:	2300      	movs	r3, #0
 800bebc:	607b      	str	r3, [r7, #4]
 800bebe:	e096      	b.n	800bfee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bec0:	494f      	ldr	r1, [pc, #316]	; (800c000 <etharp_tmr+0x14c>)
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	4613      	mov	r3, r2
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	4413      	add	r3, r2
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	440b      	add	r3, r1
 800bece:	3314      	adds	r3, #20
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bed4:	78fb      	ldrb	r3, [r7, #3]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 8086 	beq.w	800bfe8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bedc:	4948      	ldr	r1, [pc, #288]	; (800c000 <etharp_tmr+0x14c>)
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	4413      	add	r3, r2
 800bee6:	00db      	lsls	r3, r3, #3
 800bee8:	440b      	add	r3, r1
 800beea:	3312      	adds	r3, #18
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	3301      	adds	r3, #1
 800bef0:	b298      	uxth	r0, r3
 800bef2:	4943      	ldr	r1, [pc, #268]	; (800c000 <etharp_tmr+0x14c>)
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	4613      	mov	r3, r2
 800bef8:	005b      	lsls	r3, r3, #1
 800befa:	4413      	add	r3, r2
 800befc:	00db      	lsls	r3, r3, #3
 800befe:	440b      	add	r3, r1
 800bf00:	3312      	adds	r3, #18
 800bf02:	4602      	mov	r2, r0
 800bf04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bf06:	493e      	ldr	r1, [pc, #248]	; (800c000 <etharp_tmr+0x14c>)
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4413      	add	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	440b      	add	r3, r1
 800bf14:	3312      	adds	r3, #18
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bf1c:	d215      	bcs.n	800bf4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bf1e:	4938      	ldr	r1, [pc, #224]	; (800c000 <etharp_tmr+0x14c>)
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	4613      	mov	r3, r2
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	4413      	add	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3314      	adds	r3, #20
 800bf2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d10e      	bne.n	800bf52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bf34:	4932      	ldr	r1, [pc, #200]	; (800c000 <etharp_tmr+0x14c>)
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	440b      	add	r3, r1
 800bf42:	3312      	adds	r3, #18
 800bf44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bf46:	2b04      	cmp	r3, #4
 800bf48:	d903      	bls.n	800bf52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff ff80 	bl	800be50 <etharp_free_entry>
 800bf50:	e04a      	b.n	800bfe8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bf52:	492b      	ldr	r1, [pc, #172]	; (800c000 <etharp_tmr+0x14c>)
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	4613      	mov	r3, r2
 800bf58:	005b      	lsls	r3, r3, #1
 800bf5a:	4413      	add	r3, r2
 800bf5c:	00db      	lsls	r3, r3, #3
 800bf5e:	440b      	add	r3, r1
 800bf60:	3314      	adds	r3, #20
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	2b03      	cmp	r3, #3
 800bf66:	d10a      	bne.n	800bf7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bf68:	4925      	ldr	r1, [pc, #148]	; (800c000 <etharp_tmr+0x14c>)
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	4413      	add	r3, r2
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	440b      	add	r3, r1
 800bf76:	3314      	adds	r3, #20
 800bf78:	2204      	movs	r2, #4
 800bf7a:	701a      	strb	r2, [r3, #0]
 800bf7c:	e034      	b.n	800bfe8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bf7e:	4920      	ldr	r1, [pc, #128]	; (800c000 <etharp_tmr+0x14c>)
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	4613      	mov	r3, r2
 800bf84:	005b      	lsls	r3, r3, #1
 800bf86:	4413      	add	r3, r2
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	440b      	add	r3, r1
 800bf8c:	3314      	adds	r3, #20
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	2b04      	cmp	r3, #4
 800bf92:	d10a      	bne.n	800bfaa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bf94:	491a      	ldr	r1, [pc, #104]	; (800c000 <etharp_tmr+0x14c>)
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	4413      	add	r3, r2
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	440b      	add	r3, r1
 800bfa2:	3314      	adds	r3, #20
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	701a      	strb	r2, [r3, #0]
 800bfa8:	e01e      	b.n	800bfe8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bfaa:	4915      	ldr	r1, [pc, #84]	; (800c000 <etharp_tmr+0x14c>)
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4413      	add	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	440b      	add	r3, r1
 800bfb8:	3314      	adds	r3, #20
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d113      	bne.n	800bfe8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bfc0:	490f      	ldr	r1, [pc, #60]	; (800c000 <etharp_tmr+0x14c>)
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	005b      	lsls	r3, r3, #1
 800bfc8:	4413      	add	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	440b      	add	r3, r1
 800bfce:	3308      	adds	r3, #8
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	4413      	add	r3, r2
 800bfda:	00db      	lsls	r3, r3, #3
 800bfdc:	4a08      	ldr	r2, [pc, #32]	; (800c000 <etharp_tmr+0x14c>)
 800bfde:	4413      	add	r3, r2
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	f000 fe6e 	bl	800ccc4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	3301      	adds	r3, #1
 800bfec:	607b      	str	r3, [r7, #4]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b09      	cmp	r3, #9
 800bff2:	f77f af65 	ble.w	800bec0 <etharp_tmr+0xc>
      }
    }
  }
}
 800bff6:	bf00      	nop
 800bff8:	bf00      	nop
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	20000174 	.word	0x20000174

0800c004 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	; 0x28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	460b      	mov	r3, r1
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c012:	230a      	movs	r3, #10
 800c014:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c016:	230a      	movs	r3, #10
 800c018:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c01a:	230a      	movs	r3, #10
 800c01c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c022:	230a      	movs	r3, #10
 800c024:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	83bb      	strh	r3, [r7, #28]
 800c02a:	2300      	movs	r3, #0
 800c02c:	837b      	strh	r3, [r7, #26]
 800c02e:	2300      	movs	r3, #0
 800c030:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c032:	2300      	movs	r3, #0
 800c034:	843b      	strh	r3, [r7, #32]
 800c036:	e0ae      	b.n	800c196 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c038:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c03c:	49a6      	ldr	r1, [pc, #664]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c03e:	4613      	mov	r3, r2
 800c040:	005b      	lsls	r3, r3, #1
 800c042:	4413      	add	r3, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	440b      	add	r3, r1
 800c048:	3314      	adds	r3, #20
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c04e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c052:	2b0a      	cmp	r3, #10
 800c054:	d105      	bne.n	800c062 <etharp_find_entry+0x5e>
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d102      	bne.n	800c062 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c05c:	8c3b      	ldrh	r3, [r7, #32]
 800c05e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c060:	e095      	b.n	800c18e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c062:	7dfb      	ldrb	r3, [r7, #23]
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 8092 	beq.w	800c18e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d009      	beq.n	800c084 <etharp_find_entry+0x80>
 800c070:	7dfb      	ldrb	r3, [r7, #23]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d806      	bhi.n	800c084 <etharp_find_entry+0x80>
 800c076:	4b99      	ldr	r3, [pc, #612]	; (800c2dc <etharp_find_entry+0x2d8>)
 800c078:	f240 1223 	movw	r2, #291	; 0x123
 800c07c:	4998      	ldr	r1, [pc, #608]	; (800c2e0 <etharp_find_entry+0x2dc>)
 800c07e:	4899      	ldr	r0, [pc, #612]	; (800c2e4 <etharp_find_entry+0x2e0>)
 800c080:	f002 fa20 	bl	800e4c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d020      	beq.n	800c0cc <etharp_find_entry+0xc8>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6819      	ldr	r1, [r3, #0]
 800c08e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c092:	4891      	ldr	r0, [pc, #580]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	4403      	add	r3, r0
 800c09e:	3304      	adds	r3, #4
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4299      	cmp	r1, r3
 800c0a4:	d112      	bne.n	800c0cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00c      	beq.n	800c0c6 <etharp_find_entry+0xc2>
 800c0ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0b0:	4989      	ldr	r1, [pc, #548]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	4413      	add	r3, r2
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3308      	adds	r3, #8
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d102      	bne.n	800c0cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c0c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c0ca:	e100      	b.n	800c2ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d140      	bne.n	800c154 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c0d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0d6:	4980      	ldr	r1, [pc, #512]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c0d8:	4613      	mov	r3, r2
 800c0da:	005b      	lsls	r3, r3, #1
 800c0dc:	4413      	add	r3, r2
 800c0de:	00db      	lsls	r3, r3, #3
 800c0e0:	440b      	add	r3, r1
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d01a      	beq.n	800c11e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c0e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0ec:	497a      	ldr	r1, [pc, #488]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	4413      	add	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	440b      	add	r3, r1
 800c0f8:	3312      	adds	r3, #18
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	8bba      	ldrh	r2, [r7, #28]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d845      	bhi.n	800c18e <etharp_find_entry+0x18a>
            old_queue = i;
 800c102:	8c3b      	ldrh	r3, [r7, #32]
 800c104:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c106:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c10a:	4973      	ldr	r1, [pc, #460]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c10c:	4613      	mov	r3, r2
 800c10e:	005b      	lsls	r3, r3, #1
 800c110:	4413      	add	r3, r2
 800c112:	00db      	lsls	r3, r3, #3
 800c114:	440b      	add	r3, r1
 800c116:	3312      	adds	r3, #18
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	83bb      	strh	r3, [r7, #28]
 800c11c:	e037      	b.n	800c18e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c11e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c122:	496d      	ldr	r1, [pc, #436]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c124:	4613      	mov	r3, r2
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	4413      	add	r3, r2
 800c12a:	00db      	lsls	r3, r3, #3
 800c12c:	440b      	add	r3, r1
 800c12e:	3312      	adds	r3, #18
 800c130:	881b      	ldrh	r3, [r3, #0]
 800c132:	8b7a      	ldrh	r2, [r7, #26]
 800c134:	429a      	cmp	r2, r3
 800c136:	d82a      	bhi.n	800c18e <etharp_find_entry+0x18a>
            old_pending = i;
 800c138:	8c3b      	ldrh	r3, [r7, #32]
 800c13a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c13c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c140:	4965      	ldr	r1, [pc, #404]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c142:	4613      	mov	r3, r2
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	4413      	add	r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	440b      	add	r3, r1
 800c14c:	3312      	adds	r3, #18
 800c14e:	881b      	ldrh	r3, [r3, #0]
 800c150:	837b      	strh	r3, [r7, #26]
 800c152:	e01c      	b.n	800c18e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c154:	7dfb      	ldrb	r3, [r7, #23]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d919      	bls.n	800c18e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c15a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c15e:	495e      	ldr	r1, [pc, #376]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c160:	4613      	mov	r3, r2
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	4413      	add	r3, r2
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	440b      	add	r3, r1
 800c16a:	3312      	adds	r3, #18
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	8b3a      	ldrh	r2, [r7, #24]
 800c170:	429a      	cmp	r2, r3
 800c172:	d80c      	bhi.n	800c18e <etharp_find_entry+0x18a>
            old_stable = i;
 800c174:	8c3b      	ldrh	r3, [r7, #32]
 800c176:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c178:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c17c:	4956      	ldr	r1, [pc, #344]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c17e:	4613      	mov	r3, r2
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	4413      	add	r3, r2
 800c184:	00db      	lsls	r3, r3, #3
 800c186:	440b      	add	r3, r1
 800c188:	3312      	adds	r3, #18
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c18e:	8c3b      	ldrh	r3, [r7, #32]
 800c190:	3301      	adds	r3, #1
 800c192:	b29b      	uxth	r3, r3
 800c194:	843b      	strh	r3, [r7, #32]
 800c196:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c19a:	2b09      	cmp	r3, #9
 800c19c:	f77f af4c 	ble.w	800c038 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c1a0:	7afb      	ldrb	r3, [r7, #11]
 800c1a2:	f003 0302 	and.w	r3, r3, #2
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d108      	bne.n	800c1bc <etharp_find_entry+0x1b8>
 800c1aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c1ae:	2b0a      	cmp	r3, #10
 800c1b0:	d107      	bne.n	800c1c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c1b2:	7afb      	ldrb	r3, [r7, #11]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d102      	bne.n	800c1c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c0:	e085      	b.n	800c2ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c1c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c1c6:	2b09      	cmp	r3, #9
 800c1c8:	dc02      	bgt.n	800c1d0 <etharp_find_entry+0x1cc>
    i = empty;
 800c1ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1cc:	843b      	strh	r3, [r7, #32]
 800c1ce:	e039      	b.n	800c244 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c1d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c1d4:	2b09      	cmp	r3, #9
 800c1d6:	dc14      	bgt.n	800c202 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c1d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c1da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c1dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1e0:	493d      	ldr	r1, [pc, #244]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	4413      	add	r3, r2
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	440b      	add	r3, r1
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d018      	beq.n	800c224 <etharp_find_entry+0x220>
 800c1f2:	4b3a      	ldr	r3, [pc, #232]	; (800c2dc <etharp_find_entry+0x2d8>)
 800c1f4:	f240 126d 	movw	r2, #365	; 0x16d
 800c1f8:	493b      	ldr	r1, [pc, #236]	; (800c2e8 <etharp_find_entry+0x2e4>)
 800c1fa:	483a      	ldr	r0, [pc, #232]	; (800c2e4 <etharp_find_entry+0x2e0>)
 800c1fc:	f002 f962 	bl	800e4c4 <iprintf>
 800c200:	e010      	b.n	800c224 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c202:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c206:	2b09      	cmp	r3, #9
 800c208:	dc02      	bgt.n	800c210 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c20a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c20c:	843b      	strh	r3, [r7, #32]
 800c20e:	e009      	b.n	800c224 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c210:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c214:	2b09      	cmp	r3, #9
 800c216:	dc02      	bgt.n	800c21e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c218:	8bfb      	ldrh	r3, [r7, #30]
 800c21a:	843b      	strh	r3, [r7, #32]
 800c21c:	e002      	b.n	800c224 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c21e:	f04f 33ff 	mov.w	r3, #4294967295
 800c222:	e054      	b.n	800c2ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c224:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c228:	2b09      	cmp	r3, #9
 800c22a:	dd06      	ble.n	800c23a <etharp_find_entry+0x236>
 800c22c:	4b2b      	ldr	r3, [pc, #172]	; (800c2dc <etharp_find_entry+0x2d8>)
 800c22e:	f240 127f 	movw	r2, #383	; 0x17f
 800c232:	492e      	ldr	r1, [pc, #184]	; (800c2ec <etharp_find_entry+0x2e8>)
 800c234:	482b      	ldr	r0, [pc, #172]	; (800c2e4 <etharp_find_entry+0x2e0>)
 800c236:	f002 f945 	bl	800e4c4 <iprintf>
    etharp_free_entry(i);
 800c23a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c23e:	4618      	mov	r0, r3
 800c240:	f7ff fe06 	bl	800be50 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c244:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c248:	2b09      	cmp	r3, #9
 800c24a:	dd06      	ble.n	800c25a <etharp_find_entry+0x256>
 800c24c:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <etharp_find_entry+0x2d8>)
 800c24e:	f240 1283 	movw	r2, #387	; 0x183
 800c252:	4926      	ldr	r1, [pc, #152]	; (800c2ec <etharp_find_entry+0x2e8>)
 800c254:	4823      	ldr	r0, [pc, #140]	; (800c2e4 <etharp_find_entry+0x2e0>)
 800c256:	f002 f935 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c25a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c25e:	491e      	ldr	r1, [pc, #120]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c260:	4613      	mov	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	00db      	lsls	r3, r3, #3
 800c268:	440b      	add	r3, r1
 800c26a:	3314      	adds	r3, #20
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d006      	beq.n	800c280 <etharp_find_entry+0x27c>
 800c272:	4b1a      	ldr	r3, [pc, #104]	; (800c2dc <etharp_find_entry+0x2d8>)
 800c274:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c278:	491d      	ldr	r1, [pc, #116]	; (800c2f0 <etharp_find_entry+0x2ec>)
 800c27a:	481a      	ldr	r0, [pc, #104]	; (800c2e4 <etharp_find_entry+0x2e0>)
 800c27c:	f002 f922 	bl	800e4c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00b      	beq.n	800c29e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c286:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6819      	ldr	r1, [r3, #0]
 800c28e:	4812      	ldr	r0, [pc, #72]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c290:	4613      	mov	r3, r2
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	4413      	add	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	4403      	add	r3, r0
 800c29a:	3304      	adds	r3, #4
 800c29c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c29e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2a2:	490d      	ldr	r1, [pc, #52]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	3312      	adds	r3, #18
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c2b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2b8:	4907      	ldr	r1, [pc, #28]	; (800c2d8 <etharp_find_entry+0x2d4>)
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	4413      	add	r3, r2
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	440b      	add	r3, r1
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c2ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3728      	adds	r7, #40	; 0x28
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20000174 	.word	0x20000174
 800c2dc:	08011c90 	.word	0x08011c90
 800c2e0:	08011cc8 	.word	0x08011cc8
 800c2e4:	08011d08 	.word	0x08011d08
 800c2e8:	08011d30 	.word	0x08011d30
 800c2ec:	08011d48 	.word	0x08011d48
 800c2f0:	08011d5c 	.word	0x08011d5c

0800c2f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b088      	sub	sp, #32
 800c2f8:	af02      	add	r7, sp, #8
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c308:	2b06      	cmp	r3, #6
 800c30a:	d006      	beq.n	800c31a <etharp_update_arp_entry+0x26>
 800c30c:	4b48      	ldr	r3, [pc, #288]	; (800c430 <etharp_update_arp_entry+0x13c>)
 800c30e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c312:	4948      	ldr	r1, [pc, #288]	; (800c434 <etharp_update_arp_entry+0x140>)
 800c314:	4848      	ldr	r0, [pc, #288]	; (800c438 <etharp_update_arp_entry+0x144>)
 800c316:	f002 f8d5 	bl	800e4c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d012      	beq.n	800c346 <etharp_update_arp_entry+0x52>
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00e      	beq.n	800c346 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68f9      	ldr	r1, [r7, #12]
 800c32e:	4618      	mov	r0, r3
 800c330:	f001 f8fc 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800c334:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c336:	2b00      	cmp	r3, #0
 800c338:	d105      	bne.n	800c346 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c342:	2be0      	cmp	r3, #224	; 0xe0
 800c344:	d102      	bne.n	800c34c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c346:	f06f 030f 	mvn.w	r3, #15
 800c34a:	e06c      	b.n	800c426 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c34c:	78fb      	ldrb	r3, [r7, #3]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	4619      	mov	r1, r3
 800c352:	68b8      	ldr	r0, [r7, #8]
 800c354:	f7ff fe56 	bl	800c004 <etharp_find_entry>
 800c358:	4603      	mov	r3, r0
 800c35a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c35c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c360:	2b00      	cmp	r3, #0
 800c362:	da02      	bge.n	800c36a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c364:	8afb      	ldrh	r3, [r7, #22]
 800c366:	b25b      	sxtb	r3, r3
 800c368:	e05d      	b.n	800c426 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c36a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c36e:	4933      	ldr	r1, [pc, #204]	; (800c43c <etharp_update_arp_entry+0x148>)
 800c370:	4613      	mov	r3, r2
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	4413      	add	r3, r2
 800c376:	00db      	lsls	r3, r3, #3
 800c378:	440b      	add	r3, r1
 800c37a:	3314      	adds	r3, #20
 800c37c:	2202      	movs	r2, #2
 800c37e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c380:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c384:	492d      	ldr	r1, [pc, #180]	; (800c43c <etharp_update_arp_entry+0x148>)
 800c386:	4613      	mov	r3, r2
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	4413      	add	r3, r2
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	440b      	add	r3, r1
 800c390:	3308      	adds	r3, #8
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c396:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c39a:	4613      	mov	r3, r2
 800c39c:	005b      	lsls	r3, r3, #1
 800c39e:	4413      	add	r3, r2
 800c3a0:	00db      	lsls	r3, r3, #3
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	4a25      	ldr	r2, [pc, #148]	; (800c43c <etharp_update_arp_entry+0x148>)
 800c3a6:	4413      	add	r3, r2
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	2206      	movs	r2, #6
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f002 f858 	bl	800e464 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c3b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c3b8:	4920      	ldr	r1, [pc, #128]	; (800c43c <etharp_update_arp_entry+0x148>)
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	4413      	add	r3, r2
 800c3c0:	00db      	lsls	r3, r3, #3
 800c3c2:	440b      	add	r3, r1
 800c3c4:	3312      	adds	r3, #18
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c3ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c3ce:	491b      	ldr	r1, [pc, #108]	; (800c43c <etharp_update_arp_entry+0x148>)
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	4413      	add	r3, r2
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	440b      	add	r3, r1
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d021      	beq.n	800c424 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c3e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c3e4:	4915      	ldr	r1, [pc, #84]	; (800c43c <etharp_update_arp_entry+0x148>)
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	4413      	add	r3, r2
 800c3ec:	00db      	lsls	r3, r3, #3
 800c3ee:	440b      	add	r3, r1
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c3f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c3f8:	4910      	ldr	r1, [pc, #64]	; (800c43c <etharp_update_arp_entry+0x148>)
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	4413      	add	r3, r2
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	440b      	add	r3, r1
 800c404:	2200      	movs	r2, #0
 800c406:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800c40e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6939      	ldr	r1, [r7, #16]
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f001 ff8f 	bl	800e33c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c41e:	6938      	ldr	r0, [r7, #16]
 800c420:	f7f9 fa3a 	bl	8005898 <pbuf_free>
  }
  return ERR_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	08011c90 	.word	0x08011c90
 800c434:	08011d88 	.word	0x08011d88
 800c438:	08011d08 	.word	0x08011d08
 800c43c:	20000174 	.word	0x20000174

0800c440 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c448:	2300      	movs	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	e01e      	b.n	800c48c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c44e:	4913      	ldr	r1, [pc, #76]	; (800c49c <etharp_cleanup_netif+0x5c>)
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4613      	mov	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	4413      	add	r3, r2
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	440b      	add	r3, r1
 800c45c:	3314      	adds	r3, #20
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c462:	7afb      	ldrb	r3, [r7, #11]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00e      	beq.n	800c486 <etharp_cleanup_netif+0x46>
 800c468:	490c      	ldr	r1, [pc, #48]	; (800c49c <etharp_cleanup_netif+0x5c>)
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	4613      	mov	r3, r2
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	4413      	add	r3, r2
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	440b      	add	r3, r1
 800c476:	3308      	adds	r3, #8
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d102      	bne.n	800c486 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff fce5 	bl	800be50 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3301      	adds	r3, #1
 800c48a:	60fb      	str	r3, [r7, #12]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b09      	cmp	r3, #9
 800c490:	dddd      	ble.n	800c44e <etharp_cleanup_netif+0xe>
    }
  }
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	20000174 	.word	0x20000174

0800c4a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c4a0:	b5b0      	push	{r4, r5, r7, lr}
 800c4a2:	b08a      	sub	sp, #40	; 0x28
 800c4a4:	af04      	add	r7, sp, #16
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d107      	bne.n	800c4c0 <etharp_input+0x20>
 800c4b0:	4b3d      	ldr	r3, [pc, #244]	; (800c5a8 <etharp_input+0x108>)
 800c4b2:	f240 228a 	movw	r2, #650	; 0x28a
 800c4b6:	493d      	ldr	r1, [pc, #244]	; (800c5ac <etharp_input+0x10c>)
 800c4b8:	483d      	ldr	r0, [pc, #244]	; (800c5b0 <etharp_input+0x110>)
 800c4ba:	f002 f803 	bl	800e4c4 <iprintf>
 800c4be:	e06f      	b.n	800c5a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d0:	d10c      	bne.n	800c4ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c4d6:	2b06      	cmp	r3, #6
 800c4d8:	d108      	bne.n	800c4ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c4de:	2b04      	cmp	r3, #4
 800c4e0:	d104      	bne.n	800c4ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	885b      	ldrh	r3, [r3, #2]
 800c4e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	d003      	beq.n	800c4f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7f9 f9d3 	bl	8005898 <pbuf_free>
    return;
 800c4f2:	e055      	b.n	800c5a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	330e      	adds	r3, #14
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	3318      	adds	r3, #24
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	3304      	adds	r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d102      	bne.n	800c514 <etharp_input+0x74>
    for_us = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]
 800c512:	e009      	b.n	800c528 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	3304      	adds	r3, #4
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	bf0c      	ite	eq
 800c520:	2301      	moveq	r3, #1
 800c522:	2300      	movne	r3, #0
 800c524:	b2db      	uxtb	r3, r3
 800c526:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	f103 0208 	add.w	r2, r3, #8
 800c52e:	7dfb      	ldrb	r3, [r7, #23]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <etharp_input+0x98>
 800c534:	2301      	movs	r3, #1
 800c536:	e000      	b.n	800c53a <etharp_input+0x9a>
 800c538:	2302      	movs	r3, #2
 800c53a:	f107 010c 	add.w	r1, r7, #12
 800c53e:	6838      	ldr	r0, [r7, #0]
 800c540:	f7ff fed8 	bl	800c2f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	88db      	ldrh	r3, [r3, #6]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c54e:	d003      	beq.n	800c558 <etharp_input+0xb8>
 800c550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c554:	d01e      	beq.n	800c594 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c556:	e020      	b.n	800c59a <etharp_input+0xfa>
      if (for_us) {
 800c558:	7dfb      	ldrb	r3, [r7, #23]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d01c      	beq.n	800c598 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c578:	2102      	movs	r1, #2
 800c57a:	9103      	str	r1, [sp, #12]
 800c57c:	f107 010c 	add.w	r1, r7, #12
 800c580:	9102      	str	r1, [sp, #8]
 800c582:	9201      	str	r2, [sp, #4]
 800c584:	9300      	str	r3, [sp, #0]
 800c586:	462b      	mov	r3, r5
 800c588:	4622      	mov	r2, r4
 800c58a:	4601      	mov	r1, r0
 800c58c:	6838      	ldr	r0, [r7, #0]
 800c58e:	f000 faeb 	bl	800cb68 <etharp_raw>
      break;
 800c592:	e001      	b.n	800c598 <etharp_input+0xf8>
      break;
 800c594:	bf00      	nop
 800c596:	e000      	b.n	800c59a <etharp_input+0xfa>
      break;
 800c598:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7f9 f97c 	bl	8005898 <pbuf_free>
}
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	08011c90 	.word	0x08011c90
 800c5ac:	08011de0 	.word	0x08011de0
 800c5b0:	08011d08 	.word	0x08011d08

0800c5b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c5c2:	79fa      	ldrb	r2, [r7, #7]
 800c5c4:	4944      	ldr	r1, [pc, #272]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	4413      	add	r3, r2
 800c5cc:	00db      	lsls	r3, r3, #3
 800c5ce:	440b      	add	r3, r1
 800c5d0:	3314      	adds	r3, #20
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d806      	bhi.n	800c5e6 <etharp_output_to_arp_index+0x32>
 800c5d8:	4b40      	ldr	r3, [pc, #256]	; (800c6dc <etharp_output_to_arp_index+0x128>)
 800c5da:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c5de:	4940      	ldr	r1, [pc, #256]	; (800c6e0 <etharp_output_to_arp_index+0x12c>)
 800c5e0:	4840      	ldr	r0, [pc, #256]	; (800c6e4 <etharp_output_to_arp_index+0x130>)
 800c5e2:	f001 ff6f 	bl	800e4c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c5e6:	79fa      	ldrb	r2, [r7, #7]
 800c5e8:	493b      	ldr	r1, [pc, #236]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	4413      	add	r3, r2
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	440b      	add	r3, r1
 800c5f4:	3314      	adds	r3, #20
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d153      	bne.n	800c6a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c5fc:	79fa      	ldrb	r2, [r7, #7]
 800c5fe:	4936      	ldr	r1, [pc, #216]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c600:	4613      	mov	r3, r2
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	4413      	add	r3, r2
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	440b      	add	r3, r1
 800c60a:	3312      	adds	r3, #18
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c612:	d919      	bls.n	800c648 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c614:	79fa      	ldrb	r2, [r7, #7]
 800c616:	4613      	mov	r3, r2
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	4413      	add	r3, r2
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	4a2e      	ldr	r2, [pc, #184]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c620:	4413      	add	r3, r2
 800c622:	3304      	adds	r3, #4
 800c624:	4619      	mov	r1, r3
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f000 fb4c 	bl	800ccc4 <etharp_request>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d138      	bne.n	800c6a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c632:	79fa      	ldrb	r2, [r7, #7]
 800c634:	4928      	ldr	r1, [pc, #160]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c636:	4613      	mov	r3, r2
 800c638:	005b      	lsls	r3, r3, #1
 800c63a:	4413      	add	r3, r2
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	440b      	add	r3, r1
 800c640:	3314      	adds	r3, #20
 800c642:	2203      	movs	r2, #3
 800c644:	701a      	strb	r2, [r3, #0]
 800c646:	e02d      	b.n	800c6a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c648:	79fa      	ldrb	r2, [r7, #7]
 800c64a:	4923      	ldr	r1, [pc, #140]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c64c:	4613      	mov	r3, r2
 800c64e:	005b      	lsls	r3, r3, #1
 800c650:	4413      	add	r3, r2
 800c652:	00db      	lsls	r3, r3, #3
 800c654:	440b      	add	r3, r1
 800c656:	3312      	adds	r3, #18
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c65e:	d321      	bcc.n	800c6a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c660:	79fa      	ldrb	r2, [r7, #7]
 800c662:	4613      	mov	r3, r2
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	4413      	add	r3, r2
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	4a1b      	ldr	r2, [pc, #108]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c66c:	4413      	add	r3, r2
 800c66e:	1d19      	adds	r1, r3, #4
 800c670:	79fa      	ldrb	r2, [r7, #7]
 800c672:	4613      	mov	r3, r2
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	4413      	add	r3, r2
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	3308      	adds	r3, #8
 800c67c:	4a16      	ldr	r2, [pc, #88]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c67e:	4413      	add	r3, r2
 800c680:	3304      	adds	r3, #4
 800c682:	461a      	mov	r2, r3
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f000 fafb 	bl	800cc80 <etharp_request_dst>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d109      	bne.n	800c6a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c690:	79fa      	ldrb	r2, [r7, #7]
 800c692:	4911      	ldr	r1, [pc, #68]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c694:	4613      	mov	r3, r2
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	4413      	add	r3, r2
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	440b      	add	r3, r1
 800c69e:	3314      	adds	r3, #20
 800c6a0:	2203      	movs	r2, #3
 800c6a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800c6aa:	79fa      	ldrb	r2, [r7, #7]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	005b      	lsls	r3, r3, #1
 800c6b0:	4413      	add	r3, r2
 800c6b2:	00db      	lsls	r3, r3, #3
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	4a08      	ldr	r2, [pc, #32]	; (800c6d8 <etharp_output_to_arp_index+0x124>)
 800c6b8:	4413      	add	r3, r2
 800c6ba:	3304      	adds	r3, #4
 800c6bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6c0:	9200      	str	r2, [sp, #0]
 800c6c2:	460a      	mov	r2, r1
 800c6c4:	68b9      	ldr	r1, [r7, #8]
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f001 fe38 	bl	800e33c <ethernet_output>
 800c6cc:	4603      	mov	r3, r0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000174 	.word	0x20000174
 800c6dc:	08011c90 	.word	0x08011c90
 800c6e0:	08011e00 	.word	0x08011e00
 800c6e4:	08011d08 	.word	0x08011d08

0800c6e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08a      	sub	sp, #40	; 0x28
 800c6ec:	af02      	add	r7, sp, #8
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <etharp_output+0x24>
 800c6fe:	4b73      	ldr	r3, [pc, #460]	; (800c8cc <etharp_output+0x1e4>)
 800c700:	f240 321e 	movw	r2, #798	; 0x31e
 800c704:	4972      	ldr	r1, [pc, #456]	; (800c8d0 <etharp_output+0x1e8>)
 800c706:	4873      	ldr	r0, [pc, #460]	; (800c8d4 <etharp_output+0x1ec>)
 800c708:	f001 fedc 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d106      	bne.n	800c720 <etharp_output+0x38>
 800c712:	4b6e      	ldr	r3, [pc, #440]	; (800c8cc <etharp_output+0x1e4>)
 800c714:	f240 321f 	movw	r2, #799	; 0x31f
 800c718:	496f      	ldr	r1, [pc, #444]	; (800c8d8 <etharp_output+0x1f0>)
 800c71a:	486e      	ldr	r0, [pc, #440]	; (800c8d4 <etharp_output+0x1ec>)
 800c71c:	f001 fed2 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <etharp_output+0x4c>
 800c726:	4b69      	ldr	r3, [pc, #420]	; (800c8cc <etharp_output+0x1e4>)
 800c728:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c72c:	496b      	ldr	r1, [pc, #428]	; (800c8dc <etharp_output+0x1f4>)
 800c72e:	4869      	ldr	r0, [pc, #420]	; (800c8d4 <etharp_output+0x1ec>)
 800c730:	f001 fec8 	bl	800e4c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68f9      	ldr	r1, [r7, #12]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fef6 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c746:	4b66      	ldr	r3, [pc, #408]	; (800c8e0 <etharp_output+0x1f8>)
 800c748:	61fb      	str	r3, [r7, #28]
 800c74a:	e0af      	b.n	800c8ac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c754:	2be0      	cmp	r3, #224	; 0xe0
 800c756:	d118      	bne.n	800c78a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c758:	2301      	movs	r3, #1
 800c75a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c75c:	2300      	movs	r3, #0
 800c75e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c760:	235e      	movs	r3, #94	; 0x5e
 800c762:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	3301      	adds	r3, #1
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3302      	adds	r3, #2
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	3303      	adds	r3, #3
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c782:	f107 0310 	add.w	r3, r7, #16
 800c786:	61fb      	str	r3, [r7, #28]
 800c788:	e090      	b.n	800c8ac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3304      	adds	r3, #4
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	405a      	eors	r2, r3
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3308      	adds	r3, #8
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4013      	ands	r3, r2
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d012      	beq.n	800c7c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c7a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	330c      	adds	r3, #12
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	330c      	adds	r3, #12
 800c7be:	61bb      	str	r3, [r7, #24]
 800c7c0:	e002      	b.n	800c7c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c7c2:	f06f 0303 	mvn.w	r3, #3
 800c7c6:	e07d      	b.n	800c8c4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c7c8:	4b46      	ldr	r3, [pc, #280]	; (800c8e4 <etharp_output+0x1fc>)
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	4a46      	ldr	r2, [pc, #280]	; (800c8e8 <etharp_output+0x200>)
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	440b      	add	r3, r1
 800c7d6:	00db      	lsls	r3, r3, #3
 800c7d8:	4413      	add	r3, r2
 800c7da:	3314      	adds	r3, #20
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d925      	bls.n	800c82e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c7e2:	4b40      	ldr	r3, [pc, #256]	; (800c8e4 <etharp_output+0x1fc>)
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4a3f      	ldr	r2, [pc, #252]	; (800c8e8 <etharp_output+0x200>)
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	440b      	add	r3, r1
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	4413      	add	r3, r2
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d117      	bne.n	800c82e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	4b38      	ldr	r3, [pc, #224]	; (800c8e4 <etharp_output+0x1fc>)
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	4618      	mov	r0, r3
 800c808:	4937      	ldr	r1, [pc, #220]	; (800c8e8 <etharp_output+0x200>)
 800c80a:	4603      	mov	r3, r0
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	4403      	add	r3, r0
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	440b      	add	r3, r1
 800c814:	3304      	adds	r3, #4
 800c816:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c818:	429a      	cmp	r2, r3
 800c81a:	d108      	bne.n	800c82e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c81c:	4b31      	ldr	r3, [pc, #196]	; (800c8e4 <etharp_output+0x1fc>)
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	461a      	mov	r2, r3
 800c822:	68b9      	ldr	r1, [r7, #8]
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f7ff fec5 	bl	800c5b4 <etharp_output_to_arp_index>
 800c82a:	4603      	mov	r3, r0
 800c82c:	e04a      	b.n	800c8c4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c82e:	2300      	movs	r3, #0
 800c830:	75fb      	strb	r3, [r7, #23]
 800c832:	e031      	b.n	800c898 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c834:	7dfa      	ldrb	r2, [r7, #23]
 800c836:	492c      	ldr	r1, [pc, #176]	; (800c8e8 <etharp_output+0x200>)
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	440b      	add	r3, r1
 800c842:	3314      	adds	r3, #20
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d923      	bls.n	800c892 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c84a:	7dfa      	ldrb	r2, [r7, #23]
 800c84c:	4926      	ldr	r1, [pc, #152]	; (800c8e8 <etharp_output+0x200>)
 800c84e:	4613      	mov	r3, r2
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	4413      	add	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	440b      	add	r3, r1
 800c858:	3308      	adds	r3, #8
 800c85a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d117      	bne.n	800c892 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	6819      	ldr	r1, [r3, #0]
 800c866:	7dfa      	ldrb	r2, [r7, #23]
 800c868:	481f      	ldr	r0, [pc, #124]	; (800c8e8 <etharp_output+0x200>)
 800c86a:	4613      	mov	r3, r2
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	4413      	add	r3, r2
 800c870:	00db      	lsls	r3, r3, #3
 800c872:	4403      	add	r3, r0
 800c874:	3304      	adds	r3, #4
 800c876:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c878:	4299      	cmp	r1, r3
 800c87a:	d10a      	bne.n	800c892 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c87c:	4a19      	ldr	r2, [pc, #100]	; (800c8e4 <etharp_output+0x1fc>)
 800c87e:	7dfb      	ldrb	r3, [r7, #23]
 800c880:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	461a      	mov	r2, r3
 800c886:	68b9      	ldr	r1, [r7, #8]
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7ff fe93 	bl	800c5b4 <etharp_output_to_arp_index>
 800c88e:	4603      	mov	r3, r0
 800c890:	e018      	b.n	800c8c4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	3301      	adds	r3, #1
 800c896:	75fb      	strb	r3, [r7, #23]
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	2b09      	cmp	r3, #9
 800c89c:	d9ca      	bls.n	800c834 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	69b9      	ldr	r1, [r7, #24]
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f000 f822 	bl	800c8ec <etharp_query>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	e00b      	b.n	800c8c4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800c8b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f001 fd3d 	bl	800e33c <ethernet_output>
 800c8c2:	4603      	mov	r3, r0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3720      	adds	r7, #32
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	08011c90 	.word	0x08011c90
 800c8d0:	08011de0 	.word	0x08011de0
 800c8d4:	08011d08 	.word	0x08011d08
 800c8d8:	08011e30 	.word	0x08011e30
 800c8dc:	08011dd0 	.word	0x08011dd0
 800c8e0:	08012438 	.word	0x08012438
 800c8e4:	20000264 	.word	0x20000264
 800c8e8:	20000174 	.word	0x20000174

0800c8ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08c      	sub	sp, #48	; 0x30
 800c8f0:	af02      	add	r7, sp, #8
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	332a      	adds	r3, #42	; 0x2a
 800c8fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c8fe:	23ff      	movs	r3, #255	; 0xff
 800c900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	68f9      	ldr	r1, [r7, #12]
 800c90e:	4618      	mov	r0, r3
 800c910:	f000 fe0c 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d10c      	bne.n	800c934 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c922:	2be0      	cmp	r3, #224	; 0xe0
 800c924:	d006      	beq.n	800c934 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d003      	beq.n	800c934 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d102      	bne.n	800c93a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c934:	f06f 030f 	mvn.w	r3, #15
 800c938:	e101      	b.n	800cb3e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	2101      	movs	r1, #1
 800c93e:	68b8      	ldr	r0, [r7, #8]
 800c940:	f7ff fb60 	bl	800c004 <etharp_find_entry>
 800c944:	4603      	mov	r3, r0
 800c946:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	da02      	bge.n	800c956 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c950:	8a7b      	ldrh	r3, [r7, #18]
 800c952:	b25b      	sxtb	r3, r3
 800c954:	e0f3      	b.n	800cb3e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c956:	8a7b      	ldrh	r3, [r7, #18]
 800c958:	2b7e      	cmp	r3, #126	; 0x7e
 800c95a:	d906      	bls.n	800c96a <etharp_query+0x7e>
 800c95c:	4b7a      	ldr	r3, [pc, #488]	; (800cb48 <etharp_query+0x25c>)
 800c95e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c962:	497a      	ldr	r1, [pc, #488]	; (800cb4c <etharp_query+0x260>)
 800c964:	487a      	ldr	r0, [pc, #488]	; (800cb50 <etharp_query+0x264>)
 800c966:	f001 fdad 	bl	800e4c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c96a:	8a7b      	ldrh	r3, [r7, #18]
 800c96c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c96e:	7c7a      	ldrb	r2, [r7, #17]
 800c970:	4978      	ldr	r1, [pc, #480]	; (800cb54 <etharp_query+0x268>)
 800c972:	4613      	mov	r3, r2
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	4413      	add	r3, r2
 800c978:	00db      	lsls	r3, r3, #3
 800c97a:	440b      	add	r3, r1
 800c97c:	3314      	adds	r3, #20
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d115      	bne.n	800c9b0 <etharp_query+0xc4>
    is_new_entry = 1;
 800c984:	2301      	movs	r3, #1
 800c986:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c988:	7c7a      	ldrb	r2, [r7, #17]
 800c98a:	4972      	ldr	r1, [pc, #456]	; (800cb54 <etharp_query+0x268>)
 800c98c:	4613      	mov	r3, r2
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	4413      	add	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	440b      	add	r3, r1
 800c996:	3314      	adds	r3, #20
 800c998:	2201      	movs	r2, #1
 800c99a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c99c:	7c7a      	ldrb	r2, [r7, #17]
 800c99e:	496d      	ldr	r1, [pc, #436]	; (800cb54 <etharp_query+0x268>)
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	005b      	lsls	r3, r3, #1
 800c9a4:	4413      	add	r3, r2
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	440b      	add	r3, r1
 800c9aa:	3308      	adds	r3, #8
 800c9ac:	68fa      	ldr	r2, [r7, #12]
 800c9ae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c9b0:	7c7a      	ldrb	r2, [r7, #17]
 800c9b2:	4968      	ldr	r1, [pc, #416]	; (800cb54 <etharp_query+0x268>)
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	005b      	lsls	r3, r3, #1
 800c9b8:	4413      	add	r3, r2
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	440b      	add	r3, r1
 800c9be:	3314      	adds	r3, #20
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d011      	beq.n	800c9ea <etharp_query+0xfe>
 800c9c6:	7c7a      	ldrb	r2, [r7, #17]
 800c9c8:	4962      	ldr	r1, [pc, #392]	; (800cb54 <etharp_query+0x268>)
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	4413      	add	r3, r2
 800c9d0:	00db      	lsls	r3, r3, #3
 800c9d2:	440b      	add	r3, r1
 800c9d4:	3314      	adds	r3, #20
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d806      	bhi.n	800c9ea <etharp_query+0xfe>
 800c9dc:	4b5a      	ldr	r3, [pc, #360]	; (800cb48 <etharp_query+0x25c>)
 800c9de:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c9e2:	495d      	ldr	r1, [pc, #372]	; (800cb58 <etharp_query+0x26c>)
 800c9e4:	485a      	ldr	r0, [pc, #360]	; (800cb50 <etharp_query+0x264>)
 800c9e6:	f001 fd6d 	bl	800e4c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d102      	bne.n	800c9f6 <etharp_query+0x10a>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10c      	bne.n	800ca10 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c9f6:	68b9      	ldr	r1, [r7, #8]
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 f963 	bl	800ccc4 <etharp_request>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d102      	bne.n	800ca10 <etharp_query+0x124>
      return result;
 800ca0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca0e:	e096      	b.n	800cb3e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <etharp_query+0x138>
 800ca16:	4b4c      	ldr	r3, [pc, #304]	; (800cb48 <etharp_query+0x25c>)
 800ca18:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ca1c:	494f      	ldr	r1, [pc, #316]	; (800cb5c <etharp_query+0x270>)
 800ca1e:	484c      	ldr	r0, [pc, #304]	; (800cb50 <etharp_query+0x264>)
 800ca20:	f001 fd50 	bl	800e4c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ca24:	7c7a      	ldrb	r2, [r7, #17]
 800ca26:	494b      	ldr	r1, [pc, #300]	; (800cb54 <etharp_query+0x268>)
 800ca28:	4613      	mov	r3, r2
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	4413      	add	r3, r2
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	440b      	add	r3, r1
 800ca32:	3314      	adds	r3, #20
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d917      	bls.n	800ca6a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ca3a:	4a49      	ldr	r2, [pc, #292]	; (800cb60 <etharp_query+0x274>)
 800ca3c:	7c7b      	ldrb	r3, [r7, #17]
 800ca3e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ca40:	7c7a      	ldrb	r2, [r7, #17]
 800ca42:	4613      	mov	r3, r2
 800ca44:	005b      	lsls	r3, r3, #1
 800ca46:	4413      	add	r3, r2
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	4a41      	ldr	r2, [pc, #260]	; (800cb54 <etharp_query+0x268>)
 800ca4e:	4413      	add	r3, r2
 800ca50:	3304      	adds	r3, #4
 800ca52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca56:	9200      	str	r2, [sp, #0]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	6879      	ldr	r1, [r7, #4]
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f001 fc6d 	bl	800e33c <ethernet_output>
 800ca62:	4603      	mov	r3, r0
 800ca64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca68:	e067      	b.n	800cb3a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ca6a:	7c7a      	ldrb	r2, [r7, #17]
 800ca6c:	4939      	ldr	r1, [pc, #228]	; (800cb54 <etharp_query+0x268>)
 800ca6e:	4613      	mov	r3, r2
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	4413      	add	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	440b      	add	r3, r1
 800ca78:	3314      	adds	r3, #20
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d15c      	bne.n	800cb3a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca88:	e01c      	b.n	800cac4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	895a      	ldrh	r2, [r3, #10]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	891b      	ldrh	r3, [r3, #8]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d10a      	bne.n	800caac <etharp_query+0x1c0>
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d006      	beq.n	800caac <etharp_query+0x1c0>
 800ca9e:	4b2a      	ldr	r3, [pc, #168]	; (800cb48 <etharp_query+0x25c>)
 800caa0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800caa4:	492f      	ldr	r1, [pc, #188]	; (800cb64 <etharp_query+0x278>)
 800caa6:	482a      	ldr	r0, [pc, #168]	; (800cb50 <etharp_query+0x264>)
 800caa8:	f001 fd0c 	bl	800e4c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	7b1b      	ldrb	r3, [r3, #12]
 800cab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <etharp_query+0x1d2>
        copy_needed = 1;
 800cab8:	2301      	movs	r3, #1
 800caba:	61bb      	str	r3, [r7, #24]
        break;
 800cabc:	e005      	b.n	800caca <etharp_query+0x1de>
      }
      p = p->next;
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1df      	bne.n	800ca8a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d007      	beq.n	800cae0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cad6:	200e      	movs	r0, #14
 800cad8:	f7f9 f9dc 	bl	8005e94 <pbuf_clone>
 800cadc:	61f8      	str	r0, [r7, #28]
 800cade:	e004      	b.n	800caea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cae4:	69f8      	ldr	r0, [r7, #28]
 800cae6:	f7f8 ff77 	bl	80059d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d021      	beq.n	800cb34 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800caf0:	7c7a      	ldrb	r2, [r7, #17]
 800caf2:	4918      	ldr	r1, [pc, #96]	; (800cb54 <etharp_query+0x268>)
 800caf4:	4613      	mov	r3, r2
 800caf6:	005b      	lsls	r3, r3, #1
 800caf8:	4413      	add	r3, r2
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	440b      	add	r3, r1
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00a      	beq.n	800cb1a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cb04:	7c7a      	ldrb	r2, [r7, #17]
 800cb06:	4913      	ldr	r1, [pc, #76]	; (800cb54 <etharp_query+0x268>)
 800cb08:	4613      	mov	r3, r2
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	4413      	add	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	440b      	add	r3, r1
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7f8 febf 	bl	8005898 <pbuf_free>
      }
      arp_table[i].q = p;
 800cb1a:	7c7a      	ldrb	r2, [r7, #17]
 800cb1c:	490d      	ldr	r1, [pc, #52]	; (800cb54 <etharp_query+0x268>)
 800cb1e:	4613      	mov	r3, r2
 800cb20:	005b      	lsls	r3, r3, #1
 800cb22:	4413      	add	r3, r2
 800cb24:	00db      	lsls	r3, r3, #3
 800cb26:	440b      	add	r3, r1
 800cb28:	69fa      	ldr	r2, [r7, #28]
 800cb2a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb32:	e002      	b.n	800cb3a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cb34:	23ff      	movs	r3, #255	; 0xff
 800cb36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cb3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3728      	adds	r7, #40	; 0x28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	08011c90 	.word	0x08011c90
 800cb4c:	08011e3c 	.word	0x08011e3c
 800cb50:	08011d08 	.word	0x08011d08
 800cb54:	20000174 	.word	0x20000174
 800cb58:	08011e4c 	.word	0x08011e4c
 800cb5c:	08011e30 	.word	0x08011e30
 800cb60:	20000264 	.word	0x20000264
 800cb64:	08011e74 	.word	0x08011e74

0800cb68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08a      	sub	sp, #40	; 0x28
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d106      	bne.n	800cb8e <etharp_raw+0x26>
 800cb80:	4b3a      	ldr	r3, [pc, #232]	; (800cc6c <etharp_raw+0x104>)
 800cb82:	f240 4257 	movw	r2, #1111	; 0x457
 800cb86:	493a      	ldr	r1, [pc, #232]	; (800cc70 <etharp_raw+0x108>)
 800cb88:	483a      	ldr	r0, [pc, #232]	; (800cc74 <etharp_raw+0x10c>)
 800cb8a:	f001 fc9b 	bl	800e4c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cb8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb92:	211c      	movs	r1, #28
 800cb94:	200e      	movs	r0, #14
 800cb96:	f7f8 fb9b 	bl	80052d0 <pbuf_alloc>
 800cb9a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d102      	bne.n	800cba8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cba2:	f04f 33ff 	mov.w	r3, #4294967295
 800cba6:	e05d      	b.n	800cc64 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cba8:	69bb      	ldr	r3, [r7, #24]
 800cbaa:	895b      	ldrh	r3, [r3, #10]
 800cbac:	2b1b      	cmp	r3, #27
 800cbae:	d806      	bhi.n	800cbbe <etharp_raw+0x56>
 800cbb0:	4b2e      	ldr	r3, [pc, #184]	; (800cc6c <etharp_raw+0x104>)
 800cbb2:	f240 4262 	movw	r2, #1122	; 0x462
 800cbb6:	4930      	ldr	r1, [pc, #192]	; (800cc78 <etharp_raw+0x110>)
 800cbb8:	482e      	ldr	r0, [pc, #184]	; (800cc74 <etharp_raw+0x10c>)
 800cbba:	f001 fc83 	bl	800e4c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cbc4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7f7 fbb2 	bl	8004330 <lwip_htons>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	461a      	mov	r2, r3
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbda:	2b06      	cmp	r3, #6
 800cbdc:	d006      	beq.n	800cbec <etharp_raw+0x84>
 800cbde:	4b23      	ldr	r3, [pc, #140]	; (800cc6c <etharp_raw+0x104>)
 800cbe0:	f240 4269 	movw	r2, #1129	; 0x469
 800cbe4:	4925      	ldr	r1, [pc, #148]	; (800cc7c <etharp_raw+0x114>)
 800cbe6:	4823      	ldr	r0, [pc, #140]	; (800cc74 <etharp_raw+0x10c>)
 800cbe8:	f001 fc6c 	bl	800e4c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	3308      	adds	r3, #8
 800cbf0:	2206      	movs	r2, #6
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f001 fc35 	bl	800e464 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	3312      	adds	r3, #18
 800cbfe:	2206      	movs	r2, #6
 800cc00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc02:	4618      	mov	r0, r3
 800cc04:	f001 fc2e 	bl	800e464 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	330e      	adds	r3, #14
 800cc0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc0e:	6812      	ldr	r2, [r2, #0]
 800cc10:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	3318      	adds	r3, #24
 800cc16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc18:	6812      	ldr	r2, [r2, #0]
 800cc1a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f042 0201 	orr.w	r2, r2, #1
 800cc28:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f042 0208 	orr.w	r2, r2, #8
 800cc32:	709a      	strb	r2, [r3, #2]
 800cc34:	2200      	movs	r2, #0
 800cc36:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	2206      	movs	r2, #6
 800cc3c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	2204      	movs	r2, #4
 800cc42:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cc44:	f640 0306 	movw	r3, #2054	; 0x806
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	69b9      	ldr	r1, [r7, #24]
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f001 fb73 	bl	800e33c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cc56:	69b8      	ldr	r0, [r7, #24]
 800cc58:	f7f8 fe1e 	bl	8005898 <pbuf_free>
  p = NULL;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cc60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3720      	adds	r7, #32
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	08011c90 	.word	0x08011c90
 800cc70:	08011de0 	.word	0x08011de0
 800cc74:	08011d08 	.word	0x08011d08
 800cc78:	08011e90 	.word	0x08011e90
 800cc7c:	08011ec4 	.word	0x08011ec4

0800cc80 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b088      	sub	sp, #32
 800cc84:	af04      	add	r7, sp, #16
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	9203      	str	r2, [sp, #12]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	9202      	str	r2, [sp, #8]
 800cca4:	4a06      	ldr	r2, [pc, #24]	; (800ccc0 <etharp_request_dst+0x40>)
 800cca6:	9201      	str	r2, [sp, #4]
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	4603      	mov	r3, r0
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f7ff ff5a 	bl	800cb68 <etharp_raw>
 800ccb4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	08012440 	.word	0x08012440

0800ccc4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ccce:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <etharp_request+0x20>)
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff ffd4 	bl	800cc80 <etharp_request_dst>
 800ccd8:	4603      	mov	r3, r0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	08012438 	.word	0x08012438

0800cce8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b08e      	sub	sp, #56	; 0x38
 800ccec:	af04      	add	r7, sp, #16
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ccf2:	4b78      	ldr	r3, [pc, #480]	; (800ced4 <icmp_input+0x1ec>)
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800ccf8:	6a3b      	ldr	r3, [r7, #32]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	f003 030f 	and.w	r3, r3, #15
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800cd08:	8bfb      	ldrh	r3, [r7, #30]
 800cd0a:	2b13      	cmp	r3, #19
 800cd0c:	f240 80cf 	bls.w	800ceae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	895b      	ldrh	r3, [r3, #10]
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	f240 80cc 	bls.w	800ceb2 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cd22:	7f7b      	ldrb	r3, [r7, #29]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 80bb 	beq.w	800cea0 <icmp_input+0x1b8>
 800cd2a:	2b08      	cmp	r3, #8
 800cd2c:	f040 80bb 	bne.w	800cea6 <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cd30:	4b69      	ldr	r3, [pc, #420]	; (800ced8 <icmp_input+0x1f0>)
 800cd32:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cd34:	4b67      	ldr	r3, [pc, #412]	; (800ced4 <icmp_input+0x1ec>)
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd3c:	2be0      	cmp	r3, #224	; 0xe0
 800cd3e:	d102      	bne.n	800cd46 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	3304      	adds	r3, #4
 800cd44:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cd46:	4b63      	ldr	r3, [pc, #396]	; (800ced4 <icmp_input+0x1ec>)
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	4a62      	ldr	r2, [pc, #392]	; (800ced4 <icmp_input+0x1ec>)
 800cd4c:	6812      	ldr	r2, [r2, #0]
 800cd4e:	4611      	mov	r1, r2
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fbeb 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d002      	beq.n	800cd62 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	891b      	ldrh	r3, [r3, #8]
 800cd66:	2b07      	cmp	r3, #7
 800cd68:	f240 80a5 	bls.w	800ceb6 <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cd6c:	8bfb      	ldrh	r3, [r7, #30]
 800cd6e:	330e      	adds	r3, #14
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7f8 fcfa 	bl	800576c <pbuf_add_header>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d04b      	beq.n	800ce16 <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	891a      	ldrh	r2, [r3, #8]
 800cd82:	8bfb      	ldrh	r3, [r7, #30]
 800cd84:	4413      	add	r3, r2
 800cd86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	891b      	ldrh	r3, [r3, #8]
 800cd8c:	8b7a      	ldrh	r2, [r7, #26]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	f0c0 8096 	bcc.w	800cec0 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cd94:	8b7b      	ldrh	r3, [r7, #26]
 800cd96:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	200e      	movs	r0, #14
 800cd9e:	f7f8 fa97 	bl	80052d0 <pbuf_alloc>
 800cda2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 808c 	beq.w	800cec4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	895b      	ldrh	r3, [r3, #10]
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	8bfb      	ldrh	r3, [r7, #30]
 800cdb4:	3308      	adds	r3, #8
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d203      	bcs.n	800cdc2 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cdba:	6978      	ldr	r0, [r7, #20]
 800cdbc:	f7f8 fd6c 	bl	8005898 <pbuf_free>
          goto icmperr;
 800cdc0:	e081      	b.n	800cec6 <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	8bfa      	ldrh	r2, [r7, #30]
 800cdc8:	6a39      	ldr	r1, [r7, #32]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f001 fb4a 	bl	800e464 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cdd0:	8bfb      	ldrh	r3, [r7, #30]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6978      	ldr	r0, [r7, #20]
 800cdd6:	f7f8 fcd9 	bl	800578c <pbuf_remove_header>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d009      	beq.n	800cdf4 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cde0:	4b3e      	ldr	r3, [pc, #248]	; (800cedc <icmp_input+0x1f4>)
 800cde2:	22b6      	movs	r2, #182	; 0xb6
 800cde4:	493e      	ldr	r1, [pc, #248]	; (800cee0 <icmp_input+0x1f8>)
 800cde6:	483f      	ldr	r0, [pc, #252]	; (800cee4 <icmp_input+0x1fc>)
 800cde8:	f001 fb6c 	bl	800e4c4 <iprintf>
          pbuf_free(r);
 800cdec:	6978      	ldr	r0, [r7, #20]
 800cdee:	f7f8 fd53 	bl	8005898 <pbuf_free>
          goto icmperr;
 800cdf2:	e068      	b.n	800cec6 <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cdf4:	6879      	ldr	r1, [r7, #4]
 800cdf6:	6978      	ldr	r0, [r7, #20]
 800cdf8:	f7f8 fe76 	bl	8005ae8 <pbuf_copy>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d003      	beq.n	800ce0a <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ce02:	6978      	ldr	r0, [r7, #20]
 800ce04:	f7f8 fd48 	bl	8005898 <pbuf_free>
          goto icmperr;
 800ce08:	e05d      	b.n	800cec6 <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7f8 fd44 	bl	8005898 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	607b      	str	r3, [r7, #4]
 800ce14:	e00f      	b.n	800ce36 <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ce16:	8bfb      	ldrh	r3, [r7, #30]
 800ce18:	330e      	adds	r3, #14
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f7f8 fcb5 	bl	800578c <pbuf_remove_header>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d006      	beq.n	800ce36 <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ce28:	4b2c      	ldr	r3, [pc, #176]	; (800cedc <icmp_input+0x1f4>)
 800ce2a:	22c7      	movs	r2, #199	; 0xc7
 800ce2c:	492e      	ldr	r1, [pc, #184]	; (800cee8 <icmp_input+0x200>)
 800ce2e:	482d      	ldr	r0, [pc, #180]	; (800cee4 <icmp_input+0x1fc>)
 800ce30:	f001 fb48 	bl	800e4c4 <iprintf>
          goto icmperr;
 800ce34:	e047      	b.n	800cec6 <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ce3c:	8bfb      	ldrh	r3, [r7, #30]
 800ce3e:	4619      	mov	r1, r3
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7f8 fc93 	bl	800576c <pbuf_add_header>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d12b      	bne.n	800cea4 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ce5a:	4b1e      	ldr	r3, [pc, #120]	; (800ced4 <icmp_input+0x1ec>)
 800ce5c:	691a      	ldr	r2, [r3, #16]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2200      	movs	r2, #0
 800ce66:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	709a      	strb	r2, [r3, #2]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	22ff      	movs	r2, #255	; 0xff
 800ce76:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	729a      	strb	r2, [r3, #10]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	9302      	str	r3, [sp, #8]
 800ce86:	2301      	movs	r3, #1
 800ce88:	9301      	str	r3, [sp, #4]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	23ff      	movs	r3, #255	; 0xff
 800ce90:	2200      	movs	r2, #0
 800ce92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 fa71 	bl	800d37c <ip4_output_if>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ce9e:	e001      	b.n	800cea4 <icmp_input+0x1bc>
      break;
 800cea0:	bf00      	nop
 800cea2:	e000      	b.n	800cea6 <icmp_input+0x1be>
      break;
 800cea4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7f8 fcf6 	bl	8005898 <pbuf_free>
  return;
 800ceac:	e00f      	b.n	800cece <icmp_input+0x1e6>
    goto lenerr;
 800ceae:	bf00      	nop
 800ceb0:	e002      	b.n	800ceb8 <icmp_input+0x1d0>
    goto lenerr;
 800ceb2:	bf00      	nop
 800ceb4:	e000      	b.n	800ceb8 <icmp_input+0x1d0>
        goto lenerr;
 800ceb6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f7f8 fced 	bl	8005898 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cebe:	e006      	b.n	800cece <icmp_input+0x1e6>
          goto icmperr;
 800cec0:	bf00      	nop
 800cec2:	e000      	b.n	800cec6 <icmp_input+0x1de>
          goto icmperr;
 800cec4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7f8 fce6 	bl	8005898 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cecc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cece:	3728      	adds	r7, #40	; 0x28
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	2000349c 	.word	0x2000349c
 800ced8:	200034b0 	.word	0x200034b0
 800cedc:	08011f08 	.word	0x08011f08
 800cee0:	08011f40 	.word	0x08011f40
 800cee4:	08011f78 	.word	0x08011f78
 800cee8:	08011fa0 	.word	0x08011fa0

0800ceec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	460b      	mov	r3, r1
 800cef6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	461a      	mov	r2, r3
 800cefc:	2103      	movs	r1, #3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f814 	bl	800cf2c <icmp_send_response>
}
 800cf04:	bf00      	nop
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	460b      	mov	r3, r1
 800cf16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cf18:	78fb      	ldrb	r3, [r7, #3]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	210b      	movs	r1, #11
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f804 	bl	800cf2c <icmp_send_response>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b08c      	sub	sp, #48	; 0x30
 800cf30:	af04      	add	r7, sp, #16
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
 800cf38:	4613      	mov	r3, r2
 800cf3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cf3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf40:	2124      	movs	r1, #36	; 0x24
 800cf42:	2022      	movs	r0, #34	; 0x22
 800cf44:	f7f8 f9c4 	bl	80052d0 <pbuf_alloc>
 800cf48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d04c      	beq.n	800cfea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	895b      	ldrh	r3, [r3, #10]
 800cf54:	2b23      	cmp	r3, #35	; 0x23
 800cf56:	d806      	bhi.n	800cf66 <icmp_send_response+0x3a>
 800cf58:	4b26      	ldr	r3, [pc, #152]	; (800cff4 <icmp_send_response+0xc8>)
 800cf5a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cf5e:	4926      	ldr	r1, [pc, #152]	; (800cff8 <icmp_send_response+0xcc>)
 800cf60:	4826      	ldr	r0, [pc, #152]	; (800cffc <icmp_send_response+0xd0>)
 800cf62:	f001 faaf 	bl	800e4c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	78fa      	ldrb	r2, [r7, #3]
 800cf76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	78ba      	ldrb	r2, [r7, #2]
 800cf7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	2200      	movs	r2, #0
 800cf82:	711a      	strb	r2, [r3, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	719a      	strb	r2, [r3, #6]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f103 0008 	add.w	r0, r3, #8
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	221c      	movs	r2, #28
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	f001 fa5f 	bl	800e464 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cfac:	f107 030c 	add.w	r3, r7, #12
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 f825 	bl	800d000 <ip4_route>
 800cfb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d011      	beq.n	800cfe2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	709a      	strb	r2, [r3, #2]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cfc8:	f107 020c 	add.w	r2, r7, #12
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	9302      	str	r3, [sp, #8]
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	23ff      	movs	r3, #255	; 0xff
 800cfda:	2100      	movs	r1, #0
 800cfdc:	69f8      	ldr	r0, [r7, #28]
 800cfde:	f000 f9cd 	bl	800d37c <ip4_output_if>
  }
  pbuf_free(q);
 800cfe2:	69f8      	ldr	r0, [r7, #28]
 800cfe4:	f7f8 fc58 	bl	8005898 <pbuf_free>
 800cfe8:	e000      	b.n	800cfec <icmp_send_response+0xc0>
    return;
 800cfea:	bf00      	nop
}
 800cfec:	3720      	adds	r7, #32
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	08011f08 	.word	0x08011f08
 800cff8:	08011fd4 	.word	0x08011fd4
 800cffc:	08011f78 	.word	0x08011f78

0800d000 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d008:	4b33      	ldr	r3, [pc, #204]	; (800d0d8 <ip4_route+0xd8>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	60fb      	str	r3, [r7, #12]
 800d00e:	e036      	b.n	800d07e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d016:	f003 0301 	and.w	r3, r3, #1
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d02b      	beq.n	800d078 <ip4_route+0x78>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d026:	089b      	lsrs	r3, r3, #2
 800d028:	f003 0301 	and.w	r3, r3, #1
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d022      	beq.n	800d078 <ip4_route+0x78>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	3304      	adds	r3, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d01d      	beq.n	800d078 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	3304      	adds	r3, #4
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	405a      	eors	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	3308      	adds	r3, #8
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4013      	ands	r3, r2
 800d050:	2b00      	cmp	r3, #0
 800d052:	d101      	bne.n	800d058 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	e038      	b.n	800d0ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d108      	bne.n	800d078 <ip4_route+0x78>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	330c      	adds	r3, #12
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	429a      	cmp	r2, r3
 800d072:	d101      	bne.n	800d078 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	e028      	b.n	800d0ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1c5      	bne.n	800d010 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d084:	4b15      	ldr	r3, [pc, #84]	; (800d0dc <ip4_route+0xdc>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01a      	beq.n	800d0c2 <ip4_route+0xc2>
 800d08c:	4b13      	ldr	r3, [pc, #76]	; (800d0dc <ip4_route+0xdc>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d094:	f003 0301 	and.w	r3, r3, #1
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d012      	beq.n	800d0c2 <ip4_route+0xc2>
 800d09c:	4b0f      	ldr	r3, [pc, #60]	; (800d0dc <ip4_route+0xdc>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0a4:	f003 0304 	and.w	r3, r3, #4
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00a      	beq.n	800d0c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d0ac:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <ip4_route+0xdc>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d004      	beq.n	800d0c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b7f      	cmp	r3, #127	; 0x7f
 800d0c0:	d101      	bne.n	800d0c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e001      	b.n	800d0ca <ip4_route+0xca>
  }

  return netif_default;
 800d0c6:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <ip4_route+0xdc>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3714      	adds	r7, #20
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop
 800d0d8:	20008b90 	.word	0x20008b90
 800d0dc:	20008b94 	.word	0x20008b94

0800d0e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d0ee:	f003 0301 	and.w	r3, r3, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d016      	beq.n	800d126 <ip4_input_accept+0x46>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d011      	beq.n	800d126 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d102:	4b0b      	ldr	r3, [pc, #44]	; (800d130 <ip4_input_accept+0x50>)
 800d104:	695a      	ldr	r2, [r3, #20]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	3304      	adds	r3, #4
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d008      	beq.n	800d122 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d110:	4b07      	ldr	r3, [pc, #28]	; (800d130 <ip4_input_accept+0x50>)
 800d112:	695b      	ldr	r3, [r3, #20]
 800d114:	6879      	ldr	r1, [r7, #4]
 800d116:	4618      	mov	r0, r3
 800d118:	f000 fa08 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800d11c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d122:	2301      	movs	r3, #1
 800d124:	e000      	b.n	800d128 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	2000349c 	.word	0x2000349c

0800d134 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	091b      	lsrs	r3, r3, #4
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b04      	cmp	r3, #4
 800d14e:	d004      	beq.n	800d15a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7f8 fba1 	bl	8005898 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	e107      	b.n	800d36a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	f003 030f 	and.w	r3, r3, #15
 800d162:	b2db      	uxtb	r3, r3
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	b2db      	uxtb	r3, r3
 800d168:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	885b      	ldrh	r3, [r3, #2]
 800d16e:	b29b      	uxth	r3, r3
 800d170:	4618      	mov	r0, r3
 800d172:	f7f7 f8dd 	bl	8004330 <lwip_htons>
 800d176:	4603      	mov	r3, r0
 800d178:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	891b      	ldrh	r3, [r3, #8]
 800d17e:	89ba      	ldrh	r2, [r7, #12]
 800d180:	429a      	cmp	r2, r3
 800d182:	d204      	bcs.n	800d18e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d184:	89bb      	ldrh	r3, [r7, #12]
 800d186:	4619      	mov	r1, r3
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7f8 f9ff 	bl	800558c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	895b      	ldrh	r3, [r3, #10]
 800d192:	89fa      	ldrh	r2, [r7, #14]
 800d194:	429a      	cmp	r2, r3
 800d196:	d807      	bhi.n	800d1a8 <ip4_input+0x74>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	891b      	ldrh	r3, [r3, #8]
 800d19c:	89ba      	ldrh	r2, [r7, #12]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d802      	bhi.n	800d1a8 <ip4_input+0x74>
 800d1a2:	89fb      	ldrh	r3, [r7, #14]
 800d1a4:	2b13      	cmp	r3, #19
 800d1a6:	d804      	bhi.n	800d1b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7f8 fb75 	bl	8005898 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	e0db      	b.n	800d36a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	4a6f      	ldr	r2, [pc, #444]	; (800d374 <ip4_input+0x240>)
 800d1b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	4a6d      	ldr	r2, [pc, #436]	; (800d374 <ip4_input+0x240>)
 800d1c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d1c2:	4b6c      	ldr	r3, [pc, #432]	; (800d374 <ip4_input+0x240>)
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1ca:	2be0      	cmp	r3, #224	; 0xe0
 800d1cc:	d112      	bne.n	800d1f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d007      	beq.n	800d1ee <ip4_input+0xba>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	3304      	adds	r3, #4
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <ip4_input+0xba>
      netif = inp;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	613b      	str	r3, [r7, #16]
 800d1ec:	e02a      	b.n	800d244 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	613b      	str	r3, [r7, #16]
 800d1f2:	e027      	b.n	800d244 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d1f4:	6838      	ldr	r0, [r7, #0]
 800d1f6:	f7ff ff73 	bl	800d0e0 <ip4_input_accept>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d002      	beq.n	800d206 <ip4_input+0xd2>
      netif = inp;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	613b      	str	r3, [r7, #16]
 800d204:	e01e      	b.n	800d244 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d206:	2300      	movs	r3, #0
 800d208:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d20a:	4b5a      	ldr	r3, [pc, #360]	; (800d374 <ip4_input+0x240>)
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	2b7f      	cmp	r3, #127	; 0x7f
 800d212:	d017      	beq.n	800d244 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d214:	4b58      	ldr	r3, [pc, #352]	; (800d378 <ip4_input+0x244>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	613b      	str	r3, [r7, #16]
 800d21a:	e00e      	b.n	800d23a <ip4_input+0x106>
          if (netif == inp) {
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	429a      	cmp	r2, r3
 800d222:	d006      	beq.n	800d232 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d224:	6938      	ldr	r0, [r7, #16]
 800d226:	f7ff ff5b 	bl	800d0e0 <ip4_input_accept>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d108      	bne.n	800d242 <ip4_input+0x10e>
 800d230:	e000      	b.n	800d234 <ip4_input+0x100>
            continue;
 800d232:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	613b      	str	r3, [r7, #16]
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1ed      	bne.n	800d21c <ip4_input+0xe8>
 800d240:	e000      	b.n	800d244 <ip4_input+0x110>
            break;
 800d242:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d244:	4b4b      	ldr	r3, [pc, #300]	; (800d374 <ip4_input+0x240>)
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 f96e 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d105      	bne.n	800d262 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d256:	4b47      	ldr	r3, [pc, #284]	; (800d374 <ip4_input+0x240>)
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d25e:	2be0      	cmp	r3, #224	; 0xe0
 800d260:	d104      	bne.n	800d26c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7f8 fb18 	bl	8005898 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	e07e      	b.n	800d36a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d104      	bne.n	800d27c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7f8 fb10 	bl	8005898 <pbuf_free>
    return ERR_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	e076      	b.n	800d36a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	88db      	ldrh	r3, [r3, #6]
 800d280:	b29b      	uxth	r3, r3
 800d282:	461a      	mov	r2, r3
 800d284:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d288:	4013      	ands	r3, r2
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00b      	beq.n	800d2a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f000 fc92 	bl	800dbb8 <ip4_reass>
 800d294:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d101      	bne.n	800d2a0 <ip4_input+0x16c>
      return ERR_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	e064      	b.n	800d36a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d2a6:	4a33      	ldr	r2, [pc, #204]	; (800d374 <ip4_input+0x240>)
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d2ac:	4a31      	ldr	r2, [pc, #196]	; (800d374 <ip4_input+0x240>)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d2b2:	4a30      	ldr	r2, [pc, #192]	; (800d374 <ip4_input+0x240>)
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	f003 030f 	and.w	r3, r3, #15
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	4b2a      	ldr	r3, [pc, #168]	; (800d374 <ip4_input+0x240>)
 800d2ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d2cc:	89fb      	ldrh	r3, [r7, #14]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f7f8 fa5b 	bl	800578c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	7a5b      	ldrb	r3, [r3, #9]
 800d2da:	2b11      	cmp	r3, #17
 800d2dc:	d006      	beq.n	800d2ec <ip4_input+0x1b8>
 800d2de:	2b11      	cmp	r3, #17
 800d2e0:	dc13      	bgt.n	800d30a <ip4_input+0x1d6>
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d00c      	beq.n	800d300 <ip4_input+0x1cc>
 800d2e6:	2b06      	cmp	r3, #6
 800d2e8:	d005      	beq.n	800d2f6 <ip4_input+0x1c2>
 800d2ea:	e00e      	b.n	800d30a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7fe f952 	bl	800b598 <udp_input>
        break;
 800d2f4:	e026      	b.n	800d344 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7fa f997 	bl	800762c <tcp_input>
        break;
 800d2fe:	e021      	b.n	800d344 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff fcf0 	bl	800cce8 <icmp_input>
        break;
 800d308:	e01c      	b.n	800d344 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d30a:	4b1a      	ldr	r3, [pc, #104]	; (800d374 <ip4_input+0x240>)
 800d30c:	695b      	ldr	r3, [r3, #20]
 800d30e:	6939      	ldr	r1, [r7, #16]
 800d310:	4618      	mov	r0, r3
 800d312:	f000 f90b 	bl	800d52c <ip4_addr_isbroadcast_u32>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10f      	bne.n	800d33c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d31c:	4b15      	ldr	r3, [pc, #84]	; (800d374 <ip4_input+0x240>)
 800d31e:	695b      	ldr	r3, [r3, #20]
 800d320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d324:	2be0      	cmp	r3, #224	; 0xe0
 800d326:	d009      	beq.n	800d33c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d32c:	4619      	mov	r1, r3
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7f8 fa9f 	bl	8005872 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d334:	2102      	movs	r1, #2
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f7ff fdd8 	bl	800ceec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7f8 faab 	bl	8005898 <pbuf_free>
        break;
 800d342:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d344:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <ip4_input+0x240>)
 800d346:	2200      	movs	r2, #0
 800d348:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d34a:	4b0a      	ldr	r3, [pc, #40]	; (800d374 <ip4_input+0x240>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d350:	4b08      	ldr	r3, [pc, #32]	; (800d374 <ip4_input+0x240>)
 800d352:	2200      	movs	r2, #0
 800d354:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d356:	4b07      	ldr	r3, [pc, #28]	; (800d374 <ip4_input+0x240>)
 800d358:	2200      	movs	r2, #0
 800d35a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d35c:	4b05      	ldr	r3, [pc, #20]	; (800d374 <ip4_input+0x240>)
 800d35e:	2200      	movs	r2, #0
 800d360:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d362:	4b04      	ldr	r3, [pc, #16]	; (800d374 <ip4_input+0x240>)
 800d364:	2200      	movs	r2, #0
 800d366:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3718      	adds	r7, #24
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	2000349c 	.word	0x2000349c
 800d378:	20008b90 	.word	0x20008b90

0800d37c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08a      	sub	sp, #40	; 0x28
 800d380:	af04      	add	r7, sp, #16
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]
 800d388:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d009      	beq.n	800d3a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d003      	beq.n	800d3a2 <ip4_output_if+0x26>
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d3a8:	78fa      	ldrb	r2, [r7, #3]
 800d3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ac:	9302      	str	r3, [sp, #8]
 800d3ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d3b2:	9301      	str	r3, [sp, #4]
 800d3b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	6979      	ldr	r1, [r7, #20]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f000 f805 	bl	800d3d0 <ip4_output_if_src>
 800d3c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3718      	adds	r7, #24
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b088      	sub	sp, #32
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	7b9b      	ldrb	r3, [r3, #14]
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d006      	beq.n	800d3f4 <ip4_output_if_src+0x24>
 800d3e6:	4b4b      	ldr	r3, [pc, #300]	; (800d514 <ip4_output_if_src+0x144>)
 800d3e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d3ec:	494a      	ldr	r1, [pc, #296]	; (800d518 <ip4_output_if_src+0x148>)
 800d3ee:	484b      	ldr	r0, [pc, #300]	; (800d51c <ip4_output_if_src+0x14c>)
 800d3f0:	f001 f868 	bl	800e4c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d060      	beq.n	800d4bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d3fa:	2314      	movs	r3, #20
 800d3fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d3fe:	2114      	movs	r1, #20
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f7f8 f9b3 	bl	800576c <pbuf_add_header>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d40c:	f06f 0301 	mvn.w	r3, #1
 800d410:	e07c      	b.n	800d50c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	895b      	ldrh	r3, [r3, #10]
 800d41c:	2b13      	cmp	r3, #19
 800d41e:	d806      	bhi.n	800d42e <ip4_output_if_src+0x5e>
 800d420:	4b3c      	ldr	r3, [pc, #240]	; (800d514 <ip4_output_if_src+0x144>)
 800d422:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d426:	493e      	ldr	r1, [pc, #248]	; (800d520 <ip4_output_if_src+0x150>)
 800d428:	483c      	ldr	r0, [pc, #240]	; (800d51c <ip4_output_if_src+0x14c>)
 800d42a:	f001 f84b 	bl	800e4c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	78fa      	ldrb	r2, [r7, #3]
 800d432:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d43a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d444:	8b7b      	ldrh	r3, [r7, #26]
 800d446:	089b      	lsrs	r3, r3, #2
 800d448:	b29b      	uxth	r3, r3
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d450:	b2da      	uxtb	r2, r3
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d45c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	891b      	ldrh	r3, [r3, #8]
 800d462:	4618      	mov	r0, r3
 800d464:	f7f6 ff64 	bl	8004330 <lwip_htons>
 800d468:	4603      	mov	r3, r0
 800d46a:	461a      	mov	r2, r3
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	2200      	movs	r2, #0
 800d474:	719a      	strb	r2, [r3, #6]
 800d476:	2200      	movs	r2, #0
 800d478:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d47a:	4b2a      	ldr	r3, [pc, #168]	; (800d524 <ip4_output_if_src+0x154>)
 800d47c:	881b      	ldrh	r3, [r3, #0]
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f6 ff56 	bl	8004330 <lwip_htons>
 800d484:	4603      	mov	r3, r0
 800d486:	461a      	mov	r2, r3
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d48c:	4b25      	ldr	r3, [pc, #148]	; (800d524 <ip4_output_if_src+0x154>)
 800d48e:	881b      	ldrh	r3, [r3, #0]
 800d490:	3301      	adds	r3, #1
 800d492:	b29a      	uxth	r2, r3
 800d494:	4b23      	ldr	r3, [pc, #140]	; (800d524 <ip4_output_if_src+0x154>)
 800d496:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d104      	bne.n	800d4a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d49e:	4b22      	ldr	r3, [pc, #136]	; (800d528 <ip4_output_if_src+0x158>)
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	60da      	str	r2, [r3, #12]
 800d4a6:	e003      	b.n	800d4b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	729a      	strb	r2, [r3, #10]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	72da      	strb	r2, [r3, #11]
 800d4ba:	e00f      	b.n	800d4dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	895b      	ldrh	r3, [r3, #10]
 800d4c0:	2b13      	cmp	r3, #19
 800d4c2:	d802      	bhi.n	800d4ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d4c4:	f06f 0301 	mvn.w	r3, #1
 800d4c8:	e020      	b.n	800d50c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	685b      	ldr	r3, [r3, #4]
 800d4ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d4d6:	f107 0314 	add.w	r3, r7, #20
 800d4da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00c      	beq.n	800d4fe <ip4_output_if_src+0x12e>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	891a      	ldrh	r2, [r3, #8]
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d906      	bls.n	800d4fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f000 fd4d 	bl	800df94 <ip4_frag>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	e006      	b.n	800d50c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	68f9      	ldr	r1, [r7, #12]
 800d506:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d508:	4798      	blx	r3
 800d50a:	4603      	mov	r3, r0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3720      	adds	r7, #32
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	08012000 	.word	0x08012000
 800d518:	08012034 	.word	0x08012034
 800d51c:	08012040 	.word	0x08012040
 800d520:	08012068 	.word	0x08012068
 800d524:	20000266 	.word	0x20000266
 800d528:	08012434 	.word	0x08012434

0800d52c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d540:	d002      	beq.n	800d548 <ip4_addr_isbroadcast_u32+0x1c>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d548:	2301      	movs	r3, #1
 800d54a:	e02a      	b.n	800d5a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d552:	f003 0302 	and.w	r3, r3, #2
 800d556:	2b00      	cmp	r3, #0
 800d558:	d101      	bne.n	800d55e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	e021      	b.n	800d5a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	3304      	adds	r3, #4
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	429a      	cmp	r2, r3
 800d568:	d101      	bne.n	800d56e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d56a:	2300      	movs	r3, #0
 800d56c:	e019      	b.n	800d5a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	3304      	adds	r3, #4
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	405a      	eors	r2, r3
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	3308      	adds	r3, #8
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4013      	ands	r3, r2
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10d      	bne.n	800d5a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	3308      	adds	r3, #8
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	43da      	mvns	r2, r3
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	3308      	adds	r3, #8
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d598:	429a      	cmp	r2, r3
 800d59a:	d101      	bne.n	800d5a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e000      	b.n	800d5a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d5a0:	2300      	movs	r3, #0
  }
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
	...

0800d5b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d5ba:	4b12      	ldr	r3, [pc, #72]	; (800d604 <ip_reass_tmr+0x54>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d5c0:	e018      	b.n	800d5f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	7fdb      	ldrb	r3, [r3, #31]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00b      	beq.n	800d5e2 <ip_reass_tmr+0x32>
      r->timer--;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	7fdb      	ldrb	r3, [r3, #31]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	b2da      	uxtb	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	60fb      	str	r3, [r7, #12]
 800d5e0:	e008      	b.n	800d5f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f80a 	bl	800d608 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1e3      	bne.n	800d5c2 <ip_reass_tmr+0x12>
    }
  }
}
 800d5fa:	bf00      	nop
 800d5fc:	bf00      	nop
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	20000268 	.word	0x20000268

0800d608 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b088      	sub	sp, #32
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d105      	bne.n	800d62a <ip_reass_free_complete_datagram+0x22>
 800d61e:	4b45      	ldr	r3, [pc, #276]	; (800d734 <ip_reass_free_complete_datagram+0x12c>)
 800d620:	22ab      	movs	r2, #171	; 0xab
 800d622:	4945      	ldr	r1, [pc, #276]	; (800d738 <ip_reass_free_complete_datagram+0x130>)
 800d624:	4845      	ldr	r0, [pc, #276]	; (800d73c <ip_reass_free_complete_datagram+0x134>)
 800d626:	f000 ff4d 	bl	800e4c4 <iprintf>
  if (prev != NULL) {
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00a      	beq.n	800d646 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	429a      	cmp	r2, r3
 800d638:	d005      	beq.n	800d646 <ip_reass_free_complete_datagram+0x3e>
 800d63a:	4b3e      	ldr	r3, [pc, #248]	; (800d734 <ip_reass_free_complete_datagram+0x12c>)
 800d63c:	22ad      	movs	r2, #173	; 0xad
 800d63e:	4940      	ldr	r1, [pc, #256]	; (800d740 <ip_reass_free_complete_datagram+0x138>)
 800d640:	483e      	ldr	r0, [pc, #248]	; (800d73c <ip_reass_free_complete_datagram+0x134>)
 800d642:	f000 ff3f 	bl	800e4c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	889b      	ldrh	r3, [r3, #4]
 800d652:	b29b      	uxth	r3, r3
 800d654:	2b00      	cmp	r3, #0
 800d656:	d12a      	bne.n	800d6ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	6858      	ldr	r0, [r3, #4]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	3308      	adds	r3, #8
 800d66e:	2214      	movs	r2, #20
 800d670:	4619      	mov	r1, r3
 800d672:	f000 fef7 	bl	800e464 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d676:	2101      	movs	r1, #1
 800d678:	69b8      	ldr	r0, [r7, #24]
 800d67a:	f7ff fc47 	bl	800cf0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d67e:	69b8      	ldr	r0, [r7, #24]
 800d680:	f7f8 f992 	bl	80059a8 <pbuf_clen>
 800d684:	4603      	mov	r3, r0
 800d686:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d688:	8bfa      	ldrh	r2, [r7, #30]
 800d68a:	8a7b      	ldrh	r3, [r7, #18]
 800d68c:	4413      	add	r3, r2
 800d68e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d692:	db05      	blt.n	800d6a0 <ip_reass_free_complete_datagram+0x98>
 800d694:	4b27      	ldr	r3, [pc, #156]	; (800d734 <ip_reass_free_complete_datagram+0x12c>)
 800d696:	22bc      	movs	r2, #188	; 0xbc
 800d698:	492a      	ldr	r1, [pc, #168]	; (800d744 <ip_reass_free_complete_datagram+0x13c>)
 800d69a:	4828      	ldr	r0, [pc, #160]	; (800d73c <ip_reass_free_complete_datagram+0x134>)
 800d69c:	f000 ff12 	bl	800e4c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d6a0:	8bfa      	ldrh	r2, [r7, #30]
 800d6a2:	8a7b      	ldrh	r3, [r7, #18]
 800d6a4:	4413      	add	r3, r2
 800d6a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d6a8:	69b8      	ldr	r0, [r7, #24]
 800d6aa:	f7f8 f8f5 	bl	8005898 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d6b4:	e01f      	b.n	800d6f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7f8 f96e 	bl	80059a8 <pbuf_clen>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d6d0:	8bfa      	ldrh	r2, [r7, #30]
 800d6d2:	8a7b      	ldrh	r3, [r7, #18]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6da:	db05      	blt.n	800d6e8 <ip_reass_free_complete_datagram+0xe0>
 800d6dc:	4b15      	ldr	r3, [pc, #84]	; (800d734 <ip_reass_free_complete_datagram+0x12c>)
 800d6de:	22cc      	movs	r2, #204	; 0xcc
 800d6e0:	4918      	ldr	r1, [pc, #96]	; (800d744 <ip_reass_free_complete_datagram+0x13c>)
 800d6e2:	4816      	ldr	r0, [pc, #88]	; (800d73c <ip_reass_free_complete_datagram+0x134>)
 800d6e4:	f000 feee 	bl	800e4c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d6e8:	8bfa      	ldrh	r2, [r7, #30]
 800d6ea:	8a7b      	ldrh	r3, [r7, #18]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f7f8 f8d1 	bl	8005898 <pbuf_free>
  while (p != NULL) {
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1dc      	bne.n	800d6b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f8c2 	bl	800d888 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d704:	4b10      	ldr	r3, [pc, #64]	; (800d748 <ip_reass_free_complete_datagram+0x140>)
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	8bfa      	ldrh	r2, [r7, #30]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d905      	bls.n	800d71a <ip_reass_free_complete_datagram+0x112>
 800d70e:	4b09      	ldr	r3, [pc, #36]	; (800d734 <ip_reass_free_complete_datagram+0x12c>)
 800d710:	22d2      	movs	r2, #210	; 0xd2
 800d712:	490e      	ldr	r1, [pc, #56]	; (800d74c <ip_reass_free_complete_datagram+0x144>)
 800d714:	4809      	ldr	r0, [pc, #36]	; (800d73c <ip_reass_free_complete_datagram+0x134>)
 800d716:	f000 fed5 	bl	800e4c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d71a:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <ip_reass_free_complete_datagram+0x140>)
 800d71c:	881a      	ldrh	r2, [r3, #0]
 800d71e:	8bfb      	ldrh	r3, [r7, #30]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	b29a      	uxth	r2, r3
 800d724:	4b08      	ldr	r3, [pc, #32]	; (800d748 <ip_reass_free_complete_datagram+0x140>)
 800d726:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d728:	8bfb      	ldrh	r3, [r7, #30]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3720      	adds	r7, #32
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	08012098 	.word	0x08012098
 800d738:	080120d4 	.word	0x080120d4
 800d73c:	080120e0 	.word	0x080120e0
 800d740:	08012108 	.word	0x08012108
 800d744:	0801211c 	.word	0x0801211c
 800d748:	2000026c 	.word	0x2000026c
 800d74c:	0801213c 	.word	0x0801213c

0800d750 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08a      	sub	sp, #40	; 0x28
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d75a:	2300      	movs	r3, #0
 800d75c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d762:	2300      	movs	r3, #0
 800d764:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d766:	2300      	movs	r3, #0
 800d768:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d76e:	4b28      	ldr	r3, [pc, #160]	; (800d810 <ip_reass_remove_oldest_datagram+0xc0>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d774:	e030      	b.n	800d7d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	695a      	ldr	r2, [r3, #20]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d10c      	bne.n	800d79c <ip_reass_remove_oldest_datagram+0x4c>
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	699a      	ldr	r2, [r3, #24]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d106      	bne.n	800d79c <ip_reass_remove_oldest_datagram+0x4c>
 800d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d790:	899a      	ldrh	r2, [r3, #12]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	889b      	ldrh	r3, [r3, #4]
 800d796:	b29b      	uxth	r3, r3
 800d798:	429a      	cmp	r2, r3
 800d79a:	d014      	beq.n	800d7c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d7a2:	6a3b      	ldr	r3, [r7, #32]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d104      	bne.n	800d7b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	61bb      	str	r3, [r7, #24]
 800d7b0:	e009      	b.n	800d7c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	7fda      	ldrb	r2, [r3, #31]
 800d7b6:	6a3b      	ldr	r3, [r7, #32]
 800d7b8:	7fdb      	ldrb	r3, [r3, #31]
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d803      	bhi.n	800d7c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1cb      	bne.n	800d776 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d008      	beq.n	800d7f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d7e4:	69b9      	ldr	r1, [r7, #24]
 800d7e6:	6a38      	ldr	r0, [r7, #32]
 800d7e8:	f7ff ff0e 	bl	800d608 <ip_reass_free_complete_datagram>
 800d7ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d7f6:	697a      	ldr	r2, [r7, #20]
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	da02      	bge.n	800d804 <ip_reass_remove_oldest_datagram+0xb4>
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	2b01      	cmp	r3, #1
 800d802:	dcac      	bgt.n	800d75e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d804:	697b      	ldr	r3, [r7, #20]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3728      	adds	r7, #40	; 0x28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20000268 	.word	0x20000268

0800d814 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d81e:	2004      	movs	r0, #4
 800d820:	f7f7 f9dc 	bl	8004bdc <memp_malloc>
 800d824:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d110      	bne.n	800d84e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d82c:	6839      	ldr	r1, [r7, #0]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff ff8e 	bl	800d750 <ip_reass_remove_oldest_datagram>
 800d834:	4602      	mov	r2, r0
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	4293      	cmp	r3, r2
 800d83a:	dc03      	bgt.n	800d844 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d83c:	2004      	movs	r0, #4
 800d83e:	f7f7 f9cd 	bl	8004bdc <memp_malloc>
 800d842:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e016      	b.n	800d87c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d84e:	2220      	movs	r2, #32
 800d850:	2100      	movs	r1, #0
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 fe2e 	bl	800e4b4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	220f      	movs	r2, #15
 800d85c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d85e:	4b09      	ldr	r3, [pc, #36]	; (800d884 <ip_reass_enqueue_new_datagram+0x70>)
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d866:	4a07      	ldr	r2, [pc, #28]	; (800d884 <ip_reass_enqueue_new_datagram+0x70>)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	3308      	adds	r3, #8
 800d870:	2214      	movs	r2, #20
 800d872:	6879      	ldr	r1, [r7, #4]
 800d874:	4618      	mov	r0, r3
 800d876:	f000 fdf5 	bl	800e464 <memcpy>
  return ipr;
 800d87a:	68fb      	ldr	r3, [r7, #12]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	20000268 	.word	0x20000268

0800d888 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d892:	4b10      	ldr	r3, [pc, #64]	; (800d8d4 <ip_reass_dequeue_datagram+0x4c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d104      	bne.n	800d8a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a0c      	ldr	r2, [pc, #48]	; (800d8d4 <ip_reass_dequeue_datagram+0x4c>)
 800d8a2:	6013      	str	r3, [r2, #0]
 800d8a4:	e00d      	b.n	800d8c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <ip_reass_dequeue_datagram+0x32>
 800d8ac:	4b0a      	ldr	r3, [pc, #40]	; (800d8d8 <ip_reass_dequeue_datagram+0x50>)
 800d8ae:	f240 1245 	movw	r2, #325	; 0x145
 800d8b2:	490a      	ldr	r1, [pc, #40]	; (800d8dc <ip_reass_dequeue_datagram+0x54>)
 800d8b4:	480a      	ldr	r0, [pc, #40]	; (800d8e0 <ip_reass_dequeue_datagram+0x58>)
 800d8b6:	f000 fe05 	bl	800e4c4 <iprintf>
    prev->next = ipr->next;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681a      	ldr	r2, [r3, #0]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d8c2:	6879      	ldr	r1, [r7, #4]
 800d8c4:	2004      	movs	r0, #4
 800d8c6:	f7f7 f9d5 	bl	8004c74 <memp_free>
}
 800d8ca:	bf00      	nop
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20000268 	.word	0x20000268
 800d8d8:	08012098 	.word	0x08012098
 800d8dc:	08012160 	.word	0x08012160
 800d8e0:	080120e0 	.word	0x080120e0

0800d8e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08c      	sub	sp, #48	; 0x30
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	885b      	ldrh	r3, [r3, #2]
 800d902:	b29b      	uxth	r3, r3
 800d904:	4618      	mov	r0, r3
 800d906:	f7f6 fd13 	bl	8004330 <lwip_htons>
 800d90a:	4603      	mov	r3, r0
 800d90c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	f003 030f 	and.w	r3, r3, #15
 800d916:	b2db      	uxtb	r3, r3
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d91c:	7e7b      	ldrb	r3, [r7, #25]
 800d91e:	b29b      	uxth	r3, r3
 800d920:	8b7a      	ldrh	r2, [r7, #26]
 800d922:	429a      	cmp	r2, r3
 800d924:	d202      	bcs.n	800d92c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d926:	f04f 33ff 	mov.w	r3, #4294967295
 800d92a:	e135      	b.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d92c:	7e7b      	ldrb	r3, [r7, #25]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	8b7a      	ldrh	r2, [r7, #26]
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	88db      	ldrh	r3, [r3, #6]
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7f6 fcf7 	bl	8004330 <lwip_htons>
 800d942:	4603      	mov	r3, r0
 800d944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d948:	b29b      	uxth	r3, r3
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	2200      	movs	r2, #0
 800d958:	701a      	strb	r2, [r3, #0]
 800d95a:	2200      	movs	r2, #0
 800d95c:	705a      	strb	r2, [r3, #1]
 800d95e:	2200      	movs	r2, #0
 800d960:	709a      	strb	r2, [r3, #2]
 800d962:	2200      	movs	r2, #0
 800d964:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d968:	8afa      	ldrh	r2, [r7, #22]
 800d96a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d96c:	8afa      	ldrh	r2, [r7, #22]
 800d96e:	8b7b      	ldrh	r3, [r7, #26]
 800d970:	4413      	add	r3, r2
 800d972:	b29a      	uxth	r2, r3
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	88db      	ldrh	r3, [r3, #6]
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	8afa      	ldrh	r2, [r7, #22]
 800d980:	429a      	cmp	r2, r3
 800d982:	d902      	bls.n	800d98a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d984:	f04f 33ff 	mov.w	r3, #4294967295
 800d988:	e106      	b.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
 800d990:	e068      	b.n	800da64 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99a:	889b      	ldrh	r3, [r3, #4]
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	889b      	ldrh	r3, [r3, #4]
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d235      	bcs.n	800da14 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d020      	beq.n	800d9f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b6:	889b      	ldrh	r3, [r3, #4]
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	88db      	ldrh	r3, [r3, #6]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d307      	bcc.n	800d9d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c6:	88db      	ldrh	r3, [r3, #6]
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	889b      	ldrh	r3, [r3, #4]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d902      	bls.n	800d9da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d8:	e0de      	b.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9dc:	68ba      	ldr	r2, [r7, #8]
 800d9de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	88db      	ldrh	r3, [r3, #6]
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e8:	889b      	ldrh	r3, [r3, #4]
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d03d      	beq.n	800da6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d9f4:	e03a      	b.n	800da6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f8:	88db      	ldrh	r3, [r3, #6]
 800d9fa:	b29a      	uxth	r2, r3
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	889b      	ldrh	r3, [r3, #4]
 800da00:	b29b      	uxth	r3, r3
 800da02:	429a      	cmp	r2, r3
 800da04:	d902      	bls.n	800da0c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da06:	f04f 33ff 	mov.w	r3, #4294967295
 800da0a:	e0c5      	b.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	605a      	str	r2, [r3, #4]
      break;
 800da12:	e02b      	b.n	800da6c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800da14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da16:	889b      	ldrh	r3, [r3, #4]
 800da18:	b29a      	uxth	r2, r3
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	889b      	ldrh	r3, [r3, #4]
 800da1e:	b29b      	uxth	r3, r3
 800da20:	429a      	cmp	r2, r3
 800da22:	d102      	bne.n	800da2a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da24:	f04f 33ff 	mov.w	r3, #4294967295
 800da28:	e0b6      	b.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800da2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da2c:	889b      	ldrh	r3, [r3, #4]
 800da2e:	b29a      	uxth	r2, r3
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	88db      	ldrh	r3, [r3, #6]
 800da34:	b29b      	uxth	r3, r3
 800da36:	429a      	cmp	r2, r3
 800da38:	d202      	bcs.n	800da40 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800da3a:	f04f 33ff 	mov.w	r3, #4294967295
 800da3e:	e0ab      	b.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	2b00      	cmp	r3, #0
 800da44:	d009      	beq.n	800da5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	88db      	ldrh	r3, [r3, #6]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	889b      	ldrh	r3, [r3, #4]
 800da50:	b29b      	uxth	r3, r3
 800da52:	429a      	cmp	r2, r3
 800da54:	d001      	beq.n	800da5a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800da56:	2300      	movs	r3, #0
 800da58:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	2b00      	cmp	r3, #0
 800da68:	d193      	bne.n	800d992 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800da6a:	e000      	b.n	800da6e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800da6c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800da6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da70:	2b00      	cmp	r3, #0
 800da72:	d12d      	bne.n	800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	2b00      	cmp	r3, #0
 800da78:	d01c      	beq.n	800dab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800da7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7c:	88db      	ldrh	r3, [r3, #6]
 800da7e:	b29a      	uxth	r2, r3
 800da80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da82:	889b      	ldrh	r3, [r3, #4]
 800da84:	b29b      	uxth	r3, r3
 800da86:	429a      	cmp	r2, r3
 800da88:	d906      	bls.n	800da98 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800da8a:	4b45      	ldr	r3, [pc, #276]	; (800dba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da8c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800da90:	4944      	ldr	r1, [pc, #272]	; (800dba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800da92:	4845      	ldr	r0, [pc, #276]	; (800dba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da94:	f000 fd16 	bl	800e4c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800da98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	88db      	ldrh	r3, [r3, #6]
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	889b      	ldrh	r3, [r3, #4]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	429a      	cmp	r2, r3
 800daac:	d010      	beq.n	800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800daae:	2300      	movs	r3, #0
 800dab0:	623b      	str	r3, [r7, #32]
 800dab2:	e00d      	b.n	800dad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d006      	beq.n	800daca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dabc:	4b38      	ldr	r3, [pc, #224]	; (800dba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dabe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dac2:	493a      	ldr	r1, [pc, #232]	; (800dbac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dac4:	4838      	ldr	r0, [pc, #224]	; (800dba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dac6:	f000 fcfd 	bl	800e4c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d105      	bne.n	800dae2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	7f9b      	ldrb	r3, [r3, #30]
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d059      	beq.n	800db96 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d04f      	beq.n	800db88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d006      	beq.n	800dafe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	889b      	ldrh	r3, [r3, #4]
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	623b      	str	r3, [r7, #32]
 800db02:	e041      	b.n	800db88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800db04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db06:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800db0e:	e012      	b.n	800db36 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800db16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db18:	88db      	ldrh	r3, [r3, #6]
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1e:	889b      	ldrh	r3, [r3, #4]
 800db20:	b29b      	uxth	r3, r3
 800db22:	429a      	cmp	r2, r3
 800db24:	d002      	beq.n	800db2c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	623b      	str	r3, [r7, #32]
            break;
 800db2a:	e007      	b.n	800db3c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800db30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1e9      	bne.n	800db10 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d022      	beq.n	800db88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d106      	bne.n	800db58 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800db4a:	4b15      	ldr	r3, [pc, #84]	; (800dba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db4c:	f240 12df 	movw	r2, #479	; 0x1df
 800db50:	4917      	ldr	r1, [pc, #92]	; (800dbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800db52:	4815      	ldr	r0, [pc, #84]	; (800dba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db54:	f000 fcb6 	bl	800e4c4 <iprintf>
          LWIP_ASSERT("sanity check",
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db60:	429a      	cmp	r2, r3
 800db62:	d106      	bne.n	800db72 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800db64:	4b0e      	ldr	r3, [pc, #56]	; (800dba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db66:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800db6a:	4911      	ldr	r1, [pc, #68]	; (800dbb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800db6c:	480e      	ldr	r0, [pc, #56]	; (800dba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db6e:	f000 fca9 	bl	800e4c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800db72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d006      	beq.n	800db88 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800db7a:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800db7c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800db80:	490c      	ldr	r1, [pc, #48]	; (800dbb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800db82:	4809      	ldr	r0, [pc, #36]	; (800dba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800db84:	f000 fc9e 	bl	800e4c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800db88:	6a3b      	ldr	r3, [r7, #32]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	bf14      	ite	ne
 800db8e:	2301      	movne	r3, #1
 800db90:	2300      	moveq	r3, #0
 800db92:	b2db      	uxtb	r3, r3
 800db94:	e000      	b.n	800db98 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3730      	adds	r7, #48	; 0x30
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	08012098 	.word	0x08012098
 800dba4:	0801217c 	.word	0x0801217c
 800dba8:	080120e0 	.word	0x080120e0
 800dbac:	0801219c 	.word	0x0801219c
 800dbb0:	080121d4 	.word	0x080121d4
 800dbb4:	080121e4 	.word	0x080121e4

0800dbb8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08e      	sub	sp, #56	; 0x38
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	f003 030f 	and.w	r3, r3, #15
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	2b14      	cmp	r3, #20
 800dbd6:	f040 8167 	bne.w	800dea8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	88db      	ldrh	r3, [r3, #6]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7f6 fba5 	bl	8004330 <lwip_htons>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	885b      	ldrh	r3, [r3, #2]
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7f6 fb99 	bl	8004330 <lwip_htons>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	f003 030f 	and.w	r3, r3, #15
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800dc12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	f0c0 8146 	bcc.w	800deac <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800dc20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7f7 febb 	bl	80059a8 <pbuf_clen>
 800dc32:	4603      	mov	r3, r0
 800dc34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dc36:	4b9f      	ldr	r3, [pc, #636]	; (800deb4 <ip4_reass+0x2fc>)
 800dc38:	881b      	ldrh	r3, [r3, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	8c3b      	ldrh	r3, [r7, #32]
 800dc3e:	4413      	add	r3, r2
 800dc40:	2b0a      	cmp	r3, #10
 800dc42:	dd10      	ble.n	800dc66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dc44:	8c3b      	ldrh	r3, [r7, #32]
 800dc46:	4619      	mov	r1, r3
 800dc48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc4a:	f7ff fd81 	bl	800d750 <ip_reass_remove_oldest_datagram>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f000 812d 	beq.w	800deb0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dc56:	4b97      	ldr	r3, [pc, #604]	; (800deb4 <ip4_reass+0x2fc>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	8c3b      	ldrh	r3, [r7, #32]
 800dc5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dc60:	2b0a      	cmp	r3, #10
 800dc62:	f300 8125 	bgt.w	800deb0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dc66:	4b94      	ldr	r3, [pc, #592]	; (800deb8 <ip4_reass+0x300>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	633b      	str	r3, [r7, #48]	; 0x30
 800dc6c:	e015      	b.n	800dc9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	695a      	ldr	r2, [r3, #20]
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d10c      	bne.n	800dc94 <ip4_reass+0xdc>
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	699a      	ldr	r2, [r3, #24]
 800dc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d106      	bne.n	800dc94 <ip4_reass+0xdc>
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	899a      	ldrh	r2, [r3, #12]
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	889b      	ldrh	r3, [r3, #4]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d006      	beq.n	800dca2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	633b      	str	r3, [r7, #48]	; 0x30
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1e6      	bne.n	800dc6e <ip4_reass+0xb6>
 800dca0:	e000      	b.n	800dca4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dca2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d109      	bne.n	800dcbe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dcaa:	8c3b      	ldrh	r3, [r7, #32]
 800dcac:	4619      	mov	r1, r3
 800dcae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcb0:	f7ff fdb0 	bl	800d814 <ip_reass_enqueue_new_datagram>
 800dcb4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d11c      	bne.n	800dcf6 <ip4_reass+0x13e>
      goto nullreturn;
 800dcbc:	e109      	b.n	800ded2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	88db      	ldrh	r3, [r3, #6]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7f6 fb33 	bl	8004330 <lwip_htons>
 800dcca:	4603      	mov	r3, r0
 800dccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d110      	bne.n	800dcf6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd6:	89db      	ldrh	r3, [r3, #14]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7f6 fb29 	bl	8004330 <lwip_htons>
 800dcde:	4603      	mov	r3, r0
 800dce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d006      	beq.n	800dcf6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	3308      	adds	r3, #8
 800dcec:	2214      	movs	r2, #20
 800dcee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 fbb7 	bl	800e464 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	88db      	ldrh	r3, [r3, #6]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	f003 0320 	and.w	r3, r3, #32
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	bf0c      	ite	eq
 800dd04:	2301      	moveq	r3, #1
 800dd06:	2300      	movne	r3, #0
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d00e      	beq.n	800dd30 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dd12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd16:	4413      	add	r3, r2
 800dd18:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dd1a:	8b7a      	ldrh	r2, [r7, #26]
 800dd1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	f0c0 80a0 	bcc.w	800de64 <ip4_reass+0x2ac>
 800dd24:	8b7b      	ldrh	r3, [r7, #26]
 800dd26:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	f200 809a 	bhi.w	800de64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dd30:	69fa      	ldr	r2, [r7, #28]
 800dd32:	6879      	ldr	r1, [r7, #4]
 800dd34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd36:	f7ff fdd5 	bl	800d8e4 <ip_reass_chain_frag_into_datagram_and_validate>
 800dd3a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd42:	f000 8091 	beq.w	800de68 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dd46:	4b5b      	ldr	r3, [pc, #364]	; (800deb4 <ip4_reass+0x2fc>)
 800dd48:	881a      	ldrh	r2, [r3, #0]
 800dd4a:	8c3b      	ldrh	r3, [r7, #32]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	4b58      	ldr	r3, [pc, #352]	; (800deb4 <ip4_reass+0x2fc>)
 800dd52:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00d      	beq.n	800dd76 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dd5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dd5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd5e:	4413      	add	r3, r2
 800dd60:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	8a7a      	ldrh	r2, [r7, #18]
 800dd66:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6a:	7f9b      	ldrb	r3, [r3, #30]
 800dd6c:	f043 0301 	orr.w	r3, r3, #1
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd74:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d171      	bne.n	800de60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7e:	8b9b      	ldrh	r3, [r3, #28]
 800dd80:	3314      	adds	r3, #20
 800dd82:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd98:	3308      	adds	r3, #8
 800dd9a:	2214      	movs	r2, #20
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda0:	f000 fb60 	bl	800e464 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dda4:	8a3b      	ldrh	r3, [r7, #16]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7f6 fac2 	bl	8004330 <lwip_htons>
 800ddac:	4603      	mov	r3, r0
 800ddae:	461a      	mov	r2, r3
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ddb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	719a      	strb	r2, [r3, #6]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	729a      	strb	r2, [r3, #10]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ddc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ddce:	e00d      	b.n	800ddec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ddd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ddd6:	2114      	movs	r1, #20
 800ddd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ddda:	f7f7 fcd7 	bl	800578c <pbuf_remove_header>
      pbuf_cat(p, r);
 800ddde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7f7 fe1b 	bl	8005a1c <pbuf_cat>
      r = iprh->next_pbuf;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ddec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1ee      	bne.n	800ddd0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ddf2:	4b31      	ldr	r3, [pc, #196]	; (800deb8 <ip4_reass+0x300>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d102      	bne.n	800de02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de00:	e010      	b.n	800de24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800de02:	4b2d      	ldr	r3, [pc, #180]	; (800deb8 <ip4_reass+0x300>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de08:	e007      	b.n	800de1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de10:	429a      	cmp	r2, r3
 800de12:	d006      	beq.n	800de22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1f4      	bne.n	800de0a <ip4_reass+0x252>
 800de20:	e000      	b.n	800de24 <ip4_reass+0x26c>
          break;
 800de22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800de24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de28:	f7ff fd2e 	bl	800d888 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7f7 fdbb 	bl	80059a8 <pbuf_clen>
 800de32:	4603      	mov	r3, r0
 800de34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800de36:	4b1f      	ldr	r3, [pc, #124]	; (800deb4 <ip4_reass+0x2fc>)
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	8c3a      	ldrh	r2, [r7, #32]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d906      	bls.n	800de4e <ip4_reass+0x296>
 800de40:	4b1e      	ldr	r3, [pc, #120]	; (800debc <ip4_reass+0x304>)
 800de42:	f240 229b 	movw	r2, #667	; 0x29b
 800de46:	491e      	ldr	r1, [pc, #120]	; (800dec0 <ip4_reass+0x308>)
 800de48:	481e      	ldr	r0, [pc, #120]	; (800dec4 <ip4_reass+0x30c>)
 800de4a:	f000 fb3b 	bl	800e4c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800de4e:	4b19      	ldr	r3, [pc, #100]	; (800deb4 <ip4_reass+0x2fc>)
 800de50:	881a      	ldrh	r2, [r3, #0]
 800de52:	8c3b      	ldrh	r3, [r7, #32]
 800de54:	1ad3      	subs	r3, r2, r3
 800de56:	b29a      	uxth	r2, r3
 800de58:	4b16      	ldr	r3, [pc, #88]	; (800deb4 <ip4_reass+0x2fc>)
 800de5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	e03c      	b.n	800deda <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800de60:	2300      	movs	r3, #0
 800de62:	e03a      	b.n	800deda <ip4_reass+0x322>
      goto nullreturn_ipr;
 800de64:	bf00      	nop
 800de66:	e000      	b.n	800de6a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800de68:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d106      	bne.n	800de7e <ip4_reass+0x2c6>
 800de70:	4b12      	ldr	r3, [pc, #72]	; (800debc <ip4_reass+0x304>)
 800de72:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800de76:	4914      	ldr	r1, [pc, #80]	; (800dec8 <ip4_reass+0x310>)
 800de78:	4812      	ldr	r0, [pc, #72]	; (800dec4 <ip4_reass+0x30c>)
 800de7a:	f000 fb23 	bl	800e4c4 <iprintf>
  if (ipr->p == NULL) {
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d124      	bne.n	800ded0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800de86:	4b0c      	ldr	r3, [pc, #48]	; (800deb8 <ip4_reass+0x300>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de8c:	429a      	cmp	r2, r3
 800de8e:	d006      	beq.n	800de9e <ip4_reass+0x2e6>
 800de90:	4b0a      	ldr	r3, [pc, #40]	; (800debc <ip4_reass+0x304>)
 800de92:	f240 22ab 	movw	r2, #683	; 0x2ab
 800de96:	490d      	ldr	r1, [pc, #52]	; (800decc <ip4_reass+0x314>)
 800de98:	480a      	ldr	r0, [pc, #40]	; (800dec4 <ip4_reass+0x30c>)
 800de9a:	f000 fb13 	bl	800e4c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800de9e:	2100      	movs	r1, #0
 800dea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dea2:	f7ff fcf1 	bl	800d888 <ip_reass_dequeue_datagram>
 800dea6:	e014      	b.n	800ded2 <ip4_reass+0x31a>
    goto nullreturn;
 800dea8:	bf00      	nop
 800deaa:	e012      	b.n	800ded2 <ip4_reass+0x31a>
    goto nullreturn;
 800deac:	bf00      	nop
 800deae:	e010      	b.n	800ded2 <ip4_reass+0x31a>
      goto nullreturn;
 800deb0:	bf00      	nop
 800deb2:	e00e      	b.n	800ded2 <ip4_reass+0x31a>
 800deb4:	2000026c 	.word	0x2000026c
 800deb8:	20000268 	.word	0x20000268
 800debc:	08012098 	.word	0x08012098
 800dec0:	08012208 	.word	0x08012208
 800dec4:	080120e0 	.word	0x080120e0
 800dec8:	08012224 	.word	0x08012224
 800decc:	08012230 	.word	0x08012230
  }

nullreturn:
 800ded0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7f7 fce0 	bl	8005898 <pbuf_free>
  return NULL;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3738      	adds	r7, #56	; 0x38
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop

0800dee4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dee8:	2005      	movs	r0, #5
 800deea:	f7f6 fe77 	bl	8004bdc <memp_malloc>
 800deee:	4603      	mov	r3, r0
}
 800def0:	4618      	mov	r0, r3
 800def2:	bd80      	pop	{r7, pc}

0800def4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <ip_frag_free_pbuf_custom_ref+0x1c>
 800df02:	4b07      	ldr	r3, [pc, #28]	; (800df20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800df04:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800df08:	4906      	ldr	r1, [pc, #24]	; (800df24 <ip_frag_free_pbuf_custom_ref+0x30>)
 800df0a:	4807      	ldr	r0, [pc, #28]	; (800df28 <ip_frag_free_pbuf_custom_ref+0x34>)
 800df0c:	f000 fada 	bl	800e4c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800df10:	6879      	ldr	r1, [r7, #4]
 800df12:	2005      	movs	r0, #5
 800df14:	f7f6 feae 	bl	8004c74 <memp_free>
}
 800df18:	bf00      	nop
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	08012098 	.word	0x08012098
 800df24:	08012250 	.word	0x08012250
 800df28:	080120e0 	.word	0x080120e0

0800df2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d106      	bne.n	800df4c <ipfrag_free_pbuf_custom+0x20>
 800df3e:	4b11      	ldr	r3, [pc, #68]	; (800df84 <ipfrag_free_pbuf_custom+0x58>)
 800df40:	f240 22ce 	movw	r2, #718	; 0x2ce
 800df44:	4910      	ldr	r1, [pc, #64]	; (800df88 <ipfrag_free_pbuf_custom+0x5c>)
 800df46:	4811      	ldr	r0, [pc, #68]	; (800df8c <ipfrag_free_pbuf_custom+0x60>)
 800df48:	f000 fabc 	bl	800e4c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	429a      	cmp	r2, r3
 800df52:	d006      	beq.n	800df62 <ipfrag_free_pbuf_custom+0x36>
 800df54:	4b0b      	ldr	r3, [pc, #44]	; (800df84 <ipfrag_free_pbuf_custom+0x58>)
 800df56:	f240 22cf 	movw	r2, #719	; 0x2cf
 800df5a:	490d      	ldr	r1, [pc, #52]	; (800df90 <ipfrag_free_pbuf_custom+0x64>)
 800df5c:	480b      	ldr	r0, [pc, #44]	; (800df8c <ipfrag_free_pbuf_custom+0x60>)
 800df5e:	f000 fab1 	bl	800e4c4 <iprintf>
  if (pcr->original != NULL) {
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d004      	beq.n	800df74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	695b      	ldr	r3, [r3, #20]
 800df6e:	4618      	mov	r0, r3
 800df70:	f7f7 fc92 	bl	8005898 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f7ff ffbd 	bl	800def4 <ip_frag_free_pbuf_custom_ref>
}
 800df7a:	bf00      	nop
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	08012098 	.word	0x08012098
 800df88:	0801225c 	.word	0x0801225c
 800df8c:	080120e0 	.word	0x080120e0
 800df90:	08012268 	.word	0x08012268

0800df94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b094      	sub	sp, #80	; 0x50
 800df98:	af02      	add	r7, sp, #8
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	60b9      	str	r1, [r7, #8]
 800df9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfaa:	3b14      	subs	r3, #20
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	da00      	bge.n	800dfb2 <ip4_frag+0x1e>
 800dfb0:	3307      	adds	r3, #7
 800dfb2:	10db      	asrs	r3, r3, #3
 800dfb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dfb6:	2314      	movs	r3, #20
 800dfb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800dfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f003 030f 	and.w	r3, r3, #15
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b14      	cmp	r3, #20
 800dfd4:	d002      	beq.n	800dfdc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dfd6:	f06f 0305 	mvn.w	r3, #5
 800dfda:	e110      	b.n	800e1fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	895b      	ldrh	r3, [r3, #10]
 800dfe0:	2b13      	cmp	r3, #19
 800dfe2:	d809      	bhi.n	800dff8 <ip4_frag+0x64>
 800dfe4:	4b88      	ldr	r3, [pc, #544]	; (800e208 <ip4_frag+0x274>)
 800dfe6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dfea:	4988      	ldr	r1, [pc, #544]	; (800e20c <ip4_frag+0x278>)
 800dfec:	4888      	ldr	r0, [pc, #544]	; (800e210 <ip4_frag+0x27c>)
 800dfee:	f000 fa69 	bl	800e4c4 <iprintf>
 800dff2:	f06f 0305 	mvn.w	r3, #5
 800dff6:	e102      	b.n	800e1fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffa:	88db      	ldrh	r3, [r3, #6]
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	4618      	mov	r0, r3
 800e000:	f7f6 f996 	bl	8004330 <lwip_htons>
 800e004:	4603      	mov	r3, r0
 800e006:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e008:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e00a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e00e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e012:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e018:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	891b      	ldrh	r3, [r3, #8]
 800e01e:	3b14      	subs	r3, #20
 800e020:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e024:	e0e1      	b.n	800e1ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e026:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e030:	4293      	cmp	r3, r2
 800e032:	bf28      	it	cs
 800e034:	4613      	movcs	r3, r2
 800e036:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e038:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e03c:	2114      	movs	r1, #20
 800e03e:	200e      	movs	r0, #14
 800e040:	f7f7 f946 	bl	80052d0 <pbuf_alloc>
 800e044:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 80d5 	beq.w	800e1f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	895b      	ldrh	r3, [r3, #10]
 800e052:	2b13      	cmp	r3, #19
 800e054:	d806      	bhi.n	800e064 <ip4_frag+0xd0>
 800e056:	4b6c      	ldr	r3, [pc, #432]	; (800e208 <ip4_frag+0x274>)
 800e058:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e05c:	496d      	ldr	r1, [pc, #436]	; (800e214 <ip4_frag+0x280>)
 800e05e:	486c      	ldr	r0, [pc, #432]	; (800e210 <ip4_frag+0x27c>)
 800e060:	f000 fa30 	bl	800e4c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	2214      	movs	r2, #20
 800e06a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e06c:	4618      	mov	r0, r3
 800e06e:	f000 f9f9 	bl	800e464 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e078:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e07a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e07e:	e064      	b.n	800e14a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	895a      	ldrh	r2, [r3, #10]
 800e084:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e086:	1ad3      	subs	r3, r2, r3
 800e088:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	895b      	ldrh	r3, [r3, #10]
 800e08e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e090:	429a      	cmp	r2, r3
 800e092:	d906      	bls.n	800e0a2 <ip4_frag+0x10e>
 800e094:	4b5c      	ldr	r3, [pc, #368]	; (800e208 <ip4_frag+0x274>)
 800e096:	f240 322d 	movw	r2, #813	; 0x32d
 800e09a:	495f      	ldr	r1, [pc, #380]	; (800e218 <ip4_frag+0x284>)
 800e09c:	485c      	ldr	r0, [pc, #368]	; (800e210 <ip4_frag+0x27c>)
 800e09e:	f000 fa11 	bl	800e4c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e0a2:	8bfa      	ldrh	r2, [r7, #30]
 800e0a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	bf28      	it	cs
 800e0ac:	4613      	movcs	r3, r2
 800e0ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e0b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d105      	bne.n	800e0c6 <ip4_frag+0x132>
        poff = 0;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	60fb      	str	r3, [r7, #12]
        continue;
 800e0c4:	e041      	b.n	800e14a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e0c6:	f7ff ff0d 	bl	800dee4 <ip_frag_alloc_pbuf_custom_ref>
 800e0ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d103      	bne.n	800e0da <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0d4:	f7f7 fbe0 	bl	8005898 <pbuf_free>
        goto memerr;
 800e0d8:	e08f      	b.n	800e1fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e0da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e0e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e0e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e0ec:	9201      	str	r2, [sp, #4]
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2241      	movs	r2, #65	; 0x41
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	f7f7 fa15 	bl	8005524 <pbuf_alloced_custom>
 800e0fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d106      	bne.n	800e110 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e102:	69b8      	ldr	r0, [r7, #24]
 800e104:	f7ff fef6 	bl	800def4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e10a:	f7f7 fbc5 	bl	8005898 <pbuf_free>
        goto memerr;
 800e10e:	e074      	b.n	800e1fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f7f7 fc61 	bl	80059d8 <pbuf_ref>
      pcr->original = p;
 800e116:	69bb      	ldr	r3, [r7, #24]
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	4a3f      	ldr	r2, [pc, #252]	; (800e21c <ip4_frag+0x288>)
 800e120:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e122:	6979      	ldr	r1, [r7, #20]
 800e124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e126:	f7f7 fc79 	bl	8005a1c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e12a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e12e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e138:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d004      	beq.n	800e14a <ip4_frag+0x1b6>
        poff = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e14a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d196      	bne.n	800e080 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e152:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e154:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e158:	4413      	add	r3, r2
 800e15a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e160:	f1a3 0213 	sub.w	r2, r3, #19
 800e164:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e168:	429a      	cmp	r2, r3
 800e16a:	bfcc      	ite	gt
 800e16c:	2301      	movgt	r3, #1
 800e16e:	2300      	movle	r3, #0
 800e170:	b2db      	uxtb	r3, r3
 800e172:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e174:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e17c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <ip4_frag+0x1f6>
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	2b00      	cmp	r3, #0
 800e188:	d003      	beq.n	800e192 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e18a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e18c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e190:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e194:	4618      	mov	r0, r3
 800e196:	f7f6 f8cb 	bl	8004330 <lwip_htons>
 800e19a:	4603      	mov	r3, r0
 800e19c:	461a      	mov	r2, r3
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e1a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1a4:	3314      	adds	r3, #20
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7f6 f8c1 	bl	8004330 <lwip_htons>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	729a      	strb	r2, [r3, #10]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1c8:	68b8      	ldr	r0, [r7, #8]
 800e1ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e1cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ce:	f7f7 fb63 	bl	8005898 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e1d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e1d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1d8:	1ad3      	subs	r3, r2, r3
 800e1da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e1de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e1e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e1e4:	4413      	add	r3, r2
 800e1e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e1ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	f47f af19 	bne.w	800e026 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e002      	b.n	800e1fe <ip4_frag+0x26a>
      goto memerr;
 800e1f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e1fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3748      	adds	r7, #72	; 0x48
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	08012098 	.word	0x08012098
 800e20c:	08012274 	.word	0x08012274
 800e210:	080120e0 	.word	0x080120e0
 800e214:	08012290 	.word	0x08012290
 800e218:	080122b0 	.word	0x080122b0
 800e21c:	0800df2d 	.word	0x0800df2d

0800e220 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e22a:	230e      	movs	r3, #14
 800e22c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	895b      	ldrh	r3, [r3, #10]
 800e232:	2b0e      	cmp	r3, #14
 800e234:	d96e      	bls.n	800e314 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	7bdb      	ldrb	r3, [r3, #15]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d106      	bne.n	800e24c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e244:	3301      	adds	r3, #1
 800e246:	b2da      	uxtb	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	7b1a      	ldrb	r2, [r3, #12]
 800e256:	7b5b      	ldrb	r3, [r3, #13]
 800e258:	021b      	lsls	r3, r3, #8
 800e25a:	4313      	orrs	r3, r2
 800e25c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	2b00      	cmp	r3, #0
 800e268:	d023      	beq.n	800e2b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d10f      	bne.n	800e292 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	785b      	ldrb	r3, [r3, #1]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d11b      	bne.n	800e2b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e27e:	2b5e      	cmp	r3, #94	; 0x5e
 800e280:	d117      	bne.n	800e2b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	7b5b      	ldrb	r3, [r3, #13]
 800e286:	f043 0310 	orr.w	r3, r3, #16
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	735a      	strb	r2, [r3, #13]
 800e290:	e00f      	b.n	800e2b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	2206      	movs	r2, #6
 800e296:	4928      	ldr	r1, [pc, #160]	; (800e338 <ethernet_input+0x118>)
 800e298:	4618      	mov	r0, r3
 800e29a:	f000 f8d5 	bl	800e448 <memcmp>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	7b5b      	ldrb	r3, [r3, #13]
 800e2a8:	f043 0308 	orr.w	r3, r3, #8
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e2b2:	89fb      	ldrh	r3, [r7, #14]
 800e2b4:	2b08      	cmp	r3, #8
 800e2b6:	d003      	beq.n	800e2c0 <ethernet_input+0xa0>
 800e2b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e2bc:	d014      	beq.n	800e2e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e2be:	e032      	b.n	800e326 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e2c6:	f003 0308 	and.w	r3, r3, #8
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d024      	beq.n	800e318 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e2ce:	8afb      	ldrh	r3, [r7, #22]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7f7 fa5a 	bl	800578c <pbuf_remove_header>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d11e      	bne.n	800e31c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7fe ff27 	bl	800d134 <ip4_input>
      break;
 800e2e6:	e013      	b.n	800e310 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e2ee:	f003 0308 	and.w	r3, r3, #8
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d014      	beq.n	800e320 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e2f6:	8afb      	ldrh	r3, [r7, #22]
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7f7 fa46 	bl	800578c <pbuf_remove_header>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10e      	bne.n	800e324 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f7fe f8c9 	bl	800c4a0 <etharp_input>
      break;
 800e30e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	e00c      	b.n	800e32e <ethernet_input+0x10e>
    goto free_and_return;
 800e314:	bf00      	nop
 800e316:	e006      	b.n	800e326 <ethernet_input+0x106>
        goto free_and_return;
 800e318:	bf00      	nop
 800e31a:	e004      	b.n	800e326 <ethernet_input+0x106>
        goto free_and_return;
 800e31c:	bf00      	nop
 800e31e:	e002      	b.n	800e326 <ethernet_input+0x106>
        goto free_and_return;
 800e320:	bf00      	nop
 800e322:	e000      	b.n	800e326 <ethernet_input+0x106>
        goto free_and_return;
 800e324:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7f7 fab6 	bl	8005898 <pbuf_free>
  return ERR_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	08012438 	.word	0x08012438

0800e33c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
 800e348:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e34a:	8c3b      	ldrh	r3, [r7, #32]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7f5 ffef 	bl	8004330 <lwip_htons>
 800e352:	4603      	mov	r3, r0
 800e354:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e356:	210e      	movs	r1, #14
 800e358:	68b8      	ldr	r0, [r7, #8]
 800e35a:	f7f7 fa07 	bl	800576c <pbuf_add_header>
 800e35e:	4603      	mov	r3, r0
 800e360:	2b00      	cmp	r3, #0
 800e362:	d125      	bne.n	800e3b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	8afa      	ldrh	r2, [r7, #22]
 800e36e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	2206      	movs	r2, #6
 800e374:	6839      	ldr	r1, [r7, #0]
 800e376:	4618      	mov	r0, r3
 800e378:	f000 f874 	bl	800e464 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	3306      	adds	r3, #6
 800e380:	2206      	movs	r2, #6
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	4618      	mov	r0, r3
 800e386:	f000 f86d 	bl	800e464 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e390:	2b06      	cmp	r3, #6
 800e392:	d006      	beq.n	800e3a2 <ethernet_output+0x66>
 800e394:	4b0a      	ldr	r3, [pc, #40]	; (800e3c0 <ethernet_output+0x84>)
 800e396:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e39a:	490a      	ldr	r1, [pc, #40]	; (800e3c4 <ethernet_output+0x88>)
 800e39c:	480a      	ldr	r0, [pc, #40]	; (800e3c8 <ethernet_output+0x8c>)
 800e39e:	f000 f891 	bl	800e4c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	699b      	ldr	r3, [r3, #24]
 800e3a6:	68b9      	ldr	r1, [r7, #8]
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	4798      	blx	r3
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	e002      	b.n	800e3b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e3b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e3b2:	f06f 0301 	mvn.w	r3, #1
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3718      	adds	r7, #24
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	080122c0 	.word	0x080122c0
 800e3c4:	080122f8 	.word	0x080122f8
 800e3c8:	0801232c 	.word	0x0801232c

0800e3cc <__libc_init_array>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	4d0d      	ldr	r5, [pc, #52]	; (800e404 <__libc_init_array+0x38>)
 800e3d0:	4c0d      	ldr	r4, [pc, #52]	; (800e408 <__libc_init_array+0x3c>)
 800e3d2:	1b64      	subs	r4, r4, r5
 800e3d4:	10a4      	asrs	r4, r4, #2
 800e3d6:	2600      	movs	r6, #0
 800e3d8:	42a6      	cmp	r6, r4
 800e3da:	d109      	bne.n	800e3f0 <__libc_init_array+0x24>
 800e3dc:	4d0b      	ldr	r5, [pc, #44]	; (800e40c <__libc_init_array+0x40>)
 800e3de:	4c0c      	ldr	r4, [pc, #48]	; (800e410 <__libc_init_array+0x44>)
 800e3e0:	f001 fa8a 	bl	800f8f8 <_init>
 800e3e4:	1b64      	subs	r4, r4, r5
 800e3e6:	10a4      	asrs	r4, r4, #2
 800e3e8:	2600      	movs	r6, #0
 800e3ea:	42a6      	cmp	r6, r4
 800e3ec:	d105      	bne.n	800e3fa <__libc_init_array+0x2e>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3f4:	4798      	blx	r3
 800e3f6:	3601      	adds	r6, #1
 800e3f8:	e7ee      	b.n	800e3d8 <__libc_init_array+0xc>
 800e3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fe:	4798      	blx	r3
 800e400:	3601      	adds	r6, #1
 800e402:	e7f2      	b.n	800e3ea <__libc_init_array+0x1e>
 800e404:	080125c0 	.word	0x080125c0
 800e408:	080125c0 	.word	0x080125c0
 800e40c:	080125c0 	.word	0x080125c0
 800e410:	080125c4 	.word	0x080125c4

0800e414 <__itoa>:
 800e414:	1e93      	subs	r3, r2, #2
 800e416:	2b22      	cmp	r3, #34	; 0x22
 800e418:	b510      	push	{r4, lr}
 800e41a:	460c      	mov	r4, r1
 800e41c:	d904      	bls.n	800e428 <__itoa+0x14>
 800e41e:	2300      	movs	r3, #0
 800e420:	700b      	strb	r3, [r1, #0]
 800e422:	461c      	mov	r4, r3
 800e424:	4620      	mov	r0, r4
 800e426:	bd10      	pop	{r4, pc}
 800e428:	2a0a      	cmp	r2, #10
 800e42a:	d109      	bne.n	800e440 <__itoa+0x2c>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	da07      	bge.n	800e440 <__itoa+0x2c>
 800e430:	232d      	movs	r3, #45	; 0x2d
 800e432:	700b      	strb	r3, [r1, #0]
 800e434:	4240      	negs	r0, r0
 800e436:	2101      	movs	r1, #1
 800e438:	4421      	add	r1, r4
 800e43a:	f000 f8cf 	bl	800e5dc <__utoa>
 800e43e:	e7f1      	b.n	800e424 <__itoa+0x10>
 800e440:	2100      	movs	r1, #0
 800e442:	e7f9      	b.n	800e438 <__itoa+0x24>

0800e444 <itoa>:
 800e444:	f7ff bfe6 	b.w	800e414 <__itoa>

0800e448 <memcmp>:
 800e448:	b530      	push	{r4, r5, lr}
 800e44a:	3901      	subs	r1, #1
 800e44c:	2400      	movs	r4, #0
 800e44e:	42a2      	cmp	r2, r4
 800e450:	d101      	bne.n	800e456 <memcmp+0xe>
 800e452:	2000      	movs	r0, #0
 800e454:	e005      	b.n	800e462 <memcmp+0x1a>
 800e456:	5d03      	ldrb	r3, [r0, r4]
 800e458:	3401      	adds	r4, #1
 800e45a:	5d0d      	ldrb	r5, [r1, r4]
 800e45c:	42ab      	cmp	r3, r5
 800e45e:	d0f6      	beq.n	800e44e <memcmp+0x6>
 800e460:	1b58      	subs	r0, r3, r5
 800e462:	bd30      	pop	{r4, r5, pc}

0800e464 <memcpy>:
 800e464:	440a      	add	r2, r1
 800e466:	4291      	cmp	r1, r2
 800e468:	f100 33ff 	add.w	r3, r0, #4294967295
 800e46c:	d100      	bne.n	800e470 <memcpy+0xc>
 800e46e:	4770      	bx	lr
 800e470:	b510      	push	{r4, lr}
 800e472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e476:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e47a:	4291      	cmp	r1, r2
 800e47c:	d1f9      	bne.n	800e472 <memcpy+0xe>
 800e47e:	bd10      	pop	{r4, pc}

0800e480 <memmove>:
 800e480:	4288      	cmp	r0, r1
 800e482:	b510      	push	{r4, lr}
 800e484:	eb01 0402 	add.w	r4, r1, r2
 800e488:	d902      	bls.n	800e490 <memmove+0x10>
 800e48a:	4284      	cmp	r4, r0
 800e48c:	4623      	mov	r3, r4
 800e48e:	d807      	bhi.n	800e4a0 <memmove+0x20>
 800e490:	1e43      	subs	r3, r0, #1
 800e492:	42a1      	cmp	r1, r4
 800e494:	d008      	beq.n	800e4a8 <memmove+0x28>
 800e496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e49a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e49e:	e7f8      	b.n	800e492 <memmove+0x12>
 800e4a0:	4402      	add	r2, r0
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	428a      	cmp	r2, r1
 800e4a6:	d100      	bne.n	800e4aa <memmove+0x2a>
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4b2:	e7f7      	b.n	800e4a4 <memmove+0x24>

0800e4b4 <memset>:
 800e4b4:	4402      	add	r2, r0
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d100      	bne.n	800e4be <memset+0xa>
 800e4bc:	4770      	bx	lr
 800e4be:	f803 1b01 	strb.w	r1, [r3], #1
 800e4c2:	e7f9      	b.n	800e4b8 <memset+0x4>

0800e4c4 <iprintf>:
 800e4c4:	b40f      	push	{r0, r1, r2, r3}
 800e4c6:	4b0a      	ldr	r3, [pc, #40]	; (800e4f0 <iprintf+0x2c>)
 800e4c8:	b513      	push	{r0, r1, r4, lr}
 800e4ca:	681c      	ldr	r4, [r3, #0]
 800e4cc:	b124      	cbz	r4, 800e4d8 <iprintf+0x14>
 800e4ce:	69a3      	ldr	r3, [r4, #24]
 800e4d0:	b913      	cbnz	r3, 800e4d8 <iprintf+0x14>
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f000 f93a 	bl	800e74c <__sinit>
 800e4d8:	ab05      	add	r3, sp, #20
 800e4da:	9a04      	ldr	r2, [sp, #16]
 800e4dc:	68a1      	ldr	r1, [r4, #8]
 800e4de:	9301      	str	r3, [sp, #4]
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f000 fc1d 	bl	800ed20 <_vfiprintf_r>
 800e4e6:	b002      	add	sp, #8
 800e4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4ec:	b004      	add	sp, #16
 800e4ee:	4770      	bx	lr
 800e4f0:	20000034 	.word	0x20000034

0800e4f4 <rand>:
 800e4f4:	4b17      	ldr	r3, [pc, #92]	; (800e554 <rand+0x60>)
 800e4f6:	b510      	push	{r4, lr}
 800e4f8:	681c      	ldr	r4, [r3, #0]
 800e4fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e4fc:	b9b3      	cbnz	r3, 800e52c <rand+0x38>
 800e4fe:	2018      	movs	r0, #24
 800e500:	f000 f9d6 	bl	800e8b0 <malloc>
 800e504:	63a0      	str	r0, [r4, #56]	; 0x38
 800e506:	b928      	cbnz	r0, 800e514 <rand+0x20>
 800e508:	4602      	mov	r2, r0
 800e50a:	4b13      	ldr	r3, [pc, #76]	; (800e558 <rand+0x64>)
 800e50c:	4813      	ldr	r0, [pc, #76]	; (800e55c <rand+0x68>)
 800e50e:	214e      	movs	r1, #78	; 0x4e
 800e510:	f000 f8a6 	bl	800e660 <__assert_func>
 800e514:	4a12      	ldr	r2, [pc, #72]	; (800e560 <rand+0x6c>)
 800e516:	4b13      	ldr	r3, [pc, #76]	; (800e564 <rand+0x70>)
 800e518:	e9c0 2300 	strd	r2, r3, [r0]
 800e51c:	4b12      	ldr	r3, [pc, #72]	; (800e568 <rand+0x74>)
 800e51e:	6083      	str	r3, [r0, #8]
 800e520:	230b      	movs	r3, #11
 800e522:	8183      	strh	r3, [r0, #12]
 800e524:	2201      	movs	r2, #1
 800e526:	2300      	movs	r3, #0
 800e528:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e52c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e52e:	480f      	ldr	r0, [pc, #60]	; (800e56c <rand+0x78>)
 800e530:	690a      	ldr	r2, [r1, #16]
 800e532:	694b      	ldr	r3, [r1, #20]
 800e534:	4c0e      	ldr	r4, [pc, #56]	; (800e570 <rand+0x7c>)
 800e536:	4350      	muls	r0, r2
 800e538:	fb04 0003 	mla	r0, r4, r3, r0
 800e53c:	fba2 3404 	umull	r3, r4, r2, r4
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	4404      	add	r4, r0
 800e544:	f144 0000 	adc.w	r0, r4, #0
 800e548:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e54c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e550:	bd10      	pop	{r4, pc}
 800e552:	bf00      	nop
 800e554:	20000034 	.word	0x20000034
 800e558:	0801244c 	.word	0x0801244c
 800e55c:	08012463 	.word	0x08012463
 800e560:	abcd330e 	.word	0xabcd330e
 800e564:	e66d1234 	.word	0xe66d1234
 800e568:	0005deec 	.word	0x0005deec
 800e56c:	5851f42d 	.word	0x5851f42d
 800e570:	4c957f2d 	.word	0x4c957f2d

0800e574 <siprintf>:
 800e574:	b40e      	push	{r1, r2, r3}
 800e576:	b500      	push	{lr}
 800e578:	b09c      	sub	sp, #112	; 0x70
 800e57a:	ab1d      	add	r3, sp, #116	; 0x74
 800e57c:	9002      	str	r0, [sp, #8]
 800e57e:	9006      	str	r0, [sp, #24]
 800e580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e584:	4809      	ldr	r0, [pc, #36]	; (800e5ac <siprintf+0x38>)
 800e586:	9107      	str	r1, [sp, #28]
 800e588:	9104      	str	r1, [sp, #16]
 800e58a:	4909      	ldr	r1, [pc, #36]	; (800e5b0 <siprintf+0x3c>)
 800e58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e590:	9105      	str	r1, [sp, #20]
 800e592:	6800      	ldr	r0, [r0, #0]
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	a902      	add	r1, sp, #8
 800e598:	f000 fa98 	bl	800eacc <_svfiprintf_r>
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	b01c      	add	sp, #112	; 0x70
 800e5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5a8:	b003      	add	sp, #12
 800e5aa:	4770      	bx	lr
 800e5ac:	20000034 	.word	0x20000034
 800e5b0:	ffff0208 	.word	0xffff0208

0800e5b4 <strncpy>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	3901      	subs	r1, #1
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	b132      	cbz	r2, 800e5ca <strncpy+0x16>
 800e5bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e5c0:	f803 4b01 	strb.w	r4, [r3], #1
 800e5c4:	3a01      	subs	r2, #1
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	d1f7      	bne.n	800e5ba <strncpy+0x6>
 800e5ca:	441a      	add	r2, r3
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d100      	bne.n	800e5d4 <strncpy+0x20>
 800e5d2:	bd10      	pop	{r4, pc}
 800e5d4:	f803 1b01 	strb.w	r1, [r3], #1
 800e5d8:	e7f9      	b.n	800e5ce <strncpy+0x1a>
	...

0800e5dc <__utoa>:
 800e5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5de:	4c1f      	ldr	r4, [pc, #124]	; (800e65c <__utoa+0x80>)
 800e5e0:	b08b      	sub	sp, #44	; 0x2c
 800e5e2:	4605      	mov	r5, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	466e      	mov	r6, sp
 800e5e8:	f104 0c20 	add.w	ip, r4, #32
 800e5ec:	6820      	ldr	r0, [r4, #0]
 800e5ee:	6861      	ldr	r1, [r4, #4]
 800e5f0:	4637      	mov	r7, r6
 800e5f2:	c703      	stmia	r7!, {r0, r1}
 800e5f4:	3408      	adds	r4, #8
 800e5f6:	4564      	cmp	r4, ip
 800e5f8:	463e      	mov	r6, r7
 800e5fa:	d1f7      	bne.n	800e5ec <__utoa+0x10>
 800e5fc:	7921      	ldrb	r1, [r4, #4]
 800e5fe:	7139      	strb	r1, [r7, #4]
 800e600:	1e91      	subs	r1, r2, #2
 800e602:	6820      	ldr	r0, [r4, #0]
 800e604:	6038      	str	r0, [r7, #0]
 800e606:	2922      	cmp	r1, #34	; 0x22
 800e608:	f04f 0100 	mov.w	r1, #0
 800e60c:	d904      	bls.n	800e618 <__utoa+0x3c>
 800e60e:	7019      	strb	r1, [r3, #0]
 800e610:	460b      	mov	r3, r1
 800e612:	4618      	mov	r0, r3
 800e614:	b00b      	add	sp, #44	; 0x2c
 800e616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e618:	1e58      	subs	r0, r3, #1
 800e61a:	4684      	mov	ip, r0
 800e61c:	fbb5 f7f2 	udiv	r7, r5, r2
 800e620:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800e624:	fb02 5617 	mls	r6, r2, r7, r5
 800e628:	4476      	add	r6, lr
 800e62a:	460c      	mov	r4, r1
 800e62c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e630:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e634:	462e      	mov	r6, r5
 800e636:	42b2      	cmp	r2, r6
 800e638:	f101 0101 	add.w	r1, r1, #1
 800e63c:	463d      	mov	r5, r7
 800e63e:	d9ed      	bls.n	800e61c <__utoa+0x40>
 800e640:	2200      	movs	r2, #0
 800e642:	545a      	strb	r2, [r3, r1]
 800e644:	1919      	adds	r1, r3, r4
 800e646:	1aa5      	subs	r5, r4, r2
 800e648:	42aa      	cmp	r2, r5
 800e64a:	dae2      	bge.n	800e612 <__utoa+0x36>
 800e64c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e650:	780e      	ldrb	r6, [r1, #0]
 800e652:	7006      	strb	r6, [r0, #0]
 800e654:	3201      	adds	r2, #1
 800e656:	f801 5901 	strb.w	r5, [r1], #-1
 800e65a:	e7f4      	b.n	800e646 <__utoa+0x6a>
 800e65c:	080124c2 	.word	0x080124c2

0800e660 <__assert_func>:
 800e660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e662:	4614      	mov	r4, r2
 800e664:	461a      	mov	r2, r3
 800e666:	4b09      	ldr	r3, [pc, #36]	; (800e68c <__assert_func+0x2c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4605      	mov	r5, r0
 800e66c:	68d8      	ldr	r0, [r3, #12]
 800e66e:	b14c      	cbz	r4, 800e684 <__assert_func+0x24>
 800e670:	4b07      	ldr	r3, [pc, #28]	; (800e690 <__assert_func+0x30>)
 800e672:	9100      	str	r1, [sp, #0]
 800e674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e678:	4906      	ldr	r1, [pc, #24]	; (800e694 <__assert_func+0x34>)
 800e67a:	462b      	mov	r3, r5
 800e67c:	f000 f8e4 	bl	800e848 <fiprintf>
 800e680:	f000 ff38 	bl	800f4f4 <abort>
 800e684:	4b04      	ldr	r3, [pc, #16]	; (800e698 <__assert_func+0x38>)
 800e686:	461c      	mov	r4, r3
 800e688:	e7f3      	b.n	800e672 <__assert_func+0x12>
 800e68a:	bf00      	nop
 800e68c:	20000034 	.word	0x20000034
 800e690:	080124e7 	.word	0x080124e7
 800e694:	080124f4 	.word	0x080124f4
 800e698:	08012522 	.word	0x08012522

0800e69c <std>:
 800e69c:	2300      	movs	r3, #0
 800e69e:	b510      	push	{r4, lr}
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	e9c0 3300 	strd	r3, r3, [r0]
 800e6a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6aa:	6083      	str	r3, [r0, #8]
 800e6ac:	8181      	strh	r1, [r0, #12]
 800e6ae:	6643      	str	r3, [r0, #100]	; 0x64
 800e6b0:	81c2      	strh	r2, [r0, #14]
 800e6b2:	6183      	str	r3, [r0, #24]
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	2208      	movs	r2, #8
 800e6b8:	305c      	adds	r0, #92	; 0x5c
 800e6ba:	f7ff fefb 	bl	800e4b4 <memset>
 800e6be:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <std+0x38>)
 800e6c0:	6263      	str	r3, [r4, #36]	; 0x24
 800e6c2:	4b05      	ldr	r3, [pc, #20]	; (800e6d8 <std+0x3c>)
 800e6c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6c6:	4b05      	ldr	r3, [pc, #20]	; (800e6dc <std+0x40>)
 800e6c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6ca:	4b05      	ldr	r3, [pc, #20]	; (800e6e0 <std+0x44>)
 800e6cc:	6224      	str	r4, [r4, #32]
 800e6ce:	6323      	str	r3, [r4, #48]	; 0x30
 800e6d0:	bd10      	pop	{r4, pc}
 800e6d2:	bf00      	nop
 800e6d4:	0800f2c9 	.word	0x0800f2c9
 800e6d8:	0800f2eb 	.word	0x0800f2eb
 800e6dc:	0800f323 	.word	0x0800f323
 800e6e0:	0800f347 	.word	0x0800f347

0800e6e4 <_cleanup_r>:
 800e6e4:	4901      	ldr	r1, [pc, #4]	; (800e6ec <_cleanup_r+0x8>)
 800e6e6:	f000 b8c1 	b.w	800e86c <_fwalk_reent>
 800e6ea:	bf00      	nop
 800e6ec:	0800f631 	.word	0x0800f631

0800e6f0 <__sfmoreglue>:
 800e6f0:	b570      	push	{r4, r5, r6, lr}
 800e6f2:	1e4a      	subs	r2, r1, #1
 800e6f4:	2568      	movs	r5, #104	; 0x68
 800e6f6:	4355      	muls	r5, r2
 800e6f8:	460e      	mov	r6, r1
 800e6fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6fe:	f000 f92f 	bl	800e960 <_malloc_r>
 800e702:	4604      	mov	r4, r0
 800e704:	b140      	cbz	r0, 800e718 <__sfmoreglue+0x28>
 800e706:	2100      	movs	r1, #0
 800e708:	e9c0 1600 	strd	r1, r6, [r0]
 800e70c:	300c      	adds	r0, #12
 800e70e:	60a0      	str	r0, [r4, #8]
 800e710:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e714:	f7ff fece 	bl	800e4b4 <memset>
 800e718:	4620      	mov	r0, r4
 800e71a:	bd70      	pop	{r4, r5, r6, pc}

0800e71c <__sfp_lock_acquire>:
 800e71c:	4801      	ldr	r0, [pc, #4]	; (800e724 <__sfp_lock_acquire+0x8>)
 800e71e:	f000 b8c5 	b.w	800e8ac <__retarget_lock_acquire_recursive>
 800e722:	bf00      	nop
 800e724:	20008bc8 	.word	0x20008bc8

0800e728 <__sfp_lock_release>:
 800e728:	4801      	ldr	r0, [pc, #4]	; (800e730 <__sfp_lock_release+0x8>)
 800e72a:	f000 b8c0 	b.w	800e8ae <__retarget_lock_release_recursive>
 800e72e:	bf00      	nop
 800e730:	20008bc8 	.word	0x20008bc8

0800e734 <__sinit_lock_acquire>:
 800e734:	4801      	ldr	r0, [pc, #4]	; (800e73c <__sinit_lock_acquire+0x8>)
 800e736:	f000 b8b9 	b.w	800e8ac <__retarget_lock_acquire_recursive>
 800e73a:	bf00      	nop
 800e73c:	20008bc3 	.word	0x20008bc3

0800e740 <__sinit_lock_release>:
 800e740:	4801      	ldr	r0, [pc, #4]	; (800e748 <__sinit_lock_release+0x8>)
 800e742:	f000 b8b4 	b.w	800e8ae <__retarget_lock_release_recursive>
 800e746:	bf00      	nop
 800e748:	20008bc3 	.word	0x20008bc3

0800e74c <__sinit>:
 800e74c:	b510      	push	{r4, lr}
 800e74e:	4604      	mov	r4, r0
 800e750:	f7ff fff0 	bl	800e734 <__sinit_lock_acquire>
 800e754:	69a3      	ldr	r3, [r4, #24]
 800e756:	b11b      	cbz	r3, 800e760 <__sinit+0x14>
 800e758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e75c:	f7ff bff0 	b.w	800e740 <__sinit_lock_release>
 800e760:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e764:	6523      	str	r3, [r4, #80]	; 0x50
 800e766:	4b13      	ldr	r3, [pc, #76]	; (800e7b4 <__sinit+0x68>)
 800e768:	4a13      	ldr	r2, [pc, #76]	; (800e7b8 <__sinit+0x6c>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e76e:	42a3      	cmp	r3, r4
 800e770:	bf04      	itt	eq
 800e772:	2301      	moveq	r3, #1
 800e774:	61a3      	streq	r3, [r4, #24]
 800e776:	4620      	mov	r0, r4
 800e778:	f000 f820 	bl	800e7bc <__sfp>
 800e77c:	6060      	str	r0, [r4, #4]
 800e77e:	4620      	mov	r0, r4
 800e780:	f000 f81c 	bl	800e7bc <__sfp>
 800e784:	60a0      	str	r0, [r4, #8]
 800e786:	4620      	mov	r0, r4
 800e788:	f000 f818 	bl	800e7bc <__sfp>
 800e78c:	2200      	movs	r2, #0
 800e78e:	60e0      	str	r0, [r4, #12]
 800e790:	2104      	movs	r1, #4
 800e792:	6860      	ldr	r0, [r4, #4]
 800e794:	f7ff ff82 	bl	800e69c <std>
 800e798:	68a0      	ldr	r0, [r4, #8]
 800e79a:	2201      	movs	r2, #1
 800e79c:	2109      	movs	r1, #9
 800e79e:	f7ff ff7d 	bl	800e69c <std>
 800e7a2:	68e0      	ldr	r0, [r4, #12]
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	2112      	movs	r1, #18
 800e7a8:	f7ff ff78 	bl	800e69c <std>
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	61a3      	str	r3, [r4, #24]
 800e7b0:	e7d2      	b.n	800e758 <__sinit+0xc>
 800e7b2:	bf00      	nop
 800e7b4:	08012448 	.word	0x08012448
 800e7b8:	0800e6e5 	.word	0x0800e6e5

0800e7bc <__sfp>:
 800e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7be:	4607      	mov	r7, r0
 800e7c0:	f7ff ffac 	bl	800e71c <__sfp_lock_acquire>
 800e7c4:	4b1e      	ldr	r3, [pc, #120]	; (800e840 <__sfp+0x84>)
 800e7c6:	681e      	ldr	r6, [r3, #0]
 800e7c8:	69b3      	ldr	r3, [r6, #24]
 800e7ca:	b913      	cbnz	r3, 800e7d2 <__sfp+0x16>
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f7ff ffbd 	bl	800e74c <__sinit>
 800e7d2:	3648      	adds	r6, #72	; 0x48
 800e7d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7d8:	3b01      	subs	r3, #1
 800e7da:	d503      	bpl.n	800e7e4 <__sfp+0x28>
 800e7dc:	6833      	ldr	r3, [r6, #0]
 800e7de:	b30b      	cbz	r3, 800e824 <__sfp+0x68>
 800e7e0:	6836      	ldr	r6, [r6, #0]
 800e7e2:	e7f7      	b.n	800e7d4 <__sfp+0x18>
 800e7e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7e8:	b9d5      	cbnz	r5, 800e820 <__sfp+0x64>
 800e7ea:	4b16      	ldr	r3, [pc, #88]	; (800e844 <__sfp+0x88>)
 800e7ec:	60e3      	str	r3, [r4, #12]
 800e7ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7f2:	6665      	str	r5, [r4, #100]	; 0x64
 800e7f4:	f000 f859 	bl	800e8aa <__retarget_lock_init_recursive>
 800e7f8:	f7ff ff96 	bl	800e728 <__sfp_lock_release>
 800e7fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e804:	6025      	str	r5, [r4, #0]
 800e806:	61a5      	str	r5, [r4, #24]
 800e808:	2208      	movs	r2, #8
 800e80a:	4629      	mov	r1, r5
 800e80c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e810:	f7ff fe50 	bl	800e4b4 <memset>
 800e814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e81c:	4620      	mov	r0, r4
 800e81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e820:	3468      	adds	r4, #104	; 0x68
 800e822:	e7d9      	b.n	800e7d8 <__sfp+0x1c>
 800e824:	2104      	movs	r1, #4
 800e826:	4638      	mov	r0, r7
 800e828:	f7ff ff62 	bl	800e6f0 <__sfmoreglue>
 800e82c:	4604      	mov	r4, r0
 800e82e:	6030      	str	r0, [r6, #0]
 800e830:	2800      	cmp	r0, #0
 800e832:	d1d5      	bne.n	800e7e0 <__sfp+0x24>
 800e834:	f7ff ff78 	bl	800e728 <__sfp_lock_release>
 800e838:	230c      	movs	r3, #12
 800e83a:	603b      	str	r3, [r7, #0]
 800e83c:	e7ee      	b.n	800e81c <__sfp+0x60>
 800e83e:	bf00      	nop
 800e840:	08012448 	.word	0x08012448
 800e844:	ffff0001 	.word	0xffff0001

0800e848 <fiprintf>:
 800e848:	b40e      	push	{r1, r2, r3}
 800e84a:	b503      	push	{r0, r1, lr}
 800e84c:	4601      	mov	r1, r0
 800e84e:	ab03      	add	r3, sp, #12
 800e850:	4805      	ldr	r0, [pc, #20]	; (800e868 <fiprintf+0x20>)
 800e852:	f853 2b04 	ldr.w	r2, [r3], #4
 800e856:	6800      	ldr	r0, [r0, #0]
 800e858:	9301      	str	r3, [sp, #4]
 800e85a:	f000 fa61 	bl	800ed20 <_vfiprintf_r>
 800e85e:	b002      	add	sp, #8
 800e860:	f85d eb04 	ldr.w	lr, [sp], #4
 800e864:	b003      	add	sp, #12
 800e866:	4770      	bx	lr
 800e868:	20000034 	.word	0x20000034

0800e86c <_fwalk_reent>:
 800e86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e870:	4606      	mov	r6, r0
 800e872:	4688      	mov	r8, r1
 800e874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e878:	2700      	movs	r7, #0
 800e87a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e87e:	f1b9 0901 	subs.w	r9, r9, #1
 800e882:	d505      	bpl.n	800e890 <_fwalk_reent+0x24>
 800e884:	6824      	ldr	r4, [r4, #0]
 800e886:	2c00      	cmp	r4, #0
 800e888:	d1f7      	bne.n	800e87a <_fwalk_reent+0xe>
 800e88a:	4638      	mov	r0, r7
 800e88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e890:	89ab      	ldrh	r3, [r5, #12]
 800e892:	2b01      	cmp	r3, #1
 800e894:	d907      	bls.n	800e8a6 <_fwalk_reent+0x3a>
 800e896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e89a:	3301      	adds	r3, #1
 800e89c:	d003      	beq.n	800e8a6 <_fwalk_reent+0x3a>
 800e89e:	4629      	mov	r1, r5
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	47c0      	blx	r8
 800e8a4:	4307      	orrs	r7, r0
 800e8a6:	3568      	adds	r5, #104	; 0x68
 800e8a8:	e7e9      	b.n	800e87e <_fwalk_reent+0x12>

0800e8aa <__retarget_lock_init_recursive>:
 800e8aa:	4770      	bx	lr

0800e8ac <__retarget_lock_acquire_recursive>:
 800e8ac:	4770      	bx	lr

0800e8ae <__retarget_lock_release_recursive>:
 800e8ae:	4770      	bx	lr

0800e8b0 <malloc>:
 800e8b0:	4b02      	ldr	r3, [pc, #8]	; (800e8bc <malloc+0xc>)
 800e8b2:	4601      	mov	r1, r0
 800e8b4:	6818      	ldr	r0, [r3, #0]
 800e8b6:	f000 b853 	b.w	800e960 <_malloc_r>
 800e8ba:	bf00      	nop
 800e8bc:	20000034 	.word	0x20000034

0800e8c0 <_free_r>:
 800e8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8c2:	2900      	cmp	r1, #0
 800e8c4:	d048      	beq.n	800e958 <_free_r+0x98>
 800e8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ca:	9001      	str	r0, [sp, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f1a1 0404 	sub.w	r4, r1, #4
 800e8d2:	bfb8      	it	lt
 800e8d4:	18e4      	addlt	r4, r4, r3
 800e8d6:	f000 ff5d 	bl	800f794 <__malloc_lock>
 800e8da:	4a20      	ldr	r2, [pc, #128]	; (800e95c <_free_r+0x9c>)
 800e8dc:	9801      	ldr	r0, [sp, #4]
 800e8de:	6813      	ldr	r3, [r2, #0]
 800e8e0:	4615      	mov	r5, r2
 800e8e2:	b933      	cbnz	r3, 800e8f2 <_free_r+0x32>
 800e8e4:	6063      	str	r3, [r4, #4]
 800e8e6:	6014      	str	r4, [r2, #0]
 800e8e8:	b003      	add	sp, #12
 800e8ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8ee:	f000 bf57 	b.w	800f7a0 <__malloc_unlock>
 800e8f2:	42a3      	cmp	r3, r4
 800e8f4:	d90b      	bls.n	800e90e <_free_r+0x4e>
 800e8f6:	6821      	ldr	r1, [r4, #0]
 800e8f8:	1862      	adds	r2, r4, r1
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	bf04      	itt	eq
 800e8fe:	681a      	ldreq	r2, [r3, #0]
 800e900:	685b      	ldreq	r3, [r3, #4]
 800e902:	6063      	str	r3, [r4, #4]
 800e904:	bf04      	itt	eq
 800e906:	1852      	addeq	r2, r2, r1
 800e908:	6022      	streq	r2, [r4, #0]
 800e90a:	602c      	str	r4, [r5, #0]
 800e90c:	e7ec      	b.n	800e8e8 <_free_r+0x28>
 800e90e:	461a      	mov	r2, r3
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	b10b      	cbz	r3, 800e918 <_free_r+0x58>
 800e914:	42a3      	cmp	r3, r4
 800e916:	d9fa      	bls.n	800e90e <_free_r+0x4e>
 800e918:	6811      	ldr	r1, [r2, #0]
 800e91a:	1855      	adds	r5, r2, r1
 800e91c:	42a5      	cmp	r5, r4
 800e91e:	d10b      	bne.n	800e938 <_free_r+0x78>
 800e920:	6824      	ldr	r4, [r4, #0]
 800e922:	4421      	add	r1, r4
 800e924:	1854      	adds	r4, r2, r1
 800e926:	42a3      	cmp	r3, r4
 800e928:	6011      	str	r1, [r2, #0]
 800e92a:	d1dd      	bne.n	800e8e8 <_free_r+0x28>
 800e92c:	681c      	ldr	r4, [r3, #0]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	6053      	str	r3, [r2, #4]
 800e932:	4421      	add	r1, r4
 800e934:	6011      	str	r1, [r2, #0]
 800e936:	e7d7      	b.n	800e8e8 <_free_r+0x28>
 800e938:	d902      	bls.n	800e940 <_free_r+0x80>
 800e93a:	230c      	movs	r3, #12
 800e93c:	6003      	str	r3, [r0, #0]
 800e93e:	e7d3      	b.n	800e8e8 <_free_r+0x28>
 800e940:	6825      	ldr	r5, [r4, #0]
 800e942:	1961      	adds	r1, r4, r5
 800e944:	428b      	cmp	r3, r1
 800e946:	bf04      	itt	eq
 800e948:	6819      	ldreq	r1, [r3, #0]
 800e94a:	685b      	ldreq	r3, [r3, #4]
 800e94c:	6063      	str	r3, [r4, #4]
 800e94e:	bf04      	itt	eq
 800e950:	1949      	addeq	r1, r1, r5
 800e952:	6021      	streq	r1, [r4, #0]
 800e954:	6054      	str	r4, [r2, #4]
 800e956:	e7c7      	b.n	800e8e8 <_free_r+0x28>
 800e958:	b003      	add	sp, #12
 800e95a:	bd30      	pop	{r4, r5, pc}
 800e95c:	20000270 	.word	0x20000270

0800e960 <_malloc_r>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	1ccd      	adds	r5, r1, #3
 800e964:	f025 0503 	bic.w	r5, r5, #3
 800e968:	3508      	adds	r5, #8
 800e96a:	2d0c      	cmp	r5, #12
 800e96c:	bf38      	it	cc
 800e96e:	250c      	movcc	r5, #12
 800e970:	2d00      	cmp	r5, #0
 800e972:	4606      	mov	r6, r0
 800e974:	db01      	blt.n	800e97a <_malloc_r+0x1a>
 800e976:	42a9      	cmp	r1, r5
 800e978:	d903      	bls.n	800e982 <_malloc_r+0x22>
 800e97a:	230c      	movs	r3, #12
 800e97c:	6033      	str	r3, [r6, #0]
 800e97e:	2000      	movs	r0, #0
 800e980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e982:	f000 ff07 	bl	800f794 <__malloc_lock>
 800e986:	4921      	ldr	r1, [pc, #132]	; (800ea0c <_malloc_r+0xac>)
 800e988:	680a      	ldr	r2, [r1, #0]
 800e98a:	4614      	mov	r4, r2
 800e98c:	b99c      	cbnz	r4, 800e9b6 <_malloc_r+0x56>
 800e98e:	4f20      	ldr	r7, [pc, #128]	; (800ea10 <_malloc_r+0xb0>)
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	b923      	cbnz	r3, 800e99e <_malloc_r+0x3e>
 800e994:	4621      	mov	r1, r4
 800e996:	4630      	mov	r0, r6
 800e998:	f000 fc86 	bl	800f2a8 <_sbrk_r>
 800e99c:	6038      	str	r0, [r7, #0]
 800e99e:	4629      	mov	r1, r5
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	f000 fc81 	bl	800f2a8 <_sbrk_r>
 800e9a6:	1c43      	adds	r3, r0, #1
 800e9a8:	d123      	bne.n	800e9f2 <_malloc_r+0x92>
 800e9aa:	230c      	movs	r3, #12
 800e9ac:	6033      	str	r3, [r6, #0]
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f000 fef6 	bl	800f7a0 <__malloc_unlock>
 800e9b4:	e7e3      	b.n	800e97e <_malloc_r+0x1e>
 800e9b6:	6823      	ldr	r3, [r4, #0]
 800e9b8:	1b5b      	subs	r3, r3, r5
 800e9ba:	d417      	bmi.n	800e9ec <_malloc_r+0x8c>
 800e9bc:	2b0b      	cmp	r3, #11
 800e9be:	d903      	bls.n	800e9c8 <_malloc_r+0x68>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	441c      	add	r4, r3
 800e9c4:	6025      	str	r5, [r4, #0]
 800e9c6:	e004      	b.n	800e9d2 <_malloc_r+0x72>
 800e9c8:	6863      	ldr	r3, [r4, #4]
 800e9ca:	42a2      	cmp	r2, r4
 800e9cc:	bf0c      	ite	eq
 800e9ce:	600b      	streq	r3, [r1, #0]
 800e9d0:	6053      	strne	r3, [r2, #4]
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f000 fee4 	bl	800f7a0 <__malloc_unlock>
 800e9d8:	f104 000b 	add.w	r0, r4, #11
 800e9dc:	1d23      	adds	r3, r4, #4
 800e9de:	f020 0007 	bic.w	r0, r0, #7
 800e9e2:	1ac2      	subs	r2, r0, r3
 800e9e4:	d0cc      	beq.n	800e980 <_malloc_r+0x20>
 800e9e6:	1a1b      	subs	r3, r3, r0
 800e9e8:	50a3      	str	r3, [r4, r2]
 800e9ea:	e7c9      	b.n	800e980 <_malloc_r+0x20>
 800e9ec:	4622      	mov	r2, r4
 800e9ee:	6864      	ldr	r4, [r4, #4]
 800e9f0:	e7cc      	b.n	800e98c <_malloc_r+0x2c>
 800e9f2:	1cc4      	adds	r4, r0, #3
 800e9f4:	f024 0403 	bic.w	r4, r4, #3
 800e9f8:	42a0      	cmp	r0, r4
 800e9fa:	d0e3      	beq.n	800e9c4 <_malloc_r+0x64>
 800e9fc:	1a21      	subs	r1, r4, r0
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f000 fc52 	bl	800f2a8 <_sbrk_r>
 800ea04:	3001      	adds	r0, #1
 800ea06:	d1dd      	bne.n	800e9c4 <_malloc_r+0x64>
 800ea08:	e7cf      	b.n	800e9aa <_malloc_r+0x4a>
 800ea0a:	bf00      	nop
 800ea0c:	20000270 	.word	0x20000270
 800ea10:	20000274 	.word	0x20000274

0800ea14 <__ssputs_r>:
 800ea14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea18:	688e      	ldr	r6, [r1, #8]
 800ea1a:	429e      	cmp	r6, r3
 800ea1c:	4682      	mov	sl, r0
 800ea1e:	460c      	mov	r4, r1
 800ea20:	4690      	mov	r8, r2
 800ea22:	461f      	mov	r7, r3
 800ea24:	d838      	bhi.n	800ea98 <__ssputs_r+0x84>
 800ea26:	898a      	ldrh	r2, [r1, #12]
 800ea28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea2c:	d032      	beq.n	800ea94 <__ssputs_r+0x80>
 800ea2e:	6825      	ldr	r5, [r4, #0]
 800ea30:	6909      	ldr	r1, [r1, #16]
 800ea32:	eba5 0901 	sub.w	r9, r5, r1
 800ea36:	6965      	ldr	r5, [r4, #20]
 800ea38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea40:	3301      	adds	r3, #1
 800ea42:	444b      	add	r3, r9
 800ea44:	106d      	asrs	r5, r5, #1
 800ea46:	429d      	cmp	r5, r3
 800ea48:	bf38      	it	cc
 800ea4a:	461d      	movcc	r5, r3
 800ea4c:	0553      	lsls	r3, r2, #21
 800ea4e:	d531      	bpl.n	800eab4 <__ssputs_r+0xa0>
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7ff ff85 	bl	800e960 <_malloc_r>
 800ea56:	4606      	mov	r6, r0
 800ea58:	b950      	cbnz	r0, 800ea70 <__ssputs_r+0x5c>
 800ea5a:	230c      	movs	r3, #12
 800ea5c:	f8ca 3000 	str.w	r3, [sl]
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea66:	81a3      	strh	r3, [r4, #12]
 800ea68:	f04f 30ff 	mov.w	r0, #4294967295
 800ea6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea70:	6921      	ldr	r1, [r4, #16]
 800ea72:	464a      	mov	r2, r9
 800ea74:	f7ff fcf6 	bl	800e464 <memcpy>
 800ea78:	89a3      	ldrh	r3, [r4, #12]
 800ea7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea82:	81a3      	strh	r3, [r4, #12]
 800ea84:	6126      	str	r6, [r4, #16]
 800ea86:	6165      	str	r5, [r4, #20]
 800ea88:	444e      	add	r6, r9
 800ea8a:	eba5 0509 	sub.w	r5, r5, r9
 800ea8e:	6026      	str	r6, [r4, #0]
 800ea90:	60a5      	str	r5, [r4, #8]
 800ea92:	463e      	mov	r6, r7
 800ea94:	42be      	cmp	r6, r7
 800ea96:	d900      	bls.n	800ea9a <__ssputs_r+0x86>
 800ea98:	463e      	mov	r6, r7
 800ea9a:	4632      	mov	r2, r6
 800ea9c:	6820      	ldr	r0, [r4, #0]
 800ea9e:	4641      	mov	r1, r8
 800eaa0:	f7ff fcee 	bl	800e480 <memmove>
 800eaa4:	68a3      	ldr	r3, [r4, #8]
 800eaa6:	6822      	ldr	r2, [r4, #0]
 800eaa8:	1b9b      	subs	r3, r3, r6
 800eaaa:	4432      	add	r2, r6
 800eaac:	60a3      	str	r3, [r4, #8]
 800eaae:	6022      	str	r2, [r4, #0]
 800eab0:	2000      	movs	r0, #0
 800eab2:	e7db      	b.n	800ea6c <__ssputs_r+0x58>
 800eab4:	462a      	mov	r2, r5
 800eab6:	f000 fe79 	bl	800f7ac <_realloc_r>
 800eaba:	4606      	mov	r6, r0
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d1e1      	bne.n	800ea84 <__ssputs_r+0x70>
 800eac0:	6921      	ldr	r1, [r4, #16]
 800eac2:	4650      	mov	r0, sl
 800eac4:	f7ff fefc 	bl	800e8c0 <_free_r>
 800eac8:	e7c7      	b.n	800ea5a <__ssputs_r+0x46>
	...

0800eacc <_svfiprintf_r>:
 800eacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ead0:	4698      	mov	r8, r3
 800ead2:	898b      	ldrh	r3, [r1, #12]
 800ead4:	061b      	lsls	r3, r3, #24
 800ead6:	b09d      	sub	sp, #116	; 0x74
 800ead8:	4607      	mov	r7, r0
 800eada:	460d      	mov	r5, r1
 800eadc:	4614      	mov	r4, r2
 800eade:	d50e      	bpl.n	800eafe <_svfiprintf_r+0x32>
 800eae0:	690b      	ldr	r3, [r1, #16]
 800eae2:	b963      	cbnz	r3, 800eafe <_svfiprintf_r+0x32>
 800eae4:	2140      	movs	r1, #64	; 0x40
 800eae6:	f7ff ff3b 	bl	800e960 <_malloc_r>
 800eaea:	6028      	str	r0, [r5, #0]
 800eaec:	6128      	str	r0, [r5, #16]
 800eaee:	b920      	cbnz	r0, 800eafa <_svfiprintf_r+0x2e>
 800eaf0:	230c      	movs	r3, #12
 800eaf2:	603b      	str	r3, [r7, #0]
 800eaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800eaf8:	e0d1      	b.n	800ec9e <_svfiprintf_r+0x1d2>
 800eafa:	2340      	movs	r3, #64	; 0x40
 800eafc:	616b      	str	r3, [r5, #20]
 800eafe:	2300      	movs	r3, #0
 800eb00:	9309      	str	r3, [sp, #36]	; 0x24
 800eb02:	2320      	movs	r3, #32
 800eb04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb08:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb0c:	2330      	movs	r3, #48	; 0x30
 800eb0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ecb8 <_svfiprintf_r+0x1ec>
 800eb12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb16:	f04f 0901 	mov.w	r9, #1
 800eb1a:	4623      	mov	r3, r4
 800eb1c:	469a      	mov	sl, r3
 800eb1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb22:	b10a      	cbz	r2, 800eb28 <_svfiprintf_r+0x5c>
 800eb24:	2a25      	cmp	r2, #37	; 0x25
 800eb26:	d1f9      	bne.n	800eb1c <_svfiprintf_r+0x50>
 800eb28:	ebba 0b04 	subs.w	fp, sl, r4
 800eb2c:	d00b      	beq.n	800eb46 <_svfiprintf_r+0x7a>
 800eb2e:	465b      	mov	r3, fp
 800eb30:	4622      	mov	r2, r4
 800eb32:	4629      	mov	r1, r5
 800eb34:	4638      	mov	r0, r7
 800eb36:	f7ff ff6d 	bl	800ea14 <__ssputs_r>
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	f000 80aa 	beq.w	800ec94 <_svfiprintf_r+0x1c8>
 800eb40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb42:	445a      	add	r2, fp
 800eb44:	9209      	str	r2, [sp, #36]	; 0x24
 800eb46:	f89a 3000 	ldrb.w	r3, [sl]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	f000 80a2 	beq.w	800ec94 <_svfiprintf_r+0x1c8>
 800eb50:	2300      	movs	r3, #0
 800eb52:	f04f 32ff 	mov.w	r2, #4294967295
 800eb56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb5a:	f10a 0a01 	add.w	sl, sl, #1
 800eb5e:	9304      	str	r3, [sp, #16]
 800eb60:	9307      	str	r3, [sp, #28]
 800eb62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb66:	931a      	str	r3, [sp, #104]	; 0x68
 800eb68:	4654      	mov	r4, sl
 800eb6a:	2205      	movs	r2, #5
 800eb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb70:	4851      	ldr	r0, [pc, #324]	; (800ecb8 <_svfiprintf_r+0x1ec>)
 800eb72:	f7f1 fb3d 	bl	80001f0 <memchr>
 800eb76:	9a04      	ldr	r2, [sp, #16]
 800eb78:	b9d8      	cbnz	r0, 800ebb2 <_svfiprintf_r+0xe6>
 800eb7a:	06d0      	lsls	r0, r2, #27
 800eb7c:	bf44      	itt	mi
 800eb7e:	2320      	movmi	r3, #32
 800eb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb84:	0711      	lsls	r1, r2, #28
 800eb86:	bf44      	itt	mi
 800eb88:	232b      	movmi	r3, #43	; 0x2b
 800eb8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb8e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb92:	2b2a      	cmp	r3, #42	; 0x2a
 800eb94:	d015      	beq.n	800ebc2 <_svfiprintf_r+0xf6>
 800eb96:	9a07      	ldr	r2, [sp, #28]
 800eb98:	4654      	mov	r4, sl
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	f04f 0c0a 	mov.w	ip, #10
 800eba0:	4621      	mov	r1, r4
 800eba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eba6:	3b30      	subs	r3, #48	; 0x30
 800eba8:	2b09      	cmp	r3, #9
 800ebaa:	d94e      	bls.n	800ec4a <_svfiprintf_r+0x17e>
 800ebac:	b1b0      	cbz	r0, 800ebdc <_svfiprintf_r+0x110>
 800ebae:	9207      	str	r2, [sp, #28]
 800ebb0:	e014      	b.n	800ebdc <_svfiprintf_r+0x110>
 800ebb2:	eba0 0308 	sub.w	r3, r0, r8
 800ebb6:	fa09 f303 	lsl.w	r3, r9, r3
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	9304      	str	r3, [sp, #16]
 800ebbe:	46a2      	mov	sl, r4
 800ebc0:	e7d2      	b.n	800eb68 <_svfiprintf_r+0x9c>
 800ebc2:	9b03      	ldr	r3, [sp, #12]
 800ebc4:	1d19      	adds	r1, r3, #4
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	9103      	str	r1, [sp, #12]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	bfbb      	ittet	lt
 800ebce:	425b      	neglt	r3, r3
 800ebd0:	f042 0202 	orrlt.w	r2, r2, #2
 800ebd4:	9307      	strge	r3, [sp, #28]
 800ebd6:	9307      	strlt	r3, [sp, #28]
 800ebd8:	bfb8      	it	lt
 800ebda:	9204      	strlt	r2, [sp, #16]
 800ebdc:	7823      	ldrb	r3, [r4, #0]
 800ebde:	2b2e      	cmp	r3, #46	; 0x2e
 800ebe0:	d10c      	bne.n	800ebfc <_svfiprintf_r+0x130>
 800ebe2:	7863      	ldrb	r3, [r4, #1]
 800ebe4:	2b2a      	cmp	r3, #42	; 0x2a
 800ebe6:	d135      	bne.n	800ec54 <_svfiprintf_r+0x188>
 800ebe8:	9b03      	ldr	r3, [sp, #12]
 800ebea:	1d1a      	adds	r2, r3, #4
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	9203      	str	r2, [sp, #12]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	bfb8      	it	lt
 800ebf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebf8:	3402      	adds	r4, #2
 800ebfa:	9305      	str	r3, [sp, #20]
 800ebfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ecc8 <_svfiprintf_r+0x1fc>
 800ec00:	7821      	ldrb	r1, [r4, #0]
 800ec02:	2203      	movs	r2, #3
 800ec04:	4650      	mov	r0, sl
 800ec06:	f7f1 faf3 	bl	80001f0 <memchr>
 800ec0a:	b140      	cbz	r0, 800ec1e <_svfiprintf_r+0x152>
 800ec0c:	2340      	movs	r3, #64	; 0x40
 800ec0e:	eba0 000a 	sub.w	r0, r0, sl
 800ec12:	fa03 f000 	lsl.w	r0, r3, r0
 800ec16:	9b04      	ldr	r3, [sp, #16]
 800ec18:	4303      	orrs	r3, r0
 800ec1a:	3401      	adds	r4, #1
 800ec1c:	9304      	str	r3, [sp, #16]
 800ec1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec22:	4826      	ldr	r0, [pc, #152]	; (800ecbc <_svfiprintf_r+0x1f0>)
 800ec24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec28:	2206      	movs	r2, #6
 800ec2a:	f7f1 fae1 	bl	80001f0 <memchr>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d038      	beq.n	800eca4 <_svfiprintf_r+0x1d8>
 800ec32:	4b23      	ldr	r3, [pc, #140]	; (800ecc0 <_svfiprintf_r+0x1f4>)
 800ec34:	bb1b      	cbnz	r3, 800ec7e <_svfiprintf_r+0x1b2>
 800ec36:	9b03      	ldr	r3, [sp, #12]
 800ec38:	3307      	adds	r3, #7
 800ec3a:	f023 0307 	bic.w	r3, r3, #7
 800ec3e:	3308      	adds	r3, #8
 800ec40:	9303      	str	r3, [sp, #12]
 800ec42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec44:	4433      	add	r3, r6
 800ec46:	9309      	str	r3, [sp, #36]	; 0x24
 800ec48:	e767      	b.n	800eb1a <_svfiprintf_r+0x4e>
 800ec4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec4e:	460c      	mov	r4, r1
 800ec50:	2001      	movs	r0, #1
 800ec52:	e7a5      	b.n	800eba0 <_svfiprintf_r+0xd4>
 800ec54:	2300      	movs	r3, #0
 800ec56:	3401      	adds	r4, #1
 800ec58:	9305      	str	r3, [sp, #20]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	f04f 0c0a 	mov.w	ip, #10
 800ec60:	4620      	mov	r0, r4
 800ec62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec66:	3a30      	subs	r2, #48	; 0x30
 800ec68:	2a09      	cmp	r2, #9
 800ec6a:	d903      	bls.n	800ec74 <_svfiprintf_r+0x1a8>
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d0c5      	beq.n	800ebfc <_svfiprintf_r+0x130>
 800ec70:	9105      	str	r1, [sp, #20]
 800ec72:	e7c3      	b.n	800ebfc <_svfiprintf_r+0x130>
 800ec74:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec78:	4604      	mov	r4, r0
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e7f0      	b.n	800ec60 <_svfiprintf_r+0x194>
 800ec7e:	ab03      	add	r3, sp, #12
 800ec80:	9300      	str	r3, [sp, #0]
 800ec82:	462a      	mov	r2, r5
 800ec84:	4b0f      	ldr	r3, [pc, #60]	; (800ecc4 <_svfiprintf_r+0x1f8>)
 800ec86:	a904      	add	r1, sp, #16
 800ec88:	4638      	mov	r0, r7
 800ec8a:	f3af 8000 	nop.w
 800ec8e:	1c42      	adds	r2, r0, #1
 800ec90:	4606      	mov	r6, r0
 800ec92:	d1d6      	bne.n	800ec42 <_svfiprintf_r+0x176>
 800ec94:	89ab      	ldrh	r3, [r5, #12]
 800ec96:	065b      	lsls	r3, r3, #25
 800ec98:	f53f af2c 	bmi.w	800eaf4 <_svfiprintf_r+0x28>
 800ec9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec9e:	b01d      	add	sp, #116	; 0x74
 800eca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca4:	ab03      	add	r3, sp, #12
 800eca6:	9300      	str	r3, [sp, #0]
 800eca8:	462a      	mov	r2, r5
 800ecaa:	4b06      	ldr	r3, [pc, #24]	; (800ecc4 <_svfiprintf_r+0x1f8>)
 800ecac:	a904      	add	r1, sp, #16
 800ecae:	4638      	mov	r0, r7
 800ecb0:	f000 f9d4 	bl	800f05c <_printf_i>
 800ecb4:	e7eb      	b.n	800ec8e <_svfiprintf_r+0x1c2>
 800ecb6:	bf00      	nop
 800ecb8:	08012584 	.word	0x08012584
 800ecbc:	0801258e 	.word	0x0801258e
 800ecc0:	00000000 	.word	0x00000000
 800ecc4:	0800ea15 	.word	0x0800ea15
 800ecc8:	0801258a 	.word	0x0801258a

0800eccc <__sfputc_r>:
 800eccc:	6893      	ldr	r3, [r2, #8]
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	b410      	push	{r4}
 800ecd4:	6093      	str	r3, [r2, #8]
 800ecd6:	da08      	bge.n	800ecea <__sfputc_r+0x1e>
 800ecd8:	6994      	ldr	r4, [r2, #24]
 800ecda:	42a3      	cmp	r3, r4
 800ecdc:	db01      	blt.n	800ece2 <__sfputc_r+0x16>
 800ecde:	290a      	cmp	r1, #10
 800ece0:	d103      	bne.n	800ecea <__sfputc_r+0x1e>
 800ece2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ece6:	f000 bb33 	b.w	800f350 <__swbuf_r>
 800ecea:	6813      	ldr	r3, [r2, #0]
 800ecec:	1c58      	adds	r0, r3, #1
 800ecee:	6010      	str	r0, [r2, #0]
 800ecf0:	7019      	strb	r1, [r3, #0]
 800ecf2:	4608      	mov	r0, r1
 800ecf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecf8:	4770      	bx	lr

0800ecfa <__sfputs_r>:
 800ecfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	460f      	mov	r7, r1
 800ed00:	4614      	mov	r4, r2
 800ed02:	18d5      	adds	r5, r2, r3
 800ed04:	42ac      	cmp	r4, r5
 800ed06:	d101      	bne.n	800ed0c <__sfputs_r+0x12>
 800ed08:	2000      	movs	r0, #0
 800ed0a:	e007      	b.n	800ed1c <__sfputs_r+0x22>
 800ed0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed10:	463a      	mov	r2, r7
 800ed12:	4630      	mov	r0, r6
 800ed14:	f7ff ffda 	bl	800eccc <__sfputc_r>
 800ed18:	1c43      	adds	r3, r0, #1
 800ed1a:	d1f3      	bne.n	800ed04 <__sfputs_r+0xa>
 800ed1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed20 <_vfiprintf_r>:
 800ed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed24:	460d      	mov	r5, r1
 800ed26:	b09d      	sub	sp, #116	; 0x74
 800ed28:	4614      	mov	r4, r2
 800ed2a:	4698      	mov	r8, r3
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	b118      	cbz	r0, 800ed38 <_vfiprintf_r+0x18>
 800ed30:	6983      	ldr	r3, [r0, #24]
 800ed32:	b90b      	cbnz	r3, 800ed38 <_vfiprintf_r+0x18>
 800ed34:	f7ff fd0a 	bl	800e74c <__sinit>
 800ed38:	4b89      	ldr	r3, [pc, #548]	; (800ef60 <_vfiprintf_r+0x240>)
 800ed3a:	429d      	cmp	r5, r3
 800ed3c:	d11b      	bne.n	800ed76 <_vfiprintf_r+0x56>
 800ed3e:	6875      	ldr	r5, [r6, #4]
 800ed40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed42:	07d9      	lsls	r1, r3, #31
 800ed44:	d405      	bmi.n	800ed52 <_vfiprintf_r+0x32>
 800ed46:	89ab      	ldrh	r3, [r5, #12]
 800ed48:	059a      	lsls	r2, r3, #22
 800ed4a:	d402      	bmi.n	800ed52 <_vfiprintf_r+0x32>
 800ed4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed4e:	f7ff fdad 	bl	800e8ac <__retarget_lock_acquire_recursive>
 800ed52:	89ab      	ldrh	r3, [r5, #12]
 800ed54:	071b      	lsls	r3, r3, #28
 800ed56:	d501      	bpl.n	800ed5c <_vfiprintf_r+0x3c>
 800ed58:	692b      	ldr	r3, [r5, #16]
 800ed5a:	b9eb      	cbnz	r3, 800ed98 <_vfiprintf_r+0x78>
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	4630      	mov	r0, r6
 800ed60:	f000 fb5a 	bl	800f418 <__swsetup_r>
 800ed64:	b1c0      	cbz	r0, 800ed98 <_vfiprintf_r+0x78>
 800ed66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed68:	07dc      	lsls	r4, r3, #31
 800ed6a:	d50e      	bpl.n	800ed8a <_vfiprintf_r+0x6a>
 800ed6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed70:	b01d      	add	sp, #116	; 0x74
 800ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed76:	4b7b      	ldr	r3, [pc, #492]	; (800ef64 <_vfiprintf_r+0x244>)
 800ed78:	429d      	cmp	r5, r3
 800ed7a:	d101      	bne.n	800ed80 <_vfiprintf_r+0x60>
 800ed7c:	68b5      	ldr	r5, [r6, #8]
 800ed7e:	e7df      	b.n	800ed40 <_vfiprintf_r+0x20>
 800ed80:	4b79      	ldr	r3, [pc, #484]	; (800ef68 <_vfiprintf_r+0x248>)
 800ed82:	429d      	cmp	r5, r3
 800ed84:	bf08      	it	eq
 800ed86:	68f5      	ldreq	r5, [r6, #12]
 800ed88:	e7da      	b.n	800ed40 <_vfiprintf_r+0x20>
 800ed8a:	89ab      	ldrh	r3, [r5, #12]
 800ed8c:	0598      	lsls	r0, r3, #22
 800ed8e:	d4ed      	bmi.n	800ed6c <_vfiprintf_r+0x4c>
 800ed90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed92:	f7ff fd8c 	bl	800e8ae <__retarget_lock_release_recursive>
 800ed96:	e7e9      	b.n	800ed6c <_vfiprintf_r+0x4c>
 800ed98:	2300      	movs	r3, #0
 800ed9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed9c:	2320      	movs	r3, #32
 800ed9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eda2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eda6:	2330      	movs	r3, #48	; 0x30
 800eda8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef6c <_vfiprintf_r+0x24c>
 800edac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edb0:	f04f 0901 	mov.w	r9, #1
 800edb4:	4623      	mov	r3, r4
 800edb6:	469a      	mov	sl, r3
 800edb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edbc:	b10a      	cbz	r2, 800edc2 <_vfiprintf_r+0xa2>
 800edbe:	2a25      	cmp	r2, #37	; 0x25
 800edc0:	d1f9      	bne.n	800edb6 <_vfiprintf_r+0x96>
 800edc2:	ebba 0b04 	subs.w	fp, sl, r4
 800edc6:	d00b      	beq.n	800ede0 <_vfiprintf_r+0xc0>
 800edc8:	465b      	mov	r3, fp
 800edca:	4622      	mov	r2, r4
 800edcc:	4629      	mov	r1, r5
 800edce:	4630      	mov	r0, r6
 800edd0:	f7ff ff93 	bl	800ecfa <__sfputs_r>
 800edd4:	3001      	adds	r0, #1
 800edd6:	f000 80aa 	beq.w	800ef2e <_vfiprintf_r+0x20e>
 800edda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eddc:	445a      	add	r2, fp
 800edde:	9209      	str	r2, [sp, #36]	; 0x24
 800ede0:	f89a 3000 	ldrb.w	r3, [sl]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f000 80a2 	beq.w	800ef2e <_vfiprintf_r+0x20e>
 800edea:	2300      	movs	r3, #0
 800edec:	f04f 32ff 	mov.w	r2, #4294967295
 800edf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edf4:	f10a 0a01 	add.w	sl, sl, #1
 800edf8:	9304      	str	r3, [sp, #16]
 800edfa:	9307      	str	r3, [sp, #28]
 800edfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee00:	931a      	str	r3, [sp, #104]	; 0x68
 800ee02:	4654      	mov	r4, sl
 800ee04:	2205      	movs	r2, #5
 800ee06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0a:	4858      	ldr	r0, [pc, #352]	; (800ef6c <_vfiprintf_r+0x24c>)
 800ee0c:	f7f1 f9f0 	bl	80001f0 <memchr>
 800ee10:	9a04      	ldr	r2, [sp, #16]
 800ee12:	b9d8      	cbnz	r0, 800ee4c <_vfiprintf_r+0x12c>
 800ee14:	06d1      	lsls	r1, r2, #27
 800ee16:	bf44      	itt	mi
 800ee18:	2320      	movmi	r3, #32
 800ee1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee1e:	0713      	lsls	r3, r2, #28
 800ee20:	bf44      	itt	mi
 800ee22:	232b      	movmi	r3, #43	; 0x2b
 800ee24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee28:	f89a 3000 	ldrb.w	r3, [sl]
 800ee2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee2e:	d015      	beq.n	800ee5c <_vfiprintf_r+0x13c>
 800ee30:	9a07      	ldr	r2, [sp, #28]
 800ee32:	4654      	mov	r4, sl
 800ee34:	2000      	movs	r0, #0
 800ee36:	f04f 0c0a 	mov.w	ip, #10
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee40:	3b30      	subs	r3, #48	; 0x30
 800ee42:	2b09      	cmp	r3, #9
 800ee44:	d94e      	bls.n	800eee4 <_vfiprintf_r+0x1c4>
 800ee46:	b1b0      	cbz	r0, 800ee76 <_vfiprintf_r+0x156>
 800ee48:	9207      	str	r2, [sp, #28]
 800ee4a:	e014      	b.n	800ee76 <_vfiprintf_r+0x156>
 800ee4c:	eba0 0308 	sub.w	r3, r0, r8
 800ee50:	fa09 f303 	lsl.w	r3, r9, r3
 800ee54:	4313      	orrs	r3, r2
 800ee56:	9304      	str	r3, [sp, #16]
 800ee58:	46a2      	mov	sl, r4
 800ee5a:	e7d2      	b.n	800ee02 <_vfiprintf_r+0xe2>
 800ee5c:	9b03      	ldr	r3, [sp, #12]
 800ee5e:	1d19      	adds	r1, r3, #4
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	9103      	str	r1, [sp, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfbb      	ittet	lt
 800ee68:	425b      	neglt	r3, r3
 800ee6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee6e:	9307      	strge	r3, [sp, #28]
 800ee70:	9307      	strlt	r3, [sp, #28]
 800ee72:	bfb8      	it	lt
 800ee74:	9204      	strlt	r2, [sp, #16]
 800ee76:	7823      	ldrb	r3, [r4, #0]
 800ee78:	2b2e      	cmp	r3, #46	; 0x2e
 800ee7a:	d10c      	bne.n	800ee96 <_vfiprintf_r+0x176>
 800ee7c:	7863      	ldrb	r3, [r4, #1]
 800ee7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee80:	d135      	bne.n	800eeee <_vfiprintf_r+0x1ce>
 800ee82:	9b03      	ldr	r3, [sp, #12]
 800ee84:	1d1a      	adds	r2, r3, #4
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	9203      	str	r2, [sp, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	bfb8      	it	lt
 800ee8e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee92:	3402      	adds	r4, #2
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef7c <_vfiprintf_r+0x25c>
 800ee9a:	7821      	ldrb	r1, [r4, #0]
 800ee9c:	2203      	movs	r2, #3
 800ee9e:	4650      	mov	r0, sl
 800eea0:	f7f1 f9a6 	bl	80001f0 <memchr>
 800eea4:	b140      	cbz	r0, 800eeb8 <_vfiprintf_r+0x198>
 800eea6:	2340      	movs	r3, #64	; 0x40
 800eea8:	eba0 000a 	sub.w	r0, r0, sl
 800eeac:	fa03 f000 	lsl.w	r0, r3, r0
 800eeb0:	9b04      	ldr	r3, [sp, #16]
 800eeb2:	4303      	orrs	r3, r0
 800eeb4:	3401      	adds	r4, #1
 800eeb6:	9304      	str	r3, [sp, #16]
 800eeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eebc:	482c      	ldr	r0, [pc, #176]	; (800ef70 <_vfiprintf_r+0x250>)
 800eebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eec2:	2206      	movs	r2, #6
 800eec4:	f7f1 f994 	bl	80001f0 <memchr>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d03f      	beq.n	800ef4c <_vfiprintf_r+0x22c>
 800eecc:	4b29      	ldr	r3, [pc, #164]	; (800ef74 <_vfiprintf_r+0x254>)
 800eece:	bb1b      	cbnz	r3, 800ef18 <_vfiprintf_r+0x1f8>
 800eed0:	9b03      	ldr	r3, [sp, #12]
 800eed2:	3307      	adds	r3, #7
 800eed4:	f023 0307 	bic.w	r3, r3, #7
 800eed8:	3308      	adds	r3, #8
 800eeda:	9303      	str	r3, [sp, #12]
 800eedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eede:	443b      	add	r3, r7
 800eee0:	9309      	str	r3, [sp, #36]	; 0x24
 800eee2:	e767      	b.n	800edb4 <_vfiprintf_r+0x94>
 800eee4:	fb0c 3202 	mla	r2, ip, r2, r3
 800eee8:	460c      	mov	r4, r1
 800eeea:	2001      	movs	r0, #1
 800eeec:	e7a5      	b.n	800ee3a <_vfiprintf_r+0x11a>
 800eeee:	2300      	movs	r3, #0
 800eef0:	3401      	adds	r4, #1
 800eef2:	9305      	str	r3, [sp, #20]
 800eef4:	4619      	mov	r1, r3
 800eef6:	f04f 0c0a 	mov.w	ip, #10
 800eefa:	4620      	mov	r0, r4
 800eefc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef00:	3a30      	subs	r2, #48	; 0x30
 800ef02:	2a09      	cmp	r2, #9
 800ef04:	d903      	bls.n	800ef0e <_vfiprintf_r+0x1ee>
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d0c5      	beq.n	800ee96 <_vfiprintf_r+0x176>
 800ef0a:	9105      	str	r1, [sp, #20]
 800ef0c:	e7c3      	b.n	800ee96 <_vfiprintf_r+0x176>
 800ef0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef12:	4604      	mov	r4, r0
 800ef14:	2301      	movs	r3, #1
 800ef16:	e7f0      	b.n	800eefa <_vfiprintf_r+0x1da>
 800ef18:	ab03      	add	r3, sp, #12
 800ef1a:	9300      	str	r3, [sp, #0]
 800ef1c:	462a      	mov	r2, r5
 800ef1e:	4b16      	ldr	r3, [pc, #88]	; (800ef78 <_vfiprintf_r+0x258>)
 800ef20:	a904      	add	r1, sp, #16
 800ef22:	4630      	mov	r0, r6
 800ef24:	f3af 8000 	nop.w
 800ef28:	4607      	mov	r7, r0
 800ef2a:	1c78      	adds	r0, r7, #1
 800ef2c:	d1d6      	bne.n	800eedc <_vfiprintf_r+0x1bc>
 800ef2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ef30:	07d9      	lsls	r1, r3, #31
 800ef32:	d405      	bmi.n	800ef40 <_vfiprintf_r+0x220>
 800ef34:	89ab      	ldrh	r3, [r5, #12]
 800ef36:	059a      	lsls	r2, r3, #22
 800ef38:	d402      	bmi.n	800ef40 <_vfiprintf_r+0x220>
 800ef3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ef3c:	f7ff fcb7 	bl	800e8ae <__retarget_lock_release_recursive>
 800ef40:	89ab      	ldrh	r3, [r5, #12]
 800ef42:	065b      	lsls	r3, r3, #25
 800ef44:	f53f af12 	bmi.w	800ed6c <_vfiprintf_r+0x4c>
 800ef48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef4a:	e711      	b.n	800ed70 <_vfiprintf_r+0x50>
 800ef4c:	ab03      	add	r3, sp, #12
 800ef4e:	9300      	str	r3, [sp, #0]
 800ef50:	462a      	mov	r2, r5
 800ef52:	4b09      	ldr	r3, [pc, #36]	; (800ef78 <_vfiprintf_r+0x258>)
 800ef54:	a904      	add	r1, sp, #16
 800ef56:	4630      	mov	r0, r6
 800ef58:	f000 f880 	bl	800f05c <_printf_i>
 800ef5c:	e7e4      	b.n	800ef28 <_vfiprintf_r+0x208>
 800ef5e:	bf00      	nop
 800ef60:	08012544 	.word	0x08012544
 800ef64:	08012564 	.word	0x08012564
 800ef68:	08012524 	.word	0x08012524
 800ef6c:	08012584 	.word	0x08012584
 800ef70:	0801258e 	.word	0x0801258e
 800ef74:	00000000 	.word	0x00000000
 800ef78:	0800ecfb 	.word	0x0800ecfb
 800ef7c:	0801258a 	.word	0x0801258a

0800ef80 <_printf_common>:
 800ef80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef84:	4616      	mov	r6, r2
 800ef86:	4699      	mov	r9, r3
 800ef88:	688a      	ldr	r2, [r1, #8]
 800ef8a:	690b      	ldr	r3, [r1, #16]
 800ef8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef90:	4293      	cmp	r3, r2
 800ef92:	bfb8      	it	lt
 800ef94:	4613      	movlt	r3, r2
 800ef96:	6033      	str	r3, [r6, #0]
 800ef98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef9c:	4607      	mov	r7, r0
 800ef9e:	460c      	mov	r4, r1
 800efa0:	b10a      	cbz	r2, 800efa6 <_printf_common+0x26>
 800efa2:	3301      	adds	r3, #1
 800efa4:	6033      	str	r3, [r6, #0]
 800efa6:	6823      	ldr	r3, [r4, #0]
 800efa8:	0699      	lsls	r1, r3, #26
 800efaa:	bf42      	ittt	mi
 800efac:	6833      	ldrmi	r3, [r6, #0]
 800efae:	3302      	addmi	r3, #2
 800efb0:	6033      	strmi	r3, [r6, #0]
 800efb2:	6825      	ldr	r5, [r4, #0]
 800efb4:	f015 0506 	ands.w	r5, r5, #6
 800efb8:	d106      	bne.n	800efc8 <_printf_common+0x48>
 800efba:	f104 0a19 	add.w	sl, r4, #25
 800efbe:	68e3      	ldr	r3, [r4, #12]
 800efc0:	6832      	ldr	r2, [r6, #0]
 800efc2:	1a9b      	subs	r3, r3, r2
 800efc4:	42ab      	cmp	r3, r5
 800efc6:	dc26      	bgt.n	800f016 <_printf_common+0x96>
 800efc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efcc:	1e13      	subs	r3, r2, #0
 800efce:	6822      	ldr	r2, [r4, #0]
 800efd0:	bf18      	it	ne
 800efd2:	2301      	movne	r3, #1
 800efd4:	0692      	lsls	r2, r2, #26
 800efd6:	d42b      	bmi.n	800f030 <_printf_common+0xb0>
 800efd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efdc:	4649      	mov	r1, r9
 800efde:	4638      	mov	r0, r7
 800efe0:	47c0      	blx	r8
 800efe2:	3001      	adds	r0, #1
 800efe4:	d01e      	beq.n	800f024 <_printf_common+0xa4>
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	68e5      	ldr	r5, [r4, #12]
 800efea:	6832      	ldr	r2, [r6, #0]
 800efec:	f003 0306 	and.w	r3, r3, #6
 800eff0:	2b04      	cmp	r3, #4
 800eff2:	bf08      	it	eq
 800eff4:	1aad      	subeq	r5, r5, r2
 800eff6:	68a3      	ldr	r3, [r4, #8]
 800eff8:	6922      	ldr	r2, [r4, #16]
 800effa:	bf0c      	ite	eq
 800effc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f000:	2500      	movne	r5, #0
 800f002:	4293      	cmp	r3, r2
 800f004:	bfc4      	itt	gt
 800f006:	1a9b      	subgt	r3, r3, r2
 800f008:	18ed      	addgt	r5, r5, r3
 800f00a:	2600      	movs	r6, #0
 800f00c:	341a      	adds	r4, #26
 800f00e:	42b5      	cmp	r5, r6
 800f010:	d11a      	bne.n	800f048 <_printf_common+0xc8>
 800f012:	2000      	movs	r0, #0
 800f014:	e008      	b.n	800f028 <_printf_common+0xa8>
 800f016:	2301      	movs	r3, #1
 800f018:	4652      	mov	r2, sl
 800f01a:	4649      	mov	r1, r9
 800f01c:	4638      	mov	r0, r7
 800f01e:	47c0      	blx	r8
 800f020:	3001      	adds	r0, #1
 800f022:	d103      	bne.n	800f02c <_printf_common+0xac>
 800f024:	f04f 30ff 	mov.w	r0, #4294967295
 800f028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f02c:	3501      	adds	r5, #1
 800f02e:	e7c6      	b.n	800efbe <_printf_common+0x3e>
 800f030:	18e1      	adds	r1, r4, r3
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	2030      	movs	r0, #48	; 0x30
 800f036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f03a:	4422      	add	r2, r4
 800f03c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f044:	3302      	adds	r3, #2
 800f046:	e7c7      	b.n	800efd8 <_printf_common+0x58>
 800f048:	2301      	movs	r3, #1
 800f04a:	4622      	mov	r2, r4
 800f04c:	4649      	mov	r1, r9
 800f04e:	4638      	mov	r0, r7
 800f050:	47c0      	blx	r8
 800f052:	3001      	adds	r0, #1
 800f054:	d0e6      	beq.n	800f024 <_printf_common+0xa4>
 800f056:	3601      	adds	r6, #1
 800f058:	e7d9      	b.n	800f00e <_printf_common+0x8e>
	...

0800f05c <_printf_i>:
 800f05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f060:	460c      	mov	r4, r1
 800f062:	4691      	mov	r9, r2
 800f064:	7e27      	ldrb	r7, [r4, #24]
 800f066:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f068:	2f78      	cmp	r7, #120	; 0x78
 800f06a:	4680      	mov	r8, r0
 800f06c:	469a      	mov	sl, r3
 800f06e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f072:	d807      	bhi.n	800f084 <_printf_i+0x28>
 800f074:	2f62      	cmp	r7, #98	; 0x62
 800f076:	d80a      	bhi.n	800f08e <_printf_i+0x32>
 800f078:	2f00      	cmp	r7, #0
 800f07a:	f000 80d8 	beq.w	800f22e <_printf_i+0x1d2>
 800f07e:	2f58      	cmp	r7, #88	; 0x58
 800f080:	f000 80a3 	beq.w	800f1ca <_printf_i+0x16e>
 800f084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f08c:	e03a      	b.n	800f104 <_printf_i+0xa8>
 800f08e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f092:	2b15      	cmp	r3, #21
 800f094:	d8f6      	bhi.n	800f084 <_printf_i+0x28>
 800f096:	a001      	add	r0, pc, #4	; (adr r0, 800f09c <_printf_i+0x40>)
 800f098:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f09c:	0800f0f5 	.word	0x0800f0f5
 800f0a0:	0800f109 	.word	0x0800f109
 800f0a4:	0800f085 	.word	0x0800f085
 800f0a8:	0800f085 	.word	0x0800f085
 800f0ac:	0800f085 	.word	0x0800f085
 800f0b0:	0800f085 	.word	0x0800f085
 800f0b4:	0800f109 	.word	0x0800f109
 800f0b8:	0800f085 	.word	0x0800f085
 800f0bc:	0800f085 	.word	0x0800f085
 800f0c0:	0800f085 	.word	0x0800f085
 800f0c4:	0800f085 	.word	0x0800f085
 800f0c8:	0800f215 	.word	0x0800f215
 800f0cc:	0800f139 	.word	0x0800f139
 800f0d0:	0800f1f7 	.word	0x0800f1f7
 800f0d4:	0800f085 	.word	0x0800f085
 800f0d8:	0800f085 	.word	0x0800f085
 800f0dc:	0800f237 	.word	0x0800f237
 800f0e0:	0800f085 	.word	0x0800f085
 800f0e4:	0800f139 	.word	0x0800f139
 800f0e8:	0800f085 	.word	0x0800f085
 800f0ec:	0800f085 	.word	0x0800f085
 800f0f0:	0800f1ff 	.word	0x0800f1ff
 800f0f4:	680b      	ldr	r3, [r1, #0]
 800f0f6:	1d1a      	adds	r2, r3, #4
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	600a      	str	r2, [r1, #0]
 800f0fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f104:	2301      	movs	r3, #1
 800f106:	e0a3      	b.n	800f250 <_printf_i+0x1f4>
 800f108:	6825      	ldr	r5, [r4, #0]
 800f10a:	6808      	ldr	r0, [r1, #0]
 800f10c:	062e      	lsls	r6, r5, #24
 800f10e:	f100 0304 	add.w	r3, r0, #4
 800f112:	d50a      	bpl.n	800f12a <_printf_i+0xce>
 800f114:	6805      	ldr	r5, [r0, #0]
 800f116:	600b      	str	r3, [r1, #0]
 800f118:	2d00      	cmp	r5, #0
 800f11a:	da03      	bge.n	800f124 <_printf_i+0xc8>
 800f11c:	232d      	movs	r3, #45	; 0x2d
 800f11e:	426d      	negs	r5, r5
 800f120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f124:	485e      	ldr	r0, [pc, #376]	; (800f2a0 <_printf_i+0x244>)
 800f126:	230a      	movs	r3, #10
 800f128:	e019      	b.n	800f15e <_printf_i+0x102>
 800f12a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f12e:	6805      	ldr	r5, [r0, #0]
 800f130:	600b      	str	r3, [r1, #0]
 800f132:	bf18      	it	ne
 800f134:	b22d      	sxthne	r5, r5
 800f136:	e7ef      	b.n	800f118 <_printf_i+0xbc>
 800f138:	680b      	ldr	r3, [r1, #0]
 800f13a:	6825      	ldr	r5, [r4, #0]
 800f13c:	1d18      	adds	r0, r3, #4
 800f13e:	6008      	str	r0, [r1, #0]
 800f140:	0628      	lsls	r0, r5, #24
 800f142:	d501      	bpl.n	800f148 <_printf_i+0xec>
 800f144:	681d      	ldr	r5, [r3, #0]
 800f146:	e002      	b.n	800f14e <_printf_i+0xf2>
 800f148:	0669      	lsls	r1, r5, #25
 800f14a:	d5fb      	bpl.n	800f144 <_printf_i+0xe8>
 800f14c:	881d      	ldrh	r5, [r3, #0]
 800f14e:	4854      	ldr	r0, [pc, #336]	; (800f2a0 <_printf_i+0x244>)
 800f150:	2f6f      	cmp	r7, #111	; 0x6f
 800f152:	bf0c      	ite	eq
 800f154:	2308      	moveq	r3, #8
 800f156:	230a      	movne	r3, #10
 800f158:	2100      	movs	r1, #0
 800f15a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f15e:	6866      	ldr	r6, [r4, #4]
 800f160:	60a6      	str	r6, [r4, #8]
 800f162:	2e00      	cmp	r6, #0
 800f164:	bfa2      	ittt	ge
 800f166:	6821      	ldrge	r1, [r4, #0]
 800f168:	f021 0104 	bicge.w	r1, r1, #4
 800f16c:	6021      	strge	r1, [r4, #0]
 800f16e:	b90d      	cbnz	r5, 800f174 <_printf_i+0x118>
 800f170:	2e00      	cmp	r6, #0
 800f172:	d04d      	beq.n	800f210 <_printf_i+0x1b4>
 800f174:	4616      	mov	r6, r2
 800f176:	fbb5 f1f3 	udiv	r1, r5, r3
 800f17a:	fb03 5711 	mls	r7, r3, r1, r5
 800f17e:	5dc7      	ldrb	r7, [r0, r7]
 800f180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f184:	462f      	mov	r7, r5
 800f186:	42bb      	cmp	r3, r7
 800f188:	460d      	mov	r5, r1
 800f18a:	d9f4      	bls.n	800f176 <_printf_i+0x11a>
 800f18c:	2b08      	cmp	r3, #8
 800f18e:	d10b      	bne.n	800f1a8 <_printf_i+0x14c>
 800f190:	6823      	ldr	r3, [r4, #0]
 800f192:	07df      	lsls	r7, r3, #31
 800f194:	d508      	bpl.n	800f1a8 <_printf_i+0x14c>
 800f196:	6923      	ldr	r3, [r4, #16]
 800f198:	6861      	ldr	r1, [r4, #4]
 800f19a:	4299      	cmp	r1, r3
 800f19c:	bfde      	ittt	le
 800f19e:	2330      	movle	r3, #48	; 0x30
 800f1a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1a8:	1b92      	subs	r2, r2, r6
 800f1aa:	6122      	str	r2, [r4, #16]
 800f1ac:	f8cd a000 	str.w	sl, [sp]
 800f1b0:	464b      	mov	r3, r9
 800f1b2:	aa03      	add	r2, sp, #12
 800f1b4:	4621      	mov	r1, r4
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	f7ff fee2 	bl	800ef80 <_printf_common>
 800f1bc:	3001      	adds	r0, #1
 800f1be:	d14c      	bne.n	800f25a <_printf_i+0x1fe>
 800f1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c4:	b004      	add	sp, #16
 800f1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ca:	4835      	ldr	r0, [pc, #212]	; (800f2a0 <_printf_i+0x244>)
 800f1cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	680e      	ldr	r6, [r1, #0]
 800f1d4:	061f      	lsls	r7, r3, #24
 800f1d6:	f856 5b04 	ldr.w	r5, [r6], #4
 800f1da:	600e      	str	r6, [r1, #0]
 800f1dc:	d514      	bpl.n	800f208 <_printf_i+0x1ac>
 800f1de:	07d9      	lsls	r1, r3, #31
 800f1e0:	bf44      	itt	mi
 800f1e2:	f043 0320 	orrmi.w	r3, r3, #32
 800f1e6:	6023      	strmi	r3, [r4, #0]
 800f1e8:	b91d      	cbnz	r5, 800f1f2 <_printf_i+0x196>
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	f023 0320 	bic.w	r3, r3, #32
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	2310      	movs	r3, #16
 800f1f4:	e7b0      	b.n	800f158 <_printf_i+0xfc>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	f043 0320 	orr.w	r3, r3, #32
 800f1fc:	6023      	str	r3, [r4, #0]
 800f1fe:	2378      	movs	r3, #120	; 0x78
 800f200:	4828      	ldr	r0, [pc, #160]	; (800f2a4 <_printf_i+0x248>)
 800f202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f206:	e7e3      	b.n	800f1d0 <_printf_i+0x174>
 800f208:	065e      	lsls	r6, r3, #25
 800f20a:	bf48      	it	mi
 800f20c:	b2ad      	uxthmi	r5, r5
 800f20e:	e7e6      	b.n	800f1de <_printf_i+0x182>
 800f210:	4616      	mov	r6, r2
 800f212:	e7bb      	b.n	800f18c <_printf_i+0x130>
 800f214:	680b      	ldr	r3, [r1, #0]
 800f216:	6826      	ldr	r6, [r4, #0]
 800f218:	6960      	ldr	r0, [r4, #20]
 800f21a:	1d1d      	adds	r5, r3, #4
 800f21c:	600d      	str	r5, [r1, #0]
 800f21e:	0635      	lsls	r5, r6, #24
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	d501      	bpl.n	800f228 <_printf_i+0x1cc>
 800f224:	6018      	str	r0, [r3, #0]
 800f226:	e002      	b.n	800f22e <_printf_i+0x1d2>
 800f228:	0671      	lsls	r1, r6, #25
 800f22a:	d5fb      	bpl.n	800f224 <_printf_i+0x1c8>
 800f22c:	8018      	strh	r0, [r3, #0]
 800f22e:	2300      	movs	r3, #0
 800f230:	6123      	str	r3, [r4, #16]
 800f232:	4616      	mov	r6, r2
 800f234:	e7ba      	b.n	800f1ac <_printf_i+0x150>
 800f236:	680b      	ldr	r3, [r1, #0]
 800f238:	1d1a      	adds	r2, r3, #4
 800f23a:	600a      	str	r2, [r1, #0]
 800f23c:	681e      	ldr	r6, [r3, #0]
 800f23e:	6862      	ldr	r2, [r4, #4]
 800f240:	2100      	movs	r1, #0
 800f242:	4630      	mov	r0, r6
 800f244:	f7f0 ffd4 	bl	80001f0 <memchr>
 800f248:	b108      	cbz	r0, 800f24e <_printf_i+0x1f2>
 800f24a:	1b80      	subs	r0, r0, r6
 800f24c:	6060      	str	r0, [r4, #4]
 800f24e:	6863      	ldr	r3, [r4, #4]
 800f250:	6123      	str	r3, [r4, #16]
 800f252:	2300      	movs	r3, #0
 800f254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f258:	e7a8      	b.n	800f1ac <_printf_i+0x150>
 800f25a:	6923      	ldr	r3, [r4, #16]
 800f25c:	4632      	mov	r2, r6
 800f25e:	4649      	mov	r1, r9
 800f260:	4640      	mov	r0, r8
 800f262:	47d0      	blx	sl
 800f264:	3001      	adds	r0, #1
 800f266:	d0ab      	beq.n	800f1c0 <_printf_i+0x164>
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	079b      	lsls	r3, r3, #30
 800f26c:	d413      	bmi.n	800f296 <_printf_i+0x23a>
 800f26e:	68e0      	ldr	r0, [r4, #12]
 800f270:	9b03      	ldr	r3, [sp, #12]
 800f272:	4298      	cmp	r0, r3
 800f274:	bfb8      	it	lt
 800f276:	4618      	movlt	r0, r3
 800f278:	e7a4      	b.n	800f1c4 <_printf_i+0x168>
 800f27a:	2301      	movs	r3, #1
 800f27c:	4632      	mov	r2, r6
 800f27e:	4649      	mov	r1, r9
 800f280:	4640      	mov	r0, r8
 800f282:	47d0      	blx	sl
 800f284:	3001      	adds	r0, #1
 800f286:	d09b      	beq.n	800f1c0 <_printf_i+0x164>
 800f288:	3501      	adds	r5, #1
 800f28a:	68e3      	ldr	r3, [r4, #12]
 800f28c:	9903      	ldr	r1, [sp, #12]
 800f28e:	1a5b      	subs	r3, r3, r1
 800f290:	42ab      	cmp	r3, r5
 800f292:	dcf2      	bgt.n	800f27a <_printf_i+0x21e>
 800f294:	e7eb      	b.n	800f26e <_printf_i+0x212>
 800f296:	2500      	movs	r5, #0
 800f298:	f104 0619 	add.w	r6, r4, #25
 800f29c:	e7f5      	b.n	800f28a <_printf_i+0x22e>
 800f29e:	bf00      	nop
 800f2a0:	08012595 	.word	0x08012595
 800f2a4:	080125a6 	.word	0x080125a6

0800f2a8 <_sbrk_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d06      	ldr	r5, [pc, #24]	; (800f2c4 <_sbrk_r+0x1c>)
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	4608      	mov	r0, r1
 800f2b2:	602b      	str	r3, [r5, #0]
 800f2b4:	f7f1 fe6a 	bl	8000f8c <_sbrk>
 800f2b8:	1c43      	adds	r3, r0, #1
 800f2ba:	d102      	bne.n	800f2c2 <_sbrk_r+0x1a>
 800f2bc:	682b      	ldr	r3, [r5, #0]
 800f2be:	b103      	cbz	r3, 800f2c2 <_sbrk_r+0x1a>
 800f2c0:	6023      	str	r3, [r4, #0]
 800f2c2:	bd38      	pop	{r3, r4, r5, pc}
 800f2c4:	20008bbc 	.word	0x20008bbc

0800f2c8 <__sread>:
 800f2c8:	b510      	push	{r4, lr}
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2d0:	f000 fa92 	bl	800f7f8 <_read_r>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	bfab      	itete	ge
 800f2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2da:	89a3      	ldrhlt	r3, [r4, #12]
 800f2dc:	181b      	addge	r3, r3, r0
 800f2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2e2:	bfac      	ite	ge
 800f2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2e6:	81a3      	strhlt	r3, [r4, #12]
 800f2e8:	bd10      	pop	{r4, pc}

0800f2ea <__swrite>:
 800f2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ee:	461f      	mov	r7, r3
 800f2f0:	898b      	ldrh	r3, [r1, #12]
 800f2f2:	05db      	lsls	r3, r3, #23
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	4616      	mov	r6, r2
 800f2fa:	d505      	bpl.n	800f308 <__swrite+0x1e>
 800f2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f300:	2302      	movs	r3, #2
 800f302:	2200      	movs	r2, #0
 800f304:	f000 f9d0 	bl	800f6a8 <_lseek_r>
 800f308:	89a3      	ldrh	r3, [r4, #12]
 800f30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f312:	81a3      	strh	r3, [r4, #12]
 800f314:	4632      	mov	r2, r6
 800f316:	463b      	mov	r3, r7
 800f318:	4628      	mov	r0, r5
 800f31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f31e:	f000 b869 	b.w	800f3f4 <_write_r>

0800f322 <__sseek>:
 800f322:	b510      	push	{r4, lr}
 800f324:	460c      	mov	r4, r1
 800f326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f32a:	f000 f9bd 	bl	800f6a8 <_lseek_r>
 800f32e:	1c43      	adds	r3, r0, #1
 800f330:	89a3      	ldrh	r3, [r4, #12]
 800f332:	bf15      	itete	ne
 800f334:	6560      	strne	r0, [r4, #84]	; 0x54
 800f336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f33e:	81a3      	strheq	r3, [r4, #12]
 800f340:	bf18      	it	ne
 800f342:	81a3      	strhne	r3, [r4, #12]
 800f344:	bd10      	pop	{r4, pc}

0800f346 <__sclose>:
 800f346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f34a:	f000 b8db 	b.w	800f504 <_close_r>
	...

0800f350 <__swbuf_r>:
 800f350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f352:	460e      	mov	r6, r1
 800f354:	4614      	mov	r4, r2
 800f356:	4605      	mov	r5, r0
 800f358:	b118      	cbz	r0, 800f362 <__swbuf_r+0x12>
 800f35a:	6983      	ldr	r3, [r0, #24]
 800f35c:	b90b      	cbnz	r3, 800f362 <__swbuf_r+0x12>
 800f35e:	f7ff f9f5 	bl	800e74c <__sinit>
 800f362:	4b21      	ldr	r3, [pc, #132]	; (800f3e8 <__swbuf_r+0x98>)
 800f364:	429c      	cmp	r4, r3
 800f366:	d12b      	bne.n	800f3c0 <__swbuf_r+0x70>
 800f368:	686c      	ldr	r4, [r5, #4]
 800f36a:	69a3      	ldr	r3, [r4, #24]
 800f36c:	60a3      	str	r3, [r4, #8]
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	071a      	lsls	r2, r3, #28
 800f372:	d52f      	bpl.n	800f3d4 <__swbuf_r+0x84>
 800f374:	6923      	ldr	r3, [r4, #16]
 800f376:	b36b      	cbz	r3, 800f3d4 <__swbuf_r+0x84>
 800f378:	6923      	ldr	r3, [r4, #16]
 800f37a:	6820      	ldr	r0, [r4, #0]
 800f37c:	1ac0      	subs	r0, r0, r3
 800f37e:	6963      	ldr	r3, [r4, #20]
 800f380:	b2f6      	uxtb	r6, r6
 800f382:	4283      	cmp	r3, r0
 800f384:	4637      	mov	r7, r6
 800f386:	dc04      	bgt.n	800f392 <__swbuf_r+0x42>
 800f388:	4621      	mov	r1, r4
 800f38a:	4628      	mov	r0, r5
 800f38c:	f000 f950 	bl	800f630 <_fflush_r>
 800f390:	bb30      	cbnz	r0, 800f3e0 <__swbuf_r+0x90>
 800f392:	68a3      	ldr	r3, [r4, #8]
 800f394:	3b01      	subs	r3, #1
 800f396:	60a3      	str	r3, [r4, #8]
 800f398:	6823      	ldr	r3, [r4, #0]
 800f39a:	1c5a      	adds	r2, r3, #1
 800f39c:	6022      	str	r2, [r4, #0]
 800f39e:	701e      	strb	r6, [r3, #0]
 800f3a0:	6963      	ldr	r3, [r4, #20]
 800f3a2:	3001      	adds	r0, #1
 800f3a4:	4283      	cmp	r3, r0
 800f3a6:	d004      	beq.n	800f3b2 <__swbuf_r+0x62>
 800f3a8:	89a3      	ldrh	r3, [r4, #12]
 800f3aa:	07db      	lsls	r3, r3, #31
 800f3ac:	d506      	bpl.n	800f3bc <__swbuf_r+0x6c>
 800f3ae:	2e0a      	cmp	r6, #10
 800f3b0:	d104      	bne.n	800f3bc <__swbuf_r+0x6c>
 800f3b2:	4621      	mov	r1, r4
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	f000 f93b 	bl	800f630 <_fflush_r>
 800f3ba:	b988      	cbnz	r0, 800f3e0 <__swbuf_r+0x90>
 800f3bc:	4638      	mov	r0, r7
 800f3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3c0:	4b0a      	ldr	r3, [pc, #40]	; (800f3ec <__swbuf_r+0x9c>)
 800f3c2:	429c      	cmp	r4, r3
 800f3c4:	d101      	bne.n	800f3ca <__swbuf_r+0x7a>
 800f3c6:	68ac      	ldr	r4, [r5, #8]
 800f3c8:	e7cf      	b.n	800f36a <__swbuf_r+0x1a>
 800f3ca:	4b09      	ldr	r3, [pc, #36]	; (800f3f0 <__swbuf_r+0xa0>)
 800f3cc:	429c      	cmp	r4, r3
 800f3ce:	bf08      	it	eq
 800f3d0:	68ec      	ldreq	r4, [r5, #12]
 800f3d2:	e7ca      	b.n	800f36a <__swbuf_r+0x1a>
 800f3d4:	4621      	mov	r1, r4
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	f000 f81e 	bl	800f418 <__swsetup_r>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d0cb      	beq.n	800f378 <__swbuf_r+0x28>
 800f3e0:	f04f 37ff 	mov.w	r7, #4294967295
 800f3e4:	e7ea      	b.n	800f3bc <__swbuf_r+0x6c>
 800f3e6:	bf00      	nop
 800f3e8:	08012544 	.word	0x08012544
 800f3ec:	08012564 	.word	0x08012564
 800f3f0:	08012524 	.word	0x08012524

0800f3f4 <_write_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d07      	ldr	r5, [pc, #28]	; (800f414 <_write_r+0x20>)
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	4608      	mov	r0, r1
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	2200      	movs	r2, #0
 800f400:	602a      	str	r2, [r5, #0]
 800f402:	461a      	mov	r2, r3
 800f404:	f7f1 fd71 	bl	8000eea <_write>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	d102      	bne.n	800f412 <_write_r+0x1e>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	b103      	cbz	r3, 800f412 <_write_r+0x1e>
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	bd38      	pop	{r3, r4, r5, pc}
 800f414:	20008bbc 	.word	0x20008bbc

0800f418 <__swsetup_r>:
 800f418:	4b32      	ldr	r3, [pc, #200]	; (800f4e4 <__swsetup_r+0xcc>)
 800f41a:	b570      	push	{r4, r5, r6, lr}
 800f41c:	681d      	ldr	r5, [r3, #0]
 800f41e:	4606      	mov	r6, r0
 800f420:	460c      	mov	r4, r1
 800f422:	b125      	cbz	r5, 800f42e <__swsetup_r+0x16>
 800f424:	69ab      	ldr	r3, [r5, #24]
 800f426:	b913      	cbnz	r3, 800f42e <__swsetup_r+0x16>
 800f428:	4628      	mov	r0, r5
 800f42a:	f7ff f98f 	bl	800e74c <__sinit>
 800f42e:	4b2e      	ldr	r3, [pc, #184]	; (800f4e8 <__swsetup_r+0xd0>)
 800f430:	429c      	cmp	r4, r3
 800f432:	d10f      	bne.n	800f454 <__swsetup_r+0x3c>
 800f434:	686c      	ldr	r4, [r5, #4]
 800f436:	89a3      	ldrh	r3, [r4, #12]
 800f438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f43c:	0719      	lsls	r1, r3, #28
 800f43e:	d42c      	bmi.n	800f49a <__swsetup_r+0x82>
 800f440:	06dd      	lsls	r5, r3, #27
 800f442:	d411      	bmi.n	800f468 <__swsetup_r+0x50>
 800f444:	2309      	movs	r3, #9
 800f446:	6033      	str	r3, [r6, #0]
 800f448:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f44c:	81a3      	strh	r3, [r4, #12]
 800f44e:	f04f 30ff 	mov.w	r0, #4294967295
 800f452:	e03e      	b.n	800f4d2 <__swsetup_r+0xba>
 800f454:	4b25      	ldr	r3, [pc, #148]	; (800f4ec <__swsetup_r+0xd4>)
 800f456:	429c      	cmp	r4, r3
 800f458:	d101      	bne.n	800f45e <__swsetup_r+0x46>
 800f45a:	68ac      	ldr	r4, [r5, #8]
 800f45c:	e7eb      	b.n	800f436 <__swsetup_r+0x1e>
 800f45e:	4b24      	ldr	r3, [pc, #144]	; (800f4f0 <__swsetup_r+0xd8>)
 800f460:	429c      	cmp	r4, r3
 800f462:	bf08      	it	eq
 800f464:	68ec      	ldreq	r4, [r5, #12]
 800f466:	e7e6      	b.n	800f436 <__swsetup_r+0x1e>
 800f468:	0758      	lsls	r0, r3, #29
 800f46a:	d512      	bpl.n	800f492 <__swsetup_r+0x7a>
 800f46c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f46e:	b141      	cbz	r1, 800f482 <__swsetup_r+0x6a>
 800f470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f474:	4299      	cmp	r1, r3
 800f476:	d002      	beq.n	800f47e <__swsetup_r+0x66>
 800f478:	4630      	mov	r0, r6
 800f47a:	f7ff fa21 	bl	800e8c0 <_free_r>
 800f47e:	2300      	movs	r3, #0
 800f480:	6363      	str	r3, [r4, #52]	; 0x34
 800f482:	89a3      	ldrh	r3, [r4, #12]
 800f484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f488:	81a3      	strh	r3, [r4, #12]
 800f48a:	2300      	movs	r3, #0
 800f48c:	6063      	str	r3, [r4, #4]
 800f48e:	6923      	ldr	r3, [r4, #16]
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	f043 0308 	orr.w	r3, r3, #8
 800f498:	81a3      	strh	r3, [r4, #12]
 800f49a:	6923      	ldr	r3, [r4, #16]
 800f49c:	b94b      	cbnz	r3, 800f4b2 <__swsetup_r+0x9a>
 800f49e:	89a3      	ldrh	r3, [r4, #12]
 800f4a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4a8:	d003      	beq.n	800f4b2 <__swsetup_r+0x9a>
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f000 f931 	bl	800f714 <__smakebuf_r>
 800f4b2:	89a0      	ldrh	r0, [r4, #12]
 800f4b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4b8:	f010 0301 	ands.w	r3, r0, #1
 800f4bc:	d00a      	beq.n	800f4d4 <__swsetup_r+0xbc>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	60a3      	str	r3, [r4, #8]
 800f4c2:	6963      	ldr	r3, [r4, #20]
 800f4c4:	425b      	negs	r3, r3
 800f4c6:	61a3      	str	r3, [r4, #24]
 800f4c8:	6923      	ldr	r3, [r4, #16]
 800f4ca:	b943      	cbnz	r3, 800f4de <__swsetup_r+0xc6>
 800f4cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f4d0:	d1ba      	bne.n	800f448 <__swsetup_r+0x30>
 800f4d2:	bd70      	pop	{r4, r5, r6, pc}
 800f4d4:	0781      	lsls	r1, r0, #30
 800f4d6:	bf58      	it	pl
 800f4d8:	6963      	ldrpl	r3, [r4, #20]
 800f4da:	60a3      	str	r3, [r4, #8]
 800f4dc:	e7f4      	b.n	800f4c8 <__swsetup_r+0xb0>
 800f4de:	2000      	movs	r0, #0
 800f4e0:	e7f7      	b.n	800f4d2 <__swsetup_r+0xba>
 800f4e2:	bf00      	nop
 800f4e4:	20000034 	.word	0x20000034
 800f4e8:	08012544 	.word	0x08012544
 800f4ec:	08012564 	.word	0x08012564
 800f4f0:	08012524 	.word	0x08012524

0800f4f4 <abort>:
 800f4f4:	b508      	push	{r3, lr}
 800f4f6:	2006      	movs	r0, #6
 800f4f8:	f000 f9b8 	bl	800f86c <raise>
 800f4fc:	2001      	movs	r0, #1
 800f4fe:	f7f1 fccd 	bl	8000e9c <_exit>
	...

0800f504 <_close_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d06      	ldr	r5, [pc, #24]	; (800f520 <_close_r+0x1c>)
 800f508:	2300      	movs	r3, #0
 800f50a:	4604      	mov	r4, r0
 800f50c:	4608      	mov	r0, r1
 800f50e:	602b      	str	r3, [r5, #0]
 800f510:	f7f1 fd07 	bl	8000f22 <_close>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d102      	bne.n	800f51e <_close_r+0x1a>
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	b103      	cbz	r3, 800f51e <_close_r+0x1a>
 800f51c:	6023      	str	r3, [r4, #0]
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	20008bbc 	.word	0x20008bbc

0800f524 <__sflush_r>:
 800f524:	898a      	ldrh	r2, [r1, #12]
 800f526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f52a:	4605      	mov	r5, r0
 800f52c:	0710      	lsls	r0, r2, #28
 800f52e:	460c      	mov	r4, r1
 800f530:	d458      	bmi.n	800f5e4 <__sflush_r+0xc0>
 800f532:	684b      	ldr	r3, [r1, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	dc05      	bgt.n	800f544 <__sflush_r+0x20>
 800f538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dc02      	bgt.n	800f544 <__sflush_r+0x20>
 800f53e:	2000      	movs	r0, #0
 800f540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f546:	2e00      	cmp	r6, #0
 800f548:	d0f9      	beq.n	800f53e <__sflush_r+0x1a>
 800f54a:	2300      	movs	r3, #0
 800f54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f550:	682f      	ldr	r7, [r5, #0]
 800f552:	602b      	str	r3, [r5, #0]
 800f554:	d032      	beq.n	800f5bc <__sflush_r+0x98>
 800f556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	075a      	lsls	r2, r3, #29
 800f55c:	d505      	bpl.n	800f56a <__sflush_r+0x46>
 800f55e:	6863      	ldr	r3, [r4, #4]
 800f560:	1ac0      	subs	r0, r0, r3
 800f562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f564:	b10b      	cbz	r3, 800f56a <__sflush_r+0x46>
 800f566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f568:	1ac0      	subs	r0, r0, r3
 800f56a:	2300      	movs	r3, #0
 800f56c:	4602      	mov	r2, r0
 800f56e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f570:	6a21      	ldr	r1, [r4, #32]
 800f572:	4628      	mov	r0, r5
 800f574:	47b0      	blx	r6
 800f576:	1c43      	adds	r3, r0, #1
 800f578:	89a3      	ldrh	r3, [r4, #12]
 800f57a:	d106      	bne.n	800f58a <__sflush_r+0x66>
 800f57c:	6829      	ldr	r1, [r5, #0]
 800f57e:	291d      	cmp	r1, #29
 800f580:	d82c      	bhi.n	800f5dc <__sflush_r+0xb8>
 800f582:	4a2a      	ldr	r2, [pc, #168]	; (800f62c <__sflush_r+0x108>)
 800f584:	40ca      	lsrs	r2, r1
 800f586:	07d6      	lsls	r6, r2, #31
 800f588:	d528      	bpl.n	800f5dc <__sflush_r+0xb8>
 800f58a:	2200      	movs	r2, #0
 800f58c:	6062      	str	r2, [r4, #4]
 800f58e:	04d9      	lsls	r1, r3, #19
 800f590:	6922      	ldr	r2, [r4, #16]
 800f592:	6022      	str	r2, [r4, #0]
 800f594:	d504      	bpl.n	800f5a0 <__sflush_r+0x7c>
 800f596:	1c42      	adds	r2, r0, #1
 800f598:	d101      	bne.n	800f59e <__sflush_r+0x7a>
 800f59a:	682b      	ldr	r3, [r5, #0]
 800f59c:	b903      	cbnz	r3, 800f5a0 <__sflush_r+0x7c>
 800f59e:	6560      	str	r0, [r4, #84]	; 0x54
 800f5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5a2:	602f      	str	r7, [r5, #0]
 800f5a4:	2900      	cmp	r1, #0
 800f5a6:	d0ca      	beq.n	800f53e <__sflush_r+0x1a>
 800f5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5ac:	4299      	cmp	r1, r3
 800f5ae:	d002      	beq.n	800f5b6 <__sflush_r+0x92>
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	f7ff f985 	bl	800e8c0 <_free_r>
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	6360      	str	r0, [r4, #52]	; 0x34
 800f5ba:	e7c1      	b.n	800f540 <__sflush_r+0x1c>
 800f5bc:	6a21      	ldr	r1, [r4, #32]
 800f5be:	2301      	movs	r3, #1
 800f5c0:	4628      	mov	r0, r5
 800f5c2:	47b0      	blx	r6
 800f5c4:	1c41      	adds	r1, r0, #1
 800f5c6:	d1c7      	bne.n	800f558 <__sflush_r+0x34>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0c4      	beq.n	800f558 <__sflush_r+0x34>
 800f5ce:	2b1d      	cmp	r3, #29
 800f5d0:	d001      	beq.n	800f5d6 <__sflush_r+0xb2>
 800f5d2:	2b16      	cmp	r3, #22
 800f5d4:	d101      	bne.n	800f5da <__sflush_r+0xb6>
 800f5d6:	602f      	str	r7, [r5, #0]
 800f5d8:	e7b1      	b.n	800f53e <__sflush_r+0x1a>
 800f5da:	89a3      	ldrh	r3, [r4, #12]
 800f5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5e0:	81a3      	strh	r3, [r4, #12]
 800f5e2:	e7ad      	b.n	800f540 <__sflush_r+0x1c>
 800f5e4:	690f      	ldr	r7, [r1, #16]
 800f5e6:	2f00      	cmp	r7, #0
 800f5e8:	d0a9      	beq.n	800f53e <__sflush_r+0x1a>
 800f5ea:	0793      	lsls	r3, r2, #30
 800f5ec:	680e      	ldr	r6, [r1, #0]
 800f5ee:	bf08      	it	eq
 800f5f0:	694b      	ldreq	r3, [r1, #20]
 800f5f2:	600f      	str	r7, [r1, #0]
 800f5f4:	bf18      	it	ne
 800f5f6:	2300      	movne	r3, #0
 800f5f8:	eba6 0807 	sub.w	r8, r6, r7
 800f5fc:	608b      	str	r3, [r1, #8]
 800f5fe:	f1b8 0f00 	cmp.w	r8, #0
 800f602:	dd9c      	ble.n	800f53e <__sflush_r+0x1a>
 800f604:	6a21      	ldr	r1, [r4, #32]
 800f606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f608:	4643      	mov	r3, r8
 800f60a:	463a      	mov	r2, r7
 800f60c:	4628      	mov	r0, r5
 800f60e:	47b0      	blx	r6
 800f610:	2800      	cmp	r0, #0
 800f612:	dc06      	bgt.n	800f622 <__sflush_r+0xfe>
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f61a:	81a3      	strh	r3, [r4, #12]
 800f61c:	f04f 30ff 	mov.w	r0, #4294967295
 800f620:	e78e      	b.n	800f540 <__sflush_r+0x1c>
 800f622:	4407      	add	r7, r0
 800f624:	eba8 0800 	sub.w	r8, r8, r0
 800f628:	e7e9      	b.n	800f5fe <__sflush_r+0xda>
 800f62a:	bf00      	nop
 800f62c:	20400001 	.word	0x20400001

0800f630 <_fflush_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	690b      	ldr	r3, [r1, #16]
 800f634:	4605      	mov	r5, r0
 800f636:	460c      	mov	r4, r1
 800f638:	b913      	cbnz	r3, 800f640 <_fflush_r+0x10>
 800f63a:	2500      	movs	r5, #0
 800f63c:	4628      	mov	r0, r5
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	b118      	cbz	r0, 800f64a <_fflush_r+0x1a>
 800f642:	6983      	ldr	r3, [r0, #24]
 800f644:	b90b      	cbnz	r3, 800f64a <_fflush_r+0x1a>
 800f646:	f7ff f881 	bl	800e74c <__sinit>
 800f64a:	4b14      	ldr	r3, [pc, #80]	; (800f69c <_fflush_r+0x6c>)
 800f64c:	429c      	cmp	r4, r3
 800f64e:	d11b      	bne.n	800f688 <_fflush_r+0x58>
 800f650:	686c      	ldr	r4, [r5, #4]
 800f652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d0ef      	beq.n	800f63a <_fflush_r+0xa>
 800f65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f65c:	07d0      	lsls	r0, r2, #31
 800f65e:	d404      	bmi.n	800f66a <_fflush_r+0x3a>
 800f660:	0599      	lsls	r1, r3, #22
 800f662:	d402      	bmi.n	800f66a <_fflush_r+0x3a>
 800f664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f666:	f7ff f921 	bl	800e8ac <__retarget_lock_acquire_recursive>
 800f66a:	4628      	mov	r0, r5
 800f66c:	4621      	mov	r1, r4
 800f66e:	f7ff ff59 	bl	800f524 <__sflush_r>
 800f672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f674:	07da      	lsls	r2, r3, #31
 800f676:	4605      	mov	r5, r0
 800f678:	d4e0      	bmi.n	800f63c <_fflush_r+0xc>
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	059b      	lsls	r3, r3, #22
 800f67e:	d4dd      	bmi.n	800f63c <_fflush_r+0xc>
 800f680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f682:	f7ff f914 	bl	800e8ae <__retarget_lock_release_recursive>
 800f686:	e7d9      	b.n	800f63c <_fflush_r+0xc>
 800f688:	4b05      	ldr	r3, [pc, #20]	; (800f6a0 <_fflush_r+0x70>)
 800f68a:	429c      	cmp	r4, r3
 800f68c:	d101      	bne.n	800f692 <_fflush_r+0x62>
 800f68e:	68ac      	ldr	r4, [r5, #8]
 800f690:	e7df      	b.n	800f652 <_fflush_r+0x22>
 800f692:	4b04      	ldr	r3, [pc, #16]	; (800f6a4 <_fflush_r+0x74>)
 800f694:	429c      	cmp	r4, r3
 800f696:	bf08      	it	eq
 800f698:	68ec      	ldreq	r4, [r5, #12]
 800f69a:	e7da      	b.n	800f652 <_fflush_r+0x22>
 800f69c:	08012544 	.word	0x08012544
 800f6a0:	08012564 	.word	0x08012564
 800f6a4:	08012524 	.word	0x08012524

0800f6a8 <_lseek_r>:
 800f6a8:	b538      	push	{r3, r4, r5, lr}
 800f6aa:	4d07      	ldr	r5, [pc, #28]	; (800f6c8 <_lseek_r+0x20>)
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	4608      	mov	r0, r1
 800f6b0:	4611      	mov	r1, r2
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	602a      	str	r2, [r5, #0]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	f7f1 fc5a 	bl	8000f70 <_lseek>
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	d102      	bne.n	800f6c6 <_lseek_r+0x1e>
 800f6c0:	682b      	ldr	r3, [r5, #0]
 800f6c2:	b103      	cbz	r3, 800f6c6 <_lseek_r+0x1e>
 800f6c4:	6023      	str	r3, [r4, #0]
 800f6c6:	bd38      	pop	{r3, r4, r5, pc}
 800f6c8:	20008bbc 	.word	0x20008bbc

0800f6cc <__swhatbuf_r>:
 800f6cc:	b570      	push	{r4, r5, r6, lr}
 800f6ce:	460e      	mov	r6, r1
 800f6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d4:	2900      	cmp	r1, #0
 800f6d6:	b096      	sub	sp, #88	; 0x58
 800f6d8:	4614      	mov	r4, r2
 800f6da:	461d      	mov	r5, r3
 800f6dc:	da07      	bge.n	800f6ee <__swhatbuf_r+0x22>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	602b      	str	r3, [r5, #0]
 800f6e2:	89b3      	ldrh	r3, [r6, #12]
 800f6e4:	061a      	lsls	r2, r3, #24
 800f6e6:	d410      	bmi.n	800f70a <__swhatbuf_r+0x3e>
 800f6e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6ec:	e00e      	b.n	800f70c <__swhatbuf_r+0x40>
 800f6ee:	466a      	mov	r2, sp
 800f6f0:	f000 f8d8 	bl	800f8a4 <_fstat_r>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	dbf2      	blt.n	800f6de <__swhatbuf_r+0x12>
 800f6f8:	9a01      	ldr	r2, [sp, #4]
 800f6fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f702:	425a      	negs	r2, r3
 800f704:	415a      	adcs	r2, r3
 800f706:	602a      	str	r2, [r5, #0]
 800f708:	e7ee      	b.n	800f6e8 <__swhatbuf_r+0x1c>
 800f70a:	2340      	movs	r3, #64	; 0x40
 800f70c:	2000      	movs	r0, #0
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	b016      	add	sp, #88	; 0x58
 800f712:	bd70      	pop	{r4, r5, r6, pc}

0800f714 <__smakebuf_r>:
 800f714:	898b      	ldrh	r3, [r1, #12]
 800f716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f718:	079d      	lsls	r5, r3, #30
 800f71a:	4606      	mov	r6, r0
 800f71c:	460c      	mov	r4, r1
 800f71e:	d507      	bpl.n	800f730 <__smakebuf_r+0x1c>
 800f720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	6123      	str	r3, [r4, #16]
 800f728:	2301      	movs	r3, #1
 800f72a:	6163      	str	r3, [r4, #20]
 800f72c:	b002      	add	sp, #8
 800f72e:	bd70      	pop	{r4, r5, r6, pc}
 800f730:	ab01      	add	r3, sp, #4
 800f732:	466a      	mov	r2, sp
 800f734:	f7ff ffca 	bl	800f6cc <__swhatbuf_r>
 800f738:	9900      	ldr	r1, [sp, #0]
 800f73a:	4605      	mov	r5, r0
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7ff f90f 	bl	800e960 <_malloc_r>
 800f742:	b948      	cbnz	r0, 800f758 <__smakebuf_r+0x44>
 800f744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f748:	059a      	lsls	r2, r3, #22
 800f74a:	d4ef      	bmi.n	800f72c <__smakebuf_r+0x18>
 800f74c:	f023 0303 	bic.w	r3, r3, #3
 800f750:	f043 0302 	orr.w	r3, r3, #2
 800f754:	81a3      	strh	r3, [r4, #12]
 800f756:	e7e3      	b.n	800f720 <__smakebuf_r+0xc>
 800f758:	4b0d      	ldr	r3, [pc, #52]	; (800f790 <__smakebuf_r+0x7c>)
 800f75a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	6020      	str	r0, [r4, #0]
 800f760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f764:	81a3      	strh	r3, [r4, #12]
 800f766:	9b00      	ldr	r3, [sp, #0]
 800f768:	6163      	str	r3, [r4, #20]
 800f76a:	9b01      	ldr	r3, [sp, #4]
 800f76c:	6120      	str	r0, [r4, #16]
 800f76e:	b15b      	cbz	r3, 800f788 <__smakebuf_r+0x74>
 800f770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f774:	4630      	mov	r0, r6
 800f776:	f000 f8a7 	bl	800f8c8 <_isatty_r>
 800f77a:	b128      	cbz	r0, 800f788 <__smakebuf_r+0x74>
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	f023 0303 	bic.w	r3, r3, #3
 800f782:	f043 0301 	orr.w	r3, r3, #1
 800f786:	81a3      	strh	r3, [r4, #12]
 800f788:	89a0      	ldrh	r0, [r4, #12]
 800f78a:	4305      	orrs	r5, r0
 800f78c:	81a5      	strh	r5, [r4, #12]
 800f78e:	e7cd      	b.n	800f72c <__smakebuf_r+0x18>
 800f790:	0800e6e5 	.word	0x0800e6e5

0800f794 <__malloc_lock>:
 800f794:	4801      	ldr	r0, [pc, #4]	; (800f79c <__malloc_lock+0x8>)
 800f796:	f7ff b889 	b.w	800e8ac <__retarget_lock_acquire_recursive>
 800f79a:	bf00      	nop
 800f79c:	20008bc4 	.word	0x20008bc4

0800f7a0 <__malloc_unlock>:
 800f7a0:	4801      	ldr	r0, [pc, #4]	; (800f7a8 <__malloc_unlock+0x8>)
 800f7a2:	f7ff b884 	b.w	800e8ae <__retarget_lock_release_recursive>
 800f7a6:	bf00      	nop
 800f7a8:	20008bc4 	.word	0x20008bc4

0800f7ac <_realloc_r>:
 800f7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ae:	4607      	mov	r7, r0
 800f7b0:	4614      	mov	r4, r2
 800f7b2:	460e      	mov	r6, r1
 800f7b4:	b921      	cbnz	r1, 800f7c0 <_realloc_r+0x14>
 800f7b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f7ba:	4611      	mov	r1, r2
 800f7bc:	f7ff b8d0 	b.w	800e960 <_malloc_r>
 800f7c0:	b922      	cbnz	r2, 800f7cc <_realloc_r+0x20>
 800f7c2:	f7ff f87d 	bl	800e8c0 <_free_r>
 800f7c6:	4625      	mov	r5, r4
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7cc:	f000 f88c 	bl	800f8e8 <_malloc_usable_size_r>
 800f7d0:	42a0      	cmp	r0, r4
 800f7d2:	d20f      	bcs.n	800f7f4 <_realloc_r+0x48>
 800f7d4:	4621      	mov	r1, r4
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	f7ff f8c2 	bl	800e960 <_malloc_r>
 800f7dc:	4605      	mov	r5, r0
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d0f2      	beq.n	800f7c8 <_realloc_r+0x1c>
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	4622      	mov	r2, r4
 800f7e6:	f7fe fe3d 	bl	800e464 <memcpy>
 800f7ea:	4631      	mov	r1, r6
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	f7ff f867 	bl	800e8c0 <_free_r>
 800f7f2:	e7e9      	b.n	800f7c8 <_realloc_r+0x1c>
 800f7f4:	4635      	mov	r5, r6
 800f7f6:	e7e7      	b.n	800f7c8 <_realloc_r+0x1c>

0800f7f8 <_read_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4d07      	ldr	r5, [pc, #28]	; (800f818 <_read_r+0x20>)
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	4608      	mov	r0, r1
 800f800:	4611      	mov	r1, r2
 800f802:	2200      	movs	r2, #0
 800f804:	602a      	str	r2, [r5, #0]
 800f806:	461a      	mov	r2, r3
 800f808:	f7f1 fb52 	bl	8000eb0 <_read>
 800f80c:	1c43      	adds	r3, r0, #1
 800f80e:	d102      	bne.n	800f816 <_read_r+0x1e>
 800f810:	682b      	ldr	r3, [r5, #0]
 800f812:	b103      	cbz	r3, 800f816 <_read_r+0x1e>
 800f814:	6023      	str	r3, [r4, #0]
 800f816:	bd38      	pop	{r3, r4, r5, pc}
 800f818:	20008bbc 	.word	0x20008bbc

0800f81c <_raise_r>:
 800f81c:	291f      	cmp	r1, #31
 800f81e:	b538      	push	{r3, r4, r5, lr}
 800f820:	4604      	mov	r4, r0
 800f822:	460d      	mov	r5, r1
 800f824:	d904      	bls.n	800f830 <_raise_r+0x14>
 800f826:	2316      	movs	r3, #22
 800f828:	6003      	str	r3, [r0, #0]
 800f82a:	f04f 30ff 	mov.w	r0, #4294967295
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
 800f830:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f832:	b112      	cbz	r2, 800f83a <_raise_r+0x1e>
 800f834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f838:	b94b      	cbnz	r3, 800f84e <_raise_r+0x32>
 800f83a:	4620      	mov	r0, r4
 800f83c:	f000 f830 	bl	800f8a0 <_getpid_r>
 800f840:	462a      	mov	r2, r5
 800f842:	4601      	mov	r1, r0
 800f844:	4620      	mov	r0, r4
 800f846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f84a:	f000 b817 	b.w	800f87c <_kill_r>
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d00a      	beq.n	800f868 <_raise_r+0x4c>
 800f852:	1c59      	adds	r1, r3, #1
 800f854:	d103      	bne.n	800f85e <_raise_r+0x42>
 800f856:	2316      	movs	r3, #22
 800f858:	6003      	str	r3, [r0, #0]
 800f85a:	2001      	movs	r0, #1
 800f85c:	e7e7      	b.n	800f82e <_raise_r+0x12>
 800f85e:	2400      	movs	r4, #0
 800f860:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f864:	4628      	mov	r0, r5
 800f866:	4798      	blx	r3
 800f868:	2000      	movs	r0, #0
 800f86a:	e7e0      	b.n	800f82e <_raise_r+0x12>

0800f86c <raise>:
 800f86c:	4b02      	ldr	r3, [pc, #8]	; (800f878 <raise+0xc>)
 800f86e:	4601      	mov	r1, r0
 800f870:	6818      	ldr	r0, [r3, #0]
 800f872:	f7ff bfd3 	b.w	800f81c <_raise_r>
 800f876:	bf00      	nop
 800f878:	20000034 	.word	0x20000034

0800f87c <_kill_r>:
 800f87c:	b538      	push	{r3, r4, r5, lr}
 800f87e:	4d07      	ldr	r5, [pc, #28]	; (800f89c <_kill_r+0x20>)
 800f880:	2300      	movs	r3, #0
 800f882:	4604      	mov	r4, r0
 800f884:	4608      	mov	r0, r1
 800f886:	4611      	mov	r1, r2
 800f888:	602b      	str	r3, [r5, #0]
 800f88a:	f7f1 faf5 	bl	8000e78 <_kill>
 800f88e:	1c43      	adds	r3, r0, #1
 800f890:	d102      	bne.n	800f898 <_kill_r+0x1c>
 800f892:	682b      	ldr	r3, [r5, #0]
 800f894:	b103      	cbz	r3, 800f898 <_kill_r+0x1c>
 800f896:	6023      	str	r3, [r4, #0]
 800f898:	bd38      	pop	{r3, r4, r5, pc}
 800f89a:	bf00      	nop
 800f89c:	20008bbc 	.word	0x20008bbc

0800f8a0 <_getpid_r>:
 800f8a0:	f7f1 bae2 	b.w	8000e68 <_getpid>

0800f8a4 <_fstat_r>:
 800f8a4:	b538      	push	{r3, r4, r5, lr}
 800f8a6:	4d07      	ldr	r5, [pc, #28]	; (800f8c4 <_fstat_r+0x20>)
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	4608      	mov	r0, r1
 800f8ae:	4611      	mov	r1, r2
 800f8b0:	602b      	str	r3, [r5, #0]
 800f8b2:	f7f1 fb42 	bl	8000f3a <_fstat>
 800f8b6:	1c43      	adds	r3, r0, #1
 800f8b8:	d102      	bne.n	800f8c0 <_fstat_r+0x1c>
 800f8ba:	682b      	ldr	r3, [r5, #0]
 800f8bc:	b103      	cbz	r3, 800f8c0 <_fstat_r+0x1c>
 800f8be:	6023      	str	r3, [r4, #0]
 800f8c0:	bd38      	pop	{r3, r4, r5, pc}
 800f8c2:	bf00      	nop
 800f8c4:	20008bbc 	.word	0x20008bbc

0800f8c8 <_isatty_r>:
 800f8c8:	b538      	push	{r3, r4, r5, lr}
 800f8ca:	4d06      	ldr	r5, [pc, #24]	; (800f8e4 <_isatty_r+0x1c>)
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	4608      	mov	r0, r1
 800f8d2:	602b      	str	r3, [r5, #0]
 800f8d4:	f7f1 fb41 	bl	8000f5a <_isatty>
 800f8d8:	1c43      	adds	r3, r0, #1
 800f8da:	d102      	bne.n	800f8e2 <_isatty_r+0x1a>
 800f8dc:	682b      	ldr	r3, [r5, #0]
 800f8de:	b103      	cbz	r3, 800f8e2 <_isatty_r+0x1a>
 800f8e0:	6023      	str	r3, [r4, #0]
 800f8e2:	bd38      	pop	{r3, r4, r5, pc}
 800f8e4:	20008bbc 	.word	0x20008bbc

0800f8e8 <_malloc_usable_size_r>:
 800f8e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8ec:	1f18      	subs	r0, r3, #4
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	bfbc      	itt	lt
 800f8f2:	580b      	ldrlt	r3, [r1, r0]
 800f8f4:	18c0      	addlt	r0, r0, r3
 800f8f6:	4770      	bx	lr

0800f8f8 <_init>:
 800f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fa:	bf00      	nop
 800f8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8fe:	bc08      	pop	{r3}
 800f900:	469e      	mov	lr, r3
 800f902:	4770      	bx	lr

0800f904 <_fini>:
 800f904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f906:	bf00      	nop
 800f908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f90a:	bc08      	pop	{r3}
 800f90c:	469e      	mov	lr, r3
 800f90e:	4770      	bx	lr
